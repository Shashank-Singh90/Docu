[
  {
    "title": "Reference documentation",
    "content": "Back\nReference\nGet started\nGuides\nManuals\nReference documentation\nThis section includes the reference documentation for the Docker platform's\nvarious APIs, CLIs, drivers and specifications, and file formats.\nFile formats\nDockerfile\nDefines the contents and startup behavior of a single container.\nCompose file\nDefines a multi-container application.\nCommand-line interfaces (CLIs)\nDocker CLI\nThe main Docker CLI, includes all\ndocker\ncommands.\nCompose CLI\nThe CLI for Docker Compose, for building and running multi-container applications.\nDaemon CLI (dockerd)\nPersistent process that manages containers.\nApplication programming interfaces (APIs)\nEngine API\nThe main API for Docker, provides programmatic access to a daemon.\nDocker Hub API\nAPI to interact with Docker Hub.\nDVP Data API\nAPI for Docker Verified Publishers to fetch analytics data.\nRegistry API\nAPI for Docker Registry.",
    "url": "https://docs.docker.com/reference/",
    "source": "docker",
    "doc_type": "api_reference",
    "scraped_at": 31775.2296368
  },
  {
    "title": "Get started",
    "content": "Back\nGet started\nGuides\nManuals\nReference\nGet started\nIf you're new to Docker, this section guides you through the essential resources to get started.\nFollow the guides to help you get started and learn how Docker can optimize your development workflows.\nFor more advanced concepts and scenarios in Docker, see\nGuides\n.\nFoundations of Docker\nInstall Docker and jump into discovering what Docker is.\nGet Docker\nChoose the best installation path for your setup.\nWhat is Docker?\nLearn about the Docker platform.\nLearn the foundational concepts and workflows of Docker.\nIntroduction\nGet started with the basics and the benefits of containerizing your applications.\nDocker concepts\nGain a better understanding of foundational Docker concepts.\nDocker workshop\nGet guided through a 45-minute workshop to learn about Docker.",
    "url": "https://docs.docker.com/get-started/",
    "source": "docker",
    "doc_type": "tutorial",
    "scraped_at": 31775.3787592
  },
  {
    "title": "Docker Compose",
    "content": "Back\nManuals\nGet started\nGuides\nReference\nDocker Compose\nPage options\nCopy page as Markdown for LLMs\nView page as plain text\nAsk questions with Docs AI\nClaude\nOpen in Claude\nDocker Compose is a tool for defining and running multi-container applications.\nIt is the key to unlocking a streamlined and efficient development and deployment experience.\nCompose simplifies the control of your entire application stack, making it easy to manage services, networks, and volumes in a single YAML configuration file. Then, with a single command, you create and start all the services\nfrom your configuration file.\nCompose works in all environments - production, staging, development, testing, as\nwell as CI workflows. It also has commands for managing the whole lifecycle of your application:\nStart, stop, and rebuild services\nView the status of running services\nStream the log output of running services\nRun a one-off command on a service\nWhy use Compose?\nUnderstand Docker Compose's key benefits\nHow Compose works\nUnderstand how Compose works\nInstall Compose\nFollow the instructions on how to install Docker Compose.\nQuickstart\nLearn the key concepts of Docker Compose whilst building a simple Python web application.\nView the release notes\nFind out about the latest enhancements and bug fixes.\nExplore the Compose file reference\nFind information on defining services, networks, and volumes for a Docker application.\nUse Compose Bridge\nTransform your Compose configuration file into configuration files for different platforms, such as Kubernetes.\nBrowse common FAQs\nExplore general FAQs and find out how to give feedback.\nMigrate to Compose v2\nLearn how to migrate from Compose v1 to v2\nEdit this page\nRequest changes",
    "url": "https://docs.docker.com/compose/",
    "source": "docker",
    "doc_type": "compose",
    "scraped_at": 31775.5759469
  },
  {
    "title": "Docker guides",
    "content": "Back\nGuides\nGet started\nManuals\nReference\nFilter guides by tag or programming language.\nTags\nAdministration\nAI\nApp development\nCloud services\nData science\nDatabases\nDeployment\nDevOps\nDistributed systems\nFrameworks\nNetworking\nProduct demo\nLanguages\nC#\nC++\nGo\nJava\nJavaScript\nPHP\nPython\nR\nRuby\nRust\nDocker guides\nExplore our collection of guides to learn how Docker can optimize your\ndevelopment workflows and how to use it with specific languages, frameworks, or\ntechnologies.\nCan't find the guide you're looking for? Open an issue on the\ndocker/docs\nrepository to let us\nknow.\nFeatured guides\nSet up your company for success with Docker\nGet the most out of Docker by streamlining workflows, standardizing development environments, and ensuring smooth deployments across your company.\nAdministration\n20 minutes\nDocker Build Cloud: Reclaim your time with fast, multi-architecture builds\nBuild applications up to 39x faster using cloud-based resources, shared team\ncache, and native multi-architecture support.\nProduct demo\n10 minutes\nSecuring your software supply chain with Docker Scout\nEnhance container security by automating vulnerability detection and\nremediation.\nProduct demo\n20 minutes\nMastering multi-platform builds, testing, and more with Docker Buildx Bake\nLearn to automate Docker builds and testing with declarative configurations using Buildx Bake.\nGo\nDevOps\n30 minutes\nMastering user and access management\nSimplify user access while ensuring security and efficiency in Docker.\nAdministration\n20 minutes\nMastering Testcontainers Cloud by Docker: streamlining integration testing with containers\nAutomate, scale, and optimize testing workflows with Testcontainers Cloud\nProduct demo\n12 minutes\nAll guides\nFiltered results: showing\nout of\nguides.\nAdministration\nAI\nApp development\nBest practices\nCloud services\nData science\nDatabases\nDeployment\nDevOps\nDistributed systems\nFAQ\nFrameworks\nNetworking\nProduct demo\nRelease notes\nSecrets\nTroubleshooting\nC#\nC++\nGo\nJava\nJavaScript\nPHP\nPython\nR\nRuby\nRust\nSet up your company for success with Docker\nAdministration\n20 minutes\nBuild and run agentic AI applications with Docker\nAI\n30 minutes\nAngular language-specific guide\nJavaScript\n20 minutes\nDevelop and test AWS Cloud applications using LocalStack and Docker\nJavaScript\nCloud services\n20 minutes\nIntroduction to Azure Pipelines with Docker\nDevOps\n10 minutes\nBuilding Compose projects with Bake\nDevOps\n20 minutes\nBun language-specific guide\nJavaScript\n10 minutes\n.NET language-specific guide\nC#\n20 minutes\nC++ language-specific guide\nC++\n20 minutes\nFaster development and testing with container-supported development\nApp development\n20 minutes\nData science with JupyterLab\nPython\nData science\n20 minutes\nDeno language-specific guide\nJavaScript\n10 minutes\nDeploy to Kubernetes\nDeployment\n10 minutes\nDeploy to Swarm\nDeployment\n10 minutes\nDeployment and orchestration\nDeployment\n10 minutes\nDocker Build Cloud: Reclaim your time with fast, multi-architecture builds\nProduct demo\n10 minutes\nDefining and running multi-container applications with Docker Compose\nProduct demo\n10 minutes\nSecuring your software supply chain with Docker Scout\nProduct demo\n20 minutes\nDeveloping event-driven applications with Kafka and Docker\nJavaScript\nDistributed systems\n20 minutes\nFace detection with TensorFlow.js\nJavaScript\nAI\n20 minutes\nIntroduction to GitHub Actions with Docker\nDevOps\n10 minutes\nGo language-specific guide\nGo\n30 minutes\nHTTP routing with Traefik\nNetworking\n20 minutes\nJava language-specific guide\nJava\n20 minutes\nBuild a language translation app\nPython\nAI\n20 minutes\nDevelop and Deploy Laravel applications with Docker Compose\nPHP\nFrameworks\n30 minutes\nLeveraging RAG in GenAI to teach new information\nAI\n35 minutes\nMastering multi-platform builds, testing, and more with Docker Buildx Bake\nGo\nDevOps\n30 minutes\nMastering user and access management\nAdministration\n20 minutes\nMocking API services in development and testing with WireMock\nJavaScript\nApp development\nDistributed systems\n20 minutes\nMocking OAuth services in testing with Dex\nApp development\nDistributed systems\n10 minutes\nMonitor a Golang application with Prometheus and Grafana\nGo\n45 minutes\nBuild a named entity recognition app\nPython\nAI\n20 minutes\nNode.js language-specific guide\nJavaScript\n20 minutes\nPDF analysis and chat\nAI\n20 minutes\nPHP language-specific guide\nPHP\n20 minutes\nPre-seeding database with schema and data at startup for development environment\nApp development\nDatabases\n20 minutes\nPython language-specific guide\nPython\n20 minutes\nR language-specific guide\nR\n10 minutes\nBuild a RAG application using Ollama and Docker\nAI\n20 minutes\nReact.js language-specific guide\nJavaScript\n20 minutes\nRuby on Rails language-specific guide\nRuby\nFrameworks\n20 minutes\nRust language-specific guide\nRust\n20 minutes\nBuild a sentiment analysis app\nPython\nAI\n20 minutes\nMastering Testcontainers Cloud by Docker: streamlining integration testing with containers\nProduct demo\n12 minutes\nBuild a text recognition app\nPython\nAI\n20 minutes\nBuild a text summarization app\nPython\nAI\n20 minutes\nUse containerized databases\nDatabases\n20 minutes\nUsing Docker with Zscaler\nNetworking\nAdministration\n10 minutes\nGenAI video transcription and chat\nAI\n20 minutes",
    "url": "https://docs.docker.com/guides/",
    "source": "docker",
    "doc_type": "guide",
    "scraped_at": 31775.834692
  },
  {
    "title": "Docker Engine",
    "content": "Back\nManuals\nGet started\nGuides\nReference\nDocker Engine\nPage options\nCopy page as Markdown for LLMs\nView page as plain text\nAsk questions with Docs AI\nClaude\nOpen in Claude\nTable of contents\nDocker Engine is an open source containerization technology for building and\ncontainerizing your applications. Docker Engine acts as a client-server\napplication with:\nA server with a long-running daemon process\ndockerd\n.\nAPIs which specify interfaces that programs can use to talk to and instruct\nthe Docker daemon.\nA command line interface (CLI) client\ndocker\n.\nThe CLI uses\nDocker APIs\nto control or interact with the Docker\ndaemon through scripting or direct CLI commands. Many other Docker applications\nuse the underlying API and CLI. The daemon creates and manages Docker objects,\nsuch as images, containers, networks, and volumes.\nFor more details, see\nDocker Architecture\n.\nInstall Docker Engine\nLearn how to install the open source Docker Engine for your distribution.\nStorage\nUse persistent data with Docker containers.\nNetworking\nManage network connections between containers.\nContainer logs\nLearn how to view and read container logs.\nPrune\nTidy up unused resources.\nConfigure the daemon\nDelve into the configuration options of the Docker daemon.\nRootless mode\nRun Docker without root privileges.\nDeprecated features\nFind out what features of Docker Engine you should stop using.\nRelease notes\nRead the release notes for the latest version.\nLicensing\nThe Docker Engine is licensed under the Apache License, Version 2.0. See\nLICENSE\nfor the full license\ntext.\nHowever, for commercial use of Docker Engine obtained via Docker Desktop within larger enterprises (exceeding 250 employees OR with annual revenue surpassing $10 million USD), a\npaid subscription\nis required.\nEdit this page\nRequest changes\nTable of contents",
    "url": "https://docs.docker.com/engine/",
    "source": "docker",
    "doc_type": "engine",
    "scraped_at": 31776.1047674
  }
]