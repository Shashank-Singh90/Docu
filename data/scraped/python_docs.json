[
  {
    "title": "The Python Standard Library¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n|\nTheme\nAuto\nLight\nDark\n|\nThe Python Standard Library\n¶\nWhile\nThe Python Language Reference\ndescribes the exact syntax and\nsemantics of the Python language, this library reference manual\ndescribes the standard library that is distributed with Python. It also\ndescribes some of the optional components that are commonly included\nin Python distributions.\nPython’s standard library is very extensive, offering a wide range of\nfacilities as indicated by the long table of contents listed below. The\nlibrary contains built-in modules (written in C) that provide access to\nsystem functionality such as file I/O that would otherwise be\ninaccessible to Python programmers, as well as modules written in Python\nthat provide standardized solutions for many problems that occur in\neveryday programming. Some of these modules are explicitly designed to\nencourage and enhance the portability of Python programs by abstracting\naway platform-specifics into platform-neutral APIs.\nThe Python installers for the Windows platform usually include\nthe entire standard library and often also include many additional\ncomponents. For Unix-like operating systems Python is normally provided\nas a collection of packages, so it may be necessary to use the packaging\ntools provided with the operating system to obtain some or all of the\noptional components.\nIn addition to the standard library, there is an active collection of\nhundreds of thousands of components (from individual programs and modules to\npackages and entire application development frameworks), available from\nthe\nPython Package Index\n.\nIntroduction\nNotes on availability\nBuilt-in Functions\nBuilt-in Constants\nConstants added by the\nsite\nmodule\nBuilt-in Types\nTruth Value Testing\nBoolean Operations —\nand\n,\nor\n,\nnot\nComparisons\nNumeric Types —\nint\n,\nfloat\n,\ncomplex\nBoolean Type -\nbool\nIterator Types\nSequence Types —\nlist\n,\ntuple\n,\nrange\nText Sequence Type —\nstr\nBinary Sequence Types —\nbytes\n,\nbytearray\n,\nmemoryview\nSet Types —\nset\n,\nfrozenset\nMapping Types —\ndict\nContext Manager Types\nType Annotation Types —\nGeneric Alias\n,\nUnion\nOther Built-in Types\nSpecial Attributes\nInteger string conversion length limitation\nBuilt-in Exceptions\nException context\nInheriting from built-in exceptions\nBase classes\nConcrete exceptions\nWarnings\nException groups\nException hierarchy\nText Processing Services\nstring\n— Common string operations\nre\n— Regular expression operations\ndifflib\n— Helpers for computing deltas\ntextwrap\n— Text wrapping and filling\nunicodedata\n— Unicode Database\nstringprep\n— Internet String Preparation\nreadline\n— GNU readline interface\nrlcompleter\n— Completion function for GNU readline\nBinary Data Services\nstruct\n— Interpret bytes as packed binary data\ncodecs\n— Codec registry and base classes\nData Types\ndatetime\n— Basic date and time types\nzoneinfo\n— IANA time zone support\ncalendar\n— General calendar-related functions\ncollections\n— Container datatypes\ncollections.abc\n— Abstract Base Classes for Containers\nheapq\n— Heap queue algorithm\nbisect\n— Array bisection algorithm\narray\n— Efficient arrays of numeric values\nweakref\n— Weak references\ntypes\n— Dynamic type creation and names for built-in types\ncopy\n— Shallow and deep copy operations\npprint\n— Data pretty printer\nreprlib\n— Alternate\nrepr()\nimplementation\nenum\n— Support for enumerations\ngraphlib\n— Functionality to operate with graph-like structures\nNumeric and Mathematical Modules\nnumbers\n— Numeric abstract base classes\nmath\n— Mathematical functions\ncmath\n— Mathematical functions for complex numbers\ndecimal\n— Decimal fixed-point and floating-point arithmetic\nfractions\n— Rational numbers\nrandom\n— Generate pseudo-random numbers\nstatistics\n— Mathematical statistics functions\nFunctional Programming Modules\nitertools\n— Functions creating iterators for efficient looping\nfunctools\n— Higher-order functions and operations on callable objects\noperator\n— Standard operators as functions\nFile and Directory Access\npathlib\n— Object-oriented filesystem paths\nos.path\n— Common pathname manipulations\nstat\n— Interpreting\nstat()\nresults\nfilecmp\n— File and Directory Comparisons\ntempfile\n— Generate temporary files and directories\nglob\n— Unix style pathname pattern expansion\nfnmatch\n— Unix filename pattern matching\nlinecache\n— Random access to text lines\nshutil\n— High-level file operations\nData Persistence\npickle\n— Python object serialization\ncopyreg\n— Register\npickle\nsupport functions\nshelve\n— Python object persistence\nmarshal\n— Internal Python object serialization\ndbm\n— Interfaces to Unix “databases”\nsqlite3\n— DB-API 2.0 interface for SQLite databases\nData Compression and Archiving\nzlib\n— Compression compatible with\ngzip\ngzip\n— Support for\ngzip\nfiles\nbz2\n— Support for\nbzip2\ncompression\nlzma\n— Compression using the LZMA algorithm\nzipfile\n— Work with ZIP archives\ntarfile\n— Read and write tar archive files\nFile Formats\ncsv\n— CSV File Reading and Writing\nconfigparser\n— Configuration file parser\ntomllib\n— Parse TOML files\nnetrc\n— netrc file processing\nplistlib\n— Generate and parse Apple\n.plist\nfiles\nCryptographic Services\nhashlib\n— Secure hashes and message digests\nhmac\n— Keyed-Hashing for Message Authentication\nsecrets\n— Generate secure random numbers for managing secrets\nGeneric Operating System Services\nos\n— Miscellaneous operating system interfaces\nio\n— Core tools for working with streams\ntime\n— Time access and conversions\nlogging\n— Logging facility for Python\nlogging.config\n— Logging configuration\nlogging.handlers\n— Logging handlers\nplatform\n—  Access to underlying platform’s identifying data\nerrno\n— Standard errno system symbols\nctypes\n— A foreign function library for Python\nCommand Line Interface Libraries\nargparse\n— Parser for command-line options, arguments and subcommands\noptparse\n— Parser for command line options\ngetpass\n— Portable password input\nfileinput\n— Iterate over lines from multiple input streams\ncurses\n— Terminal handling for character-cell displays\ncurses.textpad\n— Text input widget for curses programs\ncurses.ascii\n— Utilities for ASCII characters\ncurses.panel\n— A panel stack extension for curses\nConcurrent Execution\nthreading\n— Thread-based parallelism\nmultiprocessing\n— Process-based parallelism\nmultiprocessing.shared_memory\n— Shared memory for direct access across processes\nThe\nconcurrent\npackage\nconcurrent.futures\n— Launching parallel tasks\nsubprocess\n— Subprocess management\nsched\n— Event scheduler\nqueue\n— A synchronized queue class\ncontextvars\n— Context Variables\n_thread\n— Low-level threading API\nNetworking and Interprocess Communication\nasyncio\n— Asynchronous I/O\nsocket\n— Low-level networking interface\nssl\n— TLS/SSL wrapper for socket objects\nselect\n— Waiting for I/O completion\nselectors\n— High-level I/O multiplexing\nsignal\n— Set handlers for asynchronous events\nmmap\n— Memory-mapped file support\nInternet Data Handling\nemail\n— An email and MIME handling package\njson\n— JSON encoder and decoder\nmailbox\n— Manipulate mailboxes in various formats\nmimetypes\n— Map filenames to MIME types\nbase64\n— Base16, Base32, Base64, Base85 Data Encodings\nbinascii\n— Convert between binary and ASCII\nquopri\n— Encode and decode MIME quoted-printable data\nStructured Markup Processing Tools\nhtml\n— HyperText Markup Language support\nhtml.parser\n— Simple HTML and XHTML parser\nhtml.entities\n— Definitions of HTML general entities\nXML Processing Modules\nxml.etree.ElementTree\n— The ElementTree XML API\nxml.dom\n— The Document Object Model API\nxml.dom.minidom\n— Minimal DOM implementation\nxml.dom.pulldom\n— Support for building partial DOM trees\nxml.sax\n— Support for SAX2 parsers\nxml.sax.handler\n— Base classes for SAX handlers\nxml.sax.saxutils\n— SAX Utilities\nxml.sax.xmlreader\n— Interface for XML parsers\nxml.parsers.expat\n— Fast XML parsing using Expat\nInternet Protocols and Support\nwebbrowser\n— Convenient web-browser controller\nwsgiref\n— WSGI Utilities and Reference Implementation\nurllib\n— URL handling modules\nurllib.request\n— Extensible library for opening URLs\nurllib.response\n— Response classes used by urllib\nurllib.parse\n— Parse URLs into components\nurllib.error\n— Exception classes raised by urllib.request\nurllib.robotparser\n—  Parser for robots.txt\nhttp\n— HTTP modules\nhttp.client\n— HTTP protocol client\nftplib\n— FTP protocol client\npoplib\n— POP3 protocol client\nimaplib\n— IMAP4 protocol client\nsmtplib\n— SMTP protocol client\nuuid\n— UUID objects according to\nRFC 4122\nsocketserver\n— A framework for network servers\nhttp.server\n— HTTP servers\nhttp.cookies\n— HTTP state management\nhttp.cookiejar\n— Cookie handling for HTTP clients\nxmlrpc\n— XMLRPC server and client modules\nxmlrpc.client\n— XML-RPC client access\nxmlrpc.server\n— Basic XML-RPC servers\nipaddress\n— IPv4/IPv6 manipulation library\nMultimedia Services\nwave\n— Read and write WAV files\ncolorsys\n— Conversions between color systems\nInternationalization\ngettext\n— Multilingual internationalization services\nlocale\n— Internationalization services\nProgram Frameworks\nturtle\n— Turtle graphics\ncmd\n— Support for line-oriented command interpreters\nshlex\n— Simple lexical analysis\nGraphical User Interfaces with Tk\ntkinter\n— Python interface to Tcl/Tk\ntkinter.colorchooser\n— Color choosing dialog\ntkinter.font\n— Tkinter font wrapper\nTkinter Dialogs\ntkinter.messagebox\n— Tkinter message prompts\ntkinter.scrolledtext\n— Scrolled Text Widget\ntkinter.dnd\n— Drag and drop support\ntkinter.ttk\n— Tk themed widgets\nIDLE — Python editor and shell\nDevelopment Tools\ntyping\n— Support for type hints\npydoc\n— Documentation generator and online help system\nPython Development Mode\ndoctest\n— Test interactive Python examples\nunittest\n— Unit testing framework\nunittest.mock\n— mock object library\nunittest.mock\n— getting started\ntest\n— Regression tests package for Python\ntest.support\n— Utilities for the Python test suite\ntest.support.socket_helper\n— Utilities for socket tests\ntest.support.script_helper\n— Utilities for the Python execution tests\ntest.support.bytecode_helper\n— Support tools for testing correct bytecode generation\ntest.support.threading_helper\n— Utilities for threading tests\ntest.support.os_helper\n— Utilities for os tests\ntest.support.import_helper\n— Utilities for import tests\ntest.support.warnings_helper\n— Utilities for warnings tests\nDebugging and Profiling\nAudit events table\nbdb\n— Debugger framework\nfaulthandler\n— Dump the Python traceback\npdb\n— The Python Debugger\nThe Python Profilers\ntimeit\n— Measure execution time of small code snippets\ntrace\n— Trace or track Python statement execution\ntracemalloc\n— Trace memory allocations\nSoftware Packaging and Distribution\nensurepip\n— Bootstrapping the\npip\ninstaller\nvenv\n— Creation of virtual environments\nzipapp\n— Manage executable Python zip archives\nPython Runtime Services\nsys\n— System-specific parameters and functions\nsys.monitoring\n— Execution event monitoring\nsysconfig\n— Provide access to Python’s configuration information\nbuiltins\n— Built-in objects\n__main__\n— Top-level code environment\nwarnings\n— Warning control\ndataclasses\n— Data Classes\ncontextlib\n— Utilities for\nwith\n-statement contexts\nabc\n— Abstract Base Classes\natexit\n— Exit handlers\ntraceback\n— Print or retrieve a stack traceback\n__future__\n— Future statement definitions\ngc\n— Garbage Collector interface\ninspect\n— Inspect live objects\nsite\n— Site-specific configuration hook\nCustom Python Interpreters\ncode\n— Interpreter base classes\ncodeop\n— Compile Python code\nImporting Modules\nzipimport\n— Import modules from Zip archives\npkgutil\n— Package extension utility\nmodulefinder\n— Find modules used by a script\nrunpy\n— Locating and executing Python modules\nimportlib\n— The implementation of\nimport\nimportlib.resources\n– Package resource reading, opening and access\nimportlib.resources.abc\n– Abstract base classes for resources\nimportlib.metadata\n– Accessing package metadata\nThe initialization of the\nsys.path\nmodule search path\nPython Language Services\nast\n— Abstract Syntax Trees\nsymtable\n— Access to the compiler’s symbol tables\ntoken\n— Constants used with Python parse trees\nkeyword\n— Testing for Python keywords\ntokenize\n— Tokenizer for Python source\ntabnanny\n— Detection of ambiguous indentation\npyclbr\n— Python module browser support\npy_compile\n— Compile Python source files\ncompileall\n— Byte-compile Python libraries\ndis\n— Disassembler for Python bytecode\npickletools\n— Tools for pickle developers\nMS Windows Specific Services\nmsvcrt\n— Useful routines from the MS VC++ runtime\nwinreg\n— Windows registry access\nwinsound\n— Sound-playing interface for Windows\nUnix Specific Services\nposix\n— The most common POSIX system calls\npwd\n— The password database\ngrp\n— The group database\ntermios\n— POSIX style tty control\ntty\n— Terminal control functions\npty\n— Pseudo-terminal utilities\nfcntl\n— The\nfcntl\nand\nioctl\nsystem calls\nresource\n— Resource usage information\nsyslog\n— Unix syslog library routines\nModules command-line interface (CLI)\nSuperseded Modules\ngetopt\n— C-style parser for command line options\nRemoved Modules\nSecurity Considerations\nPrevious topic\n10.\nFull Grammar specification\nNext topic\nIntroduction\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/index.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12341.993853
  },
  {
    "title": "The Python Tutorial¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n|\nTheme\nAuto\nLight\nDark\n|\nThe Python Tutorial\n¶\nTip\nThis tutorial is designed for\nprogrammers\nthat are new to the Python language,\nnot\nbeginners\nwho are new to programming.\nPython is an easy to learn, powerful programming language. It has efficient\nhigh-level data structures and a simple but effective approach to\nobject-oriented programming. Python’s elegant syntax and dynamic typing,\ntogether with its interpreted nature, make it an ideal language for scripting\nand rapid application development in many areas on most platforms.\nThe Python interpreter and the extensive standard library are freely available\nin source or binary form for all major platforms from the Python web site,\nhttps://www.python.org/\n, and may be freely distributed. The same site also\ncontains distributions of and pointers to many free third party Python modules,\nprograms and tools, and additional documentation.\nThe Python interpreter is easily extended with new functions and data types\nimplemented in C or C++ (or other languages callable from C). Python is also\nsuitable as an extension language for customizable applications.\nThis tutorial introduces the reader informally to the basic concepts and\nfeatures of the Python language and system. Be aware that it expects you to\nhave a basic understanding of programming in general. It helps to have a Python\ninterpreter handy for hands-on experience, but all examples are self-contained,\nso the tutorial can be read off-line as well.\nFor a description of standard objects and modules, see\nThe Python Standard Library\n.\nThe Python Language Reference\ngives a more formal definition of the language.  To write\nextensions in C or C++, read\nExtending and Embedding the Python Interpreter\nand\nPython/C API Reference Manual\n. There are also several books covering Python in depth.\nThis tutorial does not attempt to be comprehensive and cover every single\nfeature, or even every commonly used feature. Instead, it introduces many of\nPython’s most noteworthy features, and will give you a good idea of the\nlanguage’s flavor and style. After reading it, you will be able to read and\nwrite Python modules and programs, and you will be ready to learn more about the\nvarious Python library modules described in\nThe Python Standard Library\n.\nThe\nGlossary\nis also worth going through.\n1. Whetting Your Appetite\n2. Using the Python Interpreter\n2.1. Invoking the Interpreter\n2.1.1. Argument Passing\n2.1.2. Interactive Mode\n2.2. The Interpreter and Its Environment\n2.2.1. Source Code Encoding\n3. An Informal Introduction to Python\n3.1. Using Python as a Calculator\n3.1.1. Numbers\n3.1.2. Text\n3.1.3. Lists\n3.2. First Steps Towards Programming\n4. More Control Flow Tools\n4.1.\nif\nStatements\n4.2.\nfor\nStatements\n4.3. The\nrange()\nFunction\n4.4.\nbreak\nand\ncontinue\nStatements\n4.5.\nelse\nClauses on Loops\n4.6.\npass\nStatements\n4.7.\nmatch\nStatements\n4.8. Defining Functions\n4.9. More on Defining Functions\n4.9.1. Default Argument Values\n4.9.2. Keyword Arguments\n4.9.3. Special parameters\n4.9.3.1. Positional-or-Keyword Arguments\n4.9.3.2. Positional-Only Parameters\n4.9.3.3. Keyword-Only Arguments\n4.9.3.4. Function Examples\n4.9.3.5. Recap\n4.9.4. Arbitrary Argument Lists\n4.9.5. Unpacking Argument Lists\n4.9.6. Lambda Expressions\n4.9.7. Documentation Strings\n4.9.8. Function Annotations\n4.10. Intermezzo: Coding Style\n5. Data Structures\n5.1. More on Lists\n5.1.1. Using Lists as Stacks\n5.1.2. Using Lists as Queues\n5.1.3. List Comprehensions\n5.1.4. Nested List Comprehensions\n5.2. The\ndel\nstatement\n5.3. Tuples and Sequences\n5.4. Sets\n5.5. Dictionaries\n5.6. Looping Techniques\n5.7. More on Conditions\n5.8. Comparing Sequences and Other Types\n6. Modules\n6.1. More on Modules\n6.1.1. Executing modules as scripts\n6.1.2. The Module Search Path\n6.1.3. “Compiled” Python files\n6.2. Standard Modules\n6.3. The\ndir()\nFunction\n6.4. Packages\n6.4.1. Importing * From a Package\n6.4.2. Intra-package References\n6.4.3. Packages in Multiple Directories\n7. Input and Output\n7.1. Fancier Output Formatting\n7.1.1. Formatted String Literals\n7.1.2. The String format() Method\n7.1.3. Manual String Formatting\n7.1.4. Old string formatting\n7.2. Reading and Writing Files\n7.2.1. Methods of File Objects\n7.2.2. Saving structured data with\njson\n8. Errors and Exceptions\n8.1. Syntax Errors\n8.2. Exceptions\n8.3. Handling Exceptions\n8.4. Raising Exceptions\n8.5. Exception Chaining\n8.6. User-defined Exceptions\n8.7. Defining Clean-up Actions\n8.8. Predefined Clean-up Actions\n8.9. Raising and Handling Multiple Unrelated Exceptions\n8.10. Enriching Exceptions with Notes\n9. Classes\n9.1. A Word About Names and Objects\n9.2. Python Scopes and Namespaces\n9.2.1. Scopes and Namespaces Example\n9.3. A First Look at Classes\n9.3.1. Class Definition Syntax\n9.3.2. Class Objects\n9.3.3. Instance Objects\n9.3.4. Method Objects\n9.3.5. Class and Instance Variables\n9.4. Random Remarks\n9.5. Inheritance\n9.5.1. Multiple Inheritance\n9.6. Private Variables\n9.7. Odds and Ends\n9.8. Iterators\n9.9. Generators\n9.10. Generator Expressions\n10. Brief Tour of the Standard Library\n10.1. Operating System Interface\n10.2. File Wildcards\n10.3. Command Line Arguments\n10.4. Error Output Redirection and Program Termination\n10.5. String Pattern Matching\n10.6. Mathematics\n10.7. Internet Access\n10.8. Dates and Times\n10.9. Data Compression\n10.10. Performance Measurement\n10.11. Quality Control\n10.12. Batteries Included\n11. Brief Tour of the Standard Library — Part II\n11.1. Output Formatting\n11.2. Templating\n11.3. Working with Binary Data Record Layouts\n11.4. Multi-threading\n11.5. Logging\n11.6. Weak References\n11.7. Tools for Working with Lists\n11.8. Decimal Floating-Point Arithmetic\n12. Virtual Environments and Packages\n12.1. Introduction\n12.2. Creating Virtual Environments\n12.3. Managing Packages with pip\n13. What Now?\n14. Interactive Input Editing and History Substitution\n14.1. Tab Completion and History Editing\n14.2. Alternatives to the Interactive Interpreter\n15. Floating-Point Arithmetic:  Issues and Limitations\n15.1. Representation Error\n16. Appendix\n16.1. Interactive Mode\n16.1.1. Error Handling\n16.1.2. Executable Python Scripts\n16.1.3. The Interactive Startup File\n16.1.4. The Customization Modules\nPrevious topic\nChangelog\nNext topic\n1.\nWhetting Your Appetite\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/tutorial/index.html",
    "source": "python",
    "doc_type": "tutorial",
    "scraped_at": 12342.103206
  },
  {
    "title": "The Python Language Reference¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n|\nTheme\nAuto\nLight\nDark\n|\nThe Python Language Reference\n¶\nThis reference manual describes the syntax and “core semantics” of the\nlanguage. It is terse, but attempts to be exact and complete. The semantics of\nnon-essential built-in object types and of the built-in functions and modules\nare described in\nThe Python Standard Library\n. For an informal introduction to the\nlanguage, see\nThe Python Tutorial\n. For C or C++ programmers, two additional\nmanuals exist:\nExtending and Embedding the Python Interpreter\ndescribes the high-level picture of how to\nwrite a Python extension module, and the\nPython/C API Reference Manual\ndescribes the\ninterfaces available to C/C++ programmers in detail.\n1. Introduction\n1.1. Alternate Implementations\n1.2. Notation\n2. Lexical analysis\n2.1. Line structure\n2.2. Other tokens\n2.3. Identifiers and keywords\n2.4. Literals\n2.5. Operators\n2.6. Delimiters\n3. Data model\n3.1. Objects, values and types\n3.2. The standard type hierarchy\n3.3. Special method names\n3.4. Coroutines\n4. Execution model\n4.1. Structure of a program\n4.2. Naming and binding\n4.3. Exceptions\n5. The import system\n5.1.\nimportlib\n5.2. Packages\n5.3. Searching\n5.4. Loading\n5.5. The Path Based Finder\n5.6. Replacing the standard import system\n5.7. Package Relative Imports\n5.8. Special considerations for __main__\n5.9. References\n6. Expressions\n6.1. Arithmetic conversions\n6.2. Atoms\n6.3. Primaries\n6.4. Await expression\n6.5. The power operator\n6.6. Unary arithmetic and bitwise operations\n6.7. Binary arithmetic operations\n6.8. Shifting operations\n6.9. Binary bitwise operations\n6.10. Comparisons\n6.11. Boolean operations\n6.12. Assignment expressions\n6.13. Conditional expressions\n6.14. Lambdas\n6.15. Expression lists\n6.16. Evaluation order\n6.17. Operator precedence\n7. Simple statements\n7.1. Expression statements\n7.2. Assignment statements\n7.3. The\nassert\nstatement\n7.4. The\npass\nstatement\n7.5. The\ndel\nstatement\n7.6. The\nreturn\nstatement\n7.7. The\nyield\nstatement\n7.8. The\nraise\nstatement\n7.9. The\nbreak\nstatement\n7.10. The\ncontinue\nstatement\n7.11. The\nimport\nstatement\n7.12. The\nglobal\nstatement\n7.13. The\nnonlocal\nstatement\n7.14. The\ntype\nstatement\n8. Compound statements\n8.1. The\nif\nstatement\n8.2. The\nwhile\nstatement\n8.3. The\nfor\nstatement\n8.4. The\ntry\nstatement\n8.5. The\nwith\nstatement\n8.6. The\nmatch\nstatement\n8.7. Function definitions\n8.8. Class definitions\n8.9. Coroutines\n8.10. Type parameter lists\n9. Top-level components\n9.1. Complete Python programs\n9.2. File input\n9.3. Interactive input\n9.4. Expression input\n10. Full Grammar specification\nPrevious topic\n8.\nEditors and IDEs\nNext topic\n1.\nIntroduction\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/reference/index.html",
    "source": "python",
    "doc_type": "language_reference",
    "scraped_at": 12342.1700586
  },
  {
    "title": "Python HOWTOs¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython HOWTOs\n|\nTheme\nAuto\nLight\nDark\n|\nPython HOWTOs\n¶\nPython HOWTOs are documents that cover a specific topic in-depth.\nModeled on the Linux Documentation Project’s HOWTO collection, this collection is an\neffort to foster documentation that’s more detailed than the\nPython Library Reference.\nGeneral:\nAnnotations Best Practices\nArgparse Tutorial\nDescriptor Guide\nEnum HOWTO\nFunctional Programming HOWTO\nAn introduction to the ipaddress module\nLogging HOWTO\nLogging Cookbook\nRegular Expression HOWTO\nSorting Techniques\nUnicode HOWTO\nHOWTO Fetch Internet Resources Using The urllib Package\nAdvanced development:\nCurses Programming with Python\nPython experimental support for free threading\nC API Extension Support for Free Threading\nIsolating Extension Modules\nThe Python 2.3 Method Resolution Order\nSocket Programming HOWTO\ntimer file descriptor HOWTO\nPorting Extension Modules to Python 3\nDebugging and profiling:\nDebugging C API extensions and CPython Internals with GDB\nInstrumenting CPython with DTrace and SystemTap\nPython support for the Linux perf profiler\nPrevious topic\nInstalling Python Modules\nNext topic\nPorting Extension Modules to Python 3\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython HOWTOs\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/howto/index.html",
    "source": "python",
    "doc_type": "howto",
    "scraped_at": 12342.2174551
  },
  {
    "title": "2. Using the Python Interpreter¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n2.\nUsing the Python Interpreter\n|\nTheme\nAuto\nLight\nDark\n|\n2.\nUsing the Python Interpreter\n¶\n2.1.\nInvoking the Interpreter\n¶\nThe Python interpreter is usually installed as\n/usr/local/bin/python3.13\non those machines where it is available; putting\n/usr/local/bin\nin your\nUnix shell’s search path makes it possible to start it by typing the command:\npython3.13\nto the shell.\n[\n1\n]\nSince the choice of the directory where the interpreter lives\nis an installation option, other places are possible; check with your local\nPython guru or system administrator.  (E.g.,\n/usr/local/python\nis a\npopular alternative location.)\nOn Windows machines where you have installed Python from the\nMicrosoft Store\n, the\npython3.13\ncommand will be available. If you have\nthe\npy.exe launcher\ninstalled, you can use the\npy\ncommand. See\nExcursus: Setting environment variables\nfor other ways to launch Python.\nTyping an end-of-file character (\nControl\n-\nD\non Unix,\nControl\n-\nZ\non\nWindows) at the primary prompt causes the interpreter to exit with a zero exit\nstatus.  If that doesn’t work, you can exit the interpreter by typing the\nfollowing command:\nquit()\n.\nThe interpreter’s line-editing features include interactive editing, history\nsubstitution and code completion on systems that support the\nGNU Readline\nlibrary.\nPerhaps the quickest check to see whether command line editing is supported is\ntyping\nControl\n-\nP\nto the first Python prompt you get.  If it beeps, you\nhave command line editing; see Appendix\nInteractive Input Editing and History Substitution\nfor an\nintroduction to the keys.  If nothing appears to happen, or if\n^P\nis\nechoed, command line editing isn’t available; you’ll only be able to use\nbackspace to remove characters from the current line.\nThe interpreter operates somewhat like the Unix shell: when called with standard\ninput connected to a tty device, it reads and executes commands interactively;\nwhen called with a file name argument or with a file as standard input, it reads\nand executes a\nscript\nfrom that file.\nA second way of starting the interpreter is\npython\n-c\ncommand\n[arg]\n...\n,\nwhich executes the statement(s) in\ncommand\n, analogous to the shell’s\n-c\noption.  Since Python statements often contain spaces or other\ncharacters that are special to the shell, it is usually advised to quote\ncommand\nin its entirety.\nSome Python modules are also useful as scripts.  These can be invoked using\npython\n-m\nmodule\n[arg]\n...\n, which executes the source file for\nmodule\nas\nif you had spelled out its full name on the command line.\nWhen a script file is used, it is sometimes useful to be able to run the script\nand enter interactive mode afterwards.  This can be done by passing\n-i\nbefore the script.\nAll command line options are described in\nCommand line and environment\n.\n2.1.1.\nArgument Passing\n¶\nWhen known to the interpreter, the script name and additional arguments\nthereafter are turned into a list of strings and assigned to the\nargv\nvariable in the\nsys\nmodule.  You can access this list by executing\nimport\nsys\n.  The length of the list is at least one; when no script and no arguments\nare given,\nsys.argv[0]\nis an empty string.  When the script name is given as\n'-'\n(meaning  standard input),\nsys.argv[0]\nis set to\n'-'\n.  When\n-c\ncommand\nis used,\nsys.argv[0]\nis set to\n'-c'\n.  When\n-m\nmodule\nis used,\nsys.argv[0]\nis set to the full name of the\nlocated module.  Options found after\n-c\ncommand\nor\n-m\nmodule\nare not consumed  by the Python interpreter’s option processing but\nleft in\nsys.argv\nfor  the command or module to handle.\n2.1.2.\nInteractive Mode\n¶\nWhen commands are read from a tty, the interpreter is said to be in\ninteractive\nmode\n.  In this mode it prompts for the next command with the\nprimary prompt\n,\nusually three greater-than signs (\n>>>\n); for continuation lines it prompts\nwith the\nsecondary prompt\n, by default three dots (\n...\n). The interpreter\nprints a welcome message stating its version number and a copyright notice\nbefore printing the first prompt:\n$\npython3.13\nPython 3.13 (default, April 4 2023, 09:25:04)\n[GCC 10.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\nContinuation lines are needed when entering a multi-line construct. As an\nexample, take a look at this\nif\nstatement:\n>>>\nthe_world_is_flat\n=\nTrue\n>>>\nif\nthe_world_is_flat\n:\n...\nprint\n(\n\"Be careful not to fall off!\"\n)\n...\nBe careful not to fall off!\nFor more on interactive mode, see\nInteractive Mode\n.\n2.2.\nThe Interpreter and Its Environment\n¶\n2.2.1.\nSource Code Encoding\n¶\nBy default, Python source files are treated as encoded in UTF-8.  In that\nencoding, characters of most languages in the world can be used simultaneously\nin string literals, identifiers and comments — although the standard library\nonly uses ASCII characters for identifiers, a convention that any portable code\nshould follow.  To display all these characters properly, your editor must\nrecognize that the file is UTF-8, and it must use a font that supports all the\ncharacters in the file.\nTo declare an encoding other than the default one, a special comment line\nshould be added as the\nfirst\nline of the file.  The syntax is as follows:\n# -*- coding: encoding -*-\nwhere\nencoding\nis one of the valid\ncodecs\nsupported by Python.\nFor example, to declare that Windows-1252 encoding is to be used, the first\nline of your source code file should be:\n# -*- coding: cp1252 -*-\nOne exception to the\nfirst line\nrule is when the source code starts with a\nUNIX “shebang” line\n.  In this case, the encoding\ndeclaration should be added as the second line of the file.  For example:\n#!/usr/bin/env python3\n# -*- coding: cp1252 -*-\nFootnotes\n[\n1\n]\nOn Unix, the Python 3.x interpreter is by default not installed with the\nexecutable named\npython\n, so that it does not conflict with a\nsimultaneously installed Python 2.x executable.\nTable of Contents\n2. Using the Python Interpreter\n2.1. Invoking the Interpreter\n2.1.1. Argument Passing\n2.1.2. Interactive Mode\n2.2. The Interpreter and Its Environment\n2.2.1. Source Code Encoding\nPrevious topic\n1.\nWhetting Your Appetite\nNext topic\n3.\nAn Informal Introduction to Python\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n2.\nUsing the Python Interpreter\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/tutorial/interpreter.html",
    "source": "python",
    "doc_type": "tutorial",
    "scraped_at": 12342.3211618
  },
  {
    "title": "Binary Data Services¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nBinary Data Services\n|\nTheme\nAuto\nLight\nDark\n|\nBinary Data Services\n¶\nThe modules described in this chapter provide some basic services operations\nfor manipulation of binary data. Other operations on binary data, specifically\nin relation to file formats and network protocols, are described in the\nrelevant sections.\nSome libraries described under\nText Processing Services\nalso work with either\nASCII-compatible binary formats (for example,\nre\n) or all binary data\n(for example,\ndifflib\n).\nIn addition, see the documentation for Python’s built-in binary data types in\nBinary Sequence Types — bytes, bytearray, memoryview\n.\nstruct\n— Interpret bytes as packed binary data\nFunctions and Exceptions\nFormat Strings\nByte Order, Size, and Alignment\nFormat Characters\nExamples\nApplications\nNative Formats\nStandard Formats\nClasses\ncodecs\n— Codec registry and base classes\nCodec Base Classes\nError Handlers\nStateless Encoding and Decoding\nIncremental Encoding and Decoding\nIncrementalEncoder Objects\nIncrementalDecoder Objects\nStream Encoding and Decoding\nStreamWriter Objects\nStreamReader Objects\nStreamReaderWriter Objects\nStreamRecoder Objects\nEncodings and Unicode\nStandard Encodings\nPython Specific Encodings\nText Encodings\nBinary Transforms\nStandalone Codec Functions\nText Transforms\nencodings\n— Encodings package\nencodings.idna\n— Internationalized Domain Names in Applications\nencodings.mbcs\n— Windows ANSI codepage\nencodings.utf_8_sig\n— UTF-8 codec with BOM signature\nPrevious topic\nrlcompleter\n— Completion function for GNU readline\nNext topic\nstruct\n— Interpret bytes as packed binary data\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nBinary Data Services\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/binary.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12342.5036754
  },
  {
    "title": "5. Data Structures¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n5.\nData Structures\n|\nTheme\nAuto\nLight\nDark\n|\n5.\nData Structures\n¶\nThis chapter describes some things you’ve learned about already in more detail,\nand adds some new things as well.\n5.1.\nMore on Lists\n¶\nThe list data type has some more methods.  Here are all of the methods of list\nobjects:\nlist.\nappend\n(\nx\n)\nAdd an item to the end of the list.  Similar to\na[len(a):]\n=\n[x]\n.\nlist.\nextend\n(\niterable\n)\nExtend the list by appending all the items from the iterable.  Similar to\na[len(a):]\n=\niterable\n.\nlist.\ninsert\n(\ni\n,\nx\n)\nInsert an item at a given position.  The first argument is the index of the\nelement before which to insert, so\na.insert(0,\nx)\ninserts at the front of\nthe list, and\na.insert(len(a),\nx)\nis equivalent to\na.append(x)\n.\nlist.\nremove\n(\nx\n)\nRemove the first item from the list whose value is equal to\nx\n.  It raises a\nValueError\nif there is no such item.\nlist.\npop\n(\n[\ni\n]\n)\nRemove the item at the given position in the list, and return it.  If no index\nis specified,\na.pop()\nremoves and returns the last item in the list.\nIt raises an\nIndexError\nif the list is empty or the index is\noutside the list range.\nlist.\nclear\n(\n)\nRemove all items from the list.  Similar to\ndel\na[:]\n.\nlist.\nindex\n(\nx\n[\n,\nstart\n[\n,\nend\n]\n]\n)\nReturn zero-based index in the list of the first item whose value is equal to\nx\n.\nRaises a\nValueError\nif there is no such item.\nThe optional arguments\nstart\nand\nend\nare interpreted as in the slice\nnotation and are used to limit the search to a particular subsequence of\nthe list.  The returned index is computed relative to the beginning of the full\nsequence rather than the\nstart\nargument.\nlist.\ncount\n(\nx\n)\nReturn the number of times\nx\nappears in the list.\nlist.\nsort\n(\n*\n,\nkey\n=\nNone\n,\nreverse\n=\nFalse\n)\nSort the items of the list in place (the arguments can be used for sort\ncustomization, see\nsorted()\nfor their explanation).\nlist.\nreverse\n(\n)\nReverse the elements of the list in place.\nlist.\ncopy\n(\n)\nReturn a shallow copy of the list.  Similar to\na[:]\n.\nAn example that uses most of the list methods:\n>>>\nfruits\n=\n[\n'orange'\n,\n'apple'\n,\n'pear'\n,\n'banana'\n,\n'kiwi'\n,\n'apple'\n,\n'banana'\n]\n>>>\nfruits\n.\ncount\n(\n'apple'\n)\n2\n>>>\nfruits\n.\ncount\n(\n'tangerine'\n)\n0\n>>>\nfruits\n.\nindex\n(\n'banana'\n)\n3\n>>>\nfruits\n.\nindex\n(\n'banana'\n,\n4\n)\n# Find next banana starting at position 4\n6\n>>>\nfruits\n.\nreverse\n()\n>>>\nfruits\n['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']\n>>>\nfruits\n.\nappend\n(\n'grape'\n)\n>>>\nfruits\n['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']\n>>>\nfruits\n.\nsort\n()\n>>>\nfruits\n['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']\n>>>\nfruits\n.\npop\n()\n'pear'\nYou might have noticed that methods like\ninsert\n,\nremove\nor\nsort\nthat\nonly modify the list have no return value printed – they return the default\nNone\n.\n[\n1\n]\nThis is a design principle for all mutable data structures in\nPython.\nAnother thing you might notice is that not all data can be sorted or\ncompared.  For instance,\n[None,\n'hello',\n10]\ndoesn’t sort because\nintegers can’t be compared to strings and\nNone\ncan’t be compared to\nother types.  Also, there are some types that don’t have a defined\nordering relation.  For example,\n3+4j\n<\n5+7j\nisn’t a valid\ncomparison.\n5.1.1.\nUsing Lists as Stacks\n¶\nThe list methods make it very easy to use a list as a stack, where the last\nelement added is the first element retrieved (“last-in, first-out”).  To add an\nitem to the top of the stack, use\nappend()\n.  To retrieve an item from the\ntop of the stack, use\npop()\nwithout an explicit index.  For example:\n>>>\nstack\n=\n[\n3\n,\n4\n,\n5\n]\n>>>\nstack\n.\nappend\n(\n6\n)\n>>>\nstack\n.\nappend\n(\n7\n)\n>>>\nstack\n[3, 4, 5, 6, 7]\n>>>\nstack\n.\npop\n()\n7\n>>>\nstack\n[3, 4, 5, 6]\n>>>\nstack\n.\npop\n()\n6\n>>>\nstack\n.\npop\n()\n5\n>>>\nstack\n[3, 4]\n5.1.2.\nUsing Lists as Queues\n¶\nIt is also possible to use a list as a queue, where the first element added is\nthe first element retrieved (“first-in, first-out”); however, lists are not\nefficient for this purpose.  While appends and pops from the end of list are\nfast, doing inserts or pops from the beginning of a list is slow (because all\nof the other elements have to be shifted by one).\nTo implement a queue, use\ncollections.deque\nwhich was designed to\nhave fast appends and pops from both ends.  For example:\n>>>\nfrom\ncollections\nimport\ndeque\n>>>\nqueue\n=\ndeque\n([\n\"Eric\"\n,\n\"John\"\n,\n\"Michael\"\n])\n>>>\nqueue\n.\nappend\n(\n\"Terry\"\n)\n# Terry arrives\n>>>\nqueue\n.\nappend\n(\n\"Graham\"\n)\n# Graham arrives\n>>>\nqueue\n.\npopleft\n()\n# The first to arrive now leaves\n'Eric'\n>>>\nqueue\n.\npopleft\n()\n# The second to arrive now leaves\n'John'\n>>>\nqueue\n# Remaining queue in order of arrival\ndeque(['Michael', 'Terry', 'Graham'])\n5.1.3.\nList Comprehensions\n¶\nList comprehensions provide a concise way to create lists.\nCommon applications are to make new lists where each element is the result of\nsome operations applied to each member of another sequence or iterable, or to\ncreate a subsequence of those elements that satisfy a certain condition.\nFor example, assume we want to create a list of squares, like:\n>>>\nsquares\n=\n[]\n>>>\nfor\nx\nin\nrange\n(\n10\n):\n...\nsquares\n.\nappend\n(\nx\n**\n2\n)\n...\n>>>\nsquares\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\nNote that this creates (or overwrites) a variable named\nx\nthat still exists\nafter the loop completes.  We can calculate the list of squares without any\nside effects using:\nsquares\n=\nlist\n(\nmap\n(\nlambda\nx\n:\nx\n**\n2\n,\nrange\n(\n10\n)))\nor, equivalently:\nsquares\n=\n[\nx\n**\n2\nfor\nx\nin\nrange\n(\n10\n)]\nwhich is more concise and readable.\nA list comprehension consists of brackets containing an expression followed\nby a\nfor\nclause, then zero or more\nfor\nor\nif\nclauses.  The result will be a new list resulting from evaluating the expression\nin the context of the\nfor\nand\nif\nclauses which follow it.\nFor example, this listcomp combines the elements of two lists if they are not\nequal:\n>>>\n[(\nx\n,\ny\n)\nfor\nx\nin\n[\n1\n,\n2\n,\n3\n]\nfor\ny\nin\n[\n3\n,\n1\n,\n4\n]\nif\nx\n!=\ny\n]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\nand it’s equivalent to:\n>>>\ncombs\n=\n[]\n>>>\nfor\nx\nin\n[\n1\n,\n2\n,\n3\n]:\n...\nfor\ny\nin\n[\n3\n,\n1\n,\n4\n]:\n...\nif\nx\n!=\ny\n:\n...\ncombs\n.\nappend\n((\nx\n,\ny\n))\n...\n>>>\ncombs\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\nNote how the order of the\nfor\nand\nif\nstatements is the\nsame in both these snippets.\nIf the expression is a tuple (e.g. the\n(x,\ny)\nin the previous example),\nit must be parenthesized.\n>>>\nvec\n=\n[\n-\n4\n,\n-\n2\n,\n0\n,\n2\n,\n4\n]\n>>>\n# create a new list with the values doubled\n>>>\n[\nx\n*\n2\nfor\nx\nin\nvec\n]\n[-8, -4, 0, 4, 8]\n>>>\n# filter the list to exclude negative numbers\n>>>\n[\nx\nfor\nx\nin\nvec\nif\nx\n>=\n0\n]\n[0, 2, 4]\n>>>\n# apply a function to all the elements\n>>>\n[\nabs\n(\nx\n)\nfor\nx\nin\nvec\n]\n[4, 2, 0, 2, 4]\n>>>\n# call a method on each element\n>>>\nfreshfruit\n=\n[\n'  banana'\n,\n'  loganberry '\n,\n'passion fruit  '\n]\n>>>\n[\nweapon\n.\nstrip\n()\nfor\nweapon\nin\nfreshfruit\n]\n['banana', 'loganberry', 'passion fruit']\n>>>\n# create a list of 2-tuples like (number, square)\n>>>\n[(\nx\n,\nx\n**\n2\n)\nfor\nx\nin\nrange\n(\n6\n)]\n[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n>>>\n# the tuple must be parenthesized, otherwise an error is raised\n>>>\n[\nx\n,\nx\n**\n2\nfor\nx\nin\nrange\n(\n6\n)]\nFile\n\"<stdin>\"\n, line\n1\n[\nx\n,\nx\n**\n2\nfor\nx\nin\nrange\n(\n6\n)]\n^^^^^^^\nSyntaxError\n:\ndid you forget parentheses around the comprehension target?\n>>>\n# flatten a list using a listcomp with two 'for'\n>>>\nvec\n=\n[[\n1\n,\n2\n,\n3\n],\n[\n4\n,\n5\n,\n6\n],\n[\n7\n,\n8\n,\n9\n]]\n>>>\n[\nnum\nfor\nelem\nin\nvec\nfor\nnum\nin\nelem\n]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nList comprehensions can contain complex expressions and nested functions:\n>>>\nfrom\nmath\nimport\npi\n>>>\n[\nstr\n(\nround\n(\npi\n,\ni\n))\nfor\ni\nin\nrange\n(\n1\n,\n6\n)]\n['3.1', '3.14', '3.142', '3.1416', '3.14159']\n5.1.4.\nNested List Comprehensions\n¶\nThe initial expression in a list comprehension can be any arbitrary expression,\nincluding another list comprehension.\nConsider the following example of a 3x4 matrix implemented as a list of\n3 lists of length 4:\n>>>\nmatrix\n=\n[\n...\n[\n1\n,\n2\n,\n3\n,\n4\n],\n...\n[\n5\n,\n6\n,\n7\n,\n8\n],\n...\n[\n9\n,\n10\n,\n11\n,\n12\n],\n...\n]\nThe following list comprehension will transpose rows and columns:\n>>>\n[[\nrow\n[\ni\n]\nfor\nrow\nin\nmatrix\n]\nfor\ni\nin\nrange\n(\n4\n)]\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\nAs we saw in the previous section, the inner list comprehension is evaluated in\nthe context of the\nfor\nthat follows it, so this example is\nequivalent to:\n>>>\ntransposed\n=\n[]\n>>>\nfor\ni\nin\nrange\n(\n4\n):\n...\ntransposed\n.\nappend\n([\nrow\n[\ni\n]\nfor\nrow\nin\nmatrix\n])\n...\n>>>\ntransposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\nwhich, in turn, is the same as:\n>>>\ntransposed\n=\n[]\n>>>\nfor\ni\nin\nrange\n(\n4\n):\n...\n# the following 3 lines implement the nested listcomp\n...\ntransposed_row\n=\n[]\n...\nfor\nrow\nin\nmatrix\n:\n...\ntransposed_row\n.\nappend\n(\nrow\n[\ni\n])\n...\ntransposed\n.\nappend\n(\ntransposed_row\n)\n...\n>>>\ntransposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\nIn the real world, you should prefer built-in functions to complex flow statements.\nThe\nzip()\nfunction would do a great job for this use case:\n>>>\nlist\n(\nzip\n(\n*\nmatrix\n))\n[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]\nSee\nUnpacking Argument Lists\nfor details on the asterisk in this line.\n5.2.\nThe\ndel\nstatement\n¶\nThere is a way to remove an item from a list given its index instead of its\nvalue: the\ndel\nstatement.  This differs from the\npop()\nmethod\nwhich returns a value.  The\ndel\nstatement can also be used to remove\nslices from a list or clear the entire list (which we did earlier by assignment\nof an empty list to the slice).  For example:\n>>>\na\n=\n[\n-\n1\n,\n1\n,\n66.25\n,\n333\n,\n333\n,\n1234.5\n]\n>>>\ndel\na\n[\n0\n]\n>>>\na\n[1, 66.25, 333, 333, 1234.5]\n>>>\ndel\na\n[\n2\n:\n4\n]\n>>>\na\n[1, 66.25, 1234.5]\n>>>\ndel\na\n[:]\n>>>\na\n[]\ndel\ncan also be used to delete entire variables:\n>>>\ndel\na\nReferencing the name\na\nhereafter is an error (at least until another value\nis assigned to it).  We’ll find other uses for\ndel\nlater.\n5.3.\nTuples and Sequences\n¶\nWe saw that lists and strings have many common properties, such as indexing and\nslicing operations.  They are two examples of\nsequence\ndata types (see\nSequence Types — list, tuple, range\n).  Since Python is an evolving language, other sequence data\ntypes may be added.  There is also another standard sequence data type: the\ntuple\n.\nA tuple consists of a number of values separated by commas, for instance:\n>>>\nt\n=\n12345\n,\n54321\n,\n'hello!'\n>>>\nt\n[\n0\n]\n12345\n>>>\nt\n(12345, 54321, 'hello!')\n>>>\n# Tuples may be nested:\n>>>\nu\n=\nt\n,\n(\n1\n,\n2\n,\n3\n,\n4\n,\n5\n)\n>>>\nu\n((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))\n>>>\n# Tuples are immutable:\n>>>\nt\n[\n0\n]\n=\n88888\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nTypeError\n:\n'tuple' object does not support item assignment\n>>>\n# but they can contain mutable objects:\n>>>\nv\n=\n([\n1\n,\n2\n,\n3\n],\n[\n3\n,\n2\n,\n1\n])\n>>>\nv\n([1, 2, 3], [3, 2, 1])\nAs you see, on output tuples are always enclosed in parentheses, so that nested\ntuples are interpreted correctly; they may be input with or without surrounding\nparentheses, although often parentheses are necessary anyway (if the tuple is\npart of a larger expression).  It is not possible to assign to the individual\nitems of a tuple, however it is possible to create tuples which contain mutable\nobjects, such as lists.\nThough tuples may seem similar to lists, they are often used in different\nsituations and for different purposes.\nTuples are\nimmutable\n, and usually contain a heterogeneous sequence of\nelements that are accessed via unpacking (see later in this section) or indexing\n(or even by attribute in the case of\nnamedtuples\n).\nLists are\nmutable\n, and their elements are usually homogeneous and are\naccessed by iterating over the list.\nA special problem is the construction of tuples containing 0 or 1 items: the\nsyntax has some extra quirks to accommodate these.  Empty tuples are constructed\nby an empty pair of parentheses; a tuple with one item is constructed by\nfollowing a value with a comma (it is not sufficient to enclose a single value\nin parentheses). Ugly, but effective.  For example:\n>>>\nempty\n=\n()\n>>>\nsingleton\n=\n'hello'\n,\n# <-- note trailing comma\n>>>\nlen\n(\nempty\n)\n0\n>>>\nlen\n(\nsingleton\n)\n1\n>>>\nsingleton\n('hello',)\nThe statement\nt\n=\n12345,\n54321,\n'hello!'\nis an example of\ntuple packing\n:\nthe values\n12345\n,\n54321\nand\n'hello!'\nare packed together in a tuple.\nThe reverse operation is also possible:\n>>>\nx\n,\ny\n,\nz\n=\nt\nThis is called, appropriately enough,\nsequence unpacking\nand works for any\nsequence on the right-hand side.  Sequence unpacking requires that there are as\nmany variables on the left side of the equals sign as there are elements in the\nsequence.  Note that multiple assignment is really just a combination of tuple\npacking and sequence unpacking.\n5.4.\nSets\n¶\nPython also includes a data type for\nsets\n.  A set is an unordered collection\nwith no duplicate elements.  Basic uses include membership testing and\neliminating duplicate entries.  Set objects also support mathematical operations\nlike union, intersection, difference, and symmetric difference.\nCurly braces or the\nset()\nfunction can be used to create sets.  Note: to\ncreate an empty set you have to use\nset()\n, not\n{}\n; the latter creates an\nempty dictionary, a data structure that we discuss in the next section.\nHere is a brief demonstration:\n>>>\nbasket\n=\n{\n'apple'\n,\n'orange'\n,\n'apple'\n,\n'pear'\n,\n'orange'\n,\n'banana'\n}\n>>>\nprint\n(\nbasket\n)\n# show that duplicates have been removed\n{'orange', 'banana', 'pear', 'apple'}\n>>>\n'orange'\nin\nbasket\n# fast membership testing\nTrue\n>>>\n'crabgrass'\nin\nbasket\nFalse\n>>>\n# Demonstrate set operations on unique letters from two words\n>>>\n>>>\na\n=\nset\n(\n'abracadabra'\n)\n>>>\nb\n=\nset\n(\n'alacazam'\n)\n>>>\na\n# unique letters in a\n{'a', 'r', 'b', 'c', 'd'}\n>>>\na\n-\nb\n# letters in a but not in b\n{'r', 'd', 'b'}\n>>>\na\n|\nb\n# letters in a or b or both\n{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}\n>>>\na\n&\nb\n# letters in both a and b\n{'a', 'c'}\n>>>\na\n^\nb\n# letters in a or b but not both\n{'r', 'd', 'b', 'm', 'z', 'l'}\nSimilarly to\nlist comprehensions\n, set comprehensions\nare also supported:\n>>>\na\n=\n{\nx\nfor\nx\nin\n'abracadabra'\nif\nx\nnot\nin\n'abc'\n}\n>>>\na\n{'r', 'd'}\n5.5.\nDictionaries\n¶\nAnother useful data type built into Python is the\ndictionary\n(see\nMapping Types — dict\n). Dictionaries are sometimes found in other languages as\n“associative memories” or “associative arrays”.  Unlike sequences, which are\nindexed by a range of numbers, dictionaries are indexed by\nkeys\n, which can be\nany immutable type; strings and numbers can always be keys.  Tuples can be used\nas keys if they contain only strings, numbers, or tuples; if a tuple contains\nany mutable object either directly or indirectly, it cannot be used as a key.\nYou can’t use lists as keys, since lists can be modified in place using index\nassignments, slice assignments, or methods like\nappend()\nand\nextend()\n.\nIt is best to think of a dictionary as a set of\nkey: value\npairs,\nwith the requirement that the keys are unique (within one dictionary). A pair of\nbraces creates an empty dictionary:\n{}\n. Placing a comma-separated list of\nkey:value pairs within the braces adds initial key:value pairs to the\ndictionary; this is also the way dictionaries are written on output.\nThe main operations on a dictionary are storing a value with some key and\nextracting the value given the key.  It is also possible to delete a key:value\npair with\ndel\n. If you store using a key that is already in use, the old\nvalue associated with that key is forgotten.  It is an error to extract a value\nusing a non-existent key.\nPerforming\nlist(d)\non a dictionary returns a list of all the keys\nused in the dictionary, in insertion order (if you want it sorted, just use\nsorted(d)\ninstead). To check whether a single key is in the\ndictionary, use the\nin\nkeyword.\nHere is a small example using a dictionary:\n>>>\ntel\n=\n{\n'jack'\n:\n4098\n,\n'sape'\n:\n4139\n}\n>>>\ntel\n[\n'guido'\n]\n=\n4127\n>>>\ntel\n{'jack': 4098, 'sape': 4139, 'guido': 4127}\n>>>\ntel\n[\n'jack'\n]\n4098\n>>>\ndel\ntel\n[\n'sape'\n]\n>>>\ntel\n[\n'irv'\n]\n=\n4127\n>>>\ntel\n{'jack': 4098, 'guido': 4127, 'irv': 4127}\n>>>\nlist\n(\ntel\n)\n['jack', 'guido', 'irv']\n>>>\nsorted\n(\ntel\n)\n['guido', 'irv', 'jack']\n>>>\n'guido'\nin\ntel\nTrue\n>>>\n'jack'\nnot\nin\ntel\nFalse\nThe\ndict()\nconstructor builds dictionaries directly from sequences of\nkey-value pairs:\n>>>\ndict\n([(\n'sape'\n,\n4139\n),\n(\n'guido'\n,\n4127\n),\n(\n'jack'\n,\n4098\n)])\n{'sape': 4139, 'guido': 4127, 'jack': 4098}\nIn addition, dict comprehensions can be used to create dictionaries from\narbitrary key and value expressions:\n>>>\n{\nx\n:\nx\n**\n2\nfor\nx\nin\n(\n2\n,\n4\n,\n6\n)}\n{2: 4, 4: 16, 6: 36}\nWhen the keys are simple strings, it is sometimes easier to specify pairs using\nkeyword arguments:\n>>>\ndict\n(\nsape\n=\n4139\n,\nguido\n=\n4127\n,\njack\n=\n4098\n)\n{'sape': 4139, 'guido': 4127, 'jack': 4098}\n5.6.\nLooping Techniques\n¶\nWhen looping through dictionaries, the key and corresponding value can be\nretrieved at the same time using the\nitems()\nmethod.\n>>>\nknights\n=\n{\n'gallahad'\n:\n'the pure'\n,\n'robin'\n:\n'the brave'\n}\n>>>\nfor\nk\n,\nv\nin\nknights\n.\nitems\n():\n...\nprint\n(\nk\n,\nv\n)\n...\ngallahad the pure\nrobin the brave\nWhen looping through a sequence, the position index and corresponding value can\nbe retrieved at the same time using the\nenumerate()\nfunction.\n>>>\nfor\ni\n,\nv\nin\nenumerate\n([\n'tic'\n,\n'tac'\n,\n'toe'\n]):\n...\nprint\n(\ni\n,\nv\n)\n...\n0 tic\n1 tac\n2 toe\nTo loop over two or more sequences at the same time, the entries can be paired\nwith the\nzip()\nfunction.\n>>>\nquestions\n=\n[\n'name'\n,\n'quest'\n,\n'favorite color'\n]\n>>>\nanswers\n=\n[\n'lancelot'\n,\n'the holy grail'\n,\n'blue'\n]\n>>>\nfor\nq\n,\na\nin\nzip\n(\nquestions\n,\nanswers\n):\n...\nprint\n(\n'What is your\n{0}\n?  It is\n{1}\n.'\n.\nformat\n(\nq\n,\na\n))\n...\nWhat is your name?  It is lancelot.\nWhat is your quest?  It is the holy grail.\nWhat is your favorite color?  It is blue.\nTo loop over a sequence in reverse, first specify the sequence in a forward\ndirection and then call the\nreversed()\nfunction.\n>>>\nfor\ni\nin\nreversed\n(\nrange\n(\n1\n,\n10\n,\n2\n)):\n...\nprint\n(\ni\n)\n...\n9\n7\n5\n3\n1\nTo loop over a sequence in sorted order, use the\nsorted()\nfunction which\nreturns a new sorted list while leaving the source unaltered.\n>>>\nbasket\n=\n[\n'apple'\n,\n'orange'\n,\n'apple'\n,\n'pear'\n,\n'orange'\n,\n'banana'\n]\n>>>\nfor\ni\nin\nsorted\n(\nbasket\n):\n...\nprint\n(\ni\n)\n...\napple\napple\nbanana\norange\norange\npear\nUsing\nset()\non a sequence eliminates duplicate elements. The use of\nsorted()\nin combination with\nset()\nover a sequence is an idiomatic\nway to loop over unique elements of the sequence in sorted order.\n>>>\nbasket\n=\n[\n'apple'\n,\n'orange'\n,\n'apple'\n,\n'pear'\n,\n'orange'\n,\n'banana'\n]\n>>>\nfor\nf\nin\nsorted\n(\nset\n(\nbasket\n)):\n...\nprint\n(\nf\n)\n...\napple\nbanana\norange\npear\nIt is sometimes tempting to change a list while you are looping over it;\nhowever, it is often simpler and safer to create a new list instead.\n>>>\nimport\nmath\n>>>\nraw_data\n=\n[\n56.2\n,\nfloat\n(\n'NaN'\n),\n51.7\n,\n55.3\n,\n52.5\n,\nfloat\n(\n'NaN'\n),\n47.8\n]\n>>>\nfiltered_data\n=\n[]\n>>>\nfor\nvalue\nin\nraw_data\n:\n...\nif\nnot\nmath\n.\nisnan\n(\nvalue\n):\n...\nfiltered_data\n.\nappend\n(\nvalue\n)\n...\n>>>\nfiltered_data\n[56.2, 51.7, 55.3, 52.5, 47.8]\n5.7.\nMore on Conditions\n¶\nThe conditions used in\nwhile\nand\nif\nstatements can contain any\noperators, not just comparisons.\nThe comparison operators\nin\nand\nnot\nin\nare membership tests that\ndetermine whether a value is in (or not in) a container.  The operators\nis\nand\nis\nnot\ncompare whether two objects are really the same object.  All\ncomparison operators have the same priority, which is lower than that of all\nnumerical operators.\nComparisons can be chained.  For example,\na\n<\nb\n==\nc\ntests whether\na\nis\nless than\nb\nand moreover\nb\nequals\nc\n.\nComparisons may be combined using the Boolean operators\nand\nand\nor\n, and\nthe outcome of a comparison (or of any other Boolean expression) may be negated\nwith\nnot\n.  These have lower priorities than comparison operators; between\nthem,\nnot\nhas the highest priority and\nor\nthe lowest, so that\nA\nand\nnot\nB\nor\nC\nis equivalent to\n(A\nand\n(not\nB))\nor\nC\n. As always, parentheses\ncan be used to express the desired composition.\nThe Boolean operators\nand\nand\nor\nare so-called\nshort-circuit\noperators: their arguments are evaluated from left to right, and evaluation\nstops as soon as the outcome is determined.  For example, if\nA\nand\nC\nare\ntrue but\nB\nis false,\nA\nand\nB\nand\nC\ndoes not evaluate the expression\nC\n.  When used as a general value and not as a Boolean, the return value of a\nshort-circuit operator is the last evaluated argument.\nIt is possible to assign the result of a comparison or other Boolean expression\nto a variable.  For example,\n>>>\nstring1\n,\nstring2\n,\nstring3\n=\n''\n,\n'Trondheim'\n,\n'Hammer Dance'\n>>>\nnon_null\n=\nstring1\nor\nstring2\nor\nstring3\n>>>\nnon_null\n'Trondheim'\nNote that in Python, unlike C, assignment inside expressions must be done\nexplicitly with the\nwalrus operator\n:=\n.\nThis avoids a common class of problems encountered in C programs: typing\n=\nin an expression when\n==\nwas intended.\n5.8.\nComparing Sequences and Other Types\n¶\nSequence objects typically may be compared to other objects with the same sequence\ntype. The comparison uses\nlexicographical\nordering: first the first two\nitems are compared, and if they differ this determines the outcome of the\ncomparison; if they are equal, the next two items are compared, and so on, until\neither sequence is exhausted. If two items to be compared are themselves\nsequences of the same type, the lexicographical comparison is carried out\nrecursively.  If all items of two sequences compare equal, the sequences are\nconsidered equal. If one sequence is an initial sub-sequence of the other, the\nshorter sequence is the smaller (lesser) one.  Lexicographical ordering for\nstrings uses the Unicode code point number to order individual characters.\nSome examples of comparisons between sequences of the same type:\n(\n1\n,\n2\n,\n3\n)\n<\n(\n1\n,\n2\n,\n4\n)\n[\n1\n,\n2\n,\n3\n]\n<\n[\n1\n,\n2\n,\n4\n]\n'ABC'\n<\n'C'\n<\n'Pascal'\n<\n'Python'\n(\n1\n,\n2\n,\n3\n,\n4\n)\n<\n(\n1\n,\n2\n,\n4\n)\n(\n1\n,\n2\n)\n<\n(\n1\n,\n2\n,\n-\n1\n)\n(\n1\n,\n2\n,\n3\n)\n==\n(\n1.0\n,\n2.0\n,\n3.0\n)\n(\n1\n,\n2\n,\n(\n'aa'\n,\n'ab'\n))\n<\n(\n1\n,\n2\n,\n(\n'abc'\n,\n'a'\n),\n4\n)\nNote that comparing objects of different types with\n<\nor\n>\nis legal\nprovided that the objects have appropriate comparison methods.  For example,\nmixed numeric types are compared according to their numeric value, so 0 equals\n0.0, etc.  Otherwise, rather than providing an arbitrary ordering, the\ninterpreter will raise a\nTypeError\nexception.\nFootnotes\n[\n1\n]\nOther languages may return the mutated object, which allows method\nchaining, such as\nd->insert(\"a\")->remove(\"b\")->sort();\n.\nTable of Contents\n5. Data Structures\n5.1. More on Lists\n5.1.1. Using Lists as Stacks\n5.1.2. Using Lists as Queues\n5.1.3. List Comprehensions\n5.1.4. Nested List Comprehensions\n5.2. The\ndel\nstatement\n5.3. Tuples and Sequences\n5.4. Sets\n5.5. Dictionaries\n5.6. Looping Techniques\n5.7. More on Conditions\n5.8. Comparing Sequences and Other Types\nPrevious topic\n4.\nMore Control Flow Tools\nNext topic\n6.\nModules\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n5.\nData Structures\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/tutorial/datastructures.html",
    "source": "python",
    "doc_type": "tutorial",
    "scraped_at": 12342.7642782
  },
  {
    "title": "1. Introduction¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n»\n1.\nIntroduction\n|\nTheme\nAuto\nLight\nDark\n|\n1.\nIntroduction\n¶\nThis reference manual describes the Python programming language. It is not\nintended as a tutorial.\nWhile I am trying to be as precise as possible, I chose to use English rather\nthan formal specifications for everything except syntax and lexical analysis.\nThis should make the document more understandable to the average reader, but\nwill leave room for ambiguities. Consequently, if you were coming from Mars and\ntried to re-implement Python from this document alone, you might have to guess\nthings and in fact you would probably end up implementing quite a different\nlanguage. On the other hand, if you are using Python and wonder what the precise\nrules about a particular area of the language are, you should definitely be able\nto find them here. If you would like to see a more formal definition of the\nlanguage, maybe you could volunteer your time — or invent a cloning machine\n:-).\nIt is dangerous to add too many implementation details to a language reference\ndocument — the implementation may change, and other implementations of the\nsame language may work differently.  On the other hand, CPython is the one\nPython implementation in widespread use (although alternate implementations\ncontinue to gain support), and its particular quirks are sometimes worth being\nmentioned, especially where the implementation imposes additional limitations.\nTherefore, you’ll find short “implementation notes” sprinkled throughout the\ntext.\nEvery Python implementation comes with a number of built-in and standard\nmodules.  These are documented in\nThe Python Standard Library\n.  A few built-in modules\nare mentioned when they interact in a significant way with the language\ndefinition.\n1.1.\nAlternate Implementations\n¶\nThough there is one Python implementation which is by far the most popular,\nthere are some alternate implementations which are of particular interest to\ndifferent audiences.\nKnown implementations include:\nCPython\nThis is the original and most-maintained implementation of Python, written in C.\nNew language features generally appear here first.\nJython\nPython implemented in Java.  This implementation can be used as a scripting\nlanguage for Java applications, or can be used to create applications using the\nJava class libraries.  It is also often used to create tests for Java libraries.\nMore information can be found at\nthe Jython website\n.\nPython for .NET\nThis implementation actually uses the CPython implementation, but is a managed\n.NET application and makes .NET libraries available.  It was created by Brian\nLloyd.  For more information, see the\nPython for .NET home page\n.\nIronPython\nAn alternate Python for .NET.  Unlike Python.NET, this is a complete Python\nimplementation that generates IL, and compiles Python code directly to .NET\nassemblies.  It was created by Jim Hugunin, the original creator of Jython.  For\nmore information, see\nthe IronPython website\n.\nPyPy\nAn implementation of Python written completely in Python. It supports several\nadvanced features not found in other implementations like stackless support\nand a Just in Time compiler. One of the goals of the project is to encourage\nexperimentation with the language itself by making it easier to modify the\ninterpreter (since it is written in Python).  Additional information is\navailable on\nthe PyPy project’s home page\n.\nEach of these implementations varies in some way from the language as documented\nin this manual, or introduces specific information beyond what’s covered in the\nstandard Python documentation.  Please refer to the implementation-specific\ndocumentation to determine what else you need to know about the specific\nimplementation you’re using.\n1.2.\nNotation\n¶\nThe descriptions of lexical analysis and syntax use a modified\nBackus–Naur form (BNF)\ngrammar\nnotation.  This uses the following style of definition:\nname\n::=\nlc_letter\n(\nlc_letter\n| \"_\")*\nlc_letter\n::= \"a\"...\"z\"\nThe first line says that a\nname\nis an\nlc_letter\nfollowed by a sequence\nof zero or more\nlc_letter\ns and underscores.  An\nlc_letter\nin turn is\nany of the single characters\n'a'\nthrough\n'z'\n.  (This rule is actually\nadhered to for the names defined in lexical and grammar rules in this document.)\nEach rule begins with a name (which is the name defined by the rule) and\n::=\n.  A vertical bar (\n|\n) is used to separate alternatives; it is the\nleast binding operator in this notation.  A star (\n*\n) means zero or more\nrepetitions of the preceding item; likewise, a plus (\n+\n) means one or more\nrepetitions, and a phrase enclosed in square brackets (\n[\n]\n) means zero or\none occurrences (in other words, the enclosed phrase is optional).  The\n*\nand\n+\noperators bind as tightly as possible; parentheses are used for\ngrouping.  Literal strings are enclosed in quotes.  White space is only\nmeaningful to separate tokens. Rules are normally contained on a single line;\nrules with many alternatives may be formatted alternatively with each line after\nthe first beginning with a vertical bar.\nIn lexical definitions (as the example above), two more conventions are used:\nTwo literal characters separated by three dots mean a choice of any single\ncharacter in the given (inclusive) range of ASCII characters.  A phrase between\nangular brackets (\n<...>\n) gives an informal description of the symbol\ndefined; e.g., this could be used to describe the notion of ‘control character’\nif needed.\nEven though the notation used is almost the same, there is a big difference\nbetween the meaning of lexical and syntactic definitions: a lexical definition\noperates on the individual characters of the input source, while a syntax\ndefinition operates on the stream of tokens generated by the lexical analysis.\nAll uses of BNF in the next chapter (“Lexical Analysis”) are lexical\ndefinitions; uses in subsequent chapters are syntactic definitions.\nTable of Contents\n1. Introduction\n1.1. Alternate Implementations\n1.2. Notation\nPrevious topic\nThe Python Language Reference\nNext topic\n2.\nLexical analysis\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n»\n1.\nIntroduction\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/reference/introduction.html",
    "source": "python",
    "doc_type": "language_reference",
    "scraped_at": 12342.9148717
  },
  {
    "title": "Dealing with Bugs¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nDealing with Bugs\n|\nTheme\nAuto\nLight\nDark\n|\nDealing with Bugs\n¶\nPython is a mature programming language which has established a reputation for\nstability.  In order to maintain this reputation, the developers would like to\nknow of any deficiencies you find in Python.\nIt can be sometimes faster to fix bugs yourself and contribute patches to\nPython as it streamlines the process and involves less people. Learn how to\ncontribute\n.\nDocumentation bugs\n¶\nIf you find a bug in this documentation or would like to propose an improvement,\nplease submit a bug report on the\ntracker\n.  If you\nhave a suggestion on how to fix it, include that as well.\nYou can also open a discussion item on our\nDocumentation Discourse forum\n.\nIf you find a bug in the theme (HTML / CSS / JavaScript) of the\ndocumentation, please submit a bug report on the\npython-doc-theme bug\ntracker\n.\nIf you’re short on time, you can also email documentation bug reports to\ndocs\n@\npython\n.\norg\n(behavioral bugs can be sent to\npython-list\n@\npython\n.\norg\n).\n‘docs@’ is a mailing list run by volunteers; your request will be noticed,\nthough it may take a while to be processed.\nSee also\nDocumentation bugs\nA list of documentation bugs that have been submitted to the Python issue tracker.\nIssue Tracking\nOverview of the process involved in reporting an improvement on the tracker.\nHelping with Documentation\nComprehensive guide for individuals that are interested in contributing to Python documentation.\nDocumentation Translations\nA list of GitHub pages for documentation translation and their primary contacts.\nUsing the Python issue tracker\n¶\nIssue reports for Python itself should be submitted via the GitHub issues\ntracker (\nhttps://github.com/python/cpython/issues\n).\nThe GitHub issues tracker offers a web form which allows pertinent information\nto be entered and submitted to the developers.\nThe first step in filing a report is to determine whether the problem has\nalready been reported.  The advantage in doing so, aside from saving the\ndevelopers’ time, is that you learn what has been done to fix it; it may be that\nthe problem has already been fixed for the next release, or additional\ninformation is needed (in which case you are welcome to provide it if you can!).\nTo do this, search the tracker using the search box at the top of the page.\nIf the problem you’re reporting is not already in the list, log in to GitHub.\nIf you don’t already have a GitHub account, create a new account using the\n“Sign up” link.\nIt is not possible to submit a bug report anonymously.\nBeing now logged in, you can submit an issue.\nClick on the “New issue” button in the top bar to report a new issue.\nThe submission form has two fields, “Title” and “Comment”.\nFor the “Title” field, enter a\nvery\nshort description of the problem;\nfewer than ten words is good.\nIn the “Comment” field, describe the problem in detail, including what you\nexpected to happen and what did happen.  Be sure to include whether any\nextension modules were involved, and what hardware and software platform you\nwere using (including version information as appropriate).\nEach issue report will be reviewed by a developer who will determine what needs to\nbe done to correct the problem. You will receive an update each time an action is\ntaken on the issue.\nSee also\nHow to Report Bugs Effectively\nArticle which goes into some detail about how to create a useful bug report.\nThis describes what kind of information is useful and why it is useful.\nBug Writing Guidelines\nInformation about writing a good bug report.  Some of this is specific to the\nMozilla project, but describes general good practices.\nGetting started contributing to Python yourself\n¶\nBeyond just reporting bugs that you find, you are also welcome to submit\npatches to fix them.  You can find more information on how to get started\npatching Python in the\nPython Developer’s Guide\n.  If you have questions,\nthe\ncore-mentorship mailing list\nis a friendly place to get answers to\nany and all questions pertaining to the process of fixing issues in Python.\nTable of Contents\nDealing with Bugs\nDocumentation bugs\nUsing the Python issue tracker\nGetting started contributing to Python yourself\nPrevious topic\nAbout this documentation\nNext topic\nCopyright\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nDealing with Bugs\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/bugs.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12342.9499739
  },
  {
    "title": "6. Modules¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n6.\nModules\n|\nTheme\nAuto\nLight\nDark\n|\n6.\nModules\n¶\nIf you quit from the Python interpreter and enter it again, the definitions you\nhave made (functions and variables) are lost. Therefore, if you want to write a\nsomewhat longer program, you are better off using a text editor to prepare the\ninput for the interpreter and running it with that file as input instead.  This\nis known as creating a\nscript\n.  As your program gets longer, you may want to\nsplit it into several files for easier maintenance.  You may also want to use a\nhandy function that you’ve written in several programs without copying its\ndefinition into each program.\nTo support this, Python has a way to put definitions in a file and use them in a\nscript or in an interactive instance of the interpreter. Such a file is called a\nmodule\n; definitions from a module can be\nimported\ninto other modules or into\nthe\nmain\nmodule (the collection of variables that you have access to in a\nscript executed at the top level and in calculator mode).\nA module is a file containing Python definitions and statements.  The file name\nis the module name with the suffix\n.py\nappended.  Within a module, the\nmodule’s name (as a string) is available as the value of the global variable\n__name__\n.  For instance, use your favorite text editor to create a file\ncalled\nfibo.py\nin the current directory with the following contents:\n# Fibonacci numbers module\ndef\nfib\n(\nn\n):\n\"\"\"Write Fibonacci series up to n.\"\"\"\na\n,\nb\n=\n0\n,\n1\nwhile\na\n<\nn\n:\nprint\n(\na\n,\nend\n=\n' '\n)\na\n,\nb\n=\nb\n,\na\n+\nb\nprint\n()\ndef\nfib2\n(\nn\n):\n\"\"\"Return Fibonacci series up to n.\"\"\"\nresult\n=\n[]\na\n,\nb\n=\n0\n,\n1\nwhile\na\n<\nn\n:\nresult\n.\nappend\n(\na\n)\na\n,\nb\n=\nb\n,\na\n+\nb\nreturn\nresult\nNow enter the Python interpreter and import this module with the following\ncommand:\n>>>\nimport\nfibo\nThis does not add the names of the functions defined in\nfibo\ndirectly to\nthe current\nnamespace\n(see\nPython Scopes and Namespaces\nfor more details);\nit only adds the module name\nfibo\nthere. Using\nthe module name you can access the functions:\n>>>\nfibo\n.\nfib\n(\n1000\n)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n>>>\nfibo\n.\nfib2\n(\n100\n)\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n>>>\nfibo\n.\n__name__\n'fibo'\nIf you intend to use a function often you can assign it to a local name:\n>>>\nfib\n=\nfibo\n.\nfib\n>>>\nfib\n(\n500\n)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\n6.1.\nMore on Modules\n¶\nA module can contain executable statements as well as function definitions.\nThese statements are intended to initialize the module. They are executed only\nthe\nfirst\ntime the module name is encountered in an import statement.\n[\n1\n]\n(They are also run if the file is executed as a script.)\nEach module has its own private namespace, which is used as the global namespace\nby all functions defined in the module. Thus, the author of a module can\nuse global variables in the module without worrying about accidental clashes\nwith a user’s global variables. On the other hand, if you know what you are\ndoing you can touch a module’s global variables with the same notation used to\nrefer to its functions,\nmodname.itemname\n.\nModules can import other modules.  It is customary but not required to place all\nimport\nstatements at the beginning of a module (or script, for that\nmatter).  The imported module names, if placed at the top level of a module\n(outside any functions or classes), are added to the module’s global namespace.\nThere is a variant of the\nimport\nstatement that imports names from a\nmodule directly into the importing module’s namespace.  For example:\n>>>\nfrom\nfibo\nimport\nfib\n,\nfib2\n>>>\nfib\n(\n500\n)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\nThis does not introduce the module name from which the imports are taken in the\nlocal namespace (so in the example,\nfibo\nis not defined).\nThere is even a variant to import all names that a module defines:\n>>>\nfrom\nfibo\nimport\n*\n>>>\nfib\n(\n500\n)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\nThis imports all names except those beginning with an underscore (\n_\n).\nIn most cases Python programmers do not use this facility since it introduces\nan unknown set of names into the interpreter, possibly hiding some things\nyou have already defined.\nNote that in general the practice of importing\n*\nfrom a module or package is\nfrowned upon, since it often causes poorly readable code. However, it is okay to\nuse it to save typing in interactive sessions.\nIf the module name is followed by\nas\n, then the name\nfollowing\nas\nis bound directly to the imported module.\n>>>\nimport\nfibo\nas\nfib\n>>>\nfib\n.\nfib\n(\n500\n)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\nThis is effectively importing the module in the same way that\nimport\nfibo\nwill do, with the only difference of it being available as\nfib\n.\nIt can also be used when utilising\nfrom\nwith similar effects:\n>>>\nfrom\nfibo\nimport\nfib\nas\nfibonacci\n>>>\nfibonacci\n(\n500\n)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\nNote\nFor efficiency reasons, each module is only imported once per interpreter\nsession.  Therefore, if you change your modules, you must restart the\ninterpreter – or, if it’s just one module you want to test interactively,\nuse\nimportlib.reload()\n, e.g.\nimport\nimportlib;\nimportlib.reload(modulename)\n.\n6.1.1.\nExecuting modules as scripts\n¶\nWhen you run a Python module with\npython\nfibo\n.\npy\n<\narguments\n>\nthe code in the module will be executed, just as if you imported it, but with\nthe\n__name__\nset to\n\"__main__\"\n.  That means that by adding this code at\nthe end of your module:\nif\n__name__\n==\n\"__main__\"\n:\nimport\nsys\nfib\n(\nint\n(\nsys\n.\nargv\n[\n1\n]))\nyou can make the file usable as a script as well as an importable module,\nbecause the code that parses the command line only runs if the module is\nexecuted as the “main” file:\n$\npython\nfibo.py\n50\n0 1 1 2 3 5 8 13 21 34\nIf the module is imported, the code is not run:\n>>>\nimport\nfibo\n>>>\nThis is often used either to provide a convenient user interface to a module, or\nfor testing purposes (running the module as a script executes a test suite).\n6.1.2.\nThe Module Search Path\n¶\nWhen a module named\nspam\nis imported, the interpreter first searches for\na built-in module with that name. These module names are listed in\nsys.builtin_module_names\n. If not found, it then searches for a file\nnamed\nspam.py\nin a list of directories given by the variable\nsys.path\n.\nsys.path\nis initialized from these locations:\nThe directory containing the input script (or the current directory when no\nfile is specified).\nPYTHONPATH\n(a list of directory names, with the same syntax as the\nshell variable\nPATH\n).\nThe installation-dependent default (by convention including a\nsite-packages\ndirectory, handled by the\nsite\nmodule).\nMore details are at\nThe initialization of the sys.path module search path\n.\nNote\nOn file systems which support symlinks, the directory containing the input\nscript is calculated after the symlink is followed. In other words the\ndirectory containing the symlink is\nnot\nadded to the module search path.\nAfter initialization, Python programs can modify\nsys.path\n.  The\ndirectory containing the script being run is placed at the beginning of the\nsearch path, ahead of the standard library path. This means that scripts in that\ndirectory will be loaded instead of modules of the same name in the library\ndirectory. This is an error unless the replacement is intended.  See section\nStandard Modules\nfor more information.\n6.1.3.\n“Compiled” Python files\n¶\nTo speed up loading modules, Python caches the compiled version of each module\nin the\n__pycache__\ndirectory under the name\nmodule.\nversion\n.pyc\n,\nwhere the version encodes the format of the compiled file; it generally contains\nthe Python version number.  For example, in CPython release 3.3 the compiled\nversion of spam.py would be cached as\n__pycache__/spam.cpython-33.pyc\n.  This\nnaming convention allows compiled modules from different releases and different\nversions of Python to coexist.\nPython checks the modification date of the source against the compiled version\nto see if it’s out of date and needs to be recompiled.  This is a completely\nautomatic process.  Also, the compiled modules are platform-independent, so the\nsame library can be shared among systems with different architectures.\nPython does not check the cache in two circumstances.  First, it always\nrecompiles and does not store the result for the module that’s loaded directly\nfrom the command line.  Second, it does not check the cache if there is no\nsource module.  To support a non-source (compiled only) distribution, the\ncompiled module must be in the source directory, and there must not be a source\nmodule.\nSome tips for experts:\nYou can use the\n-O\nor\n-OO\nswitches on the Python command\nto reduce the size of a compiled module.  The\n-O\nswitch removes assert\nstatements, the\n-OO\nswitch removes both assert statements and __doc__\nstrings.  Since some programs may rely on having these available, you should\nonly use this option if you know what you’re doing.  “Optimized” modules have\nan\nopt-\ntag and are usually smaller.  Future releases may\nchange the effects of optimization.\nA program doesn’t run any faster when it is read from a\n.pyc\nfile than when it is read from a\n.py\nfile; the only thing that’s faster\nabout\n.pyc\nfiles is the speed with which they are loaded.\nThe module\ncompileall\ncan create .pyc files for all modules in a\ndirectory.\nThere is more detail on this process, including a flow chart of the\ndecisions, in\nPEP 3147\n.\n6.2.\nStandard Modules\n¶\nPython comes with a library of standard modules, described in a separate\ndocument, the Python Library Reference (“Library Reference” hereafter).  Some\nmodules are built into the interpreter; these provide access to operations that\nare not part of the core of the language but are nevertheless built in, either\nfor efficiency or to provide access to operating system primitives such as\nsystem calls.  The set of such modules is a configuration option which also\ndepends on the underlying platform.  For example, the\nwinreg\nmodule is only\nprovided on Windows systems. One particular module deserves some attention:\nsys\n, which is built into every Python interpreter.  The variables\nsys.ps1\nand\nsys.ps2\ndefine the strings used as primary and secondary\nprompts:\n>>>\nimport\nsys\n>>>\nsys\n.\nps1\n'>>> '\n>>>\nsys\n.\nps2\n'... '\n>>>\nsys\n.\nps1\n=\n'C> '\nC> print('Yuck!')\nYuck!\nC>\nThese two variables are only defined if the interpreter is in interactive mode.\nThe variable\nsys.path\nis a list of strings that determines the interpreter’s\nsearch path for modules. It is initialized to a default path taken from the\nenvironment variable\nPYTHONPATH\n, or from a built-in default if\nPYTHONPATH\nis not set.  You can modify it using standard list\noperations:\n>>>\nimport\nsys\n>>>\nsys\n.\npath\n.\nappend\n(\n'/ufs/guido/lib/python'\n)\n6.3.\nThe\ndir()\nFunction\n¶\nThe built-in function\ndir()\nis used to find out which names a module\ndefines.  It returns a sorted list of strings:\n>>>\nimport\nfibo\n,\nsys\n>>>\ndir\n(\nfibo\n)\n['__name__', 'fib', 'fib2']\n>>>\ndir\n(\nsys\n)\n['__breakpointhook__', '__displayhook__', '__doc__', '__excepthook__',\n'__interactivehook__', '__loader__', '__name__', '__package__', '__spec__',\n'__stderr__', '__stdin__', '__stdout__', '__unraisablehook__',\n'_clear_type_cache', '_current_frames', '_debugmallocstats', '_framework',\n'_getframe', '_git', '_home', '_xoptions', 'abiflags', 'addaudithook',\n'api_version', 'argv', 'audit', 'base_exec_prefix', 'base_prefix',\n'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing',\n'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info',\n'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info',\n'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth',\n'getallocatedblocks', 'getdefaultencoding', 'getdlopenflags',\n'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile',\n'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval',\n'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',\n'intern', 'is_finalizing', 'last_traceback', 'last_type', 'last_value',\n'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks',\n'path_importer_cache', 'platform', 'prefix', 'ps1', 'ps2', 'pycache_prefix',\n'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'setdlopenflags',\n'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr',\n'stdin', 'stdout', 'thread_info', 'unraisablehook', 'version', 'version_info',\n'warnoptions']\nWithout arguments,\ndir()\nlists the names you have defined currently:\n>>>\na\n=\n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n]\n>>>\nimport\nfibo\n>>>\nfib\n=\nfibo\n.\nfib\n>>>\ndir\n()\n['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']\nNote that it lists all types of names: variables, modules, functions, etc.\ndir()\ndoes not list the names of built-in functions and variables.  If you\nwant a list of those, they are defined in the standard module\nbuiltins\n:\n>>>\nimport\nbuiltins\n>>>\ndir\n(\nbuiltins\n)\n['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',\n'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',\n'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',\n'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',\n'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',\n'FileExistsError', 'FileNotFoundError', 'FloatingPointError',\n'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',\n'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',\n'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',\n'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',\n'NotImplementedError', 'OSError', 'OverflowError',\n'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',\n'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',\n'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',\n'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',\n'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',\n'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',\n'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',\n'__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',\n'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',\n'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',\n'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',\n'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',\n'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',\n'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',\n'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',\n'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',\n'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',\n'zip']\n6.4.\nPackages\n¶\nPackages are a way of structuring Python’s module namespace by using “dotted\nmodule names”.  For example, the module name\nA.B\ndesignates a submodule\nnamed\nB\nin a package named\nA\n.  Just like the use of modules saves the\nauthors of different modules from having to worry about each other’s global\nvariable names, the use of dotted module names saves the authors of multi-module\npackages like NumPy or Pillow from having to worry about\neach other’s module names.\nSuppose you want to design a collection of modules (a “package”) for the uniform\nhandling of sound files and sound data.  There are many different sound file\nformats (usually recognized by their extension, for example:\n.wav\n,\n.aiff\n,\n.au\n), so you may need to create and maintain a growing\ncollection of modules for the conversion between the various file formats.\nThere are also many different operations you might want to perform on sound data\n(such as mixing, adding echo, applying an equalizer function, creating an\nartificial stereo effect), so in addition you will be writing a never-ending\nstream of modules to perform these operations.  Here’s a possible structure for\nyour package (expressed in terms of a hierarchical filesystem):\nsound/                          Top-level package\n__init__.py               Initialize the sound package\nformats/                  Subpackage for file format conversions\n__init__.py\nwavread.py\nwavwrite.py\naiffread.py\naiffwrite.py\nauread.py\nauwrite.py\n...\neffects/                  Subpackage for sound effects\n__init__.py\necho.py\nsurround.py\nreverse.py\n...\nfilters/                  Subpackage for filters\n__init__.py\nequalizer.py\nvocoder.py\nkaraoke.py\n...\nWhen importing the package, Python searches through the directories on\nsys.path\nlooking for the package subdirectory.\nThe\n__init__.py\nfiles are required to make Python treat directories\ncontaining the file as packages (unless using a\nnamespace package\n, a\nrelatively advanced feature). This prevents directories with a common name,\nsuch as\nstring\n, from unintentionally hiding valid modules that occur later\non the module search path. In the simplest case,\n__init__.py\ncan just be\nan empty file, but it can also execute initialization code for the package or\nset the\n__all__\nvariable, described later.\nUsers of the package can import individual modules from the package, for\nexample:\nimport\nsound.effects.echo\nThis loads the submodule\nsound.effects.echo\n.  It must be referenced with\nits full name.\nsound\n.\neffects\n.\necho\n.\nechofilter\n(\ninput\n,\noutput\n,\ndelay\n=\n0.7\n,\natten\n=\n4\n)\nAn alternative way of importing the submodule is:\nfrom\nsound.effects\nimport\necho\nThis also loads the submodule\necho\n, and makes it available without its\npackage prefix, so it can be used as follows:\necho\n.\nechofilter\n(\ninput\n,\noutput\n,\ndelay\n=\n0.7\n,\natten\n=\n4\n)\nYet another variation is to import the desired function or variable directly:\nfrom\nsound.effects.echo\nimport\nechofilter\nAgain, this loads the submodule\necho\n, but this makes its function\nechofilter()\ndirectly available:\nechofilter\n(\ninput\n,\noutput\n,\ndelay\n=\n0.7\n,\natten\n=\n4\n)\nNote that when using\nfrom\npackage\nimport\nitem\n, the item can be either a\nsubmodule (or subpackage) of the package, or some  other name defined in the\npackage, like a function, class or variable.  The\nimport\nstatement first\ntests whether the item is defined in the package; if not, it assumes it is a\nmodule and attempts to load it.  If it fails to find it, an\nImportError\nexception is raised.\nContrarily, when using syntax like\nimport\nitem.subitem.subsubitem\n, each item\nexcept for the last must be a package; the last item can be a module or a\npackage but can’t be a class or function or variable defined in the previous\nitem.\n6.4.1.\nImporting * From a Package\n¶\nNow what happens when the user writes\nfrom\nsound.effects\nimport\n*\n?  Ideally,\none would hope that this somehow goes out to the filesystem, finds which\nsubmodules are present in the package, and imports them all.  This could take a\nlong time and importing sub-modules might have unwanted side-effects that should\nonly happen when the sub-module is explicitly imported.\nThe only solution is for the package author to provide an explicit index of the\npackage.  The\nimport\nstatement uses the following convention: if a package’s\n__init__.py\ncode defines a list named\n__all__\n, it is taken to be the\nlist of module names that should be imported when\nfrom\npackage\nimport\n*\nis\nencountered.  It is up to the package author to keep this list up-to-date when a\nnew version of the package is released.  Package authors may also decide not to\nsupport it, if they don’t see a use for importing * from their package.  For\nexample, the file\nsound/effects/__init__.py\ncould contain the following\ncode:\n__all__\n=\n[\n\"echo\"\n,\n\"surround\"\n,\n\"reverse\"\n]\nThis would mean that\nfrom\nsound.effects\nimport\n*\nwould import the three\nnamed submodules of the\nsound.effects\npackage.\nBe aware that submodules might become shadowed by locally defined names. For\nexample, if you added a\nreverse\nfunction to the\nsound/effects/__init__.py\nfile, the\nfrom\nsound.effects\nimport\n*\nwould only import the two submodules\necho\nand\nsurround\n, but\nnot\nthe\nreverse\nsubmodule, because it is shadowed by the locally defined\nreverse\nfunction:\n__all__\n=\n[\n\"echo\"\n,\n# refers to the 'echo.py' file\n\"surround\"\n,\n# refers to the 'surround.py' file\n\"reverse\"\n,\n# !!! refers to the 'reverse' function now !!!\n]\ndef\nreverse\n(\nmsg\n:\nstr\n):\n# <-- this name shadows the 'reverse.py' submodule\nreturn\nmsg\n[::\n-\n1\n]\n#     in the case of a 'from sound.effects import *'\nIf\n__all__\nis not defined, the statement\nfrom\nsound.effects\nimport\n*\ndoes\nnot\nimport all submodules from the package\nsound.effects\ninto the\ncurrent namespace; it only ensures that the package\nsound.effects\nhas\nbeen imported (possibly running any initialization code in\n__init__.py\n)\nand then imports whatever names are defined in the package.  This includes any\nnames defined (and submodules explicitly loaded) by\n__init__.py\n.  It\nalso includes any submodules of the package that were explicitly loaded by\nprevious\nimport\nstatements.  Consider this code:\nimport\nsound.effects.echo\nimport\nsound.effects.surround\nfrom\nsound.effects\nimport\n*\nIn this example, the\necho\nand\nsurround\nmodules are imported in the\ncurrent namespace because they are defined in the\nsound.effects\npackage\nwhen the\nfrom...import\nstatement is executed.  (This also works when\n__all__\nis defined.)\nAlthough certain modules are designed to export only names that follow certain\npatterns when you use\nimport\n*\n, it is still considered bad practice in\nproduction code.\nRemember, there is nothing wrong with using\nfrom\npackage\nimport\nspecific_submodule\n!  In fact, this is the recommended notation unless the\nimporting module needs to use submodules with the same name from different\npackages.\n6.4.2.\nIntra-package References\n¶\nWhen packages are structured into subpackages (as with the\nsound\npackage\nin the example), you can use absolute imports to refer to submodules of siblings\npackages.  For example, if the module\nsound.filters.vocoder\nneeds to use\nthe\necho\nmodule in the\nsound.effects\npackage, it can use\nfrom\nsound.effects\nimport\necho\n.\nYou can also write relative imports, with the\nfrom\nmodule\nimport\nname\nform\nof import statement.  These imports use leading dots to indicate the current and\nparent packages involved in the relative import.  From the\nsurround\nmodule for example, you might use:\nfrom\n.\nimport\necho\nfrom\n..\nimport\nformats\nfrom\n..filters\nimport\nequalizer\nNote that relative imports are based on the name of the current module’s package.\nSince the main module does not have a package, modules intended for use\nas the main module of a Python application must always use absolute imports.\n6.4.3.\nPackages in Multiple Directories\n¶\nPackages support one more special attribute,\n__path__\n.  This is\ninitialized to be a\nsequence\nof strings containing the name of the\ndirectory holding the\npackage’s\n__init__.py\nbefore the code in that file is executed.  This\nvariable can be modified; doing so affects future searches for modules and\nsubpackages contained in the package.\nWhile this feature is not often needed, it can be used to extend the set of\nmodules found in a package.\nFootnotes\n[\n1\n]\nIn fact function definitions are also ‘statements’ that are ‘executed’; the\nexecution of a module-level function definition adds the function name to\nthe module’s global namespace.\nTable of Contents\n6. Modules\n6.1. More on Modules\n6.1.1. Executing modules as scripts\n6.1.2. The Module Search Path\n6.1.3. “Compiled” Python files\n6.2. Standard Modules\n6.3. The\ndir()\nFunction\n6.4. Packages\n6.4.1. Importing * From a Package\n6.4.2. Intra-package References\n6.4.3. Packages in Multiple Directories\nPrevious topic\n5.\nData Structures\nNext topic\n7.\nInput and Output\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n6.\nModules\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/tutorial/modules.html",
    "source": "python",
    "doc_type": "tutorial",
    "scraped_at": 12343.1843947
  },
  {
    "title": "2. Lexical analysis¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n»\n2.\nLexical analysis\n|\nTheme\nAuto\nLight\nDark\n|\n2.\nLexical analysis\n¶\nA Python program is read by a\nparser\n.  Input to the parser is a stream of\ntokens\n, generated by the\nlexical analyzer\n(also known as\nthe\ntokenizer\n).\nThis chapter describes how the lexical analyzer breaks a file into tokens.\nPython reads program text as Unicode code points; the encoding of a source file\ncan be given by an encoding declaration and defaults to UTF-8, see\nPEP 3120\nfor details.  If the source file cannot be decoded, a\nSyntaxError\nis\nraised.\n2.1.\nLine structure\n¶\nA Python program is divided into a number of\nlogical lines\n.\n2.1.1.\nLogical lines\n¶\nThe end of a logical line is represented by the token NEWLINE.  Statements\ncannot cross logical line boundaries except where NEWLINE is allowed by the\nsyntax (e.g., between statements in compound statements). A logical line is\nconstructed from one or more\nphysical lines\nby following the explicit or\nimplicit\nline joining\nrules.\n2.1.2.\nPhysical lines\n¶\nA physical line is a sequence of characters terminated by an end-of-line\nsequence.  In source files and strings, any of the standard platform line\ntermination sequences can be used - the Unix form using ASCII LF (linefeed),\nthe Windows form using the ASCII sequence CR LF (return followed by linefeed),\nor the old Macintosh form using the ASCII CR (return) character.  All of these\nforms can be used equally, regardless of platform. The end of input also serves\nas an implicit terminator for the final physical line.\nWhen embedding Python, source code strings should be passed to Python APIs using\nthe standard C conventions for newline characters (the\n\\n\ncharacter,\nrepresenting ASCII LF, is the line terminator).\n2.1.3.\nComments\n¶\nA comment starts with a hash character (\n#\n) that is not part of a string\nliteral, and ends at the end of the physical line.  A comment signifies the end\nof the logical line unless the implicit line joining rules are invoked. Comments\nare ignored by the syntax.\n2.1.4.\nEncoding declarations\n¶\nIf a comment in the first or second line of the Python script matches the\nregular expression\ncoding[=:]\\s*([-\\w.]+)\n, this comment is processed as an\nencoding declaration; the first group of this expression names the encoding of\nthe source code file. The encoding declaration must appear on a line of its\nown. If it is the second line, the first line must also be a comment-only line.\nThe recommended forms of an encoding expression are\n# -*- coding: <encoding-name> -*-\nwhich is recognized also by GNU Emacs, and\n# vim:fileencoding=<encoding-name>\nwhich is recognized by Bram Moolenaar’s VIM.\nIf no encoding declaration is found, the default encoding is UTF-8.  If the\nimplicit or explicit encoding of a file is UTF-8, an initial UTF-8 byte-order\nmark (\nb'\\xef\\xbb\\xbf'\n) is ignored rather than being a syntax error.\nIf an encoding is declared, the encoding name must be recognized by Python\n(see\nStandard Encodings\n). The\nencoding is used for all lexical analysis, including string literals, comments\nand identifiers.\n2.1.5.\nExplicit line joining\n¶\nTwo or more physical lines may be joined into logical lines using backslash\ncharacters (\n\\\n), as follows: when a physical line ends in a backslash that is\nnot part of a string literal or comment, it is joined with the following forming\na single logical line, deleting the backslash and the following end-of-line\ncharacter.  For example:\nif\n1900\n<\nyear\n<\n2100\nand\n1\n<=\nmonth\n<=\n12\n\\\nand\n1\n<=\nday\n<=\n31\nand\n0\n<=\nhour\n<\n24\n\\\nand\n0\n<=\nminute\n<\n60\nand\n0\n<=\nsecond\n<\n60\n:\n# Looks like a valid date\nreturn\n1\nA line ending in a backslash cannot carry a comment.  A backslash does not\ncontinue a comment.  A backslash does not continue a token except for string\nliterals (i.e., tokens other than string literals cannot be split across\nphysical lines using a backslash).  A backslash is illegal elsewhere on a line\noutside a string literal.\n2.1.6.\nImplicit line joining\n¶\nExpressions in parentheses, square brackets or curly braces can be split over\nmore than one physical line without using backslashes. For example:\nmonth_names\n=\n[\n'Januari'\n,\n'Februari'\n,\n'Maart'\n,\n# These are the\n'April'\n,\n'Mei'\n,\n'Juni'\n,\n# Dutch names\n'Juli'\n,\n'Augustus'\n,\n'September'\n,\n# for the months\n'Oktober'\n,\n'November'\n,\n'December'\n]\n# of the year\nImplicitly continued lines can carry comments.  The indentation of the\ncontinuation lines is not important.  Blank continuation lines are allowed.\nThere is no NEWLINE token between implicit continuation lines.  Implicitly\ncontinued lines can also occur within triple-quoted strings (see below); in that\ncase they cannot carry comments.\n2.1.7.\nBlank lines\n¶\nA logical line that contains only spaces, tabs, formfeeds and possibly a\ncomment, is ignored (i.e., no NEWLINE token is generated).  During interactive\ninput of statements, handling of a blank line may differ depending on the\nimplementation of the read-eval-print loop.  In the standard interactive\ninterpreter, an entirely blank logical line (i.e. one containing not even\nwhitespace or a comment) terminates a multi-line statement.\n2.1.8.\nIndentation\n¶\nLeading whitespace (spaces and tabs) at the beginning of a logical line is used\nto compute the indentation level of the line, which in turn is used to determine\nthe grouping of statements.\nTabs are replaced (from left to right) by one to eight spaces such that the\ntotal number of characters up to and including the replacement is a multiple of\neight (this is intended to be the same rule as used by Unix).  The total number\nof spaces preceding the first non-blank character then determines the line’s\nindentation.  Indentation cannot be split over multiple physical lines using\nbackslashes; the whitespace up to the first backslash determines the\nindentation.\nIndentation is rejected as inconsistent if a source file mixes tabs and spaces\nin a way that makes the meaning dependent on the worth of a tab in spaces; a\nTabError\nis raised in that case.\nCross-platform compatibility note:\nbecause of the nature of text editors on\nnon-UNIX platforms, it is unwise to use a mixture of spaces and tabs for the\nindentation in a single source file.  It should also be noted that different\nplatforms may explicitly limit the maximum indentation level.\nA formfeed character may be present at the start of the line; it will be ignored\nfor the indentation calculations above.  Formfeed characters occurring elsewhere\nin the leading whitespace have an undefined effect (for instance, they may reset\nthe space count to zero).\nThe indentation levels of consecutive lines are used to generate INDENT and\nDEDENT tokens, using a stack, as follows.\nBefore the first line of the file is read, a single zero is pushed on the stack;\nthis will never be popped off again.  The numbers pushed on the stack will\nalways be strictly increasing from bottom to top.  At the beginning of each\nlogical line, the line’s indentation level is compared to the top of the stack.\nIf it is equal, nothing happens. If it is larger, it is pushed on the stack, and\none INDENT token is generated.  If it is smaller, it\nmust\nbe one of the\nnumbers occurring on the stack; all numbers on the stack that are larger are\npopped off, and for each number popped off a DEDENT token is generated.  At the\nend of the file, a DEDENT token is generated for each number remaining on the\nstack that is larger than zero.\nHere is an example of a correctly (though confusingly) indented piece of Python\ncode:\ndef\nperm\n(\nl\n):\n# Compute the list of all permutations of l\nif\nlen\n(\nl\n)\n<=\n1\n:\nreturn\n[\nl\n]\nr\n=\n[]\nfor\ni\nin\nrange\n(\nlen\n(\nl\n)):\ns\n=\nl\n[:\ni\n]\n+\nl\n[\ni\n+\n1\n:]\np\n=\nperm\n(\ns\n)\nfor\nx\nin\np\n:\nr\n.\nappend\n(\nl\n[\ni\n:\ni\n+\n1\n]\n+\nx\n)\nreturn\nr\nThe following example shows various indentation errors:\ndef\nperm\n(\nl\n):\n# error: first line indented\nfor\ni\nin\nrange\n(\nlen\n(\nl\n)):\n# error: not indented\ns\n=\nl\n[:\ni\n]\n+\nl\n[\ni\n+\n1\n:]\np\n=\nperm\n(\nl\n[:\ni\n]\n+\nl\n[\ni\n+\n1\n:])\n# error: unexpected indent\nfor\nx\nin\np\n:\nr\n.\nappend\n(\nl\n[\ni\n:\ni\n+\n1\n]\n+\nx\n)\nreturn\nr\n# error: inconsistent dedent\n(Actually, the first three errors are detected by the parser; only the last\nerror is found by the lexical analyzer — the indentation of\nreturn\nr\ndoes\nnot match a level popped off the stack.)\n2.1.9.\nWhitespace between tokens\n¶\nExcept at the beginning of a logical line or in string literals, the whitespace\ncharacters space, tab and formfeed can be used interchangeably to separate\ntokens.  Whitespace is needed between two tokens only if their concatenation\ncould otherwise be interpreted as a different token (e.g., ab is one token, but\na b is two tokens).\n2.2.\nOther tokens\n¶\nBesides NEWLINE, INDENT and DEDENT, the following categories of tokens exist:\nidentifiers\n,\nkeywords\n,\nliterals\n,\noperators\n, and\ndelimiters\n. Whitespace\ncharacters (other than line terminators, discussed earlier) are not tokens, but\nserve to delimit tokens. Where ambiguity exists, a token comprises the longest\npossible string that forms a legal token, when read from left to right.\n2.3.\nIdentifiers and keywords\n¶\nIdentifiers (also referred to as\nnames\n) are described by the following lexical\ndefinitions.\nThe syntax of identifiers in Python is based on the Unicode standard annex\nUAX-31, with elaboration and changes as defined below; see also\nPEP 3131\nfor\nfurther details.\nWithin the ASCII range (U+0001..U+007F), the valid characters for identifiers\ninclude the uppercase and lowercase letters\nA\nthrough\nZ\n, the underscore\n_\nand, except for the first character, the digits\n0\nthrough\n9\n.\nPython 3.0 introduced additional characters from outside the ASCII range (see\nPEP 3131\n).  For these characters, the classification uses the version of the\nUnicode Character Database as included in the\nunicodedata\nmodule.\nIdentifiers are unlimited in length.  Case is significant.\nidentifier\n::=\nxid_start\nxid_continue\n*\nid_start\n::= <all characters in general categories Lu, Ll, Lt, Lm, Lo, Nl, the underscore, and characters with the Other_ID_Start property>\nid_continue\n::= <all characters in\nid_start\n, plus characters in the categories Mn, Mc, Nd, Pc and others with the Other_ID_Continue property>\nxid_start\n::= <all characters in\nid_start\nwhose NFKC normalization is in \"id_start xid_continue*\">\nxid_continue\n::= <all characters in\nid_continue\nwhose NFKC normalization is in \"id_continue*\">\nThe Unicode category codes mentioned above stand for:\nLu\n- uppercase letters\nLl\n- lowercase letters\nLt\n- titlecase letters\nLm\n- modifier letters\nLo\n- other letters\nNl\n- letter numbers\nMn\n- nonspacing marks\nMc\n- spacing combining marks\nNd\n- decimal numbers\nPc\n- connector punctuations\nOther_ID_Start\n- explicit list of characters in\nPropList.txt\nto support backwards\ncompatibility\nOther_ID_Continue\n- likewise\nAll identifiers are converted into the normal form NFKC while parsing; comparison\nof identifiers is based on NFKC.\nA non-normative HTML file listing all valid identifier characters for Unicode\n15.1.0 can be found at\nhttps://www.unicode.org/Public/15.1.0/ucd/DerivedCoreProperties.txt\n2.3.1.\nKeywords\n¶\nThe following identifiers are used as reserved words, or\nkeywords\nof the\nlanguage, and cannot be used as ordinary identifiers.  They must be spelled\nexactly as written here:\nFalse      await      else       import     pass\nNone       break      except     in         raise\nTrue       class      finally    is         return\nand        continue   for        lambda     try\nas         def        from       nonlocal   while\nassert     del        global     not        with\nasync      elif       if         or         yield\n2.3.2.\nSoft Keywords\n¶\nAdded in version 3.10.\nSome identifiers are only reserved under specific contexts. These are known as\nsoft keywords\n.  The identifiers\nmatch\n,\ncase\n,\ntype\nand\n_\ncan\nsyntactically act as keywords in certain contexts,\nbut this distinction is done at the parser level, not when tokenizing.\nAs soft keywords, their use in the grammar is possible while still\npreserving compatibility with existing code that uses these names as\nidentifier names.\nmatch\n,\ncase\n, and\n_\nare used in the\nmatch\nstatement.\ntype\nis used in the\ntype\nstatement.\nChanged in version 3.12:\ntype\nis now a soft keyword.\n2.3.3.\nReserved classes of identifiers\n¶\nCertain classes of identifiers (besides keywords) have special meanings.  These\nclasses are identified by the patterns of leading and trailing underscore\ncharacters:\n_*\nNot imported by\nfrom\nmodule\nimport\n*\n.\n_\nIn a\ncase\npattern within a\nmatch\nstatement,\n_\nis a\nsoft keyword\nthat denotes a\nwildcard\n.\nSeparately, the interactive interpreter makes the result of the last evaluation\navailable in the variable\n_\n.\n(It is stored in the\nbuiltins\nmodule, alongside built-in\nfunctions like\nprint\n.)\nElsewhere,\n_\nis a regular identifier. It is often used to name\n“special” items, but it is not special to Python itself.\nNote\nThe name\n_\nis often used in conjunction with internationalization;\nrefer to the documentation for the\ngettext\nmodule for more\ninformation on this convention.\nIt is also commonly used for unused variables.\n__*__\nSystem-defined names, informally known as “dunder” names. These names are\ndefined by the interpreter and its implementation (including the standard library).\nCurrent system names are discussed in the\nSpecial method names\nsection and elsewhere.\nMore will likely be defined in future versions of Python.\nAny\nuse of\n__*__\nnames,\nin any context, that does not follow explicitly documented use, is subject to\nbreakage without warning.\n__*\nClass-private names.  Names in this category, when used within the context of a\nclass definition, are re-written to use a mangled form to help avoid name\nclashes between “private” attributes of base and derived classes. See section\nIdentifiers (Names)\n.\n2.4.\nLiterals\n¶\nLiterals are notations for constant values of some built-in types.\n2.4.1.\nString and Bytes literals\n¶\nString literals are described by the following lexical definitions:\nstringliteral\n::= [\nstringprefix\n](\nshortstring\n|\nlongstring\n)\nstringprefix\n::= \"r\" | \"u\" | \"R\" | \"U\" | \"f\" | \"F\"\n| \"fr\" | \"Fr\" | \"fR\" | \"FR\" | \"rf\" | \"rF\" | \"Rf\" | \"RF\"\nshortstring\n::= \"'\"\nshortstringitem\n* \"'\" | '\"'\nshortstringitem\n* '\"'\nlongstring\n::= \"'''\"\nlongstringitem\n* \"'''\" | '\"\"\"'\nlongstringitem\n* '\"\"\"'\nshortstringitem\n::=\nshortstringchar\n|\nstringescapeseq\nlongstringitem\n::=\nlongstringchar\n|\nstringescapeseq\nshortstringchar\n::= <any source character except \"\\\" or newline or the quote>\nlongstringchar\n::= <any source character except \"\\\">\nstringescapeseq\n::= \"\\\" <any source character>\nbytesliteral\n::=\nbytesprefix\n(\nshortbytes\n|\nlongbytes\n)\nbytesprefix\n::= \"b\" | \"B\" | \"br\" | \"Br\" | \"bR\" | \"BR\" | \"rb\" | \"rB\" | \"Rb\" | \"RB\"\nshortbytes\n::= \"'\"\nshortbytesitem\n* \"'\" | '\"'\nshortbytesitem\n* '\"'\nlongbytes\n::= \"'''\"\nlongbytesitem\n* \"'''\" | '\"\"\"'\nlongbytesitem\n* '\"\"\"'\nshortbytesitem\n::=\nshortbyteschar\n|\nbytesescapeseq\nlongbytesitem\n::=\nlongbyteschar\n|\nbytesescapeseq\nshortbyteschar\n::= <any ASCII character except \"\\\" or newline or the quote>\nlongbyteschar\n::= <any ASCII character except \"\\\">\nbytesescapeseq\n::= \"\\\" <any ASCII character>\nOne syntactic restriction not indicated by these productions is that whitespace\nis not allowed between the\nstringprefix\nor\nbytesprefix\nand the rest of the literal. The source\ncharacter set is defined by the encoding declaration; it is UTF-8 if no encoding\ndeclaration is given in the source file; see section\nEncoding declarations\n.\nIn plain English: Both types of literals can be enclosed in matching single quotes\n(\n'\n) or double quotes (\n\"\n).  They can also be enclosed in matching groups\nof three single or double quotes (these are generally referred to as\ntriple-quoted strings\n). The backslash (\n\\\n) character is used to give special\nmeaning to otherwise ordinary characters like\nn\n, which means ‘newline’ when\nescaped (\n\\n\n). It can also be used to escape characters that otherwise have a\nspecial meaning, such as newline, backslash itself, or the quote character.\nSee\nescape sequences\nbelow for examples.\nBytes literals are always prefixed with\n'b'\nor\n'B'\n; they produce an\ninstance of the\nbytes\ntype instead of the\nstr\ntype.  They\nmay only contain ASCII characters; bytes with a numeric value of 128 or greater\nmust be expressed with escapes.\nBoth string and bytes literals may optionally be prefixed with a letter\n'r'\nor\n'R'\n; such constructs are called\nraw string literals\nand\nraw bytes literals\nrespectively and treat backslashes as\nliteral characters.  As a result, in raw string literals,\n'\\U'\nand\n'\\u'\nescapes are not treated specially.\nAdded in version 3.3:\nThe\n'rb'\nprefix of raw bytes literals has been added as a synonym\nof\n'br'\n.\nSupport for the unicode legacy literal (\nu'value'\n) was reintroduced\nto simplify the maintenance of dual Python 2.x and 3.x codebases.\nSee\nPEP 414\nfor more information.\nA string literal with\n'f'\nor\n'F'\nin its prefix is a\nformatted string literal\n; see\nf-strings\n.  The\n'f'\nmay be\ncombined with\n'r'\n, but not with\n'b'\nor\n'u'\n, therefore raw\nformatted strings are possible, but formatted bytes literals are not.\nIn triple-quoted literals, unescaped newlines and quotes are allowed (and are\nretained), except that three unescaped quotes in a row terminate the literal.  (A\n“quote” is the character used to open the literal, i.e. either\n'\nor\n\"\n.)\n2.4.1.1.\nEscape sequences\n¶\nUnless an\n'r'\nor\n'R'\nprefix is present, escape sequences in string and\nbytes literals are interpreted according to rules similar to those used by\nStandard C.  The recognized escape sequences are:\nEscape Sequence\nMeaning\nNotes\n\\\n<newline>\nBackslash and newline ignored\n(1)\n\\\\\nBackslash (\n\\\n)\n\\'\nSingle quote (\n'\n)\n\\\"\nDouble quote (\n\"\n)\n\\a\nASCII Bell (BEL)\n\\b\nASCII Backspace (BS)\n\\f\nASCII Formfeed (FF)\n\\n\nASCII Linefeed (LF)\n\\r\nASCII Carriage Return (CR)\n\\t\nASCII Horizontal Tab (TAB)\n\\v\nASCII Vertical Tab (VT)\n\\\nooo\nCharacter with octal value\nooo\n(2,4)\n\\x\nhh\nCharacter with hex value\nhh\n(3,4)\nEscape sequences only recognized in string literals are:\nEscape Sequence\nMeaning\nNotes\n\\N{\nname\n}\nCharacter named\nname\nin the\nUnicode database\n(5)\n\\u\nxxxx\nCharacter with 16-bit hex value\nxxxx\n(6)\n\\U\nxxxxxxxx\nCharacter with 32-bit hex value\nxxxxxxxx\n(7)\nNotes:\nA backslash can be added at the end of a line to ignore the newline:\n>>>\n'This string will not include\n\\\n...\nbackslashes or newline characters.'\n'This string will not include backslashes or newline characters.'\nThe same result can be achieved using\ntriple-quoted strings\n,\nor parentheses and\nstring literal concatenation\n.\nAs in Standard C, up to three octal digits are accepted.\nChanged in version 3.11:\nOctal escapes with value larger than\n0o377\nproduce a\nDeprecationWarning\n.\nChanged in version 3.12:\nOctal escapes with value larger than\n0o377\nproduce a\nSyntaxWarning\n. In a future Python version they will be eventually\na\nSyntaxError\n.\nUnlike in Standard C, exactly two hex digits are required.\nIn a bytes literal, hexadecimal and octal escapes denote the byte with the\ngiven value. In a string literal, these escapes denote a Unicode character\nwith the given value.\nChanged in version 3.3:\nSupport for name aliases\n[\n1\n]\nhas been added.\nExactly four hex digits are required.\nAny Unicode character can be encoded this way.  Exactly eight hex digits\nare required.\nUnlike Standard C, all unrecognized escape sequences are left in the string\nunchanged, i.e.,\nthe backslash is left in the result\n.  (This behavior is\nuseful when debugging: if an escape sequence is mistyped, the resulting output\nis more easily recognized as broken.)  It is also important to note that the\nescape sequences only recognized in string literals fall into the category of\nunrecognized escapes for bytes literals.\nChanged in version 3.6:\nUnrecognized escape sequences produce a\nDeprecationWarning\n.\nChanged in version 3.12:\nUnrecognized escape sequences produce a\nSyntaxWarning\n. In a future\nPython version they will be eventually a\nSyntaxError\n.\nEven in a raw literal, quotes can be escaped with a backslash, but the\nbackslash remains in the result; for example,\nr\"\\\"\"\nis a valid string\nliteral consisting of two characters: a backslash and a double quote;\nr\"\\\"\nis not a valid string literal (even a raw string cannot end in an odd number of\nbackslashes).  Specifically,\na raw literal cannot end in a single backslash\n(since the backslash would escape the following quote character).  Note also\nthat a single backslash followed by a newline is interpreted as those two\ncharacters as part of the literal,\nnot\nas a line continuation.\n2.4.2.\nString literal concatenation\n¶\nMultiple adjacent string or bytes literals (delimited by whitespace), possibly\nusing different quoting conventions, are allowed, and their meaning is the same\nas their concatenation.  Thus,\n\"hello\"\n'world'\nis equivalent to\n\"helloworld\"\n.  This feature can be used to reduce the number of backslashes\nneeded, to split long strings conveniently across long lines, or even to add\ncomments to parts of strings, for example:\nre\n.\ncompile\n(\n\"[A-Za-z_]\"\n# letter or underscore\n\"[A-Za-z0-9_]*\"\n# letter, digit or underscore\n)\nNote that this feature is defined at the syntactical level, but implemented at\ncompile time.  The ‘+’ operator must be used to concatenate string expressions\nat run time.  Also note that literal concatenation can use different quoting\nstyles for each component (even mixing raw strings and triple quoted strings),\nand formatted string literals may be concatenated with plain string literals.\n2.4.3.\nf-strings\n¶\nAdded in version 3.6.\nA\nformatted string literal\nor\nf-string\nis a string literal\nthat is prefixed with\n'f'\nor\n'F'\n.  These strings may contain\nreplacement fields, which are expressions delimited by curly braces\n{}\n.\nWhile other string literals always have a constant value, formatted strings\nare really expressions evaluated at run time.\nEscape sequences are decoded like in ordinary string literals (except when\na literal is also marked as a raw string).  After decoding, the grammar\nfor the contents of the string is:\nf_string\n::= (\nliteral_char\n| \"{{\" | \"}}\" |\nreplacement_field\n)*\nreplacement_field\n::= \"{\"\nf_expression\n[\"=\"] [\"!\"\nconversion\n] [\":\"\nformat_spec\n] \"}\"\nf_expression\n::= (\nconditional_expression\n| \"*\"\nor_expr\n)\n(\",\"\nconditional_expression\n| \",\" \"*\"\nor_expr\n)* [\",\"]\n|\nyield_expression\nconversion\n::= \"s\" | \"r\" | \"a\"\nformat_spec\n::= (\nliteral_char\n|\nreplacement_field\n)*\nliteral_char\n::= <any code point except \"{\", \"}\" or NULL>\nThe parts of the string outside curly braces are treated literally,\nexcept that any doubled curly braces\n'{{'\nor\n'}}'\nare replaced\nwith the corresponding single curly brace.  A single opening curly\nbracket\n'{'\nmarks a replacement field, which starts with a\nPython expression. To display both the expression text and its value after\nevaluation, (useful in debugging), an equal sign\n'='\nmay be added after the\nexpression. A conversion field, introduced by an exclamation point\n'!'\nmay\nfollow.  A format specifier may also be appended, introduced by a colon\n':'\n.\nA replacement field ends with a closing curly bracket\n'}'\n.\nExpressions in formatted string literals are treated like regular\nPython expressions surrounded by parentheses, with a few exceptions.\nAn empty expression is not allowed, and both\nlambda\nand\nassignment expressions\n:=\nmust be surrounded by explicit parentheses.\nEach expression is evaluated in the context where the formatted string literal\nappears, in order from left to right.  Replacement expressions can contain\nnewlines in both single-quoted and triple-quoted f-strings and they can contain\ncomments.  Everything that comes after a\n#\ninside a replacement field\nis a comment (even closing braces and quotes). In that case, replacement fields\nmust be closed in a different line.\n>>> f\"abc{a # This is a comment }\"\n... + 3}\"\n'abc5'\nChanged in version 3.7:\nPrior to Python 3.7, an\nawait\nexpression and comprehensions\ncontaining an\nasync\nfor\nclause were illegal in the expressions\nin formatted string literals due to a problem with the implementation.\nChanged in version 3.12:\nPrior to Python 3.12, comments were not allowed inside f-string replacement\nfields.\nWhen the equal sign\n'='\nis provided, the output will have the expression\ntext, the\n'='\nand the evaluated value. Spaces after the opening brace\n'{'\n, within the expression and after the\n'='\nare all retained in the\noutput. By default, the\n'='\ncauses the\nrepr()\nof the expression to be\nprovided, unless there is a format specified. When a format is specified it\ndefaults to the\nstr()\nof the expression unless a conversion\n'!r'\nis\ndeclared.\nAdded in version 3.8:\nThe equal sign\n'='\n.\nIf a conversion is specified, the result of evaluating the expression\nis converted before formatting.  Conversion\n'!s'\ncalls\nstr()\non\nthe result,\n'!r'\ncalls\nrepr()\n, and\n'!a'\ncalls\nascii()\n.\nThe result is then formatted using the\nformat()\nprotocol.  The\nformat specifier is passed to the\n__format__()\nmethod of the\nexpression or conversion result.  An empty string is passed when the\nformat specifier is omitted.  The formatted result is then included in\nthe final value of the whole string.\nTop-level format specifiers may include nested replacement fields. These nested\nfields may include their own conversion fields and\nformat specifiers\n, but may not include more deeply nested replacement fields. The\nformat specifier mini-language\nis the same as that used by\nthe\nstr.format()\nmethod.\nFormatted string literals may be concatenated, but replacement fields\ncannot be split across literals.\nSome examples of formatted string literals:\n>>>\nname\n=\n\"Fred\"\n>>>\nf\n\"He said his name is\n{\nname\n!r}\n.\"\n\"He said his name is 'Fred'.\"\n>>>\nf\n\"He said his name is\n{\nrepr\n(\nname\n)\n}\n.\"\n# repr() is equivalent to !r\n\"He said his name is 'Fred'.\"\n>>>\nwidth\n=\n10\n>>>\nprecision\n=\n4\n>>>\nvalue\n=\ndecimal\n.\nDecimal\n(\n\"12.34567\"\n)\n>>>\nf\n\"result:\n{\nvalue\n:{\nwidth\n}\n.\n{\nprecision\n}}\n\"\n# nested fields\n'result:      12.35'\n>>>\ntoday\n=\ndatetime\n(\nyear\n=\n2017\n,\nmonth\n=\n1\n,\nday\n=\n27\n)\n>>>\nf\n\"\n{\ntoday\n:\n%B %d, %Y\n}\n\"\n# using date format specifier\n'January 27, 2017'\n>>>\nf\n\"\n{\ntoday\n=:\n%B %d, %Y\n}\n\"\n# using date format specifier and debugging\n'today=January 27, 2017'\n>>>\nnumber\n=\n1024\n>>>\nf\n\"\n{\nnumber\n:\n#0x\n}\n\"\n# using integer format specifier\n'0x400'\n>>>\nfoo\n=\n\"bar\"\n>>>\nf\n\"\n{\nfoo\n= }\n\"\n# preserves whitespace\n\" foo = 'bar'\"\n>>>\nline\n=\n\"The mill's closed\"\n>>>\nf\n\"\n{\nline\n= }\n\"\n'line = \"The mill\\'s closed\"'\n>>>\nf\n\"\n{\nline\n= :\n20\n}\n\"\n\"line = The mill's closed   \"\n>>>\nf\n\"\n{\nline\n= !r:\n20\n}\n\"\n'line = \"The mill\\'s closed\" '\nReusing the outer f-string quoting type inside a replacement field is\npermitted:\n>>>\na\n=\ndict\n(\nx\n=\n2\n)\n>>>\nf\n\"abc\n{\na\n[\n\"x\"\n]\n}\ndef\"\n'abc 2 def'\nChanged in version 3.12:\nPrior to Python 3.12, reuse of the same quoting type of the outer f-string\ninside a replacement field was not possible.\nBackslashes are also allowed in replacement fields and are evaluated the same\nway as in any other context:\n>>>\na\n=\n[\n\"a\"\n,\n\"b\"\n,\n\"c\"\n]\n>>>\nprint\n(\nf\n\"List a contains:\n\\n\n{\n\"\n\\n\n\"\n.\njoin\n(\na\n)\n}\n\"\n)\nList a contains:\na\nb\nc\nChanged in version 3.12:\nPrior to Python 3.12, backslashes were not permitted inside an f-string\nreplacement field.\nFormatted string literals cannot be used as docstrings, even if they do not\ninclude expressions.\n>>>\ndef\nfoo\n():\n...\nf\n\"Not a docstring\"\n...\n>>>\nfoo\n.\n__doc__\nis\nNone\nTrue\nSee also\nPEP 498\nfor the proposal that added formatted string literals,\nand\nstr.format()\n, which uses a related format string mechanism.\n2.4.4.\nNumeric literals\n¶\nThere are three types of numeric literals: integers, floating-point numbers, and\nimaginary numbers.  There are no complex literals (complex numbers can be formed\nby adding a real number and an imaginary number).\nNote that numeric literals do not include a sign; a phrase like\n-1\nis\nactually an expression composed of the unary operator ‘\n-\n’ and the literal\n1\n.\n2.4.5.\nInteger literals\n¶\nInteger literals are described by the following lexical definitions:\ninteger\n::=\ndecinteger\n|\nbininteger\n|\noctinteger\n|\nhexinteger\ndecinteger\n::=\nnonzerodigit\n([\"_\"]\ndigit\n)* | \"0\"+ ([\"_\"] \"0\")*\nbininteger\n::= \"0\" (\"b\" | \"B\") ([\"_\"]\nbindigit\n)+\noctinteger\n::= \"0\" (\"o\" | \"O\") ([\"_\"]\noctdigit\n)+\nhexinteger\n::= \"0\" (\"x\" | \"X\") ([\"_\"]\nhexdigit\n)+\nnonzerodigit\n::= \"1\"...\"9\"\ndigit\n::= \"0\"...\"9\"\nbindigit\n::= \"0\" | \"1\"\noctdigit\n::= \"0\"...\"7\"\nhexdigit\n::=\ndigit\n| \"a\"...\"f\" | \"A\"...\"F\"\nThere is no limit for the length of integer literals apart from what can be\nstored in available memory.\nUnderscores are ignored for determining the numeric value of the literal.  They\ncan be used to group digits for enhanced readability.  One underscore can occur\nbetween digits, and after base specifiers like\n0x\n.\nNote that leading zeros in a non-zero decimal number are not allowed. This is\nfor disambiguation with C-style octal literals, which Python used before version\n3.0.\nSome examples of integer literals:\n7\n2147483647\n0o177\n0b100110111\n3\n79228162514264337593543950336\n0o377\n0xdeadbeef\n100_000_000_000\n0b_1110_0101\nChanged in version 3.6:\nUnderscores are now allowed for grouping purposes in literals.\n2.4.6.\nFloating-point literals\n¶\nFloating-point literals are described by the following lexical definitions:\nfloatnumber\n::=\npointfloat\n|\nexponentfloat\npointfloat\n::= [\ndigitpart\n]\nfraction\n|\ndigitpart\n\".\"\nexponentfloat\n::= (\ndigitpart\n|\npointfloat\n)\nexponent\ndigitpart\n::=\ndigit\n([\"_\"]\ndigit\n)*\nfraction\n::= \".\"\ndigitpart\nexponent\n::= (\"e\" | \"E\") [\"+\" | \"-\"]\ndigitpart\nNote that the integer and exponent parts are always interpreted using radix 10.\nFor example,\n077e010\nis legal, and denotes the same number as\n77e10\n. The\nallowed range of floating-point literals is implementation-dependent.  As in\ninteger literals, underscores are supported for digit grouping.\nSome examples of floating-point literals:\n3.14\n10.\n.001\n1e100\n3.14e-10\n0e0\n3.14_15_93\nChanged in version 3.6:\nUnderscores are now allowed for grouping purposes in literals.\n2.4.7.\nImaginary literals\n¶\nImaginary literals are described by the following lexical definitions:\nimagnumber\n::= (\nfloatnumber\n|\ndigitpart\n) (\"j\" | \"J\")\nAn imaginary literal yields a complex number with a real part of 0.0.  Complex\nnumbers are represented as a pair of floating-point numbers and have the same\nrestrictions on their range.  To create a complex number with a nonzero real\npart, add a floating-point number to it, e.g.,\n(3+4j)\n.  Some examples of\nimaginary literals:\n3.14\nj\n10.\nj\n10\nj\n.001\nj\n1e100j\n3.14e-10\nj\n3.14_15_93\nj\n2.5.\nOperators\n¶\nThe following tokens are operators:\n+       -       *       **      /       //      %      @\n<<      >>      &       |       ^       ~       :=\n<       >       <=      >=      ==      !=\n2.6.\nDelimiters\n¶\nThe following tokens serve as delimiters in the grammar:\n(       )       [       ]       {       }\n,       :       !       .       ;       @       =\n->      +=      -=      *=      /=      //=     %=\n@=      &=      |=      ^=      >>=     <<=     **=\nThe period can also occur in floating-point and imaginary literals.  A sequence\nof three periods has a special meaning as an ellipsis literal. The second half\nof the list, the augmented assignment operators, serve lexically as delimiters,\nbut also perform an operation.\nThe following printing ASCII characters have special meaning as part of other\ntokens or are otherwise significant to the lexical analyzer:\n'       \"       #       \\\nThe following printing ASCII characters are not used in Python.  Their\noccurrence outside string literals and comments is an unconditional error:\n$       ?       `\nFootnotes\n[\n1\n]\nhttps://www.unicode.org/Public/15.1.0/ucd/NameAliases.txt\nTable of Contents\n2. Lexical analysis\n2.1. Line structure\n2.1.1. Logical lines\n2.1.2. Physical lines\n2.1.3. Comments\n2.1.4. Encoding declarations\n2.1.5. Explicit line joining\n2.1.6. Implicit line joining\n2.1.7. Blank lines\n2.1.8. Indentation\n2.1.9. Whitespace between tokens\n2.2. Other tokens\n2.3. Identifiers and keywords\n2.3.1. Keywords\n2.3.2. Soft Keywords\n2.3.3. Reserved classes of identifiers\n2.4. Literals\n2.4.1. String and Bytes literals\n2.4.1.1. Escape sequences\n2.4.2. String literal concatenation\n2.4.3. f-strings\n2.4.4. Numeric literals\n2.4.5. Integer literals\n2.4.6. Floating-point literals\n2.4.7. Imaginary literals\n2.5. Operators\n2.6. Delimiters\nPrevious topic\n1.\nIntroduction\nNext topic\n3.\nData model\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n»\n2.\nLexical analysis\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/reference/lexical_analysis.html",
    "source": "python",
    "doc_type": "language_reference",
    "scraped_at": 12343.3723624
  },
  {
    "title": "pdb — The Python Debugger¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nDebugging and Profiling\n»\npdb\n— The Python Debugger\n|\nTheme\nAuto\nLight\nDark\n|\npdb\n— The Python Debugger\n¶\nSource code:\nLib/pdb.py\nThe module\npdb\ndefines an interactive source code debugger for Python\nprograms.  It supports setting (conditional) breakpoints and single stepping at\nthe source line level, inspection of stack frames, source code listing, and\nevaluation of arbitrary Python code in the context of any stack frame.  It also\nsupports post-mortem debugging and can be called under program control.\nThe debugger is extensible – it is actually defined as the class\nPdb\n.\nThis is currently undocumented but easily understood by reading the source.  The\nextension interface uses the modules\nbdb\nand\ncmd\n.\nSee also\nModule\nfaulthandler\nUsed to dump Python tracebacks explicitly, on a fault, after a timeout,\nor on a user signal.\nModule\ntraceback\nStandard interface to extract, format and print stack traces of Python programs.\nThe typical usage to break into the debugger is to insert:\nimport\npdb\n;\npdb\n.\nset_trace\n()\nOr:\nbreakpoint\n()\nat the location you want to break into the debugger, and then run the program.\nYou can then step through the code following this statement, and continue\nrunning without the debugger using the\ncontinue\ncommand.\nChanged in version 3.7:\nThe built-in\nbreakpoint()\n, when called with defaults, can be used\ninstead of\nimport\npdb;\npdb.set_trace()\n.\ndef\ndouble\n(\nx\n):\nbreakpoint\n()\nreturn\nx\n*\n2\nval\n=\n3\nprint\n(\nf\n\"\n{\nval\n}\n* 2 is\n{\ndouble\n(\nval\n)\n}\n\"\n)\nThe debugger’s prompt is\n(Pdb)\n, which is the indicator that you are in debug mode:\n>\n...\n(\n2\n)\ndouble\n()\n->\nbreakpoint\n()\n(\nPdb\n)\np\nx\n3\n(\nPdb\n)\ncontinue\n3\n*\n2\nis\n6\nChanged in version 3.3:\nTab-completion via the\nreadline\nmodule is available for commands and\ncommand arguments, e.g. the current global and local names are offered as\narguments of the\np\ncommand.\nYou can also invoke\npdb\nfrom the command line to debug other scripts.  For\nexample:\npython\n-\nm\npdb\n[\n-\nc\ncommand\n]\n(\n-\nm\nmodule\n|\npyfile\n)\n[\nargs\n...\n]\nWhen invoked as a module, pdb will automatically enter post-mortem debugging if\nthe program being debugged exits abnormally.  After post-mortem debugging (or\nafter normal exit of the program), pdb will restart the program.  Automatic\nrestarting preserves pdb’s state (such as breakpoints) and in most cases is more\nuseful than quitting the debugger upon program’s exit.\n-c\n,\n--command\n<command>\n¶\nTo execute commands as if given in a\n.pdbrc\nfile; see\nDebugger Commands\n.\nChanged in version 3.2:\nAdded the\n-c\noption.\n-m\n<module>\n¶\nTo execute modules similar to the way\npython\n-m\ndoes. As with a script,\nthe debugger will pause execution just before the first line of the module.\nChanged in version 3.7:\nAdded the\n-m\noption.\nTypical usage to execute a statement under control of the debugger is:\n>>>\nimport\npdb\n>>>\ndef\nf\n(\nx\n):\n...\nprint\n(\n1\n/\nx\n)\n>>>\npdb\n.\nrun\n(\n\"f(2)\"\n)\n> <string>(1)<module>()\n(Pdb) continue\n0.5\n>>>\nThe typical usage to inspect a crashed program is:\n>>>\nimport\npdb\n>>>\ndef\nf\n(\nx\n):\n...\nprint\n(\n1\n/\nx\n)\n...\n>>>\nf\n(\n0\n)\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nFile\n\"<stdin>\"\n, line\n2\n, in\nf\nZeroDivisionError\n:\ndivision by zero\n>>>\npdb\n.\npm\n()\n> <stdin>(2)f()\n(Pdb) p x\n0\n(Pdb)\nChanged in version 3.13:\nThe implementation of\nPEP 667\nmeans that name assignments made via\npdb\nwill immediately affect the active scope, even when running inside an\noptimized scope\n.\nThe module defines the following functions; each enters the debugger in a\nslightly different way:\npdb.\nrun\n(\nstatement\n,\nglobals\n=\nNone\n,\nlocals\n=\nNone\n)\n¶\nExecute the\nstatement\n(given as a string or a code object) under debugger\ncontrol.  The debugger prompt appears before any code is executed; you can\nset breakpoints and type\ncontinue\n, or you can step through the\nstatement using\nstep\nor\nnext\n(all these commands are\nexplained below).  The optional\nglobals\nand\nlocals\narguments specify the\nenvironment in which the code is executed; by default the dictionary of the\nmodule\n__main__\nis used.  (See the explanation of the built-in\nexec()\nor\neval()\nfunctions.)\npdb.\nruneval\n(\nexpression\n,\nglobals\n=\nNone\n,\nlocals\n=\nNone\n)\n¶\nEvaluate the\nexpression\n(given as a string or a code object) under debugger\ncontrol.  When\nruneval()\nreturns, it returns the value of the\nexpression\n.  Otherwise this function is similar to\nrun()\n.\npdb.\nruncall\n(\nfunction\n,\n*\nargs\n,\n**\nkwds\n)\n¶\nCall the\nfunction\n(a function or method object, not a string) with the\ngiven arguments.  When\nruncall()\nreturns, it returns whatever the\nfunction call returned.  The debugger prompt appears as soon as the function\nis entered.\npdb.\nset_trace\n(\n*\n,\nheader\n=\nNone\n)\n¶\nEnter the debugger at the calling stack frame.  This is useful to hard-code\na breakpoint at a given point in a program, even if the code is not\notherwise being debugged (e.g. when an assertion fails).  If given,\nheader\nis printed to the console just before debugging begins.\nChanged in version 3.7:\nThe keyword-only argument\nheader\n.\nChanged in version 3.13:\nset_trace()\nwill enter the debugger immediately, rather than\non the next line of code to be executed.\npdb.\npost_mortem\n(\nt\n=\nNone\n)\n¶\nEnter post-mortem debugging of the given exception or\ntraceback object\n. If no value is given, it uses\nthe exception that is currently being handled, or raises\nValueError\nif\nthere isn’t one.\nChanged in version 3.13:\nSupport for exception objects was added.\npdb.\npm\n(\n)\n¶\nEnter post-mortem debugging of the exception found in\nsys.last_exc\n.\nThe\nrun*\nfunctions and\nset_trace()\nare aliases for instantiating the\nPdb\nclass and calling the method of the same name.  If you want to\naccess further features, you have to do this yourself:\nclass\npdb.\nPdb\n(\ncompletekey\n=\n'tab'\n,\nstdin\n=\nNone\n,\nstdout\n=\nNone\n,\nskip\n=\nNone\n,\nnosigint\n=\nFalse\n,\nreadrc\n=\nTrue\n)\n¶\nPdb\nis the debugger class.\nThe\ncompletekey\n,\nstdin\nand\nstdout\narguments are passed to the\nunderlying\ncmd.Cmd\nclass; see the description there.\nThe\nskip\nargument, if given, must be an iterable of glob-style module name\npatterns.  The debugger will not step into frames that originate in a module\nthat matches one of these patterns.\n[\n1\n]\nBy default, Pdb sets a handler for the SIGINT signal (which is sent when the\nuser presses\nCtrl\n-\nC\non the console) when you give a\ncontinue\ncommand.\nThis allows you to break into the debugger again by pressing\nCtrl\n-\nC\n.  If you\nwant Pdb not to touch the SIGINT handler, set\nnosigint\nto true.\nThe\nreadrc\nargument defaults to true and controls whether Pdb will load\n.pdbrc files from the filesystem.\nExample call to enable tracing with\nskip\n:\nimport\npdb\n;\npdb\n.\nPdb\n(\nskip\n=\n[\n'django.*'\n])\n.\nset_trace\n()\nRaises an\nauditing event\npdb.Pdb\nwith no arguments.\nChanged in version 3.1:\nAdded the\nskip\nparameter.\nChanged in version 3.2:\nAdded the\nnosigint\nparameter.\nPreviously, a SIGINT handler was never set by Pdb.\nChanged in version 3.6:\nThe\nreadrc\nargument.\nrun\n(\nstatement\n,\nglobals\n=\nNone\n,\nlocals\n=\nNone\n)\n¶\nruneval\n(\nexpression\n,\nglobals\n=\nNone\n,\nlocals\n=\nNone\n)\n¶\nruncall\n(\nfunction\n,\n*\nargs\n,\n**\nkwds\n)\n¶\nset_trace\n(\n)\n¶\nSee the documentation for the functions explained above.\nDebugger Commands\n¶\nThe commands recognized by the debugger are listed below.  Most commands can be\nabbreviated to one or two letters as indicated; e.g.\nh(elp)\nmeans that\neither\nh\nor\nhelp\ncan be used to enter the help command (but not\nhe\nor\nhel\n, nor\nH\nor\nHelp\nor\nHELP\n).  Arguments to commands must be\nseparated by whitespace (spaces or tabs).  Optional arguments are enclosed in\nsquare brackets (\n[]\n) in the command syntax; the square brackets must not be\ntyped.  Alternatives in the command syntax are separated by a vertical bar\n(\n|\n).\nEntering a blank line repeats the last command entered.  Exception: if the last\ncommand was a\nlist\ncommand, the next 11 lines are listed.\nCommands that the debugger doesn’t recognize are assumed to be Python statements\nand are executed in the context of the program being debugged.  Python\nstatements can also be prefixed with an exclamation point (\n!\n).  This is a\npowerful way to inspect the program being debugged; it is even possible to\nchange a variable or call a function.  When an exception occurs in such a\nstatement, the exception name is printed but the debugger’s state is not\nchanged.\nChanged in version 3.13:\nExpressions/Statements whose prefix is a pdb command are now correctly\nidentified and executed.\nThe debugger supports\naliases\n.  Aliases can have\nparameters which allows one a certain level of adaptability to the context under\nexamination.\nMultiple commands may be entered on a single line, separated by\n;;\n.  (A\nsingle\n;\nis not used as it is the separator for multiple commands in a line\nthat is passed to the Python parser.)  No intelligence is applied to separating\nthe commands; the input is split at the first\n;;\npair, even if it is in the\nmiddle of a quoted string. A workaround for strings with double semicolons\nis to use implicit string concatenation\n';'';'\nor\n\";\"\";\"\n.\nTo set a temporary global variable, use a\nconvenience variable\n. A\nconvenience\nvariable\nis a variable whose name starts with\n$\n.  For example,\n$foo\n=\n1\nsets a global variable\n$foo\nwhich you can use in the debugger session.  The\nconvenience variables\nare cleared when the program resumes execution so it’s\nless likely to interfere with your program compared to using normal variables\nlike\nfoo\n=\n1\n.\nThere are three preset\nconvenience variables\n:\n$_frame\n: the current frame you are debugging\n$_retval\n: the return value if the frame is returning\n$_exception\n: the exception if the frame is raising an exception\nAdded in version 3.12:\nAdded the\nconvenience variable\nfeature.\nIf a file\n.pdbrc\nexists in the user’s home directory or in the current\ndirectory, it is read with\n'utf-8'\nencoding and executed as if it had been\ntyped at the debugger prompt, with the exception that empty lines and lines\nstarting with\n#\nare ignored.  This is particularly useful for aliases.  If both\nfiles exist, the one in the home directory is read first and aliases defined there\ncan be overridden by the local file.\nChanged in version 3.2:\n.pdbrc\ncan now contain commands that continue debugging, such as\ncontinue\nor\nnext\n.  Previously, these commands had no\neffect.\nChanged in version 3.11:\n.pdbrc\nis now read with\n'utf-8'\nencoding. Previously, it was read\nwith the system locale encoding.\nh(elp)\n[command]\n¶\nWithout argument, print the list of available commands.  With a\ncommand\nas\nargument, print help about that command.\nhelp\npdb\ndisplays the full\ndocumentation (the docstring of the\npdb\nmodule).  Since the\ncommand\nargument must be an identifier,\nhelp\nexec\nmust be entered to get help on\nthe\n!\ncommand.\nw(here)\n¶\nPrint a stack trace, with the most recent frame at the bottom.  An arrow (\n>\n)\nindicates the current frame, which determines the context of most commands.\nd(own)\n[count]\n¶\nMove the current frame\ncount\n(default one) levels down in the stack trace\n(to a newer frame).\nu(p)\n[count]\n¶\nMove the current frame\ncount\n(default one) levels up in the stack trace (to\nan older frame).\nb(reak)\n[([filename:]lineno\n|\nfunction)\n[,\ncondition]]\n¶\nWith a\nlineno\nargument, set a break at line\nlineno\nin the current file.\nThe line number may be prefixed with a\nfilename\nand a colon,\nto specify a breakpoint in another file (possibly one that hasn’t been loaded\nyet).  The file is searched on\nsys.path\n.  Accepatable forms of\nfilename\nare\n/abspath/to/file.py\n,\nrelpath/file.py\n,\nmodule\nand\npackage.module\n.\nWith a\nfunction\nargument, set a break at the first executable statement within\nthat function.\nfunction\ncan be any expression that evaluates to a function\nin the current namespace.\nIf a second argument is present, it is an expression which must evaluate to\ntrue before the breakpoint is honored.\nWithout argument, list all breaks, including for each breakpoint, the number\nof times that breakpoint has been hit, the current ignore count, and the\nassociated condition if any.\nEach breakpoint is assigned a number to which all the other\nbreakpoint commands refer.\ntbreak\n[([filename:]lineno\n|\nfunction)\n[,\ncondition]]\n¶\nTemporary breakpoint, which is removed automatically when it is first hit.\nThe arguments are the same as for\nbreak\n.\ncl(ear)\n[filename:lineno\n|\nbpnumber\n...]\n¶\nWith a\nfilename:lineno\nargument, clear all the breakpoints at this line.\nWith a space separated list of breakpoint numbers, clear those breakpoints.\nWithout argument, clear all breaks (but first ask confirmation).\ndisable\nbpnumber\n[bpnumber\n...]\n¶\nDisable the breakpoints given as a space separated list of breakpoint\nnumbers.  Disabling a breakpoint means it cannot cause the program to stop\nexecution, but unlike clearing a breakpoint, it remains in the list of\nbreakpoints and can be (re-)enabled.\nenable\nbpnumber\n[bpnumber\n...]\n¶\nEnable the breakpoints specified.\nignore\nbpnumber\n[count]\n¶\nSet the ignore count for the given breakpoint number.  If\ncount\nis omitted,\nthe ignore count is set to 0.  A breakpoint becomes active when the ignore\ncount is zero.  When non-zero, the\ncount\nis decremented each time the\nbreakpoint is reached and the breakpoint is not disabled and any associated\ncondition evaluates to true.\ncondition\nbpnumber\n[condition]\n¶\nSet a new\ncondition\nfor the breakpoint, an expression which must evaluate\nto true before the breakpoint is honored.  If\ncondition\nis absent, any\nexisting condition is removed; i.e., the breakpoint is made unconditional.\ncommands\n[bpnumber]\n¶\nSpecify a list of commands for breakpoint number\nbpnumber\n.  The commands\nthemselves appear on the following lines.  Type a line containing just\nend\nto terminate the commands. An example:\n(\nPdb\n)\ncommands\n1\n(\ncom\n)\np\nsome_variable\n(\ncom\n)\nend\n(\nPdb\n)\nTo remove all commands from a breakpoint, type\ncommands\nand follow it\nimmediately with\nend\n; that is, give no commands.\nWith no\nbpnumber\nargument,\ncommands\nrefers to the last breakpoint set.\nYou can use breakpoint commands to start your program up again.  Simply use\nthe\ncontinue\ncommand, or\nstep\n,\nor any other command that resumes execution.\nSpecifying any command resuming execution\n(currently\ncontinue\n,\nstep\n,\nnext\n,\nreturn\n,\njump\n,\nquit\nand their abbreviations)\nterminates the command list (as if\nthat command was immediately followed by end). This is because any time you\nresume execution (even with a simple next or step), you may encounter another\nbreakpoint—which could have its own command list, leading to ambiguities about\nwhich list to execute.\nIf you use the\nsilent\ncommand in the command list, the usual message about\nstopping at a breakpoint is not printed.  This may be desirable for breakpoints\nthat are to print a specific message and then continue.  If none of the other\ncommands print anything, you see no sign that the breakpoint was reached.\ns(tep)\n¶\nExecute the current line, stop at the first possible occasion (either in a\nfunction that is called or on the next line in the current function).\nn(ext)\n¶\nContinue execution until the next line in the current function is reached or\nit returns.  (The difference between\nnext\nand\nstep\nis\nthat\nstep\nstops inside a called function, while\nnext\nexecutes called functions at (nearly) full speed, only stopping at the next\nline in the current function.)\nunt(il)\n[lineno]\n¶\nWithout argument, continue execution until the line with a number greater\nthan the current one is reached.\nWith\nlineno\n, continue execution until a line with a number greater or\nequal to\nlineno\nis reached.  In both cases, also stop when the current frame\nreturns.\nChanged in version 3.2:\nAllow giving an explicit line number.\nr(eturn)\n¶\nContinue execution until the current function returns.\nc(ont(inue))\n¶\nContinue execution, only stop when a breakpoint is encountered.\nj(ump)\nlineno\n¶\nSet the next line that will be executed.  Only available in the bottom-most\nframe.  This lets you jump back and execute code again, or jump forward to\nskip code that you don’t want to run.\nIt should be noted that not all jumps are allowed – for instance it is not\npossible to jump into the middle of a\nfor\nloop or out of a\nfinally\nclause.\nl(ist)\n[first[,\nlast]]\n¶\nList source code for the current file.  Without arguments, list 11 lines\naround the current line or continue the previous listing.  With\n.\nas\nargument, list 11 lines around the current line.  With one argument,\nlist 11 lines around at that line.  With two arguments, list the given range;\nif the second argument is less than the first, it is interpreted as a count.\nThe current line in the current frame is indicated by\n->\n.  If an\nexception is being debugged, the line where the exception was originally\nraised or propagated is indicated by\n>>\n, if it differs from the current\nline.\nChanged in version 3.2:\nAdded the\n>>\nmarker.\nll\n|\nlonglist\n¶\nList all source code for the current function or frame.  Interesting lines\nare marked as for\nlist\n.\nAdded in version 3.2.\na(rgs)\n¶\nPrint the arguments of the current function and their current values.\np\nexpression\n¶\nEvaluate\nexpression\nin the current context and print its value.\nNote\nprint()\ncan also be used, but is not a debugger command — this executes the\nPython\nprint()\nfunction.\npp\nexpression\n¶\nLike the\np\ncommand, except the value of\nexpression\nis\npretty-printed using the\npprint\nmodule.\nwhatis\nexpression\n¶\nPrint the type of\nexpression\n.\nsource\nexpression\n¶\nTry to get source code of\nexpression\nand display it.\nAdded in version 3.2.\ndisplay\n[expression]\n¶\nDisplay the value of\nexpression\nif it changed, each time execution stops\nin the current frame.\nWithout\nexpression\n, list all display expressions for the current frame.\nNote\nDisplay evaluates\nexpression\nand compares to the result of the previous\nevaluation of\nexpression\n, so when the result is mutable, display may not\nbe able to pick up the changes.\nExample:\nlst\n=\n[]\nbreakpoint\n()\npass\nlst\n.\nappend\n(\n1\n)\nprint\n(\nlst\n)\nDisplay won’t realize\nlst\nhas been changed because the result of evaluation\nis modified in place by\nlst.append(1)\nbefore being compared:\n>\nexample\n.\npy\n(\n3\n)\n<\nmodule\n>\n()\n->\npass\n(\nPdb\n)\ndisplay\nlst\ndisplay\nlst\n:\n[]\n(\nPdb\n)\nn\n>\nexample\n.\npy\n(\n4\n)\n<\nmodule\n>\n()\n->\nlst\n.\nappend\n(\n1\n)\n(\nPdb\n)\nn\n>\nexample\n.\npy\n(\n5\n)\n<\nmodule\n>\n()\n->\nprint\n(\nlst\n)\n(\nPdb\n)\nYou can do some tricks with copy mechanism to make it work:\n>\nexample\n.\npy\n(\n3\n)\n<\nmodule\n>\n()\n->\npass\n(\nPdb\n)\ndisplay\nlst\n[:]\ndisplay\nlst\n[:]:\n[]\n(\nPdb\n)\nn\n>\nexample\n.\npy\n(\n4\n)\n<\nmodule\n>\n()\n->\nlst\n.\nappend\n(\n1\n)\n(\nPdb\n)\nn\n>\nexample\n.\npy\n(\n5\n)\n<\nmodule\n>\n()\n->\nprint\n(\nlst\n)\ndisplay\nlst\n[:]:\n[\n1\n]\n[\nold\n:\n[]]\n(\nPdb\n)\nAdded in version 3.2.\nundisplay\n[expression]\n¶\nDo not display\nexpression\nanymore in the current frame.  Without\nexpression\n, clear all display expressions for the current frame.\nAdded in version 3.2.\ninteract\n¶\nStart an interactive interpreter (using the\ncode\nmodule) in a new\nglobal namespace initialised from the local and global namespaces for the\ncurrent scope. Use\nexit()\nor\nquit()\nto exit the interpreter and\nreturn to the debugger.\nNote\nAs\ninteract\ncreates a new dedicated namespace for code execution,\nassignments to variables will not affect the original namespaces.\nHowever, modifications to any referenced mutable objects will be reflected\nin the original namespaces as usual.\nAdded in version 3.2.\nChanged in version 3.13:\nexit()\nand\nquit()\ncan be used to exit the\ninteract\ncommand.\nChanged in version 3.13:\ninteract\ndirects its output to the debugger’s\noutput channel rather than\nsys.stderr\n.\nalias\n[name\n[command]]\n¶\nCreate an alias called\nname\nthat executes\ncommand\n.  The\ncommand\nmust\nnot\nbe enclosed in quotes.  Replaceable parameters can be indicated by\n%1\n,\n%2\n, … and\n%9\n, while\n%*\nis replaced by all the parameters.\nIf\ncommand\nis omitted, the current alias for\nname\nis shown. If no\narguments are given, all aliases are listed.\nAliases may be nested and can contain anything that can be legally typed at\nthe pdb prompt.  Note that internal pdb commands\ncan\nbe overridden by\naliases.  Such a command is then hidden until the alias is removed.  Aliasing\nis recursively applied to the first word of the command line; all other words\nin the line are left alone.\nAs an example, here are two useful aliases (especially when placed in the\n.pdbrc\nfile):\n# Print instance variables (usage \"pi classInst\")\nalias\npi\nfor\nk\nin\n%\n1.\n__dict__\n.\nkeys\n():\nprint\n(\nf\n\"%1.\n{\nk\n}\n=\n{\n%\n1.\n__dict__\n[\nk\n]\n}\n\"\n)\n# Print instance variables in self\nalias\nps\npi\nself\nunalias\nname\n¶\nDelete the specified alias\nname\n.\n!\nstatement\n¶\nExecute the (one-line)\nstatement\nin the context of the current stack frame.\nThe exclamation point can be omitted unless the first word of the statement\nresembles a debugger command, e.g.:\n(Pdb) ! n=42\n(Pdb)\nTo set a global variable, you can prefix the assignment command with a\nglobal\nstatement on the same line, e.g.:\n(Pdb) global list_options; list_options = ['-l']\n(Pdb)\nrun\n[args\n...]\n¶\nrestart\n[args\n...]\n¶\nRestart the debugged Python program.  If\nargs\nis supplied, it is split\nwith\nshlex\nand the result is used as the new\nsys.argv\n.\nHistory, breakpoints, actions and debugger options are preserved.\nrestart\nis an alias for\nrun\n.\nq(uit)\n¶\nQuit from the debugger.  The program being executed is aborted.\ndebug\ncode\n¶\nEnter a recursive debugger that steps through\ncode\n(which is an arbitrary expression or statement to be\nexecuted in the current environment).\nretval\n¶\nPrint the return value for the last return of the current function.\nexceptions\n[excnumber]\n¶\nList or jump between chained exceptions.\nWhen using\npdb.pm()\nor\nPdb.post_mortem(...)\nwith a chained exception\ninstead of a traceback, it allows the user to move between the\nchained exceptions using\nexceptions\ncommand to list exceptions, and\nexceptions\n<number>\nto switch to that exception.\nExample:\ndef\nout\n():\ntry\n:\nmiddle\n()\nexcept\nException\nas\ne\n:\nraise\nValueError\n(\n\"reraise middle() error\"\n)\nfrom\ne\ndef\nmiddle\n():\ntry\n:\nreturn\ninner\n(\n0\n)\nexcept\nException\nas\ne\n:\nraise\nValueError\n(\n\"Middle fail\"\n)\ndef\ninner\n(\nx\n):\n1\n/\nx\nout\n()\ncalling\npdb.pm()\nwill allow to move between exceptions:\n>\nexample\n.\npy\n(\n5\n)\nout\n()\n->\nraise\nValueError\n(\n\"reraise middle() error\"\n)\nfrom\ne\n(\nPdb\n)\nexceptions\n0\nZeroDivisionError\n(\n'division by zero'\n)\n1\nValueError\n(\n'Middle fail'\n)\n>\n2\nValueError\n(\n'reraise middle() error'\n)\n(\nPdb\n)\nexceptions\n0\n>\nexample\n.\npy\n(\n16\n)\ninner\n()\n->\n1\n/\nx\n(\nPdb\n)\nup\n>\nexample\n.\npy\n(\n10\n)\nmiddle\n()\n->\nreturn\ninner\n(\n0\n)\nAdded in version 3.13.\nFootnotes\n[\n1\n]\nWhether a frame is considered to originate in a certain module\nis determined by the\n__name__\nin the frame globals.\nTable of Contents\npdb\n— The Python Debugger\nDebugger Commands\nPrevious topic\nfaulthandler\n— Dump the Python traceback\nNext topic\nThe Python Profilers\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nDebugging and Profiling\n»\npdb\n— The Python Debugger\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/pdb.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12343.5912026
  },
  {
    "title": "4. More Control Flow Tools¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n4.\nMore Control Flow Tools\n|\nTheme\nAuto\nLight\nDark\n|\n4.\nMore Control Flow Tools\n¶\nAs well as the\nwhile\nstatement just introduced, Python uses a few more\nthat we will encounter in this chapter.\n4.1.\nif\nStatements\n¶\nPerhaps the most well-known statement type is the\nif\nstatement.  For\nexample:\n>>>\nx\n=\nint\n(\ninput\n(\n\"Please enter an integer: \"\n))\nPlease enter an integer: 42\n>>>\nif\nx\n<\n0\n:\n...\nx\n=\n0\n...\nprint\n(\n'Negative changed to zero'\n)\n...\nelif\nx\n==\n0\n:\n...\nprint\n(\n'Zero'\n)\n...\nelif\nx\n==\n1\n:\n...\nprint\n(\n'Single'\n)\n...\nelse\n:\n...\nprint\n(\n'More'\n)\n...\nMore\nThere can be zero or more\nelif\nparts, and the\nelse\npart is\noptional.  The keyword ‘\nelif\n’ is short for ‘else if’, and is useful\nto avoid excessive indentation.  An\nif\n…\nelif\n…\nelif\n… sequence is a substitute for the\nswitch\nor\ncase\nstatements found in other languages.\nIf you’re comparing the same value to several constants, or checking for specific types or\nattributes, you may also find the\nmatch\nstatement useful. For more\ndetails see\nmatch Statements\n.\n4.2.\nfor\nStatements\n¶\nThe\nfor\nstatement in Python differs a bit from what you may be used\nto in C or Pascal.  Rather than always iterating over an arithmetic progression\nof numbers (like in Pascal), or giving the user the ability to define both the\niteration step and halting condition (as C), Python’s\nfor\nstatement\niterates over the items of any sequence (a list or a string), in the order that\nthey appear in the sequence.  For example (no pun intended):\n>>>\n# Measure some strings:\n>>>\nwords\n=\n[\n'cat'\n,\n'window'\n,\n'defenestrate'\n]\n>>>\nfor\nw\nin\nwords\n:\n...\nprint\n(\nw\n,\nlen\n(\nw\n))\n...\ncat 3\nwindow 6\ndefenestrate 12\nCode that modifies a collection while iterating over that same collection can\nbe tricky to get right.  Instead, it is usually more straight-forward to loop\nover a copy of the collection or to create a new collection:\n# Create a sample collection\nusers\n=\n{\n'Hans'\n:\n'active'\n,\n'Éléonore'\n:\n'inactive'\n,\n'景太郎'\n:\n'active'\n}\n# Strategy:  Iterate over a copy\nfor\nuser\n,\nstatus\nin\nusers\n.\ncopy\n()\n.\nitems\n():\nif\nstatus\n==\n'inactive'\n:\ndel\nusers\n[\nuser\n]\n# Strategy:  Create a new collection\nactive_users\n=\n{}\nfor\nuser\n,\nstatus\nin\nusers\n.\nitems\n():\nif\nstatus\n==\n'active'\n:\nactive_users\n[\nuser\n]\n=\nstatus\n4.3.\nThe\nrange()\nFunction\n¶\nIf you do need to iterate over a sequence of numbers, the built-in function\nrange()\ncomes in handy.  It generates arithmetic progressions:\n>>>\nfor\ni\nin\nrange\n(\n5\n):\n...\nprint\n(\ni\n)\n...\n0\n1\n2\n3\n4\nThe given end point is never part of the generated sequence;\nrange(10)\ngenerates\n10 values, the legal indices for items of a sequence of length 10.  It\nis possible to let the range start at another number, or to specify a different\nincrement (even negative; sometimes this is called the ‘step’):\n>>>\nlist\n(\nrange\n(\n5\n,\n10\n))\n[5, 6, 7, 8, 9]\n>>>\nlist\n(\nrange\n(\n0\n,\n10\n,\n3\n))\n[0, 3, 6, 9]\n>>>\nlist\n(\nrange\n(\n-\n10\n,\n-\n100\n,\n-\n30\n))\n[-10, -40, -70]\nTo iterate over the indices of a sequence, you can combine\nrange()\nand\nlen()\nas follows:\n>>>\na\n=\n[\n'Mary'\n,\n'had'\n,\n'a'\n,\n'little'\n,\n'lamb'\n]\n>>>\nfor\ni\nin\nrange\n(\nlen\n(\na\n)):\n...\nprint\n(\ni\n,\na\n[\ni\n])\n...\n0 Mary\n1 had\n2 a\n3 little\n4 lamb\nIn most such cases, however, it is convenient to use the\nenumerate()\nfunction, see\nLooping Techniques\n.\nA strange thing happens if you just print a range:\n>>>\nrange\n(\n10\n)\nrange(0, 10)\nIn many ways the object returned by\nrange()\nbehaves as if it is a list,\nbut in fact it isn’t. It is an object which returns the successive items of\nthe desired sequence when you iterate over it, but it doesn’t really make\nthe list, thus saving space.\nWe say such an object is\niterable\n, that is, suitable as a target for\nfunctions and constructs that expect something from which they can\nobtain successive items until the supply is exhausted.  We have seen that\nthe\nfor\nstatement is such a construct, while an example of a function\nthat takes an iterable is\nsum()\n:\n>>>\nsum\n(\nrange\n(\n4\n))\n# 0 + 1 + 2 + 3\n6\nLater we will see more functions that return iterables and take iterables as\narguments.  In chapter\nData Structures\n, we will discuss in more detail about\nlist()\n.\n4.4.\nbreak\nand\ncontinue\nStatements\n¶\nThe\nbreak\nstatement breaks out of the innermost enclosing\nfor\nor\nwhile\nloop:\n>>>\nfor\nn\nin\nrange\n(\n2\n,\n10\n):\n...\nfor\nx\nin\nrange\n(\n2\n,\nn\n):\n...\nif\nn\n%\nx\n==\n0\n:\n...\nprint\n(\nf\n\"\n{\nn\n}\nequals\n{\nx\n}\n*\n{\nn\n//\nx\n}\n\"\n)\n...\nbreak\n...\n4 equals 2 * 2\n6 equals 2 * 3\n8 equals 2 * 4\n9 equals 3 * 3\nThe\ncontinue\nstatement continues with the next\niteration of the loop:\n>>>\nfor\nnum\nin\nrange\n(\n2\n,\n10\n):\n...\nif\nnum\n%\n2\n==\n0\n:\n...\nprint\n(\nf\n\"Found an even number\n{\nnum\n}\n\"\n)\n...\ncontinue\n...\nprint\n(\nf\n\"Found an odd number\n{\nnum\n}\n\"\n)\n...\nFound an even number 2\nFound an odd number 3\nFound an even number 4\nFound an odd number 5\nFound an even number 6\nFound an odd number 7\nFound an even number 8\nFound an odd number 9\n4.5.\nelse\nClauses on Loops\n¶\nIn a\nfor\nor\nwhile\nloop the\nbreak\nstatement\nmay be paired with an\nelse\nclause.  If the loop finishes without\nexecuting the\nbreak\n, the\nelse\nclause executes.\nIn a\nfor\nloop, the\nelse\nclause is executed\nafter the loop finishes its final iteration, that is, if no break occurred.\nIn a\nwhile\nloop, it’s executed after the loop’s condition becomes false.\nIn either kind of loop, the\nelse\nclause is\nnot\nexecuted if the\nloop was terminated by a\nbreak\n.  Of course, other ways of ending the\nloop early, such as a\nreturn\nor a raised exception, will also skip\nexecution of the\nelse\nclause.\nThis is exemplified in the following\nfor\nloop,\nwhich searches for prime numbers:\n>>>\nfor\nn\nin\nrange\n(\n2\n,\n10\n):\n...\nfor\nx\nin\nrange\n(\n2\n,\nn\n):\n...\nif\nn\n%\nx\n==\n0\n:\n...\nprint\n(\nn\n,\n'equals'\n,\nx\n,\n'*'\n,\nn\n//\nx\n)\n...\nbreak\n...\nelse\n:\n...\n# loop fell through without finding a factor\n...\nprint\n(\nn\n,\n'is a prime number'\n)\n...\n2 is a prime number\n3 is a prime number\n4 equals 2 * 2\n5 is a prime number\n6 equals 2 * 3\n7 is a prime number\n8 equals 2 * 4\n9 equals 3 * 3\n(Yes, this is the correct code.  Look closely: the\nelse\nclause belongs to\nthe\nfor\nloop,\nnot\nthe\nif\nstatement.)\nOne way to think of the else clause is to imagine it paired with the\nif\ninside the loop.  As the loop executes, it will run a sequence like\nif/if/if/else. The\nif\nis inside the loop, encountered a number of times. If\nthe condition is ever true, a\nbreak\nwill happen. If the condition is never\ntrue, the\nelse\nclause outside the loop will execute.\nWhen used with a loop, the\nelse\nclause has more in common with the\nelse\nclause of a\ntry\nstatement than it does with that of\nif\nstatements: a\ntry\nstatement’s\nelse\nclause runs when no exception\noccurs, and a loop’s\nelse\nclause runs when no\nbreak\noccurs. For more on\nthe\ntry\nstatement and exceptions, see\nHandling Exceptions\n.\n4.6.\npass\nStatements\n¶\nThe\npass\nstatement does nothing. It can be used when a statement is\nrequired syntactically but the program requires no action. For example:\n>>>\nwhile\nTrue\n:\n...\npass\n# Busy-wait for keyboard interrupt (Ctrl+C)\n...\nThis is commonly used for creating minimal classes:\n>>>\nclass\nMyEmptyClass\n:\n...\npass\n...\nAnother place\npass\ncan be used is as a place-holder for a function or\nconditional body when you are working on new code, allowing you to keep thinking\nat a more abstract level.  The\npass\nis silently ignored:\n>>>\ndef\ninitlog\n(\n*\nargs\n):\n...\npass\n# Remember to implement this!\n...\n4.7.\nmatch\nStatements\n¶\nA\nmatch\nstatement takes an expression and compares its value to successive\npatterns given as one or more case blocks.  This is superficially\nsimilar to a switch statement in C, Java or JavaScript (and many\nother languages), but it’s more similar to pattern matching in\nlanguages like Rust or Haskell. Only the first pattern that matches\ngets executed and it can also extract components (sequence elements\nor object attributes) from the value into variables.\nThe simplest form compares a subject value against one or more literals:\ndef\nhttp_error\n(\nstatus\n):\nmatch\nstatus\n:\ncase\n400\n:\nreturn\n\"Bad request\"\ncase\n404\n:\nreturn\n\"Not found\"\ncase\n418\n:\nreturn\n\"I'm a teapot\"\ncase\n_\n:\nreturn\n\"Something's wrong with the internet\"\nNote the last block: the “variable name”\n_\nacts as a\nwildcard\nand\nnever fails to match. If no case matches, none of the branches is executed.\nYou can combine several literals in a single pattern using\n|\n(“or”):\ncase\n401\n|\n403\n|\n404\n:\nreturn\n\"Not allowed\"\nPatterns can look like unpacking assignments, and can be used to bind\nvariables:\n# point is an (x, y) tuple\nmatch\npoint\n:\ncase\n(\n0\n,\n0\n):\nprint\n(\n\"Origin\"\n)\ncase\n(\n0\n,\ny\n):\nprint\n(\nf\n\"Y=\n{\ny\n}\n\"\n)\ncase\n(\nx\n,\n0\n):\nprint\n(\nf\n\"X=\n{\nx\n}\n\"\n)\ncase\n(\nx\n,\ny\n):\nprint\n(\nf\n\"X=\n{\nx\n}\n, Y=\n{\ny\n}\n\"\n)\ncase\n_\n:\nraise\nValueError\n(\n\"Not a point\"\n)\nStudy that one carefully!  The first pattern has two literals, and can\nbe thought of as an extension of the literal pattern shown above.  But\nthe next two patterns combine a literal and a variable, and the\nvariable\nbinds\na value from the subject (\npoint\n).  The fourth\npattern captures two values, which makes it conceptually similar to\nthe unpacking assignment\n(x,\ny)\n=\npoint\n.\nIf you are using classes to structure your data\nyou can use the class name followed by an argument list resembling a\nconstructor, but with the ability to capture attributes into variables:\nclass\nPoint\n:\ndef\n__init__\n(\nself\n,\nx\n,\ny\n):\nself\n.\nx\n=\nx\nself\n.\ny\n=\ny\ndef\nwhere_is\n(\npoint\n):\nmatch\npoint\n:\ncase\nPoint\n(\nx\n=\n0\n,\ny\n=\n0\n):\nprint\n(\n\"Origin\"\n)\ncase\nPoint\n(\nx\n=\n0\n,\ny\n=\ny\n):\nprint\n(\nf\n\"Y=\n{\ny\n}\n\"\n)\ncase\nPoint\n(\nx\n=\nx\n,\ny\n=\n0\n):\nprint\n(\nf\n\"X=\n{\nx\n}\n\"\n)\ncase\nPoint\n():\nprint\n(\n\"Somewhere else\"\n)\ncase\n_\n:\nprint\n(\n\"Not a point\"\n)\nYou can use positional parameters with some builtin classes that provide an\nordering for their attributes (e.g. dataclasses). You can also define a specific\nposition for attributes in patterns by setting the\n__match_args__\nspecial\nattribute in your classes. If it’s set to (“x”, “y”), the following patterns are all\nequivalent (and all bind the\ny\nattribute to the\nvar\nvariable):\nPoint\n(\n1\n,\nvar\n)\nPoint\n(\n1\n,\ny\n=\nvar\n)\nPoint\n(\nx\n=\n1\n,\ny\n=\nvar\n)\nPoint\n(\ny\n=\nvar\n,\nx\n=\n1\n)\nA recommended way to read patterns is to look at them as an extended form of what you\nwould put on the left of an assignment, to understand which variables would be set to\nwhat.\nOnly the standalone names (like\nvar\nabove) are assigned to by a match statement.\nDotted names (like\nfoo.bar\n), attribute names (the\nx=\nand\ny=\nabove) or class names\n(recognized by the “(…)” next to them like\nPoint\nabove) are never assigned to.\nPatterns can be arbitrarily nested.  For example, if we have a short\nlist of Points, with\n__match_args__\nadded, we could match it like this:\nclass\nPoint\n:\n__match_args__\n=\n(\n'x'\n,\n'y'\n)\ndef\n__init__\n(\nself\n,\nx\n,\ny\n):\nself\n.\nx\n=\nx\nself\n.\ny\n=\ny\nmatch\npoints\n:\ncase\n[]:\nprint\n(\n\"No points\"\n)\ncase\n[\nPoint\n(\n0\n,\n0\n)]:\nprint\n(\n\"The origin\"\n)\ncase\n[\nPoint\n(\nx\n,\ny\n)]:\nprint\n(\nf\n\"Single point\n{\nx\n}\n,\n{\ny\n}\n\"\n)\ncase\n[\nPoint\n(\n0\n,\ny1\n),\nPoint\n(\n0\n,\ny2\n)]:\nprint\n(\nf\n\"Two on the Y axis at\n{\ny1\n}\n,\n{\ny2\n}\n\"\n)\ncase\n_\n:\nprint\n(\n\"Something else\"\n)\nWe can add an\nif\nclause to a pattern, known as a “guard”.  If the\nguard is false,\nmatch\ngoes on to try the next case block.  Note\nthat value capture happens before the guard is evaluated:\nmatch\npoint\n:\ncase\nPoint\n(\nx\n,\ny\n)\nif\nx\n==\ny\n:\nprint\n(\nf\n\"Y=X at\n{\nx\n}\n\"\n)\ncase\nPoint\n(\nx\n,\ny\n):\nprint\n(\nf\n\"Not on the diagonal\"\n)\nSeveral other key features of this statement:\nLike unpacking assignments, tuple and list patterns have exactly the\nsame meaning and actually match arbitrary sequences.  An important\nexception is that they don’t match iterators or strings.\nSequence patterns support extended unpacking:\n[x,\ny,\n*rest]\nand\n(x,\ny,\n*rest)\nwork similar to unpacking assignments.  The\nname after\n*\nmay also be\n_\n, so\n(x,\ny,\n*_)\nmatches a sequence\nof at least two items without binding the remaining items.\nMapping patterns:\n{\"bandwidth\":\nb,\n\"latency\":\nl}\ncaptures the\n\"bandwidth\"\nand\n\"latency\"\nvalues from a dictionary.  Unlike sequence\npatterns, extra keys are ignored.  An unpacking like\n**rest\nis also\nsupported.  (But\n**_\nwould be redundant, so it is not allowed.)\nSubpatterns may be captured using the\nas\nkeyword:\ncase\n(\nPoint\n(\nx1\n,\ny1\n),\nPoint\n(\nx2\n,\ny2\n)\nas\np2\n):\n...\nwill capture the second element of the input as\np2\n(as long as the input is\na sequence of two points)\nMost literals are compared by equality, however the singletons\nTrue\n,\nFalse\nand\nNone\nare compared by identity.\nPatterns may use named constants.  These must be dotted names\nto prevent them from being interpreted as capture variable:\nfrom\nenum\nimport\nEnum\nclass\nColor\n(\nEnum\n):\nRED\n=\n'red'\nGREEN\n=\n'green'\nBLUE\n=\n'blue'\ncolor\n=\nColor\n(\ninput\n(\n\"Enter your choice of 'red', 'blue' or 'green': \"\n))\nmatch\ncolor\n:\ncase\nColor\n.\nRED\n:\nprint\n(\n\"I see red!\"\n)\ncase\nColor\n.\nGREEN\n:\nprint\n(\n\"Grass is green\"\n)\ncase\nColor\n.\nBLUE\n:\nprint\n(\n\"I'm feeling the blues :(\"\n)\nFor a more detailed explanation and additional examples, you can look into\nPEP 636\nwhich is written in a tutorial format.\n4.8.\nDefining Functions\n¶\nWe can create a function that writes the Fibonacci series to an arbitrary\nboundary:\n>>>\ndef\nfib\n(\nn\n):\n# write Fibonacci series less than n\n...\n\"\"\"Print a Fibonacci series less than n.\"\"\"\n...\na\n,\nb\n=\n0\n,\n1\n...\nwhile\na\n<\nn\n:\n...\nprint\n(\na\n,\nend\n=\n' '\n)\n...\na\n,\nb\n=\nb\n,\na\n+\nb\n...\nprint\n()\n...\n>>>\n# Now call the function we just defined:\n>>>\nfib\n(\n2000\n)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597\nThe keyword\ndef\nintroduces a function\ndefinition\n.  It must be\nfollowed by the function name and the parenthesized list of formal parameters.\nThe statements that form the body of the function start at the next line, and\nmust be indented.\nThe first statement of the function body can optionally be a string literal;\nthis string literal is the function’s documentation string, or\ndocstring\n.\n(More about docstrings can be found in the section\nDocumentation Strings\n.)\nThere are tools which use docstrings to automatically produce online or printed\ndocumentation, or to let the user interactively browse through code; it’s good\npractice to include docstrings in code that you write, so make a habit of it.\nThe\nexecution\nof a function introduces a new symbol table used for the local\nvariables of the function.  More precisely, all variable assignments in a\nfunction store the value in the local symbol table; whereas variable references\nfirst look in the local symbol table, then in the local symbol tables of\nenclosing functions, then in the global symbol table, and finally in the table\nof built-in names. Thus, global variables and variables of enclosing functions\ncannot be directly assigned a value within a function (unless, for global\nvariables, named in a\nglobal\nstatement, or, for variables of enclosing\nfunctions, named in a\nnonlocal\nstatement), although they may be\nreferenced.\nThe actual parameters (arguments) to a function call are introduced in the local\nsymbol table of the called function when it is called; thus, arguments are\npassed using\ncall by value\n(where the\nvalue\nis always an object\nreference\n,\nnot the value of the object).\n[\n1\n]\nWhen a function calls another function,\nor calls itself recursively, a new\nlocal symbol table is created for that call.\nA function definition associates the function name with the function object in\nthe current symbol table.  The interpreter recognizes the object pointed to by\nthat name as a user-defined function.  Other names can also point to that same\nfunction object and can also be used to access the function:\n>>>\nfib\n<function fib at 10042ed0>\n>>>\nf\n=\nfib\n>>>\nf\n(\n100\n)\n0 1 1 2 3 5 8 13 21 34 55 89\nComing from other languages, you might object that\nfib\nis not a function but\na procedure since it doesn’t return a value.  In fact, even functions without a\nreturn\nstatement do return a value, albeit a rather boring one.  This\nvalue is called\nNone\n(it’s a built-in name).  Writing the value\nNone\nis\nnormally suppressed by the interpreter if it would be the only value written.\nYou can see it if you really want to using\nprint()\n:\n>>>\nfib\n(\n0\n)\n>>>\nprint\n(\nfib\n(\n0\n))\nNone\nIt is simple to write a function that returns a list of the numbers of the\nFibonacci series, instead of printing it:\n>>>\ndef\nfib2\n(\nn\n):\n# return Fibonacci series up to n\n...\n\"\"\"Return a list containing the Fibonacci series up to n.\"\"\"\n...\nresult\n=\n[]\n...\na\n,\nb\n=\n0\n,\n1\n...\nwhile\na\n<\nn\n:\n...\nresult\n.\nappend\n(\na\n)\n# see below\n...\na\n,\nb\n=\nb\n,\na\n+\nb\n...\nreturn\nresult\n...\n>>>\nf100\n=\nfib2\n(\n100\n)\n# call it\n>>>\nf100\n# write the result\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\nThis example, as usual, demonstrates some new Python features:\nThe\nreturn\nstatement returns with a value from a function.\nreturn\nwithout an expression argument returns\nNone\n. Falling off\nthe end of a function also returns\nNone\n.\nThe statement\nresult.append(a)\ncalls a\nmethod\nof the list object\nresult\n.  A method is a function that ‘belongs’ to an object and is named\nobj.methodname\n, where\nobj\nis some object (this may be an expression),\nand\nmethodname\nis the name of a method that is defined by the object’s type.\nDifferent types define different methods.  Methods of different types may have\nthe same name without causing ambiguity.  (It is possible to define your own\nobject types and methods, using\nclasses\n, see\nClasses\n)\nThe method\nappend()\nshown in the example is defined for list objects; it\nadds a new element at the end of the list.  In this example it is equivalent to\nresult\n=\nresult\n+\n[a]\n, but more efficient.\n4.9.\nMore on Defining Functions\n¶\nIt is also possible to define functions with a variable number of arguments.\nThere are three forms, which can be combined.\n4.9.1.\nDefault Argument Values\n¶\nThe most useful form is to specify a default value for one or more arguments.\nThis creates a function that can be called with fewer arguments than it is\ndefined to allow.  For example:\ndef\nask_ok\n(\nprompt\n,\nretries\n=\n4\n,\nreminder\n=\n'Please try again!'\n):\nwhile\nTrue\n:\nreply\n=\ninput\n(\nprompt\n)\nif\nreply\nin\n{\n'y'\n,\n'ye'\n,\n'yes'\n}:\nreturn\nTrue\nif\nreply\nin\n{\n'n'\n,\n'no'\n,\n'nop'\n,\n'nope'\n}:\nreturn\nFalse\nretries\n=\nretries\n-\n1\nif\nretries\n<\n0\n:\nraise\nValueError\n(\n'invalid user response'\n)\nprint\n(\nreminder\n)\nThis function can be called in several ways:\ngiving only the mandatory argument:\nask_ok('Do\nyou\nreally\nwant\nto\nquit?')\ngiving one of the optional arguments:\nask_ok('OK\nto\noverwrite\nthe\nfile?',\n2)\nor even giving all arguments:\nask_ok('OK\nto\noverwrite\nthe\nfile?',\n2,\n'Come\non,\nonly\nyes\nor\nno!')\nThis example also introduces the\nin\nkeyword. This tests whether or\nnot a sequence contains a certain value.\nThe default values are evaluated at the point of function definition in the\ndefining\nscope, so that\ni\n=\n5\ndef\nf\n(\narg\n=\ni\n):\nprint\n(\narg\n)\ni\n=\n6\nf\n()\nwill print\n5\n.\nImportant warning:\nThe default value is evaluated only once. This makes a\ndifference when the default is a mutable object such as a list, dictionary, or\ninstances of most classes.  For example, the following function accumulates the\narguments passed to it on subsequent calls:\ndef\nf\n(\na\n,\nL\n=\n[]):\nL\n.\nappend\n(\na\n)\nreturn\nL\nprint\n(\nf\n(\n1\n))\nprint\n(\nf\n(\n2\n))\nprint\n(\nf\n(\n3\n))\nThis will print\n[\n1\n]\n[\n1\n,\n2\n]\n[\n1\n,\n2\n,\n3\n]\nIf you don’t want the default to be shared between subsequent calls, you can\nwrite the function like this instead:\ndef\nf\n(\na\n,\nL\n=\nNone\n):\nif\nL\nis\nNone\n:\nL\n=\n[]\nL\n.\nappend\n(\na\n)\nreturn\nL\n4.9.2.\nKeyword Arguments\n¶\nFunctions can also be called using\nkeyword arguments\nof the form\nkwarg=value\n.  For instance, the following function:\ndef\nparrot\n(\nvoltage\n,\nstate\n=\n'a stiff'\n,\naction\n=\n'voom'\n,\ntype\n=\n'Norwegian Blue'\n):\nprint\n(\n\"-- This parrot wouldn't\"\n,\naction\n,\nend\n=\n' '\n)\nprint\n(\n\"if you put\"\n,\nvoltage\n,\n\"volts through it.\"\n)\nprint\n(\n\"-- Lovely plumage, the\"\n,\ntype\n)\nprint\n(\n\"-- It's\"\n,\nstate\n,\n\"!\"\n)\naccepts one required argument (\nvoltage\n) and three optional arguments\n(\nstate\n,\naction\n, and\ntype\n).  This function can be called in any\nof the following ways:\nparrot\n(\n1000\n)\n# 1 positional argument\nparrot\n(\nvoltage\n=\n1000\n)\n# 1 keyword argument\nparrot\n(\nvoltage\n=\n1000000\n,\naction\n=\n'VOOOOOM'\n)\n# 2 keyword arguments\nparrot\n(\naction\n=\n'VOOOOOM'\n,\nvoltage\n=\n1000000\n)\n# 2 keyword arguments\nparrot\n(\n'a million'\n,\n'bereft of life'\n,\n'jump'\n)\n# 3 positional arguments\nparrot\n(\n'a thousand'\n,\nstate\n=\n'pushing up the daisies'\n)\n# 1 positional, 1 keyword\nbut all the following calls would be invalid:\nparrot\n()\n# required argument missing\nparrot\n(\nvoltage\n=\n5.0\n,\n'dead'\n)\n# non-keyword argument after a keyword argument\nparrot\n(\n110\n,\nvoltage\n=\n220\n)\n# duplicate value for the same argument\nparrot\n(\nactor\n=\n'John Cleese'\n)\n# unknown keyword argument\nIn a function call, keyword arguments must follow positional arguments.\nAll the keyword arguments passed must match one of the arguments\naccepted by the function (e.g.\nactor\nis not a valid argument for the\nparrot\nfunction), and their order is not important.  This also includes\nnon-optional arguments (e.g.\nparrot(voltage=1000)\nis valid too).\nNo argument may receive a value more than once.\nHere’s an example that fails due to this restriction:\n>>>\ndef\nfunction\n(\na\n):\n...\npass\n...\n>>>\nfunction\n(\n0\n,\na\n=\n0\n)\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nTypeError\n:\nfunction() got multiple values for argument 'a'\nWhen a final formal parameter of the form\n**name\nis present, it receives a\ndictionary (see\nMapping Types — dict\n) containing all keyword arguments except for\nthose corresponding to a formal parameter.  This may be combined with a formal\nparameter of the form\n*name\n(described in the next subsection) which\nreceives a\ntuple\ncontaining the positional\narguments beyond the formal parameter list.  (\n*name\nmust occur\nbefore\n**name\n.) For example, if we define a function like this:\ndef\ncheeseshop\n(\nkind\n,\n*\narguments\n,\n**\nkeywords\n):\nprint\n(\n\"-- Do you have any\"\n,\nkind\n,\n\"?\"\n)\nprint\n(\n\"-- I'm sorry, we're all out of\"\n,\nkind\n)\nfor\narg\nin\narguments\n:\nprint\n(\narg\n)\nprint\n(\n\"-\"\n*\n40\n)\nfor\nkw\nin\nkeywords\n:\nprint\n(\nkw\n,\n\":\"\n,\nkeywords\n[\nkw\n])\nIt could be called like this:\ncheeseshop\n(\n\"Limburger\"\n,\n\"It's very runny, sir.\"\n,\n\"It's really very, VERY runny, sir.\"\n,\nshopkeeper\n=\n\"Michael Palin\"\n,\nclient\n=\n\"John Cleese\"\n,\nsketch\n=\n\"Cheese Shop Sketch\"\n)\nand of course it would print:\n-- Do you have any Limburger ?\n-- I'm sorry, we're all out of Limburger\nIt's very runny, sir.\nIt's really very, VERY runny, sir.\n----------------------------------------\nshopkeeper : Michael Palin\nclient : John Cleese\nsketch : Cheese Shop Sketch\nNote that the order in which the keyword arguments are printed is guaranteed\nto match the order in which they were provided in the function call.\n4.9.3.\nSpecial parameters\n¶\nBy default, arguments may be passed to a Python function either by position\nor explicitly by keyword. For readability and performance, it makes sense to\nrestrict the way arguments can be passed so that a developer need only look\nat the function definition to determine if items are passed by position, by\nposition or keyword, or by keyword.\nA function definition may look like:\ndef f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n-----------    ----------     ----------\n|             |                  |\n|        Positional or keyword   |\n|                                - Keyword only\n-- Positional only\nwhere\n/\nand\n*\nare optional. If used, these symbols indicate the kind of\nparameter by how the arguments may be passed to the function:\npositional-only, positional-or-keyword, and keyword-only. Keyword parameters\nare also referred to as named parameters.\n4.9.3.1.\nPositional-or-Keyword Arguments\n¶\nIf\n/\nand\n*\nare not present in the function definition, arguments may\nbe passed to a function by position or by keyword.\n4.9.3.2.\nPositional-Only Parameters\n¶\nLooking at this in a bit more detail, it is possible to mark certain parameters\nas\npositional-only\n. If\npositional-only\n, the parameters’ order matters, and\nthe parameters cannot be passed by keyword. Positional-only parameters are\nplaced before a\n/\n(forward-slash). The\n/\nis used to logically\nseparate the positional-only parameters from the rest of the parameters.\nIf there is no\n/\nin the function definition, there are no positional-only\nparameters.\nParameters following the\n/\nmay be\npositional-or-keyword\nor\nkeyword-only\n.\n4.9.3.3.\nKeyword-Only Arguments\n¶\nTo mark parameters as\nkeyword-only\n, indicating the parameters must be passed\nby keyword argument, place an\n*\nin the arguments list just before the first\nkeyword-only\nparameter.\n4.9.3.4.\nFunction Examples\n¶\nConsider the following example function definitions paying close attention to the\nmarkers\n/\nand\n*\n:\n>>>\ndef\nstandard_arg\n(\narg\n):\n...\nprint\n(\narg\n)\n...\n>>>\ndef\npos_only_arg\n(\narg\n,\n/\n):\n...\nprint\n(\narg\n)\n...\n>>>\ndef\nkwd_only_arg\n(\n*\n,\narg\n):\n...\nprint\n(\narg\n)\n...\n>>>\ndef\ncombined_example\n(\npos_only\n,\n/\n,\nstandard\n,\n*\n,\nkwd_only\n):\n...\nprint\n(\npos_only\n,\nstandard\n,\nkwd_only\n)\nThe first function definition,\nstandard_arg\n, the most familiar form,\nplaces no restrictions on the calling convention and arguments may be\npassed by position or keyword:\n>>>\nstandard_arg\n(\n2\n)\n2\n>>>\nstandard_arg\n(\narg\n=\n2\n)\n2\nThe second function\npos_only_arg\nis restricted to only use positional\nparameters as there is a\n/\nin the function definition:\n>>>\npos_only_arg\n(\n1\n)\n1\n>>>\npos_only_arg\n(\narg\n=\n1\n)\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nTypeError\n:\npos_only_arg() got some positional-only arguments passed as keyword arguments: 'arg'\nThe third function\nkwd_only_arg\nonly allows keyword arguments as indicated\nby a\n*\nin the function definition:\n>>>\nkwd_only_arg\n(\n3\n)\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nTypeError\n:\nkwd_only_arg() takes 0 positional arguments but 1 was given\n>>>\nkwd_only_arg\n(\narg\n=\n3\n)\n3\nAnd the last uses all three calling conventions in the same function\ndefinition:\n>>>\ncombined_example\n(\n1\n,\n2\n,\n3\n)\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nTypeError\n:\ncombined_example() takes 2 positional arguments but 3 were given\n>>>\ncombined_example\n(\n1\n,\n2\n,\nkwd_only\n=\n3\n)\n1 2 3\n>>>\ncombined_example\n(\n1\n,\nstandard\n=\n2\n,\nkwd_only\n=\n3\n)\n1 2 3\n>>>\ncombined_example\n(\npos_only\n=\n1\n,\nstandard\n=\n2\n,\nkwd_only\n=\n3\n)\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nTypeError\n:\ncombined_example() got some positional-only arguments passed as keyword arguments: 'pos_only'\nFinally, consider this function definition which has a potential collision between the positional argument\nname\nand\n**kwds\nwhich has\nname\nas a key:\ndef\nfoo\n(\nname\n,\n**\nkwds\n):\nreturn\n'name'\nin\nkwds\nThere is no possible call that will make it return\nTrue\nas the keyword\n'name'\nwill always bind to the first parameter. For example:\n>>>\nfoo\n(\n1\n,\n**\n{\n'name'\n:\n2\n})\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nTypeError\n:\nfoo() got multiple values for argument 'name'\n>>>\nBut using\n/\n(positional only arguments), it is possible since it allows\nname\nas a positional argument and\n'name'\nas a key in the keyword arguments:\n>>>\ndef\nfoo\n(\nname\n,\n/\n,\n**\nkwds\n):\n...\nreturn\n'name'\nin\nkwds\n...\n>>>\nfoo\n(\n1\n,\n**\n{\n'name'\n:\n2\n})\nTrue\nIn other words, the names of positional-only parameters can be used in\n**kwds\nwithout ambiguity.\n4.9.3.5.\nRecap\n¶\nThe use case will determine which parameters to use in the function definition:\ndef\nf\n(\npos1\n,\npos2\n,\n/\n,\npos_or_kwd\n,\n*\n,\nkwd1\n,\nkwd2\n):\nAs guidance:\nUse positional-only if you want the name of the parameters to not be\navailable to the user. This is useful when parameter names have no real\nmeaning, if you want to enforce the order of the arguments when the function\nis called or if you need to take some positional parameters and arbitrary\nkeywords.\nUse keyword-only when names have meaning and the function definition is\nmore understandable by being explicit with names or you want to prevent\nusers relying on the position of the argument being passed.\nFor an API, use positional-only to prevent breaking API changes\nif the parameter’s name is modified in the future.\n4.9.4.\nArbitrary Argument Lists\n¶\nFinally, the least frequently used option is to specify that a function can be\ncalled with an arbitrary number of arguments.  These arguments will be wrapped\nup in a tuple (see\nTuples and Sequences\n).  Before the variable number of arguments,\nzero or more normal arguments may occur.\ndef\nwrite_multiple_items\n(\nfile\n,\nseparator\n,\n*\nargs\n):\nfile\n.\nwrite\n(\nseparator\n.\njoin\n(\nargs\n))\nNormally, these\nvariadic\narguments will be last in the list of formal\nparameters, because they scoop up all remaining input arguments that are\npassed to the function. Any formal parameters which occur after the\n*args\nparameter are ‘keyword-only’ arguments, meaning that they can only be used as\nkeywords rather than positional arguments.\n>>>\ndef\nconcat\n(\n*\nargs\n,\nsep\n=\n\"/\"\n):\n...\nreturn\nsep\n.\njoin\n(\nargs\n)\n...\n>>>\nconcat\n(\n\"earth\"\n,\n\"mars\"\n,\n\"venus\"\n)\n'earth/mars/venus'\n>>>\nconcat\n(\n\"earth\"\n,\n\"mars\"\n,\n\"venus\"\n,\nsep\n=\n\".\"\n)\n'earth.mars.venus'\n4.9.5.\nUnpacking Argument Lists\n¶\nThe reverse situation occurs when the arguments are already in a list or tuple\nbut need to be unpacked for a function call requiring separate positional\narguments.  For instance, the built-in\nrange()\nfunction expects separate\nstart\nand\nstop\narguments.  If they are not available separately, write the\nfunction call with the\n*\n-operator to unpack the arguments out of a list\nor tuple:\n>>>\nlist\n(\nrange\n(\n3\n,\n6\n))\n# normal call with separate arguments\n[3, 4, 5]\n>>>\nargs\n=\n[\n3\n,\n6\n]\n>>>\nlist\n(\nrange\n(\n*\nargs\n))\n# call with arguments unpacked from a list\n[3, 4, 5]\nIn the same fashion, dictionaries can deliver keyword arguments with the\n**\n-operator:\n>>>\ndef\nparrot\n(\nvoltage\n,\nstate\n=\n'a stiff'\n,\naction\n=\n'voom'\n):\n...\nprint\n(\n\"-- This parrot wouldn't\"\n,\naction\n,\nend\n=\n' '\n)\n...\nprint\n(\n\"if you put\"\n,\nvoltage\n,\n\"volts through it.\"\n,\nend\n=\n' '\n)\n...\nprint\n(\n\"E's\"\n,\nstate\n,\n\"!\"\n)\n...\n>>>\nd\n=\n{\n\"voltage\"\n:\n\"four million\"\n,\n\"state\"\n:\n\"bleedin' demised\"\n,\n\"action\"\n:\n\"VOOM\"\n}\n>>>\nparrot\n(\n**\nd\n)\n-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !\n4.9.6.\nLambda Expressions\n¶\nSmall anonymous functions can be created with the\nlambda\nkeyword.\nThis function returns the sum of its two arguments:\nlambda\na,\nb:\na+b\n.\nLambda functions can be used wherever function objects are required.  They are\nsyntactically restricted to a single expression.  Semantically, they are just\nsyntactic sugar for a normal function definition.  Like nested function\ndefinitions, lambda functions can reference variables from the containing\nscope:\n>>>\ndef\nmake_incrementor\n(\nn\n):\n...\nreturn\nlambda\nx\n:\nx\n+\nn\n...\n>>>\nf\n=\nmake_incrementor\n(\n42\n)\n>>>\nf\n(\n0\n)\n42\n>>>\nf\n(\n1\n)\n43\nThe above example uses a lambda expression to return a function.  Another use\nis to pass a small function as an argument.  For instance,\nlist.sort()\ntakes a sorting key function\nkey\nwhich can be a lambda function:\n>>>\npairs\n=\n[(\n1\n,\n'one'\n),\n(\n2\n,\n'two'\n),\n(\n3\n,\n'three'\n),\n(\n4\n,\n'four'\n)]\n>>>\npairs\n.\nsort\n(\nkey\n=\nlambda\npair\n:\npair\n[\n1\n])\n>>>\npairs\n[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]\n4.9.7.\nDocumentation Strings\n¶\nHere are some conventions about the content and formatting of documentation\nstrings.\nThe first line should always be a short, concise summary of the object’s\npurpose.  For brevity, it should not explicitly state the object’s name or type,\nsince these are available by other means (except if the name happens to be a\nverb describing a function’s operation).  This line should begin with a capital\nletter and end with a period.\nIf there are more lines in the documentation string, the second line should be\nblank, visually separating the summary from the rest of the description.  The\nfollowing lines should be one or more paragraphs describing the object’s calling\nconventions, its side effects, etc.\nThe Python parser does not strip indentation from multi-line string literals in\nPython, so tools that process documentation have to strip indentation if\ndesired.  This is done using the following convention. The first non-blank line\nafter\nthe first line of the string determines the amount of indentation for\nthe entire documentation string.  (We can’t use the first line since it is\ngenerally adjacent to the string’s opening quotes so its indentation is not\napparent in the string literal.)  Whitespace “equivalent” to this indentation is\nthen stripped from the start of all lines of the string.  Lines that are\nindented less should not occur, but if they occur all their leading whitespace\nshould be stripped.  Equivalence of whitespace should be tested after expansion\nof tabs (to 8 spaces, normally).\nHere is an example of a multi-line docstring:\n>>>\ndef\nmy_function\n():\n...\n\"\"\"Do nothing, but document it.\n...\n...\nNo, really, it doesn't do anything.\n...\n\"\"\"\n...\npass\n...\n>>>\nprint\n(\nmy_function\n.\n__doc__\n)\nDo nothing, but document it.\nNo, really, it doesn't do anything.\n4.9.8.\nFunction Annotations\n¶\nFunction annotations\nare completely optional metadata\ninformation about the types used by user-defined functions (see\nPEP 3107\nand\nPEP 484\nfor more information).\nAnnotations\nare stored in the\n__annotations__\nattribute of the function as a dictionary and have no effect on any other part of the\nfunction.  Parameter annotations are defined by a colon after the parameter name, followed\nby an expression evaluating to the value of the annotation.  Return annotations are\ndefined by a literal\n->\n, followed by an expression, between the parameter\nlist and the colon denoting the end of the\ndef\nstatement.  The\nfollowing example has a required argument, an optional argument, and the return\nvalue annotated:\n>>>\ndef\nf\n(\nham\n:\nstr\n,\neggs\n:\nstr\n=\n'eggs'\n)\n->\nstr\n:\n...\nprint\n(\n\"Annotations:\"\n,\nf\n.\n__annotations__\n)\n...\nprint\n(\n\"Arguments:\"\n,\nham\n,\neggs\n)\n...\nreturn\nham\n+\n' and '\n+\neggs\n...\n>>>\nf\n(\n'spam'\n)\nAnnotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}\nArguments: spam eggs\n'spam and eggs'\n4.10.\nIntermezzo: Coding Style\n¶\nNow that you are about to write longer, more complex pieces of Python, it is a\ngood time to talk about\ncoding style\n.  Most languages can be written (or more\nconcise,\nformatted\n) in different styles; some are more readable than others.\nMaking it easy for others to read your code is always a good idea, and adopting\na nice coding style helps tremendously for that.\nFor Python,\nPEP 8\nhas emerged as the style guide that most projects adhere to;\nit promotes a very readable and eye-pleasing coding style.  Every Python\ndeveloper should read it at some point; here are the most important points\nextracted for you:\nUse 4-space indentation, and no tabs.\n4 spaces are a good compromise between small indentation (allows greater\nnesting depth) and large indentation (easier to read).  Tabs introduce\nconfusion, and are best left out.\nWrap lines so that they don’t exceed 79 characters.\nThis helps users with small displays and makes it possible to have several\ncode files side-by-side on larger displays.\nUse blank lines to separate functions and classes, and larger blocks of\ncode inside functions.\nWhen possible, put comments on a line of their own.\nUse docstrings.\nUse spaces around operators and after commas, but not directly inside\nbracketing constructs:\na\n=\nf(1,\n2)\n+\ng(3,\n4)\n.\nName your classes and functions consistently; the convention is to use\nUpperCamelCase\nfor classes and\nlowercase_with_underscores\nfor functions\nand methods.  Always use\nself\nas the name for the first method argument\n(see\nA First Look at Classes\nfor more on classes and methods).\nDon’t use fancy encodings if your code is meant to be used in international\nenvironments.  Python’s default, UTF-8, or even plain ASCII work best in any\ncase.\nLikewise, don’t use non-ASCII characters in identifiers if there is only the\nslightest chance people speaking a different language will read or maintain\nthe code.\nFootnotes\n[\n1\n]\nActually,\ncall by object reference\nwould be a better description,\nsince if a mutable object is passed, the caller will see any changes the\ncallee makes to it (items inserted into a list).\nTable of Contents\n4. More Control Flow Tools\n4.1.\nif\nStatements\n4.2.\nfor\nStatements\n4.3. The\nrange()\nFunction\n4.4.\nbreak\nand\ncontinue\nStatements\n4.5.\nelse\nClauses on Loops\n4.6.\npass\nStatements\n4.7.\nmatch\nStatements\n4.8. Defining Functions\n4.9. More on Defining Functions\n4.9.1. Default Argument Values\n4.9.2. Keyword Arguments\n4.9.3. Special parameters\n4.9.3.1. Positional-or-Keyword Arguments\n4.9.3.2. Positional-Only Parameters\n4.9.3.3. Keyword-Only Arguments\n4.9.3.4. Function Examples\n4.9.3.5. Recap\n4.9.4. Arbitrary Argument Lists\n4.9.5. Unpacking Argument Lists\n4.9.6. Lambda Expressions\n4.9.7. Documentation Strings\n4.9.8. Function Annotations\n4.10. Intermezzo: Coding Style\nPrevious topic\n3.\nAn Informal Introduction to Python\nNext topic\n5.\nData Structures\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n4.\nMore Control Flow Tools\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/tutorial/controlflow.html",
    "source": "python",
    "doc_type": "tutorial",
    "scraped_at": 12343.988308
  },
  {
    "title": "4. Execution model¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n»\n4.\nExecution model\n|\nTheme\nAuto\nLight\nDark\n|\n4.\nExecution model\n¶\n4.1.\nStructure of a program\n¶\nA Python program is constructed from code blocks.\nA\nblock\nis a piece of Python program text that is executed as a unit.\nThe following are blocks: a module, a function body, and a class definition.\nEach command typed interactively is a block.  A script file (a file given as\nstandard input to the interpreter or specified as a command line argument to the\ninterpreter) is a code block.  A script command (a command specified on the\ninterpreter command line with the\n-c\noption) is a code block.\nA module run as a top level script (as module\n__main__\n) from the command\nline using a\n-m\nargument is also a code block. The string\nargument passed to the built-in functions\neval()\nand\nexec()\nis a\ncode block.\nA code block is executed in an\nexecution frame\n.  A frame contains some\nadministrative information (used for debugging) and determines where and how\nexecution continues after the code block’s execution has completed.\n4.2.\nNaming and binding\n¶\n4.2.1.\nBinding of names\n¶\nNames\nrefer to objects.  Names are introduced by name binding operations.\nThe following constructs bind names:\nformal parameters to functions,\nclass definitions,\nfunction definitions,\nassignment expressions,\ntargets\nthat are identifiers if occurring in\nan assignment:\nfor\nloop header,\nafter\nas\nin a\nwith\nstatement,\nexcept\nclause,\nexcept*\nclause, or in the as-pattern in structural pattern matching,\nin a capture pattern in structural pattern matching\nimport\nstatements.\ntype\nstatements.\ntype parameter lists\n.\nThe\nimport\nstatement of the form\nfrom\n...\nimport\n*\nbinds all\nnames defined in the imported module, except those beginning with an underscore.\nThis form may only be used at the module level.\nA target occurring in a\ndel\nstatement is also considered bound for\nthis purpose (though the actual semantics are to unbind the name).\nEach assignment or import statement occurs within a block defined by a class or\nfunction definition or at the module level (the top-level code block).\nIf a name is bound in a block, it is a local variable of that block, unless\ndeclared as\nnonlocal\nor\nglobal\n.  If a name is bound at\nthe module level, it is a global variable.  (The variables of the module code\nblock are local and global.)  If a variable is used in a code block but not\ndefined there, it is a\nfree variable\n.\nEach occurrence of a name in the program text refers to the\nbinding\nof\nthat name established by the following name resolution rules.\n4.2.2.\nResolution of names\n¶\nA\nscope\ndefines the visibility of a name within a block.  If a local\nvariable is defined in a block, its scope includes that block.  If the\ndefinition occurs in a function block, the scope extends to any blocks contained\nwithin the defining one, unless a contained block introduces a different binding\nfor the name.\nWhen a name is used in a code block, it is resolved using the nearest enclosing\nscope.  The set of all such scopes visible to a code block is called the block’s\nenvironment\n.\nWhen a name is not found at all, a\nNameError\nexception is raised.\nIf the current scope is a function scope, and the name refers to a local\nvariable that has not yet been bound to a value at the point where the name is\nused, an\nUnboundLocalError\nexception is raised.\nUnboundLocalError\nis a subclass of\nNameError\n.\nIf a name binding operation occurs anywhere within a code block, all uses of the\nname within the block are treated as references to the current block.  This can\nlead to errors when a name is used within a block before it is bound.  This rule\nis subtle.  Python lacks declarations and allows name binding operations to\noccur anywhere within a code block.  The local variables of a code block can be\ndetermined by scanning the entire text of the block for name binding operations.\nSee\nthe FAQ entry on UnboundLocalError\nfor examples.\nIf the\nglobal\nstatement occurs within a block, all uses of the names\nspecified in the statement refer to the bindings of those names in the top-level\nnamespace.  Names are resolved in the top-level namespace by searching the\nglobal namespace, i.e. the namespace of the module containing the code block,\nand the builtins namespace, the namespace of the module\nbuiltins\n.  The\nglobal namespace is searched first.  If the names are not found there, the\nbuiltins namespace is searched next. If the names are also not found in the\nbuiltins namespace, new variables are created in the global namespace.\nThe global statement must precede all uses of the listed names.\nThe\nglobal\nstatement has the same scope as a name binding operation\nin the same block.  If the nearest enclosing scope for a free variable contains\na global statement, the free variable is treated as a global.\nThe\nnonlocal\nstatement causes corresponding names to refer\nto previously bound variables in the nearest enclosing function scope.\nSyntaxError\nis raised at compile time if the given name does not\nexist in any enclosing function scope.\nType parameters\ncannot be rebound with the\nnonlocal\nstatement.\nThe namespace for a module is automatically created the first time a module is\nimported.  The main module for a script is always called\n__main__\n.\nClass definition blocks and arguments to\nexec()\nand\neval()\nare\nspecial in the context of name resolution.\nA class definition is an executable statement that may use and define names.\nThese references follow the normal rules for name resolution with an exception\nthat unbound local variables are looked up in the global namespace.\nThe namespace of the class definition becomes the attribute dictionary of\nthe class. The scope of names defined in a class block is limited to the\nclass block; it does not extend to the code blocks of methods. This includes\ncomprehensions and generator expressions, but it does not include\nannotation scopes\n,\nwhich have access to their enclosing class scopes.\nThis means that the following will fail:\nclass\nA\n:\na\n=\n42\nb\n=\nlist\n(\na\n+\ni\nfor\ni\nin\nrange\n(\n10\n))\nHowever, the following will succeed:\nclass\nA\n:\ntype\nAlias\n=\nNested\nclass\nNested\n:\npass\nprint\n(\nA\n.\nAlias\n.\n__value__\n)\n# <type 'A.Nested'>\n4.2.3.\nAnnotation scopes\n¶\nType parameter lists\nand\ntype\nstatements\nintroduce\nannotation scopes\n, which behave mostly like function scopes,\nbut with some exceptions discussed below.\nAnnotations\ncurrently do not use annotation scopes, but they are expected to use\nannotation scopes in Python 3.13 when\nPEP 649\nis implemented.\nAnnotation scopes are used in the following contexts:\nType parameter lists for\ngeneric type aliases\n.\nType parameter lists for\ngeneric functions\n.\nA generic function’s annotations are\nexecuted within the annotation scope, but its defaults and decorators are not.\nType parameter lists for\ngeneric classes\n.\nA generic class’s base classes and\nkeyword arguments are executed within the annotation scope, but its decorators are not.\nThe bounds, constraints, and default values for type parameters\n(\nlazily evaluated\n).\nThe value of type aliases (\nlazily evaluated\n).\nAnnotation scopes differ from function scopes in the following ways:\nAnnotation scopes have access to their enclosing class namespace.\nIf an annotation scope is immediately within a class scope, or within another\nannotation scope that is immediately within a class scope, the code in the\nannotation scope can use names defined in the class scope as if it were\nexecuted directly within the class body. This contrasts with regular\nfunctions defined within classes, which cannot access names defined in the class scope.\nExpressions in annotation scopes cannot contain\nyield\n,\nyield\nfrom\n,\nawait\n, or\n:=\nexpressions. (These expressions are allowed in other scopes contained within the\nannotation scope.)\nNames defined in annotation scopes cannot be rebound with\nnonlocal\nstatements in inner scopes. This includes only type parameters, as no other\nsyntactic elements that can appear within annotation scopes can introduce new names.\nWhile annotation scopes have an internal name, that name is not reflected in the\nqualified name\nof objects defined within the scope.\nInstead, the\n__qualname__\nof such objects is as if the object were defined in the enclosing scope.\nAdded in version 3.12:\nAnnotation scopes were introduced in Python 3.12 as part of\nPEP 695\n.\nChanged in version 3.13:\nAnnotation scopes are also used for type parameter defaults, as\nintroduced by\nPEP 696\n.\n4.2.4.\nLazy evaluation\n¶\nThe values of type aliases created through the\ntype\nstatement are\nlazily evaluated\n. The same applies to the bounds, constraints, and default values of type\nvariables created through the\ntype parameter syntax\n.\nThis means that they are not evaluated when the type alias or type variable is\ncreated. Instead, they are only evaluated when doing so is necessary to resolve\nan attribute access.\nExample:\n>>>\ntype\nAlias\n=\n1\n/\n0\n>>>\nAlias\n.\n__value__\nTraceback (most recent call last):\n...\nZeroDivisionError\n:\ndivision by zero\n>>>\ndef\nfunc\n[\nT\n:\n1\n/\n0\n]():\npass\n>>>\nT\n=\nfunc\n.\n__type_params__\n[\n0\n]\n>>>\nT\n.\n__bound__\nTraceback (most recent call last):\n...\nZeroDivisionError\n:\ndivision by zero\nHere the exception is raised only when the\n__value__\nattribute\nof the type alias or the\n__bound__\nattribute of the type variable\nis accessed.\nThis behavior is primarily useful for references to types that have not\nyet been defined when the type alias or type variable is created. For example,\nlazy evaluation enables creation of mutually recursive type aliases:\nfrom\ntyping\nimport\nLiteral\ntype\nSimpleExpr\n=\nint\n|\nParenthesized\ntype\nParenthesized\n=\ntuple\n[\nLiteral\n[\n\"(\"\n],\nExpr\n,\nLiteral\n[\n\")\"\n]]\ntype\nExpr\n=\nSimpleExpr\n|\ntuple\n[\nSimpleExpr\n,\nLiteral\n[\n\"+\"\n,\n\"-\"\n],\nExpr\n]\nLazily evaluated values are evaluated in\nannotation scope\n,\nwhich means that names that appear inside the lazily evaluated value are looked up\nas if they were used in the immediately enclosing scope.\nAdded in version 3.12.\n4.2.5.\nBuiltins and restricted execution\n¶\nCPython implementation detail:\nUsers should not touch\n__builtins__\n; it is strictly an implementation\ndetail.  Users wanting to override values in the builtins namespace should\nimport\nthe\nbuiltins\nmodule and modify its\nattributes appropriately.\nThe builtins namespace associated with the execution of a code block\nis actually found by looking up the name\n__builtins__\nin its\nglobal namespace; this should be a dictionary or a module (in the\nlatter case the module’s dictionary is used).  By default, when in the\n__main__\nmodule,\n__builtins__\nis the built-in module\nbuiltins\n; when in any other module,\n__builtins__\nis an\nalias for the dictionary of the\nbuiltins\nmodule itself.\n4.2.6.\nInteraction with dynamic features\n¶\nName resolution of free variables occurs at runtime, not at compile time.\nThis means that the following code will print 42:\ni\n=\n10\ndef\nf\n():\nprint\n(\ni\n)\ni\n=\n42\nf\n()\nThe\neval()\nand\nexec()\nfunctions do not have access to the full\nenvironment for resolving names.  Names may be resolved in the local and global\nnamespaces of the caller.  Free variables are not resolved in the nearest\nenclosing namespace, but in the global namespace.\n[\n1\n]\nThe\nexec()\nand\neval()\nfunctions have optional arguments to override the global and local\nnamespace.  If only one namespace is specified, it is used for both.\n4.3.\nExceptions\n¶\nExceptions are a means of breaking out of the normal flow of control of a code\nblock in order to handle errors or other exceptional conditions.  An exception\nis\nraised\nat the point where the error is detected; it may be\nhandled\nby the\nsurrounding code block or by any code block that directly or indirectly invoked\nthe code block where the error occurred.\nThe Python interpreter raises an exception when it detects a run-time error\n(such as division by zero).  A Python program can also explicitly raise an\nexception with the\nraise\nstatement. Exception handlers are specified\nwith the\ntry\n…\nexcept\nstatement.  The\nfinally\nclause of such a statement can be used to specify cleanup code which does not\nhandle the exception, but is executed whether an exception occurred or not in\nthe preceding code.\nPython uses the “termination” model of error handling: an exception handler can\nfind out what happened and continue execution at an outer level, but it cannot\nrepair the cause of the error and retry the failing operation (except by\nre-entering the offending piece of code from the top).\nWhen an exception is not handled at all, the interpreter terminates execution of\nthe program, or returns to its interactive main loop.  In either case, it prints\na stack traceback, except when the exception is\nSystemExit\n.\nExceptions are identified by class instances.  The\nexcept\nclause is\nselected depending on the class of the instance: it must reference the class of\nthe instance or a\nnon-virtual base class\nthereof.\nThe instance can be received by the handler and can carry additional information\nabout the exceptional condition.\nNote\nException messages are not part of the Python API.  Their contents may change\nfrom one version of Python to the next without warning and should not be\nrelied on by code which will run under multiple versions of the interpreter.\nSee also the description of the\ntry\nstatement in section\nThe try statement\nand\nraise\nstatement in section\nThe raise statement\n.\nFootnotes\n[\n1\n]\nThis limitation occurs because the code that is executed by these operations\nis not available at the time the module is compiled.\nTable of Contents\n4. Execution model\n4.1. Structure of a program\n4.2. Naming and binding\n4.2.1. Binding of names\n4.2.2. Resolution of names\n4.2.3. Annotation scopes\n4.2.4. Lazy evaluation\n4.2.5. Builtins and restricted execution\n4.2.6. Interaction with dynamic features\n4.3. Exceptions\nPrevious topic\n3.\nData model\nNext topic\n5.\nThe import system\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n»\n4.\nExecution model\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/reference/executionmodel.html",
    "source": "python",
    "doc_type": "language_reference",
    "scraped_at": 12344.3228017
  },
  {
    "title": "Index",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex\nIndex pages by letter:\nSymbols\n|\n_\n|\nA\n|\nB\n|\nC\n|\nD\n|\nE\n|\nF\n|\nG\n|\nH\n|\nI\n|\nJ\n|\nK\n|\nL\n|\nM\n|\nN\n|\nO\n|\nP\n|\nQ\n|\nR\n|\nS\n|\nT\n|\nU\n|\nV\n|\nW\n|\nX\n|\nY\n|\nZ\nFull index on one page\n(can be huge)\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/genindex.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12344.3755906
  },
  {
    "title": "1. Whetting Your Appetite¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n1.\nWhetting Your Appetite\n|\nTheme\nAuto\nLight\nDark\n|\n1.\nWhetting Your Appetite\n¶\nIf you do much work on computers, eventually you find that there’s some task\nyou’d like to automate.  For example, you may wish to perform a\nsearch-and-replace over a large number of text files, or rename and rearrange a\nbunch of photo files in a complicated way. Perhaps you’d like to write a small\ncustom database, or a specialized GUI application, or a simple game.\nIf you’re a professional software developer, you may have to work with several\nC/C++/Java libraries but find the usual write/compile/test/re-compile cycle is\ntoo slow.  Perhaps you’re writing a test suite for such a library and find\nwriting the testing code a tedious task.  Or maybe you’ve written a program that\ncould use an extension language, and you don’t want to design and implement a\nwhole new language for your application.\nPython is just the language for you.\nYou could write a Unix shell script or Windows batch files for some of these\ntasks, but shell scripts are best at moving around files and changing text data,\nnot well-suited for GUI applications or games. You could write a C/C++/Java\nprogram, but it can take a lot of development time to get even a first-draft\nprogram.  Python is simpler to use, available on Windows, macOS, and Unix\noperating systems, and will help you get the job done more quickly.\nPython is simple to use, but it is a real programming language, offering much\nmore structure and support for large programs than shell scripts or batch files\ncan offer.  On the other hand, Python also offers much more error checking than\nC, and, being a\nvery-high-level language\n, it has high-level data types built\nin, such as flexible arrays and dictionaries.  Because of its more general data\ntypes Python is applicable to a much larger problem domain than Awk or even\nPerl, yet many things are at least as easy in Python as in those languages.\nPython allows you to split your program into modules that can be reused in other\nPython programs.  It comes with a large collection of standard modules that you\ncan use as the basis of your programs — or as examples to start learning to\nprogram in Python.  Some of these modules provide things like file I/O, system\ncalls, sockets, and even interfaces to graphical user interface toolkits like\nTk.\nPython is an interpreted language, which can save you considerable time during\nprogram development because no compilation and linking is necessary.  The\ninterpreter can be used interactively, which makes it easy to experiment with\nfeatures of the language, to write throw-away programs, or to test functions\nduring bottom-up program development. It is also a handy desk calculator.\nPython enables programs to be written compactly and readably.  Programs written\nin Python are typically much shorter than equivalent C,  C++, or Java programs,\nfor several reasons:\nthe high-level data types allow you to express complex operations in a single\nstatement;\nstatement grouping is done by indentation instead of beginning and ending\nbrackets;\nno variable or argument declarations are necessary.\nPython is\nextensible\n: if you know how to program in C it is easy to add a new\nbuilt-in function or module to the interpreter, either to perform critical\noperations at maximum speed, or to link Python programs to libraries that may\nonly be available in binary form (such as a vendor-specific graphics library).\nOnce you are really hooked, you can link the Python interpreter into an\napplication written in C and use it as an extension or command language for that\napplication.\nBy the way, the language is named after the BBC show “Monty Python’s Flying\nCircus” and has nothing to do with reptiles.  Making references to Monty\nPython skits in documentation is not only allowed, it is encouraged!\nNow that you are all excited about Python, you’ll want to examine it in some\nmore detail.  Since the best way to learn a language is to use it, the tutorial\ninvites you to play with the Python interpreter as you read.\nIn the next chapter, the mechanics of using the interpreter are explained.  This\nis rather mundane information, but essential for trying out the examples shown\nlater.\nThe rest of the tutorial introduces various features of the Python language and\nsystem through examples, beginning with simple expressions, statements and data\ntypes, through functions and modules, and finally touching upon advanced\nconcepts like exceptions and user-defined classes.\nPrevious topic\nThe Python Tutorial\nNext topic\n2.\nUsing the Python Interpreter\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n1.\nWhetting Your Appetite\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/tutorial/appetite.html",
    "source": "python",
    "doc_type": "tutorial",
    "scraped_at": 12344.4426378
  },
  {
    "title": "File and Directory Access¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nFile and Directory Access\n|\nTheme\nAuto\nLight\nDark\n|\nFile and Directory Access\n¶\nThe modules described in this chapter deal with disk files and directories.  For\nexample, there are modules for reading the properties of files, manipulating\npaths in a portable way, and creating temporary files.  The full list of modules\nin this chapter is:\npathlib\n— Object-oriented filesystem paths\nBasic use\nExceptions\nPure paths\nGeneral properties\nOperators\nAccessing individual parts\nMethods and properties\nConcrete paths\nParsing and generating URIs\nExpanding and resolving paths\nQuerying file type and status\nReading and writing files\nReading directories\nCreating files and directories\nRenaming and deleting\nPermissions and ownership\nPattern language\nComparison to the\nglob\nmodule\nComparison to the\nos\nand\nos.path\nmodules\nCorresponding tools\nos.path\n— Common pathname manipulations\nstat\n— Interpreting\nstat()\nresults\nfilecmp\n— File and Directory Comparisons\nThe\ndircmp\nclass\ntempfile\n— Generate temporary files and directories\nExamples\nDeprecated functions and variables\nglob\n— Unix style pathname pattern expansion\nExamples\nfnmatch\n— Unix filename pattern matching\nlinecache\n— Random access to text lines\nshutil\n— High-level file operations\nDirectory and files operations\nPlatform-dependent efficient copy operations\ncopytree example\nrmtree example\nArchiving operations\nArchiving example\nArchiving example with\nbase_dir\nQuerying the size of the output terminal\nSee also\nModule\nos\nOperating system interfaces, including functions to work with files at a\nlower level than Python\nfile objects\n.\nModule\nio\nPython’s built-in I/O library, including both abstract classes and\nsome concrete classes such as file I/O.\nBuilt-in function\nopen()\nThe standard way to open files for reading and writing with Python.\nPrevious topic\noperator\n— Standard operators as functions\nNext topic\npathlib\n— Object-oriented filesystem paths\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nFile and Directory Access\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/filesys.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12344.6866637
  },
  {
    "title": "5. The import system¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n»\n5.\nThe import system\n|\nTheme\nAuto\nLight\nDark\n|\n5.\nThe import system\n¶\nPython code in one\nmodule\ngains access to the code in another module\nby the process of\nimporting\nit.  The\nimport\nstatement is\nthe most common way of invoking the import machinery, but it is not the only\nway.  Functions such as\nimportlib.import_module()\nand built-in\n__import__()\ncan also be used to invoke the import machinery.\nThe\nimport\nstatement combines two operations; it searches for the\nnamed module, then it binds the results of that search to a name in the local\nscope.  The search operation of the\nimport\nstatement is defined as\na call to the\n__import__()\nfunction, with the appropriate arguments.\nThe return value of\n__import__()\nis used to perform the name\nbinding operation of the\nimport\nstatement.  See the\nimport\nstatement for the exact details of that name binding\noperation.\nA direct call to\n__import__()\nperforms only the module search and, if\nfound, the module creation operation.  While certain side-effects may occur,\nsuch as the importing of parent packages, and the updating of various caches\n(including\nsys.modules\n), only the\nimport\nstatement performs\na name binding operation.\nWhen an\nimport\nstatement is executed, the standard builtin\n__import__()\nfunction is called. Other mechanisms for invoking the\nimport system (such as\nimportlib.import_module()\n) may choose to bypass\n__import__()\nand use their own solutions to implement import semantics.\nWhen a module is first imported, Python searches for the module and if found,\nit creates a module object\n[\n1\n]\n, initializing it.  If the named module\ncannot be found, a\nModuleNotFoundError\nis raised.  Python implements various\nstrategies to search for the named module when the import machinery is\ninvoked.  These strategies can be modified and extended by using various hooks\ndescribed in the sections below.\nChanged in version 3.3:\nThe import system has been updated to fully implement the second phase\nof\nPEP 302\n. There is no longer any implicit import machinery - the full\nimport system is exposed through\nsys.meta_path\n. In addition,\nnative namespace package support has been implemented (see\nPEP 420\n).\n5.1.\nimportlib\n¶\nThe\nimportlib\nmodule provides a rich API for interacting with the\nimport system.  For example\nimportlib.import_module()\nprovides a\nrecommended, simpler API than built-in\n__import__()\nfor invoking the\nimport machinery.  Refer to the\nimportlib\nlibrary documentation for\nadditional detail.\n5.2.\nPackages\n¶\nPython has only one type of module object, and all modules are of this type,\nregardless of whether the module is implemented in Python, C, or something\nelse.  To help organize modules and provide a naming hierarchy, Python has a\nconcept of\npackages\n.\nYou can think of packages as the directories on a file system and modules as\nfiles within directories, but don’t take this analogy too literally since\npackages and modules need not originate from the file system.  For the\npurposes of this documentation, we’ll use this convenient analogy of\ndirectories and files.  Like file system directories, packages are organized\nhierarchically, and packages may themselves contain subpackages, as well as\nregular modules.\nIt’s important to keep in mind that all packages are modules, but not all\nmodules are packages.  Or put another way, packages are just a special kind of\nmodule.  Specifically, any module that contains a\n__path__\nattribute is\nconsidered a package.\nAll modules have a name.  Subpackage names are separated from their parent\npackage name by a dot, akin to Python’s standard attribute access syntax.  Thus\nyou might have a package called\nemail\n, which in turn has a subpackage\ncalled\nemail.mime\nand a module within that subpackage called\nemail.mime.text\n.\n5.2.1.\nRegular packages\n¶\nPython defines two types of packages,\nregular packages\nand\nnamespace packages\n.  Regular\npackages are traditional packages as they existed in Python 3.2 and earlier.\nA regular package is typically implemented as a directory containing an\n__init__.py\nfile.  When a regular package is imported, this\n__init__.py\nfile is implicitly executed, and the objects it defines are\nbound to names in the package’s namespace.  The\n__init__.py\nfile can\ncontain the same Python code that any other module can contain, and Python\nwill add some additional attributes to the module when it is imported.\nFor example, the following file system layout defines a top level\nparent\npackage with three subpackages:\nparent\n/\n__init__\n.\npy\none\n/\n__init__\n.\npy\ntwo\n/\n__init__\n.\npy\nthree\n/\n__init__\n.\npy\nImporting\nparent.one\nwill implicitly execute\nparent/__init__.py\nand\nparent/one/__init__.py\n.  Subsequent imports of\nparent.two\nor\nparent.three\nwill execute\nparent/two/__init__.py\nand\nparent/three/__init__.py\nrespectively.\n5.2.2.\nNamespace packages\n¶\nA namespace package is a composite of various\nportions\n,\nwhere each portion contributes a subpackage to the parent package.  Portions\nmay reside in different locations on the file system.  Portions may also be\nfound in zip files, on the network, or anywhere else that Python searches\nduring import.  Namespace packages may or may not correspond directly to\nobjects on the file system; they may be virtual modules that have no concrete\nrepresentation.\nNamespace packages do not use an ordinary list for their\n__path__\nattribute. They instead use a custom iterable type which will automatically\nperform a new search for package portions on the next import attempt within\nthat package if the path of their parent package (or\nsys.path\nfor a\ntop level package) changes.\nWith namespace packages, there is no\nparent/__init__.py\nfile.  In fact,\nthere may be multiple\nparent\ndirectories found during import search, where\neach one is provided by a different portion.  Thus\nparent/one\nmay not be\nphysically located next to\nparent/two\n.  In this case, Python will create a\nnamespace package for the top-level\nparent\npackage whenever it or one of\nits subpackages is imported.\nSee also\nPEP 420\nfor the namespace package specification.\n5.3.\nSearching\n¶\nTo begin the search, Python needs the\nfully qualified\nname of the module (or package, but for the purposes of this discussion, the\ndifference is immaterial) being imported.  This name may come from various\narguments to the\nimport\nstatement, or from the parameters to the\nimportlib.import_module()\nor\n__import__()\nfunctions.\nThis name will be used in various phases of the import search, and it may be\nthe dotted path to a submodule, e.g.\nfoo.bar.baz\n.  In this case, Python\nfirst tries to import\nfoo\n, then\nfoo.bar\n, and finally\nfoo.bar.baz\n.\nIf any of the intermediate imports fail, a\nModuleNotFoundError\nis raised.\n5.3.1.\nThe module cache\n¶\nThe first place checked during import search is\nsys.modules\n.  This\nmapping serves as a cache of all modules that have been previously imported,\nincluding the intermediate paths.  So if\nfoo.bar.baz\nwas previously\nimported,\nsys.modules\nwill contain entries for\nfoo\n,\nfoo.bar\n,\nand\nfoo.bar.baz\n.  Each key will have as its value the corresponding module\nobject.\nDuring import, the module name is looked up in\nsys.modules\nand if\npresent, the associated value is the module satisfying the import, and the\nprocess completes.  However, if the value is\nNone\n, then a\nModuleNotFoundError\nis raised.  If the module name is missing, Python will\ncontinue searching for the module.\nsys.modules\nis writable.  Deleting a key may not destroy the\nassociated module (as other modules may hold references to it),\nbut it will invalidate the cache entry for the named module, causing\nPython to search anew for the named module upon its next\nimport. The key can also be assigned to\nNone\n, forcing the next import\nof the module to result in a\nModuleNotFoundError\n.\nBeware though, as if you keep a reference to the module object,\ninvalidate its cache entry in\nsys.modules\n, and then re-import the\nnamed module, the two module objects will\nnot\nbe the same. By contrast,\nimportlib.reload()\nwill reuse the\nsame\nmodule object, and simply\nreinitialise the module contents by rerunning the module’s code.\n5.3.2.\nFinders and loaders\n¶\nIf the named module is not found in\nsys.modules\n, then Python’s import\nprotocol is invoked to find and load the module.  This protocol consists of\ntwo conceptual objects,\nfinders\nand\nloaders\n.\nA finder’s job is to determine whether it can find the named module using\nwhatever strategy it knows about. Objects that implement both of these\ninterfaces are referred to as\nimporters\n- they return\nthemselves when they find that they can load the requested module.\nPython includes a number of default finders and importers.  The first one\nknows how to locate built-in modules, and the second knows how to locate\nfrozen modules.  A third default finder searches an\nimport path\nfor modules.  The\nimport path\nis a list of locations that may\nname file system paths or zip files.  It can also be extended to search\nfor any locatable resource, such as those identified by URLs.\nThe import machinery is extensible, so new finders can be added to extend the\nrange and scope of module searching.\nFinders do not actually load modules.  If they can find the named module, they\nreturn a\nmodule spec\n, an encapsulation of the module’s import-related\ninformation, which the import machinery then uses when loading the module.\nThe following sections describe the protocol for finders and loaders in more\ndetail, including how you can create and register new ones to extend the\nimport machinery.\nChanged in version 3.4:\nIn previous versions of Python, finders returned\nloaders\ndirectly, whereas now they return module specs which\ncontain\nloaders.\nLoaders are still used during import but have fewer responsibilities.\n5.3.3.\nImport hooks\n¶\nThe import machinery is designed to be extensible; the primary mechanism for\nthis are the\nimport hooks\n.  There are two types of import hooks:\nmeta\nhooks\nand\nimport path hooks\n.\nMeta hooks are called at the start of import processing, before any other\nimport processing has occurred, other than\nsys.modules\ncache look up.\nThis allows meta hooks to override\nsys.path\nprocessing, frozen\nmodules, or even built-in modules.  Meta hooks are registered by adding new\nfinder objects to\nsys.meta_path\n, as described below.\nImport path hooks are called as part of\nsys.path\n(or\npackage.__path__\n) processing, at the point where their associated path\nitem is encountered.  Import path hooks are registered by adding new callables\nto\nsys.path_hooks\nas described below.\n5.3.4.\nThe meta path\n¶\nWhen the named module is not found in\nsys.modules\n, Python next\nsearches\nsys.meta_path\n, which contains a list of meta path finder\nobjects.  These finders are queried in order to see if they know how to handle\nthe named module.  Meta path finders must implement a method called\nfind_spec()\nwhich takes three arguments:\na name, an import path, and (optionally) a target module.  The meta path\nfinder can use any strategy it wants to determine whether it can handle\nthe named module or not.\nIf the meta path finder knows how to handle the named module, it returns a\nspec object.  If it cannot handle the named module, it returns\nNone\n.  If\nsys.meta_path\nprocessing reaches the end of its list without returning\na spec, then a\nModuleNotFoundError\nis raised.  Any other exceptions\nraised are simply propagated up, aborting the import process.\nThe\nfind_spec()\nmethod of meta path\nfinders is called with two or three arguments.  The first is the fully\nqualified name of the module being imported, for example\nfoo.bar.baz\n.\nThe second argument is the path entries to use for the module search.  For\ntop-level modules, the second argument is\nNone\n, but for submodules or\nsubpackages, the second argument is the value of the parent package’s\n__path__\nattribute. If the appropriate\n__path__\nattribute cannot\nbe accessed, a\nModuleNotFoundError\nis raised.  The third argument\nis an existing module object that will be the target of loading later.\nThe import system passes in a target module only during reload.\nThe meta path may be traversed multiple times for a single import request.\nFor example, assuming none of the modules involved has already been cached,\nimporting\nfoo.bar.baz\nwill first perform a top level import, calling\nmpf.find_spec(\"foo\",\nNone,\nNone)\non each meta path finder (\nmpf\n). After\nfoo\nhas been imported,\nfoo.bar\nwill be imported by traversing the\nmeta path a second time, calling\nmpf.find_spec(\"foo.bar\",\nfoo.__path__,\nNone)\n. Once\nfoo.bar\nhas been\nimported, the final traversal will call\nmpf.find_spec(\"foo.bar.baz\",\nfoo.bar.__path__,\nNone)\n.\nSome meta path finders only support top level imports. These importers will\nalways return\nNone\nwhen anything other than\nNone\nis passed as the\nsecond argument.\nPython’s default\nsys.meta_path\nhas three meta path finders, one that\nknows how to import built-in modules, one that knows how to import frozen\nmodules, and one that knows how to import modules from an\nimport path\n(i.e. the\npath based finder\n).\nChanged in version 3.4:\nThe\nfind_spec()\nmethod of meta path\nfinders replaced\nfind_module()\n, which\nis now deprecated.  While it will continue to work without change, the\nimport machinery will try it only if the finder does not implement\nfind_spec()\n.\nChanged in version 3.10:\nUse of\nfind_module()\nby the import system\nnow raises\nImportWarning\n.\nChanged in version 3.12:\nfind_module()\nhas been removed.\nUse\nfind_spec()\ninstead.\n5.4.\nLoading\n¶\nIf and when a module spec is found, the import machinery will use it (and\nthe loader it contains) when loading the module.  Here is an approximation\nof what happens during the loading portion of import:\nmodule\n=\nNone\nif\nspec\n.\nloader\nis\nnot\nNone\nand\nhasattr\n(\nspec\n.\nloader\n,\n'create_module'\n):\n# It is assumed 'exec_module' will also be defined on the loader.\nmodule\n=\nspec\n.\nloader\n.\ncreate_module\n(\nspec\n)\nif\nmodule\nis\nNone\n:\nmodule\n=\nModuleType\n(\nspec\n.\nname\n)\n# The import-related module attributes get set here:\n_init_module_attrs\n(\nspec\n,\nmodule\n)\nif\nspec\n.\nloader\nis\nNone\n:\n# unsupported\nraise\nImportError\nif\nspec\n.\norigin\nis\nNone\nand\nspec\n.\nsubmodule_search_locations\nis\nnot\nNone\n:\n# namespace package\nsys\n.\nmodules\n[\nspec\n.\nname\n]\n=\nmodule\nelif\nnot\nhasattr\n(\nspec\n.\nloader\n,\n'exec_module'\n):\nmodule\n=\nspec\n.\nloader\n.\nload_module\n(\nspec\n.\nname\n)\nelse\n:\nsys\n.\nmodules\n[\nspec\n.\nname\n]\n=\nmodule\ntry\n:\nspec\n.\nloader\n.\nexec_module\n(\nmodule\n)\nexcept\nBaseException\n:\ntry\n:\ndel\nsys\n.\nmodules\n[\nspec\n.\nname\n]\nexcept\nKeyError\n:\npass\nraise\nreturn\nsys\n.\nmodules\n[\nspec\n.\nname\n]\nNote the following details:\nIf there is an existing module object with the given name in\nsys.modules\n, import will have already returned it.\nThe module will exist in\nsys.modules\nbefore the loader\nexecutes the module code.  This is crucial because the module code may\n(directly or indirectly) import itself; adding it to\nsys.modules\nbeforehand prevents unbounded recursion in the worst case and multiple\nloading in the best.\nIf loading fails, the failing module – and only the failing module –\ngets removed from\nsys.modules\n.  Any module already in the\nsys.modules\ncache, and any module that was successfully loaded\nas a side-effect, must remain in the cache.  This contrasts with\nreloading where even the failing module is left in\nsys.modules\n.\nAfter the module is created but before execution, the import machinery\nsets the import-related module attributes (“_init_module_attrs” in\nthe pseudo-code example above), as summarized in a\nlater section\n.\nModule execution is the key moment of loading in which the module’s\nnamespace gets populated.  Execution is entirely delegated to the\nloader, which gets to decide what gets populated and how.\nThe module created during loading and passed to exec_module() may\nnot be the one returned at the end of import\n[\n2\n]\n.\nChanged in version 3.4:\nThe import system has taken over the boilerplate responsibilities of\nloaders.  These were previously performed by the\nimportlib.abc.Loader.load_module()\nmethod.\n5.4.1.\nLoaders\n¶\nModule loaders provide the critical function of loading: module execution.\nThe import machinery calls the\nimportlib.abc.Loader.exec_module()\nmethod with a single argument, the module object to execute.  Any value\nreturned from\nexec_module()\nis ignored.\nLoaders must satisfy the following requirements:\nIf the module is a Python module (as opposed to a built-in module or a\ndynamically loaded extension), the loader should execute the module’s code\nin the module’s global name space (\nmodule.__dict__\n).\nIf the loader cannot execute the module, it should raise an\nImportError\n, although any other exception raised during\nexec_module()\nwill be propagated.\nIn many cases, the finder and loader can be the same object; in such cases the\nfind_spec()\nmethod would just return a\nspec with the loader set to\nself\n.\nModule loaders may opt in to creating the module object during loading\nby implementing a\ncreate_module()\nmethod.\nIt takes one argument, the module spec, and returns the new module object\nto use during loading.\ncreate_module()\ndoes not need to set any attributes\non the module object.  If the method returns\nNone\n, the\nimport machinery will create the new module itself.\nAdded in version 3.4:\nThe\ncreate_module()\nmethod of loaders.\nChanged in version 3.4:\nThe\nload_module()\nmethod was replaced by\nexec_module()\nand the import\nmachinery assumed all the boilerplate responsibilities of loading.\nFor compatibility with existing loaders, the import machinery will use\nthe\nload_module()\nmethod of loaders if it exists and the loader does\nnot also implement\nexec_module()\n.  However,\nload_module()\nhas been\ndeprecated and loaders should implement\nexec_module()\ninstead.\nThe\nload_module()\nmethod must implement all the boilerplate loading\nfunctionality described above in addition to executing the module.  All\nthe same constraints apply, with some additional clarification:\nIf there is an existing module object with the given name in\nsys.modules\n, the loader must use that existing module.\n(Otherwise,\nimportlib.reload()\nwill not work correctly.)  If the\nnamed module does not exist in\nsys.modules\n, the loader\nmust create a new module object and add it to\nsys.modules\n.\nThe module\nmust\nexist in\nsys.modules\nbefore the loader\nexecutes the module code, to prevent unbounded recursion or multiple\nloading.\nIf loading fails, the loader must remove any modules it has inserted\ninto\nsys.modules\n, but it must remove\nonly\nthe failing\nmodule(s), and only if the loader itself has loaded the module(s)\nexplicitly.\nChanged in version 3.5:\nA\nDeprecationWarning\nis raised when\nexec_module()\nis defined but\ncreate_module()\nis not.\nChanged in version 3.6:\nAn\nImportError\nis raised when\nexec_module()\nis defined but\ncreate_module()\nis not.\nChanged in version 3.10:\nUse of\nload_module()\nwill raise\nImportWarning\n.\n5.4.2.\nSubmodules\n¶\nWhen a submodule is loaded using any mechanism (e.g.\nimportlib\nAPIs, the\nimport\nor\nimport-from\nstatements, or built-in\n__import__()\n) a\nbinding is placed in the parent module’s namespace to the submodule object.\nFor example, if package\nspam\nhas a submodule\nfoo\n, after importing\nspam.foo\n,\nspam\nwill have an attribute\nfoo\nwhich is bound to the\nsubmodule.  Let’s say you have the following directory structure:\nspam\n/\n__init__\n.\npy\nfoo\n.\npy\nand\nspam/__init__.py\nhas the following line in it:\nfrom\n.foo\nimport\nFoo\nthen executing the following puts name bindings for\nfoo\nand\nFoo\nin the\nspam\nmodule:\n>>>\nimport\nspam\n>>>\nspam\n.\nfoo\n<module 'spam.foo' from '/tmp/imports/spam/foo.py'>\n>>>\nspam\n.\nFoo\n<class 'spam.foo.Foo'>\nGiven Python’s familiar name binding rules this might seem surprising, but\nit’s actually a fundamental feature of the import system.  The invariant\nholding is that if you have\nsys.modules['spam']\nand\nsys.modules['spam.foo']\n(as you would after the above import), the latter\nmust appear as the\nfoo\nattribute of the former.\n5.4.3.\nModule specs\n¶\nThe import machinery uses a variety of information about each module\nduring import, especially before loading.  Most of the information is\ncommon to all modules.  The purpose of a module’s spec is to encapsulate\nthis import-related information on a per-module basis.\nUsing a spec during import allows state to be transferred between import\nsystem components, e.g. between the finder that creates the module spec\nand the loader that executes it.  Most importantly, it allows the\nimport machinery to perform the boilerplate operations of loading,\nwhereas without a module spec the loader had that responsibility.\nThe module’s spec is exposed as\nmodule.__spec__\n. Setting\n__spec__\nappropriately applies equally to\nmodules initialized during interpreter startup\n.\nThe one exception is\n__main__\n, where\n__spec__\nis\nset to None in some cases\n.\nSee\nModuleSpec\nfor details on the contents of\nthe module spec.\nAdded in version 3.4.\n5.4.4.\n__path__ attributes on modules\n¶\nThe\n__path__\nattribute should be a (possibly empty)\nsequence\nof strings enumerating the locations where the package’s\nsubmodules will be found. By definition, if a module has a\n__path__\nattribute, it is a\npackage\n.\nA package’s\n__path__\nattribute is used during imports of its\nsubpackages.\nWithin the import machinery, it functions much the same as\nsys.path\n,\ni.e. providing a list of locations to search for modules during import.\nHowever,\n__path__\nis typically much more constrained than\nsys.path\n.\nThe same rules used for\nsys.path\nalso apply to a package’s\n__path__\n.\nsys.path_hooks\n(described below) are\nconsulted when traversing a package’s\n__path__\n.\nA package’s\n__init__.py\nfile may set or alter the package’s\n__path__\nattribute, and this was typically the way namespace packages were implemented\nprior to\nPEP 420\n.  With the adoption of\nPEP 420\n, namespace packages no\nlonger need to supply\n__init__.py\nfiles containing only\n__path__\nmanipulation code; the import machinery automatically sets\n__path__\ncorrectly for the namespace package.\n5.4.5.\nModule reprs\n¶\nBy default, all modules have a usable repr, however depending on the\nattributes set above, and in the module’s spec, you can more explicitly\ncontrol the repr of module objects.\nIf the module has a spec (\n__spec__\n), the import machinery will try\nto generate a repr from it.  If that fails or there is no spec, the import\nsystem will craft a default repr using whatever information is available\non the module.  It will try to use the\nmodule.__name__\n,\nmodule.__file__\n, and\nmodule.__loader__\nas input into the repr,\nwith defaults for whatever information is missing.\nHere are the exact rules used:\nIf the module has a\n__spec__\nattribute, the information in the spec\nis used to generate the repr.  The “name”, “loader”, “origin”, and\n“has_location” attributes are consulted.\nIf the module has a\n__file__\nattribute, this is used as part of the\nmodule’s repr.\nIf the module has no\n__file__\nbut does have a\n__loader__\nthat is not\nNone\n, then the loader’s repr is used as part of the module’s repr.\nOtherwise, just use the module’s\n__name__\nin the repr.\nChanged in version 3.12:\nUse of\nmodule_repr()\n, having been deprecated since Python 3.4, was\nremoved in Python 3.12 and is no longer called during the resolution of a\nmodule’s repr.\n5.4.6.\nCached bytecode invalidation\n¶\nBefore Python loads cached bytecode from a\n.pyc\nfile, it checks whether the\ncache is up-to-date with the source\n.py\nfile. By default, Python does this\nby storing the source’s last-modified timestamp and size in the cache file when\nwriting it. At runtime, the import system then validates the cache file by\nchecking the stored metadata in the cache file against the source’s\nmetadata.\nPython also supports “hash-based” cache files, which store a hash of the source\nfile’s contents rather than its metadata. There are two variants of hash-based\n.pyc\nfiles: checked and unchecked. For checked hash-based\n.pyc\nfiles,\nPython validates the cache file by hashing the source file and comparing the\nresulting hash with the hash in the cache file. If a checked hash-based cache\nfile is found to be invalid, Python regenerates it and writes a new checked\nhash-based cache file. For unchecked hash-based\n.pyc\nfiles, Python simply\nassumes the cache file is valid if it exists. Hash-based\n.pyc\nfiles\nvalidation behavior may be overridden with the\n--check-hash-based-pycs\nflag.\nChanged in version 3.7:\nAdded hash-based\n.pyc\nfiles. Previously, Python only supported\ntimestamp-based invalidation of bytecode caches.\n5.5.\nThe Path Based Finder\n¶\nAs mentioned previously, Python comes with several default meta path finders.\nOne of these, called the\npath based finder\n(\nPathFinder\n), searches an\nimport path\n,\nwhich contains a list of\npath entries\n.  Each path\nentry names a location to search for modules.\nThe path based finder itself doesn’t know how to import anything. Instead, it\ntraverses the individual path entries, associating each of them with a\npath entry finder that knows how to handle that particular kind of path.\nThe default set of path entry finders implement all the semantics for finding\nmodules on the file system, handling special file types such as Python source\ncode (\n.py\nfiles), Python byte code (\n.pyc\nfiles) and\nshared libraries (e.g.\n.so\nfiles). When supported by the\nzipimport\nmodule in the standard library, the default path entry finders also handle\nloading all of these file types (other than shared libraries) from zipfiles.\nPath entries need not be limited to file system locations.  They can refer to\nURLs, database queries, or any other location that can be specified as a\nstring.\nThe path based finder provides additional hooks and protocols so that you\ncan extend and customize the types of searchable path entries.  For example,\nif you wanted to support path entries as network URLs, you could write a hook\nthat implements HTTP semantics to find modules on the web.  This hook (a\ncallable) would return a\npath entry finder\nsupporting the protocol\ndescribed below, which was then used to get a loader for the module from the\nweb.\nA word of warning: this section and the previous both use the term\nfinder\n,\ndistinguishing between them by using the terms\nmeta path finder\nand\npath entry finder\n.  These two types of finders are very similar,\nsupport similar protocols, and function in similar ways during the import\nprocess, but it’s important to keep in mind that they are subtly different.\nIn particular, meta path finders operate at the beginning of the import\nprocess, as keyed off the\nsys.meta_path\ntraversal.\nBy contrast, path entry finders are in a sense an implementation detail\nof the path based finder, and in fact, if the path based finder were to be\nremoved from\nsys.meta_path\n, none of the path entry finder semantics\nwould be invoked.\n5.5.1.\nPath entry finders\n¶\nThe\npath based finder\nis responsible for finding and loading\nPython modules and packages whose location is specified with a string\npath entry\n.  Most path entries name locations in the file system,\nbut they need not be limited to this.\nAs a meta path finder, the\npath based finder\nimplements the\nfind_spec()\nprotocol previously\ndescribed, however it exposes additional hooks that can be used to\ncustomize how modules are found and loaded from the\nimport path\n.\nThree variables are used by the\npath based finder\n,\nsys.path\n,\nsys.path_hooks\nand\nsys.path_importer_cache\n.  The\n__path__\nattributes on package objects are also used.  These provide additional ways\nthat the import machinery can be customized.\nsys.path\ncontains a list of strings providing search locations for\nmodules and packages.  It is initialized from the\nPYTHONPATH\nenvironment variable and various other installation- and\nimplementation-specific defaults.  Entries in\nsys.path\ncan name\ndirectories on the file system, zip files, and potentially other “locations”\n(see the\nsite\nmodule) that should be searched for modules, such as\nURLs, or database queries.  Only strings should be present on\nsys.path\n; all other data types are ignored.\nThe\npath based finder\nis a\nmeta path finder\n, so the import\nmachinery begins the\nimport path\nsearch by calling the path\nbased finder’s\nfind_spec()\nmethod as\ndescribed previously.  When the\npath\nargument to\nfind_spec()\nis given, it will be a\nlist of string paths to traverse - typically a package’s\n__path__\nattribute for an import within that package.  If the\npath\nargument is\nNone\n, this indicates a top level import and\nsys.path\nis used.\nThe path based finder iterates over every entry in the search path, and\nfor each of these, looks for an appropriate\npath entry finder\n(\nPathEntryFinder\n) for the\npath entry.  Because this can be an expensive operation (e.g. there may be\nstat()\ncall overheads for this search), the path based finder maintains\na cache mapping path entries to path entry finders.  This cache is maintained\nin\nsys.path_importer_cache\n(despite the name, this cache actually\nstores finder objects rather than being limited to\nimporter\nobjects).\nIn this way, the expensive search for a particular\npath entry\nlocation’s\npath entry finder\nneed only be done once.  User code is\nfree to remove cache entries from\nsys.path_importer_cache\nforcing\nthe path based finder to perform the path entry search again.\nIf the path entry is not present in the cache, the path based finder iterates\nover every callable in\nsys.path_hooks\n.  Each of the\npath entry\nhooks\nin this list is called with a single argument, the\npath entry to be searched.  This callable may either return a\npath\nentry finder\nthat can handle the path entry, or it may raise\nImportError\n.  An\nImportError\nis used by the path based finder to\nsignal that the hook cannot find a\npath entry finder\nfor that\npath entry\n.  The\nexception is ignored and\nimport path\niteration continues.  The hook\nshould expect either a string or bytes object; the encoding of bytes objects\nis up to the hook (e.g. it may be a file system encoding, UTF-8, or something\nelse), and if the hook cannot decode the argument, it should raise\nImportError\n.\nIf\nsys.path_hooks\niteration ends with no\npath entry finder\nbeing returned, then the path based finder’s\nfind_spec()\nmethod will store\nNone\nin\nsys.path_importer_cache\n(to indicate that there is no finder for\nthis path entry) and return\nNone\n, indicating that this\nmeta path finder\ncould not find the module.\nIf a\npath entry finder\nis\nreturned by one of the\npath entry\nhook\ncallables on\nsys.path_hooks\n, then the following protocol is used\nto ask the finder for a module spec, which is then used when loading the\nmodule.\nThe current working directory – denoted by an empty string – is handled\nslightly differently from other entries on\nsys.path\n. First, if the\ncurrent working directory is found to not exist, no value is stored in\nsys.path_importer_cache\n. Second, the value for the current working\ndirectory is looked up fresh for each module lookup. Third, the path used for\nsys.path_importer_cache\nand returned by\nimportlib.machinery.PathFinder.find_spec()\nwill be the actual current\nworking directory and not the empty string.\n5.5.2.\nPath entry finder protocol\n¶\nIn order to support imports of modules and initialized packages and also to\ncontribute portions to namespace packages, path entry finders must implement\nthe\nfind_spec()\nmethod.\nfind_spec()\ntakes two arguments: the\nfully qualified name of the module being imported, and the (optional) target\nmodule.\nfind_spec()\nreturns a fully populated spec for the module.\nThis spec will always have “loader” set (with one exception).\nTo indicate to the import machinery that the spec represents a namespace\nportion\n, the path entry finder sets\nsubmodule_search_locations\nto\na list containing the portion.\nChanged in version 3.4:\nfind_spec()\nreplaced\nfind_loader()\nand\nfind_module()\n, both of which\nare now deprecated, but will be used if\nfind_spec()\nis not defined.\nOlder path entry finders may implement one of these two deprecated methods\ninstead of\nfind_spec()\n.  The methods are still respected for the\nsake of backward compatibility.  However, if\nfind_spec()\nis\nimplemented on the path entry finder, the legacy methods are ignored.\nfind_loader()\ntakes one argument, the\nfully qualified name of the module being imported.\nfind_loader()\nreturns a 2-tuple where the first item is the loader and the second item\nis a namespace\nportion\n.\nFor backwards compatibility with other implementations of the import\nprotocol, many path entry finders also support the same,\ntraditional\nfind_module()\nmethod that meta path finders support.\nHowever path entry finder\nfind_module()\nmethods are never called\nwith a\npath\nargument (they are expected to record the appropriate\npath information from the initial call to the path hook).\nThe\nfind_module()\nmethod on path entry finders is deprecated,\nas it does not allow the path entry finder to contribute portions to\nnamespace packages.  If both\nfind_loader()\nand\nfind_module()\nexist on a path entry finder, the import system will always call\nfind_loader()\nin preference to\nfind_module()\n.\nChanged in version 3.10:\nCalls to\nfind_module()\nand\nfind_loader()\nby the import\nsystem will raise\nImportWarning\n.\nChanged in version 3.12:\nfind_module()\nand\nfind_loader()\nhave been removed.\n5.6.\nReplacing the standard import system\n¶\nThe most reliable mechanism for replacing the entire import system is to\ndelete the default contents of\nsys.meta_path\n, replacing them\nentirely with a custom meta path hook.\nIf it is acceptable to only alter the behaviour of import statements\nwithout affecting other APIs that access the import system, then replacing\nthe builtin\n__import__()\nfunction may be sufficient. This technique\nmay also be employed at the module level to only alter the behaviour of\nimport statements within that module.\nTo selectively prevent the import of some modules from a hook early on the\nmeta path (rather than disabling the standard import system entirely),\nit is sufficient to raise\nModuleNotFoundError\ndirectly from\nfind_spec()\ninstead of returning\nNone\n. The latter indicates that the meta path search should continue,\nwhile raising an exception terminates it immediately.\n5.7.\nPackage Relative Imports\n¶\nRelative imports use leading dots. A single leading dot indicates a relative\nimport, starting with the current package. Two or more leading dots indicate a\nrelative import to the parent(s) of the current package, one level per dot\nafter the first. For example, given the following package layout:\npackage\n/\n__init__\n.\npy\nsubpackage1\n/\n__init__\n.\npy\nmoduleX\n.\npy\nmoduleY\n.\npy\nsubpackage2\n/\n__init__\n.\npy\nmoduleZ\n.\npy\nmoduleA\n.\npy\nIn either\nsubpackage1/moduleX.py\nor\nsubpackage1/__init__.py\n,\nthe following are valid relative imports:\nfrom\n.moduleY\nimport\nspam\nfrom\n.moduleY\nimport\nspam\nas\nham\nfrom\n.\nimport\nmoduleY\nfrom\n..subpackage1\nimport\nmoduleY\nfrom\n..subpackage2.moduleZ\nimport\neggs\nfrom\n..moduleA\nimport\nfoo\nAbsolute imports may use either the\nimport\n<>\nor\nfrom\n<>\nimport\n<>\nsyntax, but relative imports may only use the second form; the reason\nfor this is that:\nimport\nXXX.YYY.ZZZ\nshould expose\nXXX.YYY.ZZZ\nas a usable expression, but .moduleY is\nnot a valid expression.\n5.8.\nSpecial considerations for __main__\n¶\nThe\n__main__\nmodule is a special case relative to Python’s import\nsystem.  As noted\nelsewhere\n, the\n__main__\nmodule\nis directly initialized at interpreter startup, much like\nsys\nand\nbuiltins\n.  However, unlike those two, it doesn’t strictly\nqualify as a built-in module.  This is because the manner in which\n__main__\nis initialized depends on the flags and other options with\nwhich the interpreter is invoked.\n5.8.1.\n__main__.__spec__\n¶\nDepending on how\n__main__\nis initialized,\n__main__.__spec__\ngets set appropriately or to\nNone\n.\nWhen Python is started with the\n-m\noption,\n__spec__\nis set\nto the module spec of the corresponding module or package.\n__spec__\nis\nalso populated when the\n__main__\nmodule is loaded as part of executing a\ndirectory, zipfile or other\nsys.path\nentry.\nIn\nthe remaining cases\n__main__.__spec__\nis set to\nNone\n, as the code used to populate the\n__main__\ndoes not correspond directly with an importable module:\ninteractive prompt\n-c\noption\nrunning from stdin\nrunning directly from a source or bytecode file\nNote that\n__main__.__spec__\nis always\nNone\nin the last case,\neven if\nthe file could technically be imported directly as a module\ninstead. Use the\n-m\nswitch if valid module metadata is desired\nin\n__main__\n.\nNote also that even when\n__main__\ncorresponds with an importable module\nand\n__main__.__spec__\nis set accordingly, they’re still considered\ndistinct\nmodules. This is due to the fact that blocks guarded by\nif\n__name__\n==\n\"__main__\":\nchecks only execute when the module is used\nto populate the\n__main__\nnamespace, and not during normal import.\n5.9.\nReferences\n¶\nThe import machinery has evolved considerably since Python’s early days.  The\noriginal\nspecification for packages\nis still available to read,\nalthough some details have changed since the writing of that document.\nThe original specification for\nsys.meta_path\nwas\nPEP 302\n, with\nsubsequent extension in\nPEP 420\n.\nPEP 420\nintroduced\nnamespace packages\nfor\nPython 3.3.\nPEP 420\nalso introduced the\nfind_loader()\nprotocol as an\nalternative to\nfind_module()\n.\nPEP 366\ndescribes the addition of the\n__package__\nattribute for\nexplicit relative imports in main modules.\nPEP 328\nintroduced absolute and explicit relative imports and initially\nproposed\n__name__\nfor semantics\nPEP 366\nwould eventually specify for\n__package__\n.\nPEP 338\ndefines executing modules as scripts.\nPEP 451\nadds the encapsulation of per-module import state in spec\nobjects.  It also off-loads most of the boilerplate responsibilities of\nloaders back onto the import machinery.  These changes allow the\ndeprecation of several APIs in the import system and also addition of new\nmethods to finders and loaders.\nFootnotes\n[\n1\n]\nSee\ntypes.ModuleType\n.\n[\n2\n]\nThe importlib implementation avoids using the return value\ndirectly. Instead, it gets the module object by looking the module name up\nin\nsys.modules\n.  The indirect effect of this is that an imported\nmodule may replace itself in\nsys.modules\n.  This is\nimplementation-specific behavior that is not guaranteed to work in other\nPython implementations.\nTable of Contents\n5. The import system\n5.1.\nimportlib\n5.2. Packages\n5.2.1. Regular packages\n5.2.2. Namespace packages\n5.3. Searching\n5.3.1. The module cache\n5.3.2. Finders and loaders\n5.3.3. Import hooks\n5.3.4. The meta path\n5.4. Loading\n5.4.1. Loaders\n5.4.2. Submodules\n5.4.3. Module specs\n5.4.4. __path__ attributes on modules\n5.4.5. Module reprs\n5.4.6. Cached bytecode invalidation\n5.5. The Path Based Finder\n5.5.1. Path entry finders\n5.5.2. Path entry finder protocol\n5.6. Replacing the standard import system\n5.7. Package Relative Imports\n5.8. Special considerations for __main__\n5.8.1. __main__.__spec__\n5.9. References\nPrevious topic\n4.\nExecution model\nNext topic\n6.\nExpressions\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Language Reference\n»\n5.\nThe import system\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/reference/import.html",
    "source": "python",
    "doc_type": "language_reference",
    "scraped_at": 12344.8436515
  },
  {
    "title": "Copyright¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nCopyright\n|\nTheme\nAuto\nLight\nDark\n|\nCopyright\n¶\nPython and this documentation is:\nCopyright © 2001-2024 Python Software Foundation. All rights reserved.\nCopyright © 2000 BeOpen.com. All rights reserved.\nCopyright © 1995-2000 Corporation for National Research Initiatives. All rights\nreserved.\nCopyright © 1991-1995 Stichting Mathematisch Centrum. All rights reserved.\nSee\nHistory and License\nfor complete license and permissions information.\nPrevious topic\nDealing with Bugs\nNext topic\nHistory and License\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nCopyright\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/copyright.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12345.0170487
  },
  {
    "title": "Python Module Index",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Module Index\n|\nTheme\nAuto\nLight\nDark\n|\nPython Module Index\n_\n|\na\n|\nb\n|\nc\n|\nd\n|\ne\n|\nf\n|\ng\n|\nh\n|\ni\n|\nj\n|\nk\n|\nl\n|\nm\n|\nn\n|\no\n|\np\n|\nq\n|\nr\n|\ns\n|\nt\n|\nu\n|\nv\n|\nw\n|\nx\n|\nz\n_\n__future__\nFuture statement definitions\n__main__\nThe environment where top-level code is run. Covers command-line\ninterfaces, import-time behavior, and ``__name__ == '__main__'``.\n_thread\nLow-level threading API.\n_tkinter\nA binary module that contains the low-level interface to Tcl/Tk.\na\nabc\nAbstract base classes according to :pep:`3119`.\naifc\nDeprecated:\nRemoved in 3.13.\nargparse\nCommand-line option and argument parsing library.\narray\nSpace efficient arrays of uniformly typed numeric values.\nast\nAbstract Syntax Tree classes and manipulation.\nasynchat\nDeprecated:\nRemoved in 3.12.\nasyncio\nAsynchronous I/O.\nasyncore\nDeprecated:\nRemoved in 3.12.\natexit\nRegister and execute cleanup functions.\naudioop\nDeprecated:\nRemoved in 3.13.\nb\nbase64\nRFC 4648: Base16, Base32, Base64 Data Encodings;\nBase85 and Ascii85\nbdb\nDebugger framework.\nbinascii\nTools for converting between binary and various ASCII-encoded binary\nrepresentations.\nbisect\nArray bisection algorithms for binary searching.\nbuiltins\nThe module that provides the built-in namespace.\nbz2\nInterfaces for bzip2 compression and decompression.\nc\ncalendar\nFunctions for working with calendars, including some emulation\nof the Unix cal program.\ncgi\nDeprecated:\nRemoved in 3.13.\ncgitb\nDeprecated:\nRemoved in 3.13.\nchunk\nDeprecated:\nRemoved in 3.13.\ncmath\nMathematical functions for complex numbers.\ncmd\nBuild line-oriented command interpreters.\ncode\nFacilities to implement read-eval-print loops.\ncodecs\nEncode and decode data and streams.\ncodeop\nCompile (possibly incomplete) Python code.\ncollections\nContainer datatypes\ncollections.abc\nAbstract base classes for containers\ncolorsys\nConversion functions between RGB and other color systems.\ncompileall\nTools for byte-compiling all Python source files in a directory tree.\nconcurrent\nconcurrent.futures\nExecute computations concurrently using threads or processes.\nconfigparser\nConfiguration file parser.\ncontextlib\nUtilities for with-statement contexts.\ncontextvars\nContext Variables\ncopy\nShallow and deep copy operations.\ncopyreg\nRegister pickle support functions.\ncProfile\ncrypt\nDeprecated:\nRemoved in 3.13.\ncsv\nWrite and read tabular data to and from delimited files.\nctypes\nA foreign function library for Python.\ncurses\n(Unix)\nAn interface to the curses library, providing portable\nterminal handling.\ncurses.ascii\nConstants and set-membership functions for ASCII characters.\ncurses.panel\nA panel stack extension that adds depth to  curses windows.\ncurses.textpad\nEmacs-like input editing in a curses window.\nd\ndataclasses\nGenerate special methods on user-defined classes.\ndatetime\nBasic date and time types.\ndbm\nInterfaces to various Unix \"database\" formats.\ndbm.dumb\nPortable implementation of the simple DBM interface.\ndbm.gnu\n(Unix)\nGNU database manager\ndbm.ndbm\n(Unix)\nThe New Database Manager\ndbm.sqlite3\n(All)\nSQLite backend for dbm\ndecimal\nImplementation of the General Decimal Arithmetic Specification.\ndifflib\nHelpers for computing differences between objects.\ndis\nDisassembler for Python bytecode.\ndistutils\nDeprecated:\nRemoved in 3.12.\ndoctest\nTest pieces of code within docstrings.\ne\nemail\nPackage supporting the parsing, manipulating, and generating\nemail messages.\nemail.charset\nCharacter Sets\nemail.contentmanager\nStoring and Retrieving Content from MIME Parts\nemail.encoders\nEncoders for email message payloads.\nemail.errors\nThe exception classes used by the email package.\nemail.generator\nGenerate flat text email messages from a message structure.\nemail.header\nRepresenting non-ASCII headers\nemail.headerregistry\nAutomatic Parsing of headers based on the field name\nemail.iterators\nIterate over a  message object tree.\nemail.message\nThe base class representing email messages.\nemail.mime\nBuild MIME messages.\nemail.mime.application\nemail.mime.audio\nemail.mime.base\nemail.mime.image\nemail.mime.message\nemail.mime.multipart\nemail.mime.nonmultipart\nemail.mime.text\nemail.parser\nParse flat text email messages to produce a message object structure.\nemail.policy\nControlling the parsing and generating of messages\nemail.utils\nMiscellaneous email package utilities.\nencodings\nEncodings package\nencodings.idna\nInternationalized Domain Names implementation\nencodings.mbcs\nWindows ANSI codepage\nencodings.utf_8_sig\nUTF-8 codec with BOM signature\nensurepip\nBootstrapping the \"pip\" installer into an existing Python\ninstallation or virtual environment.\nenum\nImplementation of an enumeration class.\nerrno\nStandard errno system symbols.\nf\nfaulthandler\nDump the Python traceback.\nfcntl\n(Unix)\nThe fcntl() and ioctl() system calls.\nfilecmp\nCompare files efficiently.\nfileinput\nLoop over standard input or a list of files.\nfnmatch\nUnix shell style filename pattern matching.\nfractions\nRational numbers.\nftplib\nFTP protocol client (requires sockets).\nfunctools\nHigher-order functions and operations on callable objects.\ng\ngc\nInterface to the cycle-detecting garbage collector.\ngetopt\nPortable parser for command line options; support both short and\nlong option names.\ngetpass\nPortable reading of passwords and retrieval of the userid.\ngettext\nMultilingual internationalization services.\nglob\nUnix shell style pathname pattern expansion.\ngraphlib\nFunctionality to operate with graph-like structures\ngrp\n(Unix)\nThe group database (getgrnam() and friends).\ngzip\nInterfaces for gzip compression and decompression using file objects.\nh\nhashlib\nSecure hash and message digest algorithms.\nheapq\nHeap queue algorithm (a.k.a. priority queue).\nhmac\nKeyed-Hashing for Message Authentication (HMAC) implementation\nhtml\nHelpers for manipulating HTML.\nhtml.entities\nDefinitions of HTML general entities.\nhtml.parser\nA simple parser that can handle HTML and XHTML.\nhttp\nHTTP status codes and messages\nhttp.client\nHTTP and HTTPS protocol client (requires sockets).\nhttp.cookiejar\nClasses for automatic handling of HTTP cookies.\nhttp.cookies\nSupport for HTTP state management (cookies).\nhttp.server\nHTTP server and request handlers.\ni\nidlelib\nImplementation package for the IDLE shell/editor.\nimaplib\nIMAP4 protocol client (requires sockets).\nimghdr\nDeprecated:\nRemoved in 3.13.\nimp\nDeprecated:\nRemoved in 3.12.\nimportlib\nThe implementation of the import machinery.\nimportlib.abc\nAbstract base classes related to import\nimportlib.machinery\nImporters and path hooks\nimportlib.metadata\nAccessing package metadata\nimportlib.resources\nPackage resource reading, opening, and access\nimportlib.resources.abc\nAbstract base classes for resources\nimportlib.util\nUtility code for importers\ninspect\nExtract information and source code from live objects.\nio\nCore tools for working with streams.\nipaddress\nIPv4/IPv6 manipulation library.\nitertools\nFunctions creating iterators for efficient looping.\nj\njson\nEncode and decode the JSON format.\njson.tool\nA command line to validate and pretty-print JSON.\nk\nkeyword\nTest whether a string is a keyword in Python.\nl\nlinecache\nProvides random access to individual lines from text files.\nlocale\nInternationalization services.\nlogging\nFlexible event logging system for applications.\nlogging.config\nConfiguration of the logging module.\nlogging.handlers\nHandlers for the logging module.\nlzma\nA Python wrapper for the liblzma compression library.\nm\nmailbox\nManipulate mailboxes in various formats\nmailcap\nDeprecated:\nRemoved in 3.13.\nmarshal\nConvert Python objects to streams of bytes and back (with different\nconstraints).\nmath\nMathematical functions (sin() etc.).\nmimetypes\nMapping of filename extensions to MIME types.\nmmap\nInterface to memory-mapped files for Unix and Windows.\nmodulefinder\nFind modules used by a script.\nmsilib\nDeprecated:\nRemoved in 3.13.\nmsvcrt\n(Windows)\nMiscellaneous useful routines from the MS VC++ runtime.\nmultiprocessing\nProcess-based parallelism.\nmultiprocessing.connection\nAPI for dealing with sockets.\nmultiprocessing.dummy\nDumb wrapper around threading.\nmultiprocessing.managers\nShare data between process with shared objects.\nmultiprocessing.pool\nCreate pools of processes.\nmultiprocessing.shared_memory\nProvides shared memory for direct access across processes.\nmultiprocessing.sharedctypes\nAllocate ctypes objects from shared memory.\nn\nnetrc\nLoading of .netrc files.\nnis\nDeprecated:\nRemoved in 3.13.\nnntplib\nDeprecated:\nRemoved in 3.13.\nnumbers\nNumeric abstract base classes (Complex, Real, Integral, etc.).\no\noperator\nFunctions corresponding to the standard operators.\noptparse\nCommand-line option parsing library.\nos\nMiscellaneous operating system interfaces.\nos.path\nOperations on pathnames.\nossaudiodev\nDeprecated:\nRemoved in 3.13.\np\npathlib\nObject-oriented filesystem paths\npdb\nThe Python debugger for interactive interpreters.\npickle\nConvert Python objects to streams of bytes and back.\npickletools\nContains extensive comments about the pickle protocols and\npickle-machine opcodes, as well as some useful functions.\npipes\nDeprecated:\nRemoved in 3.13.\npkgutil\nUtilities for the import system.\nplatform\nRetrieves as much platform identifying data as possible.\nplistlib\nGenerate and parse Apple plist files.\npoplib\nPOP3 protocol client (requires sockets).\nposix\n(Unix)\nThe most common POSIX system calls (normally used via module os).\npprint\nData pretty printer.\nprofile\nPython source profiler.\npstats\nStatistics object for use with the profiler.\npty\n(Unix)\nPseudo-Terminal Handling for Unix.\npwd\n(Unix)\nThe password database (getpwnam() and friends).\npy_compile\nGenerate byte-code files from Python source files.\npyclbr\nSupports information extraction for a Python module browser.\npydoc\nDocumentation generator and online help system.\nq\nqueue\nA synchronized queue class.\nquopri\nEncode and decode files using the MIME quoted-printable encoding.\nr\nrandom\nGenerate pseudo-random numbers with various common distributions.\nre\nRegular expression operations.\nreadline\n(Unix)\nGNU readline support for Python.\nreprlib\nAlternate repr() implementation with size limits.\nresource\n(Unix)\nAn interface to provide resource usage information on the current process.\nrlcompleter\nPython identifier completion, suitable for the GNU readline library.\nrunpy\nLocate and run Python modules without importing them first.\ns\nsched\nGeneral purpose event scheduler.\nsecrets\nGenerate secure random numbers for managing secrets.\nselect\nWait for I/O completion on multiple streams.\nselectors\nHigh-level I/O multiplexing.\nshelve\nPython object persistence.\nshlex\nSimple lexical analysis for Unix shell-like languages.\nshutil\nHigh-level file operations, including copying.\nsignal\nSet handlers for asynchronous events.\nsite\nModule responsible for site-specific configuration.\nsitecustomize\nsmtpd\nDeprecated:\nRemoved in 3.12.\nsmtplib\nSMTP protocol client (requires sockets).\nsndhdr\nDeprecated:\nRemoved in 3.13.\nsocket\nLow-level networking interface.\nsocketserver\nA framework for network servers.\nspwd\nDeprecated:\nRemoved in 3.13.\nsqlite3\nA DB-API 2.0 implementation using SQLite 3.x.\nssl\nTLS/SSL wrapper for socket objects\nstat\nUtilities for interpreting the results of os.stat(),\nos.lstat() and os.fstat().\nstatistics\nMathematical statistics functions\nstring\nCommon string operations.\nstringprep\nString preparation, as per RFC 3453\nstruct\nInterpret bytes as packed binary data.\nsubprocess\nSubprocess management.\nsunau\nDeprecated:\nRemoved in 3.13.\nsymtable\nInterface to the compiler's internal symbol tables.\nsys\nAccess system-specific parameters and functions.\nsys.monitoring\nAccess and control event monitoring\nsysconfig\nPython's configuration information\nsyslog\n(Unix)\nAn interface to the Unix syslog library routines.\nt\ntabnanny\nTool for detecting white space related problems in Python\nsource files in a directory tree.\ntarfile\nRead and write tar-format archive files.\ntelnetlib\nDeprecated:\nRemoved in 3.13.\ntempfile\nGenerate temporary files and directories.\ntermios\n(Unix)\nPOSIX style tty control.\ntest\nRegression tests package containing the testing suite for Python.\ntest.regrtest\nDrives the regression test suite.\ntest.support\nSupport for Python's regression test suite.\ntest.support.bytecode_helper\nSupport tools for testing correct bytecode generation.\ntest.support.import_helper\nSupport for import tests.\ntest.support.os_helper\nSupport for os tests.\ntest.support.script_helper\nSupport for Python's script execution tests.\ntest.support.socket_helper\nSupport for socket tests.\ntest.support.threading_helper\nSupport for threading tests.\ntest.support.warnings_helper\nSupport for warnings tests.\ntextwrap\nText wrapping and filling\nthreading\nThread-based parallelism.\ntime\nTime access and conversions.\ntimeit\nMeasure the execution time of small code snippets.\ntkinter\nInterface to Tcl/Tk for graphical user interfaces\ntkinter.colorchooser\n(Tk)\nColor choosing dialog\ntkinter.commondialog\n(Tk)\nTkinter base class for dialogs\ntkinter.dnd\n(Tk)\nTkinter drag-and-drop interface\ntkinter.filedialog\n(Tk)\nDialog classes for file selection\ntkinter.font\n(Tk)\nTkinter font-wrapping class\ntkinter.messagebox\n(Tk)\nVarious types of alert dialogs\ntkinter.scrolledtext\n(Tk)\nText widget with a vertical scroll bar.\ntkinter.simpledialog\n(Tk)\nSimple dialog windows\ntkinter.ttk\nTk themed widget set\ntoken\nConstants representing terminal nodes of the parse tree.\ntokenize\nLexical scanner for Python source code.\ntomllib\nParse TOML files.\ntrace\nTrace or track Python statement execution.\ntraceback\nPrint or retrieve a stack traceback.\ntracemalloc\nTrace memory allocations.\ntty\n(Unix)\nUtility functions that perform common terminal control operations.\nturtle\nAn educational framework for simple graphics applications\nturtledemo\nA viewer for example turtle scripts\ntypes\nNames for built-in types.\ntyping\nSupport for type hints (see :pep:`484`).\nu\nunicodedata\nAccess the Unicode Database.\nunittest\nUnit testing framework for Python.\nunittest.mock\nMock object library.\nurllib\nurllib.error\nException classes raised by urllib.request.\nurllib.parse\nParse URLs into or assemble them from components.\nurllib.request\nExtensible library for opening URLs.\nurllib.response\nResponse classes used by urllib.\nurllib.robotparser\nLoad a robots.txt file and answer questions about\nfetchability of other URLs.\nusercustomize\nuu\nDeprecated:\nRemoved in 3.13.\nuuid\nUUID objects (universally unique identifiers) according to RFC 4122\nv\nvenv\nCreation of virtual environments.\nw\nwarnings\nIssue warning messages and control their disposition.\nwave\nProvide an interface to the WAV sound format.\nweakref\nSupport for weak references and weak dictionaries.\nwebbrowser\nEasy-to-use controller for web browsers.\nwinreg\n(Windows)\nRoutines and objects for manipulating the Windows registry.\nwinsound\n(Windows)\nAccess to the sound-playing machinery for Windows.\nwsgiref\nWSGI Utilities and Reference Implementation.\nwsgiref.handlers\nWSGI server/gateway base classes.\nwsgiref.headers\nWSGI response header tools.\nwsgiref.simple_server\nA simple WSGI HTTP server.\nwsgiref.types\nWSGI types for static type checking\nwsgiref.util\nWSGI environment utilities.\nwsgiref.validate\nWSGI conformance checker.\nx\nxdrlib\nDeprecated:\nRemoved in 3.13.\nxml\nPackage containing XML processing modules\nxml.dom\nDocument Object Model API for Python.\nxml.dom.minidom\nMinimal Document Object Model (DOM) implementation.\nxml.dom.pulldom\nSupport for building partial DOM trees from SAX events.\nxml.etree.ElementInclude\nxml.etree.ElementTree\nImplementation of the ElementTree API.\nxml.parsers.expat\nAn interface to the Expat non-validating XML parser.\nxml.parsers.expat.errors\nxml.parsers.expat.model\nxml.sax\nPackage containing SAX2 base classes and convenience functions.\nxml.sax.handler\nBase classes for SAX event handlers.\nxml.sax.saxutils\nConvenience functions and classes for use with SAX.\nxml.sax.xmlreader\nInterface which SAX-compliant XML parsers must implement.\nxmlrpc\nServer and client modules implementing XML-RPC.\nxmlrpc.client\nXML-RPC client access.\nxmlrpc.server\nBasic XML-RPC server implementations.\nz\nzipapp\nManage executable Python zip archives\nzipfile\nRead and write ZIP-format archive files.\nzipimport\nSupport for importing Python modules from ZIP archives.\nzlib\nLow-level interface to compression and decompression routines\ncompatible with gzip.\nzoneinfo\nIANA time zone support\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Module Index\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/py-modindex.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12345.1877485
  },
  {
    "title": "3. An Informal Introduction to Python¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n3.\nAn Informal Introduction to Python\n|\nTheme\nAuto\nLight\nDark\n|\n3.\nAn Informal Introduction to Python\n¶\nIn the following examples, input and output are distinguished by the presence or\nabsence of prompts (\n>>>\nand\n…\n): to repeat the example, you must type\neverything after the prompt, when the prompt appears; lines that do not begin\nwith a prompt are output from the interpreter. Note that a secondary prompt on a\nline by itself in an example means you must type a blank line; this is used to\nend a multi-line command.\nYou can use the “Copy” button (it appears in the upper-right corner\nwhen hovering over or tapping a code example), which strips prompts\nand omits output, to copy and paste the input lines into your interpreter.\nMany of the examples in this manual, even those entered at the interactive\nprompt, include comments.  Comments in Python start with the hash character,\n#\n, and extend to the end of the physical line.  A comment may appear at the\nstart of a line or following whitespace or code, but not within a string\nliteral.  A hash character within a string literal is just a hash character.\nSince comments are to clarify code and are not interpreted by Python, they may\nbe omitted when typing in examples.\nSome examples:\n# this is the first comment\nspam\n=\n1\n# and this is the second comment\n# ... and now a third!\ntext\n=\n\"# This is not a comment because it's inside quotes.\"\n3.1.\nUsing Python as a Calculator\n¶\nLet’s try some simple Python commands.  Start the interpreter and wait for the\nprimary prompt,\n>>>\n.  (It shouldn’t take long.)\n3.1.1.\nNumbers\n¶\nThe interpreter acts as a simple calculator: you can type an expression at it\nand it will write the value.  Expression syntax is straightforward: the\noperators\n+\n,\n-\n,\n*\nand\n/\ncan be used to perform\narithmetic; parentheses (\n()\n) can be used for grouping.\nFor example:\n>>>\n2\n+\n2\n4\n>>>\n50\n-\n5\n*\n6\n20\n>>>\n(\n50\n-\n5\n*\n6\n)\n/\n4\n5.0\n>>>\n8\n/\n5\n# division always returns a floating-point number\n1.6\nThe integer numbers (e.g.\n2\n,\n4\n,\n20\n) have type\nint\n,\nthe ones with a fractional part (e.g.\n5.0\n,\n1.6\n) have type\nfloat\n.  We will see more about numeric types later in the tutorial.\nDivision (\n/\n) always returns a float.  To do\nfloor division\nand\nget an integer result you can use the\n//\noperator; to calculate\nthe remainder you can use\n%\n:\n>>>\n17\n/\n3\n# classic division returns a float\n5.666666666666667\n>>>\n>>>\n17\n//\n3\n# floor division discards the fractional part\n5\n>>>\n17\n%\n3\n# the % operator returns the remainder of the division\n2\n>>>\n5\n*\n3\n+\n2\n# floored quotient * divisor + remainder\n17\nWith Python, it is possible to use the\n**\noperator to calculate powers\n[\n1\n]\n:\n>>>\n5\n**\n2\n# 5 squared\n25\n>>>\n2\n**\n7\n# 2 to the power of 7\n128\nThe equal sign (\n=\n) is used to assign a value to a variable. Afterwards, no\nresult is displayed before the next interactive prompt:\n>>>\nwidth\n=\n20\n>>>\nheight\n=\n5\n*\n9\n>>>\nwidth\n*\nheight\n900\nIf a variable is not “defined” (assigned a value), trying to use it will\ngive you an error:\n>>>\nn\n# try to access an undefined variable\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nNameError\n:\nname 'n' is not defined\nThere is full support for floating point; operators with mixed type operands\nconvert the integer operand to floating point:\n>>>\n4\n*\n3.75\n-\n1\n14.0\nIn interactive mode, the last printed expression is assigned to the variable\n_\n.  This means that when you are using Python as a desk calculator, it is\nsomewhat easier to continue calculations, for example:\n>>>\ntax\n=\n12.5\n/\n100\n>>>\nprice\n=\n100.50\n>>>\nprice\n*\ntax\n12.5625\n>>>\nprice\n+\n_\n113.0625\n>>>\nround\n(\n_\n,\n2\n)\n113.06\nThis variable should be treated as read-only by the user.  Don’t explicitly\nassign a value to it — you would create an independent local variable with the\nsame name masking the built-in variable with its magic behavior.\nIn addition to\nint\nand\nfloat\n, Python supports other types of\nnumbers, such as\nDecimal\nand\nFraction\n.\nPython also has built-in support for\ncomplex numbers\n,\nand uses the\nj\nor\nJ\nsuffix to indicate the imaginary part\n(e.g.\n3+5j\n).\n3.1.2.\nText\n¶\nPython can manipulate text (represented by type\nstr\n, so-called\n“strings”) as well as numbers.  This includes characters “\n!\n”, words\n“\nrabbit\n”, names “\nParis\n”, sentences “\nGot\nyour\nback.\n”, etc.\n“\nYay!\n:)\n”. They can be enclosed in single quotes (\n'...'\n) or double\nquotes (\n\"...\"\n) with the same result\n[\n2\n]\n.\n>>>\n'spam eggs'\n# single quotes\n'spam eggs'\n>>>\n\"Paris rabbit got your back :)! Yay!\"\n# double quotes\n'Paris rabbit got your back :)! Yay!'\n>>>\n'1975'\n# digits and numerals enclosed in quotes are also strings\n'1975'\nTo quote a quote, we need to “escape” it, by preceding it with\n\\\n.\nAlternatively, we can use the other type of quotation marks:\n>>>\n'doesn\n\\'\nt'\n# use \\' to escape the single quote...\n\"doesn't\"\n>>>\n\"doesn't\"\n# ...or use double quotes instead\n\"doesn't\"\n>>>\n'\"Yes,\" they said.'\n'\"Yes,\" they said.'\n>>>\n\"\n\\\"\nYes,\n\\\"\nthey said.\"\n'\"Yes,\" they said.'\n>>>\n'\"Isn\n\\'\nt,\" they said.'\n'\"Isn\\'t,\" they said.'\nIn the Python shell, the string definition and output string can look\ndifferent.  The\nprint()\nfunction produces a more readable output, by\nomitting the enclosing quotes and by printing escaped and special characters:\n>>>\ns\n=\n'First line.\n\\n\nSecond line.'\n# \\n means newline\n>>>\ns\n# without print(), special characters are included in the string\n'First line.\\nSecond line.'\n>>>\nprint\n(\ns\n)\n# with print(), special characters are interpreted, so \\n produces new line\nFirst line.\nSecond line.\nIf you don’t want characters prefaced by\n\\\nto be interpreted as\nspecial characters, you can use\nraw strings\nby adding an\nr\nbefore\nthe first quote:\n>>>\nprint\n(\n'C:\\some\n\\n\name'\n)\n# here \\n means newline!\nC:\\some\name\n>>>\nprint\n(\nr\n'C:\\some\\name'\n)\n# note the r before the quote\nC:\\some\\name\nThere is one subtle aspect to raw strings: a raw string may not end in\nan odd number of\n\\\ncharacters; see\nthe FAQ entry\nfor more information\nand workarounds.\nString literals can span multiple lines.  One way is using triple-quotes:\n\"\"\"...\"\"\"\nor\n'''...'''\n.  End-of-line characters are automatically\nincluded in the string, but it’s possible to prevent this by adding a\n\\\nat\nthe end of the line.  In the following example, the initial newline is not\nincluded:\n>>>\nprint\n(\n\"\"\"\n\\\n...\nUsage: thingy [OPTIONS]\n...\n-h                        Display this usage message\n...\n-H hostname               Hostname to connect to\n...\n\"\"\"\n)\nUsage: thingy [OPTIONS]\n-h                        Display this usage message\n-H hostname               Hostname to connect to\n>>>\nStrings can be concatenated (glued together) with the\n+\noperator, and\nrepeated with\n*\n:\n>>>\n# 3 times 'un', followed by 'ium'\n>>>\n3\n*\n'un'\n+\n'ium'\n'unununium'\nTwo or more\nstring literals\n(i.e. the ones enclosed between quotes) next\nto each other are automatically concatenated.\n>>>\n'Py'\n'thon'\n'Python'\nThis feature is particularly useful when you want to break long strings:\n>>>\ntext\n=\n(\n'Put several strings within parentheses '\n...\n'to have them joined together.'\n)\n>>>\ntext\n'Put several strings within parentheses to have them joined together.'\nThis only works with two literals though, not with variables or expressions:\n>>>\nprefix\n=\n'Py'\n>>>\nprefix\n'thon'\n# can't concatenate a variable and a string literal\nFile\n\"<stdin>\"\n, line\n1\nprefix\n'thon'\n^^^^^^\nSyntaxError\n:\ninvalid syntax\n>>>\n(\n'un'\n*\n3\n)\n'ium'\nFile\n\"<stdin>\"\n, line\n1\n(\n'un'\n*\n3\n)\n'ium'\n^^^^^\nSyntaxError\n:\ninvalid syntax\nIf you want to concatenate variables or a variable and a literal, use\n+\n:\n>>>\nprefix\n+\n'thon'\n'Python'\nStrings can be\nindexed\n(subscripted), with the first character having index 0.\nThere is no separate character type; a character is simply a string of size\none:\n>>>\nword\n=\n'Python'\n>>>\nword\n[\n0\n]\n# character in position 0\n'P'\n>>>\nword\n[\n5\n]\n# character in position 5\n'n'\nIndices may also be negative numbers, to start counting from the right:\n>>>\nword\n[\n-\n1\n]\n# last character\n'n'\n>>>\nword\n[\n-\n2\n]\n# second-last character\n'o'\n>>>\nword\n[\n-\n6\n]\n'P'\nNote that since -0 is the same as 0, negative indices start from -1.\nIn addition to indexing,\nslicing\nis also supported.  While indexing is used\nto obtain individual characters,\nslicing\nallows you to obtain a substring:\n>>>\nword\n[\n0\n:\n2\n]\n# characters from position 0 (included) to 2 (excluded)\n'Py'\n>>>\nword\n[\n2\n:\n5\n]\n# characters from position 2 (included) to 5 (excluded)\n'tho'\nSlice indices have useful defaults; an omitted first index defaults to zero, an\nomitted second index defaults to the size of the string being sliced.\n>>>\nword\n[:\n2\n]\n# character from the beginning to position 2 (excluded)\n'Py'\n>>>\nword\n[\n4\n:]\n# characters from position 4 (included) to the end\n'on'\n>>>\nword\n[\n-\n2\n:]\n# characters from the second-last (included) to the end\n'on'\nNote how the start is always included, and the end always excluded.  This\nmakes sure that\ns[:i]\n+\ns[i:]\nis always equal to\ns\n:\n>>>\nword\n[:\n2\n]\n+\nword\n[\n2\n:]\n'Python'\n>>>\nword\n[:\n4\n]\n+\nword\n[\n4\n:]\n'Python'\nOne way to remember how slices work is to think of the indices as pointing\nbetween\ncharacters, with the left edge of the first character numbered 0.\nThen the right edge of the last character of a string of\nn\ncharacters has\nindex\nn\n, for example:\n+---+---+---+---+---+---+\n|\nP\n|\ny\n|\nt\n|\nh\n|\no\n|\nn\n|\n+---+---+---+---+---+---+\n0\n1\n2\n3\n4\n5\n6\n-\n6\n-\n5\n-\n4\n-\n3\n-\n2\n-\n1\nThe first row of numbers gives the position of the indices 0…6 in the string;\nthe second row gives the corresponding negative indices. The slice from\ni\nto\nj\nconsists of all characters between the edges labeled\ni\nand\nj\n,\nrespectively.\nFor non-negative indices, the length of a slice is the difference of the\nindices, if both are within bounds.  For example, the length of\nword[1:3]\nis\n2.\nAttempting to use an index that is too large will result in an error:\n>>>\nword\n[\n42\n]\n# the word only has 6 characters\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nIndexError\n:\nstring index out of range\nHowever, out of range slice indexes are handled gracefully when used for\nslicing:\n>>>\nword\n[\n4\n:\n42\n]\n'on'\n>>>\nword\n[\n42\n:]\n''\nPython strings cannot be changed — they are\nimmutable\n.\nTherefore, assigning to an indexed position in the string results in an error:\n>>>\nword\n[\n0\n]\n=\n'J'\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nTypeError\n:\n'str' object does not support item assignment\n>>>\nword\n[\n2\n:]\n=\n'py'\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nTypeError\n:\n'str' object does not support item assignment\nIf you need a different string, you should create a new one:\n>>>\n'J'\n+\nword\n[\n1\n:]\n'Jython'\n>>>\nword\n[:\n2\n]\n+\n'py'\n'Pypy'\nThe built-in function\nlen()\nreturns the length of a string:\n>>>\ns\n=\n'supercalifragilisticexpialidocious'\n>>>\nlen\n(\ns\n)\n34\nSee also\nText Sequence Type — str\nStrings are examples of\nsequence types\n, and support the common\noperations supported by such types.\nString Methods\nStrings support a large number of methods for\nbasic transformations and searching.\nf-strings\nString literals that have embedded expressions.\nFormat String Syntax\nInformation about string formatting with\nstr.format()\n.\nprintf-style String Formatting\nThe old formatting operations invoked when strings are\nthe left operand of the\n%\noperator are described in more detail here.\n3.1.3.\nLists\n¶\nPython knows a number of\ncompound\ndata types, used to group together other\nvalues.  The most versatile is the\nlist\n, which can be written as a list of\ncomma-separated values (items) between square brackets.  Lists might contain\nitems of different types, but usually the items all have the same type.\n>>>\nsquares\n=\n[\n1\n,\n4\n,\n9\n,\n16\n,\n25\n]\n>>>\nsquares\n[1, 4, 9, 16, 25]\nLike strings (and all other built-in\nsequence\ntypes), lists can be\nindexed and sliced:\n>>>\nsquares\n[\n0\n]\n# indexing returns the item\n1\n>>>\nsquares\n[\n-\n1\n]\n25\n>>>\nsquares\n[\n-\n3\n:]\n# slicing returns a new list\n[9, 16, 25]\nLists also support operations like concatenation:\n>>>\nsquares\n+\n[\n36\n,\n49\n,\n64\n,\n81\n,\n100\n]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nUnlike strings, which are\nimmutable\n, lists are a\nmutable\ntype, i.e. it is possible to change their content:\n>>>\ncubes\n=\n[\n1\n,\n8\n,\n27\n,\n65\n,\n125\n]\n# something's wrong here\n>>>\n4\n**\n3\n# the cube of 4 is 64, not 65!\n64\n>>>\ncubes\n[\n3\n]\n=\n64\n# replace the wrong value\n>>>\ncubes\n[1, 8, 27, 64, 125]\nYou can also add new items at the end of the list, by using\nthe\nlist.append()\nmethod\n(we will see more about methods later):\n>>>\ncubes\n.\nappend\n(\n216\n)\n# add the cube of 6\n>>>\ncubes\n.\nappend\n(\n7\n**\n3\n)\n# and the cube of 7\n>>>\ncubes\n[1, 8, 27, 64, 125, 216, 343]\nSimple assignment in Python never copies data. When you assign a list\nto a variable, the variable refers to the\nexisting list\n.\nAny changes you make to the list through one variable will be seen\nthrough all other variables that refer to it.:\n>>>\nrgb\n=\n[\n\"Red\"\n,\n\"Green\"\n,\n\"Blue\"\n]\n>>>\nrgba\n=\nrgb\n>>>\nid\n(\nrgb\n)\n==\nid\n(\nrgba\n)\n# they reference the same object\nTrue\n>>>\nrgba\n.\nappend\n(\n\"Alph\"\n)\n>>>\nrgb\n[\"Red\", \"Green\", \"Blue\", \"Alph\"]\nAll slice operations return a new list containing the requested elements.  This\nmeans that the following slice returns a\nshallow copy\nof the list:\n>>>\ncorrect_rgba\n=\nrgba\n[:]\n>>>\ncorrect_rgba\n[\n-\n1\n]\n=\n\"Alpha\"\n>>>\ncorrect_rgba\n[\"Red\", \"Green\", \"Blue\", \"Alpha\"]\n>>>\nrgba\n[\"Red\", \"Green\", \"Blue\", \"Alph\"]\nAssignment to slices is also possible, and this can even change the size of the\nlist or clear it entirely:\n>>>\nletters\n=\n[\n'a'\n,\n'b'\n,\n'c'\n,\n'd'\n,\n'e'\n,\n'f'\n,\n'g'\n]\n>>>\nletters\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n>>>\n# replace some values\n>>>\nletters\n[\n2\n:\n5\n]\n=\n[\n'C'\n,\n'D'\n,\n'E'\n]\n>>>\nletters\n['a', 'b', 'C', 'D', 'E', 'f', 'g']\n>>>\n# now remove them\n>>>\nletters\n[\n2\n:\n5\n]\n=\n[]\n>>>\nletters\n['a', 'b', 'f', 'g']\n>>>\n# clear the list by replacing all the elements with an empty list\n>>>\nletters\n[:]\n=\n[]\n>>>\nletters\n[]\nThe built-in function\nlen()\nalso applies to lists:\n>>>\nletters\n=\n[\n'a'\n,\n'b'\n,\n'c'\n,\n'd'\n]\n>>>\nlen\n(\nletters\n)\n4\nIt is possible to nest lists (create lists containing other lists), for\nexample:\n>>>\na\n=\n[\n'a'\n,\n'b'\n,\n'c'\n]\n>>>\nn\n=\n[\n1\n,\n2\n,\n3\n]\n>>>\nx\n=\n[\na\n,\nn\n]\n>>>\nx\n[['a', 'b', 'c'], [1, 2, 3]]\n>>>\nx\n[\n0\n]\n['a', 'b', 'c']\n>>>\nx\n[\n0\n][\n1\n]\n'b'\n3.2.\nFirst Steps Towards Programming\n¶\nOf course, we can use Python for more complicated tasks than adding two and two\ntogether.  For instance, we can write an initial sub-sequence of the\nFibonacci series\nas follows:\n>>>\n# Fibonacci series:\n>>>\n# the sum of two elements defines the next\n>>>\na\n,\nb\n=\n0\n,\n1\n>>>\nwhile\na\n<\n10\n:\n...\nprint\n(\na\n)\n...\na\n,\nb\n=\nb\n,\na\n+\nb\n...\n0\n1\n1\n2\n3\n5\n8\nThis example introduces several new features.\nThe first line contains a\nmultiple assignment\n: the variables\na\nand\nb\nsimultaneously get the new values 0 and 1.  On the last line this is used again,\ndemonstrating that the expressions on the right-hand side are all evaluated\nfirst before any of the assignments take place.  The right-hand side expressions\nare evaluated  from the left to the right.\nThe\nwhile\nloop executes as long as the condition (here:\na\n<\n10\n)\nremains true.  In Python, like in C, any non-zero integer value is true; zero is\nfalse.  The condition may also be a string or list value, in fact any sequence;\nanything with a non-zero length is true, empty sequences are false.  The test\nused in the example is a simple comparison.  The standard comparison operators\nare written the same as in C:\n<\n(less than),\n>\n(greater than),\n==\n(equal to),\n<=\n(less than or equal to),\n>=\n(greater than or equal to)\nand\n!=\n(not equal to).\nThe\nbody\nof the loop is\nindented\n: indentation is Python’s way of grouping\nstatements.  At the interactive prompt, you have to type a tab or space(s) for\neach indented line.  In practice you will prepare more complicated input\nfor Python with a text editor; all decent text editors have an auto-indent\nfacility.  When a compound statement is entered interactively, it must be\nfollowed by a blank line to indicate completion (since the parser cannot\nguess when you have typed the last line).  Note that each line within a basic\nblock must be indented by the same amount.\nThe\nprint()\nfunction writes the value of the argument(s) it is given.\nIt differs from just writing the expression you want to write (as we did\nearlier in the calculator examples) in the way it handles multiple arguments,\nfloating-point quantities, and strings.  Strings are printed without quotes,\nand a space is inserted between items, so you can format things nicely, like\nthis:\n>>>\ni\n=\n256\n*\n256\n>>>\nprint\n(\n'The value of i is'\n,\ni\n)\nThe value of i is 65536\nThe keyword argument\nend\ncan be used to avoid the newline after the output,\nor end the output with a different string:\n>>>\na\n,\nb\n=\n0\n,\n1\n>>>\nwhile\na\n<\n1000\n:\n...\nprint\n(\na\n,\nend\n=\n','\n)\n...\na\n,\nb\n=\nb\n,\na\n+\nb\n...\n0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,\nFootnotes\n[\n1\n]\nSince\n**\nhas higher precedence than\n-\n,\n-3**2\nwill be\ninterpreted as\n-(3**2)\nand thus result in\n-9\n.  To avoid this\nand get\n9\n, you can use\n(-3)**2\n.\n[\n2\n]\nUnlike other languages, special characters such as\n\\n\nhave the\nsame meaning with both single (\n'...'\n) and double (\n\"...\"\n) quotes.\nThe only difference between the two is that within single quotes you don’t\nneed to escape\n\"\n(but you have to escape\n\\'\n) and vice versa.\nTable of Contents\n3. An Informal Introduction to Python\n3.1. Using Python as a Calculator\n3.1.1. Numbers\n3.1.2. Text\n3.1.3. Lists\n3.2. First Steps Towards Programming\nPrevious topic\n2.\nUsing the Python Interpreter\nNext topic\n4.\nMore Control Flow Tools\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Tutorial\n»\n3.\nAn Informal Introduction to Python\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/tutorial/introduction.html",
    "source": "python",
    "doc_type": "tutorial",
    "scraped_at": 12345.6903509
  },
  {
    "title": "Porting Extension Modules to Python 3¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython HOWTOs\n»\nPorting Extension Modules to Python 3\n|\nTheme\nAuto\nLight\nDark\n|\nPorting Extension Modules to Python 3\n¶\nWe recommend the following resources for porting extension modules to Python 3:\nThe\nMigrating C extensions\nchapter from\nSupporting Python 3: An in-depth guide\n, a book on moving from Python 2\nto Python 3 in general, guides the reader through porting an extension\nmodule.\nThe\nPorting guide\nfrom the\npy3c\nproject provides opinionated\nsuggestions with supporting code.\nRecommended third party tools\noffer abstractions over\nthe Python’s C API.\nExtensions generally need to be re-written to use one of them,\nbut the library then handles differences between various Python\nversions and implementations.\nPrevious topic\nPython HOWTOs\nNext topic\nCurses Programming with Python\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython HOWTOs\n»\nPorting Extension Modules to Python 3\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/howto/cporting.html",
    "source": "python",
    "doc_type": "howto",
    "scraped_at": 12345.8080682
  },
  {
    "title": "importlib — The implementation of import¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nImporting Modules\n»\nimportlib\n— The implementation of\nimport\n|\nTheme\nAuto\nLight\nDark\n|\nimportlib\n— The implementation of\nimport\n¶\nAdded in version 3.1.\nSource code:\nLib/importlib/__init__.py\nIntroduction\n¶\nThe purpose of the\nimportlib\npackage is three-fold.\nOne is to provide the\nimplementation of the\nimport\nstatement (and thus, by extension, the\n__import__()\nfunction) in Python source code. This provides an\nimplementation of\nimport\nwhich is portable to any Python\ninterpreter. This also provides an implementation which is easier to\ncomprehend than one implemented in a programming language other than Python.\nTwo, the components to implement\nimport\nare exposed in this\npackage, making it easier for users to create their own custom objects (known\ngenerically as an\nimporter\n) to participate in the import process.\nThree, the package contains modules exposing additional functionality for\nmanaging aspects of Python packages:\nimportlib.metadata\npresents access to metadata from third-party\ndistributions.\nimportlib.resources\nprovides routines for accessing non-code\n“resources” from Python packages.\nSee also\nThe import statement\nThe language reference for the\nimport\nstatement.\nPackages specification\nOriginal specification of packages. Some semantics have changed since\nthe writing of this document (e.g. redirecting based on\nNone\nin\nsys.modules\n).\nThe\n__import__()\nfunction\nThe\nimport\nstatement is syntactic sugar for this function.\nThe initialization of the sys.path module search path\nThe initialization of\nsys.path\n.\nPEP 235\nImport on Case-Insensitive Platforms\nPEP 263\nDefining Python Source Code Encodings\nPEP 302\nNew Import Hooks\nPEP 328\nImports: Multi-Line and Absolute/Relative\nPEP 366\nMain module explicit relative imports\nPEP 420\nImplicit namespace packages\nPEP 451\nA ModuleSpec Type for the Import System\nPEP 488\nElimination of PYO files\nPEP 489\nMulti-phase extension module initialization\nPEP 552\nDeterministic pycs\nPEP 3120\nUsing UTF-8 as the Default Source Encoding\nPEP 3147\nPYC Repository Directories\nFunctions\n¶\nimportlib.\n__import__\n(\nname\n,\nglobals\n=\nNone\n,\nlocals\n=\nNone\n,\nfromlist\n=\n()\n,\nlevel\n=\n0\n)\n¶\nAn implementation of the built-in\n__import__()\nfunction.\nNote\nProgrammatic importing of modules should use\nimport_module()\ninstead of this function.\nimportlib.\nimport_module\n(\nname\n,\npackage\n=\nNone\n)\n¶\nImport a module. The\nname\nargument specifies what module to\nimport in absolute or relative terms\n(e.g. either\npkg.mod\nor\n..mod\n). If the name is\nspecified in relative terms, then the\npackage\nargument must be set to\nthe name of the package which is to act as the anchor for resolving the\npackage name (e.g.\nimport_module('..mod',\n'pkg.subpkg')\nwill import\npkg.mod\n).\nThe\nimport_module()\nfunction acts as a simplifying wrapper around\nimportlib.__import__()\n. This means all semantics of the function are\nderived from\nimportlib.__import__()\n. The most important difference\nbetween these two functions is that\nimport_module()\nreturns the\nspecified package or module (e.g.\npkg.mod\n), while\n__import__()\nreturns the top-level package or module (e.g.\npkg\n).\nIf you are dynamically importing a module that was created since the\ninterpreter began execution (e.g., created a Python source file), you may\nneed to call\ninvalidate_caches()\nin order for the new module to be\nnoticed by the import system.\nChanged in version 3.3:\nParent packages are automatically imported.\nimportlib.\ninvalidate_caches\n(\n)\n¶\nInvalidate the internal caches of finders stored at\nsys.meta_path\n. If a finder implements\ninvalidate_caches()\nthen it\nwill be called to perform the invalidation.  This function should be called\nif any modules are created/installed while your program is running to\nguarantee all finders will notice the new module’s existence.\nAdded in version 3.3.\nChanged in version 3.10:\nNamespace packages created/installed in a different\nsys.path\nlocation after the same namespace was already imported are noticed.\nimportlib.\nreload\n(\nmodule\n)\n¶\nReload a previously imported\nmodule\n.  The argument must be a module object,\nso it must have been successfully imported before.  This is useful if you\nhave edited the module source file using an external editor and want to try\nout the new version without leaving the Python interpreter.  The return value\nis the module object (which can be different if re-importing causes a\ndifferent object to be placed in\nsys.modules\n).\nWhen\nreload()\nis executed:\nPython module’s code is recompiled and the module-level code re-executed,\ndefining a new set of objects which are bound to names in the module’s\ndictionary by reusing the\nloader\nwhich originally loaded the\nmodule.  The\ninit\nfunction of extension modules is not called a second\ntime.\nAs with all other objects in Python the old objects are only reclaimed\nafter their reference counts drop to zero.\nThe names in the module namespace are updated to point to any new or\nchanged objects.\nOther references to the old objects (such as names external to the module) are\nnot rebound to refer to the new objects and must be updated in each namespace\nwhere they occur if that is desired.\nThere are a number of other caveats:\nWhen a module is reloaded, its dictionary (containing the module’s global\nvariables) is retained.  Redefinitions of names will override the old\ndefinitions, so this is generally not a problem.  If the new version of a\nmodule does not define a name that was defined by the old version, the old\ndefinition remains.  This feature can be used to the module’s advantage if it\nmaintains a global table or cache of objects — with a\ntry\nstatement it can test for the table’s presence and skip its initialization if\ndesired:\ntry\n:\ncache\nexcept\nNameError\n:\ncache\n=\n{}\nIt is generally not very useful to reload built-in or dynamically loaded\nmodules.  Reloading\nsys\n,\n__main__\n,\nbuiltins\nand other\nkey modules is not recommended.  In many cases extension modules are not\ndesigned to be initialized more than once, and may fail in arbitrary ways\nwhen reloaded.\nIf a module imports objects from another module using\nfrom\n…\nimport\n…, calling\nreload()\nfor the other module does not\nredefine the objects imported from it — one way around this is to\nre-execute the\nfrom\nstatement, another is to use\nimport\nand qualified names (\nmodule.name\n) instead.\nIf a module instantiates instances of a class, reloading the module that\ndefines the class does not affect the method definitions of the instances —\nthey continue to use the old class definition.  The same is true for derived\nclasses.\nAdded in version 3.4.\nChanged in version 3.7:\nModuleNotFoundError\nis raised when the module being reloaded lacks\na\nModuleSpec\n.\nWarning\nThis function is not thread-safe. Calling it from multiple threads can result\nin unexpected behavior. It’s recommended to use the\nthreading.Lock\nor other synchronization primitives for thread-safe module reloading.\nimportlib.abc\n– Abstract base classes related to import\n¶\nSource code:\nLib/importlib/abc.py\nThe\nimportlib.abc\nmodule contains all of the core abstract base classes\nused by\nimport\n. Some subclasses of the core abstract base classes\nare also provided to help in implementing the core ABCs.\nABC hierarchy:\nobject\n+--\nMetaPathFinder\n+--\nPathEntryFinder\n+--\nLoader\n+--\nResourceLoader\n--------+\n+--\nInspectLoader\n|\n+--\nExecutionLoader\n--+\n+--\nFileLoader\n+--\nSourceLoader\nclass\nimportlib.abc.\nMetaPathFinder\n¶\nAn abstract base class representing a\nmeta path finder\n.\nAdded in version 3.3.\nChanged in version 3.10:\nNo longer a subclass of\nFinder\n.\nfind_spec\n(\nfullname\n,\npath\n,\ntarget\n=\nNone\n)\n¶\nAn abstract method for finding a\nspec\nfor\nthe specified module.  If this is a top-level import,\npath\nwill\nbe\nNone\n.  Otherwise, this is a search for a subpackage or\nmodule and\npath\nwill be the value of\n__path__\nfrom the\nparent package. If a spec cannot be found,\nNone\nis returned.\nWhen passed in,\ntarget\nis a module object that the finder may\nuse to make a more educated guess about what spec to return.\nimportlib.util.spec_from_loader()\nmay be useful for implementing\nconcrete\nMetaPathFinders\n.\nAdded in version 3.4.\ninvalidate_caches\n(\n)\n¶\nAn optional method which, when called, should invalidate any internal\ncache used by the finder. Used by\nimportlib.invalidate_caches()\nwhen invalidating the caches of all finders on\nsys.meta_path\n.\nChanged in version 3.4:\nReturns\nNone\nwhen called instead of\nNotImplemented\n.\nclass\nimportlib.abc.\nPathEntryFinder\n¶\nAn abstract base class representing a\npath entry finder\n.  Though\nit bears some similarities to\nMetaPathFinder\n,\nPathEntryFinder\nis meant for use only within the path-based import subsystem provided\nby\nimportlib.machinery.PathFinder\n.\nAdded in version 3.3.\nChanged in version 3.10:\nNo longer a subclass of\nFinder\n.\nfind_spec\n(\nfullname\n,\ntarget\n=\nNone\n)\n¶\nAn abstract method for finding a\nspec\nfor\nthe specified module.  The finder will search for the module only\nwithin the\npath entry\nto which it is assigned.  If a spec\ncannot be found,\nNone\nis returned.  When passed in,\ntarget\nis a module object that the finder may use to make a more educated\nguess about what spec to return.\nimportlib.util.spec_from_loader()\nmay be useful for implementing concrete\nPathEntryFinders\n.\nAdded in version 3.4.\ninvalidate_caches\n(\n)\n¶\nAn optional method which, when called, should invalidate any internal\ncache used by the finder. Used by\nimportlib.machinery.PathFinder.invalidate_caches()\nwhen invalidating the caches of all cached finders.\nclass\nimportlib.abc.\nLoader\n¶\nAn abstract base class for a\nloader\n.\nSee\nPEP 302\nfor the exact definition for a loader.\nLoaders that wish to support resource reading should implement a\nget_resource_reader()\nmethod as specified by\nimportlib.resources.abc.ResourceReader\n.\nChanged in version 3.7:\nIntroduced the optional\nget_resource_reader()\nmethod.\ncreate_module\n(\nspec\n)\n¶\nA method that returns the module object to use when\nimporting a module.  This method may return\nNone\n,\nindicating that default module creation semantics should take place.\nAdded in version 3.4.\nChanged in version 3.6:\nThis method is no longer optional when\nexec_module()\nis defined.\nexec_module\n(\nmodule\n)\n¶\nAn abstract method that executes the module in its own namespace\nwhen a module is imported or reloaded.  The module should already\nbe initialized when\nexec_module()\nis called.  When this method exists,\ncreate_module()\nmust be defined.\nAdded in version 3.4.\nChanged in version 3.6:\ncreate_module()\nmust also be defined.\nload_module\n(\nfullname\n)\n¶\nA legacy method for loading a module.  If the module cannot be\nloaded,\nImportError\nis raised, otherwise the loaded module is\nreturned.\nIf the requested module already exists in\nsys.modules\n, that\nmodule should be used and reloaded.\nOtherwise the loader should create a new module and insert it into\nsys.modules\nbefore any loading begins, to prevent recursion\nfrom the import.  If the loader inserted a module and the load fails, it\nmust be removed by the loader from\nsys.modules\n; modules already\nin\nsys.modules\nbefore the loader began execution should be left\nalone.\nThe loader should set several attributes on the module\n(note that some of these attributes can change when a module is\nreloaded):\nmodule.__name__\nmodule.__file__\nmodule.__cached__\n(deprecated)\nmodule.__path__\nmodule.__package__\n(deprecated)\nmodule.__loader__\n(deprecated)\nWhen\nexec_module()\nis available then backwards-compatible\nfunctionality is provided.\nChanged in version 3.4:\nRaise\nImportError\nwhen called instead of\nNotImplementedError\n.  Functionality provided when\nexec_module()\nis available.\nDeprecated since version 3.4, will be removed in version 3.15:\nThe recommended API for loading a module is\nexec_module()\n(and\ncreate_module()\n).  Loaders should implement it instead of\nload_module()\n.  The import machinery takes care of all the\nother responsibilities of\nload_module()\nwhen\nexec_module()\nis implemented.\nclass\nimportlib.abc.\nResourceLoader\n¶\nSuperseded by TraversableResources\nAn abstract base class for a\nloader\nwhich implements the optional\nPEP 302\nprotocol for loading arbitrary resources from the storage\nback-end.\nDeprecated since version 3.7:\nThis ABC is deprecated in favour of supporting resource loading\nthrough\nimportlib.resources.abc.TraversableResources\n.\nabstractmethod\nget_data\n(\npath\n)\n¶\nAn abstract method to return the bytes for the data located at\npath\n.\nLoaders that have a file-like storage back-end\nthat allows storing arbitrary data\ncan implement this abstract method to give direct access\nto the data stored.\nOSError\nis to be raised if the\npath\ncannot\nbe found. The\npath\nis expected to be constructed using a module’s\n__file__\nattribute or an item from a package’s\n__path__\n.\nChanged in version 3.4:\nRaises\nOSError\ninstead of\nNotImplementedError\n.\nclass\nimportlib.abc.\nInspectLoader\n¶\nAn abstract base class for a\nloader\nwhich implements the optional\nPEP 302\nprotocol for loaders that inspect modules.\nget_code\n(\nfullname\n)\n¶\nReturn the code object for a module, or\nNone\nif the module does not\nhave a code object (as would be the case, for example, for a built-in\nmodule).  Raise an\nImportError\nif loader cannot find the\nrequested module.\nNote\nWhile the method has a default implementation, it is suggested that\nit be overridden if possible for performance.\nChanged in version 3.4:\nNo longer abstract and a concrete implementation is provided.\nabstractmethod\nget_source\n(\nfullname\n)\n¶\nAn abstract method to return the source of a module. It is returned as\na text string using\nuniversal newlines\n, translating all\nrecognized line separators into\n'\\n'\ncharacters.  Returns\nNone\nif no source is available (e.g. a built-in module). Raises\nImportError\nif the loader cannot find the module specified.\nChanged in version 3.4:\nRaises\nImportError\ninstead of\nNotImplementedError\n.\nis_package\n(\nfullname\n)\n¶\nAn optional method to return a true value if the module is a package, a\nfalse value otherwise.\nImportError\nis raised if the\nloader\ncannot find the module.\nChanged in version 3.4:\nRaises\nImportError\ninstead of\nNotImplementedError\n.\nstatic\nsource_to_code\n(\ndata\n,\npath\n=\n'<string>'\n)\n¶\nCreate a code object from Python source.\nThe\ndata\nargument can be whatever the\ncompile()\nfunction\nsupports (i.e. string or bytes). The\npath\nargument should be\nthe “path” to where the source code originated from, which can be an\nabstract concept (e.g. location in a zip file).\nWith the subsequent code object one can execute it in a module by\nrunning\nexec(code,\nmodule.__dict__)\n.\nAdded in version 3.4.\nChanged in version 3.5:\nMade the method static.\nexec_module\n(\nmodule\n)\n¶\nImplementation of\nLoader.exec_module()\n.\nAdded in version 3.4.\nload_module\n(\nfullname\n)\n¶\nImplementation of\nLoader.load_module()\n.\nDeprecated since version 3.4, will be removed in version 3.15:\nuse\nexec_module()\ninstead.\nclass\nimportlib.abc.\nExecutionLoader\n¶\nAn abstract base class which inherits from\nInspectLoader\nthat,\nwhen implemented, helps a module to be executed as a script. The ABC\nrepresents an optional\nPEP 302\nprotocol.\nabstractmethod\nget_filename\n(\nfullname\n)\n¶\nAn abstract method that is to return the value of\n__file__\nfor the specified module. If no path is\navailable,\nImportError\nis raised.\nIf source code is available, then the method should return the path to\nthe source file, regardless of whether a bytecode was used to load the\nmodule.\nChanged in version 3.4:\nRaises\nImportError\ninstead of\nNotImplementedError\n.\nclass\nimportlib.abc.\nFileLoader\n(\nfullname\n,\npath\n)\n¶\nAn abstract base class which inherits from\nResourceLoader\nand\nExecutionLoader\n, providing concrete implementations of\nResourceLoader.get_data()\nand\nExecutionLoader.get_filename()\n.\nThe\nfullname\nargument is a fully resolved name of the module the loader is\nto handle. The\npath\nargument is the path to the file for the module.\nAdded in version 3.3.\nname\n¶\nThe name of the module the loader can handle.\npath\n¶\nPath to the file of the module.\nload_module\n(\nfullname\n)\n¶\nCalls super’s\nload_module()\n.\nDeprecated since version 3.4, will be removed in version 3.15:\nUse\nLoader.exec_module()\ninstead.\nabstractmethod\nget_filename\n(\nfullname\n)\n¶\nReturns\npath\n.\nabstractmethod\nget_data\n(\npath\n)\n¶\nReads\npath\nas a binary file and returns the bytes from it.\nclass\nimportlib.abc.\nSourceLoader\n¶\nAn abstract base class for implementing source (and optionally bytecode)\nfile loading. The class inherits from both\nResourceLoader\nand\nExecutionLoader\n, requiring the implementation of:\nResourceLoader.get_data()\nExecutionLoader.get_filename()\nShould only return the path to the source file; sourceless\nloading is not supported.\nThe abstract methods defined by this class are to add optional bytecode\nfile support. Not implementing these optional methods (or causing them to\nraise\nNotImplementedError\n) causes the loader to\nonly work with source code. Implementing the methods allows the loader to\nwork with source\nand\nbytecode files; it does not allow for\nsourceless\nloading where only bytecode is provided.  Bytecode files are an\noptimization to speed up loading by removing the parsing step of Python’s\ncompiler, and so no bytecode-specific API is exposed.\npath_stats\n(\npath\n)\n¶\nOptional abstract method which returns a\ndict\ncontaining\nmetadata about the specified path.  Supported dictionary keys are:\n'mtime'\n(mandatory): an integer or floating-point number\nrepresenting the modification time of the source code;\n'size'\n(optional): the size in bytes of the source code.\nAny other keys in the dictionary are ignored, to allow for future\nextensions. If the path cannot be handled,\nOSError\nis raised.\nAdded in version 3.3.\nChanged in version 3.4:\nRaise\nOSError\ninstead of\nNotImplementedError\n.\npath_mtime\n(\npath\n)\n¶\nOptional abstract method which returns the modification time for the\nspecified path.\nDeprecated since version 3.3:\nThis method is deprecated in favour of\npath_stats()\n.  You don’t\nhave to implement it, but it is still available for compatibility\npurposes. Raise\nOSError\nif the path cannot be handled.\nChanged in version 3.4:\nRaise\nOSError\ninstead of\nNotImplementedError\n.\nset_data\n(\npath\n,\ndata\n)\n¶\nOptional abstract method which writes the specified bytes to a file\npath. Any intermediate directories which do not exist are to be created\nautomatically.\nWhen writing to the path fails because the path is read-only\n(\nerrno.EACCES\n/\nPermissionError\n), do not propagate the\nexception.\nChanged in version 3.4:\nNo longer raises\nNotImplementedError\nwhen called.\nget_code\n(\nfullname\n)\n¶\nConcrete implementation of\nInspectLoader.get_code()\n.\nexec_module\n(\nmodule\n)\n¶\nConcrete implementation of\nLoader.exec_module()\n.\nAdded in version 3.4.\nload_module\n(\nfullname\n)\n¶\nConcrete implementation of\nLoader.load_module()\n.\nDeprecated since version 3.4, will be removed in version 3.15:\nUse\nexec_module()\ninstead.\nget_source\n(\nfullname\n)\n¶\nConcrete implementation of\nInspectLoader.get_source()\n.\nis_package\n(\nfullname\n)\n¶\nConcrete implementation of\nInspectLoader.is_package()\n. A module\nis determined to be a package if its file path (as provided by\nExecutionLoader.get_filename()\n) is a file named\n__init__\nwhen the file extension is removed\nand\nthe module name\nitself does not end in\n__init__\n.\nclass\nimportlib.abc.\nResourceReader\n¶\nSuperseded by TraversableResources\nAn\nabstract base class\nto provide the ability to read\nresources\n.\nFrom the perspective of this ABC, a\nresource\nis a binary\nartifact that is shipped within a package. Typically this is\nsomething like a data file that lives next to the\n__init__.py\nfile of the package. The purpose of this class is to help abstract\nout the accessing of such data files so that it does not matter if\nthe package and its data file(s) are stored e.g. in a zip file\nversus on the file system.\nFor any of methods of this class, a\nresource\nargument is\nexpected to be a\npath-like object\nwhich represents\nconceptually just a file name. This means that no subdirectory\npaths should be included in the\nresource\nargument. This is\nbecause the location of the package the reader is for, acts as the\n“directory”. Hence the metaphor for directories and file\nnames is packages and resources, respectively. This is also why\ninstances of this class are expected to directly correlate to\na specific package (instead of potentially representing multiple\npackages or a module).\nLoaders that wish to support resource reading are expected to\nprovide a method called\nget_resource_reader(fullname)\nwhich\nreturns an object implementing this ABC’s interface. If the module\nspecified by fullname is not a package, this method should return\nNone\n. An object compatible with this ABC should only be\nreturned when the specified module is a package.\nAdded in version 3.7.\nDeprecated since version 3.12, will be removed in version 3.14:\nUse\nimportlib.resources.abc.TraversableResources\ninstead.\nabstractmethod\nopen_resource\n(\nresource\n)\n¶\nReturns an opened,\nfile-like object\nfor binary reading\nof the\nresource\n.\nIf the resource cannot be found,\nFileNotFoundError\nis\nraised.\nabstractmethod\nresource_path\n(\nresource\n)\n¶\nReturns the file system path to the\nresource\n.\nIf the resource does not concretely exist on the file system,\nraise\nFileNotFoundError\n.\nabstractmethod\nis_resource\n(\nname\n)\n¶\nReturns\nTrue\nif the named\nname\nis considered a resource.\nFileNotFoundError\nis raised if\nname\ndoes not exist.\nabstractmethod\ncontents\n(\n)\n¶\nReturns an\niterable\nof strings over the contents of\nthe package. Do note that it is not required that all names\nreturned by the iterator be actual resources, e.g. it is\nacceptable to return names for which\nis_resource()\nwould\nbe false.\nAllowing non-resource names to be returned is to allow for\nsituations where how a package and its resources are stored\nare known a priori and the non-resource names would be useful.\nFor instance, returning subdirectory names is allowed so that\nwhen it is known that the package and resources are stored on\nthe file system then those subdirectory names can be used\ndirectly.\nThe abstract method returns an iterable of no items.\nclass\nimportlib.abc.\nTraversable\n¶\nAn object with a subset of\npathlib.Path\nmethods suitable for\ntraversing directories and opening files.\nFor a representation of the object on the file-system, use\nimportlib.resources.as_file()\n.\nAdded in version 3.9.\nDeprecated since version 3.12, will be removed in version 3.14:\nUse\nimportlib.resources.abc.Traversable\ninstead.\nname\n¶\nAbstract. The base name of this object without any parent references.\nabstractmethod\niterdir\n(\n)\n¶\nYield\nTraversable\nobjects in\nself\n.\nabstractmethod\nis_dir\n(\n)\n¶\nReturn\nTrue\nif\nself\nis a directory.\nabstractmethod\nis_file\n(\n)\n¶\nReturn\nTrue\nif\nself\nis a file.\nabstractmethod\njoinpath\n(\nchild\n)\n¶\nReturn Traversable child in\nself\n.\nabstractmethod\n__truediv__\n(\nchild\n)\n¶\nReturn\nTraversable\nchild in\nself\n.\nabstractmethod\nopen\n(\nmode\n=\n'r'\n,\n*\nargs\n,\n**\nkwargs\n)\n¶\nmode\nmay be ‘r’ or ‘rb’ to open as text or binary. Return a handle\nsuitable for reading (same as\npathlib.Path.open\n).\nWhen opening as text, accepts encoding parameters such as those\naccepted by\nio.TextIOWrapper\n.\nread_bytes\n(\n)\n¶\nRead contents of\nself\nas bytes.\nread_text\n(\nencoding\n=\nNone\n)\n¶\nRead contents of\nself\nas text.\nclass\nimportlib.abc.\nTraversableResources\n¶\nAn abstract base class for resource readers capable of serving\nthe\nimportlib.resources.files()\ninterface. Subclasses\nimportlib.resources.abc.ResourceReader\nand provides\nconcrete implementations of the\nimportlib.resources.abc.ResourceReader\n’s\nabstract methods. Therefore, any loader supplying\nimportlib.abc.TraversableResources\nalso supplies ResourceReader.\nLoaders that wish to support resource reading are expected to\nimplement this interface.\nAdded in version 3.9.\nDeprecated since version 3.12, will be removed in version 3.14:\nUse\nimportlib.resources.abc.TraversableResources\ninstead.\nabstractmethod\nfiles\n(\n)\n¶\nReturns a\nimportlib.resources.abc.Traversable\nobject for the loaded\npackage.\nimportlib.machinery\n– Importers and path hooks\n¶\nSource code:\nLib/importlib/machinery.py\nThis module contains the various objects that help\nimport\nfind and load modules.\nimportlib.machinery.\nSOURCE_SUFFIXES\n¶\nA list of strings representing the recognized file suffixes for source\nmodules.\nAdded in version 3.3.\nimportlib.machinery.\nDEBUG_BYTECODE_SUFFIXES\n¶\nA list of strings representing the file suffixes for non-optimized bytecode\nmodules.\nAdded in version 3.3.\nDeprecated since version 3.5:\nUse\nBYTECODE_SUFFIXES\ninstead.\nimportlib.machinery.\nOPTIMIZED_BYTECODE_SUFFIXES\n¶\nA list of strings representing the file suffixes for optimized bytecode\nmodules.\nAdded in version 3.3.\nDeprecated since version 3.5:\nUse\nBYTECODE_SUFFIXES\ninstead.\nimportlib.machinery.\nBYTECODE_SUFFIXES\n¶\nA list of strings representing the recognized file suffixes for bytecode\nmodules (including the leading dot).\nAdded in version 3.3.\nChanged in version 3.5:\nThe value is no longer dependent on\n__debug__\n.\nimportlib.machinery.\nEXTENSION_SUFFIXES\n¶\nA list of strings representing the recognized file suffixes for\nextension modules.\nAdded in version 3.3.\nimportlib.machinery.\nall_suffixes\n(\n)\n¶\nReturns a combined list of strings representing all file suffixes for\nmodules recognized by the standard import machinery. This is a\nhelper for code which simply needs to know if a filesystem path\npotentially refers to a module without needing any details on the kind\nof module (for example,\ninspect.getmodulename()\n).\nAdded in version 3.3.\nclass\nimportlib.machinery.\nBuiltinImporter\n¶\nAn\nimporter\nfor built-in modules. All known built-in modules are\nlisted in\nsys.builtin_module_names\n. This class implements the\nimportlib.abc.MetaPathFinder\nand\nimportlib.abc.InspectLoader\nABCs.\nOnly class methods are defined by this class to alleviate the need for\ninstantiation.\nChanged in version 3.5:\nAs part of\nPEP 489\n, the builtin importer now implements\nLoader.create_module()\nand\nLoader.exec_module()\nclass\nimportlib.machinery.\nFrozenImporter\n¶\nAn\nimporter\nfor frozen modules. This class implements the\nimportlib.abc.MetaPathFinder\nand\nimportlib.abc.InspectLoader\nABCs.\nOnly class methods are defined by this class to alleviate the need for\ninstantiation.\nChanged in version 3.4:\nGained\ncreate_module()\nand\nexec_module()\nmethods.\nclass\nimportlib.machinery.\nWindowsRegistryFinder\n¶\nFinder\nfor modules declared in the Windows registry.  This class\nimplements the\nimportlib.abc.MetaPathFinder\nABC.\nOnly class methods are defined by this class to alleviate the need for\ninstantiation.\nAdded in version 3.3.\nDeprecated since version 3.6:\nUse\nsite\nconfiguration instead. Future versions of Python may\nnot enable this finder by default.\nclass\nimportlib.machinery.\nPathFinder\n¶\nA\nFinder\nfor\nsys.path\nand package\n__path__\nattributes.\nThis class implements the\nimportlib.abc.MetaPathFinder\nABC.\nOnly class methods are defined by this class to alleviate the need for\ninstantiation.\nclassmethod\nfind_spec\n(\nfullname\n,\npath\n=\nNone\n,\ntarget\n=\nNone\n)\n¶\nClass method that attempts to find a\nspec\nfor the module specified by\nfullname\non\nsys.path\nor, if\ndefined, on\npath\n. For each path entry that is searched,\nsys.path_importer_cache\nis checked. If a non-false object\nis found then it is used as the\npath entry finder\nto look\nfor the module being searched for. If no entry is found in\nsys.path_importer_cache\n, then\nsys.path_hooks\nis\nsearched for a finder for the path entry and, if found, is stored\nin\nsys.path_importer_cache\nalong with being queried about\nthe module. If no finder is ever found then\nNone\nis both\nstored in the cache and returned.\nAdded in version 3.4.\nChanged in version 3.5:\nIf the current working directory – represented by an empty string –\nis no longer valid then\nNone\nis returned but no value is cached\nin\nsys.path_importer_cache\n.\nclassmethod\ninvalidate_caches\n(\n)\n¶\nCalls\nimportlib.abc.PathEntryFinder.invalidate_caches()\non all\nfinders stored in\nsys.path_importer_cache\nthat define the method.\nOtherwise entries in\nsys.path_importer_cache\nset to\nNone\nare\ndeleted.\nChanged in version 3.7:\nEntries of\nNone\nin\nsys.path_importer_cache\nare deleted.\nChanged in version 3.4:\nCalls objects in\nsys.path_hooks\nwith the current working\ndirectory for\n''\n(i.e. the empty string).\nclass\nimportlib.machinery.\nFileFinder\n(\npath\n,\n*\nloader_details\n)\n¶\nA concrete implementation of\nimportlib.abc.PathEntryFinder\nwhich\ncaches results from the file system.\nThe\npath\nargument is the directory for which the finder is in charge of\nsearching.\nThe\nloader_details\nargument is a variable number of 2-item tuples each\ncontaining a loader and a sequence of file suffixes the loader recognizes.\nThe loaders are expected to be callables which accept two arguments of\nthe module’s name and the path to the file found.\nThe finder will cache the directory contents as necessary, making stat calls\nfor each module search to verify the cache is not outdated. Because cache\nstaleness relies upon the granularity of the operating system’s state\ninformation of the file system, there is a potential race condition of\nsearching for a module, creating a new file, and then searching for the\nmodule the new file represents. If the operations happen fast enough to fit\nwithin the granularity of stat calls, then the module search will fail. To\nprevent this from happening, when you create a module dynamically, make sure\nto call\nimportlib.invalidate_caches()\n.\nAdded in version 3.3.\npath\n¶\nThe path the finder will search in.\nfind_spec\n(\nfullname\n,\ntarget\n=\nNone\n)\n¶\nAttempt to find the spec to handle\nfullname\nwithin\npath\n.\nAdded in version 3.4.\ninvalidate_caches\n(\n)\n¶\nClear out the internal cache.\nclassmethod\npath_hook\n(\n*\nloader_details\n)\n¶\nA class method which returns a closure for use on\nsys.path_hooks\n.\nAn instance of\nFileFinder\nis returned by the closure using the\npath argument given to the closure directly and\nloader_details\nindirectly.\nIf the argument to the closure is not an existing directory,\nImportError\nis raised.\nclass\nimportlib.machinery.\nSourceFileLoader\n(\nfullname\n,\npath\n)\n¶\nA concrete implementation of\nimportlib.abc.SourceLoader\nby\nsubclassing\nimportlib.abc.FileLoader\nand providing some concrete\nimplementations of other methods.\nAdded in version 3.3.\nname\n¶\nThe name of the module that this loader will handle.\npath\n¶\nThe path to the source file.\nis_package\n(\nfullname\n)\n¶\nReturn\nTrue\nif\npath\nappears to be for a package.\npath_stats\n(\npath\n)\n¶\nConcrete implementation of\nimportlib.abc.SourceLoader.path_stats()\n.\nset_data\n(\npath\n,\ndata\n)\n¶\nConcrete implementation of\nimportlib.abc.SourceLoader.set_data()\n.\nload_module\n(\nname\n=\nNone\n)\n¶\nConcrete implementation of\nimportlib.abc.Loader.load_module()\nwhere\nspecifying the name of the module to load is optional.\nDeprecated since version 3.6, will be removed in version 3.15:\nUse\nimportlib.abc.Loader.exec_module()\ninstead.\nclass\nimportlib.machinery.\nSourcelessFileLoader\n(\nfullname\n,\npath\n)\n¶\nA concrete implementation of\nimportlib.abc.FileLoader\nwhich can\nimport bytecode files (i.e. no source code files exist).\nPlease note that direct use of bytecode files (and thus not source code\nfiles) inhibits your modules from being usable by all Python\nimplementations or new versions of Python which change the bytecode\nformat.\nAdded in version 3.3.\nname\n¶\nThe name of the module the loader will handle.\npath\n¶\nThe path to the bytecode file.\nis_package\n(\nfullname\n)\n¶\nDetermines if the module is a package based on\npath\n.\nget_code\n(\nfullname\n)\n¶\nReturns the code object for\nname\ncreated from\npath\n.\nget_source\n(\nfullname\n)\n¶\nReturns\nNone\nas bytecode files have no source when this loader is\nused.\nload_module\n(\nname\n=\nNone\n)\n¶\nConcrete implementation of\nimportlib.abc.Loader.load_module()\nwhere\nspecifying the name of the module to load is optional.\nDeprecated since version 3.6, will be removed in version 3.15:\nUse\nimportlib.abc.Loader.exec_module()\ninstead.\nclass\nimportlib.machinery.\nExtensionFileLoader\n(\nfullname\n,\npath\n)\n¶\nA concrete implementation of\nimportlib.abc.ExecutionLoader\nfor\nextension modules.\nThe\nfullname\nargument specifies the name of the module the loader is to\nsupport. The\npath\nargument is the path to the extension module’s file.\nNote that, by default, importing an extension module will fail\nin subinterpreters if it doesn’t implement multi-phase init\n(see\nPEP 489\n), even if it would otherwise import successfully.\nAdded in version 3.3.\nChanged in version 3.12:\nMulti-phase init is now required for use in subinterpreters.\nname\n¶\nName of the module the loader supports.\npath\n¶\nPath to the extension module.\ncreate_module\n(\nspec\n)\n¶\nCreates the module object from the given specification in accordance\nwith\nPEP 489\n.\nAdded in version 3.5.\nexec_module\n(\nmodule\n)\n¶\nInitializes the given module object in accordance with\nPEP 489\n.\nAdded in version 3.5.\nis_package\n(\nfullname\n)\n¶\nReturns\nTrue\nif the file path points to a package’s\n__init__\nmodule based on\nEXTENSION_SUFFIXES\n.\nget_code\n(\nfullname\n)\n¶\nReturns\nNone\nas extension modules lack a code object.\nget_source\n(\nfullname\n)\n¶\nReturns\nNone\nas extension modules do not have source code.\nget_filename\n(\nfullname\n)\n¶\nReturns\npath\n.\nAdded in version 3.4.\nclass\nimportlib.machinery.\nNamespaceLoader\n(\nname\n,\npath\n,\npath_finder\n)\n¶\nA concrete implementation of\nimportlib.abc.InspectLoader\nfor\nnamespace packages.  This is an alias for a private class and is only made\npublic for introspecting the\n__loader__\nattribute on namespace\npackages:\n>>>\nfrom\nimportlib.machinery\nimport\nNamespaceLoader\n>>>\nimport\nmy_namespace\n>>>\nisinstance\n(\nmy_namespace\n.\n__loader__\n,\nNamespaceLoader\n)\nTrue\n>>>\nimport\nimportlib.abc\n>>>\nisinstance\n(\nmy_namespace\n.\n__loader__\n,\nimportlib\n.\nabc\n.\nLoader\n)\nTrue\nAdded in version 3.11.\nclass\nimportlib.machinery.\nModuleSpec\n(\nname\n,\nloader\n,\n*\n,\norigin\n=\nNone\n,\nloader_state\n=\nNone\n,\nis_package\n=\nNone\n)\n¶\nA specification for a module’s import-system-related state.  This is\ntypically exposed as the module’s\n__spec__\nattribute.  Many\nof these attributes are also available directly on a module: for example,\nmodule.__spec__.origin\n==\nmodule.__file__\n.  Note, however, that\nwhile the\nvalues\nare usually equivalent, they can differ since there is\nno synchronization between the two objects.  For example, it is possible to\nupdate the module’s\n__file__\nat runtime and this will not be\nautomatically reflected in the module’s\n__spec__.origin\n, and vice versa.\nAdded in version 3.4.\nname\n¶\nThe module’s fully qualified name (see\nmodule.__name__\n).\nThe\nfinder\nshould always set this attribute to a non-empty string.\nloader\n¶\nThe\nloader\nused to load the module (see\nmodule.__loader__\n).\nThe\nfinder\nshould always set this attribute.\norigin\n¶\nThe location the\nloader\nshould use to load the module\n(see\nmodule.__file__\n).\nFor example, for modules loaded from a\n.py\nfile this is the filename.\nThe\nfinder\nshould always set this attribute to a meaningful value\nfor the\nloader\nto use.  In the uncommon case that there is not one\n(like for namespace packages), it should be set to\nNone\n.\nsubmodule_search_locations\n¶\nA (possibly empty)\nsequence\nof strings enumerating the locations\nin which a package’s submodules will be found\n(see\nmodule.__path__\n). Most of the time there will only be a\nsingle directory in this list.\nThe\nfinder\nshould set this attribute to a sequence, even an empty\none, to indicate\nto the import system that the module is a package.  It should be set to\nNone\nfor\nnon-package modules.  It is set automatically later to a special object for\nnamespace packages.\nloader_state\n¶\nThe\nfinder\nmay set this attribute to an object containing additional,\nmodule-specific data to use when loading the module.  Otherwise it should be\nset to\nNone\n.\ncached\n¶\nThe filename of a compiled version of the module’s code\n(see\nmodule.__cached__\n).\nThe\nfinder\nshould always set this attribute but it may be\nNone\nfor modules that do not need compiled code stored.\nparent\n¶\n(Read-only) The fully qualified name of the package the module is in (or the\nempty string for a top-level module).\nSee\nmodule.__package__\n.\nIf the module is a package then this is the same as\nname\n.\nhas_location\n¶\nTrue\nif the spec’s\norigin\nrefers to a loadable location,\nFalse\notherwise.  This value impacts how\norigin\nis interpreted\nand how the module’s\n__file__\nis populated.\nclass\nimportlib.machinery.\nAppleFrameworkLoader\n(\nname\n,\npath\n)\n¶\nA specialization of\nimportlib.machinery.ExtensionFileLoader\nthat\nis able to load extension modules in Framework format.\nFor compatibility with the iOS App Store,\nall\nbinary modules in an iOS app\nmust be dynamic libraries, contained in a framework with appropriate\nmetadata, stored in the\nFrameworks\nfolder of the packaged app. There can\nbe only a single binary per framework, and there can be no executable binary\nmaterial outside the Frameworks folder.\nTo accommodate this requirement, when running on iOS, extension module\nbinaries are\nnot\npackaged as\n.so\nfiles on\nsys.path\n, but as\nindividual standalone frameworks. To discover those frameworks, this loader\nis be registered against the\n.fwork\nfile extension, with a\n.fwork\nfile acting as a placeholder in the original location of the binary on\nsys.path\n. The\n.fwork\nfile contains the path of the actual binary in\nthe\nFrameworks\nfolder, relative to the app bundle. To allow for\nresolving a framework-packaged binary back to the original location, the\nframework is expected to contain a\n.origin\nfile that contains the\nlocation of the\n.fwork\nfile, relative to the app bundle.\nFor example, consider the case of an import\nfrom\nfoo.bar\nimport\n_whiz\n,\nwhere\n_whiz\nis implemented with the binary module\nsources/foo/bar/_whiz.abi3.so\n, with\nsources\nbeing the location\nregistered on\nsys.path\n, relative to the application bundle. This module\nmust\nbe distributed as\nFrameworks/foo.bar._whiz.framework/foo.bar._whiz\n(creating the framework\nname from the full import path of the module), with an\nInfo.plist\nfile\nin the\n.framework\ndirectory identifying the binary as a framework. The\nfoo.bar._whiz\nmodule would be represented in the original location with\na\nsources/foo/bar/_whiz.abi3.fwork\nmarker file, containing the path\nFrameworks/foo.bar._whiz/foo.bar._whiz\n. The framework would also contain\nFrameworks/foo.bar._whiz.framework/foo.bar._whiz.origin\n, containing the\npath to the\n.fwork\nfile.\nWhen a module is loaded with this loader, the\n__file__\nfor the module\nwill report as the location of the\n.fwork\nfile. This allows code to use\nthe\n__file__\nof a  module as an anchor for file system traveral.\nHowever, the spec origin will reference the location of the\nactual\nbinary\nin the\n.framework\nfolder.\nThe Xcode project building the app is responsible for converting any\n.so\nfiles from wherever they exist in the\nPYTHONPATH\ninto frameworks in the\nFrameworks\nfolder (including stripping extensions from the module file,\nthe addition of framework metadata, and signing the resulting framework),\nand creating the\n.fwork\nand\n.origin\nfiles. This will usually be done\nwith a build step in the Xcode project; see the iOS documentation for\ndetails on how to construct this build step.\nAdded in version 3.13.\nAvailability\n: iOS.\nname\n¶\nName of the module the loader supports.\npath\n¶\nPath to the\n.fwork\nfile for the extension module.\nimportlib.util\n– Utility code for importers\n¶\nSource code:\nLib/importlib/util.py\nThis module contains the various objects that help in the construction of\nan\nimporter\n.\nimportlib.util.\nMAGIC_NUMBER\n¶\nThe bytes which represent the bytecode version number. If you need help with\nloading/writing bytecode then consider\nimportlib.abc.SourceLoader\n.\nAdded in version 3.4.\nimportlib.util.\ncache_from_source\n(\npath\n,\ndebug_override\n=\nNone\n,\n*\n,\noptimization\n=\nNone\n)\n¶\nReturn the\nPEP 3147\n/\nPEP 488\npath to the byte-compiled file associated\nwith the source\npath\n.  For example, if\npath\nis\n/foo/bar/baz.py\nthe return\nvalue would be\n/foo/bar/__pycache__/baz.cpython-32.pyc\nfor Python 3.2.\nThe\ncpython-32\nstring comes from the current magic tag (see\nget_tag()\n; if\nsys.implementation.cache_tag\nis not defined then\nNotImplementedError\nwill be raised).\nThe\noptimization\nparameter is used to specify the optimization level of the\nbytecode file. An empty string represents no optimization, so\n/foo/bar/baz.py\nwith an\noptimization\nof\n''\nwill result in a\nbytecode path of\n/foo/bar/__pycache__/baz.cpython-32.pyc\n.\nNone\ncauses\nthe interpreter’s optimization level to be used. Any other value’s string\nrepresentation is used, so\n/foo/bar/baz.py\nwith an\noptimization\nof\n2\nwill lead to the bytecode path of\n/foo/bar/__pycache__/baz.cpython-32.opt-2.pyc\n. The string representation\nof\noptimization\ncan only be alphanumeric, else\nValueError\nis raised.\nThe\ndebug_override\nparameter is deprecated and can be used to override\nthe system’s value for\n__debug__\n. A\nTrue\nvalue is the equivalent of\nsetting\noptimization\nto the empty string. A\nFalse\nvalue is the same as\nsetting\noptimization\nto\n1\n. If both\ndebug_override\nan\noptimization\nare not\nNone\nthen\nTypeError\nis raised.\nAdded in version 3.4.\nChanged in version 3.5:\nThe\noptimization\nparameter was added and the\ndebug_override\nparameter\nwas deprecated.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nimportlib.util.\nsource_from_cache\n(\npath\n)\n¶\nGiven the\npath\nto a\nPEP 3147\nfile name, return the associated source code\nfile path.  For example, if\npath\nis\n/foo/bar/__pycache__/baz.cpython-32.pyc\nthe returned path would be\n/foo/bar/baz.py\n.\npath\nneed not exist, however if it does not conform\nto\nPEP 3147\nor\nPEP 488\nformat, a\nValueError\nis raised. If\nsys.implementation.cache_tag\nis not defined,\nNotImplementedError\nis raised.\nAdded in version 3.4.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nimportlib.util.\ndecode_source\n(\nsource_bytes\n)\n¶\nDecode the given bytes representing source code and return it as a string\nwith universal newlines (as required by\nimportlib.abc.InspectLoader.get_source()\n).\nAdded in version 3.4.\nimportlib.util.\nresolve_name\n(\nname\n,\npackage\n)\n¶\nResolve a relative module name to an absolute one.\nIf\nname\nhas no leading dots, then\nname\nis simply returned. This\nallows for usage such as\nimportlib.util.resolve_name('sys',\n__spec__.parent)\nwithout doing a\ncheck to see if the\npackage\nargument is needed.\nImportError\nis raised if\nname\nis a relative module name but\npackage\nis a false value (e.g.\nNone\nor the empty string).\nImportError\nis also raised if a relative name would escape its\ncontaining package (e.g. requesting\n..bacon\nfrom within the\nspam\npackage).\nAdded in version 3.3.\nChanged in version 3.9:\nTo improve consistency with import statements, raise\nImportError\ninstead of\nValueError\nfor invalid relative\nimport attempts.\nimportlib.util.\nfind_spec\n(\nname\n,\npackage\n=\nNone\n)\n¶\nFind the\nspec\nfor a module, optionally relative to\nthe specified\npackage\nname. If the module is in\nsys.modules\n,\nthen\nsys.modules[name].__spec__\nis returned (unless the spec would be\nNone\nor is not set, in which case\nValueError\nis raised).\nOtherwise a search using\nsys.meta_path\nis done.\nNone\nis\nreturned if no spec is found.\nIf\nname\nis for a submodule (contains a dot), the parent module is\nautomatically imported.\nname\nand\npackage\nwork the same as for\nimport_module()\n.\nAdded in version 3.4.\nChanged in version 3.7:\nRaises\nModuleNotFoundError\ninstead of\nAttributeError\nif\npackage\nis in fact not a package (i.e. lacks a\n__path__\nattribute).\nimportlib.util.\nmodule_from_spec\n(\nspec\n)\n¶\nCreate a new module based on\nspec\nand\nspec.loader.create_module\n.\nIf\nspec.loader.create_module\ndoes not return\nNone\n, then any pre-existing attributes will not be reset.\nAlso, no\nAttributeError\nwill be raised if triggered while accessing\nspec\nor setting an attribute on the module.\nThis function is preferred over using\ntypes.ModuleType\nto create a\nnew module as\nspec\nis used to set as many import-controlled attributes on\nthe module as possible.\nAdded in version 3.5.\nimportlib.util.\nspec_from_loader\n(\nname\n,\nloader\n,\n*\n,\norigin\n=\nNone\n,\nis_package\n=\nNone\n)\n¶\nA factory function for creating a\nModuleSpec\ninstance based on a loader.  The parameters have the same meaning as they do\nfor ModuleSpec.  The function uses available\nloader\nAPIs, such as\nInspectLoader.is_package()\n, to fill in any missing\ninformation on the spec.\nAdded in version 3.4.\nimportlib.util.\nspec_from_file_location\n(\nname\n,\nlocation\n,\n*\n,\nloader\n=\nNone\n,\nsubmodule_search_locations\n=\nNone\n)\n¶\nA factory function for creating a\nModuleSpec\ninstance based on the path to a file.  Missing information will be filled in\non the spec by making use of loader APIs and by the implication that the\nmodule will be file-based.\nAdded in version 3.4.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nimportlib.util.\nsource_hash\n(\nsource_bytes\n)\n¶\nReturn the hash of\nsource_bytes\nas bytes. A hash-based\n.pyc\nfile embeds\nthe\nsource_hash()\nof the corresponding source file’s contents in its\nheader.\nAdded in version 3.7.\nimportlib.util.\n_incompatible_extension_module_restrictions\n(\n*\n,\ndisable_check\n)\n¶\nA context manager that can temporarily skip the compatibility check\nfor extension modules.  By default the check is enabled and will fail\nwhen a single-phase init module is imported in a subinterpreter.\nIt will also fail for a multi-phase init module that doesn’t\nexplicitly support a per-interpreter GIL, when imported\nin an interpreter with its own GIL.\nNote that this function is meant to accommodate an unusual case;\none which is likely to eventually go away.  There’s is a pretty good\nchance this is not what you were looking for.\nYou can get the same effect as this function by implementing the\nbasic interface of multi-phase init (\nPEP 489\n) and lying about\nsupport for multiple interpreters (or per-interpreter GIL).\nWarning\nUsing this function to disable the check can lead to\nunexpected behavior and even crashes.  It should only be used during\nextension module development.\nAdded in version 3.12.\nclass\nimportlib.util.\nLazyLoader\n(\nloader\n)\n¶\nA class which postpones the execution of the loader of a module until the\nmodule has an attribute accessed.\nThis class\nonly\nworks with loaders that define\nexec_module()\nas control over what module type\nis used for the module is required. For those same reasons, the loader’s\ncreate_module()\nmethod must return\nNone\nor a\ntype for which its\n__class__\nattribute can be mutated along with not\nusing\nslots\n. Finally, modules which substitute the object\nplaced into\nsys.modules\nwill not work as there is no way to properly\nreplace the module references throughout the interpreter safely;\nValueError\nis raised if such a substitution is detected.\nNote\nFor projects where startup time is critical, this class allows for\npotentially minimizing the cost of loading a module if it is never used.\nFor projects where startup time is not essential then use of this class is\nheavily\ndiscouraged due to error messages created during loading being\npostponed and thus occurring out of context.\nAdded in version 3.5.\nChanged in version 3.6:\nBegan calling\ncreate_module()\n, removing the\ncompatibility warning for\nimportlib.machinery.BuiltinImporter\nand\nimportlib.machinery.ExtensionFileLoader\n.\nclassmethod\nfactory\n(\nloader\n)\n¶\nA class method which returns a callable that creates a lazy loader. This\nis meant to be used in situations where the loader is passed by class\ninstead of by instance.\nsuffixes\n=\nimportlib\n.\nmachinery\n.\nSOURCE_SUFFIXES\nloader\n=\nimportlib\n.\nmachinery\n.\nSourceFileLoader\nlazy_loader\n=\nimportlib\n.\nutil\n.\nLazyLoader\n.\nfactory\n(\nloader\n)\nfinder\n=\nimportlib\n.\nmachinery\n.\nFileFinder\n(\npath\n,\n(\nlazy_loader\n,\nsuffixes\n))\nExamples\n¶\nImporting programmatically\n¶\nTo programmatically import a module, use\nimportlib.import_module()\n.\nimport\nimportlib\nitertools\n=\nimportlib\n.\nimport_module\n(\n'itertools'\n)\nChecking if a module can be imported\n¶\nIf you need to find out if a module can be imported without actually doing the\nimport, then you should use\nimportlib.util.find_spec()\n.\nNote that if\nname\nis a submodule (contains a dot),\nimportlib.util.find_spec()\nwill import the parent module.\nimport\nimportlib.util\nimport\nsys\n# For illustrative purposes.\nname\n=\n'itertools'\nif\nname\nin\nsys\n.\nmodules\n:\nprint\n(\nf\n\"\n{\nname\n!r}\nalready in sys.modules\"\n)\nelif\n(\nspec\n:=\nimportlib\n.\nutil\n.\nfind_spec\n(\nname\n))\nis\nnot\nNone\n:\n# If you chose to perform the actual import ...\nmodule\n=\nimportlib\n.\nutil\n.\nmodule_from_spec\n(\nspec\n)\nsys\n.\nmodules\n[\nname\n]\n=\nmodule\nspec\n.\nloader\n.\nexec_module\n(\nmodule\n)\nprint\n(\nf\n\"\n{\nname\n!r}\nhas been imported\"\n)\nelse\n:\nprint\n(\nf\n\"can't find the\n{\nname\n!r}\nmodule\"\n)\nImporting a source file directly\n¶\nThis recipe should be used with caution: it is an approximation of an import\nstatement where the file path is specified directly, rather than\nsys.path\nbeing searched. Alternatives should first be considered first,\nsuch as modifying\nsys.path\nwhen a proper module is required, or using\nrunpy.run_path()\nwhen the global namespace resulting from running a Python\nfile is appropriate.\nTo import a Python source file directly from a path, use the following recipe:\nimport\nimportlib.util\nimport\nsys\ndef\nimport_from_path\n(\nmodule_name\n,\nfile_path\n):\nspec\n=\nimportlib\n.\nutil\n.\nspec_from_file_location\n(\nmodule_name\n,\nfile_path\n)\nmodule\n=\nimportlib\n.\nutil\n.\nmodule_from_spec\n(\nspec\n)\nsys\n.\nmodules\n[\nmodule_name\n]\n=\nmodule\nspec\n.\nloader\n.\nexec_module\n(\nmodule\n)\nreturn\nmodule\n# For illustrative purposes only (use of `json` is arbitrary).\nimport\njson\nfile_path\n=\njson\n.\n__file__\nmodule_name\n=\njson\n.\n__name__\n# Similar outcome as `import json`.\njson\n=\nimport_from_path\n(\nmodule_name\n,\nfile_path\n)\nImplementing lazy imports\n¶\nThe example below shows how to implement lazy imports:\n>>>\nimport\nimportlib.util\n>>>\nimport\nsys\n>>>\ndef\nlazy_import\n(\nname\n):\n...\nspec\n=\nimportlib\n.\nutil\n.\nfind_spec\n(\nname\n)\n...\nloader\n=\nimportlib\n.\nutil\n.\nLazyLoader\n(\nspec\n.\nloader\n)\n...\nspec\n.\nloader\n=\nloader\n...\nmodule\n=\nimportlib\n.\nutil\n.\nmodule_from_spec\n(\nspec\n)\n...\nsys\n.\nmodules\n[\nname\n]\n=\nmodule\n...\nloader\n.\nexec_module\n(\nmodule\n)\n...\nreturn\nmodule\n...\n>>>\nlazy_typing\n=\nlazy_import\n(\n\"typing\"\n)\n>>>\n#lazy_typing is a real module object,\n>>>\n#but it is not loaded in memory yet.\n>>>\nlazy_typing\n.\nTYPE_CHECKING\nFalse\nSetting up an importer\n¶\nFor deep customizations of import, you typically want to implement an\nimporter\n. This means managing both the\nfinder\nand\nloader\nside of things. For finders there are two flavours to choose from depending on\nyour needs: a\nmeta path finder\nor a\npath entry finder\n. The\nformer is what you would put on\nsys.meta_path\nwhile the latter is what\nyou create using a\npath entry hook\non\nsys.path_hooks\nwhich works\nwith\nsys.path\nentries to potentially create a finder. This example will\nshow you how to register your own importers so that import will use them (for\ncreating an importer for yourself, read the documentation for the appropriate\nclasses defined within this package):\nimport\nimportlib.machinery\nimport\nsys\n# For illustrative purposes only.\nSpamMetaPathFinder\n=\nimportlib\n.\nmachinery\n.\nPathFinder\nSpamPathEntryFinder\n=\nimportlib\n.\nmachinery\n.\nFileFinder\nloader_details\n=\n(\nimportlib\n.\nmachinery\n.\nSourceFileLoader\n,\nimportlib\n.\nmachinery\n.\nSOURCE_SUFFIXES\n)\n# Setting up a meta path finder.\n# Make sure to put the finder in the proper location in the list in terms of\n# priority.\nsys\n.\nmeta_path\n.\nappend\n(\nSpamMetaPathFinder\n)\n# Setting up a path entry finder.\n# Make sure to put the path hook in the proper location in the list in terms\n# of priority.\nsys\n.\npath_hooks\n.\nappend\n(\nSpamPathEntryFinder\n.\npath_hook\n(\nloader_details\n))\nApproximating\nimportlib.import_module()\n¶\nImport itself is implemented in Python code, making it possible to\nexpose most of the import machinery through importlib. The following\nhelps illustrate the various APIs that importlib exposes by providing an\napproximate implementation of\nimportlib.import_module()\n:\nimport\nimportlib.util\nimport\nsys\ndef\nimport_module\n(\nname\n,\npackage\n=\nNone\n):\n\"\"\"An approximate implementation of import.\"\"\"\nabsolute_name\n=\nimportlib\n.\nutil\n.\nresolve_name\n(\nname\n,\npackage\n)\ntry\n:\nreturn\nsys\n.\nmodules\n[\nabsolute_name\n]\nexcept\nKeyError\n:\npass\npath\n=\nNone\nif\n'.'\nin\nabsolute_name\n:\nparent_name\n,\n_\n,\nchild_name\n=\nabsolute_name\n.\nrpartition\n(\n'.'\n)\nparent_module\n=\nimport_module\n(\nparent_name\n)\npath\n=\nparent_module\n.\n__spec__\n.\nsubmodule_search_locations\nfor\nfinder\nin\nsys\n.\nmeta_path\n:\nspec\n=\nfinder\n.\nfind_spec\n(\nabsolute_name\n,\npath\n)\nif\nspec\nis\nnot\nNone\n:\nbreak\nelse\n:\nmsg\n=\nf\n'No module named\n{\nabsolute_name\n!r}\n'\nraise\nModuleNotFoundError\n(\nmsg\n,\nname\n=\nabsolute_name\n)\nmodule\n=\nimportlib\n.\nutil\n.\nmodule_from_spec\n(\nspec\n)\nsys\n.\nmodules\n[\nabsolute_name\n]\n=\nmodule\nspec\n.\nloader\n.\nexec_module\n(\nmodule\n)\nif\npath\nis\nnot\nNone\n:\nsetattr\n(\nparent_module\n,\nchild_name\n,\nmodule\n)\nreturn\nmodule\nTable of Contents\nimportlib\n— The implementation of\nimport\nIntroduction\nFunctions\nimportlib.abc\n– Abstract base classes related to import\nimportlib.machinery\n– Importers and path hooks\nimportlib.util\n– Utility code for importers\nExamples\nImporting programmatically\nChecking if a module can be imported\nImporting a source file directly\nImplementing lazy imports\nSetting up an importer\nApproximating\nimportlib.import_module()\nPrevious topic\nrunpy\n— Locating and executing Python modules\nNext topic\nimportlib.resources\n– Package resource reading, opening and access\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nImporting Modules\n»\nimportlib\n— The implementation of\nimport\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/importlib.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12346.0531247
  },
  {
    "title": "History and License¶",
    "content": "Navigation\nindex\nmodules\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nHistory and License\n|\nTheme\nAuto\nLight\nDark\n|\nHistory and License\n¶\nHistory of the software\n¶\nPython was created in the early 1990s by Guido van Rossum at Stichting\nMathematisch Centrum (CWI, see\nhttps://www.cwi.nl\n) in the Netherlands as a\nsuccessor of a language called ABC.  Guido remains Python’s principal author,\nalthough it includes many contributions from others.\nIn 1995, Guido continued his work on Python at the Corporation for National\nResearch Initiatives (CNRI, see\nhttps://www.cnri.reston.va.us\n) in Reston,\nVirginia where he released several versions of the software.\nIn May 2000, Guido and the Python core development team moved to BeOpen.com to\nform the BeOpen PythonLabs team.  In October of the same year, the PythonLabs\nteam moved to Digital Creations, which became\nZope Corporation.  In 2001, the Python Software Foundation (PSF, see\nhttps://www.python.org/psf/\n) was formed, a non-profit organization created\nspecifically to own Python-related Intellectual Property.  Zope Corporation was a\nsponsoring member of the PSF.\nAll Python releases are Open Source (see\nhttps://opensource.org\nfor the Open\nSource Definition). Historically, most, but not all, Python releases have also\nbeen GPL-compatible; the table below summarizes the various releases.\nRelease\nDerived from\nYear\nOwner\nGPL-compatible? (1)\n0.9.0 thru 1.2\nn/a\n1991-1995\nCWI\nyes\n1.3 thru 1.5.2\n1.2\n1995-1999\nCNRI\nyes\n1.6\n1.5.2\n2000\nCNRI\nno\n2.0\n1.6\n2000\nBeOpen.com\nno\n1.6.1\n1.6\n2001\nCNRI\nyes (2)\n2.1\n2.0+1.6.1\n2001\nPSF\nno\n2.0.1\n2.0+1.6.1\n2001\nPSF\nyes\n2.1.1\n2.1+2.0.1\n2001\nPSF\nyes\n2.1.2\n2.1.1\n2002\nPSF\nyes\n2.1.3\n2.1.2\n2002\nPSF\nyes\n2.2 and above\n2.1.1\n2001-now\nPSF\nyes\nNote\nGPL-compatible doesn’t mean that we’re distributing Python under the GPL.\nAll Python licenses, unlike the GPL, let you distribute a modified version\nwithout making your changes open source. The GPL-compatible licenses make\nit possible to combine Python with other software that is released under\nthe GPL; the others don’t.\nAccording to Richard Stallman, 1.6.1 is not GPL-compatible, because its license\nhas a choice of law clause. According to CNRI, however, Stallman’s lawyer has\ntold CNRI’s lawyer that 1.6.1 is “not incompatible” with the GPL.\nThanks to the many outside volunteers who have worked under Guido’s direction to\nmake these releases possible.\nTerms and conditions for accessing or otherwise using Python\n¶\nPython software and documentation are licensed under the\nPython Software Foundation License Version 2.\nStarting with Python 3.8.6, examples, recipes, and other code in\nthe documentation are dual licensed under the PSF License Version 2\nand the\nZero-Clause BSD license\n.\nSome software incorporated into Python is under different licenses.\nThe licenses are listed with code falling under that license.\nSee\nLicenses and Acknowledgements for Incorporated Software\nfor an incomplete list of these licenses.\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n¶\n1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and\nthe Individual or Organization (\"Licensee\") accessing and otherwise using this\nsoftware (\"Python\") in source or binary form and its associated documentation.\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative\nversion, provided, however, that PSF's License Agreement and PSF's notice of\ncopyright, i.e., \"Copyright © 2001-2024 Python Software Foundation; All Rights\nReserved\" are retained in Python alone or in any derivative version\nprepared by Licensee.\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python or any part thereof, and wants to make the\nderivative work available to others as provided herein, then Licensee hereby\nagrees to include in any such work a brief summary of the changes made to Python.\n4. PSF is making Python available to Licensee on an \"AS IS\" basis.\nPSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. Nothing in this License Agreement shall be deemed to create any relationship\nof agency, partnership, or joint venture between PSF and Licensee.  This License\nAgreement does not grant permission to use PSF trademarks or trade name in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party.\n8. By copying, installing or otherwise using Python, Licensee agrees\nto be bound by the terms and conditions of this License Agreement.\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\n¶\nBEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at\n160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization\n(\"Licensee\") accessing and otherwise using this software in source or binary\nform and its associated documentation (\"the Software\").\n2. Subject to the terms and conditions of this BeOpen Python License Agreement,\nBeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license\nto reproduce, analyze, test, perform and/or display publicly, prepare derivative\nworks, distribute, and otherwise use the Software alone or in any derivative\nversion, provided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n3. BeOpen is making the Software available to Licensee on an \"AS IS\" basis.\nBEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,\nMODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF\nADVISED OF THE POSSIBILITY THEREOF.\n5. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n6. This License Agreement shall be governed by and interpreted in all respects\nby the law of the State of California, excluding conflict of law provisions.\nNothing in this License Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between BeOpen and Licensee.  This License\nAgreement does not grant permission to use BeOpen trademarks or trade names in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party.  As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the permissions\ngranted on that web page.\n7. By copying, installing or otherwise using the software, Licensee agrees to be\nbound by the terms and conditions of this License Agreement.\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n¶\n1. This LICENSE AGREEMENT is between the Corporation for National Research\nInitiatives, having an office at 1895 Preston White Drive, Reston, VA 20191\n(\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using Python 1.6.1 software in source or binary form and its\nassociated documentation.\n2. Subject to the terms and conditions of this License Agreement, CNRI hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python 1.6.1 alone or in any derivative version,\nprovided, however, that CNRI's License Agreement and CNRI's notice of copyright,\ni.e., \"Copyright © 1995-2001 Corporation for National Research Initiatives; All\nRights Reserved\" are retained in Python 1.6.1 alone or in any derivative version\nprepared by Licensee.  Alternately, in lieu of CNRI's License Agreement,\nLicensee may substitute the following text (omitting the quotes): \"Python 1.6.1\nis made available subject to the terms and conditions in CNRI's License\nAgreement.  This Agreement together with Python 1.6.1 may be located on the\ninternet using the following unique, persistent identifier (known as a handle):\n1895.22/1013.  This Agreement may also be obtained from a proxy server on the\ninternet using the following URL: http://hdl.handle.net/1895.22/1013\".\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python 1.6.1 or any part thereof, and wants to make the derivative\nwork available to others as provided herein, then Licensee hereby agrees to\ninclude in any such work a brief summary of the changes made to Python 1.6.1.\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis.  CNRI\nMAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF EXAMPLE,\nBUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY\nOF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF\nPYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. This License Agreement shall be governed by the federal intellectual property\nlaw of the United States, including without limitation the federal copyright\nlaw, and, to the extent such U.S. federal law does not apply, by the law of the\nCommonwealth of Virginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based on Python\n1.6.1 that incorporate non-separable material that was previously distributed\nunder the GNU General Public License (GPL), the law of the Commonwealth of\nVirginia shall govern this License Agreement only as to issues arising under or\nwith respect to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in\nthis License Agreement shall be deemed to create any relationship of agency,\npartnership, or joint venture between CNRI and Licensee.  This License Agreement\ndoes not grant permission to use CNRI trademarks or trade name in a trademark\nsense to endorse or promote products or services of Licensee, or any third\nparty.\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing\nor otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and\nconditions of this License Agreement.\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\n¶\nCopyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The\nNetherlands.  All rights reserved.\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted, provided that\nthe above copyright notice appear in all copies and that both that copyright\nnotice and this permission notice appear in supporting documentation, and that\nthe name of Stichting Mathematisch Centrum or CWI not be used in advertising or\npublicity pertaining to distribution of the software without specific, written\nprior permission.\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO\nEVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\nZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION\n¶\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nLicenses and Acknowledgements for Incorporated Software\n¶\nThis section is an incomplete, but growing list of licenses and acknowledgements\nfor third-party software incorporated in the Python distribution.\nMersenne Twister\n¶\nThe\n_random\nC extension underlying the\nrandom\nmodule\nincludes code based on a download from\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html\n. The following are\nthe verbatim comments from the original code:\nA C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. The names of its contributors may not be used to endorse or promote\nproducts derived from this software without specific prior written\npermission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\nSockets\n¶\nThe\nsocket\nmodule uses the functions,\ngetaddrinfo()\n, and\ngetnameinfo()\n, which are coded in separate source files from the WIDE\nProject,\nhttps://www.wide.ad.jp/\n.\nCopyright (C) 1995, 1996, 1997, and 1998 WIDE Project.\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. Neither the name of the project nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nAsynchronous socket services\n¶\nThe\ntest.support.asynchat\nand\ntest.support.asyncore\nmodules contain the following notice:\nCopyright 1996 by Sam Rushing\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and\nits documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of Sam\nRushing not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\nSAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN\nNO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nCookie management\n¶\nThe\nhttp.cookies\nmodule contains the following notice:\nCopyright 2000 by Timothy O'Malley <timo@alum.mit.edu>\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nTimothy O'Malley  not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nTimothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nExecution tracing\n¶\nThe\ntrace\nmodule contains the following notice:\nportions copyright 2001, Autonomous Zones Industries, Inc., all rights...\nerr...  reserved and offered to the public under the terms of the\nPython 2.2 license.\nAuthor: Zooko O'Whielacronx\nhttp://zooko.com/\nmailto:zooko@zooko.com\nCopyright 2000, Mojam Media, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1999, Bioreason, Inc., all rights reserved.\nAuthor: Andrew Dalke\nCopyright 1995-1997, Automatrix, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.\nPermission to use, copy, modify, and distribute this Python software and\nits associated documentation for any purpose without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of neither Automatrix,\nBioreason or Mojam Media be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission.\nUUencode and UUdecode functions\n¶\nThe\nuu\ncodec contains the following notice:\nCopyright 1994 by Lance Ellinghouse\nCathedral City, California Republic, United States of America.\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Lance Ellinghouse\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\nLANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nModified by Jack Jansen, CWI, July 1995:\n- Use binascii module to do the actual line-by-line conversion\nbetween ascii and binary. This results in a 1000-fold speedup. The C\nversion is still 5 times faster, though.\n- Arguments more compliant with Python standard\nXML Remote Procedure Calls\n¶\nThe\nxmlrpc.client\nmodule contains the following notice:\nThe XML-RPC client interface is\nCopyright (c) 1999-2002 by Secret Labs AB\nCopyright (c) 1999-2002 by Fredrik Lundh\nBy obtaining, using, and/or copying this software and/or its\nassociated documentation, you agree that you have read, understood,\nand will comply with the following terms and conditions:\nPermission to use, copy, modify, and distribute this software and\nits associated documentation for any purpose and without fee is\nhereby granted, provided that the above copyright notice appears in\nall copies, and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nSecret Labs AB or the author not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\nTO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\nABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\nBE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\nOF THIS SOFTWARE.\ntest_epoll\n¶\nThe\ntest.test_epoll\nmodule contains the following notice:\nCopyright (c) 2001-2006 Twisted Matrix Laboratories.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nSelect kqueue\n¶\nThe\nselect\nmodule contains the following notice for the kqueue\ninterface:\nCopyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nSipHash24\n¶\nThe file\nPython/pyhash.c\ncontains Marek Majkowski’ implementation of\nDan Bernstein’s SipHash24 algorithm. It contains the following note:\n<MIT License>\nCopyright (c) 2013  Marek Majkowski <marek@popcount.org>\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n</MIT License>\nOriginal location:\nhttps://github.com/majek/csiphash/\nSolution inspired by code from:\nSamuel Neves (supercop/crypto_auth/siphash24/little)\ndjb (supercop/crypto_auth/siphash24/little2)\nJean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)\nstrtod and dtoa\n¶\nThe file\nPython/dtoa.c\n, which supplies C functions dtoa and\nstrtod for conversion of C doubles to and from strings, is derived\nfrom the file of the same name by David M. Gay, currently available\nfrom\nhttps://web.archive.org/web/20220517033456/http://www.netlib.org/fp/dtoa.c\n.\nThe original file, as retrieved on March 16, 2009, contains the following\ncopyright and licensing notice:\n/****************************************************************\n*\n* The author of this software is David M. Gay.\n*\n* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.\n*\n* Permission to use, copy, modify, and distribute this software for any\n* purpose without fee is hereby granted, provided that this entire notice\n* is included in all copies of any software which is or includes a copy\n* or modification of this software and in all copies of the supporting\n* documentation for such software.\n*\n* THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\n* WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\n* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\n* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n*\n***************************************************************/\nOpenSSL\n¶\nThe modules\nhashlib\n,\nposix\nand\nssl\nuse\nthe OpenSSL library for added performance if made available by the\noperating system. Additionally, the Windows and macOS installers for\nPython may include a copy of the OpenSSL libraries, so we include a copy\nof the OpenSSL license here. For the OpenSSL 3.0 release,\nand later releases derived from that, the Apache License v2 applies:\nApache License\nVersion 2.0, January 2004\nhttps://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n1. Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nexpat\n¶\nThe\npyexpat\nextension is built using an included copy of the expat\nsources unless the build is configured\n--with-system-expat\n:\nCopyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd\nand Clark Cooper\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nlibffi\n¶\nThe\n_ctypes\nC extension underlying the\nctypes\nmodule\nis built using an included copy of the libffi\nsources unless the build is configured\n--with-system-libffi\n:\nCopyright (c) 1996-2008  Red Hat, Inc and others.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\nzlib\n¶\nThe\nzlib\nextension is built using an included copy of the zlib\nsources if the zlib version found on the system is too old to be\nused for the build:\nCopyright (C) 1995-2011 Jean-loup Gailly and Mark Adler\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\nJean-loup Gailly        Mark Adler\njloup@gzip.org          madler@alumni.caltech.edu\ncfuhash\n¶\nThe implementation of the hash table used by the\ntracemalloc\nis based\non the cfuhash project:\nCopyright (c) 2005 Don Owens\nAll rights reserved.\nThis code is released under the BSD license:\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\n* Neither the name of the author nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\nlibmpdec\n¶\nThe\n_decimal\nC extension underlying the\ndecimal\nmodule\nis built using an included copy of the libmpdec\nlibrary unless the build is configured\n--with-system-libmpdec\n:\nCopyright (c) 2008-2020 Stefan Krah. All rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nW3C C14N test suite\n¶\nThe C14N 2.0 test suite in the\ntest\npackage\n(\nLib/test/xmltestdata/c14n-20/\n) was retrieved from the W3C website at\nhttps://www.w3.org/TR/xml-c14n2-testcases/\nand is distributed under the\n3-clause BSD license:\nCopyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),\nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of works must retain the original copyright notice,\nthis list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the original copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name of the W3C nor the names of its contributors may be\nused to endorse or promote products derived from this work without\nspecific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nmimalloc\n¶\nMIT License:\nCopyright (c) 2018-2021 Microsoft Corporation, Daan Leijen\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nasyncio\n¶\nParts of the\nasyncio\nmodule are incorporated from\nuvloop 0.16\n,\nwhich is distributed under the MIT license:\nCopyright (c) 2015-2021 MagicStack Inc.  http://magic.io\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nGlobal Unbounded Sequences (GUS)\n¶\nThe file\nPython/qsbr.c\nis adapted from FreeBSD’s “Global Unbounded\nSequences” safe memory reclamation scheme in\nsubr_smr.c\n.\nThe file is distributed under the 2-Clause BSD License:\nCopyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice unmodified, this list of conditions, and the following\ndisclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nTable of Contents\nHistory and License\nHistory of the software\nTerms and conditions for accessing or otherwise using Python\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION\nLicenses and Acknowledgements for Incorporated Software\nMersenne Twister\nSockets\nAsynchronous socket services\nCookie management\nExecution tracing\nUUencode and UUdecode functions\nXML Remote Procedure Calls\ntest_epoll\nSelect kqueue\nSipHash24\nstrtod and dtoa\nOpenSSL\nexpat\nlibffi\nzlib\ncfuhash\nlibmpdec\nW3C C14N test suite\nmimalloc\nasyncio\nGlobal Unbounded Sequences (GUS)\nPrevious topic\nCopyright\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nHistory and License\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/license.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12346.3619795
  },
  {
    "title": "Copyright¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nCopyright\n|\nTheme\nAuto\nLight\nDark\n|\nCopyright\n¶\nPython and this documentation is:\nCopyright © 2001-2024 Python Software Foundation. All rights reserved.\nCopyright © 2000 BeOpen.com. All rights reserved.\nCopyright © 1995-2000 Corporation for National Research Initiatives. All rights\nreserved.\nCopyright © 1991-1995 Stichting Mathematisch Centrum. All rights reserved.\nSee\nHistory and License\nfor complete license and permissions information.\nPrevious topic\nDealing with Bugs\nNext topic\nHistory and License\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nCopyright\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/copyright.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12346.5955174
  },
  {
    "title": "About this documentation¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nAbout this documentation\n|\nTheme\nAuto\nLight\nDark\n|\nAbout this documentation\n¶\nPython’s documentation is generated from\nreStructuredText\nsources\nusing\nSphinx\n, a documentation generator originally created for Python\nand now maintained as an independent project.\nDevelopment of the documentation and its toolchain is an entirely volunteer\neffort, just like Python itself.  If you want to contribute, please take a\nlook at the\nDealing with Bugs\npage for information on how to do so.  New\nvolunteers are always welcome!\nMany thanks go to:\nFred L. Drake, Jr., the creator of the original Python documentation toolset\nand author of much of the content;\nthe\nDocutils\nproject for creating\nreStructuredText and the Docutils suite;\nFredrik Lundh for his Alternative Python Reference project from which Sphinx\ngot many good ideas.\nContributors to the Python documentation\n¶\nMany people have contributed to the Python language, the Python standard\nlibrary, and the Python documentation.  See\nMisc/ACKS\nin the Python\nsource distribution for a partial list of contributors.\nIt is only with the input and contributions of the Python community\nthat Python has such wonderful documentation – Thank You!\nTable of Contents\nAbout this documentation\nContributors to the Python documentation\nPrevious topic\nGlossary\nNext topic\nDealing with Bugs\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nAbout this documentation\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/about.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12346.6708182
  },
  {
    "title": "Python 3.13.5 documentation",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\n|\nTheme\nAuto\nLight\nDark\n|\nPython 3.13.5 documentation\nWelcome! This is the official documentation for Python 3.13.5.\nDocumentation sections:\nWhat's new in Python 3.13?\nOr\nall \"What's new\" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\nDeprecations\nDeprecated functionality\nIndices, glossary, and search:\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\nProject information:\nReporting issues\nContributing to docs\nDownload the documentation\nHistory and license of Python\nCopyright\nAbout the documentation\nDownload\nDownload these documents\nDocs by version\nPython 3.15 (in development)\nPython 3.14 (pre-release)\nPython 3.13 (stable)\nPython 3.12 (security-fixes)\nPython 3.11 (security-fixes)\nPython 3.10 (security-fixes)\nPython 3.9 (security-fixes)\nPython 3.8 (EOL)\nPython 3.7 (EOL)\nPython 3.6 (EOL)\nPython 3.5 (EOL)\nPython 3.4 (EOL)\nPython 3.3 (EOL)\nPython 3.2 (EOL)\nPython 3.1 (EOL)\nPython 3.0 (EOL)\nPython 2.7 (EOL)\nPython 2.6 (EOL)\nAll versions\nOther resources\nPEP Index\nBeginner's Guide\nBook List\nAudio/Visual Talks\nPython Developer’s Guide\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/index.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12346.7101861
  },
  {
    "title": "xml.dom — The Document Object Model API¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nStructured Markup Processing Tools\n»\nxml.dom\n— The Document Object Model API\n|\nTheme\nAuto\nLight\nDark\n|\nxml.dom\n— The Document Object Model API\n¶\nSource code:\nLib/xml/dom/__init__.py\nThe Document Object Model, or “DOM,” is a cross-language API from the World Wide\nWeb Consortium (W3C) for accessing and modifying XML documents.  A DOM\nimplementation presents an XML document as a tree structure, or allows client\ncode to build such a structure from scratch.  It then gives access to the\nstructure through a set of objects which provided well-known interfaces.\nThe DOM is extremely useful for random-access applications.  SAX only allows you\na view of one bit of the document at a time.  If you are looking at one SAX\nelement, you have no access to another.  If you are looking at a text node, you\nhave no access to a containing element. When you write a SAX application, you\nneed to keep track of your program’s position in the document somewhere in your\nown code.  SAX does not do it for you.  Also, if you need to look ahead in the\nXML document, you are just out of luck.\nSome applications are simply impossible in an event driven model with no access\nto a tree.  Of course you could build some sort of tree yourself in SAX events,\nbut the DOM allows you to avoid writing that code.  The DOM is a standard tree\nrepresentation for XML data.\nThe Document Object Model is being defined by the W3C in stages, or “levels” in\ntheir terminology.  The Python mapping of the API is substantially based on the\nDOM Level 2 recommendation.\nDOM applications typically start by parsing some XML into a DOM.  How this is\naccomplished is not covered at all by DOM Level 1, and Level 2 provides only\nlimited improvements: There is a\nDOMImplementation\nobject class which\nprovides access to\nDocument\ncreation methods, but no way to access an\nXML reader/parser/Document builder in an implementation-independent way. There\nis also no well-defined way to access these methods without an existing\nDocument\nobject.  In Python, each DOM implementation will provide a\nfunction\ngetDOMImplementation()\n. DOM Level 3 adds a Load/Store\nspecification, which defines an interface to the reader, but this is not yet\navailable in the Python standard library.\nOnce you have a DOM document object, you can access the parts of your XML\ndocument through its properties and methods.  These properties are defined in\nthe DOM specification; this portion of the reference manual describes the\ninterpretation of the specification in Python.\nThe specification provided by the W3C defines the DOM API for Java, ECMAScript,\nand OMG IDL.  The Python mapping defined here is based in large part on the IDL\nversion of the specification, but strict compliance is not required (though\nimplementations are free to support the strict mapping from IDL).  See section\nConformance\nfor a detailed discussion of mapping requirements.\nSee also\nDocument Object Model (DOM) Level 2 Specification\nThe W3C recommendation upon which the Python DOM API is based.\nDocument Object Model (DOM) Level 1 Specification\nThe W3C recommendation for the DOM supported by\nxml.dom.minidom\n.\nPython Language Mapping Specification\nThis specifies the mapping from OMG IDL to Python.\nModule Contents\n¶\nThe\nxml.dom\ncontains the following functions:\nxml.dom.\nregisterDOMImplementation\n(\nname\n,\nfactory\n)\n¶\nRegister the\nfactory\nfunction with the name\nname\n.  The factory function\nshould return an object which implements the\nDOMImplementation\ninterface.  The factory function can return the same object every time, or a new\none for each call, as appropriate for the specific implementation (e.g. if that\nimplementation supports some customization).\nxml.dom.\ngetDOMImplementation\n(\nname\n=\nNone\n,\nfeatures\n=\n()\n)\n¶\nReturn a suitable DOM implementation. The\nname\nis either well-known, the\nmodule name of a DOM implementation, or\nNone\n. If it is not\nNone\n, imports\nthe corresponding module and returns a\nDOMImplementation\nobject if the\nimport succeeds.  If no name is given, and if the environment variable\nPYTHON_DOM\nis set, this variable is used to find the implementation.\nIf name is not given, this examines the available implementations to find one\nwith the required feature set.  If no implementation can be found, raise an\nImportError\n.  The features list must be a sequence of\n(feature,\nversion)\npairs which are passed to the\nhasFeature()\nmethod on available\nDOMImplementation\nobjects.\nSome convenience constants are also provided:\nxml.dom.\nEMPTY_NAMESPACE\n¶\nThe value used to indicate that no namespace is associated with a node in the\nDOM.  This is typically found as the\nnamespaceURI\nof a node, or used as\nthe\nnamespaceURI\nparameter to a namespaces-specific method.\nxml.dom.\nXML_NAMESPACE\n¶\nThe namespace URI associated with the reserved prefix\nxml\n, as defined by\nNamespaces in XML\n(section 4).\nxml.dom.\nXMLNS_NAMESPACE\n¶\nThe namespace URI for namespace declarations, as defined by\nDocument Object\nModel (DOM) Level 2 Core Specification\n(section 1.1.8).\nxml.dom.\nXHTML_NAMESPACE\n¶\nThe URI of the XHTML namespace as defined by\nXHTML 1.0: The Extensible\nHyperText Markup Language\n(section 3.1.1).\nIn addition,\nxml.dom\ncontains a base\nNode\nclass and the DOM\nexception classes.  The\nNode\nclass provided by this module does not\nimplement any of the methods or attributes defined by the DOM specification;\nconcrete DOM implementations must provide those.  The\nNode\nclass\nprovided as part of this module does provide the constants used for the\nnodeType\nattribute on concrete\nNode\nobjects; they are located\nwithin the class rather than at the module level to conform with the DOM\nspecifications.\nObjects in the DOM\n¶\nThe definitive documentation for the DOM is the DOM specification from the W3C.\nNote that DOM attributes may also be manipulated as nodes instead of as simple\nstrings.  It is fairly rare that you must do this, however, so this usage is not\nyet documented.\nInterface\nSection\nPurpose\nDOMImplementation\nDOMImplementation Objects\nInterface to the underlying\nimplementation.\nNode\nNode Objects\nBase interface for most objects\nin a document.\nNodeList\nNodeList Objects\nInterface for a sequence of\nnodes.\nDocumentType\nDocumentType Objects\nInformation about the\ndeclarations needed to process\na document.\nDocument\nDocument Objects\nObject which represents an\nentire document.\nElement\nElement Objects\nElement nodes in the document\nhierarchy.\nAttr\nAttr Objects\nAttribute value nodes on\nelement nodes.\nComment\nComment Objects\nRepresentation of comments in\nthe source document.\nText\nText and CDATASection Objects\nNodes containing textual\ncontent from the document.\nProcessingInstruction\nProcessingInstruction Objects\nProcessing instruction\nrepresentation.\nAn additional section describes the exceptions defined for working with the DOM\nin Python.\nDOMImplementation Objects\n¶\nThe\nDOMImplementation\ninterface provides a way for applications to\ndetermine the availability of particular features in the DOM they are using.\nDOM Level 2 added the ability to create new\nDocument\nand\nDocumentType\nobjects using the\nDOMImplementation\nas well.\nDOMImplementation.\nhasFeature\n(\nfeature\n,\nversion\n)\n¶\nReturn\nTrue\nif the feature identified by the pair of strings\nfeature\nand\nversion\nis implemented.\nDOMImplementation.\ncreateDocument\n(\nnamespaceUri\n,\nqualifiedName\n,\ndoctype\n)\n¶\nReturn a new\nDocument\nobject (the root of the DOM), with a child\nElement\nobject having the given\nnamespaceUri\nand\nqualifiedName\n. The\ndoctype\nmust be a\nDocumentType\nobject created by\ncreateDocumentType()\n, or\nNone\n. In the Python DOM API, the first two\narguments can also be\nNone\nin order to indicate that no\nElement\nchild is to be created.\nDOMImplementation.\ncreateDocumentType\n(\nqualifiedName\n,\npublicId\n,\nsystemId\n)\n¶\nReturn a new\nDocumentType\nobject that encapsulates the given\nqualifiedName\n,\npublicId\n, and\nsystemId\nstrings, representing the\ninformation contained in an XML document type declaration.\nNode Objects\n¶\nAll of the components of an XML document are subclasses of\nNode\n.\nNode.\nnodeType\n¶\nAn integer representing the node type.  Symbolic constants for the types are on\nthe\nNode\nobject:\nELEMENT_NODE\n,\nATTRIBUTE_NODE\n,\nTEXT_NODE\n,\nCDATA_SECTION_NODE\n,\nENTITY_NODE\n,\nPROCESSING_INSTRUCTION_NODE\n,\nCOMMENT_NODE\n,\nDOCUMENT_NODE\n,\nDOCUMENT_TYPE_NODE\n,\nNOTATION_NODE\n.\nThis is a read-only attribute.\nNode.\nparentNode\n¶\nThe parent of the current node, or\nNone\nfor the document node. The value is\nalways a\nNode\nobject or\nNone\n.  For\nElement\nnodes, this\nwill be the parent element, except for the root element, in which case it will\nbe the\nDocument\nobject. For\nAttr\nnodes, this is always\nNone\n. This is a read-only attribute.\nNode.\nattributes\n¶\nA\nNamedNodeMap\nof attribute objects.  Only elements have actual values\nfor this; others provide\nNone\nfor this attribute. This is a read-only\nattribute.\nNode.\npreviousSibling\n¶\nThe node that immediately precedes this one with the same parent.  For\ninstance the element with an end-tag that comes just before the\nself\nelement’s start-tag.  Of course, XML documents are made up of more than just\nelements so the previous sibling could be text, a comment, or something else.\nIf this node is the first child of the parent, this attribute will be\nNone\n. This is a read-only attribute.\nNode.\nnextSibling\n¶\nThe node that immediately follows this one with the same parent.  See also\npreviousSibling\n.  If this is the last child of the parent, this\nattribute will be\nNone\n. This is a read-only attribute.\nNode.\nchildNodes\n¶\nA list of nodes contained within this node. This is a read-only attribute.\nNode.\nfirstChild\n¶\nThe first child of the node, if there are any, or\nNone\n. This is a read-only\nattribute.\nNode.\nlastChild\n¶\nThe last child of the node, if there are any, or\nNone\n. This is a read-only\nattribute.\nNode.\nlocalName\n¶\nThe part of the\ntagName\nfollowing the colon if there is one, else the\nentire\ntagName\n.  The value is a string.\nNode.\nprefix\n¶\nThe part of the\ntagName\npreceding the colon if there is one, else the\nempty string.  The value is a string, or\nNone\n.\nNode.\nnamespaceURI\n¶\nThe namespace associated with the element name.  This will be a string or\nNone\n.  This is a read-only attribute.\nNode.\nnodeName\n¶\nThis has a different meaning for each node type; see the DOM specification for\ndetails.  You can always get the information you would get here from another\nproperty such as the\ntagName\nproperty for elements or the\nname\nproperty for attributes. For all node types, the value of this attribute will be\neither a string or\nNone\n.  This is a read-only attribute.\nNode.\nnodeValue\n¶\nThis has a different meaning for each node type; see the DOM specification for\ndetails.  The situation is similar to that with\nnodeName\n.  The value is\na string or\nNone\n.\nNode.\nhasAttributes\n(\n)\n¶\nReturn\nTrue\nif the node has any attributes.\nNode.\nhasChildNodes\n(\n)\n¶\nReturn\nTrue\nif the node has any child nodes.\nNode.\nisSameNode\n(\nother\n)\n¶\nReturn\nTrue\nif\nother\nrefers to the same node as this node. This is especially\nuseful for DOM implementations which use any sort of proxy architecture (because\nmore than one object can refer to the same node).\nNote\nThis is based on a proposed DOM Level 3 API which is still in the “working\ndraft” stage, but this particular interface appears uncontroversial.  Changes\nfrom the W3C will not necessarily affect this method in the Python DOM interface\n(though any new W3C API for this would also be supported).\nNode.\nappendChild\n(\nnewChild\n)\n¶\nAdd a new child node to this node at the end of the list of\nchildren, returning\nnewChild\n. If the node was already in\nthe tree, it is removed first.\nNode.\ninsertBefore\n(\nnewChild\n,\nrefChild\n)\n¶\nInsert a new child node before an existing child.  It must be the case that\nrefChild\nis a child of this node; if not,\nValueError\nis raised.\nnewChild\nis returned. If\nrefChild\nis\nNone\n, it inserts\nnewChild\nat the\nend of the children’s list.\nNode.\nremoveChild\n(\noldChild\n)\n¶\nRemove a child node.\noldChild\nmust be a child of this node; if not,\nValueError\nis raised.\noldChild\nis returned on success.  If\noldChild\nwill not be used further, its\nunlink()\nmethod should be called.\nNode.\nreplaceChild\n(\nnewChild\n,\noldChild\n)\n¶\nReplace an existing node with a new node. It must be the case that\noldChild\nis a child of this node; if not,\nValueError\nis raised.\nNode.\nnormalize\n(\n)\n¶\nJoin adjacent text nodes so that all stretches of text are stored as single\nText\ninstances.  This simplifies processing text from a DOM tree for\nmany applications.\nNode.\ncloneNode\n(\ndeep\n)\n¶\nClone this node.  Setting\ndeep\nmeans to clone all child nodes as well.  This\nreturns the clone.\nNodeList Objects\n¶\nA\nNodeList\nrepresents a sequence of nodes.  These objects are used in\ntwo ways in the DOM Core recommendation:  an\nElement\nobject provides\none as its list of child nodes, and the\ngetElementsByTagName()\nand\ngetElementsByTagNameNS()\nmethods of\nNode\nreturn objects with this\ninterface to represent query results.\nThe DOM Level 2 recommendation defines one method and one attribute for these\nobjects:\nNodeList.\nitem\n(\ni\n)\n¶\nReturn the\ni\n’th item from the sequence, if there is one, or\nNone\n.  The\nindex\ni\nis not allowed to be less than zero or greater than or equal to the\nlength of the sequence.\nNodeList.\nlength\n¶\nThe number of nodes in the sequence.\nIn addition, the Python DOM interface requires that some additional support is\nprovided to allow\nNodeList\nobjects to be used as Python sequences.  All\nNodeList\nimplementations must include support for\n__len__()\nand\n__getitem__()\n; this allows iteration over the\nNodeList\nin\nfor\nstatements and proper support for the\nlen()\nbuilt-in\nfunction.\nIf a DOM implementation supports modification of the document, the\nNodeList\nimplementation must also support the\n__setitem__()\nand\n__delitem__()\nmethods.\nDocumentType Objects\n¶\nInformation about the notations and entities declared by a document (including\nthe external subset if the parser uses it and can provide the information) is\navailable from a\nDocumentType\nobject.  The\nDocumentType\nfor a\ndocument is available from the\nDocument\nobject’s\ndoctype\nattribute; if there is no\nDOCTYPE\ndeclaration for the document, the\ndocument’s\ndoctype\nattribute will be set to\nNone\ninstead of an\ninstance of this interface.\nDocumentType\nis a specialization of\nNode\n, and adds the\nfollowing attributes:\nDocumentType.\npublicId\n¶\nThe public identifier for the external subset of the document type definition.\nThis will be a string or\nNone\n.\nDocumentType.\nsystemId\n¶\nThe system identifier for the external subset of the document type definition.\nThis will be a URI as a string, or\nNone\n.\nDocumentType.\ninternalSubset\n¶\nA string giving the complete internal subset from the document. This does not\ninclude the brackets which enclose the subset.  If the document has no internal\nsubset, this should be\nNone\n.\nDocumentType.\nname\n¶\nThe name of the root element as given in the\nDOCTYPE\ndeclaration, if\npresent.\nDocumentType.\nentities\n¶\nThis is a\nNamedNodeMap\ngiving the definitions of external entities.\nFor entity names defined more than once, only the first definition is provided\n(others are ignored as required by the XML recommendation).  This may be\nNone\nif the information is not provided by the parser, or if no entities are\ndefined.\nDocumentType.\nnotations\n¶\nThis is a\nNamedNodeMap\ngiving the definitions of notations. For\nnotation names defined more than once, only the first definition is provided\n(others are ignored as required by the XML recommendation).  This may be\nNone\nif the information is not provided by the parser, or if no notations\nare defined.\nDocument Objects\n¶\nA\nDocument\nrepresents an entire XML document, including its constituent\nelements, attributes, processing instructions, comments etc.  Remember that it\ninherits properties from\nNode\n.\nDocument.\ndocumentElement\n¶\nThe one and only root element of the document.\nDocument.\ncreateElement\n(\ntagName\n)\n¶\nCreate and return a new element node.  The element is not inserted into the\ndocument when it is created.  You need to explicitly insert it with one of the\nother methods such as\ninsertBefore()\nor\nappendChild()\n.\nDocument.\ncreateElementNS\n(\nnamespaceURI\n,\ntagName\n)\n¶\nCreate and return a new element with a namespace.  The\ntagName\nmay have a\nprefix.  The element is not inserted into the document when it is created.  You\nneed to explicitly insert it with one of the other methods such as\ninsertBefore()\nor\nappendChild()\n.\nDocument.\ncreateTextNode\n(\ndata\n)\n¶\nCreate and return a text node containing the data passed as a parameter.  As\nwith the other creation methods, this one does not insert the node into the\ntree.\nDocument.\ncreateComment\n(\ndata\n)\n¶\nCreate and return a comment node containing the data passed as a parameter.  As\nwith the other creation methods, this one does not insert the node into the\ntree.\nDocument.\ncreateProcessingInstruction\n(\ntarget\n,\ndata\n)\n¶\nCreate and return a processing instruction node containing the\ntarget\nand\ndata\npassed as parameters.  As with the other creation methods, this one does\nnot insert the node into the tree.\nDocument.\ncreateAttribute\n(\nname\n)\n¶\nCreate and return an attribute node.  This method does not associate the\nattribute node with any particular element.  You must use\nsetAttributeNode()\non the appropriate\nElement\nobject to use the\nnewly created attribute instance.\nDocument.\ncreateAttributeNS\n(\nnamespaceURI\n,\nqualifiedName\n)\n¶\nCreate and return an attribute node with a namespace.  The\ntagName\nmay have a\nprefix.  This method does not associate the attribute node with any particular\nelement.  You must use\nsetAttributeNode()\non the appropriate\nElement\nobject to use the newly created attribute instance.\nDocument.\ngetElementsByTagName\n(\ntagName\n)\n¶\nSearch for all descendants (direct children, children’s children, etc.) with a\nparticular element type name.\nDocument.\ngetElementsByTagNameNS\n(\nnamespaceURI\n,\nlocalName\n)\n¶\nSearch for all descendants (direct children, children’s children, etc.) with a\nparticular namespace URI and localname.  The localname is the part of the\nnamespace after the prefix.\nElement Objects\n¶\nElement\nis a subclass of\nNode\n, so inherits all the attributes\nof that class.\nElement.\ntagName\n¶\nThe element type name.  In a namespace-using document it may have colons in it.\nThe value is a string.\nElement.\ngetElementsByTagName\n(\ntagName\n)\n¶\nSame as equivalent method in the\nDocument\nclass.\nElement.\ngetElementsByTagNameNS\n(\nnamespaceURI\n,\nlocalName\n)\n¶\nSame as equivalent method in the\nDocument\nclass.\nElement.\nhasAttribute\n(\nname\n)\n¶\nReturn\nTrue\nif the element has an attribute named by\nname\n.\nElement.\nhasAttributeNS\n(\nnamespaceURI\n,\nlocalName\n)\n¶\nReturn\nTrue\nif the element has an attribute named by\nnamespaceURI\nand\nlocalName\n.\nElement.\ngetAttribute\n(\nname\n)\n¶\nReturn the value of the attribute named by\nname\nas a string. If no such\nattribute exists, an empty string is returned, as if the attribute had no value.\nElement.\ngetAttributeNode\n(\nattrname\n)\n¶\nReturn the\nAttr\nnode for the attribute named by\nattrname\n.\nElement.\ngetAttributeNS\n(\nnamespaceURI\n,\nlocalName\n)\n¶\nReturn the value of the attribute named by\nnamespaceURI\nand\nlocalName\nas a\nstring. If no such attribute exists, an empty string is returned, as if the\nattribute had no value.\nElement.\ngetAttributeNodeNS\n(\nnamespaceURI\n,\nlocalName\n)\n¶\nReturn an attribute value as a node, given a\nnamespaceURI\nand\nlocalName\n.\nElement.\nremoveAttribute\n(\nname\n)\n¶\nRemove an attribute by name.  If there is no matching attribute, a\nNotFoundErr\nis raised.\nElement.\nremoveAttributeNode\n(\noldAttr\n)\n¶\nRemove and return\noldAttr\nfrom the attribute list, if present. If\noldAttr\nis\nnot present,\nNotFoundErr\nis raised.\nElement.\nremoveAttributeNS\n(\nnamespaceURI\n,\nlocalName\n)\n¶\nRemove an attribute by name.  Note that it uses a localName, not a qname.  No\nexception is raised if there is no matching attribute.\nElement.\nsetAttribute\n(\nname\n,\nvalue\n)\n¶\nSet an attribute value from a string.\nElement.\nsetAttributeNode\n(\nnewAttr\n)\n¶\nAdd a new attribute node to the element, replacing an existing attribute if\nnecessary if the\nname\nattribute matches.  If a replacement occurs, the\nold attribute node will be returned.  If\nnewAttr\nis already in use,\nInuseAttributeErr\nwill be raised.\nElement.\nsetAttributeNodeNS\n(\nnewAttr\n)\n¶\nAdd a new attribute node to the element, replacing an existing attribute if\nnecessary if the\nnamespaceURI\nand\nlocalName\nattributes match.\nIf a replacement occurs, the old attribute node will be returned.  If\nnewAttr\nis already in use,\nInuseAttributeErr\nwill be raised.\nElement.\nsetAttributeNS\n(\nnamespaceURI\n,\nqname\n,\nvalue\n)\n¶\nSet an attribute value from a string, given a\nnamespaceURI\nand a\nqname\n.\nNote that a qname is the whole attribute name.  This is different than above.\nAttr Objects\n¶\nAttr\ninherits from\nNode\n, so inherits all its attributes.\nAttr.\nname\n¶\nThe attribute name.\nIn a namespace-using document it may include a colon.\nAttr.\nlocalName\n¶\nThe part of the name following the colon if there is one, else the\nentire name.\nThis is a read-only attribute.\nAttr.\nprefix\n¶\nThe part of the name preceding the colon if there is one, else the\nempty string.\nAttr.\nvalue\n¶\nThe text value of the attribute.  This is a synonym for the\nnodeValue\nattribute.\nNamedNodeMap Objects\n¶\nNamedNodeMap\ndoes\nnot\ninherit from\nNode\n.\nNamedNodeMap.\nlength\n¶\nThe length of the attribute list.\nNamedNodeMap.\nitem\n(\nindex\n)\n¶\nReturn an attribute with a particular index.  The order you get the attributes\nin is arbitrary but will be consistent for the life of a DOM.  Each item is an\nattribute node.  Get its value with the\nvalue\nattribute.\nThere are also experimental methods that give this class more mapping behavior.\nYou can use them or you can use the standardized\ngetAttribute*()\nfamily\nof methods on the\nElement\nobjects.\nComment Objects\n¶\nComment\nrepresents a comment in the XML document.  It is a subclass of\nNode\n, but cannot have child nodes.\nComment.\ndata\n¶\nThe content of the comment as a string.  The attribute contains all characters\nbetween the leading\n<!-\n-\nand trailing\n-\n->\n, but does not\ninclude them.\nText and CDATASection Objects\n¶\nThe\nText\ninterface represents text in the XML document.  If the parser\nand DOM implementation support the DOM’s XML extension, portions of the text\nenclosed in CDATA marked sections are stored in\nCDATASection\nobjects.\nThese two interfaces are identical, but provide different values for the\nnodeType\nattribute.\nThese interfaces extend the\nNode\ninterface.  They cannot have child\nnodes.\nText.\ndata\n¶\nThe content of the text node as a string.\nNote\nThe use of a\nCDATASection\nnode does not indicate that the node\nrepresents a complete CDATA marked section, only that the content of the node\nwas part of a CDATA section.  A single CDATA section may be represented by more\nthan one node in the document tree.  There is no way to determine whether two\nadjacent\nCDATASection\nnodes represent different CDATA marked sections.\nProcessingInstruction Objects\n¶\nRepresents a processing instruction in the XML document; this inherits from the\nNode\ninterface and cannot have child nodes.\nProcessingInstruction.\ntarget\n¶\nThe content of the processing instruction up to the first whitespace character.\nThis is a read-only attribute.\nProcessingInstruction.\ndata\n¶\nThe content of the processing instruction following the first whitespace\ncharacter.\nExceptions\n¶\nThe DOM Level 2 recommendation defines a single exception,\nDOMException\n,\nand a number of constants that allow applications to determine what sort of\nerror occurred.\nDOMException\ninstances carry a\ncode\nattribute\nthat provides the appropriate value for the specific exception.\nThe Python DOM interface provides the constants, but also expands the set of\nexceptions so that a specific exception exists for each of the exception codes\ndefined by the DOM.  The implementations must raise the appropriate specific\nexception, each of which carries the appropriate value for the\ncode\nattribute.\nexception\nxml.dom.\nDOMException\n¶\nBase exception class used for all specific DOM exceptions.  This exception class\ncannot be directly instantiated.\nexception\nxml.dom.\nDomstringSizeErr\n¶\nRaised when a specified range of text does not fit into a string. This is not\nknown to be used in the Python DOM implementations, but may be received from DOM\nimplementations not written in Python.\nexception\nxml.dom.\nHierarchyRequestErr\n¶\nRaised when an attempt is made to insert a node where the node type is not\nallowed.\nexception\nxml.dom.\nIndexSizeErr\n¶\nRaised when an index or size parameter to a method is negative or exceeds the\nallowed values.\nexception\nxml.dom.\nInuseAttributeErr\n¶\nRaised when an attempt is made to insert an\nAttr\nnode that is already\npresent elsewhere in the document.\nexception\nxml.dom.\nInvalidAccessErr\n¶\nRaised if a parameter or an operation is not supported on the underlying object.\nexception\nxml.dom.\nInvalidCharacterErr\n¶\nThis exception is raised when a string parameter contains a character that is\nnot permitted in the context it’s being used in by the XML 1.0 recommendation.\nFor example, attempting to create an\nElement\nnode with a space in the\nelement type name will cause this error to be raised.\nexception\nxml.dom.\nInvalidModificationErr\n¶\nRaised when an attempt is made to modify the type of a node.\nexception\nxml.dom.\nInvalidStateErr\n¶\nRaised when an attempt is made to use an object that is not defined or is no\nlonger usable.\nexception\nxml.dom.\nNamespaceErr\n¶\nIf an attempt is made to change any object in a way that is not permitted with\nregard to the\nNamespaces in XML\nrecommendation, this exception is raised.\nexception\nxml.dom.\nNotFoundErr\n¶\nException when a node does not exist in the referenced context.  For example,\nNamedNodeMap.removeNamedItem()\nwill raise this if the node passed in does\nnot exist in the map.\nexception\nxml.dom.\nNotSupportedErr\n¶\nRaised when the implementation does not support the requested type of object or\noperation.\nexception\nxml.dom.\nNoDataAllowedErr\n¶\nThis is raised if data is specified for a node which does not support data.\nexception\nxml.dom.\nNoModificationAllowedErr\n¶\nRaised on attempts to modify an object where modifications are not allowed (such\nas for read-only nodes).\nexception\nxml.dom.\nSyntaxErr\n¶\nRaised when an invalid or illegal string is specified.\nexception\nxml.dom.\nWrongDocumentErr\n¶\nRaised when a node is inserted in a different document than it currently belongs\nto, and the implementation does not support migrating the node from one document\nto the other.\nThe exception codes defined in the DOM recommendation map to the exceptions\ndescribed above according to this table:\nConstant\nException\nDOMSTRING_SIZE_ERR\nDomstringSizeErr\nHIERARCHY_REQUEST_ERR\nHierarchyRequestErr\nINDEX_SIZE_ERR\nIndexSizeErr\nINUSE_ATTRIBUTE_ERR\nInuseAttributeErr\nINVALID_ACCESS_ERR\nInvalidAccessErr\nINVALID_CHARACTER_ERR\nInvalidCharacterErr\nINVALID_MODIFICATION_ERR\nInvalidModificationErr\nINVALID_STATE_ERR\nInvalidStateErr\nNAMESPACE_ERR\nNamespaceErr\nNOT_FOUND_ERR\nNotFoundErr\nNOT_SUPPORTED_ERR\nNotSupportedErr\nNO_DATA_ALLOWED_ERR\nNoDataAllowedErr\nNO_MODIFICATION_ALLOWED_ERR\nNoModificationAllowedErr\nSYNTAX_ERR\nSyntaxErr\nWRONG_DOCUMENT_ERR\nWrongDocumentErr\nConformance\n¶\nThis section describes the conformance requirements and relationships between\nthe Python DOM API, the W3C DOM recommendations, and the OMG IDL mapping for\nPython.\nType Mapping\n¶\nThe IDL types used in the DOM specification are mapped to Python types\naccording to the following table.\nIDL Type\nPython Type\nboolean\nbool\nor\nint\nint\nint\nlong\nint\nint\nunsigned\nint\nint\nDOMString\nstr\nor\nbytes\nnull\nNone\nAccessor Methods\n¶\nThe mapping from OMG IDL to Python defines accessor functions for IDL\nattribute\ndeclarations in much the way the Java mapping does.\nMapping the IDL declarations\nreadonly\nattribute\nstring\nsomeValue\n;\nattribute\nstring\nanotherValue\n;\nyields three accessor functions:  a “get” method for\nsomeValue\n(\n_get_someValue()\n), and “get” and “set” methods for\nanotherValue\n(\n_get_anotherValue()\nand\n_set_anotherValue()\n).  The mapping, in\nparticular, does not require that the IDL attributes are accessible as normal\nPython attributes:\nobject.someValue\nis\nnot\nrequired to work, and may\nraise an\nAttributeError\n.\nThe Python DOM API, however,\ndoes\nrequire that normal attribute access work.\nThis means that the typical surrogates generated by Python IDL compilers are not\nlikely to work, and wrapper objects may be needed on the client if the DOM\nobjects are accessed via CORBA. While this does require some additional\nconsideration for CORBA DOM clients, the implementers with experience using DOM\nover CORBA from Python do not consider this a problem.  Attributes that are\ndeclared\nreadonly\nmay not restrict write access in all DOM\nimplementations.\nIn the Python DOM API, accessor functions are not required.  If provided, they\nshould take the form defined by the Python IDL mapping, but these methods are\nconsidered unnecessary since the attributes are accessible directly from Python.\n“Set” accessors should never be provided for\nreadonly\nattributes.\nThe IDL definitions do not fully embody the requirements of the W3C DOM API,\nsuch as the notion of certain objects, such as the return value of\ngetElementsByTagName()\n, being “live”.  The Python DOM API does not require\nimplementations to enforce such requirements.\nTable of Contents\nxml.dom\n— The Document Object Model API\nModule Contents\nObjects in the DOM\nDOMImplementation Objects\nNode Objects\nNodeList Objects\nDocumentType Objects\nDocument Objects\nElement Objects\nAttr Objects\nNamedNodeMap Objects\nComment Objects\nText and CDATASection Objects\nProcessingInstruction Objects\nExceptions\nConformance\nType Mapping\nAccessor Methods\nPrevious topic\nxml.etree.ElementTree\n— The ElementTree XML API\nNext topic\nxml.dom.minidom\n— Minimal DOM implementation\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nStructured Markup Processing Tools\n»\nxml.dom\n— The Document Object Model API\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/xml.dom.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12346.8590128
  },
  {
    "title": "Index – W",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – W\nW_OK (in module os)\nwait() (asyncio.Barrier method)\n(asyncio.Condition method)\n(asyncio.Event method)\n(asyncio.subprocess.Process method)\n(in module asyncio)\n(in module concurrent.futures)\n(in module multiprocessing.connection)\n(in module os)\n(multiprocessing.pool.AsyncResult method)\n(subprocess.Popen method)\n(threading.Barrier method)\n(threading.Condition method)\n(threading.Event method)\nwait3() (in module os)\nwait4() (in module os)\nwait_closed() (asyncio.Server method)\n(asyncio.StreamWriter method)\nwait_for() (asyncio.Condition method)\n(in module asyncio)\n(threading.Condition method)\nwait_process() (in module test.support)\nwait_threads_exit() (in module test.support.threading_helper)\nwait_until_any_call_with() (unittest.mock.ThreadingMock method)\nwait_until_called() (unittest.mock.ThreadingMock method)\nwaitid() (in module os)\nwaitpid() (in module os)\nwaitstatus_to_exitcode() (in module os)\nwalk() (email.message.EmailMessage method)\n(email.message.Message method)\n(in module ast)\n(in module os)\n(pathlib.Path method)\nwalk_packages() (in module pkgutil)\nwalk_stack() (in module traceback)\nwalk_tb() (in module traceback)\nwalrus operator\nwant (doctest.Example attribute)\nwarn() (in module warnings)\nwarn_default_encoding (sys.flags attribute)\nwarn_explicit() (in module warnings)\nWarning\n,\n[1]\nWARNING (in module logging)\n(in module tkinter.messagebox)\nwarning() (in module logging)\n(logging.Logger method)\n(xml.sax.handler.ErrorHandler method)\nwarnings\nmodule\nWarningsRecorder (class in test.support.warnings_helper)\nwarnoptions (in module sys)\nwasSuccessful() (unittest.TestResult method)\nWatchedFileHandler (class in logging.handlers)\nwave\nmodule\nWave_read (class in wave)\nWave_write (class in wave)\nWCONTINUED (in module os)\nWCOREDUMP() (in module os)\nWeakKeyDictionary (class in weakref)\nWeakMethod (class in weakref)\nweakref\nmodule\nWeakSet (class in weakref)\nWeakValueDictionary (class in weakref)\nwebbrowser\nmodule\nwebbrowser command line option\n--new-tab\n--new-window\n-n\n-t\nWEDNESDAY (in module calendar)\nweekday (calendar.IllegalWeekdayError attribute)\nweekday() (datetime.date method)\n(datetime.datetime method)\n(in module calendar)\nweekheader() (in module calendar)\nweibullvariate() (in module random)\nWEXITED (in module os)\nWEXITSTATUS() (in module os)\nwfile (http.server.BaseHTTPRequestHandler attribute)\n(socketserver.DatagramRequestHandler attribute)\nwhatis (pdb command)\nwhen() (asyncio.Timeout method)\n(asyncio.TimerHandle method)\nwhere (pdb command)\nwhich() (in module shutil)\nwhichdb() (in module dbm)\nwhile\nstatement\n,\n[1]\n,\n[2]\n,\n[3]\nWhile (class in ast)\nwhitespace (in module string)\n(shlex.shlex attribute)\nwhitespace_split (shlex.shlex attribute)\nWidget (class in tkinter.ttk)\nwidth (sys.hash_info attribute)\n(textwrap.TextWrapper attribute)\nwidth() (in module turtle)\nWIFCONTINUED() (in module os)\nWIFEXITED() (in module os)\nWIFSIGNALED() (in module os)\nWIFSTOPPED() (in module os)\nwin32_edition() (in module platform)\nwin32_is_iot() (in module platform)\nwin32_ver() (in module platform)\nWinDLL (class in ctypes)\nwindow manager (widgets)\nwindow() (curses.panel.Panel method)\nwindow_height() (in module turtle)\nwindow_width() (in module turtle)\nWindows\nWindows ini file\nWindowsError\nWindowsPath (class in pathlib)\nWindowsProactorEventLoopPolicy (class in asyncio)\nWindowsRegistryFinder (class in importlib.machinery)\nWindowsSelectorEventLoopPolicy (class in asyncio)\nwinerror (OSError attribute)\nWinError() (in module ctypes)\nWINFUNCTYPE() (in module ctypes)\nwinreg\nmodule\nWinSock\nwinsound\nmodule\nwinver (in module sys)\nwith\nstatement\n,\n[1]\nWith (class in ast)\nWITH_EXCEPT_START (opcode)\nwith_hostmask (ipaddress.IPv4Interface attribute)\n(ipaddress.IPv4Network attribute)\n(ipaddress.IPv6Interface attribute)\n(ipaddress.IPv6Network attribute)\nwith_name() (pathlib.PurePath method)\nwith_netmask (ipaddress.IPv4Interface attribute)\n(ipaddress.IPv4Network attribute)\n(ipaddress.IPv6Interface attribute)\n(ipaddress.IPv6Network attribute)\nwith_prefixlen (ipaddress.IPv4Interface attribute)\n(ipaddress.IPv4Network attribute)\n(ipaddress.IPv6Interface attribute)\n(ipaddress.IPv6Network attribute)\nwith_pymalloc() (in module test.support)\nwith_segments() (pathlib.PurePath method)\nwith_stem() (pathlib.PurePath method)\nwith_suffix() (pathlib.PurePath method)\nwith_traceback() (BaseException method)\nwithitem (class in ast)\nWNOHANG (in module os)\nWNOWAIT (in module os)\nwordchars (shlex.shlex attribute)\nWorld Wide Web\n,\n[1]\n,\n[2]\nwrap() (in module textwrap)\n(textwrap.TextWrapper method)\nwrap_bio() (ssl.SSLContext method)\nwrap_future() (in module asyncio)\nwrap_socket() (ssl.SSLContext method)\nwrapper() (in module curses)\nWrapperDescriptorType (in module types)\nwraps() (in module functools)\nWRITABLE (in module _tkinter)\n(inspect.BufferFlags attribute)\nwritable() (bz2.BZ2File method)\n(io.IOBase method)\nWRITE (inspect.BufferFlags attribute)\nwrite() (asyncio.StreamWriter method)\n(asyncio.WriteTransport method)\n(code.InteractiveInterpreter method)\n(codecs.StreamWriter method)\n(configparser.ConfigParser method)\n(email.generator.BytesGenerator method)\n(email.generator.Generator method)\n(in module os)\n(in module turtle)\n(io.BufferedIOBase method)\n(io.BufferedWriter method)\n(io.RawIOBase method)\n(io.TextIOBase method)\n(mmap.mmap method)\n(sqlite3.Blob method)\n(ssl.MemoryBIO method)\n(ssl.SSLSocket method)\n(xml.etree.ElementTree.ElementTree method)\n(zipfile.ZipFile method)\nwrite_byte() (mmap.mmap method)\nwrite_bytes() (pathlib.Path method)\nwrite_docstringdict() (in module turtle)\nwrite_eof() (asyncio.StreamWriter method)\n(asyncio.WriteTransport method)\n(ssl.MemoryBIO method)\nwrite_history_file() (in module readline)\nWRITE_RESTRICTED (C macro)\nwrite_results() (trace.CoverageResults method)\nwrite_text() (pathlib.Path method)\nwrite_through (io.TextIOWrapper attribute)\nwriteframes() (wave.Wave_write method)\nwriteframesraw() (wave.Wave_write method)\nwriteheader() (csv.DictWriter method)\nwritelines() (asyncio.StreamWriter method)\n(asyncio.WriteTransport method)\n(codecs.StreamWriter method)\n(io.IOBase method)\nwritepy() (zipfile.PyZipFile method)\nwriter() (in module csv)\nwriterow() (csv.csvwriter method)\nwriterows() (csv.csvwriter method)\nwritestr() (zipfile.ZipFile method)\nWriteTransport (class in asyncio)\nwritev() (in module os)\nwritexml() (xml.dom.minidom.Node method)\nwriting\nvalues\nWrongDocumentErr\nwsgi_file_wrapper (wsgiref.handlers.BaseHandler attribute)\nwsgi_multiprocess (wsgiref.handlers.BaseHandler attribute)\nwsgi_multithread (wsgiref.handlers.BaseHandler attribute)\nwsgi_run_once (wsgiref.handlers.BaseHandler attribute)\nWSGIApplication (in module wsgiref.types)\nWSGIEnvironment (in module wsgiref.types)\nwsgiref\nmodule\nwsgiref.handlers\nmodule\nwsgiref.headers\nmodule\nwsgiref.simple_server\nmodule\nwsgiref.types\nmodule\nwsgiref.util\nmodule\nwsgiref.validate\nmodule\nWSGIRequestHandler (class in wsgiref.simple_server)\nWSGIServer (class in wsgiref.simple_server)\nwShowWindow (subprocess.STARTUPINFO attribute)\nWSTOPPED (in module os)\nWSTOPSIG() (in module os)\nwstring_at() (in module ctypes)\nWTERMSIG() (in module os)\nWUNTRACED (in module os)\nWWW\n,\n[1]\n,\n[2]\nserver\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/genindex-W.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12347.4298284
  },
  {
    "title": "struct — Interpret bytes as packed binary data¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nBinary Data Services\n»\nstruct\n— Interpret bytes as packed binary data\n|\nTheme\nAuto\nLight\nDark\n|\nstruct\n— Interpret bytes as packed binary data\n¶\nSource code:\nLib/struct.py\nThis module converts between Python values and C structs represented\nas Python\nbytes\nobjects.  Compact\nformat strings\ndescribe the intended conversions to/from Python values.\nThe module’s functions and objects can be used for two largely\ndistinct applications, data exchange with external sources (files or\nnetwork connections), or data transfer between the Python application\nand the C layer.\nNote\nWhen no prefix character is given, native mode is the default. It\npacks or unpacks data based on the platform and compiler on which\nthe Python interpreter was built.\nThe result of packing a given C struct includes pad bytes which\nmaintain proper alignment for the C types involved; similarly,\nalignment is taken into account when unpacking.  In contrast, when\ncommunicating data between external sources, the programmer is\nresponsible for defining byte ordering and padding between elements.\nSee\nByte Order, Size, and Alignment\nfor details.\nSeveral\nstruct\nfunctions (and methods of\nStruct\n) take a\nbuffer\nargument.  This refers to objects that implement the\nBuffer Protocol\nand\nprovide either a readable or read-writable buffer.  The most common types used\nfor that purpose are\nbytes\nand\nbytearray\n, but many other types\nthat can be viewed as an array of bytes implement the buffer protocol, so that\nthey can be read/filled without additional copying from a\nbytes\nobject.\nFunctions and Exceptions\n¶\nThe module defines the following exception and functions:\nexception\nstruct.\nerror\n¶\nException raised on various occasions; argument is a string describing what\nis wrong.\nstruct.\npack\n(\nformat\n,\nv1\n,\nv2\n,\n...\n)\n¶\nReturn a bytes object containing the values\nv1\n,\nv2\n, … packed according\nto the format string\nformat\n.  The arguments must match the values required by\nthe format exactly.\nstruct.\npack_into\n(\nformat\n,\nbuffer\n,\noffset\n,\nv1\n,\nv2\n,\n...\n)\n¶\nPack the values\nv1\n,\nv2\n, … according to the format string\nformat\nand\nwrite the packed bytes into the writable buffer\nbuffer\nstarting at\nposition\noffset\n.  Note that\noffset\nis a required argument.\nstruct.\nunpack\n(\nformat\n,\nbuffer\n)\n¶\nUnpack from the buffer\nbuffer\n(presumably packed by\npack(format,\n...)\n)\naccording to the format string\nformat\n.  The result is a tuple even if it\ncontains exactly one item.  The buffer’s size in bytes must match the\nsize required by the format, as reflected by\ncalcsize()\n.\nstruct.\nunpack_from\n(\nformat\n,\n/\n,\nbuffer\n,\noffset\n=\n0\n)\n¶\nUnpack from\nbuffer\nstarting at position\noffset\n, according to the format\nstring\nformat\n.  The result is a tuple even if it contains exactly one\nitem.  The buffer’s size in bytes, starting at position\noffset\n, must be at\nleast the size required by the format, as reflected by\ncalcsize()\n.\nstruct.\niter_unpack\n(\nformat\n,\nbuffer\n)\n¶\nIteratively unpack from the buffer\nbuffer\naccording to the format\nstring\nformat\n.  This function returns an iterator which will read\nequally sized chunks from the buffer until all its contents have been\nconsumed.  The buffer’s size in bytes must be a multiple of the size\nrequired by the format, as reflected by\ncalcsize()\n.\nEach iteration yields a tuple as specified by the format string.\nAdded in version 3.4.\nstruct.\ncalcsize\n(\nformat\n)\n¶\nReturn the size of the struct (and hence of the bytes object produced by\npack(format,\n...)\n) corresponding to the format string\nformat\n.\nFormat Strings\n¶\nFormat strings describe the data layout when\npacking and unpacking data.  They are built up from\nformat characters\n,\nwhich specify the type of data being packed/unpacked.  In addition,\nspecial characters control the\nbyte order, size and alignment\n.\nEach format string consists of an optional prefix character which\ndescribes the overall properties of the data and one or more format\ncharacters which describe the actual data values and padding.\nByte Order, Size, and Alignment\n¶\nBy default, C types are represented in the machine’s native format and byte\norder, and properly aligned by skipping pad bytes if necessary (according to the\nrules used by the C compiler).\nThis behavior is chosen so\nthat the bytes of a packed struct correspond exactly to the memory layout\nof the corresponding C struct.\nWhether to use native byte ordering\nand padding or standard formats depends on the application.\nAlternatively, the first character of the format string can be used to indicate\nthe byte order, size and alignment of the packed data, according to the\nfollowing table:\nCharacter\nByte order\nSize\nAlignment\n@\nnative\nnative\nnative\n=\nnative\nstandard\nnone\n<\nlittle-endian\nstandard\nnone\n>\nbig-endian\nstandard\nnone\n!\nnetwork (= big-endian)\nstandard\nnone\nIf the first character is not one of these,\n'@'\nis assumed.\nNote\nThe number 1023 (\n0x3ff\nin hexadecimal) has the following byte representations:\n03\nff\nin big-endian (\n>\n)\nff\n03\nin little-endian (\n<\n)\nPython example:\n>>>\nimport\nstruct\n>>>\nstruct\n.\npack\n(\n'>h'\n,\n1023\n)\nb'\\x03\\xff'\n>>>\nstruct\n.\npack\n(\n'<h'\n,\n1023\n)\nb'\\xff\\x03'\nNative byte order is big-endian or little-endian, depending on the\nhost system. For example, Intel x86, AMD64 (x86-64), and Apple M1 are\nlittle-endian; IBM z and many legacy architectures are big-endian.\nUse\nsys.byteorder\nto check the endianness of your system.\nNative size and alignment are determined using the C compiler’s\nsizeof\nexpression.  This is always combined with native byte order.\nStandard size depends only on the format character;  see the table in\nthe\nFormat Characters\nsection.\nNote the difference between\n'@'\nand\n'='\n: both use native byte order, but\nthe size and alignment of the latter is standardized.\nThe form\n'!'\nrepresents the network byte order which is always big-endian\nas defined in\nIETF RFC 1700\n.\nThere is no way to indicate non-native byte order (force byte-swapping); use the\nappropriate choice of\n'<'\nor\n'>'\n.\nNotes:\nPadding is only automatically added between successive structure members.\nNo padding is added at the beginning or the end of the encoded struct.\nNo padding is added when using non-native size and alignment, e.g.\nwith ‘<’, ‘>’, ‘=’, and ‘!’.\nTo align the end of a structure to the alignment requirement of a\nparticular type, end the format with the code for that type with a repeat\ncount of zero.  See\nExamples\n.\nFormat Characters\n¶\nFormat characters have the following meaning; the conversion between C and\nPython values should be obvious given their types.  The ‘Standard size’ column\nrefers to the size of the packed value in bytes when using standard size; that\nis, when the format string starts with one of\n'<'\n,\n'>'\n,\n'!'\nor\n'='\n.  When using native size, the size of the packed value is\nplatform-dependent.\nFormat\nC Type\nPython type\nStandard size\nNotes\nx\npad byte\nno value\n(7)\nc\nchar\nbytes of length 1\n1\nb\nsigned\nchar\ninteger\n1\n(1), (2)\nB\nunsigned\nchar\ninteger\n1\n(2)\n?\n_Bool\nbool\n1\n(1)\nh\nshort\ninteger\n2\n(2)\nH\nunsigned\nshort\ninteger\n2\n(2)\ni\nint\ninteger\n4\n(2)\nI\nunsigned\nint\ninteger\n4\n(2)\nl\nlong\ninteger\n4\n(2)\nL\nunsigned\nlong\ninteger\n4\n(2)\nq\nlong\nlong\ninteger\n8\n(2)\nQ\nunsigned\nlong\nlong\ninteger\n8\n(2)\nn\nssize_t\ninteger\n(3)\nN\nsize_t\ninteger\n(3)\ne\n(6)\nfloat\n2\n(4)\nf\nfloat\nfloat\n4\n(4)\nd\ndouble\nfloat\n8\n(4)\ns\nchar\n[\n]\nbytes\n(9)\np\nchar\n[\n]\nbytes\n(8)\nP\nvoid\n*\ninteger\n(5)\nChanged in version 3.3:\nAdded support for the\n'n'\nand\n'N'\nformats.\nChanged in version 3.6:\nAdded support for the\n'e'\nformat.\nNotes:\nThe\n'?'\nconversion code corresponds to the\n_Bool\ntype\ndefined by C standards since C99.  In standard mode, it is\nrepresented by one byte.\nWhen attempting to pack a non-integer using any of the integer conversion\ncodes, if the non-integer has a\n__index__()\nmethod then that method is\ncalled to convert the argument to an integer before packing.\nChanged in version 3.2:\nAdded use of the\n__index__()\nmethod for non-integers.\nThe\n'n'\nand\n'N'\nconversion codes are only available for the native\nsize (selected as the default or with the\n'@'\nbyte order character).\nFor the standard size, you can use whichever of the other integer formats\nfits your application.\nFor the\n'f'\n,\n'd'\nand\n'e'\nconversion codes, the packed\nrepresentation uses the IEEE 754 binary32, binary64 or binary16 format (for\n'f'\n,\n'd'\nor\n'e'\nrespectively), regardless of the floating-point\nformat used by the platform.\nThe\n'P'\nformat character is only available for the native byte ordering\n(selected as the default or with the\n'@'\nbyte order character). The byte\norder character\n'='\nchooses to use little- or big-endian ordering based\non the host system. The struct module does not interpret this as native\nordering, so the\n'P'\nformat is not available.\nThe IEEE 754 binary16 “half precision” type was introduced in the 2008\nrevision of the\nIEEE 754 standard\n. It has a sign\nbit, a 5-bit exponent and 11-bit precision (with 10 bits explicitly stored),\nand can represent numbers between approximately\n6.1e-05\nand\n6.5e+04\nat full precision. This type is not widely supported by C compilers: on a\ntypical machine, an unsigned short can be used for storage, but not for math\noperations. See the Wikipedia page on the\nhalf-precision floating-point\nformat\nfor more information.\nWhen packing,\n'x'\ninserts one NUL byte.\nThe\n'p'\nformat character encodes a “Pascal string”, meaning a short\nvariable-length string stored in a\nfixed number of bytes\n, given by the count.\nThe first byte stored is the length of the string, or 255, whichever is\nsmaller.  The bytes of the string follow.  If the string passed in to\npack()\nis too long (longer than the count minus 1), only the leading\ncount-1\nbytes of the string are stored.  If the string is shorter than\ncount-1\n, it is padded with null bytes so that exactly count bytes in all\nare used.  Note that for\nunpack()\n, the\n'p'\nformat character consumes\ncount\nbytes, but that the string returned can never contain more than 255\nbytes.\nFor the\n's'\nformat character, the count is interpreted as the length of the\nbytes, not a repeat count like for the other format characters; for example,\n'10s'\nmeans a single 10-byte string mapping to or from a single\nPython byte string, while\n'10c'\nmeans 10\nseparate one byte character elements (e.g.,\ncccccccccc\n) mapping\nto or from ten different Python byte objects. (See\nExamples\nfor a concrete demonstration of the difference.)\nIf a count is not given, it defaults to 1.  For packing, the string is\ntruncated or padded with null bytes as appropriate to make it fit. For\nunpacking, the resulting bytes object always has exactly the specified number\nof bytes.  As a special case,\n'0s'\nmeans a single, empty string (while\n'0c'\nmeans 0 characters).\nA format character may be preceded by an integral repeat count.  For example,\nthe format string\n'4h'\nmeans exactly the same as\n'hhhh'\n.\nWhitespace characters between formats are ignored; a count and its format must\nnot contain whitespace though.\nWhen packing a value\nx\nusing one of the integer formats (\n'b'\n,\n'B'\n,\n'h'\n,\n'H'\n,\n'i'\n,\n'I'\n,\n'l'\n,\n'L'\n,\n'q'\n,\n'Q'\n), if\nx\nis outside the valid range for that format\nthen\nstruct.error\nis raised.\nChanged in version 3.1:\nPreviously, some of the integer formats wrapped out-of-range values and\nraised\nDeprecationWarning\ninstead of\nstruct.error\n.\nFor the\n'?'\nformat character, the return value is either\nTrue\nor\nFalse\n. When packing, the truth value of the argument object is used.\nEither 0 or 1 in the native or standard bool representation will be packed, and\nany non-zero value will be\nTrue\nwhen unpacking.\nExamples\n¶\nNote\nNative byte order examples (designated by the\n'@'\nformat prefix or\nlack of any prefix character) may not match what the reader’s\nmachine produces as\nthat depends on the platform and compiler.\nPack and unpack integers of three different sizes, using big endian\nordering:\n>>>\nfrom\nstruct\nimport\n*\n>>>\npack\n(\n\">bhl\"\n,\n1\n,\n2\n,\n3\n)\nb'\\x01\\x00\\x02\\x00\\x00\\x00\\x03'\n>>>\nunpack\n(\n'>bhl'\n,\nb\n'\n\\x01\\x00\\x02\\x00\\x00\\x00\\x03\n'\n)\n(1, 2, 3)\n>>>\ncalcsize\n(\n'>bhl'\n)\n7\nAttempt to pack an integer which is too large for the defined field:\n>>>\npack\n(\n\">h\"\n,\n99999\n)\nTraceback (most recent call last):\nFile\n\"<stdin>\"\n, line\n1\n, in\n<module>\nstruct.error\n:\n'h' format requires -32768 <= number <= 32767\nDemonstrate the difference between\n's'\nand\n'c'\nformat\ncharacters:\n>>>\npack\n(\n\"@ccc\"\n,\nb\n'1'\n,\nb\n'2'\n,\nb\n'3'\n)\nb'123'\n>>>\npack\n(\n\"@3s\"\n,\nb\n'123'\n)\nb'123'\nUnpacked fields can be named by assigning them to variables or by wrapping\nthe result in a named tuple:\n>>>\nrecord\n=\nb\n'raymond\n\\x32\\x12\\x08\\x01\\x08\n'\n>>>\nname\n,\nserialnum\n,\nschool\n,\ngradelevel\n=\nunpack\n(\n'<10sHHb'\n,\nrecord\n)\n>>>\nfrom\ncollections\nimport\nnamedtuple\n>>>\nStudent\n=\nnamedtuple\n(\n'Student'\n,\n'name serialnum school gradelevel'\n)\n>>>\nStudent\n.\n_make\n(\nunpack\n(\n'<10sHHb'\n,\nrecord\n))\nStudent(name=b'raymond   ', serialnum=4658, school=264, gradelevel=8)\nThe ordering of format characters may have an impact on size in native\nmode since padding is implicit. In standard mode, the user is\nresponsible for inserting any desired padding.\nNote in\nthe first\npack\ncall below that three NUL bytes were added after the\npacked\n'#'\nto align the following integer on a four-byte boundary.\nIn this example, the output was produced on a little endian machine:\n>>>\npack\n(\n'@ci'\n,\nb\n'#'\n,\n0x12131415\n)\nb'#\\x00\\x00\\x00\\x15\\x14\\x13\\x12'\n>>>\npack\n(\n'@ic'\n,\n0x12131415\n,\nb\n'#'\n)\nb'\\x15\\x14\\x13\\x12#'\n>>>\ncalcsize\n(\n'@ci'\n)\n8\n>>>\ncalcsize\n(\n'@ic'\n)\n5\nThe following format\n'llh0l'\nresults in two pad bytes being added\nat the end, assuming the platform’s longs are aligned on 4-byte boundaries:\n>>>\npack\n(\n'@llh0l'\n,\n1\n,\n2\n,\n3\n)\nb'\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x03\\x00\\x00'\nSee also\nModule\narray\nPacked binary storage of homogeneous data.\nModule\njson\nJSON encoder and decoder.\nModule\npickle\nPython object serialization.\nApplications\n¶\nTwo main applications for the\nstruct\nmodule exist, data\ninterchange between Python and C code within an application or another\napplication compiled using the same compiler (\nnative formats\n), and\ndata interchange between applications using agreed upon data layout\n(\nstandard formats\n).  Generally speaking, the format strings\nconstructed for these two domains are distinct.\nNative Formats\n¶\nWhen constructing format strings which mimic native layouts, the\ncompiler and machine architecture determine byte ordering and padding.\nIn such cases, the\n@\nformat character should be used to specify\nnative byte ordering and data sizes.  Internal pad bytes are normally inserted\nautomatically.  It is possible that a zero-repeat format code will be\nneeded at the end of a format string to round up to the correct\nbyte boundary for proper alignment of consecutive chunks of data.\nConsider these two simple examples (on a 64-bit, little-endian\nmachine):\n>>>\ncalcsize\n(\n'@lhl'\n)\n24\n>>>\ncalcsize\n(\n'@llh'\n)\n18\nData is not padded to an 8-byte boundary at the end of the second\nformat string without the use of extra padding.  A zero-repeat format\ncode solves that problem:\n>>>\ncalcsize\n(\n'@llh0l'\n)\n24\nThe\n'x'\nformat code can be used to specify the repeat, but for\nnative formats it is better to use a zero-repeat format like\n'0l'\n.\nBy default, native byte ordering and alignment is used, but it is\nbetter to be explicit and use the\n'@'\nprefix character.\nStandard Formats\n¶\nWhen exchanging data beyond your process such as networking or storage,\nbe precise.  Specify the exact byte order, size, and alignment.  Do\nnot assume they match the native order of a particular machine.\nFor example, network byte order is big-endian, while many popular CPUs\nare little-endian.  By defining this explicitly, the user need not\ncare about the specifics of the platform their code is running on.\nThe first character should typically be\n<\nor\n>\n(or\n!\n).  Padding is the responsibility of the programmer.  The\nzero-repeat format character won’t work.  Instead, the user must\nexplicitly add\n'x'\npad bytes where needed.  Revisiting the\nexamples from the previous section, we have:\n>>>\ncalcsize\n(\n'<qh6xq'\n)\n24\n>>>\npack\n(\n'<qh6xq'\n,\n1\n,\n2\n,\n3\n)\n==\npack\n(\n'@lhl'\n,\n1\n,\n2\n,\n3\n)\nTrue\n>>>\ncalcsize\n(\n'@llh'\n)\n18\n>>>\npack\n(\n'@llh'\n,\n1\n,\n2\n,\n3\n)\n==\npack\n(\n'<qqh'\n,\n1\n,\n2\n,\n3\n)\nTrue\n>>>\ncalcsize\n(\n'<qqh6x'\n)\n24\n>>>\ncalcsize\n(\n'@llh0l'\n)\n24\n>>>\npack\n(\n'@llh0l'\n,\n1\n,\n2\n,\n3\n)\n==\npack\n(\n'<qqh6x'\n,\n1\n,\n2\n,\n3\n)\nTrue\nThe above results (executed on a 64-bit machine) aren’t guaranteed to\nmatch when executed on different machines.  For example, the examples\nbelow were executed on a 32-bit machine:\n>>>\ncalcsize\n(\n'<qqh6x'\n)\n24\n>>>\ncalcsize\n(\n'@llh0l'\n)\n12\n>>>\npack\n(\n'@llh0l'\n,\n1\n,\n2\n,\n3\n)\n==\npack\n(\n'<qqh6x'\n,\n1\n,\n2\n,\n3\n)\nFalse\nClasses\n¶\nThe\nstruct\nmodule also defines the following type:\nclass\nstruct.\nStruct\n(\nformat\n)\n¶\nReturn a new Struct object which writes and reads binary data according to\nthe format string\nformat\n.  Creating a\nStruct\nobject once and calling its\nmethods is more efficient than calling module-level functions with the\nsame format since the format string is only compiled once.\nNote\nThe compiled versions of the most recent format strings passed to\nthe module-level functions are cached, so programs that use only a few\nformat strings needn’t worry about reusing a single\nStruct\ninstance.\nCompiled Struct objects support the following methods and attributes:\npack\n(\nv1\n,\nv2\n,\n...\n)\n¶\nIdentical to the\npack()\nfunction, using the compiled format.\n(\nlen(result)\nwill equal\nsize\n.)\npack_into\n(\nbuffer\n,\noffset\n,\nv1\n,\nv2\n,\n...\n)\n¶\nIdentical to the\npack_into()\nfunction, using the compiled format.\nunpack\n(\nbuffer\n)\n¶\nIdentical to the\nunpack()\nfunction, using the compiled format.\nThe buffer’s size in bytes must equal\nsize\n.\nunpack_from\n(\nbuffer\n,\noffset\n=\n0\n)\n¶\nIdentical to the\nunpack_from()\nfunction, using the compiled format.\nThe buffer’s size in bytes, starting at position\noffset\n, must be at least\nsize\n.\niter_unpack\n(\nbuffer\n)\n¶\nIdentical to the\niter_unpack()\nfunction, using the compiled format.\nThe buffer’s size in bytes must be a multiple of\nsize\n.\nAdded in version 3.4.\nformat\n¶\nThe format string used to construct this Struct object.\nChanged in version 3.7:\nThe format string type is now\nstr\ninstead of\nbytes\n.\nsize\n¶\nThe calculated size of the struct (and hence of the bytes object produced\nby the\npack()\nmethod) corresponding to\nformat\n.\nChanged in version 3.13:\nThe\nrepr()\nof structs has changed.  It\nis now:\n>>>\nStruct\n(\n'i'\n)\nStruct('i')\nTable of Contents\nstruct\n— Interpret bytes as packed binary data\nFunctions and Exceptions\nFormat Strings\nByte Order, Size, and Alignment\nFormat Characters\nExamples\nApplications\nNative Formats\nStandard Formats\nClasses\nPrevious topic\nBinary Data Services\nNext topic\ncodecs\n— Codec registry and base classes\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nBinary Data Services\n»\nstruct\n— Interpret bytes as packed binary data\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/struct.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12347.8053745
  },
  {
    "title": "Dealing with Bugs¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nDealing with Bugs\n|\nTheme\nAuto\nLight\nDark\n|\nDealing with Bugs\n¶\nPython is a mature programming language which has established a reputation for\nstability.  In order to maintain this reputation, the developers would like to\nknow of any deficiencies you find in Python.\nIt can be sometimes faster to fix bugs yourself and contribute patches to\nPython as it streamlines the process and involves less people. Learn how to\ncontribute\n.\nDocumentation bugs\n¶\nIf you find a bug in this documentation or would like to propose an improvement,\nplease submit a bug report on the\ntracker\n.  If you\nhave a suggestion on how to fix it, include that as well.\nYou can also open a discussion item on our\nDocumentation Discourse forum\n.\nIf you find a bug in the theme (HTML / CSS / JavaScript) of the\ndocumentation, please submit a bug report on the\npython-doc-theme bug\ntracker\n.\nIf you’re short on time, you can also email documentation bug reports to\ndocs\n@\npython\n.\norg\n(behavioral bugs can be sent to\npython-list\n@\npython\n.\norg\n).\n‘docs@’ is a mailing list run by volunteers; your request will be noticed,\nthough it may take a while to be processed.\nSee also\nDocumentation bugs\nA list of documentation bugs that have been submitted to the Python issue tracker.\nIssue Tracking\nOverview of the process involved in reporting an improvement on the tracker.\nHelping with Documentation\nComprehensive guide for individuals that are interested in contributing to Python documentation.\nDocumentation Translations\nA list of GitHub pages for documentation translation and their primary contacts.\nUsing the Python issue tracker\n¶\nIssue reports for Python itself should be submitted via the GitHub issues\ntracker (\nhttps://github.com/python/cpython/issues\n).\nThe GitHub issues tracker offers a web form which allows pertinent information\nto be entered and submitted to the developers.\nThe first step in filing a report is to determine whether the problem has\nalready been reported.  The advantage in doing so, aside from saving the\ndevelopers’ time, is that you learn what has been done to fix it; it may be that\nthe problem has already been fixed for the next release, or additional\ninformation is needed (in which case you are welcome to provide it if you can!).\nTo do this, search the tracker using the search box at the top of the page.\nIf the problem you’re reporting is not already in the list, log in to GitHub.\nIf you don’t already have a GitHub account, create a new account using the\n“Sign up” link.\nIt is not possible to submit a bug report anonymously.\nBeing now logged in, you can submit an issue.\nClick on the “New issue” button in the top bar to report a new issue.\nThe submission form has two fields, “Title” and “Comment”.\nFor the “Title” field, enter a\nvery\nshort description of the problem;\nfewer than ten words is good.\nIn the “Comment” field, describe the problem in detail, including what you\nexpected to happen and what did happen.  Be sure to include whether any\nextension modules were involved, and what hardware and software platform you\nwere using (including version information as appropriate).\nEach issue report will be reviewed by a developer who will determine what needs to\nbe done to correct the problem. You will receive an update each time an action is\ntaken on the issue.\nSee also\nHow to Report Bugs Effectively\nArticle which goes into some detail about how to create a useful bug report.\nThis describes what kind of information is useful and why it is useful.\nBug Writing Guidelines\nInformation about writing a good bug report.  Some of this is specific to the\nMozilla project, but describes general good practices.\nGetting started contributing to Python yourself\n¶\nBeyond just reporting bugs that you find, you are also welcome to submit\npatches to fix them.  You can find more information on how to get started\npatching Python in the\nPython Developer’s Guide\n.  If you have questions,\nthe\ncore-mentorship mailing list\nis a friendly place to get answers to\nany and all questions pertaining to the process of fixing issues in Python.\nTable of Contents\nDealing with Bugs\nDocumentation bugs\nUsing the Python issue tracker\nGetting started contributing to Python yourself\nPrevious topic\nAbout this documentation\nNext topic\nCopyright\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nDealing with Bugs\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/bugs.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12347.9960005
  },
  {
    "title": "Python Documentation contents¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Documentation contents\n|\nTheme\nAuto\nLight\nDark\n|\nPython Documentation contents\n¶\nWhat’s New in Python\nWhat’s New In Python 3.13\nSummary – Release Highlights\nNew Features\nA better interactive interpreter\nImproved error messages\nFree-threaded CPython\nAn experimental just-in-time (JIT) compiler\nDefined mutation semantics for\nlocals()\nSupport for mobile platforms\nOther Language Changes\nNew Modules\nImproved Modules\nargparse\narray\nast\nasyncio\nbase64\ncompileall\nconcurrent.futures\nconfigparser\ncopy\nctypes\ndbm\ndis\ndoctest\nemail\nenum\nfractions\nglob\nimportlib\nio\nipaddress\nitertools\nmarshal\nmath\nmimetypes\nmmap\nmultiprocessing\nos\nos.path\npathlib\npdb\nqueue\nrandom\nre\nshutil\nsite\nsqlite3\nssl\nstatistics\nsubprocess\nsys\ntempfile\ntime\ntkinter\ntraceback\ntypes\ntyping\nunicodedata\nvenv\nwarnings\nxml\nzipimport\nOptimizations\nRemoved Modules And APIs\nPEP 594: Remove “dead batteries” from the standard library\n2to3\nbuiltins\nconfigparser\nimportlib.metadata\nlocale\nopcode\noptparse\npathlib\nre\ntkinter.tix\nturtle\ntyping\nunittest\nurllib\nwebbrowser\nNew Deprecations\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nCPython Bytecode Changes\nC API Changes\nNew Features\nChanged C APIs\nLimited C API Changes\nRemoved C APIs\nDeprecated C APIs\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nBuild Changes\nPorting to Python 3.13\nChanges in the Python API\nChanges in the C API\nRegression Test Changes\nNotable changes in 3.13.1\nsys\nNotable changes in 3.13.4\nos.path\ntarfile\nWhat’s New In Python 3.12\nSummary – Release highlights\nNew Features\nPEP 695: Type Parameter Syntax\nPEP 701: Syntactic formalization of f-strings\nPEP 684: A Per-Interpreter GIL\nPEP 669: Low impact monitoring for CPython\nPEP 688: Making the buffer protocol accessible in Python\nPEP 709: Comprehension inlining\nImproved Error Messages\nNew Features Related to Type Hints\nPEP 692: Using\nTypedDict\nfor more precise\n**kwargs\ntyping\nPEP 698: Override Decorator for Static Typing\nOther Language Changes\nNew Modules\nImproved Modules\narray\nasyncio\ncalendar\ncsv\ndis\nfractions\nimportlib.resources\ninspect\nitertools\nmath\nos\nos.path\npathlib\nplatform\npdb\nrandom\nshutil\nsqlite3\nstatistics\nsys\ntempfile\nthreading\ntkinter\ntokenize\ntypes\ntyping\nunicodedata\nunittest\nuuid\nOptimizations\nCPython bytecode changes\nDemos and Tools\nDeprecated\nPending Removal in Python 3.13\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nRemoved\nasynchat and asyncore\nconfigparser\ndistutils\nensurepip\nenum\nftplib\ngzip\nhashlib\nimportlib\nimp\nio\nlocale\nsmtpd\nsqlite3\nssl\nunittest\nwebbrowser\nxml.etree.ElementTree\nzipimport\nOthers\nPorting to Python 3.12\nChanges in the Python API\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.12\nDeprecated\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nRemoved\nWhat’s New In Python 3.11\nSummary – Release highlights\nNew Features\nPEP 657: Fine-grained error locations in tracebacks\nPEP 654: Exception Groups and\nexcept*\nPEP 678: Exceptions can be enriched with notes\nWindows\npy.exe\nlauncher improvements\nNew Features Related to Type Hints\nPEP 646: Variadic generics\nPEP 655: Marking individual\nTypedDict\nitems as required or not-required\nPEP 673:\nSelf\ntype\nPEP 675: Arbitrary literal string type\nPEP 681: Data class transforms\nPEP 563 may not be the future\nOther Language Changes\nOther CPython Implementation Changes\nNew Modules\nImproved Modules\nasyncio\ncontextlib\ndataclasses\ndatetime\nenum\nfcntl\nfractions\nfunctools\ngzip\nhashlib\nIDLE and idlelib\ninspect\nlocale\nlogging\nmath\noperator\nos\npathlib\nre\nshutil\nsocket\nsqlite3\nstring\nsys\nsysconfig\ntempfile\nthreading\ntime\ntkinter\ntraceback\ntyping\nunicodedata\nunittest\nvenv\nwarnings\nzipfile\nOptimizations\nFaster CPython\nFaster Startup\nFrozen imports / Static code objects\nFaster Runtime\nCheaper, lazy Python frames\nInlined Python function calls\nPEP 659: Specializing Adaptive Interpreter\nMisc\nFAQ\nHow should I write my code to utilize these speedups?\nWill CPython 3.11 use more memory?\nI don’t see any speedups in my workload. Why?\nIs there a JIT compiler?\nAbout\nCPython bytecode changes\nNew opcodes\nReplaced opcodes\nChanged/removed opcodes\nDeprecated\nLanguage/Builtins\nModules\nStandard Library\nPending Removal in Python 3.12\nRemoved\nPorting to Python 3.11\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.11\nDeprecated\nPending Removal in Python 3.12\nRemoved\nNotable changes in 3.11.4\ntarfile\nNotable changes in 3.11.5\nOpenSSL\nWhat’s New In Python 3.10\nSummary – Release highlights\nNew Features\nParenthesized context managers\nBetter error messages\nSyntaxErrors\nIndentationErrors\nAttributeErrors\nNameErrors\nPEP 626: Precise line numbers for debugging and other tools\nPEP 634: Structural Pattern Matching\nSyntax and operations\nDeclarative approach\nSimple pattern: match to a literal\nBehavior without the wildcard\nPatterns with a literal and variable\nPatterns and classes\nPatterns with positional parameters\nNested patterns\nComplex patterns and the wildcard\nGuard\nOther Key Features\nOptional\nEncodingWarning\nand\nencoding=\"locale\"\noption\nNew Features Related to Type Hints\nPEP 604: New Type Union Operator\nPEP 612: Parameter Specification Variables\nPEP 613: TypeAlias\nPEP 647: User-Defined Type Guards\nOther Language Changes\nNew Modules\nImproved Modules\nasyncio\nargparse\narray\nasynchat, asyncore, smtpd\nbase64\nbdb\nbisect\ncodecs\ncollections.abc\ncontextlib\ncurses\ndataclasses\n__slots__\nKeyword-only fields\ndistutils\ndoctest\nencodings\nenum\nfileinput\nfaulthandler\ngc\nglob\nhashlib\nhmac\nIDLE and idlelib\nimportlib.metadata\ninspect\nitertools\nlinecache\nos\nos.path\npathlib\nplatform\npprint\npy_compile\npyclbr\nshelve\nstatistics\nsite\nsocket\nssl\nsqlite3\nsys\n_thread\nthreading\ntraceback\ntypes\ntyping\nunittest\nurllib.parse\nxml\nzipimport\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.10\nChanges in the Python syntax\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nBuild Changes\nC API Changes\nPEP 652: Maintaining the Stable ABI\nNew Features\nPorting to Python 3.10\nDeprecated\nRemoved\nNotable security feature in 3.10.7\nNotable security feature in 3.10.8\nNotable changes in 3.10.12\ntarfile\nWhat’s New In Python 3.9\nSummary – Release highlights\nYou should check for DeprecationWarning in your code\nNew Features\nDictionary Merge & Update Operators\nNew String Methods to Remove Prefixes and Suffixes\nType Hinting Generics in Standard Collections\nNew Parser\nOther Language Changes\nNew Modules\nzoneinfo\ngraphlib\nImproved Modules\nast\nasyncio\ncompileall\nconcurrent.futures\ncurses\ndatetime\ndistutils\nfcntl\nftplib\ngc\nhashlib\nhttp\nIDLE and idlelib\nimaplib\nimportlib\ninspect\nipaddress\nmath\nmultiprocessing\nnntplib\nos\npathlib\npdb\npoplib\npprint\npydoc\nrandom\nsignal\nsmtplib\nsocket\ntime\nsys\ntracemalloc\ntyping\nunicodedata\nvenv\nxml\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.9\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.9\nRemoved\nNotable changes in Python 3.9.1\ntyping\nmacOS 11.0 (Big Sur) and Apple Silicon Mac support\nNotable changes in Python 3.9.2\ncollections.abc\nurllib.parse\nNotable changes in Python 3.9.3\nNotable changes in Python 3.9.5\nurllib.parse\nNotable security feature in 3.9.14\nNotable changes in 3.9.17\ntarfile\nWhat’s New In Python 3.8\nSummary – Release highlights\nNew Features\nAssignment expressions\nPositional-only parameters\nParallel filesystem cache for compiled bytecode files\nDebug build uses the same ABI as release build\nf-strings support\n=\nfor self-documenting expressions and debugging\nPEP 578: Python Runtime Audit Hooks\nPEP 587: Python Initialization Configuration\nPEP 590: Vectorcall: a fast calling protocol for CPython\nPickle protocol 5 with out-of-band data buffers\nOther Language Changes\nNew Modules\nImproved Modules\nast\nasyncio\nbuiltins\ncollections\ncProfile\ncsv\ncurses\nctypes\ndatetime\nfunctools\ngc\ngettext\ngzip\nIDLE and idlelib\ninspect\nio\nitertools\njson.tool\nlogging\nmath\nmmap\nmultiprocessing\nos\nos.path\npathlib\npickle\nplistlib\npprint\npy_compile\nshlex\nshutil\nsocket\nssl\nstatistics\nsys\ntarfile\nthreading\ntokenize\ntkinter\ntime\ntyping\nunicodedata\nunittest\nvenv\nweakref\nxml\nxmlrpc\nOptimizations\nBuild and C API Changes\nDeprecated\nAPI and Feature Removals\nPorting to Python 3.8\nChanges in Python behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nDemos and Tools\nNotable changes in Python 3.8.1\nNotable changes in Python 3.8.2\nNotable changes in Python 3.8.3\nNotable changes in Python 3.8.8\nNotable changes in Python 3.8.9\nNotable changes in Python 3.8.10\nmacOS 11.0 (Big Sur) and Apple Silicon Mac support\nNotable changes in Python 3.8.10\nurllib.parse\nNotable changes in Python 3.8.12\nChanges in the Python API\nNotable security feature in 3.8.14\nNotable changes in 3.8.17\ntarfile\nWhat’s New In Python 3.7\nSummary – Release Highlights\nNew Features\nPEP 563: Postponed Evaluation of Annotations\nPEP 538: Legacy C Locale Coercion\nPEP 540: Forced UTF-8 Runtime Mode\nPEP 553: Built-in\nbreakpoint()\nPEP 539: New C API for Thread-Local Storage\nPEP 562: Customization of Access to Module Attributes\nPEP 564: New Time Functions With Nanosecond Resolution\nPEP 565: Show DeprecationWarning in\n__main__\nPEP 560: Core Support for\ntyping\nmodule and Generic Types\nPEP 552: Hash-based .pyc Files\nPEP 545: Python Documentation Translations\nPython Development Mode (-X dev)\nOther Language Changes\nNew Modules\ncontextvars\ndataclasses\nimportlib.resources\nImproved Modules\nargparse\nasyncio\nbinascii\ncalendar\ncollections\ncompileall\nconcurrent.futures\ncontextlib\ncProfile\ncrypt\ndatetime\ndbm\ndecimal\ndis\ndistutils\nenum\nfunctools\ngc\nhmac\nhttp.client\nhttp.server\nidlelib and IDLE\nimportlib\nio\nipaddress\nitertools\nlocale\nlogging\nmath\nmimetypes\nmsilib\nmultiprocessing\nos\npathlib\npdb\npy_compile\npydoc\nqueue\nre\nsignal\nsocket\nsocketserver\nsqlite3\nssl\nstring\nsubprocess\nsys\ntime\ntkinter\ntracemalloc\ntypes\nunicodedata\nunittest\nunittest.mock\nurllib.parse\nuu\nuuid\nwarnings\nxml\nxml.etree\nxmlrpc.server\nzipapp\nzipfile\nC API Changes\nBuild Changes\nOptimizations\nOther CPython Implementation Changes\nDeprecated Python Behavior\nDeprecated Python modules, functions and methods\naifc\nasyncio\ncollections\ndbm\nenum\ngettext\nimportlib\nlocale\nmacpath\nthreading\nsocket\nssl\nsunau\nsys\nwave\nDeprecated functions and types of the C API\nPlatform Support Removals\nAPI and Feature Removals\nModule Removals\nWindows-only Changes\nPorting to Python 3.7\nChanges in Python Behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nWindows-only Changes\nOther CPython implementation changes\nNotable changes in Python 3.7.1\nNotable changes in Python 3.7.2\nNotable changes in Python 3.7.6\nNotable changes in Python 3.7.10\nNotable changes in Python 3.7.11\nNotable security feature in 3.7.14\nWhat’s New In Python 3.6\nSummary – Release highlights\nNew Features\nPEP 498: Formatted string literals\nPEP 526: Syntax for variable annotations\nPEP 515: Underscores in Numeric Literals\nPEP 525: Asynchronous Generators\nPEP 530: Asynchronous Comprehensions\nPEP 487: Simpler customization of class creation\nPEP 487: Descriptor Protocol Enhancements\nPEP 519: Adding a file system path protocol\nPEP 495: Local Time Disambiguation\nPEP 529: Change Windows filesystem encoding to UTF-8\nPEP 528: Change Windows console encoding to UTF-8\nPEP 520: Preserving Class Attribute Definition Order\nPEP 468: Preserving Keyword Argument Order\nNew\ndict\nimplementation\nPEP 523: Adding a frame evaluation API to CPython\nPYTHONMALLOC environment variable\nDTrace and SystemTap probing support\nOther Language Changes\nNew Modules\nsecrets\nImproved Modules\narray\nast\nasyncio\nbinascii\ncmath\ncollections\nconcurrent.futures\ncontextlib\ndatetime\ndecimal\ndistutils\nemail\nencodings\nenum\nfaulthandler\nfileinput\nhashlib\nhttp.client\nidlelib and IDLE\nimportlib\ninspect\njson\nlogging\nmath\nmultiprocessing\nos\npathlib\npdb\npickle\npickletools\npydoc\nrandom\nre\nreadline\nrlcompleter\nshlex\nsite\nsqlite3\nsocket\nsocketserver\nssl\nstatistics\nstruct\nsubprocess\nsys\ntelnetlib\ntime\ntimeit\ntkinter\ntraceback\ntracemalloc\ntyping\nunicodedata\nunittest.mock\nurllib.request\nurllib.robotparser\nvenv\nwarnings\nwinreg\nwinsound\nxmlrpc.client\nzipfile\nzlib\nOptimizations\nBuild and C API Changes\nOther Improvements\nDeprecated\nNew Keywords\nDeprecated Python behavior\nDeprecated Python modules, functions and methods\nasynchat\nasyncore\ndbm\ndistutils\ngrp\nimportlib\nos\nre\nssl\ntkinter\nvenv\nxml\nDeprecated functions and types of the C API\nDeprecated Build Options\nRemoved\nAPI and Feature Removals\nPorting to Python 3.6\nChanges in ‘python’ Command Behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nNotable changes in Python 3.6.2\nNew\nmake\nregen-all\nbuild target\nRemoval of\nmake\ntouch\nbuild target\nNotable changes in Python 3.6.4\nNotable changes in Python 3.6.5\nNotable changes in Python 3.6.7\nNotable changes in Python 3.6.10\nNotable changes in Python 3.6.13\nNotable changes in Python 3.6.14\nWhat’s New In Python 3.5\nSummary – Release highlights\nNew Features\nPEP 492 - Coroutines with async and await syntax\nPEP 465 - A dedicated infix operator for matrix multiplication\nPEP 448 - Additional Unpacking Generalizations\nPEP 461 - percent formatting support for bytes and bytearray\nPEP 484 - Type Hints\nPEP 471 - os.scandir() function – a better and faster directory iterator\nPEP 475: Retry system calls failing with EINTR\nPEP 479: Change StopIteration handling inside generators\nPEP 485: A function for testing approximate equality\nPEP 486: Make the Python Launcher aware of virtual environments\nPEP 488: Elimination of PYO files\nPEP 489: Multi-phase extension module initialization\nOther Language Changes\nNew Modules\ntyping\nzipapp\nImproved Modules\nargparse\nasyncio\nbz2\ncgi\ncmath\ncode\ncollections\ncollections.abc\ncompileall\nconcurrent.futures\nconfigparser\ncontextlib\ncsv\ncurses\ndbm\ndifflib\ndistutils\ndoctest\nemail\nenum\nfaulthandler\nfunctools\nglob\ngzip\nheapq\nhttp\nhttp.client\nidlelib and IDLE\nimaplib\nimghdr\nimportlib\ninspect\nio\nipaddress\njson\nlinecache\nlocale\nlogging\nlzma\nmath\nmultiprocessing\noperator\nos\npathlib\npickle\npoplib\nre\nreadline\nselectors\nshutil\nsignal\nsmtpd\nsmtplib\nsndhdr\nsocket\nssl\nMemory BIO Support\nApplication-Layer Protocol Negotiation Support\nOther Changes\nsqlite3\nsubprocess\nsys\nsysconfig\ntarfile\nthreading\ntime\ntimeit\ntkinter\ntraceback\ntypes\nunicodedata\nunittest\nunittest.mock\nurllib\nwsgiref\nxmlrpc\nxml.sax\nzipfile\nOther module-level changes\nOptimizations\nBuild and C API Changes\nDeprecated\nNew Keywords\nDeprecated Python Behavior\nUnsupported Operating Systems\nDeprecated Python modules, functions and methods\nRemoved\nAPI and Feature Removals\nPorting to Python 3.5\nChanges in Python behavior\nChanges in the Python API\nChanges in the C API\nNotable changes in Python 3.5.4\nNew\nmake\nregen-all\nbuild target\nRemoval of\nmake\ntouch\nbuild target\nWhat’s New In Python 3.4\nSummary – Release Highlights\nNew Features\nPEP 453: Explicit Bootstrapping of PIP in Python Installations\nBootstrapping pip By Default\nDocumentation Changes\nPEP 446: Newly Created File Descriptors Are Non-Inheritable\nImprovements to Codec Handling\nPEP 451: A ModuleSpec Type for the Import System\nOther Language Changes\nNew Modules\nasyncio\nensurepip\nenum\npathlib\nselectors\nstatistics\ntracemalloc\nImproved Modules\nabc\naifc\nargparse\naudioop\nbase64\ncollections\ncolorsys\ncontextlib\ndbm\ndis\ndoctest\nemail\nfilecmp\nfunctools\ngc\nglob\nhashlib\nhmac\nhtml\nhttp\nidlelib and IDLE\nimportlib\ninspect\nipaddress\nlogging\nmarshal\nmmap\nmultiprocessing\noperator\nos\npdb\npickle\nplistlib\npoplib\npprint\npty\npydoc\nre\nresource\nselect\nshelve\nshutil\nsmtpd\nsmtplib\nsocket\nsqlite3\nssl\nstat\nstruct\nsubprocess\nsunau\nsys\ntarfile\ntextwrap\nthreading\ntraceback\ntypes\nurllib\nunittest\nvenv\nwave\nweakref\nxml.etree\nzipfile\nCPython Implementation Changes\nPEP 445: Customization of CPython Memory Allocators\nPEP 442: Safe Object Finalization\nPEP 456: Secure and Interchangeable Hash Algorithm\nPEP 436: Argument Clinic\nOther Build and C API Changes\nOther Improvements\nSignificant Optimizations\nDeprecated\nDeprecations in the Python API\nDeprecated Features\nRemoved\nOperating Systems No Longer Supported\nAPI and Feature Removals\nCode Cleanups\nPorting to Python 3.4\nChanges in ‘python’ Command Behavior\nChanges in the Python API\nChanges in the C API\nChanged in 3.4.3\nPEP 476: Enabling certificate verification by default for stdlib http clients\nWhat’s New In Python 3.3\nSummary – Release highlights\nPEP 405: Virtual Environments\nPEP 420: Implicit Namespace Packages\nPEP 3118: New memoryview implementation and buffer protocol documentation\nFeatures\nAPI changes\nPEP 393: Flexible String Representation\nFunctionality\nPerformance and resource usage\nPEP 397: Python Launcher for Windows\nPEP 3151: Reworking the OS and IO exception hierarchy\nPEP 380: Syntax for Delegating to a Subgenerator\nPEP 409: Suppressing exception context\nPEP 414: Explicit Unicode literals\nPEP 3155: Qualified name for classes and functions\nPEP 412: Key-Sharing Dictionary\nPEP 362: Function Signature Object\nPEP 421: Adding sys.implementation\nSimpleNamespace\nUsing importlib as the Implementation of Import\nNew APIs\nVisible Changes\nOther Language Changes\nA Finer-Grained Import Lock\nBuiltin functions and types\nNew Modules\nfaulthandler\nipaddress\nlzma\nImproved Modules\nabc\narray\nbase64\nbinascii\nbz2\ncodecs\ncollections\ncontextlib\ncrypt\ncurses\ndatetime\ndecimal\nFeatures\nAPI changes\nemail\nPolicy Framework\nProvisional Policy with New Header API\nOther API Changes\nftplib\nfunctools\ngc\nhmac\nhttp\nhtml\nimaplib\ninspect\nio\nitertools\nlogging\nmath\nmmap\nmultiprocessing\nnntplib\nos\npdb\npickle\npydoc\nre\nsched\nselect\nshlex\nshutil\nsignal\nsmtpd\nsmtplib\nsocket\nsocketserver\nsqlite3\nssl\nstat\nstruct\nsubprocess\nsys\ntarfile\ntempfile\ntextwrap\nthreading\ntime\ntypes\nunittest\nurllib\nwebbrowser\nxml.etree.ElementTree\nzlib\nOptimizations\nBuild and C API Changes\nDeprecated\nUnsupported Operating Systems\nDeprecated Python modules, functions and methods\nDeprecated functions and types of the C API\nDeprecated features\nPorting to Python 3.3\nPorting Python code\nPorting C code\nBuilding C extensions\nCommand Line Switch Changes\nWhat’s New In Python 3.2\nPEP 384: Defining a Stable ABI\nPEP 389: Argparse Command Line Parsing Module\nPEP 391:  Dictionary Based Configuration for Logging\nPEP 3148:  The\nconcurrent.futures\nmodule\nPEP 3147:  PYC Repository Directories\nPEP 3149: ABI Version Tagged .so Files\nPEP 3333: Python Web Server Gateway Interface v1.0.1\nOther Language Changes\nNew, Improved, and Deprecated Modules\nemail\nelementtree\nfunctools\nitertools\ncollections\nthreading\ndatetime and time\nmath\nabc\nio\nreprlib\nlogging\ncsv\ncontextlib\ndecimal and fractions\nftp\npopen\nselect\ngzip and zipfile\ntarfile\nhashlib\nast\nos\nshutil\nsqlite3\nhtml\nsocket\nssl\nnntp\ncertificates\nimaplib\nhttp.client\nunittest\nrandom\npoplib\nasyncore\ntempfile\ninspect\npydoc\ndis\ndbm\nctypes\nsite\nsysconfig\npdb\nconfigparser\nurllib.parse\nmailbox\nturtledemo\nMulti-threading\nOptimizations\nUnicode\nCodecs\nDocumentation\nIDLE\nCode Repository\nBuild and C API Changes\nPorting to Python 3.2\nWhat’s New In Python 3.1\nPEP 372: Ordered Dictionaries\nPEP 378: Format Specifier for Thousands Separator\nOther Language Changes\nNew, Improved, and Deprecated Modules\nOptimizations\nIDLE\nBuild and C API Changes\nPorting to Python 3.1\nWhat’s New In Python 3.0\nCommon Stumbling Blocks\nPrint Is A Function\nViews And Iterators Instead Of Lists\nOrdering Comparisons\nIntegers\nText Vs. Data Instead Of Unicode Vs. 8-bit\nOverview Of Syntax Changes\nNew Syntax\nChanged Syntax\nRemoved Syntax\nChanges Already Present In Python 2.6\nLibrary Changes\nPEP 3101\n: A New Approach To String Formatting\nChanges To Exceptions\nMiscellaneous Other Changes\nOperators And Special Methods\nBuiltins\nBuild and C API Changes\nPerformance\nPorting To Python 3.0\nWhat’s New in Python 2.7\nThe Future for Python 2.x\nChanges to the Handling of Deprecation Warnings\nPython 3.1 Features\nPEP 372: Adding an Ordered Dictionary to collections\nPEP 378: Format Specifier for Thousands Separator\nPEP 389: The argparse Module for Parsing Command Lines\nPEP 391: Dictionary-Based Configuration For Logging\nPEP 3106: Dictionary Views\nPEP 3137: The memoryview Object\nOther Language Changes\nInterpreter Changes\nOptimizations\nNew and Improved Modules\nNew module: importlib\nNew module: sysconfig\nttk: Themed Widgets for Tk\nUpdated module: unittest\nUpdated module: ElementTree 1.3\nBuild and C API Changes\nCapsules\nPort-Specific Changes: Windows\nPort-Specific Changes: Mac OS X\nPort-Specific Changes: FreeBSD\nOther Changes and Fixes\nPorting to Python 2.7\nNew Features Added to Python 2.7 Maintenance Releases\nTwo new environment variables for debug mode\nPEP 434: IDLE Enhancement Exception for All Branches\nPEP 466: Network Security Enhancements for Python 2.7\nPEP 477: Backport ensurepip (PEP 453) to Python 2.7\nBootstrapping pip By Default\nDocumentation Changes\nPEP 476: Enabling certificate verification by default for stdlib http clients\nPEP 493: HTTPS verification migration tools for Python 2.7\nNew\nmake\nregen-all\nbuild target\nRemoval of\nmake\ntouch\nbuild target\nAcknowledgements\nWhat’s New in Python 2.6\nPython 3.0\nChanges to the Development Process\nNew Issue Tracker: Roundup\nNew Documentation Format: reStructuredText Using Sphinx\nPEP 343: The ‘with’ statement\nWriting Context Managers\nThe contextlib module\nPEP 366: Explicit Relative Imports From a Main Module\nPEP 370: Per-user\nsite-packages\nDirectory\nPEP 371: The\nmultiprocessing\nPackage\nPEP 3101: Advanced String Formatting\nPEP 3105:\nprint\nAs a Function\nPEP 3110: Exception-Handling Changes\nPEP 3112: Byte Literals\nPEP 3116: New I/O Library\nPEP 3118: Revised Buffer Protocol\nPEP 3119: Abstract Base Classes\nPEP 3127: Integer Literal Support and Syntax\nPEP 3129: Class Decorators\nPEP 3141: A Type Hierarchy for Numbers\nThe\nfractions\nModule\nOther Language Changes\nOptimizations\nInterpreter Changes\nNew and Improved Modules\nThe\nast\nmodule\nThe\nfuture_builtins\nmodule\nThe\njson\nmodule: JavaScript Object Notation\nThe\nplistlib\nmodule: A Property-List Parser\nctypes Enhancements\nImproved SSL Support\nDeprecations and Removals\nBuild and C API Changes\nPort-Specific Changes: Windows\nPort-Specific Changes: Mac OS X\nPort-Specific Changes: IRIX\nPorting to Python 2.6\nAcknowledgements\nWhat’s New in Python 2.5\nPEP 308: Conditional Expressions\nPEP 309: Partial Function Application\nPEP 314: Metadata for Python Software Packages v1.1\nPEP 328: Absolute and Relative Imports\nPEP 338: Executing Modules as Scripts\nPEP 341: Unified try/except/finally\nPEP 342: New Generator Features\nPEP 343: The ‘with’ statement\nWriting Context Managers\nThe contextlib module\nPEP 352: Exceptions as New-Style Classes\nPEP 353: Using ssize_t as the index type\nPEP 357: The ‘__index__’ method\nOther Language Changes\nInteractive Interpreter Changes\nOptimizations\nNew, Improved, and Removed Modules\nThe ctypes package\nThe ElementTree package\nThe hashlib package\nThe sqlite3 package\nThe wsgiref package\nBuild and C API Changes\nPort-Specific Changes\nPorting to Python 2.5\nAcknowledgements\nWhat’s New in Python 2.4\nPEP 218: Built-In Set Objects\nPEP 237: Unifying Long Integers and Integers\nPEP 289: Generator Expressions\nPEP 292: Simpler String Substitutions\nPEP 318: Decorators for Functions and Methods\nPEP 322: Reverse Iteration\nPEP 324: New subprocess Module\nPEP 327: Decimal Data Type\nWhy is Decimal needed?\nThe\nDecimal\ntype\nThe\nContext\ntype\nPEP 328: Multi-line Imports\nPEP 331: Locale-Independent Float/String Conversions\nOther Language Changes\nOptimizations\nNew, Improved, and Deprecated Modules\ncookielib\ndoctest\nBuild and C API Changes\nPort-Specific Changes\nPorting to Python 2.4\nAcknowledgements\nWhat’s New in Python 2.3\nPEP 218: A Standard Set Datatype\nPEP 255: Simple Generators\nPEP 263: Source Code Encodings\nPEP 273: Importing Modules from ZIP Archives\nPEP 277: Unicode file name support for Windows NT\nPEP 278: Universal Newline Support\nPEP 279: enumerate()\nPEP 282: The logging Package\nPEP 285: A Boolean Type\nPEP 293: Codec Error Handling Callbacks\nPEP 301: Package Index and Metadata for Distutils\nPEP 302: New Import Hooks\nPEP 305: Comma-separated Files\nPEP 307: Pickle Enhancements\nExtended Slices\nOther Language Changes\nString Changes\nOptimizations\nNew, Improved, and Deprecated Modules\nDate/Time Type\nThe optparse Module\nPymalloc: A Specialized Object Allocator\nBuild and C API Changes\nPort-Specific Changes\nOther Changes and Fixes\nPorting to Python 2.3\nAcknowledgements\nWhat’s New in Python 2.2\nIntroduction\nPEPs 252 and 253: Type and Class Changes\nOld and New Classes\nDescriptors\nMultiple Inheritance: The Diamond Rule\nAttribute Access\nRelated Links\nPEP 234: Iterators\nPEP 255: Simple Generators\nPEP 237: Unifying Long Integers and Integers\nPEP 238: Changing the Division Operator\nUnicode Changes\nPEP 227: Nested Scopes\nNew and Improved Modules\nInterpreter Changes and Fixes\nOther Changes and Fixes\nAcknowledgements\nWhat’s New in Python 2.1\nIntroduction\nPEP 227: Nested Scopes\nPEP 236: __future__ Directives\nPEP 207: Rich Comparisons\nPEP 230: Warning Framework\nPEP 229: New Build System\nPEP 205: Weak References\nPEP 232: Function Attributes\nPEP 235: Importing Modules on Case-Insensitive Platforms\nPEP 217: Interactive Display Hook\nPEP 208: New Coercion Model\nPEP 241: Metadata in Python Packages\nNew and Improved Modules\nOther Changes and Fixes\nAcknowledgements\nWhat’s New in Python 2.0\nIntroduction\nWhat About Python 1.6?\nNew Development Process\nUnicode\nList Comprehensions\nAugmented Assignment\nString Methods\nGarbage Collection of Cycles\nOther Core Changes\nMinor Language Changes\nChanges to Built-in Functions\nPorting to 2.0\nExtending/Embedding Changes\nDistutils: Making Modules Easy to Install\nXML Modules\nSAX2 Support\nDOM Support\nRelationship to PyXML\nModule changes\nNew modules\nIDLE Improvements\nDeleted and Deprecated Modules\nAcknowledgements\nChangelog\nPython next\nTools/Demos\nTests\nSecurity\nLibrary\nDocumentation\nCore and Builtins\nBuild\nPython 3.13.5 final\nWindows\nTests\nLibrary\nCore and Builtins\nC API\nPython 3.13.4 final\nWindows\nTests\nSecurity\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.3 final\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.2 final\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.1 final\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.0 final\nCore and Builtins\nPython 3.13.0 release candidate 3\nmacOS\nWindows\nTests\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.0 release candidate 2\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nIDLE\nCore and Builtins\nC API\nBuild\nPython 3.13.0 release candidate 1\nTests\nSecurity\nLibrary\nIDLE\nCore and Builtins\nC API\nBuild\nPython 3.13.0 beta 4\nTests\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.0 beta 3\nCore and Builtins\nLibrary\nBuild\nC API\nPython 3.13.0 beta 2\nSecurity\nCore and Builtins\nLibrary\nTests\nBuild\nWindows\nC API\nPython 3.13.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.13.0 alpha 6\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nC API\nPython 3.13.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.13.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.13.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.13.0 alpha 2\nCore and Builtins\nLibrary\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.13.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.12.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.12.0 alpha 7\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nC API\nPython 3.12.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.12.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nPython 3.12.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.12.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.12.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.12.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.11.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.11.0 alpha 7\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.11.0 alpha 6\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\nPython 3.11.0 alpha 5\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.11.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.11.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.11.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.11.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.10.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 7\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\nPython 3.10.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nmacOS\nTools/Demos\nC API\nPython 3.10.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.10.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.9.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.9.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.9.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.9.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\nPython 3.9.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nBuild\nIDLE\nC API\nPython 3.9.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.9.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.8.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.8.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.8.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nC API\nPython 3.8.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nTests\nWindows\nIDLE\nPython 3.8.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.7.0 final\nLibrary\nC API\nPython 3.7.0 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nBuild\nWindows\nIDLE\nPython 3.7.0 beta 5\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nmacOS\nIDLE\nPython 3.7.0 beta 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nPython 3.7.0 beta 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.7.0 beta 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nPython 3.7.0 beta 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.7.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nWindows\nTools/Demos\nC API\nPython 3.7.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.7.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nBuild\nIDLE\nC API\nPython 3.7.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nC API\nPython 3.6.6 final\nPython 3.6.6 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.6.5 final\nTests\nBuild\nPython 3.6.5 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.6.4 final\nPython 3.6.4 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.6.3 final\nLibrary\nBuild\nPython 3.6.3 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nPython 3.6.2 final\nPython 3.6.2 release candidate 2\nSecurity\nPython 3.6.2 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nBuild\nDocumentation\nTools/Demos\nTests\nWindows\nPython 3.6.1 final\nCore and Builtins\nBuild\nPython 3.6.1 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nWindows\nC API\nDocumentation\nTests\nBuild\nPython 3.6.0 final\nPython 3.6.0 release candidate 2\nCore and Builtins\nTools/Demos\nWindows\nBuild\nPython 3.6.0 release candidate 1\nCore and Builtins\nLibrary\nC API\nDocumentation\nTools/Demos\nPython 3.6.0 beta 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nPython 3.6.0 beta 3\nCore and Builtins\nLibrary\nWindows\nBuild\nTests\nPython 3.6.0 beta 2\nCore and Builtins\nLibrary\nWindows\nC API\nBuild\nTests\nPython 3.6.0 beta 1\nCore and Builtins\nLibrary\nIDLE\nC API\nTests\nBuild\nTools/Demos\nWindows\nPython 3.6.0 alpha 4\nCore and Builtins\nLibrary\nIDLE\nTests\nWindows\nBuild\nPython 3.6.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nBuild\nTools/Demos\nDocumentation\nTests\nPython 3.6.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nWindows\nBuild\nC API\nTools/Demos\nPython 3.6.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nC API\nPython 3.5.5 final\nPython 3.5.5 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nPython 3.5.4 final\nLibrary\nPython 3.5.4 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nC API\nPython 3.5.3 final\nPython 3.5.3 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nDocumentation\nTests\nTools/Demos\nWindows\nBuild\nPython 3.5.2 final\nCore and Builtins\nTests\nIDLE\nPython 3.5.2 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nPython 3.5.1 final\nCore and Builtins\nWindows\nPython 3.5.1 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nPython 3.5.0 final\nBuild\nPython 3.5.0 release candidate 4\nLibrary\nBuild\nPython 3.5.0 release candidate 3\nCore and Builtins\nLibrary\nPython 3.5.0 release candidate 2\nCore and Builtins\nLibrary\nPython 3.5.0 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nPython 3.5.0 beta 4\nCore and Builtins\nLibrary\nBuild\nPython 3.5.0 beta 3\nCore and Builtins\nLibrary\nTests\nDocumentation\nBuild\nPython 3.5.0 beta 2\nCore and Builtins\nLibrary\nPython 3.5.0 beta 1\nCore and Builtins\nLibrary\nIDLE\nTests\nDocumentation\nTools/Demos\nPython 3.5.0 alpha 4\nCore and Builtins\nLibrary\nBuild\nTests\nTools/Demos\nC API\nPython 3.5.0 alpha 3\nCore and Builtins\nLibrary\nBuild\nTests\nTools/Demos\nPython 3.5.0 alpha 2\nCore and Builtins\nLibrary\nBuild\nC API\nWindows\nPython 3.5.0 alpha 1\nCore and Builtins\nLibrary\nIDLE\nBuild\nC API\nDocumentation\nTests\nTools/Demos\nWindows\nThe Python Tutorial\n1. Whetting Your Appetite\n2. Using the Python Interpreter\n2.1. Invoking the Interpreter\n2.1.1. Argument Passing\n2.1.2. Interactive Mode\n2.2. The Interpreter and Its Environment\n2.2.1. Source Code Encoding\n3. An Informal Introduction to Python\n3.1. Using Python as a Calculator\n3.1.1. Numbers\n3.1.2. Text\n3.1.3. Lists\n3.2. First Steps Towards Programming\n4. More Control Flow Tools\n4.1.\nif\nStatements\n4.2.\nfor\nStatements\n4.3. The\nrange()\nFunction\n4.4.\nbreak\nand\ncontinue\nStatements\n4.5.\nelse\nClauses on Loops\n4.6.\npass\nStatements\n4.7.\nmatch\nStatements\n4.8. Defining Functions\n4.9. More on Defining Functions\n4.9.1. Default Argument Values\n4.9.2. Keyword Arguments\n4.9.3. Special parameters\n4.9.3.1. Positional-or-Keyword Arguments\n4.9.3.2. Positional-Only Parameters\n4.9.3.3. Keyword-Only Arguments\n4.9.3.4. Function Examples\n4.9.3.5. Recap\n4.9.4. Arbitrary Argument Lists\n4.9.5. Unpacking Argument Lists\n4.9.6. Lambda Expressions\n4.9.7. Documentation Strings\n4.9.8. Function Annotations\n4.10. Intermezzo: Coding Style\n5. Data Structures\n5.1. More on Lists\n5.1.1. Using Lists as Stacks\n5.1.2. Using Lists as Queues\n5.1.3. List Comprehensions\n5.1.4. Nested List Comprehensions\n5.2. The\ndel\nstatement\n5.3. Tuples and Sequences\n5.4. Sets\n5.5. Dictionaries\n5.6. Looping Techniques\n5.7. More on Conditions\n5.8. Comparing Sequences and Other Types\n6. Modules\n6.1. More on Modules\n6.1.1. Executing modules as scripts\n6.1.2. The Module Search Path\n6.1.3. “Compiled” Python files\n6.2. Standard Modules\n6.3. The\ndir()\nFunction\n6.4. Packages\n6.4.1. Importing * From a Package\n6.4.2. Intra-package References\n6.4.3. Packages in Multiple Directories\n7. Input and Output\n7.1. Fancier Output Formatting\n7.1.1. Formatted String Literals\n7.1.2. The String format() Method\n7.1.3. Manual String Formatting\n7.1.4. Old string formatting\n7.2. Reading and Writing Files\n7.2.1. Methods of File Objects\n7.2.2. Saving structured data with\njson\n8. Errors and Exceptions\n8.1. Syntax Errors\n8.2. Exceptions\n8.3. Handling Exceptions\n8.4. Raising Exceptions\n8.5. Exception Chaining\n8.6. User-defined Exceptions\n8.7. Defining Clean-up Actions\n8.8. Predefined Clean-up Actions\n8.9. Raising and Handling Multiple Unrelated Exceptions\n8.10. Enriching Exceptions with Notes\n9. Classes\n9.1. A Word About Names and Objects\n9.2. Python Scopes and Namespaces\n9.2.1. Scopes and Namespaces Example\n9.3. A First Look at Classes\n9.3.1. Class Definition Syntax\n9.3.2. Class Objects\n9.3.3. Instance Objects\n9.3.4. Method Objects\n9.3.5. Class and Instance Variables\n9.4. Random Remarks\n9.5. Inheritance\n9.5.1. Multiple Inheritance\n9.6. Private Variables\n9.7. Odds and Ends\n9.8. Iterators\n9.9. Generators\n9.10. Generator Expressions\n10. Brief Tour of the Standard Library\n10.1. Operating System Interface\n10.2. File Wildcards\n10.3. Command Line Arguments\n10.4. Error Output Redirection and Program Termination\n10.5. String Pattern Matching\n10.6. Mathematics\n10.7. Internet Access\n10.8. Dates and Times\n10.9. Data Compression\n10.10. Performance Measurement\n10.11. Quality Control\n10.12. Batteries Included\n11. Brief Tour of the Standard Library — Part II\n11.1. Output Formatting\n11.2. Templating\n11.3. Working with Binary Data Record Layouts\n11.4. Multi-threading\n11.5. Logging\n11.6. Weak References\n11.7. Tools for Working with Lists\n11.8. Decimal Floating-Point Arithmetic\n12. Virtual Environments and Packages\n12.1. Introduction\n12.2. Creating Virtual Environments\n12.3. Managing Packages with pip\n13. What Now?\n14. Interactive Input Editing and History Substitution\n14.1. Tab Completion and History Editing\n14.2. Alternatives to the Interactive Interpreter\n15. Floating-Point Arithmetic:  Issues and Limitations\n15.1. Representation Error\n16. Appendix\n16.1. Interactive Mode\n16.1.1. Error Handling\n16.1.2. Executable Python Scripts\n16.1.3. The Interactive Startup File\n16.1.4. The Customization Modules\nPython Setup and Usage\n1. Command line and environment\n1.1. Command line\n1.1.1. Interface options\n1.1.2. Generic options\n1.1.3. Miscellaneous options\n1.1.4. Controlling color\n1.1.5. Options you shouldn’t use\n1.2. Environment variables\n1.2.1. Debug-mode variables\n2. Using Python on Unix platforms\n2.1. Getting and installing the latest version of Python\n2.1.1. On Linux\n2.1.1.1. Installing IDLE\n2.1.2. On FreeBSD and OpenBSD\n2.2. Building Python\n2.3. Python-related paths and files\n2.4. Miscellaneous\n2.5. Custom OpenSSL\n3. Configure Python\n3.1. Build Requirements\n3.2. Generated files\n3.2.1. configure script\n3.3. Configure Options\n3.3.1. General Options\n3.3.2. C compiler options\n3.3.3. Linker options\n3.3.4. Options for third-party dependencies\n3.3.5. WebAssembly Options\n3.3.6. Install Options\n3.3.7. Performance options\n3.3.8. Python Debug Build\n3.3.9. Debug options\n3.3.10. Linker options\n3.3.11. Libraries options\n3.3.12. Security Options\n3.3.13. macOS Options\n3.3.14. iOS Options\n3.3.15. Cross Compiling Options\n3.4. Python Build System\n3.4.1. Main files of the build system\n3.4.2. Main build steps\n3.4.3. Main Makefile targets\n3.4.3.1. make\n3.4.3.2. make platform\n3.4.3.3. make profile-opt\n3.4.3.4. make clean\n3.4.3.5. make distclean\n3.4.3.6. make install\n3.4.3.7. make test\n3.4.3.8. make buildbottest\n3.4.3.9. make regen-all\n3.4.4. C extensions\n3.5. Compiler and linker flags\n3.5.1. Preprocessor flags\n3.5.2. Compiler flags\n3.5.3. Linker flags\n4. Using Python on Windows\n4.1. The full installer\n4.1.1. Installation steps\n4.1.2. Removing the MAX_PATH Limitation\n4.1.3. Installing Without UI\n4.1.4. Installing Without Downloading\n4.1.5. Modifying an install\n4.1.6. Installing Free-threaded Binaries\n4.2. The Microsoft Store package\n4.2.1. Known issues\n4.2.1.1. Redirection of local data, registry, and temporary paths\n4.3. The nuget.org packages\n4.3.1. Free-threaded packages\n4.4. The embeddable package\n4.4.1. Python Application\n4.4.2. Embedding Python\n4.5. Alternative bundles\n4.6. Configuring Python\n4.6.1. Excursus: Setting environment variables\n4.6.2. Finding the Python executable\n4.7. UTF-8 mode\n4.8. Python Launcher for Windows\n4.8.1. Getting started\n4.8.1.1. From the command-line\n4.8.1.2. Virtual environments\n4.8.1.3. From a script\n4.8.1.4. From file associations\n4.8.2. Shebang Lines\n4.8.3. Arguments in shebang lines\n4.8.4. Customization\n4.8.4.1. Customization via INI files\n4.8.4.2. Customizing default Python versions\n4.8.5. Diagnostics\n4.8.6. Dry Run\n4.8.7. Install on demand\n4.8.8. Return codes\n4.9. Finding modules\n4.10. Additional modules\n4.10.1. PyWin32\n4.10.2. cx_Freeze\n4.11. Compiling Python on Windows\n4.12. Other Platforms\n5. Using Python on macOS\n5.1. Using Python for macOS from\npython.org\n5.1.1. Installation steps\n5.1.2. How to run a Python script\n5.2. Alternative Distributions\n5.3. Installing Additional Python Packages\n5.4. GUI Programming\n5.5. Advanced Topics\n5.5.1. Installing Free-threaded Binaries\n5.5.2. Installing using the command line\n5.5.3. Distributing Python Applications\n5.5.4. App Store Compliance\n5.6. Other Resources\n6. Using Python on Android\n6.1. Adding Python to an Android app\n6.2. Building a Python package for Android\n7. Using Python on iOS\n7.1. Python at runtime on iOS\n7.1.1. iOS version compatibility\n7.1.2. Platform identification\n7.1.3. Standard library availability\n7.1.4. Binary extension modules\n7.1.5. Compiler stub binaries\n7.2. Installing Python on iOS\n7.2.1. Tools for building iOS apps\n7.2.2. Adding Python to an iOS project\n7.2.3. Testing a Python package\n7.3. App Store Compliance\n8. Editors and IDEs\n8.1. IDLE — Python editor and shell\n8.2. Other Editors and IDEs\nThe Python Language Reference\n1. Introduction\n1.1. Alternate Implementations\n1.2. Notation\n2. Lexical analysis\n2.1. Line structure\n2.1.1. Logical lines\n2.1.2. Physical lines\n2.1.3. Comments\n2.1.4. Encoding declarations\n2.1.5. Explicit line joining\n2.1.6. Implicit line joining\n2.1.7. Blank lines\n2.1.8. Indentation\n2.1.9. Whitespace between tokens\n2.2. Other tokens\n2.3. Identifiers and keywords\n2.3.1. Keywords\n2.3.2. Soft Keywords\n2.3.3. Reserved classes of identifiers\n2.4. Literals\n2.4.1. String and Bytes literals\n2.4.1.1. Escape sequences\n2.4.2. String literal concatenation\n2.4.3. f-strings\n2.4.4. Numeric literals\n2.4.5. Integer literals\n2.4.6. Floating-point literals\n2.4.7. Imaginary literals\n2.5. Operators\n2.6. Delimiters\n3. Data model\n3.1. Objects, values and types\n3.2. The standard type hierarchy\n3.2.1. None\n3.2.2. NotImplemented\n3.2.3. Ellipsis\n3.2.4.\nnumbers.Number\n3.2.4.1.\nnumbers.Integral\n3.2.4.2.\nnumbers.Real\n(\nfloat\n)\n3.2.4.3.\nnumbers.Complex\n(\ncomplex\n)\n3.2.5. Sequences\n3.2.5.1. Immutable sequences\n3.2.5.2. Mutable sequences\n3.2.6. Set types\n3.2.7. Mappings\n3.2.7.1. Dictionaries\n3.2.8. Callable types\n3.2.8.1. User-defined functions\n3.2.8.1.1. Special read-only attributes\n3.2.8.1.2. Special writable attributes\n3.2.8.2. Instance methods\n3.2.8.3. Generator functions\n3.2.8.4. Coroutine functions\n3.2.8.5. Asynchronous generator functions\n3.2.8.6. Built-in functions\n3.2.8.7. Built-in methods\n3.2.8.8. Classes\n3.2.8.9. Class Instances\n3.2.9. Modules\n3.2.9.1. Import-related attributes on module objects\n3.2.9.2. Other writable attributes on module objects\n3.2.9.3. Module dictionaries\n3.2.10. Custom classes\n3.2.10.1. Special attributes\n3.2.10.2. Special methods\n3.2.11. Class instances\n3.2.11.1. Special attributes\n3.2.12. I/O objects (also known as file objects)\n3.2.13. Internal types\n3.2.13.1. Code objects\n3.2.13.1.1. Special read-only attributes\n3.2.13.1.2. Methods on code objects\n3.2.13.2. Frame objects\n3.2.13.2.1. Special read-only attributes\n3.2.13.2.2. Special writable attributes\n3.2.13.2.3. Frame object methods\n3.2.13.3. Traceback objects\n3.2.13.4. Slice objects\n3.2.13.5. Static method objects\n3.2.13.6. Class method objects\n3.3. Special method names\n3.3.1. Basic customization\n3.3.2. Customizing attribute access\n3.3.2.1. Customizing module attribute access\n3.3.2.2. Implementing Descriptors\n3.3.2.3. Invoking Descriptors\n3.3.2.4. __slots__\n3.3.3. Customizing class creation\n3.3.3.1. Metaclasses\n3.3.3.2. Resolving MRO entries\n3.3.3.3. Determining the appropriate metaclass\n3.3.3.4. Preparing the class namespace\n3.3.3.5. Executing the class body\n3.3.3.6. Creating the class object\n3.3.3.7. Uses for metaclasses\n3.3.4. Customizing instance and subclass checks\n3.3.5. Emulating generic types\n3.3.5.1. The purpose of\n__class_getitem__\n3.3.5.2.\n__class_getitem__\nversus\n__getitem__\n3.3.6. Emulating callable objects\n3.3.7. Emulating container types\n3.3.8. Emulating numeric types\n3.3.9. With Statement Context Managers\n3.3.10. Customizing positional arguments in class pattern matching\n3.3.11. Emulating buffer types\n3.3.12. Special method lookup\n3.4. Coroutines\n3.4.1. Awaitable Objects\n3.4.2. Coroutine Objects\n3.4.3. Asynchronous Iterators\n3.4.4. Asynchronous Context Managers\n4. Execution model\n4.1. Structure of a program\n4.2. Naming and binding\n4.2.1. Binding of names\n4.2.2. Resolution of names\n4.2.3. Annotation scopes\n4.2.4. Lazy evaluation\n4.2.5. Builtins and restricted execution\n4.2.6. Interaction with dynamic features\n4.3. Exceptions\n5. The import system\n5.1.\nimportlib\n5.2. Packages\n5.2.1. Regular packages\n5.2.2. Namespace packages\n5.3. Searching\n5.3.1. The module cache\n5.3.2. Finders and loaders\n5.3.3. Import hooks\n5.3.4. The meta path\n5.4. Loading\n5.4.1. Loaders\n5.4.2. Submodules\n5.4.3. Module specs\n5.4.4. __path__ attributes on modules\n5.4.5. Module reprs\n5.4.6. Cached bytecode invalidation\n5.5. The Path Based Finder\n5.5.1. Path entry finders\n5.5.2. Path entry finder protocol\n5.6. Replacing the standard import system\n5.7. Package Relative Imports\n5.8. Special considerations for __main__\n5.8.1. __main__.__spec__\n5.9. References\n6. Expressions\n6.1. Arithmetic conversions\n6.2. Atoms\n6.2.1. Identifiers (Names)\n6.2.1.1. Private name mangling\n6.2.2. Literals\n6.2.3. Parenthesized forms\n6.2.4. Displays for lists, sets and dictionaries\n6.2.5. List displays\n6.2.6. Set displays\n6.2.7. Dictionary displays\n6.2.8. Generator expressions\n6.2.9. Yield expressions\n6.2.9.1. Generator-iterator methods\n6.2.9.2. Examples\n6.2.9.3. Asynchronous generator functions\n6.2.9.4. Asynchronous generator-iterator methods\n6.3. Primaries\n6.3.1. Attribute references\n6.3.2. Subscriptions\n6.3.3. Slicings\n6.3.4. Calls\n6.4. Await expression\n6.5. The power operator\n6.6. Unary arithmetic and bitwise operations\n6.7. Binary arithmetic operations\n6.8. Shifting operations\n6.9. Binary bitwise operations\n6.10. Comparisons\n6.10.1. Value comparisons\n6.10.2. Membership test operations\n6.10.3. Identity comparisons\n6.11. Boolean operations\n6.12. Assignment expressions\n6.13. Conditional expressions\n6.14. Lambdas\n6.15. Expression lists\n6.16. Evaluation order\n6.17. Operator precedence\n7. Simple statements\n7.1. Expression statements\n7.2. Assignment statements\n7.2.1. Augmented assignment statements\n7.2.2. Annotated assignment statements\n7.3. The\nassert\nstatement\n7.4. The\npass\nstatement\n7.5. The\ndel\nstatement\n7.6. The\nreturn\nstatement\n7.7. The\nyield\nstatement\n7.8. The\nraise\nstatement\n7.9. The\nbreak\nstatement\n7.10. The\ncontinue\nstatement\n7.11. The\nimport\nstatement\n7.11.1. Future statements\n7.12. The\nglobal\nstatement\n7.13. The\nnonlocal\nstatement\n7.14. The\ntype\nstatement\n8. Compound statements\n8.1. The\nif\nstatement\n8.2. The\nwhile\nstatement\n8.3. The\nfor\nstatement\n8.4. The\ntry\nstatement\n8.4.1.\nexcept\nclause\n8.4.2.\nexcept*\nclause\n8.4.3.\nelse\nclause\n8.4.4.\nfinally\nclause\n8.5. The\nwith\nstatement\n8.6. The\nmatch\nstatement\n8.6.1. Overview\n8.6.2. Guards\n8.6.3. Irrefutable Case Blocks\n8.6.4. Patterns\n8.6.4.1. OR Patterns\n8.6.4.2. AS Patterns\n8.6.4.3. Literal Patterns\n8.6.4.4. Capture Patterns\n8.6.4.5. Wildcard Patterns\n8.6.4.6. Value Patterns\n8.6.4.7. Group Patterns\n8.6.4.8. Sequence Patterns\n8.6.4.9. Mapping Patterns\n8.6.4.10. Class Patterns\n8.7. Function definitions\n8.8. Class definitions\n8.9. Coroutines\n8.9.1. Coroutine function definition\n8.9.2. The\nasync\nfor\nstatement\n8.9.3. The\nasync\nwith\nstatement\n8.10. Type parameter lists\n8.10.1. Generic functions\n8.10.2. Generic classes\n8.10.3. Generic type aliases\n9. Top-level components\n9.1. Complete Python programs\n9.2. File input\n9.3. Interactive input\n9.4. Expression input\n10. Full Grammar specification\nThe Python Standard Library\nIntroduction\nNotes on availability\nWebAssembly platforms\nMobile platforms\nBuilt-in Functions\nBuilt-in Constants\nConstants added by the\nsite\nmodule\nBuilt-in Types\nTruth Value Testing\nBoolean Operations —\nand\n,\nor\n,\nnot\nComparisons\nNumeric Types —\nint\n,\nfloat\n,\ncomplex\nBitwise Operations on Integer Types\nAdditional Methods on Integer Types\nAdditional Methods on Float\nHashing of numeric types\nBoolean Type -\nbool\nIterator Types\nGenerator Types\nSequence Types —\nlist\n,\ntuple\n,\nrange\nCommon Sequence Operations\nImmutable Sequence Types\nMutable Sequence Types\nLists\nTuples\nRanges\nText Sequence Type —\nstr\nString Methods\nFormatted String Literals (f-strings)\nprintf\n-style String Formatting\nBinary Sequence Types —\nbytes\n,\nbytearray\n,\nmemoryview\nBytes Objects\nBytearray Objects\nBytes and Bytearray Operations\nprintf\n-style Bytes Formatting\nMemory Views\nSet Types —\nset\n,\nfrozenset\nMapping Types —\ndict\nDictionary view objects\nContext Manager Types\nType Annotation Types —\nGeneric Alias\n,\nUnion\nGeneric Alias Type\nStandard Generic Classes\nSpecial Attributes of\nGenericAlias\nobjects\nUnion Type\nOther Built-in Types\nModules\nClasses and Class Instances\nFunctions\nMethods\nCode Objects\nType Objects\nThe Null Object\nThe Ellipsis Object\nThe NotImplemented Object\nInternal Objects\nSpecial Attributes\nInteger string conversion length limitation\nAffected APIs\nConfiguring the limit\nRecommended configuration\nBuilt-in Exceptions\nException context\nInheriting from built-in exceptions\nBase classes\nConcrete exceptions\nOS exceptions\nWarnings\nException groups\nException hierarchy\nText Processing Services\nstring\n— Common string operations\nString constants\nCustom String Formatting\nFormat String Syntax\nFormat Specification Mini-Language\nFormat examples\nTemplate strings\nHelper functions\nre\n— Regular expression operations\nRegular Expression Syntax\nModule Contents\nFlags\nFunctions\nExceptions\nRegular Expression Objects\nMatch Objects\nRegular Expression Examples\nChecking for a Pair\nSimulating scanf()\nsearch() vs. match()\nMaking a Phonebook\nText Munging\nFinding all Adverbs\nFinding all Adverbs and their Positions\nRaw String Notation\nWriting a Tokenizer\ndifflib\n— Helpers for computing deltas\nSequenceMatcher Objects\nSequenceMatcher Examples\nDiffer Objects\nDiffer Example\nA command-line interface to difflib\nndiff example\ntextwrap\n— Text wrapping and filling\nunicodedata\n— Unicode Database\nstringprep\n— Internet String Preparation\nreadline\n— GNU readline interface\nInit file\nLine buffer\nHistory file\nHistory list\nStartup hooks\nCompletion\nExample\nrlcompleter\n— Completion function for GNU readline\nBinary Data Services\nstruct\n— Interpret bytes as packed binary data\nFunctions and Exceptions\nFormat Strings\nByte Order, Size, and Alignment\nFormat Characters\nExamples\nApplications\nNative Formats\nStandard Formats\nClasses\ncodecs\n— Codec registry and base classes\nCodec Base Classes\nError Handlers\nStateless Encoding and Decoding\nIncremental Encoding and Decoding\nIncrementalEncoder Objects\nIncrementalDecoder Objects\nStream Encoding and Decoding\nStreamWriter Objects\nStreamReader Objects\nStreamReaderWriter Objects\nStreamRecoder Objects\nEncodings and Unicode\nStandard Encodings\nPython Specific Encodings\nText Encodings\nBinary Transforms\nStandalone Codec Functions\nText Transforms\nencodings\n— Encodings package\nencodings.idna\n— Internationalized Domain Names in Applications\nencodings.mbcs\n— Windows ANSI codepage\nencodings.utf_8_sig\n— UTF-8 codec with BOM signature\nData Types\ndatetime\n— Basic date and time types\nAware and Naive Objects\nConstants\nAvailable Types\nCommon Properties\nDetermining if an Object is Aware or Naive\ntimedelta\nObjects\nExamples of usage:\ntimedelta\ndate\nObjects\nExamples of Usage:\ndate\ndatetime\nObjects\nExamples of Usage:\ndatetime\ntime\nObjects\nExamples of Usage:\ntime\ntzinfo\nObjects\ntimezone\nObjects\nstrftime()\nand\nstrptime()\nBehavior\nstrftime()\nand\nstrptime()\nFormat Codes\nTechnical Detail\nzoneinfo\n— IANA time zone support\nUsing\nZoneInfo\nData sources\nConfiguring the data sources\nCompile-time configuration\nEnvironment configuration\nRuntime configuration\nThe\nZoneInfo\nclass\nString representations\nPickle serialization\nFunctions\nGlobals\nExceptions and warnings\ncalendar\n— General calendar-related functions\nCommand-Line Usage\ncollections\n— Container datatypes\nChainMap\nobjects\nChainMap\nExamples and Recipes\nCounter\nobjects\ndeque\nobjects\ndeque\nRecipes\ndefaultdict\nobjects\ndefaultdict\nExamples\nnamedtuple()\nFactory Function for Tuples with Named Fields\nOrderedDict\nobjects\nOrderedDict\nExamples and Recipes\nUserDict\nobjects\nUserList\nobjects\nUserString\nobjects\ncollections.abc\n— Abstract Base Classes for Containers\nCollections Abstract Base Classes\nCollections Abstract Base Classes – Detailed Descriptions\nExamples and Recipes\nheapq\n— Heap queue algorithm\nBasic Examples\nPriority Queue Implementation Notes\nTheory\nbisect\n— Array bisection algorithm\nPerformance Notes\nSearching Sorted Lists\nExamples\narray\n— Efficient arrays of numeric values\nweakref\n— Weak references\nWeak Reference Objects\nExample\nFinalizer Objects\nComparing finalizers with\n__del__()\nmethods\ntypes\n— Dynamic type creation and names for built-in types\nDynamic Type Creation\nStandard Interpreter Types\nAdditional Utility Classes and Functions\nCoroutine Utility Functions\ncopy\n— Shallow and deep copy operations\npprint\n— Data pretty printer\nFunctions\nPrettyPrinter Objects\nExample\nreprlib\n— Alternate\nrepr()\nimplementation\nRepr Objects\nSubclassing Repr Objects\nenum\n— Support for enumerations\nModule Contents\nData Types\nSupported\n__dunder__\nnames\nSupported\n_sunder_\nnames\nUtilities and Decorators\nNotes\ngraphlib\n— Functionality to operate with graph-like structures\nExceptions\nNumeric and Mathematical Modules\nnumbers\n— Numeric abstract base classes\nThe numeric tower\nNotes for type implementers\nAdding More Numeric ABCs\nImplementing the arithmetic operations\nmath\n— Mathematical functions\nNumber-theoretic functions\nFloating point arithmetic\nFloating point manipulation functions\nPower, exponential and logarithmic functions\nSummation and product functions\nAngular conversion\nTrigonometric functions\nHyperbolic functions\nSpecial functions\nConstants\ncmath\n— Mathematical functions for complex numbers\nConversions to and from polar coordinates\nPower and logarithmic functions\nTrigonometric functions\nHyperbolic functions\nClassification functions\nConstants\ndecimal\n— Decimal fixed-point and floating-point arithmetic\nQuick-start tutorial\nDecimal objects\nLogical operands\nContext objects\nConstants\nRounding modes\nSignals\nFloating-point notes\nMitigating round-off error with increased precision\nSpecial values\nWorking with threads\nRecipes\nDecimal FAQ\nfractions\n— Rational numbers\nrandom\n— Generate pseudo-random numbers\nBookkeeping functions\nFunctions for bytes\nFunctions for integers\nFunctions for sequences\nDiscrete distributions\nReal-valued distributions\nAlternative Generator\nNotes on Reproducibility\nExamples\nRecipes\nCommand-line usage\nCommand-line example\nstatistics\n— Mathematical statistics functions\nAverages and measures of central location\nMeasures of spread\nStatistics for relations between two inputs\nFunction details\nExceptions\nNormalDist\nobjects\nExamples and Recipes\nClassic probability problems\nMonte Carlo inputs for simulations\nApproximating binomial distributions\nNaive bayesian classifier\nFunctional Programming Modules\nitertools\n— Functions creating iterators for efficient looping\nItertool Functions\nItertools Recipes\nfunctools\n— Higher-order functions and operations on callable objects\npartial\nObjects\noperator\n— Standard operators as functions\nMapping Operators to Functions\nIn-place Operators\nFile and Directory Access\npathlib\n— Object-oriented filesystem paths\nBasic use\nExceptions\nPure paths\nGeneral properties\nOperators\nAccessing individual parts\nMethods and properties\nConcrete paths\nParsing and generating URIs\nExpanding and resolving paths\nQuerying file type and status\nReading and writing files\nReading directories\nCreating files and directories\nRenaming and deleting\nPermissions and ownership\nPattern language\nComparison to the\nglob\nmodule\nComparison to the\nos\nand\nos.path\nmodules\nCorresponding tools\nos.path\n— Common pathname manipulations\nstat\n— Interpreting\nstat()\nresults\nfilecmp\n— File and Directory Comparisons\nThe\ndircmp\nclass\ntempfile\n— Generate temporary files and directories\nExamples\nDeprecated functions and variables\nglob\n— Unix style pathname pattern expansion\nExamples\nfnmatch\n— Unix filename pattern matching\nlinecache\n— Random access to text lines\nshutil\n— High-level file operations\nDirectory and files operations\nPlatform-dependent efficient copy operations\ncopytree example\nrmtree example\nArchiving operations\nArchiving example\nArchiving example with\nbase_dir\nQuerying the size of the output terminal\nData Persistence\npickle\n— Python object serialization\nRelationship to other Python modules\nComparison with\nmarshal\nComparison with\njson\nData stream format\nModule Interface\nWhat can be pickled and unpickled?\nPickling Class Instances\nPersistence of External Objects\nDispatch Tables\nHandling Stateful Objects\nCustom Reduction for Types, Functions, and Other Objects\nOut-of-band Buffers\nProvider API\nConsumer API\nExample\nRestricting Globals\nPerformance\nExamples\ncopyreg\n— Register\npickle\nsupport functions\nExample\nshelve\n— Python object persistence\nRestrictions\nExample\nmarshal\n— Internal Python object serialization\ndbm\n— Interfaces to Unix “databases”\ndbm.sqlite3\n— SQLite backend for dbm\ndbm.gnu\n— GNU database manager\ndbm.ndbm\n— New Database Manager\ndbm.dumb\n— Portable DBM implementation\nsqlite3\n— DB-API 2.0 interface for SQLite databases\nTutorial\nReference\nModule functions\nModule constants\nConnection objects\nCursor objects\nRow objects\nBlob objects\nPrepareProtocol objects\nExceptions\nSQLite and Python types\nDefault adapters and converters (deprecated)\nCommand-line interface\nHow-to guides\nHow to use placeholders to bind values in SQL queries\nHow to adapt custom Python types to SQLite values\nHow to write adaptable objects\nHow to register adapter callables\nHow to convert SQLite values to custom Python types\nAdapter and converter recipes\nHow to use connection shortcut methods\nHow to use the connection context manager\nHow to work with SQLite URIs\nHow to create and use row factories\nHow to handle non-UTF-8 text encodings\nExplanation\nTransaction control\nTransaction control via the\nautocommit\nattribute\nTransaction control via the\nisolation_level\nattribute\nData Compression and Archiving\nzlib\n— Compression compatible with\ngzip\ngzip\n— Support for\ngzip\nfiles\nExamples of usage\nCommand Line Interface\nCommand line options\nbz2\n— Support for\nbzip2\ncompression\n(De)compression of files\nIncremental (de)compression\nOne-shot (de)compression\nExamples of usage\nlzma\n— Compression using the LZMA algorithm\nReading and writing compressed files\nCompressing and decompressing data in memory\nMiscellaneous\nSpecifying custom filter chains\nExamples\nzipfile\n— Work with ZIP archives\nZipFile Objects\nPath Objects\nPyZipFile Objects\nZipInfo Objects\nCommand-Line Interface\nCommand-line options\nDecompression pitfalls\nFrom file itself\nFile System limitations\nResources limitations\nInterruption\nDefault behaviors of extraction\ntarfile\n— Read and write tar archive files\nTarFile Objects\nTarInfo Objects\nExtraction filters\nDefault named filters\nFilter errors\nHints for further verification\nSupporting older Python versions\nStateful extraction filter example\nCommand-Line Interface\nCommand-line options\nExamples\nReading examples\nWriting examples\nSupported tar formats\nUnicode issues\nFile Formats\ncsv\n— CSV File Reading and Writing\nModule Contents\nDialects and Formatting Parameters\nReader Objects\nWriter Objects\nExamples\nconfigparser\n— Configuration file parser\nQuick Start\nSupported Datatypes\nFallback Values\nSupported INI File Structure\nUnnamed Sections\nInterpolation of values\nMapping Protocol Access\nCustomizing Parser Behaviour\nLegacy API Examples\nConfigParser Objects\nRawConfigParser Objects\nExceptions\ntomllib\n— Parse TOML files\nExamples\nConversion Table\nnetrc\n— netrc file processing\nnetrc Objects\nplistlib\n— Generate and parse Apple\n.plist\nfiles\nExamples\nCryptographic Services\nhashlib\n— Secure hashes and message digests\nHash algorithms\nUsage\nConstructors\nAttributes\nHash Objects\nSHAKE variable length digests\nFile hashing\nKey derivation\nBLAKE2\nCreating hash objects\nConstants\nExamples\nSimple hashing\nUsing different digest sizes\nKeyed hashing\nRandomized hashing\nPersonalization\nTree mode\nCredits\nhmac\n— Keyed-Hashing for Message Authentication\nsecrets\n— Generate secure random numbers for managing secrets\nRandom numbers\nGenerating tokens\nHow many bytes should tokens use?\nOther functions\nRecipes and best practices\nGeneric Operating System Services\nos\n— Miscellaneous operating system interfaces\nFile Names, Command Line Arguments, and Environment Variables\nPython UTF-8 Mode\nProcess Parameters\nFile Object Creation\nFile Descriptor Operations\nQuerying the size of a terminal\nInheritance of File Descriptors\nFiles and Directories\nTimer File Descriptors\nLinux extended attributes\nProcess Management\nInterface to the scheduler\nMiscellaneous System Information\nRandom numbers\nio\n— Core tools for working with streams\nOverview\nText I/O\nBinary I/O\nRaw I/O\nText Encoding\nOpt-in EncodingWarning\nHigh-level Module Interface\nClass hierarchy\nI/O Base Classes\nRaw File I/O\nBuffered Streams\nText I/O\nPerformance\nBinary I/O\nText I/O\nMulti-threading\nReentrancy\ntime\n— Time access and conversions\nFunctions\nClock ID Constants\nTimezone Constants\nlogging\n— Logging facility for Python\nLogger Objects\nLogging Levels\nHandler Objects\nFormatter Objects\nFilter Objects\nLogRecord Objects\nLogRecord attributes\nLoggerAdapter Objects\nThread Safety\nModule-Level Functions\nModule-Level Attributes\nIntegration with the warnings module\nlogging.config\n— Logging configuration\nConfiguration functions\nSecurity considerations\nConfiguration dictionary schema\nDictionary Schema Details\nIncremental Configuration\nObject connections\nUser-defined objects\nHandler configuration order\nAccess to external objects\nAccess to internal objects\nImport resolution and custom importers\nConfiguring QueueHandler and QueueListener\nConfiguration file format\nlogging.handlers\n— Logging handlers\nStreamHandler\nFileHandler\nNullHandler\nWatchedFileHandler\nBaseRotatingHandler\nRotatingFileHandler\nTimedRotatingFileHandler\nSocketHandler\nDatagramHandler\nSysLogHandler\nNTEventLogHandler\nSMTPHandler\nMemoryHandler\nHTTPHandler\nQueueHandler\nQueueListener\nplatform\n—  Access to underlying platform’s identifying data\nCross platform\nJava platform\nWindows platform\nmacOS platform\niOS platform\nUnix platforms\nLinux platforms\nAndroid platform\nCommand-line usage\nerrno\n— Standard errno system symbols\nctypes\n— A foreign function library for Python\nctypes tutorial\nLoading dynamic link libraries\nAccessing functions from loaded dlls\nCalling functions\nFundamental data types\nCalling functions, continued\nCalling variadic functions\nCalling functions with your own custom data types\nSpecifying the required argument types (function prototypes)\nReturn types\nPassing pointers (or: passing parameters by reference)\nStructures and unions\nStructure/union alignment and byte order\nBit fields in structures and unions\nArrays\nPointers\nType conversions\nIncomplete Types\nCallback functions\nAccessing values exported from dlls\nSurprises\nVariable-sized data types\nctypes reference\nFinding shared libraries\nLoading shared libraries\nForeign functions\nFunction prototypes\nUtility functions\nData types\nFundamental data types\nStructured data types\nArrays and pointers\nCommand Line Interface Libraries\nargparse\n— Parser for command-line options, arguments and subcommands\nArgumentParser objects\nprog\nusage\ndescription\nepilog\nparents\nformatter_class\nprefix_chars\nfromfile_prefix_chars\nargument_default\nallow_abbrev\nconflict_handler\nadd_help\nexit_on_error\nThe add_argument() method\nname or flags\naction\nnargs\nconst\ndefault\ntype\nchoices\nrequired\nhelp\nmetavar\ndest\ndeprecated\nAction classes\nThe parse_args() method\nOption value syntax\nInvalid arguments\nArguments containing\n-\nArgument abbreviations (prefix matching)\nBeyond\nsys.argv\nThe Namespace object\nOther utilities\nSub-commands\nFileType objects\nArgument groups\nMutual exclusion\nParser defaults\nPrinting help\nPartial parsing\nCustomizing file parsing\nExiting methods\nIntermixed parsing\nRegistering custom types or actions\nExceptions\nArgparse Tutorial\nConcepts\nThe basics\nIntroducing Positional arguments\nIntroducing Optional arguments\nShort options\nCombining Positional and Optional arguments\nGetting a little more advanced\nSpecifying ambiguous arguments\nConflicting options\nHow to translate the argparse output\nCustom type converters\nConclusion\nMigrating\noptparse\ncode to\nargparse\noptparse\n— Parser for command line options\nChoosing an argument parsing library\nIntroduction\nBackground\nTerminology\nWhat are options for?\nWhat are positional arguments for?\nTutorial\nUnderstanding option actions\nThe store action\nHandling boolean (flag) options\nOther actions\nDefault values\nGenerating help\nGrouping Options\nPrinting a version string\nHow\noptparse\nhandles errors\nPutting it all together\nReference Guide\nCreating the parser\nPopulating the parser\nDefining options\nOption attributes\nStandard option actions\nStandard option types\nParsing arguments\nQuerying and manipulating your option parser\nConflicts between options\nCleanup\nOther methods\nOption Callbacks\nDefining a callback option\nHow callbacks are called\nRaising errors in a callback\nCallback example 1: trivial callback\nCallback example 2: check option order\nCallback example 3: check option order (generalized)\nCallback example 4: check arbitrary condition\nCallback example 5: fixed arguments\nCallback example 6: variable arguments\nExtending\noptparse\nAdding new types\nAdding new actions\nExceptions\ngetpass\n— Portable password input\nfileinput\n— Iterate over lines from multiple input streams\ncurses\n— Terminal handling for character-cell displays\nFunctions\nWindow Objects\nConstants\ncurses.textpad\n— Text input widget for curses programs\nTextbox objects\ncurses.ascii\n— Utilities for ASCII characters\ncurses.panel\n— A panel stack extension for curses\nFunctions\nPanel Objects\nConcurrent Execution\nthreading\n— Thread-based parallelism\nIntroduction\nGIL and performance considerations\nReference\nThread-local data\nThread objects\nLock objects\nRLock objects\nCondition objects\nSemaphore objects\nSemaphore\nexample\nEvent objects\nTimer objects\nBarrier objects\nUsing locks, conditions, and semaphores in the\nwith\nstatement\nmultiprocessing\n— Process-based parallelism\nIntroduction\nThe\nProcess\nclass\nContexts and start methods\nExchanging objects between processes\nSynchronization between processes\nSharing state between processes\nUsing a pool of workers\nReference\nProcess\nand exceptions\nPipes and Queues\nMiscellaneous\nConnection Objects\nSynchronization primitives\nShared\nctypes\nObjects\nThe\nmultiprocessing.sharedctypes\nmodule\nManagers\nCustomized managers\nUsing a remote manager\nProxy Objects\nCleanup\nProcess Pools\nListeners and Clients\nAddress Formats\nAuthentication keys\nLogging\nThe\nmultiprocessing.dummy\nmodule\nProgramming guidelines\nAll start methods\nThe\nspawn\nand\nforkserver\nstart methods\nExamples\nmultiprocessing.shared_memory\n— Shared memory for direct access across processes\nThe\nconcurrent\npackage\nconcurrent.futures\n— Launching parallel tasks\nExecutor Objects\nThreadPoolExecutor\nThreadPoolExecutor Example\nProcessPoolExecutor\nProcessPoolExecutor Example\nFuture Objects\nModule Functions\nException classes\nsubprocess\n— Subprocess management\nUsing the\nsubprocess\nModule\nFrequently Used Arguments\nPopen Constructor\nExceptions\nSecurity Considerations\nPopen Objects\nWindows Popen Helpers\nWindows Constants\nOlder high-level API\nReplacing Older Functions with the\nsubprocess\nModule\nReplacing\n/bin/sh\nshell command substitution\nReplacing shell pipeline\nReplacing\nos.system()\nReplacing the\nos.spawn\nfamily\nReplacing\nos.popen()\n,\nos.popen2()\n,\nos.popen3()\nReplacing functions from the\npopen2\nmodule\nLegacy Shell Invocation Functions\nNotes\nTimeout Behavior\nConverting an argument sequence to a string on Windows\nDisabling use of\nvfork()\nor\nposix_spawn()\nsched\n— Event scheduler\nScheduler Objects\nqueue\n— A synchronized queue class\nQueue Objects\nWaiting for task completion\nTerminating queues\nSimpleQueue Objects\ncontextvars\n— Context Variables\nContext Variables\nManual Context Management\nasyncio support\n_thread\n— Low-level threading API\nNetworking and Interprocess Communication\nasyncio\n— Asynchronous I/O\nRunners\nRunning an asyncio Program\nRunner context manager\nHandling Keyboard Interruption\nCoroutines and Tasks\nCoroutines\nAwaitables\nCreating Tasks\nTask Cancellation\nTask Groups\nTerminating a Task Group\nSleeping\nRunning Tasks Concurrently\nEager Task Factory\nShielding From Cancellation\nTimeouts\nWaiting Primitives\nRunning in Threads\nScheduling From Other Threads\nIntrospection\nTask Object\nStreams\nStreamReader\nStreamWriter\nExamples\nTCP echo client using streams\nTCP echo server using streams\nGet HTTP headers\nRegister an open socket to wait for data using streams\nSynchronization Primitives\nLock\nEvent\nCondition\nSemaphore\nBoundedSemaphore\nBarrier\nSubprocesses\nCreating Subprocesses\nConstants\nInteracting with Subprocesses\nSubprocess and Threads\nExamples\nQueues\nQueue\nPriority Queue\nLIFO Queue\nExceptions\nExamples\nExceptions\nEvent Loop\nEvent Loop Methods\nRunning and stopping the loop\nScheduling callbacks\nScheduling delayed callbacks\nCreating Futures and Tasks\nOpening network connections\nCreating network servers\nTransferring files\nTLS Upgrade\nWatching file descriptors\nWorking with socket objects directly\nDNS\nWorking with pipes\nUnix signals\nExecuting code in thread or process pools\nError Handling API\nEnabling debug mode\nRunning Subprocesses\nCallback Handles\nServer Objects\nEvent Loop Implementations\nExamples\nHello World with call_soon()\nDisplay the current date with call_later()\nWatch a file descriptor for read events\nSet signal handlers for SIGINT and SIGTERM\nFutures\nFuture Functions\nFuture Object\nTransports and Protocols\nTransports\nTransports Hierarchy\nBase Transport\nRead-only Transports\nWrite-only Transports\nDatagram Transports\nSubprocess Transports\nProtocols\nBase Protocols\nBase Protocol\nStreaming Protocols\nBuffered Streaming Protocols\nDatagram Protocols\nSubprocess Protocols\nExamples\nTCP Echo Server\nTCP Echo Client\nUDP Echo Server\nUDP Echo Client\nConnecting Existing Sockets\nloop.subprocess_exec() and SubprocessProtocol\nPolicies\nGetting and Setting the Policy\nPolicy Objects\nProcess Watchers\nCustom Policies\nPlatform Support\nAll Platforms\nWindows\nSubprocess Support on Windows\nmacOS\nExtending\nWriting a Custom Event Loop\nFuture and Task private constructors\nTask lifetime support\nHigh-level API Index\nTasks\nQueues\nSubprocesses\nStreams\nSynchronization\nExceptions\nLow-level API Index\nObtaining the Event Loop\nEvent Loop Methods\nTransports\nProtocols\nEvent Loop Policies\nDeveloping with asyncio\nDebug Mode\nConcurrency and Multithreading\nRunning Blocking Code\nLogging\nDetect never-awaited coroutines\nDetect never-retrieved exceptions\nsocket\n— Low-level networking interface\nSocket families\nModule contents\nExceptions\nConstants\nFunctions\nCreating sockets\nOther functions\nSocket Objects\nNotes on socket timeouts\nTimeouts and the\nconnect\nmethod\nTimeouts and the\naccept\nmethod\nExample\nssl\n— TLS/SSL wrapper for socket objects\nFunctions, Constants, and Exceptions\nSocket creation\nContext creation\nExceptions\nRandom generation\nCertificate handling\nConstants\nSSL Sockets\nSSL Contexts\nCertificates\nCertificate chains\nCA certificates\nCombined key and certificate\nSelf-signed certificates\nExamples\nTesting for SSL support\nClient-side operation\nServer-side operation\nNotes on non-blocking sockets\nMemory BIO Support\nSSL session\nSecurity considerations\nBest defaults\nManual settings\nVerifying certificates\nProtocol versions\nCipher selection\nMulti-processing\nTLS 1.3\nselect\n— Waiting for I/O completion\n/dev/poll\nPolling Objects\nEdge and Level Trigger Polling (epoll) Objects\nPolling Objects\nKqueue Objects\nKevent Objects\nselectors\n— High-level I/O multiplexing\nIntroduction\nClasses\nExamples\nsignal\n— Set handlers for asynchronous events\nGeneral rules\nExecution of Python signal handlers\nSignals and threads\nModule contents\nExamples\nNote on SIGPIPE\nNote on Signal Handlers and Exceptions\nmmap\n— Memory-mapped file support\nMADV_* Constants\nMAP_* Constants\nInternet Data Handling\nemail\n— An email and MIME handling package\nemail.message\n: Representing an email message\nemail.parser\n: Parsing email messages\nFeedParser API\nParser API\nAdditional notes\nemail.generator\n: Generating MIME documents\nemail.policy\n: Policy Objects\nemail.errors\n: Exception and Defect classes\nemail.headerregistry\n: Custom Header Objects\nemail.contentmanager\n: Managing MIME Content\nContent Manager Instances\nemail\n: Examples\nemail.message.Message\n: Representing an email message using the\ncompat32\nAPI\nemail.mime\n: Creating email and MIME objects from scratch\nemail.header\n: Internationalized headers\nemail.charset\n: Representing character sets\nemail.encoders\n: Encoders\nemail.utils\n: Miscellaneous utilities\nemail.iterators\n: Iterators\njson\n— JSON encoder and decoder\nBasic Usage\nEncoders and Decoders\nExceptions\nStandard Compliance and Interoperability\nCharacter Encodings\nInfinite and NaN Number Values\nRepeated Names Within an Object\nTop-level Non-Object, Non-Array Values\nImplementation Limitations\nCommand Line Interface\nCommand line options\nmailbox\n— Manipulate mailboxes in various formats\nMailbox\nobjects\nMaildir\nobjects\nmbox\nobjects\nMH\nobjects\nBabyl\nobjects\nMMDF\nobjects\nMessage\nobjects\nMaildirMessage\nobjects\nmboxMessage\nobjects\nMHMessage\nobjects\nBabylMessage\nobjects\nMMDFMessage\nobjects\nExceptions\nExamples\nmimetypes\n— Map filenames to MIME types\nMimeTypes Objects\nbase64\n— Base16, Base32, Base64, Base85 Data Encodings\nRFC 4648 Encodings\nBase85 Encodings\nLegacy Interface\nSecurity Considerations\nbinascii\n— Convert between binary and ASCII\nquopri\n— Encode and decode MIME quoted-printable data\nStructured Markup Processing Tools\nhtml\n— HyperText Markup Language support\nhtml.parser\n— Simple HTML and XHTML parser\nExample HTML Parser Application\nHTMLParser\nMethods\nExamples\nhtml.entities\n— Definitions of HTML general entities\nXML Processing Modules\nXML security\nxml.etree.ElementTree\n— The ElementTree XML API\nTutorial\nXML tree and elements\nParsing XML\nPull API for non-blocking parsing\nFinding interesting elements\nModifying an XML File\nBuilding XML documents\nParsing XML with Namespaces\nXPath support\nExample\nSupported XPath syntax\nReference\nFunctions\nXInclude support\nExample\nReference\nFunctions\nElement Objects\nElementTree Objects\nQName Objects\nTreeBuilder Objects\nXMLParser Objects\nXMLPullParser Objects\nExceptions\nxml.dom\n— The Document Object Model API\nModule Contents\nObjects in the DOM\nDOMImplementation Objects\nNode Objects\nNodeList Objects\nDocumentType Objects\nDocument Objects\nElement Objects\nAttr Objects\nNamedNodeMap Objects\nComment Objects\nText and CDATASection Objects\nProcessingInstruction Objects\nExceptions\nConformance\nType Mapping\nAccessor Methods\nxml.dom.minidom\n— Minimal DOM implementation\nDOM Objects\nDOM Example\nminidom and the DOM standard\nxml.dom.pulldom\n— Support for building partial DOM trees\nDOMEventStream Objects\nxml.sax\n— Support for SAX2 parsers\nSAXException Objects\nxml.sax.handler\n— Base classes for SAX handlers\nContentHandler Objects\nDTDHandler Objects\nEntityResolver Objects\nErrorHandler Objects\nLexicalHandler Objects\nxml.sax.saxutils\n— SAX Utilities\nxml.sax.xmlreader\n— Interface for XML parsers\nXMLReader Objects\nIncrementalParser Objects\nLocator Objects\nInputSource Objects\nThe\nAttributes\nInterface\nThe\nAttributesNS\nInterface\nxml.parsers.expat\n— Fast XML parsing using Expat\nXMLParser Objects\nExpatError Exceptions\nExample\nContent Model Descriptions\nExpat error constants\nInternet Protocols and Support\nwebbrowser\n— Convenient web-browser controller\nBrowser Controller Objects\nwsgiref\n— WSGI Utilities and Reference Implementation\nwsgiref.util\n– WSGI environment utilities\nwsgiref.headers\n– WSGI response header tools\nwsgiref.simple_server\n– a simple WSGI HTTP server\nwsgiref.validate\n— WSGI conformance checker\nwsgiref.handlers\n– server/gateway base classes\nwsgiref.types\n– WSGI types for static type checking\nExamples\nurllib\n— URL handling modules\nurllib.request\n— Extensible library for opening URLs\nRequest Objects\nOpenerDirector Objects\nBaseHandler Objects\nHTTPRedirectHandler Objects\nHTTPCookieProcessor Objects\nProxyHandler Objects\nHTTPPasswordMgr Objects\nHTTPPasswordMgrWithPriorAuth Objects\nAbstractBasicAuthHandler Objects\nHTTPBasicAuthHandler Objects\nProxyBasicAuthHandler Objects\nAbstractDigestAuthHandler Objects\nHTTPDigestAuthHandler Objects\nProxyDigestAuthHandler Objects\nHTTPHandler Objects\nHTTPSHandler Objects\nFileHandler Objects\nDataHandler Objects\nFTPHandler Objects\nCacheFTPHandler Objects\nUnknownHandler Objects\nHTTPErrorProcessor Objects\nExamples\nLegacy interface\nurllib.request\nRestrictions\nurllib.response\n— Response classes used by urllib\nurllib.parse\n— Parse URLs into components\nURL Parsing\nURL parsing security\nParsing ASCII Encoded Bytes\nStructured Parse Results\nURL Quoting\nurllib.error\n— Exception classes raised by urllib.request\nurllib.robotparser\n—  Parser for robots.txt\nhttp\n— HTTP modules\nHTTP status codes\nHTTP status category\nHTTP methods\nhttp.client\n— HTTP protocol client\nHTTPConnection Objects\nHTTPResponse Objects\nExamples\nHTTPMessage Objects\nftplib\n— FTP protocol client\nReference\nFTP objects\nFTP_TLS objects\nModule variables\npoplib\n— POP3 protocol client\nPOP3 Objects\nPOP3 Example\nimaplib\n— IMAP4 protocol client\nIMAP4 Objects\nIMAP4 Example\nsmtplib\n— SMTP protocol client\nSMTP Objects\nSMTP Example\nuuid\n— UUID objects according to\nRFC 4122\nCommand-Line Usage\nExample\nCommand-Line Example\nsocketserver\n— A framework for network servers\nServer Creation Notes\nServer Objects\nRequest Handler Objects\nExamples\nsocketserver.TCPServer\nExample\nsocketserver.UDPServer\nExample\nAsynchronous Mixins\nhttp.server\n— HTTP servers\nCommand-line interface\nSecurity considerations\nhttp.cookies\n— HTTP state management\nCookie Objects\nMorsel Objects\nExample\nhttp.cookiejar\n— Cookie handling for HTTP clients\nCookieJar and FileCookieJar Objects\nFileCookieJar subclasses and co-operation with web browsers\nCookiePolicy Objects\nDefaultCookiePolicy Objects\nCookie Objects\nExamples\nxmlrpc\n— XMLRPC server and client modules\nxmlrpc.client\n— XML-RPC client access\nServerProxy Objects\nDateTime Objects\nBinary Objects\nFault Objects\nProtocolError Objects\nMultiCall Objects\nConvenience Functions\nExample of Client Usage\nExample of Client and Server Usage\nxmlrpc.server\n— Basic XML-RPC servers\nSimpleXMLRPCServer Objects\nSimpleXMLRPCServer Example\nCGIXMLRPCRequestHandler\nDocumenting XMLRPC server\nDocXMLRPCServer Objects\nDocCGIXMLRPCRequestHandler\nipaddress\n— IPv4/IPv6 manipulation library\nConvenience factory functions\nIP Addresses\nAddress objects\nConversion to Strings and Integers\nOperators\nComparison operators\nArithmetic operators\nIP Network definitions\nPrefix, net mask and host mask\nNetwork objects\nOperators\nLogical operators\nIteration\nNetworks as containers of addresses\nInterface objects\nOperators\nLogical operators\nOther Module Level Functions\nCustom Exceptions\nMultimedia Services\nwave\n— Read and write WAV files\nWave_read Objects\nWave_write Objects\ncolorsys\n— Conversions between color systems\nInternationalization\ngettext\n— Multilingual internationalization services\nGNU\ngettext\nAPI\nClass-based API\nThe\nNullTranslations\nclass\nThe\nGNUTranslations\nclass\nSolaris message catalog support\nThe Catalog constructor\nInternationalizing your programs and modules\nLocalizing your module\nLocalizing your application\nChanging languages on the fly\nDeferred translations\nAcknowledgements\nlocale\n— Internationalization services\nBackground, details, hints, tips and caveats\nFor extension writers and programs that embed Python\nAccess to message catalogs\nProgram Frameworks\nturtle\n— Turtle graphics\nIntroduction\nGet started\nTutorial\nStarting a turtle environment\nBasic drawing\nPen control\nThe turtle’s position\nMaking algorithmic patterns\nHow to…\nGet started as quickly as possible\nUse the\nturtle\nmodule namespace\nUse turtle graphics in a script\nUse object-oriented turtle graphics\nTurtle graphics reference\nTurtle methods\nMethods of TurtleScreen/Screen\nMethods of RawTurtle/Turtle and corresponding functions\nTurtle motion\nTell Turtle’s state\nSettings for measurement\nPen control\nDrawing state\nColor control\nFilling\nMore drawing control\nTurtle state\nVisibility\nAppearance\nUsing events\nSpecial Turtle methods\nCompound shapes\nMethods of TurtleScreen/Screen and corresponding functions\nWindow control\nAnimation control\nUsing screen events\nInput methods\nSettings and special methods\nMethods specific to Screen, not inherited from TurtleScreen\nPublic classes\nExplanation\nHelp and configuration\nHow to use help\nTranslation of docstrings into different languages\nHow to configure Screen and Turtles\nturtledemo\n— Demo scripts\nChanges since Python 2.6\nChanges since Python 3.0\ncmd\n— Support for line-oriented command interpreters\nCmd Objects\nCmd Example\nshlex\n— Simple lexical analysis\nshlex Objects\nParsing Rules\nImproved Compatibility with Shells\nGraphical User Interfaces with Tk\ntkinter\n— Python interface to Tcl/Tk\nArchitecture\nTkinter Modules\nTkinter Life Preserver\nA Hello World Program\nImportant Tk Concepts\nUnderstanding How Tkinter Wraps Tcl/Tk\nHow do I…? What option does…?\nNavigating the Tcl/Tk Reference Manual\nThreading model\nHandy Reference\nSetting Options\nThe Packer\nPacker Options\nCoupling Widget Variables\nThe Window Manager\nTk Option Data Types\nBindings and Events\nThe index Parameter\nImages\nFile Handlers\ntkinter.colorchooser\n— Color choosing dialog\ntkinter.font\n— Tkinter font wrapper\nTkinter Dialogs\ntkinter.simpledialog\n— Standard Tkinter input dialogs\ntkinter.filedialog\n— File selection dialogs\nNative Load/Save Dialogs\ntkinter.commondialog\n— Dialog window templates\ntkinter.messagebox\n— Tkinter message prompts\ntkinter.scrolledtext\n— Scrolled Text Widget\ntkinter.dnd\n— Drag and drop support\ntkinter.ttk\n— Tk themed widgets\nUsing Ttk\nTtk Widgets\nWidget\nStandard Options\nScrollable Widget Options\nLabel Options\nCompatibility Options\nWidget States\nttk.Widget\nCombobox\nOptions\nVirtual events\nttk.Combobox\nSpinbox\nOptions\nVirtual events\nttk.Spinbox\nNotebook\nOptions\nTab Options\nTab Identifiers\nVirtual Events\nttk.Notebook\nProgressbar\nOptions\nttk.Progressbar\nSeparator\nOptions\nSizegrip\nPlatform-specific notes\nBugs\nTreeview\nOptions\nItem Options\nTag Options\nColumn Identifiers\nVirtual Events\nttk.Treeview\nTtk Styling\nLayouts\nIDLE — Python editor and shell\nMenus\nFile menu (Shell and Editor)\nEdit menu (Shell and Editor)\nFormat menu (Editor window only)\nRun menu (Editor window only)\nShell menu (Shell window only)\nDebug menu (Shell window only)\nOptions menu (Shell and Editor)\nWindow menu (Shell and Editor)\nHelp menu (Shell and Editor)\nContext menus\nEditing and Navigation\nEditor windows\nKey bindings\nAutomatic indentation\nSearch and Replace\nCompletions\nCalltips\nCode Context\nShell window\nText colors\nStartup and Code Execution\nCommand line usage\nStartup failure\nRunning user code\nUser output in Shell\nDeveloping tkinter applications\nRunning without a subprocess\nHelp and Preferences\nHelp sources\nSetting preferences\nIDLE on macOS\nExtensions\nidlelib — implementation of IDLE application\nDevelopment Tools\ntyping\n— Support for type hints\nSpecification for the Python Type System\nType aliases\nNewType\nAnnotating callable objects\nGenerics\nAnnotating tuples\nThe type of class objects\nAnnotating generators and coroutines\nUser-defined generic types\nThe\nAny\ntype\nNominal vs structural subtyping\nModule contents\nSpecial typing primitives\nSpecial types\nSpecial forms\nBuilding generic types and type aliases\nOther special directives\nProtocols\nABCs for working with IO\nFunctions and decorators\nIntrospection helpers\nConstant\nDeprecated aliases\nAliases to built-in types\nAliases to types in\ncollections\nAliases to other concrete types\nAliases to container ABCs in\ncollections.abc\nAliases to asynchronous ABCs in\ncollections.abc\nAliases to other ABCs in\ncollections.abc\nAliases to\ncontextlib\nABCs\nDeprecation Timeline of Major Features\npydoc\n— Documentation generator and online help system\nPython Development Mode\nEffects of the Python Development Mode\nResourceWarning Example\nBad file descriptor error example\ndoctest\n— Test interactive Python examples\nSimple Usage: Checking Examples in Docstrings\nSimple Usage: Checking Examples in a Text File\nCommand-line Usage\nHow It Works\nWhich Docstrings Are Examined?\nHow are Docstring Examples Recognized?\nWhat’s the Execution Context?\nWhat About Exceptions?\nOption Flags\nDirectives\nWarnings\nBasic API\nUnittest API\nAdvanced API\nDocTest Objects\nExample Objects\nDocTestFinder objects\nDocTestParser objects\nTestResults objects\nDocTestRunner objects\nOutputChecker objects\nDebugging\nSoapbox\nunittest\n— Unit testing framework\nBasic example\nCommand-Line Interface\nCommand-line options\nTest Discovery\nOrganizing test code\nRe-using old test code\nSkipping tests and expected failures\nDistinguishing test iterations using subtests\nClasses and functions\nTest cases\nGrouping tests\nLoading and running tests\nload_tests Protocol\nClass and Module Fixtures\nsetUpClass and tearDownClass\nsetUpModule and tearDownModule\nSignal Handling\nunittest.mock\n— mock object library\nQuick Guide\nThe Mock Class\nCalling\nDeleting Attributes\nMock names and the name attribute\nAttaching Mocks as Attributes\nThe patchers\npatch\npatch.object\npatch.dict\npatch.multiple\npatch methods: start and stop\npatch builtins\nTEST_PREFIX\nNesting Patch Decorators\nWhere to patch\nPatching Descriptors and Proxy Objects\nMagicMock and magic method support\nMocking Magic Methods\nMagic Mock\nHelpers\nsentinel\nDEFAULT\ncall\ncreate_autospec\nANY\nFILTER_DIR\nmock_open\nAutospeccing\nSealing mocks\nOrder of precedence of\nside_effect\n,\nreturn_value\nand\nwraps\nunittest.mock\n— getting started\nUsing Mock\nMock Patching Methods\nMock for Method Calls on an Object\nMocking Classes\nNaming your mocks\nTracking all Calls\nSetting Return Values and Attributes\nRaising exceptions with mocks\nSide effect functions and iterables\nMocking asynchronous iterators\nMocking asynchronous context manager\nCreating a Mock from an Existing Object\nUsing side_effect to return per file content\nPatch Decorators\nFurther Examples\nMocking chained calls\nPartial mocking\nMocking a Generator Method\nApplying the same patch to every test method\nMocking Unbound Methods\nChecking multiple calls with mock\nCoping with mutable arguments\nNesting Patches\nMocking a dictionary with MagicMock\nMock subclasses and their attributes\nMocking imports with patch.dict\nTracking order of calls and less verbose call assertions\nMore complex argument matching\ntest\n— Regression tests package for Python\nWriting Unit Tests for the\ntest\npackage\nRunning tests using the command-line interface\ntest.support\n— Utilities for the Python test suite\ntest.support.socket_helper\n— Utilities for socket tests\ntest.support.script_helper\n— Utilities for the Python execution tests\ntest.support.bytecode_helper\n— Support tools for testing correct bytecode generation\ntest.support.threading_helper\n— Utilities for threading tests\ntest.support.os_helper\n— Utilities for os tests\ntest.support.import_helper\n— Utilities for import tests\ntest.support.warnings_helper\n— Utilities for warnings tests\nDebugging and Profiling\nAudit events table\nbdb\n— Debugger framework\nfaulthandler\n— Dump the Python traceback\nDumping the traceback\nFault handler state\nDumping the tracebacks after a timeout\nDumping the traceback on a user signal\nIssue with file descriptors\nExample\npdb\n— The Python Debugger\nDebugger Commands\nThe Python Profilers\nIntroduction to the profilers\nInstant User’s Manual\nprofile\nand\ncProfile\nModule Reference\nThe\nStats\nClass\nWhat Is Deterministic Profiling?\nLimitations\nCalibration\nUsing a custom timer\ntimeit\n— Measure execution time of small code snippets\nBasic Examples\nPython Interface\nCommand-Line Interface\nExamples\ntrace\n— Trace or track Python statement execution\nCommand-Line Usage\nMain options\nModifiers\nFilters\nProgrammatic Interface\ntracemalloc\n— Trace memory allocations\nExamples\nDisplay the top 10\nCompute differences\nGet the traceback of a memory block\nPretty top\nRecord the current and peak size of all traced memory blocks\nAPI\nFunctions\nDomainFilter\nFilter\nFrame\nSnapshot\nStatistic\nStatisticDiff\nTrace\nTraceback\nSoftware Packaging and Distribution\nensurepip\n— Bootstrapping the\npip\ninstaller\nCommand line interface\nModule API\nvenv\n— Creation of virtual environments\nCreating virtual environments\nHow venvs work\nAPI\nAn example of extending\nEnvBuilder\nzipapp\n— Manage executable Python zip archives\nBasic Example\nCommand-Line Interface\nPython API\nExamples\nSpecifying the Interpreter\nCreating Standalone Applications with zipapp\nCaveats\nThe Python Zip Application Archive Format\nPython Runtime Services\nsys\n— System-specific parameters and functions\nsys.monitoring\n— Execution event monitoring\nTool identifiers\nRegistering and using tools\nEvents\nLocal events\nAncillary events\nOther events\nThe STOP_ITERATION event\nTurning events on and off\nSetting events globally\nPer code object events\nDisabling events\nRegistering callback functions\nCallback function arguments\nsysconfig\n— Provide access to Python’s configuration information\nConfiguration variables\nInstallation paths\nUser scheme\nposix_user\nnt_user\nosx_framework_user\nHome scheme\nposix_home\nPrefix scheme\nposix_prefix\nnt\nInstallation path functions\nOther functions\nCommand-line usage\nbuiltins\n— Built-in objects\n__main__\n— Top-level code environment\n__name__\n==\n'__main__'\nWhat is the “top-level code environment”?\nIdiomatic Usage\nPackaging Considerations\n__main__.py\nin Python Packages\nIdiomatic Usage\nimport\n__main__\nwarnings\n— Warning control\nWarning Categories\nThe Warnings Filter\nRepeated Warning Suppression Criteria\nDescribing Warning Filters\nDefault Warning Filter\nOverriding the default filter\nTemporarily Suppressing Warnings\nTesting Warnings\nUpdating Code For New Versions of Dependencies\nAvailable Functions\nAvailable Context Managers\ndataclasses\n— Data Classes\nModule contents\nPost-init processing\nClass variables\nInit-only variables\nFrozen instances\nInheritance\nRe-ordering of keyword-only parameters in\n__init__()\nDefault factory functions\nMutable default values\nDescriptor-typed fields\ncontextlib\n— Utilities for\nwith\n-statement contexts\nUtilities\nExamples and Recipes\nSupporting a variable number of context managers\nCatching exceptions from\n__enter__\nmethods\nCleaning up in an\n__enter__\nimplementation\nReplacing any use of\ntry-finally\nand flag variables\nUsing a context manager as a function decorator\nSingle use, reusable and reentrant context managers\nReentrant context managers\nReusable context managers\nabc\n— Abstract Base Classes\natexit\n— Exit handlers\natexit\nExample\ntraceback\n— Print or retrieve a stack traceback\nModule-Level Functions\nTracebackException\nObjects\nStackSummary\nObjects\nFrameSummary\nObjects\nExamples of Using the Module-Level Functions\nExamples of Using\nTracebackException\n__future__\n— Future statement definitions\nModule Contents\ngc\n— Garbage Collector interface\ninspect\n— Inspect live objects\nTypes and members\nRetrieving source code\nIntrospecting callables with the Signature object\nClasses and functions\nThe interpreter stack\nFetching attributes statically\nCurrent State of Generators, Coroutines, and Asynchronous Generators\nCode Objects Bit Flags\nBuffer flags\nCommand Line Interface\nsite\n— Site-specific configuration hook\nsitecustomize\nusercustomize\nReadline configuration\nModule contents\nCommand Line Interface\nCustom Python Interpreters\ncode\n— Interpreter base classes\nInteractive Interpreter Objects\nInteractive Console Objects\ncodeop\n— Compile Python code\nImporting Modules\nzipimport\n— Import modules from Zip archives\nzipimporter Objects\nExamples\npkgutil\n— Package extension utility\nmodulefinder\n— Find modules used by a script\nExample usage of\nModuleFinder\nrunpy\n— Locating and executing Python modules\nimportlib\n— The implementation of\nimport\nIntroduction\nFunctions\nimportlib.abc\n– Abstract base classes related to import\nimportlib.machinery\n– Importers and path hooks\nimportlib.util\n– Utility code for importers\nExamples\nImporting programmatically\nChecking if a module can be imported\nImporting a source file directly\nImplementing lazy imports\nSetting up an importer\nApproximating\nimportlib.import_module()\nimportlib.resources\n– Package resource reading, opening and access\nFunctional API\nimportlib.resources.abc\n– Abstract base classes for resources\nimportlib.metadata\n– Accessing package metadata\nOverview\nFunctional API\nEntry points\nDistribution metadata\nDistribution versions\nDistribution files\nDistribution requirements\nMapping import to distribution packages\nDistributions\nDistribution Discovery\nExtending the search algorithm\nExample\nThe initialization of the\nsys.path\nmodule search path\nVirtual environments\n_pth files\nEmbedded Python\nPython Language Services\nast\n— Abstract Syntax Trees\nAbstract Grammar\nNode classes\nRoot nodes\nLiterals\nVariables\nExpressions\nSubscripting\nComprehensions\nStatements\nImports\nControl flow\nPattern matching\nType annotations\nType parameters\nFunction and class definitions\nAsync and await\nast\nHelpers\nCompiler Flags\nCommand-Line Usage\nsymtable\n— Access to the compiler’s symbol tables\nGenerating Symbol Tables\nExamining Symbol Tables\nCommand-Line Usage\ntoken\n— Constants used with Python parse trees\nkeyword\n— Testing for Python keywords\ntokenize\n— Tokenizer for Python source\nTokenizing Input\nCommand-Line Usage\nExamples\ntabnanny\n— Detection of ambiguous indentation\npyclbr\n— Python module browser support\nFunction Objects\nClass Objects\npy_compile\n— Compile Python source files\nCommand-Line Interface\ncompileall\n— Byte-compile Python libraries\nCommand-line use\nPublic functions\ndis\n— Disassembler for Python bytecode\nCommand-line interface\nBytecode analysis\nAnalysis functions\nPython Bytecode Instructions\nOpcode collections\npickletools\n— Tools for pickle developers\nCommand line usage\nCommand line options\nProgrammatic Interface\nMS Windows Specific Services\nmsvcrt\n— Useful routines from the MS VC++ runtime\nFile Operations\nConsole I/O\nOther Functions\nwinreg\n— Windows registry access\nFunctions\nConstants\nHKEY_* Constants\nAccess Rights\n64-bit Specific\nValue Types\nRegistry Handle Objects\nwinsound\n— Sound-playing interface for Windows\nUnix Specific Services\nposix\n— The most common POSIX system calls\nLarge File Support\nNotable Module Contents\npwd\n— The password database\ngrp\n— The group database\ntermios\n— POSIX style tty control\nExample\ntty\n— Terminal control functions\npty\n— Pseudo-terminal utilities\nExample\nfcntl\n— The\nfcntl\nand\nioctl\nsystem calls\nresource\n— Resource usage information\nResource Limits\nResource Usage\nsyslog\n— Unix syslog library routines\nExamples\nSimple example\nModules command-line interface (CLI)\nSuperseded Modules\ngetopt\n— C-style parser for command line options\nRemoved Modules\nSecurity Considerations\nExtending and Embedding the Python Interpreter\nRecommended third party tools\nCreating extensions without third party tools\n1. Extending Python with C or C++\n1.1. A Simple Example\n1.2. Intermezzo: Errors and Exceptions\n1.3. Back to the Example\n1.4. The Module’s Method Table and Initialization Function\n1.5. Compilation and Linkage\n1.6. Calling Python Functions from C\n1.7. Extracting Parameters in Extension Functions\n1.8. Keyword Parameters for Extension Functions\n1.9. Building Arbitrary Values\n1.10. Reference Counts\n1.10.1. Reference Counting in Python\n1.10.2. Ownership Rules\n1.10.3. Thin Ice\n1.10.4. NULL Pointers\n1.11. Writing Extensions in C++\n1.12. Providing a C API for an Extension Module\n2. Defining Extension Types: Tutorial\n2.1. The Basics\n2.2. Adding data and methods to the Basic example\n2.3. Providing finer control over data attributes\n2.4. Supporting cyclic garbage collection\n2.5. Subclassing other types\n3. Defining Extension Types: Assorted Topics\n3.1. Finalization and De-allocation\n3.2. Object Presentation\n3.3. Attribute Management\n3.3.1. Generic Attribute Management\n3.3.2. Type-specific Attribute Management\n3.4. Object Comparison\n3.5. Abstract Protocol Support\n3.6. Weak Reference Support\n3.7. More Suggestions\n4. Building C and C++ Extensions\n4.1. Building C and C++ Extensions with setuptools\n5. Building C and C++ Extensions on Windows\n5.1. A Cookbook Approach\n5.2. Differences Between Unix and Windows\n5.3. Using DLLs in Practice\nEmbedding the CPython runtime in a larger application\n1. Embedding Python in Another Application\n1.1. Very High Level Embedding\n1.2. Beyond Very High Level Embedding: An overview\n1.3. Pure Embedding\n1.4. Extending Embedded Python\n1.5. Embedding Python in C++\n1.6. Compiling and Linking under Unix-like systems\nPython/C API Reference Manual\nIntroduction\nCoding standards\nInclude Files\nUseful macros\nObjects, Types and Reference Counts\nReference Counts\nReference Count Details\nTypes\nExceptions\nEmbedding Python\nDebugging Builds\nRecommended third party tools\nC API Stability\nUnstable C API\nStable Application Binary Interface\nLimited C API\nStable ABI\nLimited API Scope and Performance\nLimited API Caveats\nPlatform Considerations\nContents of Limited API\nThe Very High Level Layer\nReference Counting\nException Handling\nPrinting and clearing\nRaising exceptions\nIssuing warnings\nQuerying the error indicator\nSignal Handling\nException Classes\nException Objects\nUnicode Exception Objects\nRecursion Control\nException and warning types\nException types\nOSError aliases\nWarning types\nUtilities\nOperating System Utilities\nSystem Functions\nProcess Control\nImporting Modules\nData marshalling support\nParsing arguments and building values\nParsing arguments\nStrings and buffers\nNumbers\nOther objects\nAPI Functions\nBuilding values\nString conversion and formatting\nPyHash API\nReflection\nCodec registry and support functions\nCodec lookup API\nRegistry API for Unicode encoding error handlers\nPyTime C API\nTypes\nClock Functions\nRaw Clock Functions\nConversion functions\nSupport for Perf Maps\nAbstract Objects Layer\nObject Protocol\nCall Protocol\nThe\ntp_call\nProtocol\nThe Vectorcall Protocol\nRecursion Control\nVectorcall Support API\nObject Calling API\nCall Support API\nNumber Protocol\nSequence Protocol\nMapping Protocol\nIterator Protocol\nBuffer Protocol\nBuffer structure\nBuffer request types\nrequest-independent fields\nreadonly, format\nshape, strides, suboffsets\ncontiguity requests\ncompound requests\nComplex arrays\nNumPy-style: shape and strides\nPIL-style: shape, strides and suboffsets\nBuffer-related functions\nConcrete Objects Layer\nFundamental Objects\nType Objects\nCreating Heap-Allocated Types\nThe\nNone\nObject\nNumeric Objects\nInteger Objects\nBoolean Objects\nFloating-Point Objects\nPack and Unpack functions\nPack functions\nUnpack functions\nComplex Number Objects\nComplex Numbers as C Structures\nComplex Numbers as Python Objects\nSequence Objects\nBytes Objects\nByte Array Objects\nType check macros\nDirect API functions\nMacros\nUnicode Objects and Codecs\nUnicode Objects\nUnicode Type\nUnicode Character Properties\nCreating and accessing Unicode strings\nLocale Encoding\nFile System Encoding\nwchar_t Support\nBuilt-in Codecs\nGeneric Codecs\nUTF-8 Codecs\nUTF-32 Codecs\nUTF-16 Codecs\nUTF-7 Codecs\nUnicode-Escape Codecs\nRaw-Unicode-Escape Codecs\nLatin-1 Codecs\nASCII Codecs\nCharacter Map Codecs\nMBCS codecs for Windows\nMethods and Slot Functions\nTuple Objects\nStruct Sequence Objects\nList Objects\nContainer Objects\nDictionary Objects\nSet Objects\nFunction Objects\nFunction Objects\nInstance Method Objects\nMethod Objects\nCell Objects\nCode Objects\nExtra information\nOther Objects\nFile Objects\nModule Objects\nInitializing C modules\nSingle-phase initialization\nMulti-phase initialization\nLow-level module creation functions\nSupport functions\nModule lookup\nIterator Objects\nDescriptor Objects\nSlice Objects\nEllipsis Object\nMemoryView objects\nWeak Reference Objects\nCapsules\nFrame Objects\nFrame Locals Proxies\nInternal Frames\nGenerator Objects\nCoroutine Objects\nContext Variables Objects\nDateTime Objects\nObjects for Type Hinting\nInitialization, Finalization, and Threads\nBefore Python Initialization\nGlobal configuration variables\nInitializing and finalizing the interpreter\nProcess-wide parameters\nThread State and the Global Interpreter Lock\nReleasing the GIL from extension code\nNon-Python created threads\nCautions about fork()\nHigh-level API\nLow-level API\nSub-interpreter support\nA Per-Interpreter GIL\nBugs and caveats\nAsynchronous Notifications\nProfiling and Tracing\nReference tracing\nAdvanced Debugger Support\nThread Local Storage Support\nThread Specific Storage (TSS) API\nDynamic Allocation\nMethods\nThread Local Storage (TLS) API\nSynchronization Primitives\nPython Critical Section API\nPython Initialization Configuration\nExample\nPyWideStringList\nPyStatus\nPyPreConfig\nPreinitialize Python with PyPreConfig\nPyConfig\nInitialization with PyConfig\nIsolated Configuration\nPython Configuration\nPython Path Configuration\nPy_GetArgcArgv()\nMulti-Phase Initialization Private Provisional API\nMemory Management\nOverview\nAllocator Domains\nRaw Memory Interface\nMemory Interface\nObject allocators\nDefault Memory Allocators\nCustomize Memory Allocators\nDebug hooks on the Python memory allocators\nThe pymalloc allocator\nCustomize pymalloc Arena Allocator\nThe mimalloc allocator\ntracemalloc C API\nExamples\nObject Implementation Support\nAllocating Objects on the Heap\nCommon Object Structures\nBase object types and macros\nImplementing functions and methods\nAccessing attributes of extension types\nMember flags\nMember types\nDefining Getters and Setters\nType Object Structures\nQuick Reference\n“tp slots”\nsub-slots\nslot typedefs\nPyTypeObject Definition\nPyObject Slots\nPyVarObject Slots\nPyTypeObject Slots\nStatic Types\nHeap Types\nNumber Object Structures\nMapping Object Structures\nSequence Object Structures\nBuffer Object Structures\nAsync Object Structures\nSlot Type typedefs\nExamples\nSupporting Cyclic Garbage Collection\nControlling the Garbage Collector State\nQuerying Garbage Collector State\nAPI and ABI Versioning\nMonitoring C API\nGenerating Execution Events\nManaging the Monitoring State\nInstalling Python Modules\nKey terms\nBasic usage\nHow do I …?\n… install\npip\nin versions of Python prior to Python 3.4?\n… install packages just for the current user?\n… install scientific Python packages?\n… work with multiple versions of Python installed in parallel?\nCommon installation issues\nInstalling into the system Python on Linux\nPip not installed\nInstalling binary extensions\nPython HOWTOs\nPython Frequently Asked Questions\nGeneral Python FAQ\nGeneral Information\nPython in the real world\nProgramming FAQ\nGeneral Questions\nCore Language\nNumbers and strings\nPerformance\nSequences (Tuples/Lists)\nObjects\nModules\nDesign and History FAQ\nWhy does Python use indentation for grouping of statements?\nWhy am I getting strange results with simple arithmetic operations?\nWhy are floating-point calculations so inaccurate?\nWhy are Python strings immutable?\nWhy must ‘self’ be used explicitly in method definitions and calls?\nWhy can’t I use an assignment in an expression?\nWhy does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?\nWhy is join() a string method instead of a list or tuple method?\nHow fast are exceptions?\nWhy isn’t there a switch or case statement in Python?\nCan’t you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?\nWhy can’t lambda expressions contain statements?\nCan Python be compiled to machine code, C or some other language?\nHow does Python manage memory?\nWhy doesn’t CPython use a more traditional garbage collection scheme?\nWhy isn’t all memory freed when CPython exits?\nWhy are there separate tuple and list data types?\nHow are lists implemented in CPython?\nHow are dictionaries implemented in CPython?\nWhy must dictionary keys be immutable?\nWhy doesn’t list.sort() return the sorted list?\nHow do you specify and enforce an interface spec in Python?\nWhy is there no goto?\nWhy can’t raw strings (r-strings) end with a backslash?\nWhy doesn’t Python have a “with” statement for attribute assignments?\nWhy don’t generators support the with statement?\nWhy are colons required for the if/while/def/class statements?\nWhy does Python allow commas at the end of lists and tuples?\nLibrary and Extension FAQ\nGeneral Library Questions\nCommon tasks\nThreads\nInput and Output\nNetwork/Internet Programming\nDatabases\nMathematics and Numerics\nExtending/Embedding FAQ\nCan I create my own functions in C?\nCan I create my own functions in C++?\nWriting C is hard; are there any alternatives?\nHow can I execute arbitrary Python statements from C?\nHow can I evaluate an arbitrary Python expression from C?\nHow do I extract C values from a Python object?\nHow do I use Py_BuildValue() to create a tuple of arbitrary length?\nHow do I call an object’s method from C?\nHow do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?\nHow do I access a module written in Python from C?\nHow do I interface to C++ objects from Python?\nI added a module using the Setup file and the make fails; why?\nHow do I debug an extension?\nI want to compile a Python module on my Linux system, but some files are missing. Why?\nHow do I tell “incomplete input” from “invalid input”?\nHow do I find undefined g++ symbols __builtin_new or __pure_virtual?\nCan I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?\nPython on Windows FAQ\nHow do I run a Python program under Windows?\nHow do I make Python scripts executable?\nWhy does Python sometimes take so long to start?\nHow do I make an executable from a Python script?\nIs a\n*.pyd\nfile the same as a DLL?\nHow can I embed Python into a Windows application?\nHow do I keep editors from inserting tabs into my Python source?\nHow do I check for a keypress without blocking?\nHow do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll error?\nGraphic User Interface FAQ\nGeneral GUI Questions\nWhat GUI toolkits exist for Python?\nTkinter questions\n“Why is Python Installed on my Computer?” FAQ\nWhat is Python?\nWhy is Python installed on my machine?\nCan I delete Python?\nDeprecations\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nC API Deprecations\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending Removal in Future Versions\nGlossary\nAbout this documentation\nContributors to the Python documentation\nDealing with Bugs\nDocumentation bugs\nUsing the Python issue tracker\nGetting started contributing to Python yourself\nCopyright\nHistory and License\nHistory of the software\nTerms and conditions for accessing or otherwise using Python\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION\nLicenses and Acknowledgements for Incorporated Software\nMersenne Twister\nSockets\nAsynchronous socket services\nCookie management\nExecution tracing\nUUencode and UUdecode functions\nXML Remote Procedure Calls\ntest_epoll\nSelect kqueue\nSipHash24\nstrtod and dtoa\nOpenSSL\nexpat\nlibffi\nzlib\ncfuhash\nlibmpdec\nW3C C14N test suite\nmimalloc\nasyncio\nGlobal Unbounded Sequences (GUS)\nNext topic\nWhat’s New in Python\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Documentation contents\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/contents.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12348.9054539
  },
  {
    "title": "Index – Z",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – Z\nz\nin string formatting\nz85decode() (in module base64)\nz85encode() (in module base64)\nZen of Python\nZeroDivisionError\nexception\nzfill() (bytearray method)\n(bytes method)\n(str method)\nzip()\nbuilt-in function\nZIP_BZIP2 (in module zipfile)\nZIP_DEFLATED (in module zipfile)\nzip_longest() (in module itertools)\nZIP_LZMA (in module zipfile)\nZIP_STORED (in module zipfile)\nzipapp\nmodule\nzipapp command line option\n--compress\n--help\n--info\n--main\n--output\n--python\n-c\n-h\n-m\n-o\n-p\nzipfile\nmodule\nZipFile (class in zipfile)\nzipfile command line option\n--create\n--extract\n--list\n--metadata-encoding\n--test\n-c\n-e\n-l\n-t\nzipimport\nmodule\nzipimporter (class in zipimport)\nZipImportError\nZipInfo (class in zipfile)\nzlib\nmodule\nZLIB_CFLAGS\ncommand line option\nZLIB_LIBS\ncommand line option\nZLIB_RUNTIME_VERSION (in module zlib)\nZLIB_VERSION (in module zlib)\nzoneinfo\nmodule\nZoneInfo (class in zoneinfo)\nZoneInfoNotFoundError\nzscore() (statistics.NormalDist method)\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/genindex-Z.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12349.7837761
  },
  {
    "title": "Python Module Index",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Module Index\n|\nTheme\nAuto\nLight\nDark\n|\nPython Module Index\n_\n|\na\n|\nb\n|\nc\n|\nd\n|\ne\n|\nf\n|\ng\n|\nh\n|\ni\n|\nj\n|\nk\n|\nl\n|\nm\n|\nn\n|\no\n|\np\n|\nq\n|\nr\n|\ns\n|\nt\n|\nu\n|\nv\n|\nw\n|\nx\n|\nz\n_\n__future__\nFuture statement definitions\n__main__\nThe environment where top-level code is run. Covers command-line\ninterfaces, import-time behavior, and ``__name__ == '__main__'``.\n_thread\nLow-level threading API.\n_tkinter\nA binary module that contains the low-level interface to Tcl/Tk.\na\nabc\nAbstract base classes according to :pep:`3119`.\naifc\nDeprecated:\nRemoved in 3.13.\nargparse\nCommand-line option and argument parsing library.\narray\nSpace efficient arrays of uniformly typed numeric values.\nast\nAbstract Syntax Tree classes and manipulation.\nasynchat\nDeprecated:\nRemoved in 3.12.\nasyncio\nAsynchronous I/O.\nasyncore\nDeprecated:\nRemoved in 3.12.\natexit\nRegister and execute cleanup functions.\naudioop\nDeprecated:\nRemoved in 3.13.\nb\nbase64\nRFC 4648: Base16, Base32, Base64 Data Encodings;\nBase85 and Ascii85\nbdb\nDebugger framework.\nbinascii\nTools for converting between binary and various ASCII-encoded binary\nrepresentations.\nbisect\nArray bisection algorithms for binary searching.\nbuiltins\nThe module that provides the built-in namespace.\nbz2\nInterfaces for bzip2 compression and decompression.\nc\ncalendar\nFunctions for working with calendars, including some emulation\nof the Unix cal program.\ncgi\nDeprecated:\nRemoved in 3.13.\ncgitb\nDeprecated:\nRemoved in 3.13.\nchunk\nDeprecated:\nRemoved in 3.13.\ncmath\nMathematical functions for complex numbers.\ncmd\nBuild line-oriented command interpreters.\ncode\nFacilities to implement read-eval-print loops.\ncodecs\nEncode and decode data and streams.\ncodeop\nCompile (possibly incomplete) Python code.\ncollections\nContainer datatypes\ncollections.abc\nAbstract base classes for containers\ncolorsys\nConversion functions between RGB and other color systems.\ncompileall\nTools for byte-compiling all Python source files in a directory tree.\nconcurrent\nconcurrent.futures\nExecute computations concurrently using threads or processes.\nconfigparser\nConfiguration file parser.\ncontextlib\nUtilities for with-statement contexts.\ncontextvars\nContext Variables\ncopy\nShallow and deep copy operations.\ncopyreg\nRegister pickle support functions.\ncProfile\ncrypt\nDeprecated:\nRemoved in 3.13.\ncsv\nWrite and read tabular data to and from delimited files.\nctypes\nA foreign function library for Python.\ncurses\n(Unix)\nAn interface to the curses library, providing portable\nterminal handling.\ncurses.ascii\nConstants and set-membership functions for ASCII characters.\ncurses.panel\nA panel stack extension that adds depth to  curses windows.\ncurses.textpad\nEmacs-like input editing in a curses window.\nd\ndataclasses\nGenerate special methods on user-defined classes.\ndatetime\nBasic date and time types.\ndbm\nInterfaces to various Unix \"database\" formats.\ndbm.dumb\nPortable implementation of the simple DBM interface.\ndbm.gnu\n(Unix)\nGNU database manager\ndbm.ndbm\n(Unix)\nThe New Database Manager\ndbm.sqlite3\n(All)\nSQLite backend for dbm\ndecimal\nImplementation of the General Decimal Arithmetic Specification.\ndifflib\nHelpers for computing differences between objects.\ndis\nDisassembler for Python bytecode.\ndistutils\nDeprecated:\nRemoved in 3.12.\ndoctest\nTest pieces of code within docstrings.\ne\nemail\nPackage supporting the parsing, manipulating, and generating\nemail messages.\nemail.charset\nCharacter Sets\nemail.contentmanager\nStoring and Retrieving Content from MIME Parts\nemail.encoders\nEncoders for email message payloads.\nemail.errors\nThe exception classes used by the email package.\nemail.generator\nGenerate flat text email messages from a message structure.\nemail.header\nRepresenting non-ASCII headers\nemail.headerregistry\nAutomatic Parsing of headers based on the field name\nemail.iterators\nIterate over a  message object tree.\nemail.message\nThe base class representing email messages.\nemail.mime\nBuild MIME messages.\nemail.mime.application\nemail.mime.audio\nemail.mime.base\nemail.mime.image\nemail.mime.message\nemail.mime.multipart\nemail.mime.nonmultipart\nemail.mime.text\nemail.parser\nParse flat text email messages to produce a message object structure.\nemail.policy\nControlling the parsing and generating of messages\nemail.utils\nMiscellaneous email package utilities.\nencodings\nEncodings package\nencodings.idna\nInternationalized Domain Names implementation\nencodings.mbcs\nWindows ANSI codepage\nencodings.utf_8_sig\nUTF-8 codec with BOM signature\nensurepip\nBootstrapping the \"pip\" installer into an existing Python\ninstallation or virtual environment.\nenum\nImplementation of an enumeration class.\nerrno\nStandard errno system symbols.\nf\nfaulthandler\nDump the Python traceback.\nfcntl\n(Unix)\nThe fcntl() and ioctl() system calls.\nfilecmp\nCompare files efficiently.\nfileinput\nLoop over standard input or a list of files.\nfnmatch\nUnix shell style filename pattern matching.\nfractions\nRational numbers.\nftplib\nFTP protocol client (requires sockets).\nfunctools\nHigher-order functions and operations on callable objects.\ng\ngc\nInterface to the cycle-detecting garbage collector.\ngetopt\nPortable parser for command line options; support both short and\nlong option names.\ngetpass\nPortable reading of passwords and retrieval of the userid.\ngettext\nMultilingual internationalization services.\nglob\nUnix shell style pathname pattern expansion.\ngraphlib\nFunctionality to operate with graph-like structures\ngrp\n(Unix)\nThe group database (getgrnam() and friends).\ngzip\nInterfaces for gzip compression and decompression using file objects.\nh\nhashlib\nSecure hash and message digest algorithms.\nheapq\nHeap queue algorithm (a.k.a. priority queue).\nhmac\nKeyed-Hashing for Message Authentication (HMAC) implementation\nhtml\nHelpers for manipulating HTML.\nhtml.entities\nDefinitions of HTML general entities.\nhtml.parser\nA simple parser that can handle HTML and XHTML.\nhttp\nHTTP status codes and messages\nhttp.client\nHTTP and HTTPS protocol client (requires sockets).\nhttp.cookiejar\nClasses for automatic handling of HTTP cookies.\nhttp.cookies\nSupport for HTTP state management (cookies).\nhttp.server\nHTTP server and request handlers.\ni\nidlelib\nImplementation package for the IDLE shell/editor.\nimaplib\nIMAP4 protocol client (requires sockets).\nimghdr\nDeprecated:\nRemoved in 3.13.\nimp\nDeprecated:\nRemoved in 3.12.\nimportlib\nThe implementation of the import machinery.\nimportlib.abc\nAbstract base classes related to import\nimportlib.machinery\nImporters and path hooks\nimportlib.metadata\nAccessing package metadata\nimportlib.resources\nPackage resource reading, opening, and access\nimportlib.resources.abc\nAbstract base classes for resources\nimportlib.util\nUtility code for importers\ninspect\nExtract information and source code from live objects.\nio\nCore tools for working with streams.\nipaddress\nIPv4/IPv6 manipulation library.\nitertools\nFunctions creating iterators for efficient looping.\nj\njson\nEncode and decode the JSON format.\njson.tool\nA command line to validate and pretty-print JSON.\nk\nkeyword\nTest whether a string is a keyword in Python.\nl\nlinecache\nProvides random access to individual lines from text files.\nlocale\nInternationalization services.\nlogging\nFlexible event logging system for applications.\nlogging.config\nConfiguration of the logging module.\nlogging.handlers\nHandlers for the logging module.\nlzma\nA Python wrapper for the liblzma compression library.\nm\nmailbox\nManipulate mailboxes in various formats\nmailcap\nDeprecated:\nRemoved in 3.13.\nmarshal\nConvert Python objects to streams of bytes and back (with different\nconstraints).\nmath\nMathematical functions (sin() etc.).\nmimetypes\nMapping of filename extensions to MIME types.\nmmap\nInterface to memory-mapped files for Unix and Windows.\nmodulefinder\nFind modules used by a script.\nmsilib\nDeprecated:\nRemoved in 3.13.\nmsvcrt\n(Windows)\nMiscellaneous useful routines from the MS VC++ runtime.\nmultiprocessing\nProcess-based parallelism.\nmultiprocessing.connection\nAPI for dealing with sockets.\nmultiprocessing.dummy\nDumb wrapper around threading.\nmultiprocessing.managers\nShare data between process with shared objects.\nmultiprocessing.pool\nCreate pools of processes.\nmultiprocessing.shared_memory\nProvides shared memory for direct access across processes.\nmultiprocessing.sharedctypes\nAllocate ctypes objects from shared memory.\nn\nnetrc\nLoading of .netrc files.\nnis\nDeprecated:\nRemoved in 3.13.\nnntplib\nDeprecated:\nRemoved in 3.13.\nnumbers\nNumeric abstract base classes (Complex, Real, Integral, etc.).\no\noperator\nFunctions corresponding to the standard operators.\noptparse\nCommand-line option parsing library.\nos\nMiscellaneous operating system interfaces.\nos.path\nOperations on pathnames.\nossaudiodev\nDeprecated:\nRemoved in 3.13.\np\npathlib\nObject-oriented filesystem paths\npdb\nThe Python debugger for interactive interpreters.\npickle\nConvert Python objects to streams of bytes and back.\npickletools\nContains extensive comments about the pickle protocols and\npickle-machine opcodes, as well as some useful functions.\npipes\nDeprecated:\nRemoved in 3.13.\npkgutil\nUtilities for the import system.\nplatform\nRetrieves as much platform identifying data as possible.\nplistlib\nGenerate and parse Apple plist files.\npoplib\nPOP3 protocol client (requires sockets).\nposix\n(Unix)\nThe most common POSIX system calls (normally used via module os).\npprint\nData pretty printer.\nprofile\nPython source profiler.\npstats\nStatistics object for use with the profiler.\npty\n(Unix)\nPseudo-Terminal Handling for Unix.\npwd\n(Unix)\nThe password database (getpwnam() and friends).\npy_compile\nGenerate byte-code files from Python source files.\npyclbr\nSupports information extraction for a Python module browser.\npydoc\nDocumentation generator and online help system.\nq\nqueue\nA synchronized queue class.\nquopri\nEncode and decode files using the MIME quoted-printable encoding.\nr\nrandom\nGenerate pseudo-random numbers with various common distributions.\nre\nRegular expression operations.\nreadline\n(Unix)\nGNU readline support for Python.\nreprlib\nAlternate repr() implementation with size limits.\nresource\n(Unix)\nAn interface to provide resource usage information on the current process.\nrlcompleter\nPython identifier completion, suitable for the GNU readline library.\nrunpy\nLocate and run Python modules without importing them first.\ns\nsched\nGeneral purpose event scheduler.\nsecrets\nGenerate secure random numbers for managing secrets.\nselect\nWait for I/O completion on multiple streams.\nselectors\nHigh-level I/O multiplexing.\nshelve\nPython object persistence.\nshlex\nSimple lexical analysis for Unix shell-like languages.\nshutil\nHigh-level file operations, including copying.\nsignal\nSet handlers for asynchronous events.\nsite\nModule responsible for site-specific configuration.\nsitecustomize\nsmtpd\nDeprecated:\nRemoved in 3.12.\nsmtplib\nSMTP protocol client (requires sockets).\nsndhdr\nDeprecated:\nRemoved in 3.13.\nsocket\nLow-level networking interface.\nsocketserver\nA framework for network servers.\nspwd\nDeprecated:\nRemoved in 3.13.\nsqlite3\nA DB-API 2.0 implementation using SQLite 3.x.\nssl\nTLS/SSL wrapper for socket objects\nstat\nUtilities for interpreting the results of os.stat(),\nos.lstat() and os.fstat().\nstatistics\nMathematical statistics functions\nstring\nCommon string operations.\nstringprep\nString preparation, as per RFC 3453\nstruct\nInterpret bytes as packed binary data.\nsubprocess\nSubprocess management.\nsunau\nDeprecated:\nRemoved in 3.13.\nsymtable\nInterface to the compiler's internal symbol tables.\nsys\nAccess system-specific parameters and functions.\nsys.monitoring\nAccess and control event monitoring\nsysconfig\nPython's configuration information\nsyslog\n(Unix)\nAn interface to the Unix syslog library routines.\nt\ntabnanny\nTool for detecting white space related problems in Python\nsource files in a directory tree.\ntarfile\nRead and write tar-format archive files.\ntelnetlib\nDeprecated:\nRemoved in 3.13.\ntempfile\nGenerate temporary files and directories.\ntermios\n(Unix)\nPOSIX style tty control.\ntest\nRegression tests package containing the testing suite for Python.\ntest.regrtest\nDrives the regression test suite.\ntest.support\nSupport for Python's regression test suite.\ntest.support.bytecode_helper\nSupport tools for testing correct bytecode generation.\ntest.support.import_helper\nSupport for import tests.\ntest.support.os_helper\nSupport for os tests.\ntest.support.script_helper\nSupport for Python's script execution tests.\ntest.support.socket_helper\nSupport for socket tests.\ntest.support.threading_helper\nSupport for threading tests.\ntest.support.warnings_helper\nSupport for warnings tests.\ntextwrap\nText wrapping and filling\nthreading\nThread-based parallelism.\ntime\nTime access and conversions.\ntimeit\nMeasure the execution time of small code snippets.\ntkinter\nInterface to Tcl/Tk for graphical user interfaces\ntkinter.colorchooser\n(Tk)\nColor choosing dialog\ntkinter.commondialog\n(Tk)\nTkinter base class for dialogs\ntkinter.dnd\n(Tk)\nTkinter drag-and-drop interface\ntkinter.filedialog\n(Tk)\nDialog classes for file selection\ntkinter.font\n(Tk)\nTkinter font-wrapping class\ntkinter.messagebox\n(Tk)\nVarious types of alert dialogs\ntkinter.scrolledtext\n(Tk)\nText widget with a vertical scroll bar.\ntkinter.simpledialog\n(Tk)\nSimple dialog windows\ntkinter.ttk\nTk themed widget set\ntoken\nConstants representing terminal nodes of the parse tree.\ntokenize\nLexical scanner for Python source code.\ntomllib\nParse TOML files.\ntrace\nTrace or track Python statement execution.\ntraceback\nPrint or retrieve a stack traceback.\ntracemalloc\nTrace memory allocations.\ntty\n(Unix)\nUtility functions that perform common terminal control operations.\nturtle\nAn educational framework for simple graphics applications\nturtledemo\nA viewer for example turtle scripts\ntypes\nNames for built-in types.\ntyping\nSupport for type hints (see :pep:`484`).\nu\nunicodedata\nAccess the Unicode Database.\nunittest\nUnit testing framework for Python.\nunittest.mock\nMock object library.\nurllib\nurllib.error\nException classes raised by urllib.request.\nurllib.parse\nParse URLs into or assemble them from components.\nurllib.request\nExtensible library for opening URLs.\nurllib.response\nResponse classes used by urllib.\nurllib.robotparser\nLoad a robots.txt file and answer questions about\nfetchability of other URLs.\nusercustomize\nuu\nDeprecated:\nRemoved in 3.13.\nuuid\nUUID objects (universally unique identifiers) according to RFC 4122\nv\nvenv\nCreation of virtual environments.\nw\nwarnings\nIssue warning messages and control their disposition.\nwave\nProvide an interface to the WAV sound format.\nweakref\nSupport for weak references and weak dictionaries.\nwebbrowser\nEasy-to-use controller for web browsers.\nwinreg\n(Windows)\nRoutines and objects for manipulating the Windows registry.\nwinsound\n(Windows)\nAccess to the sound-playing machinery for Windows.\nwsgiref\nWSGI Utilities and Reference Implementation.\nwsgiref.handlers\nWSGI server/gateway base classes.\nwsgiref.headers\nWSGI response header tools.\nwsgiref.simple_server\nA simple WSGI HTTP server.\nwsgiref.types\nWSGI types for static type checking\nwsgiref.util\nWSGI environment utilities.\nwsgiref.validate\nWSGI conformance checker.\nx\nxdrlib\nDeprecated:\nRemoved in 3.13.\nxml\nPackage containing XML processing modules\nxml.dom\nDocument Object Model API for Python.\nxml.dom.minidom\nMinimal Document Object Model (DOM) implementation.\nxml.dom.pulldom\nSupport for building partial DOM trees from SAX events.\nxml.etree.ElementInclude\nxml.etree.ElementTree\nImplementation of the ElementTree API.\nxml.parsers.expat\nAn interface to the Expat non-validating XML parser.\nxml.parsers.expat.errors\nxml.parsers.expat.model\nxml.sax\nPackage containing SAX2 base classes and convenience functions.\nxml.sax.handler\nBase classes for SAX event handlers.\nxml.sax.saxutils\nConvenience functions and classes for use with SAX.\nxml.sax.xmlreader\nInterface which SAX-compliant XML parsers must implement.\nxmlrpc\nServer and client modules implementing XML-RPC.\nxmlrpc.client\nXML-RPC client access.\nxmlrpc.server\nBasic XML-RPC server implementations.\nz\nzipapp\nManage executable Python zip archives\nzipfile\nRead and write ZIP-format archive files.\nzipimport\nSupport for importing Python modules from ZIP archives.\nzlib\nLow-level interface to compression and decompression routines\ncompatible with gzip.\nzoneinfo\nIANA time zone support\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Module Index\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/py-modindex.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12350.1433042
  },
  {
    "title": "Python/C API Reference Manual¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython/C API Reference Manual\n|\nTheme\nAuto\nLight\nDark\n|\nPython/C API Reference Manual\n¶\nThis manual documents the API used by C and C++ programmers who want to write\nextension modules or embed Python.  It is a companion to\nExtending and Embedding the Python Interpreter\n,\nwhich describes the general principles of extension writing but does not\ndocument the API functions in detail.\nIntroduction\nCoding standards\nInclude Files\nUseful macros\nObjects, Types and Reference Counts\nExceptions\nEmbedding Python\nDebugging Builds\nRecommended third party tools\nC API Stability\nUnstable C API\nStable Application Binary Interface\nPlatform Considerations\nContents of Limited API\nThe Very High Level Layer\nReference Counting\nException Handling\nPrinting and clearing\nRaising exceptions\nIssuing warnings\nQuerying the error indicator\nSignal Handling\nException Classes\nException Objects\nUnicode Exception Objects\nRecursion Control\nException and warning types\nUtilities\nOperating System Utilities\nSystem Functions\nProcess Control\nImporting Modules\nData marshalling support\nParsing arguments and building values\nString conversion and formatting\nPyHash API\nReflection\nCodec registry and support functions\nPyTime C API\nSupport for Perf Maps\nAbstract Objects Layer\nObject Protocol\nCall Protocol\nNumber Protocol\nSequence Protocol\nMapping Protocol\nIterator Protocol\nBuffer Protocol\nConcrete Objects Layer\nFundamental Objects\nNumeric Objects\nSequence Objects\nContainer Objects\nFunction Objects\nOther Objects\nInitialization, Finalization, and Threads\nBefore Python Initialization\nGlobal configuration variables\nInitializing and finalizing the interpreter\nProcess-wide parameters\nThread State and the Global Interpreter Lock\nSub-interpreter support\nAsynchronous Notifications\nProfiling and Tracing\nReference tracing\nAdvanced Debugger Support\nThread Local Storage Support\nSynchronization Primitives\nPython Initialization Configuration\nExample\nPyWideStringList\nPyStatus\nPyPreConfig\nPreinitialize Python with PyPreConfig\nPyConfig\nInitialization with PyConfig\nIsolated Configuration\nPython Configuration\nPython Path Configuration\nPy_GetArgcArgv()\nMulti-Phase Initialization Private Provisional API\nMemory Management\nOverview\nAllocator Domains\nRaw Memory Interface\nMemory Interface\nObject allocators\nDefault Memory Allocators\nCustomize Memory Allocators\nDebug hooks on the Python memory allocators\nThe pymalloc allocator\nThe mimalloc allocator\ntracemalloc C API\nExamples\nObject Implementation Support\nAllocating Objects on the Heap\nCommon Object Structures\nType Object Structures\nSupporting Cyclic Garbage Collection\nAPI and ABI Versioning\nMonitoring C API\nGenerating Execution Events\nManaging the Monitoring State\nPrevious topic\n1.\nEmbedding Python in Another Application\nNext topic\nIntroduction\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython/C API Reference Manual\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/c-api/index.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12350.3304611
  },
  {
    "title": "The Python Profilers¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nDebugging and Profiling\n»\nThe Python Profilers\n|\nTheme\nAuto\nLight\nDark\n|\nThe Python Profilers\n¶\nSource code:\nLib/profile.py\nand\nLib/pstats.py\nIntroduction to the profilers\n¶\ncProfile\nand\nprofile\nprovide\ndeterministic profiling\nof\nPython programs. A\nprofile\nis a set of statistics that describes how\noften and for how long various parts of the program executed. These statistics\ncan be formatted into reports via the\npstats\nmodule.\nThe Python standard library provides two different implementations of the same\nprofiling interface:\ncProfile\nis recommended for most users; it’s a C extension with\nreasonable overhead that makes it suitable for profiling long-running\nprograms.  Based on\nlsprof\n, contributed by Brett Rosen and Ted\nCzotter.\nprofile\n, a pure Python module whose interface is imitated by\ncProfile\n, but which adds significant overhead to profiled programs.\nIf you’re trying to extend the profiler in some way, the task might be easier\nwith this module.  Originally designed and written by Jim Roskind.\nNote\nThe profiler modules are designed to provide an execution profile for a given\nprogram, not for benchmarking purposes (for that, there is\ntimeit\nfor\nreasonably accurate results).  This particularly applies to benchmarking\nPython code against C code: the profilers introduce overhead for Python code,\nbut not for C-level functions, and so the C code would seem faster than any\nPython one.\nInstant User’s Manual\n¶\nThis section is provided for users that “don’t want to read the manual.” It\nprovides a very brief overview, and allows a user to rapidly perform profiling\non an existing application.\nTo profile a function that takes a single argument, you can do:\nimport\ncProfile\nimport\nre\ncProfile\n.\nrun\n(\n're.compile(\"foo|bar\")'\n)\n(Use\nprofile\ninstead of\ncProfile\nif the latter is not available on\nyour system.)\nThe above action would run\nre.compile()\nand print profile results like\nthe following:\n214\nfunction\ncalls\n(\n207\nprimitive\ncalls\n)\nin\n0.002\nseconds\nOrdered\nby\n:\ncumulative\ntime\nncalls\ntottime\npercall\ncumtime\npercall\nfilename\n:\nlineno\n(\nfunction\n)\n1\n0.000\n0.000\n0.002\n0.002\n{\nbuilt\n-\nin\nmethod\nbuiltins\n.\nexec\n}\n1\n0.000\n0.000\n0.001\n0.001\n<\nstring\n>\n:\n1\n(\n<\nmodule\n>\n)\n1\n0.000\n0.000\n0.001\n0.001\n__init__\n.\npy\n:\n250\n(\ncompile\n)\n1\n0.000\n0.000\n0.001\n0.001\n__init__\n.\npy\n:\n289\n(\n_compile\n)\n1\n0.000\n0.000\n0.000\n0.000\n_compiler\n.\npy\n:\n759\n(\ncompile\n)\n1\n0.000\n0.000\n0.000\n0.000\n_parser\n.\npy\n:\n937\n(\nparse\n)\n1\n0.000\n0.000\n0.000\n0.000\n_compiler\n.\npy\n:\n598\n(\n_code\n)\n1\n0.000\n0.000\n0.000\n0.000\n_parser\n.\npy\n:\n435\n(\n_parse_sub\n)\nThe first line indicates that 214 calls were monitored.  Of those calls, 207\nwere\nprimitive\n, meaning that the call was not induced via recursion. The\nnext line:\nOrdered\nby:\ncumulative\ntime\nindicates the output is sorted\nby the\ncumtime\nvalues. The column headings include:\nncalls\nfor the number of calls.\ntottime\nfor the total time spent in the given function (and excluding time made in\ncalls to sub-functions)\npercall\nis the quotient of\ntottime\ndivided by\nncalls\ncumtime\nis the cumulative time spent in this and all subfunctions (from invocation\ntill exit). This figure is accurate\neven\nfor recursive functions.\npercall\nis the quotient of\ncumtime\ndivided by primitive calls\nfilename:lineno(function)\nprovides the respective data of each function\nWhen there are two numbers in the first column (for example\n3/1\n), it means\nthat the function recursed.  The second value is the number of primitive calls\nand the former is the total number of calls.  Note that when the function does\nnot recurse, these two values are the same, and only the single figure is\nprinted.\nInstead of printing the output at the end of the profile run, you can save the\nresults to a file by specifying a filename to the\nrun()\nfunction:\nimport\ncProfile\nimport\nre\ncProfile\n.\nrun\n(\n're.compile(\"foo|bar\")'\n,\n'restats'\n)\nThe\npstats.Stats\nclass reads profile results from a file and formats\nthem in various ways.\nThe files\ncProfile\nand\nprofile\ncan also be invoked as a script to\nprofile another script.  For example:\npython\n-\nm\ncProfile\n[\n-\no\noutput_file\n]\n[\n-\ns\nsort_order\n]\n(\n-\nm\nmodule\n|\nmyscript\n.\npy\n)\n-o\n<output_file>\n¶\nWrites the profile results to a file instead of to stdout.\n-s\n<sort_order>\n¶\nSpecifies one of the\nsort_stats()\nsort values\nto sort the output by.\nThis only applies when\n-o\nis not supplied.\n-m\n<module>\n¶\nSpecifies that a module is being profiled instead of a script.\nAdded in version 3.7:\nAdded the\n-m\noption to\ncProfile\n.\nAdded in version 3.8:\nAdded the\n-m\noption to\nprofile\n.\nThe\npstats\nmodule’s\nStats\nclass has a variety of methods\nfor manipulating and printing the data saved into a profile results file:\nimport\npstats\nfrom\npstats\nimport\nSortKey\np\n=\npstats\n.\nStats\n(\n'restats'\n)\np\n.\nstrip_dirs\n()\n.\nsort_stats\n(\n-\n1\n)\n.\nprint_stats\n()\nThe\nstrip_dirs()\nmethod removed the extraneous path from all\nthe module names. The\nsort_stats()\nmethod sorted all the\nentries according to the standard module/line/name string that is printed. The\nprint_stats()\nmethod printed out all the statistics.  You\nmight try the following sort calls:\np\n.\nsort_stats\n(\nSortKey\n.\nNAME\n)\np\n.\nprint_stats\n()\nThe first call will actually sort the list by function name, and the second call\nwill print out the statistics.  The following are some interesting calls to\nexperiment with:\np\n.\nsort_stats\n(\nSortKey\n.\nCUMULATIVE\n)\n.\nprint_stats\n(\n10\n)\nThis sorts the profile by cumulative time in a function, and then only prints\nthe ten most significant lines.  If you want to understand what algorithms are\ntaking time, the above line is what you would use.\nIf you were looking to see what functions were looping a lot, and taking a lot\nof time, you would do:\np\n.\nsort_stats\n(\nSortKey\n.\nTIME\n)\n.\nprint_stats\n(\n10\n)\nto sort according to time spent within each function, and then print the\nstatistics for the top ten functions.\nYou might also try:\np\n.\nsort_stats\n(\nSortKey\n.\nFILENAME\n)\n.\nprint_stats\n(\n'__init__'\n)\nThis will sort all the statistics by file name, and then print out statistics\nfor only the class init methods (since they are spelled with\n__init__\nin\nthem).  As one final example, you could try:\np\n.\nsort_stats\n(\nSortKey\n.\nTIME\n,\nSortKey\n.\nCUMULATIVE\n)\n.\nprint_stats\n(\n.5\n,\n'init'\n)\nThis line sorts statistics with a primary key of time, and a secondary key of\ncumulative time, and then prints out some of the statistics. To be specific, the\nlist is first culled down to 50% (re:\n.5\n) of its original size, then only\nlines containing\ninit\nare maintained, and that sub-sub-list is printed.\nIf you wondered what functions called the above functions, you could now (\np\nis still sorted according to the last criteria) do:\np\n.\nprint_callers\n(\n.5\n,\n'init'\n)\nand you would get a list of callers for each of the listed functions.\nIf you want more functionality, you’re going to have to read the manual, or\nguess what the following functions do:\np\n.\nprint_callees\n()\np\n.\nadd\n(\n'restats'\n)\nInvoked as a script, the\npstats\nmodule is a statistics browser for\nreading and examining profile dumps.  It has a simple line-oriented interface\n(implemented using\ncmd\n) and interactive help.\nprofile\nand\ncProfile\nModule Reference\n¶\nBoth the\nprofile\nand\ncProfile\nmodules provide the following\nfunctions:\nprofile.\nrun\n(\ncommand\n,\nfilename\n=\nNone\n,\nsort\n=\n-1\n)\n¶\nThis function takes a single argument that can be passed to the\nexec()\nfunction, and an optional file name.  In all cases this routine executes:\nexec\n(\ncommand\n,\n__main__\n.\n__dict__\n,\n__main__\n.\n__dict__\n)\nand gathers profiling statistics from the execution. If no file name is\npresent, then this function automatically creates a\nStats\ninstance and prints a simple profiling report. If the sort value is specified,\nit is passed to this\nStats\ninstance to control how the\nresults are sorted.\nprofile.\nrunctx\n(\ncommand\n,\nglobals\n,\nlocals\n,\nfilename\n=\nNone\n,\nsort\n=\n-1\n)\n¶\nThis function is similar to\nrun()\n, with added arguments to supply the\nglobals and locals mappings for the\ncommand\nstring. This routine\nexecutes:\nexec\n(\ncommand\n,\nglobals\n,\nlocals\n)\nand gathers profiling statistics as in the\nrun()\nfunction above.\nclass\nprofile.\nProfile\n(\ntimer\n=\nNone\n,\ntimeunit\n=\n0.0\n,\nsubcalls\n=\nTrue\n,\nbuiltins\n=\nTrue\n)\n¶\nThis class is normally only used if more precise control over profiling is\nneeded than what the\ncProfile.run()\nfunction provides.\nA custom timer can be supplied for measuring how long code takes to run via\nthe\ntimer\nargument. This must be a function that returns a single number\nrepresenting the current time. If the number is an integer, the\ntimeunit\nspecifies a multiplier that specifies the duration of each unit of time. For\nexample, if the timer returns times measured in thousands of seconds, the\ntime unit would be\n.001\n.\nDirectly using the\nProfile\nclass allows formatting profile results\nwithout writing the profile data to a file:\nimport\ncProfile\n,\npstats\n,\nio\nfrom\npstats\nimport\nSortKey\npr\n=\ncProfile\n.\nProfile\n()\npr\n.\nenable\n()\n# ... do something ...\npr\n.\ndisable\n()\ns\n=\nio\n.\nStringIO\n()\nsortby\n=\nSortKey\n.\nCUMULATIVE\nps\n=\npstats\n.\nStats\n(\npr\n,\nstream\n=\ns\n)\n.\nsort_stats\n(\nsortby\n)\nps\n.\nprint_stats\n()\nprint\n(\ns\n.\ngetvalue\n())\nThe\nProfile\nclass can also be used as a context manager (supported\nonly in\ncProfile\nmodule. see\nContext Manager Types\n):\nimport\ncProfile\nwith\ncProfile\n.\nProfile\n()\nas\npr\n:\n# ... do something ...\npr\n.\nprint_stats\n()\nChanged in version 3.8:\nAdded context manager support.\nenable\n(\n)\n¶\nStart collecting profiling data. Only in\ncProfile\n.\ndisable\n(\n)\n¶\nStop collecting profiling data. Only in\ncProfile\n.\ncreate_stats\n(\n)\n¶\nStop collecting profiling data and record the results internally\nas the current profile.\nprint_stats\n(\nsort\n=\n-1\n)\n¶\nCreate a\nStats\nobject based on the current\nprofile and print the results to stdout.\nThe\nsort\nparameter specifies the sorting order of the displayed\nstatistics. It accepts a single key or a tuple of keys to enable\nmulti-level sorting, as in\nStats.sort_stats\n.\nAdded in version 3.13:\nprint_stats()\nnow accepts a tuple of keys.\ndump_stats\n(\nfilename\n)\n¶\nWrite the results of the current profile to\nfilename\n.\nrun\n(\ncmd\n)\n¶\nProfile the cmd via\nexec()\n.\nrunctx\n(\ncmd\n,\nglobals\n,\nlocals\n)\n¶\nProfile the cmd via\nexec()\nwith the specified global and\nlocal environment.\nruncall\n(\nfunc\n,\n/\n,\n*\nargs\n,\n**\nkwargs\n)\n¶\nProfile\nfunc(*args,\n**kwargs)\nNote that profiling will only work if the called command/function actually\nreturns.  If the interpreter is terminated (e.g. via a\nsys.exit()\ncall\nduring the called command/function execution) no profiling results will be\nprinted.\nThe\nStats\nClass\n¶\nAnalysis of the profiler data is done using the\nStats\nclass.\nclass\npstats.\nStats\n(\n*filenames\nor\nprofile\n,\nstream=sys.stdout\n)\n¶\nThis class constructor creates an instance of a “statistics object” from a\nfilename\n(or list of filenames) or from a\nProfile\ninstance. Output\nwill be printed to the stream specified by\nstream\n.\nThe file selected by the above constructor must have been created by the\ncorresponding version of\nprofile\nor\ncProfile\n.  To be specific,\nthere is\nno\nfile compatibility guaranteed with future versions of this\nprofiler, and there is no compatibility with files produced by other\nprofilers, or the same profiler run on a different operating system.  If\nseveral files are provided, all the statistics for identical functions will\nbe coalesced, so that an overall view of several processes can be considered\nin a single report.  If additional files need to be combined with data in an\nexisting\nStats\nobject, the\nadd()\nmethod\ncan be used.\nInstead of reading the profile data from a file, a\ncProfile.Profile\nor\nprofile.Profile\nobject can be used as the profile data source.\nStats\nobjects have the following methods:\nstrip_dirs\n(\n)\n¶\nThis method for the\nStats\nclass removes all leading path\ninformation from file names.  It is very useful in reducing the size of\nthe printout to fit within (close to) 80 columns.  This method modifies\nthe object, and the stripped information is lost.  After performing a\nstrip operation, the object is considered to have its entries in a\n“random” order, as it was just after object initialization and loading.\nIf\nstrip_dirs()\ncauses two function names to be\nindistinguishable (they are on the same line of the same filename, and\nhave the same function name), then the statistics for these two entries\nare accumulated into a single entry.\nadd\n(\n*\nfilenames\n)\n¶\nThis method of the\nStats\nclass accumulates additional profiling\ninformation into the current profiling object.  Its arguments should refer\nto filenames created by the corresponding version of\nprofile.run()\nor\ncProfile.run()\n. Statistics for identically named (re: file, line,\nname) functions are automatically accumulated into single function\nstatistics.\ndump_stats\n(\nfilename\n)\n¶\nSave the data loaded into the\nStats\nobject to a file named\nfilename\n.  The file is created if it does not exist, and is overwritten\nif it already exists.  This is equivalent to the method of the same name\non the\nprofile.Profile\nand\ncProfile.Profile\nclasses.\nsort_stats\n(\n*\nkeys\n)\n¶\nThis method modifies the\nStats\nobject by sorting it according to\nthe supplied criteria.  The argument can be either a string or a SortKey\nenum identifying the basis of a sort (example:\n'time'\n,\n'name'\n,\nSortKey.TIME\nor\nSortKey.NAME\n). The SortKey enums argument have\nadvantage over the string argument in that it is more robust and less\nerror prone.\nWhen more than one key is provided, then additional keys are used as\nsecondary criteria when there is equality in all keys selected before\nthem.  For example,\nsort_stats(SortKey.NAME,\nSortKey.FILE)\nwill sort\nall the entries according to their function name, and resolve all ties\n(identical function names) by sorting by file name.\nFor the string argument, abbreviations can be used for any key names, as\nlong as the abbreviation is unambiguous.\nThe following are the valid string and SortKey:\nValid String Arg\nValid enum Arg\nMeaning\n'calls'\nSortKey.CALLS\ncall count\n'cumulative'\nSortKey.CUMULATIVE\ncumulative time\n'cumtime'\nN/A\ncumulative time\n'file'\nN/A\nfile name\n'filename'\nSortKey.FILENAME\nfile name\n'module'\nN/A\nfile name\n'ncalls'\nN/A\ncall count\n'pcalls'\nSortKey.PCALLS\nprimitive call count\n'line'\nSortKey.LINE\nline number\n'name'\nSortKey.NAME\nfunction name\n'nfl'\nSortKey.NFL\nname/file/line\n'stdname'\nSortKey.STDNAME\nstandard name\n'time'\nSortKey.TIME\ninternal time\n'tottime'\nN/A\ninternal time\nNote that all sorts on statistics are in descending order (placing most\ntime consuming items first), where as name, file, and line number searches\nare in ascending order (alphabetical). The subtle distinction between\nSortKey.NFL\nand\nSortKey.STDNAME\nis that the standard name is a\nsort of the name as printed, which means that the embedded line numbers\nget compared in an odd way.  For example, lines 3, 20, and 40 would (if\nthe file names were the same) appear in the string order 20, 3 and 40.\nIn contrast,\nSortKey.NFL\ndoes a numeric compare of the line numbers.\nIn fact,\nsort_stats(SortKey.NFL)\nis the same as\nsort_stats(SortKey.NAME,\nSortKey.FILENAME,\nSortKey.LINE)\n.\nFor backward-compatibility reasons, the numeric arguments\n-1\n,\n0\n,\n1\n, and\n2\nare permitted.  They are interpreted as\n'stdname'\n,\n'calls'\n,\n'time'\n, and\n'cumulative'\nrespectively.  If this old\nstyle format (numeric) is used, only one sort key (the numeric key) will\nbe used, and additional arguments will be silently ignored.\nAdded in version 3.7:\nAdded the SortKey enum.\nreverse_order\n(\n)\n¶\nThis method for the\nStats\nclass reverses the ordering of the\nbasic list within the object.  Note that by default ascending vs\ndescending order is properly selected based on the sort key of choice.\nprint_stats\n(\n*\nrestrictions\n)\n¶\nThis method for the\nStats\nclass prints out a report as described\nin the\nprofile.run()\ndefinition.\nThe order of the printing is based on the last\nsort_stats()\noperation done on the object (subject to\ncaveats in\nadd()\nand\nstrip_dirs()\n).\nThe arguments provided (if any) can be used to limit the list down to the\nsignificant entries.  Initially, the list is taken to be the complete set\nof profiled functions.  Each restriction is either an integer (to select a\ncount of lines), or a decimal fraction between 0.0 and 1.0 inclusive (to\nselect a percentage of lines), or a string that will interpreted as a\nregular expression (to pattern match the standard name that is printed).\nIf several restrictions are provided, then they are applied sequentially.\nFor example:\nprint_stats\n(\n.1\n,\n'foo:'\n)\nwould first limit the printing to first 10% of list, and then only print\nfunctions that were part of filename\n.*foo:\n.  In contrast, the\ncommand:\nprint_stats\n(\n'foo:'\n,\n.1\n)\nwould limit the list to all functions having file names\n.*foo:\n,\nand then proceed to only print the first 10% of them.\nprint_callers\n(\n*\nrestrictions\n)\n¶\nThis method for the\nStats\nclass prints a list of all functions\nthat called each function in the profiled database.  The ordering is\nidentical to that provided by\nprint_stats()\n, and the\ndefinition of the restricting argument is also identical.  Each caller is\nreported on its own line.  The format differs slightly depending on the\nprofiler that produced the stats:\nWith\nprofile\n, a number is shown in parentheses after each caller\nto show how many times this specific call was made.  For convenience, a\nsecond non-parenthesized number repeats the cumulative time spent in the\nfunction at the right.\nWith\ncProfile\n, each caller is preceded by three numbers: the\nnumber of times this specific call was made, and the total and\ncumulative times spent in the current function while it was invoked by\nthis specific caller.\nprint_callees\n(\n*\nrestrictions\n)\n¶\nThis method for the\nStats\nclass prints a list of all function\nthat were called by the indicated function.  Aside from this reversal of\ndirection of calls (re: called vs was called by), the arguments and\nordering are identical to the\nprint_callers()\nmethod.\nget_stats_profile\n(\n)\n¶\nThis method returns an instance of StatsProfile, which contains a mapping\nof function names to instances of FunctionProfile. Each FunctionProfile\ninstance holds information related to the function’s profile such as how\nlong the function took to run, how many times it was called, etc…\nAdded in version 3.9:\nAdded the following dataclasses: StatsProfile, FunctionProfile.\nAdded the following function: get_stats_profile.\nWhat Is Deterministic Profiling?\n¶\nDeterministic profiling\nis meant to reflect the fact that all\nfunction\ncall\n,\nfunction return\n, and\nexception\nevents are monitored, and precise\ntimings are made for the intervals between these events (during which time the\nuser’s code is executing).  In contrast,\nstatistical profiling\n(which is\nnot done by this module) randomly samples the effective instruction pointer, and\ndeduces where time is being spent.  The latter technique traditionally involves\nless overhead (as the code does not need to be instrumented), but provides only\nrelative indications of where time is being spent.\nIn Python, since there is an interpreter active during execution, the presence\nof instrumented code is not required in order to do deterministic profiling.\nPython automatically provides a\nhook\n(optional callback) for each event.\nIn addition, the interpreted nature of Python tends to add so much overhead to\nexecution, that deterministic profiling tends to only add small processing\noverhead in typical applications.  The result is that deterministic profiling is\nnot that expensive, yet provides extensive run time statistics about the\nexecution of a Python program.\nCall count statistics can be used to identify bugs in code (surprising counts),\nand to identify possible inline-expansion points (high call counts).  Internal\ntime statistics can be used to identify “hot loops” that should be carefully\noptimized.  Cumulative time statistics should be used to identify high level\nerrors in the selection of algorithms.  Note that the unusual handling of\ncumulative times in this profiler allows statistics for recursive\nimplementations of algorithms to be directly compared to iterative\nimplementations.\nLimitations\n¶\nOne limitation has to do with accuracy of timing information. There is a\nfundamental problem with deterministic profilers involving accuracy.  The most\nobvious restriction is that the underlying “clock” is only ticking at a rate\n(typically) of about .001 seconds.  Hence no measurements will be more accurate\nthan the underlying clock.  If enough measurements are taken, then the “error”\nwill tend to average out. Unfortunately, removing this first error induces a\nsecond source of error.\nThe second problem is that it “takes a while” from when an event is dispatched\nuntil the profiler’s call to get the time actually\ngets\nthe state of the\nclock.  Similarly, there is a certain lag when exiting the profiler event\nhandler from the time that the clock’s value was obtained (and then squirreled\naway), until the user’s code is once again executing.  As a result, functions\nthat are called many times, or call many functions, will typically accumulate\nthis error. The error that accumulates in this fashion is typically less than\nthe accuracy of the clock (less than one clock tick), but it\ncan\naccumulate\nand become very significant.\nThe problem is more important with\nprofile\nthan with the lower-overhead\ncProfile\n.  For this reason,\nprofile\nprovides a means of\ncalibrating itself for a given platform so that this error can be\nprobabilistically (on the average) removed. After the profiler is calibrated, it\nwill be more accurate (in a least square sense), but it will sometimes produce\nnegative numbers (when call counts are exceptionally low, and the gods of\nprobability work against you :-). )  Do\nnot\nbe alarmed by negative numbers in\nthe profile.  They should\nonly\nappear if you have calibrated your profiler,\nand the results are actually better than without calibration.\nCalibration\n¶\nThe profiler of the\nprofile\nmodule subtracts a constant from each event\nhandling time to compensate for the overhead of calling the time function, and\nsocking away the results.  By default, the constant is 0. The following\nprocedure can be used to obtain a better constant for a given platform (see\nLimitations\n).\nimport\nprofile\npr\n=\nprofile\n.\nProfile\n()\nfor\ni\nin\nrange\n(\n5\n):\nprint\n(\npr\n.\ncalibrate\n(\n10000\n))\nThe method executes the number of Python calls given by the argument, directly\nand again under the profiler, measuring the time for both. It then computes the\nhidden overhead per profiler event, and returns that as a float.  For example,\non a 1.8Ghz Intel Core i5 running macOS, and using Python’s time.process_time() as\nthe timer, the magical number is about 4.04e-6.\nThe object of this exercise is to get a fairly consistent result. If your\ncomputer is\nvery\nfast, or your timer function has poor resolution, you might\nhave to pass 100000, or even 1000000, to get consistent results.\nWhen you have a consistent answer, there are three ways you can use it:\nimport\nprofile\n# 1. Apply computed bias to all Profile instances created hereafter.\nprofile\n.\nProfile\n.\nbias\n=\nyour_computed_bias\n# 2. Apply computed bias to a specific Profile instance.\npr\n=\nprofile\n.\nProfile\n()\npr\n.\nbias\n=\nyour_computed_bias\n# 3. Specify computed bias in instance constructor.\npr\n=\nprofile\n.\nProfile\n(\nbias\n=\nyour_computed_bias\n)\nIf you have a choice, you are better off choosing a smaller constant, and then\nyour results will “less often” show up as negative in profile statistics.\nUsing a custom timer\n¶\nIf you want to change how current time is determined (for example, to force use\nof wall-clock time or elapsed process time), pass the timing function you want\nto the\nProfile\nclass constructor:\npr\n=\nprofile\n.\nProfile\n(\nyour_time_func\n)\nThe resulting profiler will then call\nyour_time_func\n. Depending on whether\nyou are using\nprofile.Profile\nor\ncProfile.Profile\n,\nyour_time_func\n’s return value will be interpreted differently:\nprofile.Profile\nyour_time_func\nshould return a single number, or a list of numbers whose\nsum is the current time (like what\nos.times()\nreturns).  If the\nfunction returns a single time number, or the list of returned numbers has\nlength 2, then you will get an especially fast version of the dispatch\nroutine.\nBe warned that you should calibrate the profiler class for the timer function\nthat you choose (see\nCalibration\n).  For most machines, a timer\nthat returns a lone integer value will provide the best results in terms of\nlow overhead during profiling.  (\nos.times()\nis\npretty\nbad, as it\nreturns a tuple of floating-point values).  If you want to substitute a\nbetter timer in the cleanest fashion, derive a class and hardwire a\nreplacement dispatch method that best handles your timer call, along with the\nappropriate calibration constant.\ncProfile.Profile\nyour_time_func\nshould return a single number.  If it returns integers,\nyou can also invoke the class constructor with a second argument specifying\nthe real duration of one unit of time.  For example, if\nyour_integer_time_func\nreturns times measured in thousands of seconds,\nyou would construct the\nProfile\ninstance as follows:\npr\n=\ncProfile\n.\nProfile\n(\nyour_integer_time_func\n,\n0.001\n)\nAs the\ncProfile.Profile\nclass cannot be calibrated, custom timer\nfunctions should be used with care and should be as fast as possible.  For\nthe best results with a custom timer, it might be necessary to hard-code it\nin the C source of the internal\n_lsprof\nmodule.\nPython 3.3 adds several new functions in\ntime\nthat can be used to make\nprecise measurements of process or wall-clock time. For example, see\ntime.perf_counter()\n.\nTable of Contents\nThe Python Profilers\nIntroduction to the profilers\nInstant User’s Manual\nprofile\nand\ncProfile\nModule Reference\nThe\nStats\nClass\nWhat Is Deterministic Profiling?\nLimitations\nCalibration\nUsing a custom timer\nPrevious topic\npdb\n— The Python Debugger\nNext topic\ntimeit\n— Measure execution time of small code snippets\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nDebugging and Profiling\n»\nThe Python Profilers\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/profile.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12350.4856662
  },
  {
    "title": "Index – Q",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – Q\nqiflush() (in module curses)\nQName (class in xml.etree.ElementTree)\nqsize() (asyncio.Queue method)\n(multiprocessing.Queue method)\n(queue.Queue method)\n(queue.SimpleQueue method)\nqualified name\nquantiles() (in module statistics)\n(statistics.NormalDist method)\nquantize() (decimal.Context method)\n(decimal.Decimal method)\nQueryInfoKey() (in module winreg)\nQueryReflectionKey() (in module winreg)\nQueryValue() (in module winreg)\nQueryValueEx() (in module winreg)\nQUESTION (in module tkinter.messagebox)\nqueue\nmodule\nQueue (class in asyncio)\n(class in multiprocessing)\n(class in queue)\nqueue (sched.scheduler attribute)\nQueue() (multiprocessing.managers.SyncManager method)\nQueueEmpty\nQueueFull\nQueueHandler (class in logging.handlers)\nQueueListener (class in logging.handlers)\nQueueShutDown\nquick_ratio() (difflib.SequenceMatcher method)\nquiet (sys.flags attribute)\nquit (built-in variable)\n(pdb command)\nquit() (ftplib.FTP method)\n(poplib.POP3 method)\n(smtplib.SMTP method)\n(tkinter.filedialog.FileDialog method)\nquitting (bdb.Bdb attribute)\nquopri\nmodule\nquote() (in module email.utils)\n(in module shlex)\n(in module urllib.parse)\nQUOTE_ALL (in module csv)\nquote_from_bytes() (in module urllib.parse)\nQUOTE_MINIMAL (in module csv)\nQUOTE_NONE (in module csv)\nQUOTE_NONNUMERIC (in module csv)\nQUOTE_NOTNULL (in module csv)\nquote_plus() (in module urllib.parse)\nQUOTE_STRINGS (in module csv)\nquoteattr() (in module xml.sax.saxutils)\nquotechar (csv.Dialect attribute)\nquoted-printable\nencoding\nquotes (shlex.shlex attribute)\nquoting (csv.Dialect attribute)\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/genindex-Q.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12350.7354312
  },
  {
    "title": "Debugging and Profiling¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nDebugging and Profiling\n|\nTheme\nAuto\nLight\nDark\n|\nDebugging and Profiling\n¶\nThese libraries help you with Python development: the debugger enables you to\nstep through code, analyze stack frames and set breakpoints etc., and the\nprofilers run code and give you a detailed breakdown of execution times,\nallowing you to identify bottlenecks in your programs. Auditing events\nprovide visibility into runtime behaviors that would otherwise require\nintrusive debugging or patching.\nAudit events table\nbdb\n— Debugger framework\nfaulthandler\n— Dump the Python traceback\nDumping the traceback\nFault handler state\nDumping the tracebacks after a timeout\nDumping the traceback on a user signal\nIssue with file descriptors\nExample\npdb\n— The Python Debugger\nDebugger Commands\nThe Python Profilers\nIntroduction to the profilers\nInstant User’s Manual\nprofile\nand\ncProfile\nModule Reference\nThe\nStats\nClass\nWhat Is Deterministic Profiling?\nLimitations\nCalibration\nUsing a custom timer\ntimeit\n— Measure execution time of small code snippets\nBasic Examples\nPython Interface\nCommand-Line Interface\nExamples\ntrace\n— Trace or track Python statement execution\nCommand-Line Usage\nMain options\nModifiers\nFilters\nProgrammatic Interface\ntracemalloc\n— Trace memory allocations\nExamples\nDisplay the top 10\nCompute differences\nGet the traceback of a memory block\nPretty top\nRecord the current and peak size of all traced memory blocks\nAPI\nFunctions\nDomainFilter\nFilter\nFrame\nSnapshot\nStatistic\nStatisticDiff\nTrace\nTraceback\nPrevious topic\ntest\n— Regression tests package for Python\nNext topic\nAudit events table\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nDebugging and Profiling\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/debug.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12351.0457058
  },
  {
    "title": "Installing Python Modules¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nInstalling Python Modules\n|\nTheme\nAuto\nLight\nDark\n|\nInstalling Python Modules\n¶\nEmail\n:\ndistutils-sig\n@\npython\n.\norg\nAs a popular open source development project, Python has an active\nsupporting community of contributors and users that also make their software\navailable for other Python developers to use under open source license terms.\nThis allows Python users to share and collaborate effectively, benefiting\nfrom the solutions others have already created to common (and sometimes\neven rare!) problems, as well as potentially contributing their own\nsolutions to the common pool.\nThis guide covers the installation part of the process. For a guide to\ncreating and sharing your own Python projects, refer to the\nPython packaging user guide\n.\nNote\nFor corporate and other institutional users, be aware that many\norganisations have their own policies around using and contributing to\nopen source software. Please take such policies into account when making\nuse of the distribution and installation tools provided with Python.\nKey terms\n¶\npip\nis the preferred installer program. Starting with Python 3.4, it\nis included by default with the Python binary installers.\nA\nvirtual environment\nis a semi-isolated Python environment that allows\npackages to be installed for use by a particular application, rather than\nbeing installed system wide.\nvenv\nis the standard tool for creating virtual environments, and has\nbeen part of Python since Python 3.3. Starting with Python 3.4, it\ndefaults to installing\npip\ninto all created virtual environments.\nvirtualenv\nis a third party alternative (and predecessor) to\nvenv\n. It allows virtual environments to be used on versions of\nPython prior to 3.4, which either don’t provide\nvenv\nat all, or\naren’t able to automatically install\npip\ninto created environments.\nThe\nPython Package Index\nis a public\nrepository of open source licensed packages made available for use by\nother Python users.\nthe\nPython Packaging Authority\nis the group of\ndevelopers and documentation authors responsible for the maintenance and\nevolution of the standard packaging tools and the associated metadata and\nfile format standards. They maintain a variety of tools, documentation,\nand issue trackers on\nGitHub\n.\ndistutils\nis the original build and distribution system first added to\nthe Python standard library in 1998. While direct use of\ndistutils\nis\nbeing phased out, it still laid the foundation for the current packaging\nand distribution infrastructure, and it not only remains part of the\nstandard library, but its name lives on in other ways (such as the name\nof the mailing list used to coordinate Python packaging standards\ndevelopment).\nChanged in version 3.5:\nThe use of\nvenv\nis now recommended for creating virtual environments.\nSee also\nPython Packaging User Guide: Creating and using virtual environments\nBasic usage\n¶\nThe standard packaging tools are all designed to be used from the command\nline.\nThe following command will install the latest version of a module and its\ndependencies from the Python Package Index:\npython -m pip install SomePackage\nNote\nFor POSIX users (including macOS and Linux users), the examples in\nthis guide assume the use of a\nvirtual environment\n.\nFor Windows users, the examples in this guide assume that the option to\nadjust the system PATH environment variable was selected when installing\nPython.\nIt’s also possible to specify an exact or minimum version directly on the\ncommand line. When using comparator operators such as\n>\n,\n<\nor some other\nspecial character which get interpreted by shell, the package name and the\nversion should be enclosed within double quotes:\npython -m pip install SomePackage==1.0.4    # specific version\npython -m pip install \"SomePackage>=1.0.4\"  # minimum version\nNormally, if a suitable module is already installed, attempting to install\nit again will have no effect. Upgrading existing modules must be requested\nexplicitly:\npython -m pip install --upgrade SomePackage\nMore information and resources regarding\npip\nand its capabilities can be\nfound in the\nPython Packaging User Guide\n.\nCreation of virtual environments is done through the\nvenv\nmodule.\nInstalling packages into an active virtual environment uses the commands shown\nabove.\nSee also\nPython Packaging User Guide: Installing Python Distribution Packages\nHow do I …?\n¶\nThese are quick answers or links for some common tasks.\n… install\npip\nin versions of Python prior to Python 3.4?\n¶\nPython only started bundling\npip\nwith Python 3.4. For earlier versions,\npip\nneeds to be “bootstrapped” as described in the Python Packaging\nUser Guide.\nSee also\nPython Packaging User Guide: Requirements for Installing Packages\n… install packages just for the current user?\n¶\nPassing the\n--user\noption to\npython\n-m\npip\ninstall\nwill install a\npackage just for the current user, rather than for all users of the system.\n… install scientific Python packages?\n¶\nA number of scientific Python packages have complex binary dependencies, and\naren’t currently easy to install using\npip\ndirectly. At this point in\ntime, it will often be easier for users to install these packages by\nother means\nrather than attempting to install them with\npip\n.\nSee also\nPython Packaging User Guide: Installing Scientific Packages\n… work with multiple versions of Python installed in parallel?\n¶\nOn Linux, macOS, and other POSIX systems, use the versioned Python commands\nin combination with the\n-m\nswitch to run the appropriate copy of\npip\n:\npython2   -m pip install SomePackage  # default Python 2\npython2.7 -m pip install SomePackage  # specifically Python 2.7\npython3   -m pip install SomePackage  # default Python 3\npython3.4 -m pip install SomePackage  # specifically Python 3.4\nAppropriately versioned\npip\ncommands may also be available.\nOn Windows, use the\npy\nPython launcher in combination with the\n-m\nswitch:\npy -2   -m pip install SomePackage  # default Python 2\npy -2.7 -m pip install SomePackage  # specifically Python 2.7\npy -3   -m pip install SomePackage  # default Python 3\npy -3.4 -m pip install SomePackage  # specifically Python 3.4\nCommon installation issues\n¶\nInstalling into the system Python on Linux\n¶\nOn Linux systems, a Python installation will typically be included as part\nof the distribution. Installing into this Python installation requires\nroot access to the system, and may interfere with the operation of the\nsystem package manager and other components of the system if a component\nis unexpectedly upgraded using\npip\n.\nOn such systems, it is often better to use a virtual environment or a\nper-user installation when installing packages with\npip\n.\nPip not installed\n¶\nIt is possible that\npip\ndoes not get installed by default. One potential fix is:\npython -m ensurepip --default-pip\nThere are also additional resources for\ninstalling pip.\nInstalling binary extensions\n¶\nPython has typically relied heavily on source based distribution, with end\nusers being expected to compile extension modules from source as part of\nthe installation process.\nWith the introduction of support for the binary\nwheel\nformat, and the\nability to publish wheels for at least Windows and macOS through the\nPython Package Index, this problem is expected to diminish over time,\nas users are more regularly able to install pre-built extensions rather\nthan needing to build them themselves.\nSome of the solutions for installing\nscientific software\nthat are not yet available as pre-built\nwheel\nfiles may also help with\nobtaining other binary extensions without needing to build them locally.\nSee also\nPython Packaging User Guide: Binary Extensions\nTable of Contents\nInstalling Python Modules\nKey terms\nBasic usage\nHow do I …?\n… install\npip\nin versions of Python prior to Python 3.4?\n… install packages just for the current user?\n… install scientific Python packages?\n… work with multiple versions of Python installed in parallel?\nCommon installation issues\nInstalling into the system Python on Linux\nPip not installed\nInstalling binary extensions\nPrevious topic\nMonitoring C API\nNext topic\nPython HOWTOs\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nInstalling Python Modules\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/installing/index.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12351.1167769
  },
  {
    "title": "Python 3.13.5 documentation",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\n|\nTheme\nAuto\nLight\nDark\n|\nPython 3.13.5 documentation\nWelcome! This is the official documentation for Python 3.13.5.\nDocumentation sections:\nWhat's new in Python 3.13?\nOr\nall \"What's new\" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\nDeprecations\nDeprecated functionality\nIndices, glossary, and search:\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\nProject information:\nReporting issues\nContributing to docs\nDownload the documentation\nHistory and license of Python\nCopyright\nAbout the documentation\nDownload\nDownload these documents\nDocs by version\nPython 3.15 (in development)\nPython 3.14 (pre-release)\nPython 3.13 (stable)\nPython 3.12 (security-fixes)\nPython 3.11 (security-fixes)\nPython 3.10 (security-fixes)\nPython 3.9 (security-fixes)\nPython 3.8 (EOL)\nPython 3.7 (EOL)\nPython 3.6 (EOL)\nPython 3.5 (EOL)\nPython 3.4 (EOL)\nPython 3.3 (EOL)\nPython 3.2 (EOL)\nPython 3.1 (EOL)\nPython 3.0 (EOL)\nPython 2.7 (EOL)\nPython 2.6 (EOL)\nAll versions\nOther resources\nPEP Index\nBeginner's Guide\nBook List\nAudio/Visual Talks\nPython Developer’s Guide\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/index.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12351.1698776
  },
  {
    "title": "Index – K",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – K\nkbhit() (in module msvcrt)\nkde() (in module statistics)\nkde_random() (in module statistics)\nKEEP (enum.FlagBoundary attribute)\nkevent() (in module select)\nkey\n(http.cookies.Morsel attribute)\n(zoneinfo.ZoneInfo attribute)\nkey function\nkey/value pair\nKEY_A1 (in module curses)\nKEY_A3 (in module curses)\nKEY_ALL_ACCESS (in module winreg)\nKEY_B2 (in module curses)\nKEY_BACKSPACE (in module curses)\nKEY_BEG (in module curses)\nKEY_BREAK (in module curses)\nKEY_BTAB (in module curses)\nKEY_C1 (in module curses)\nKEY_C3 (in module curses)\nKEY_CANCEL (in module curses)\nKEY_CATAB (in module curses)\nKEY_CLEAR (in module curses)\nKEY_CLOSE (in module curses)\nKEY_COMMAND (in module curses)\nKEY_COPY (in module curses)\nKEY_CREATE (in module curses)\nKEY_CREATE_LINK (in module winreg)\nKEY_CREATE_SUB_KEY (in module winreg)\nKEY_CTAB (in module curses)\nKEY_DC (in module curses)\nKEY_DL (in module curses)\nKEY_DOWN (in module curses)\nKEY_EIC (in module curses)\nKEY_END (in module curses)\nKEY_ENTER (in module curses)\nKEY_ENUMERATE_SUB_KEYS (in module winreg)\nKEY_EOL (in module curses)\nKEY_EOS (in module curses)\nKEY_EXECUTE (in module winreg)\nKEY_EXIT (in module curses)\nKEY_F0 (in module curses)\nKEY_FIND (in module curses)\nKEY_Fn (in module curses)\nKEY_HELP (in module curses)\nKEY_HOME (in module curses)\nKEY_IC (in module curses)\nKEY_IL (in module curses)\nKEY_LEFT (in module curses)\nKEY_LL (in module curses)\nKEY_MARK (in module curses)\nKEY_MAX (in module curses)\nKEY_MESSAGE (in module curses)\nKEY_MIN (in module curses)\nKEY_MOUSE (in module curses)\nKEY_MOVE (in module curses)\nKEY_NEXT (in module curses)\nKEY_NOTIFY (in module winreg)\nKEY_NPAGE (in module curses)\nKEY_OPEN (in module curses)\nKEY_OPTIONS (in module curses)\nKEY_PPAGE (in module curses)\nKEY_PREVIOUS (in module curses)\nKEY_PRINT (in module curses)\nKEY_QUERY_VALUE (in module winreg)\nKEY_READ (in module winreg)\nKEY_REDO (in module curses)\nKEY_REFERENCE (in module curses)\nKEY_REFRESH (in module curses)\nKEY_REPLACE (in module curses)\nKEY_RESET (in module curses)\nKEY_RESIZE (in module curses)\nKEY_RESTART (in module curses)\nKEY_RESUME (in module curses)\nKEY_RIGHT (in module curses)\nKEY_SAVE (in module curses)\nKEY_SBEG (in module curses)\nKEY_SCANCEL (in module curses)\nKEY_SCOMMAND (in module curses)\nKEY_SCOPY (in module curses)\nKEY_SCREATE (in module curses)\nKEY_SDC (in module curses)\nKEY_SDL (in module curses)\nKEY_SELECT (in module curses)\nKEY_SEND (in module curses)\nKEY_SEOL (in module curses)\nKEY_SET_VALUE (in module winreg)\nKEY_SEXIT (in module curses)\nKEY_SF (in module curses)\nKEY_SFIND (in module curses)\nKEY_SHELP (in module curses)\nKEY_SHOME (in module curses)\nKEY_SIC (in module curses)\nKEY_SLEFT (in module curses)\nKEY_SMESSAGE (in module curses)\nKEY_SMOVE (in module curses)\nKEY_SNEXT (in module curses)\nKEY_SOPTIONS (in module curses)\nKEY_SPREVIOUS (in module curses)\nKEY_SPRINT (in module curses)\nKEY_SR (in module curses)\nKEY_SREDO (in module curses)\nKEY_SREPLACE (in module curses)\nKEY_SRESET (in module curses)\nKEY_SRIGHT (in module curses)\nKEY_SRSUME (in module curses)\nKEY_SSAVE (in module curses)\nKEY_SSUSPEND (in module curses)\nKEY_STAB (in module curses)\nKEY_SUNDO (in module curses)\nKEY_SUSPEND (in module curses)\nKEY_UNDO (in module curses)\nKEY_UP (in module curses)\nKEY_WOW64_32KEY (in module winreg)\nKEY_WOW64_64KEY (in module winreg)\nKEY_WRITE (in module winreg)\nKeyboardInterrupt\n(built-in exception)\n,\n[1]\n,\n[2]\nKeyError\nkeylog_filename (ssl.SSLContext attribute)\nkeyname() (in module curses)\nkeypad() (curses.window method)\nkeyrefs() (weakref.WeakKeyDictionary method)\nkeys() (contextvars.Context method)\n(dict method)\n(email.message.EmailMessage method)\n(email.message.Message method)\n(mailbox.Mailbox method)\n(sqlite3.Row method)\n(types.MappingProxyType method)\n(xml.etree.ElementTree.Element method)\nKeysView (class in collections.abc)\n(class in typing)\nkeyword\n,\n[1]\nas\n,\n[1]\n,\n[2]\n,\n[3]\nasync\nawait\n,\n[1]\ncase\nelif\nelse\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\n,\n[5]\nexcept\nexcept_star\nfinally\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\nfrom\n,\n[1]\nif\nin\nmodule\nyield\nkeyword (class in ast)\nkeyword argument\nkeywords (functools.partial attribute)\nkill() (asyncio.subprocess.Process method)\n(asyncio.SubprocessTransport method)\n(in module os)\n(multiprocessing.Process method)\n(subprocess.Popen method)\nkill_python() (in module test.support.script_helper)\nkillchar() (in module curses)\nkillpg() (in module os)\nkind (inspect.Parameter attribute)\nknownfiles (in module mimetypes)\nkqueue() (in module select)\nKqueueSelector (class in selectors)\nKW_ONLY (in module dataclasses)\nkwargs (inspect.BoundArguments attribute)\n(typing.ParamSpec attribute)\nkwlist (in module keyword)\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/genindex-K.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12351.2328641
  },
  {
    "title": "operator — Standard operators as functions¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nFunctional Programming Modules\n»\noperator\n— Standard operators as functions\n|\nTheme\nAuto\nLight\nDark\n|\noperator\n— Standard operators as functions\n¶\nSource code:\nLib/operator.py\nThe\noperator\nmodule exports a set of efficient functions corresponding to\nthe intrinsic operators of Python.  For example,\noperator.add(x,\ny)\nis\nequivalent to the expression\nx+y\n. Many function names are those used for\nspecial methods, without the double underscores.  For backward compatibility,\nmany of these have a variant with the double underscores kept. The variants\nwithout the double underscores are preferred for clarity.\nThe functions fall into categories that perform object comparisons, logical\noperations, mathematical operations and sequence operations.\nThe object comparison functions are useful for all objects, and are named after\nthe rich comparison operators they support:\noperator.\nlt\n(\na\n,\nb\n)\n¶\noperator.\nle\n(\na\n,\nb\n)\n¶\noperator.\neq\n(\na\n,\nb\n)\n¶\noperator.\nne\n(\na\n,\nb\n)\n¶\noperator.\nge\n(\na\n,\nb\n)\n¶\noperator.\ngt\n(\na\n,\nb\n)\n¶\noperator.\n__lt__\n(\na\n,\nb\n)\n¶\noperator.\n__le__\n(\na\n,\nb\n)\n¶\noperator.\n__eq__\n(\na\n,\nb\n)\n¶\noperator.\n__ne__\n(\na\n,\nb\n)\n¶\noperator.\n__ge__\n(\na\n,\nb\n)\n¶\noperator.\n__gt__\n(\na\n,\nb\n)\n¶\nPerform “rich comparisons” between\na\nand\nb\n. Specifically,\nlt(a,\nb)\nis\nequivalent to\na\n<\nb\n,\nle(a,\nb)\nis equivalent to\na\n<=\nb\n,\neq(a,\nb)\nis equivalent to\na\n==\nb\n,\nne(a,\nb)\nis equivalent to\na\n!=\nb\n,\ngt(a,\nb)\nis equivalent to\na\n>\nb\nand\nge(a,\nb)\nis equivalent to\na\n>=\nb\n.  Note that these functions can return any value, which may\nor may not be interpretable as a Boolean value.  See\nComparisons\nfor more information about rich comparisons.\nThe logical operations are also generally applicable to all objects, and support\ntruth tests, identity tests, and boolean operations:\noperator.\nnot_\n(\nobj\n)\n¶\noperator.\n__not__\n(\nobj\n)\n¶\nReturn the outcome of\nnot\nobj\n.  (Note that there is no\n__not__()\nmethod for object instances; only the interpreter core defines\nthis operation.  The result is affected by the\n__bool__()\nand\n__len__()\nmethods.)\noperator.\ntruth\n(\nobj\n)\n¶\nReturn\nTrue\nif\nobj\nis true, and\nFalse\notherwise.  This is\nequivalent to using the\nbool\nconstructor.\noperator.\nis_\n(\na\n,\nb\n)\n¶\nReturn\na\nis\nb\n.  Tests object identity.\noperator.\nis_not\n(\na\n,\nb\n)\n¶\nReturn\na\nis\nnot\nb\n.  Tests object identity.\nThe mathematical and bitwise operations are the most numerous:\noperator.\nabs\n(\nobj\n)\n¶\noperator.\n__abs__\n(\nobj\n)\n¶\nReturn the absolute value of\nobj\n.\noperator.\nadd\n(\na\n,\nb\n)\n¶\noperator.\n__add__\n(\na\n,\nb\n)\n¶\nReturn\na\n+\nb\n, for\na\nand\nb\nnumbers.\noperator.\nand_\n(\na\n,\nb\n)\n¶\noperator.\n__and__\n(\na\n,\nb\n)\n¶\nReturn the bitwise and of\na\nand\nb\n.\noperator.\nfloordiv\n(\na\n,\nb\n)\n¶\noperator.\n__floordiv__\n(\na\n,\nb\n)\n¶\nReturn\na\n//\nb\n.\noperator.\nindex\n(\na\n)\n¶\noperator.\n__index__\n(\na\n)\n¶\nReturn\na\nconverted to an integer.  Equivalent to\na.__index__()\n.\nChanged in version 3.10:\nThe result always has exact type\nint\n.  Previously, the result\ncould have been an instance of a subclass of\nint\n.\noperator.\ninv\n(\nobj\n)\n¶\noperator.\ninvert\n(\nobj\n)\n¶\noperator.\n__inv__\n(\nobj\n)\n¶\noperator.\n__invert__\n(\nobj\n)\n¶\nReturn the bitwise inverse of the number\nobj\n.  This is equivalent to\n~obj\n.\noperator.\nlshift\n(\na\n,\nb\n)\n¶\noperator.\n__lshift__\n(\na\n,\nb\n)\n¶\nReturn\na\nshifted left by\nb\n.\noperator.\nmod\n(\na\n,\nb\n)\n¶\noperator.\n__mod__\n(\na\n,\nb\n)\n¶\nReturn\na\n%\nb\n.\noperator.\nmul\n(\na\n,\nb\n)\n¶\noperator.\n__mul__\n(\na\n,\nb\n)\n¶\nReturn\na\n*\nb\n, for\na\nand\nb\nnumbers.\noperator.\nmatmul\n(\na\n,\nb\n)\n¶\noperator.\n__matmul__\n(\na\n,\nb\n)\n¶\nReturn\na\n@\nb\n.\nAdded in version 3.5.\noperator.\nneg\n(\nobj\n)\n¶\noperator.\n__neg__\n(\nobj\n)\n¶\nReturn\nobj\nnegated (\n-obj\n).\noperator.\nor_\n(\na\n,\nb\n)\n¶\noperator.\n__or__\n(\na\n,\nb\n)\n¶\nReturn the bitwise or of\na\nand\nb\n.\noperator.\npos\n(\nobj\n)\n¶\noperator.\n__pos__\n(\nobj\n)\n¶\nReturn\nobj\npositive (\n+obj\n).\noperator.\npow\n(\na\n,\nb\n)\n¶\noperator.\n__pow__\n(\na\n,\nb\n)\n¶\nReturn\na\n**\nb\n, for\na\nand\nb\nnumbers.\noperator.\nrshift\n(\na\n,\nb\n)\n¶\noperator.\n__rshift__\n(\na\n,\nb\n)\n¶\nReturn\na\nshifted right by\nb\n.\noperator.\nsub\n(\na\n,\nb\n)\n¶\noperator.\n__sub__\n(\na\n,\nb\n)\n¶\nReturn\na\n-\nb\n.\noperator.\ntruediv\n(\na\n,\nb\n)\n¶\noperator.\n__truediv__\n(\na\n,\nb\n)\n¶\nReturn\na\n/\nb\nwhere 2/3 is .66 rather than 0.  This is also known as\n“true” division.\noperator.\nxor\n(\na\n,\nb\n)\n¶\noperator.\n__xor__\n(\na\n,\nb\n)\n¶\nReturn the bitwise exclusive or of\na\nand\nb\n.\nOperations which work with sequences (some of them with mappings too) include:\noperator.\nconcat\n(\na\n,\nb\n)\n¶\noperator.\n__concat__\n(\na\n,\nb\n)\n¶\nReturn\na\n+\nb\nfor\na\nand\nb\nsequences.\noperator.\ncontains\n(\na\n,\nb\n)\n¶\noperator.\n__contains__\n(\na\n,\nb\n)\n¶\nReturn the outcome of the test\nb\nin\na\n. Note the reversed operands.\noperator.\ncountOf\n(\na\n,\nb\n)\n¶\nReturn the number of occurrences of\nb\nin\na\n.\noperator.\ndelitem\n(\na\n,\nb\n)\n¶\noperator.\n__delitem__\n(\na\n,\nb\n)\n¶\nRemove the value of\na\nat index\nb\n.\noperator.\ngetitem\n(\na\n,\nb\n)\n¶\noperator.\n__getitem__\n(\na\n,\nb\n)\n¶\nReturn the value of\na\nat index\nb\n.\noperator.\nindexOf\n(\na\n,\nb\n)\n¶\nReturn the index of the first of occurrence of\nb\nin\na\n.\noperator.\nsetitem\n(\na\n,\nb\n,\nc\n)\n¶\noperator.\n__setitem__\n(\na\n,\nb\n,\nc\n)\n¶\nSet the value of\na\nat index\nb\nto\nc\n.\noperator.\nlength_hint\n(\nobj\n,\ndefault\n=\n0\n)\n¶\nReturn an estimated length for the object\nobj\n. First try to return its\nactual length, then an estimate using\nobject.__length_hint__()\n, and\nfinally return the default value.\nAdded in version 3.4.\nThe following operation works with callables:\noperator.\ncall\n(\nobj\n,\n/\n,\n*\nargs\n,\n**\nkwargs\n)\n¶\noperator.\n__call__\n(\nobj\n,\n/\n,\n*\nargs\n,\n**\nkwargs\n)\n¶\nReturn\nobj(*args,\n**kwargs)\n.\nAdded in version 3.11.\nThe\noperator\nmodule also defines tools for generalized attribute and item\nlookups.  These are useful for making fast field extractors as arguments for\nmap()\n,\nsorted()\n,\nitertools.groupby()\n, or other functions that\nexpect a function argument.\noperator.\nattrgetter\n(\nattr\n)\n¶\noperator.\nattrgetter\n(\n*\nattrs\n)\nReturn a callable object that fetches\nattr\nfrom its operand.\nIf more than one attribute is requested, returns a tuple of attributes.\nThe attribute names can also contain dots. For example:\nAfter\nf\n=\nattrgetter('name')\n, the call\nf(b)\nreturns\nb.name\n.\nAfter\nf\n=\nattrgetter('name',\n'date')\n, the call\nf(b)\nreturns\n(b.name,\nb.date)\n.\nAfter\nf\n=\nattrgetter('name.first',\n'name.last')\n, the call\nf(b)\nreturns\n(b.name.first,\nb.name.last)\n.\nEquivalent to:\ndef\nattrgetter\n(\n*\nitems\n):\nif\nany\n(\nnot\nisinstance\n(\nitem\n,\nstr\n)\nfor\nitem\nin\nitems\n):\nraise\nTypeError\n(\n'attribute name must be a string'\n)\nif\nlen\n(\nitems\n)\n==\n1\n:\nattr\n=\nitems\n[\n0\n]\ndef\ng\n(\nobj\n):\nreturn\nresolve_attr\n(\nobj\n,\nattr\n)\nelse\n:\ndef\ng\n(\nobj\n):\nreturn\ntuple\n(\nresolve_attr\n(\nobj\n,\nattr\n)\nfor\nattr\nin\nitems\n)\nreturn\ng\ndef\nresolve_attr\n(\nobj\n,\nattr\n):\nfor\nname\nin\nattr\n.\nsplit\n(\n\".\"\n):\nobj\n=\ngetattr\n(\nobj\n,\nname\n)\nreturn\nobj\noperator.\nitemgetter\n(\nitem\n)\n¶\noperator.\nitemgetter\n(\n*\nitems\n)\nReturn a callable object that fetches\nitem\nfrom its operand using the\noperand’s\n__getitem__()\nmethod.  If multiple items are specified,\nreturns a tuple of lookup values.  For example:\nAfter\nf\n=\nitemgetter(2)\n, the call\nf(r)\nreturns\nr[2]\n.\nAfter\ng\n=\nitemgetter(2,\n5,\n3)\n, the call\ng(r)\nreturns\n(r[2],\nr[5],\nr[3])\n.\nEquivalent to:\ndef\nitemgetter\n(\n*\nitems\n):\nif\nlen\n(\nitems\n)\n==\n1\n:\nitem\n=\nitems\n[\n0\n]\ndef\ng\n(\nobj\n):\nreturn\nobj\n[\nitem\n]\nelse\n:\ndef\ng\n(\nobj\n):\nreturn\ntuple\n(\nobj\n[\nitem\n]\nfor\nitem\nin\nitems\n)\nreturn\ng\nThe items can be any type accepted by the operand’s\n__getitem__()\nmethod.  Dictionaries accept any\nhashable\nvalue.  Lists, tuples, and\nstrings accept an index or a slice:\n>>>\nitemgetter\n(\n1\n)(\n'ABCDEFG'\n)\n'B'\n>>>\nitemgetter\n(\n1\n,\n3\n,\n5\n)(\n'ABCDEFG'\n)\n('B', 'D', 'F')\n>>>\nitemgetter\n(\nslice\n(\n2\n,\nNone\n))(\n'ABCDEFG'\n)\n'CDEFG'\n>>>\nsoldier\n=\ndict\n(\nrank\n=\n'captain'\n,\nname\n=\n'dotterbart'\n)\n>>>\nitemgetter\n(\n'rank'\n)(\nsoldier\n)\n'captain'\nExample of using\nitemgetter()\nto retrieve specific fields from a\ntuple record:\n>>>\ninventory\n=\n[(\n'apple'\n,\n3\n),\n(\n'banana'\n,\n2\n),\n(\n'pear'\n,\n5\n),\n(\n'orange'\n,\n1\n)]\n>>>\ngetcount\n=\nitemgetter\n(\n1\n)\n>>>\nlist\n(\nmap\n(\ngetcount\n,\ninventory\n))\n[3, 2, 5, 1]\n>>>\nsorted\n(\ninventory\n,\nkey\n=\ngetcount\n)\n[('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)]\noperator.\nmethodcaller\n(\nname\n,\n/\n,\n*\nargs\n,\n**\nkwargs\n)\n¶\nReturn a callable object that calls the method\nname\non its operand.  If\nadditional arguments and/or keyword arguments are given, they will be given\nto the method as well.  For example:\nAfter\nf\n=\nmethodcaller('name')\n, the call\nf(b)\nreturns\nb.name()\n.\nAfter\nf\n=\nmethodcaller('name',\n'foo',\nbar=1)\n, the call\nf(b)\nreturns\nb.name('foo',\nbar=1)\n.\nEquivalent to:\ndef\nmethodcaller\n(\nname\n,\n/\n,\n*\nargs\n,\n**\nkwargs\n):\ndef\ncaller\n(\nobj\n):\nreturn\ngetattr\n(\nobj\n,\nname\n)(\n*\nargs\n,\n**\nkwargs\n)\nreturn\ncaller\nMapping Operators to Functions\n¶\nThis table shows how abstract operations correspond to operator symbols in the\nPython syntax and the functions in the\noperator\nmodule.\nOperation\nSyntax\nFunction\nAddition\na\n+\nb\nadd(a,\nb)\nConcatenation\nseq1\n+\nseq2\nconcat(seq1,\nseq2)\nContainment Test\nobj\nin\nseq\ncontains(seq,\nobj)\nDivision\na\n/\nb\ntruediv(a,\nb)\nDivision\na\n//\nb\nfloordiv(a,\nb)\nBitwise And\na\n&\nb\nand_(a,\nb)\nBitwise Exclusive Or\na\n^\nb\nxor(a,\nb)\nBitwise Inversion\n~\na\ninvert(a)\nBitwise Or\na\n|\nb\nor_(a,\nb)\nExponentiation\na\n**\nb\npow(a,\nb)\nIdentity\na\nis\nb\nis_(a,\nb)\nIdentity\na\nis\nnot\nb\nis_not(a,\nb)\nIndexed Assignment\nobj[k]\n=\nv\nsetitem(obj,\nk,\nv)\nIndexed Deletion\ndel\nobj[k]\ndelitem(obj,\nk)\nIndexing\nobj[k]\ngetitem(obj,\nk)\nLeft Shift\na\n<<\nb\nlshift(a,\nb)\nModulo\na\n%\nb\nmod(a,\nb)\nMultiplication\na\n*\nb\nmul(a,\nb)\nMatrix Multiplication\na\n@\nb\nmatmul(a,\nb)\nNegation (Arithmetic)\n-\na\nneg(a)\nNegation (Logical)\nnot\na\nnot_(a)\nPositive\n+\na\npos(a)\nRight Shift\na\n>>\nb\nrshift(a,\nb)\nSlice Assignment\nseq[i:j]\n=\nvalues\nsetitem(seq,\nslice(i,\nj),\nvalues)\nSlice Deletion\ndel\nseq[i:j]\ndelitem(seq,\nslice(i,\nj))\nSlicing\nseq[i:j]\ngetitem(seq,\nslice(i,\nj))\nString Formatting\ns\n%\nobj\nmod(s,\nobj)\nSubtraction\na\n-\nb\nsub(a,\nb)\nTruth Test\nobj\ntruth(obj)\nOrdering\na\n<\nb\nlt(a,\nb)\nOrdering\na\n<=\nb\nle(a,\nb)\nEquality\na\n==\nb\neq(a,\nb)\nDifference\na\n!=\nb\nne(a,\nb)\nOrdering\na\n>=\nb\nge(a,\nb)\nOrdering\na\n>\nb\ngt(a,\nb)\nIn-place Operators\n¶\nMany operations have an “in-place” version.  Listed below are functions\nproviding a more primitive access to in-place operators than the usual syntax\ndoes; for example, the\nstatement\nx\n+=\ny\nis equivalent to\nx\n=\noperator.iadd(x,\ny)\n.  Another way to put it is to say that\nz\n=\noperator.iadd(x,\ny)\nis equivalent to the compound statement\nz\n=\nx;\nz\n+=\ny\n.\nIn those examples, note that when an in-place method is called, the computation\nand assignment are performed in two separate steps.  The in-place functions\nlisted below only do the first step, calling the in-place method.  The second\nstep, assignment, is not handled.\nFor immutable targets such as strings, numbers, and tuples, the updated\nvalue is computed, but not assigned back to the input variable:\n>>>\na\n=\n'hello'\n>>>\niadd\n(\na\n,\n' world'\n)\n'hello world'\n>>>\na\n'hello'\nFor mutable targets such as lists and dictionaries, the in-place method\nwill perform the update, so no subsequent assignment is necessary:\n>>>\ns\n=\n[\n'h'\n,\n'e'\n,\n'l'\n,\n'l'\n,\n'o'\n]\n>>>\niadd\n(\ns\n,\n[\n' '\n,\n'w'\n,\n'o'\n,\n'r'\n,\n'l'\n,\n'd'\n])\n['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\n>>>\ns\n['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\noperator.\niadd\n(\na\n,\nb\n)\n¶\noperator.\n__iadd__\n(\na\n,\nb\n)\n¶\na\n=\niadd(a,\nb)\nis equivalent to\na\n+=\nb\n.\noperator.\niand\n(\na\n,\nb\n)\n¶\noperator.\n__iand__\n(\na\n,\nb\n)\n¶\na\n=\niand(a,\nb)\nis equivalent to\na\n&=\nb\n.\noperator.\niconcat\n(\na\n,\nb\n)\n¶\noperator.\n__iconcat__\n(\na\n,\nb\n)\n¶\na\n=\niconcat(a,\nb)\nis equivalent to\na\n+=\nb\nfor\na\nand\nb\nsequences.\noperator.\nifloordiv\n(\na\n,\nb\n)\n¶\noperator.\n__ifloordiv__\n(\na\n,\nb\n)\n¶\na\n=\nifloordiv(a,\nb)\nis equivalent to\na\n//=\nb\n.\noperator.\nilshift\n(\na\n,\nb\n)\n¶\noperator.\n__ilshift__\n(\na\n,\nb\n)\n¶\na\n=\nilshift(a,\nb)\nis equivalent to\na\n<<=\nb\n.\noperator.\nimod\n(\na\n,\nb\n)\n¶\noperator.\n__imod__\n(\na\n,\nb\n)\n¶\na\n=\nimod(a,\nb)\nis equivalent to\na\n%=\nb\n.\noperator.\nimul\n(\na\n,\nb\n)\n¶\noperator.\n__imul__\n(\na\n,\nb\n)\n¶\na\n=\nimul(a,\nb)\nis equivalent to\na\n*=\nb\n.\noperator.\nimatmul\n(\na\n,\nb\n)\n¶\noperator.\n__imatmul__\n(\na\n,\nb\n)\n¶\na\n=\nimatmul(a,\nb)\nis equivalent to\na\n@=\nb\n.\nAdded in version 3.5.\noperator.\nior\n(\na\n,\nb\n)\n¶\noperator.\n__ior__\n(\na\n,\nb\n)\n¶\na\n=\nior(a,\nb)\nis equivalent to\na\n|=\nb\n.\noperator.\nipow\n(\na\n,\nb\n)\n¶\noperator.\n__ipow__\n(\na\n,\nb\n)\n¶\na\n=\nipow(a,\nb)\nis equivalent to\na\n**=\nb\n.\noperator.\nirshift\n(\na\n,\nb\n)\n¶\noperator.\n__irshift__\n(\na\n,\nb\n)\n¶\na\n=\nirshift(a,\nb)\nis equivalent to\na\n>>=\nb\n.\noperator.\nisub\n(\na\n,\nb\n)\n¶\noperator.\n__isub__\n(\na\n,\nb\n)\n¶\na\n=\nisub(a,\nb)\nis equivalent to\na\n-=\nb\n.\noperator.\nitruediv\n(\na\n,\nb\n)\n¶\noperator.\n__itruediv__\n(\na\n,\nb\n)\n¶\na\n=\nitruediv(a,\nb)\nis equivalent to\na\n/=\nb\n.\noperator.\nixor\n(\na\n,\nb\n)\n¶\noperator.\n__ixor__\n(\na\n,\nb\n)\n¶\na\n=\nixor(a,\nb)\nis equivalent to\na\n^=\nb\n.\nTable of Contents\noperator\n— Standard operators as functions\nMapping Operators to Functions\nIn-place Operators\nPrevious topic\nfunctools\n— Higher-order functions and operations on callable objects\nNext topic\nFile and Directory Access\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nFunctional Programming Modules\n»\noperator\n— Standard operators as functions\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/operator.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12351.5548574
  },
  {
    "title": "Python Documentation contents¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Documentation contents\n|\nTheme\nAuto\nLight\nDark\n|\nPython Documentation contents\n¶\nWhat’s New in Python\nWhat’s New In Python 3.13\nSummary – Release Highlights\nNew Features\nA better interactive interpreter\nImproved error messages\nFree-threaded CPython\nAn experimental just-in-time (JIT) compiler\nDefined mutation semantics for\nlocals()\nSupport for mobile platforms\nOther Language Changes\nNew Modules\nImproved Modules\nargparse\narray\nast\nasyncio\nbase64\ncompileall\nconcurrent.futures\nconfigparser\ncopy\nctypes\ndbm\ndis\ndoctest\nemail\nenum\nfractions\nglob\nimportlib\nio\nipaddress\nitertools\nmarshal\nmath\nmimetypes\nmmap\nmultiprocessing\nos\nos.path\npathlib\npdb\nqueue\nrandom\nre\nshutil\nsite\nsqlite3\nssl\nstatistics\nsubprocess\nsys\ntempfile\ntime\ntkinter\ntraceback\ntypes\ntyping\nunicodedata\nvenv\nwarnings\nxml\nzipimport\nOptimizations\nRemoved Modules And APIs\nPEP 594: Remove “dead batteries” from the standard library\n2to3\nbuiltins\nconfigparser\nimportlib.metadata\nlocale\nopcode\noptparse\npathlib\nre\ntkinter.tix\nturtle\ntyping\nunittest\nurllib\nwebbrowser\nNew Deprecations\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nCPython Bytecode Changes\nC API Changes\nNew Features\nChanged C APIs\nLimited C API Changes\nRemoved C APIs\nDeprecated C APIs\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nBuild Changes\nPorting to Python 3.13\nChanges in the Python API\nChanges in the C API\nRegression Test Changes\nNotable changes in 3.13.1\nsys\nNotable changes in 3.13.4\nos.path\ntarfile\nWhat’s New In Python 3.12\nSummary – Release highlights\nNew Features\nPEP 695: Type Parameter Syntax\nPEP 701: Syntactic formalization of f-strings\nPEP 684: A Per-Interpreter GIL\nPEP 669: Low impact monitoring for CPython\nPEP 688: Making the buffer protocol accessible in Python\nPEP 709: Comprehension inlining\nImproved Error Messages\nNew Features Related to Type Hints\nPEP 692: Using\nTypedDict\nfor more precise\n**kwargs\ntyping\nPEP 698: Override Decorator for Static Typing\nOther Language Changes\nNew Modules\nImproved Modules\narray\nasyncio\ncalendar\ncsv\ndis\nfractions\nimportlib.resources\ninspect\nitertools\nmath\nos\nos.path\npathlib\nplatform\npdb\nrandom\nshutil\nsqlite3\nstatistics\nsys\ntempfile\nthreading\ntkinter\ntokenize\ntypes\ntyping\nunicodedata\nunittest\nuuid\nOptimizations\nCPython bytecode changes\nDemos and Tools\nDeprecated\nPending Removal in Python 3.13\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nRemoved\nasynchat and asyncore\nconfigparser\ndistutils\nensurepip\nenum\nftplib\ngzip\nhashlib\nimportlib\nimp\nio\nlocale\nsmtpd\nsqlite3\nssl\nunittest\nwebbrowser\nxml.etree.ElementTree\nzipimport\nOthers\nPorting to Python 3.12\nChanges in the Python API\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.12\nDeprecated\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nRemoved\nWhat’s New In Python 3.11\nSummary – Release highlights\nNew Features\nPEP 657: Fine-grained error locations in tracebacks\nPEP 654: Exception Groups and\nexcept*\nPEP 678: Exceptions can be enriched with notes\nWindows\npy.exe\nlauncher improvements\nNew Features Related to Type Hints\nPEP 646: Variadic generics\nPEP 655: Marking individual\nTypedDict\nitems as required or not-required\nPEP 673:\nSelf\ntype\nPEP 675: Arbitrary literal string type\nPEP 681: Data class transforms\nPEP 563 may not be the future\nOther Language Changes\nOther CPython Implementation Changes\nNew Modules\nImproved Modules\nasyncio\ncontextlib\ndataclasses\ndatetime\nenum\nfcntl\nfractions\nfunctools\ngzip\nhashlib\nIDLE and idlelib\ninspect\nlocale\nlogging\nmath\noperator\nos\npathlib\nre\nshutil\nsocket\nsqlite3\nstring\nsys\nsysconfig\ntempfile\nthreading\ntime\ntkinter\ntraceback\ntyping\nunicodedata\nunittest\nvenv\nwarnings\nzipfile\nOptimizations\nFaster CPython\nFaster Startup\nFrozen imports / Static code objects\nFaster Runtime\nCheaper, lazy Python frames\nInlined Python function calls\nPEP 659: Specializing Adaptive Interpreter\nMisc\nFAQ\nHow should I write my code to utilize these speedups?\nWill CPython 3.11 use more memory?\nI don’t see any speedups in my workload. Why?\nIs there a JIT compiler?\nAbout\nCPython bytecode changes\nNew opcodes\nReplaced opcodes\nChanged/removed opcodes\nDeprecated\nLanguage/Builtins\nModules\nStandard Library\nPending Removal in Python 3.12\nRemoved\nPorting to Python 3.11\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.11\nDeprecated\nPending Removal in Python 3.12\nRemoved\nNotable changes in 3.11.4\ntarfile\nNotable changes in 3.11.5\nOpenSSL\nWhat’s New In Python 3.10\nSummary – Release highlights\nNew Features\nParenthesized context managers\nBetter error messages\nSyntaxErrors\nIndentationErrors\nAttributeErrors\nNameErrors\nPEP 626: Precise line numbers for debugging and other tools\nPEP 634: Structural Pattern Matching\nSyntax and operations\nDeclarative approach\nSimple pattern: match to a literal\nBehavior without the wildcard\nPatterns with a literal and variable\nPatterns and classes\nPatterns with positional parameters\nNested patterns\nComplex patterns and the wildcard\nGuard\nOther Key Features\nOptional\nEncodingWarning\nand\nencoding=\"locale\"\noption\nNew Features Related to Type Hints\nPEP 604: New Type Union Operator\nPEP 612: Parameter Specification Variables\nPEP 613: TypeAlias\nPEP 647: User-Defined Type Guards\nOther Language Changes\nNew Modules\nImproved Modules\nasyncio\nargparse\narray\nasynchat, asyncore, smtpd\nbase64\nbdb\nbisect\ncodecs\ncollections.abc\ncontextlib\ncurses\ndataclasses\n__slots__\nKeyword-only fields\ndistutils\ndoctest\nencodings\nenum\nfileinput\nfaulthandler\ngc\nglob\nhashlib\nhmac\nIDLE and idlelib\nimportlib.metadata\ninspect\nitertools\nlinecache\nos\nos.path\npathlib\nplatform\npprint\npy_compile\npyclbr\nshelve\nstatistics\nsite\nsocket\nssl\nsqlite3\nsys\n_thread\nthreading\ntraceback\ntypes\ntyping\nunittest\nurllib.parse\nxml\nzipimport\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.10\nChanges in the Python syntax\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nBuild Changes\nC API Changes\nPEP 652: Maintaining the Stable ABI\nNew Features\nPorting to Python 3.10\nDeprecated\nRemoved\nNotable security feature in 3.10.7\nNotable security feature in 3.10.8\nNotable changes in 3.10.12\ntarfile\nWhat’s New In Python 3.9\nSummary – Release highlights\nYou should check for DeprecationWarning in your code\nNew Features\nDictionary Merge & Update Operators\nNew String Methods to Remove Prefixes and Suffixes\nType Hinting Generics in Standard Collections\nNew Parser\nOther Language Changes\nNew Modules\nzoneinfo\ngraphlib\nImproved Modules\nast\nasyncio\ncompileall\nconcurrent.futures\ncurses\ndatetime\ndistutils\nfcntl\nftplib\ngc\nhashlib\nhttp\nIDLE and idlelib\nimaplib\nimportlib\ninspect\nipaddress\nmath\nmultiprocessing\nnntplib\nos\npathlib\npdb\npoplib\npprint\npydoc\nrandom\nsignal\nsmtplib\nsocket\ntime\nsys\ntracemalloc\ntyping\nunicodedata\nvenv\nxml\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.9\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.9\nRemoved\nNotable changes in Python 3.9.1\ntyping\nmacOS 11.0 (Big Sur) and Apple Silicon Mac support\nNotable changes in Python 3.9.2\ncollections.abc\nurllib.parse\nNotable changes in Python 3.9.3\nNotable changes in Python 3.9.5\nurllib.parse\nNotable security feature in 3.9.14\nNotable changes in 3.9.17\ntarfile\nWhat’s New In Python 3.8\nSummary – Release highlights\nNew Features\nAssignment expressions\nPositional-only parameters\nParallel filesystem cache for compiled bytecode files\nDebug build uses the same ABI as release build\nf-strings support\n=\nfor self-documenting expressions and debugging\nPEP 578: Python Runtime Audit Hooks\nPEP 587: Python Initialization Configuration\nPEP 590: Vectorcall: a fast calling protocol for CPython\nPickle protocol 5 with out-of-band data buffers\nOther Language Changes\nNew Modules\nImproved Modules\nast\nasyncio\nbuiltins\ncollections\ncProfile\ncsv\ncurses\nctypes\ndatetime\nfunctools\ngc\ngettext\ngzip\nIDLE and idlelib\ninspect\nio\nitertools\njson.tool\nlogging\nmath\nmmap\nmultiprocessing\nos\nos.path\npathlib\npickle\nplistlib\npprint\npy_compile\nshlex\nshutil\nsocket\nssl\nstatistics\nsys\ntarfile\nthreading\ntokenize\ntkinter\ntime\ntyping\nunicodedata\nunittest\nvenv\nweakref\nxml\nxmlrpc\nOptimizations\nBuild and C API Changes\nDeprecated\nAPI and Feature Removals\nPorting to Python 3.8\nChanges in Python behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nDemos and Tools\nNotable changes in Python 3.8.1\nNotable changes in Python 3.8.2\nNotable changes in Python 3.8.3\nNotable changes in Python 3.8.8\nNotable changes in Python 3.8.9\nNotable changes in Python 3.8.10\nmacOS 11.0 (Big Sur) and Apple Silicon Mac support\nNotable changes in Python 3.8.10\nurllib.parse\nNotable changes in Python 3.8.12\nChanges in the Python API\nNotable security feature in 3.8.14\nNotable changes in 3.8.17\ntarfile\nWhat’s New In Python 3.7\nSummary – Release Highlights\nNew Features\nPEP 563: Postponed Evaluation of Annotations\nPEP 538: Legacy C Locale Coercion\nPEP 540: Forced UTF-8 Runtime Mode\nPEP 553: Built-in\nbreakpoint()\nPEP 539: New C API for Thread-Local Storage\nPEP 562: Customization of Access to Module Attributes\nPEP 564: New Time Functions With Nanosecond Resolution\nPEP 565: Show DeprecationWarning in\n__main__\nPEP 560: Core Support for\ntyping\nmodule and Generic Types\nPEP 552: Hash-based .pyc Files\nPEP 545: Python Documentation Translations\nPython Development Mode (-X dev)\nOther Language Changes\nNew Modules\ncontextvars\ndataclasses\nimportlib.resources\nImproved Modules\nargparse\nasyncio\nbinascii\ncalendar\ncollections\ncompileall\nconcurrent.futures\ncontextlib\ncProfile\ncrypt\ndatetime\ndbm\ndecimal\ndis\ndistutils\nenum\nfunctools\ngc\nhmac\nhttp.client\nhttp.server\nidlelib and IDLE\nimportlib\nio\nipaddress\nitertools\nlocale\nlogging\nmath\nmimetypes\nmsilib\nmultiprocessing\nos\npathlib\npdb\npy_compile\npydoc\nqueue\nre\nsignal\nsocket\nsocketserver\nsqlite3\nssl\nstring\nsubprocess\nsys\ntime\ntkinter\ntracemalloc\ntypes\nunicodedata\nunittest\nunittest.mock\nurllib.parse\nuu\nuuid\nwarnings\nxml\nxml.etree\nxmlrpc.server\nzipapp\nzipfile\nC API Changes\nBuild Changes\nOptimizations\nOther CPython Implementation Changes\nDeprecated Python Behavior\nDeprecated Python modules, functions and methods\naifc\nasyncio\ncollections\ndbm\nenum\ngettext\nimportlib\nlocale\nmacpath\nthreading\nsocket\nssl\nsunau\nsys\nwave\nDeprecated functions and types of the C API\nPlatform Support Removals\nAPI and Feature Removals\nModule Removals\nWindows-only Changes\nPorting to Python 3.7\nChanges in Python Behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nWindows-only Changes\nOther CPython implementation changes\nNotable changes in Python 3.7.1\nNotable changes in Python 3.7.2\nNotable changes in Python 3.7.6\nNotable changes in Python 3.7.10\nNotable changes in Python 3.7.11\nNotable security feature in 3.7.14\nWhat’s New In Python 3.6\nSummary – Release highlights\nNew Features\nPEP 498: Formatted string literals\nPEP 526: Syntax for variable annotations\nPEP 515: Underscores in Numeric Literals\nPEP 525: Asynchronous Generators\nPEP 530: Asynchronous Comprehensions\nPEP 487: Simpler customization of class creation\nPEP 487: Descriptor Protocol Enhancements\nPEP 519: Adding a file system path protocol\nPEP 495: Local Time Disambiguation\nPEP 529: Change Windows filesystem encoding to UTF-8\nPEP 528: Change Windows console encoding to UTF-8\nPEP 520: Preserving Class Attribute Definition Order\nPEP 468: Preserving Keyword Argument Order\nNew\ndict\nimplementation\nPEP 523: Adding a frame evaluation API to CPython\nPYTHONMALLOC environment variable\nDTrace and SystemTap probing support\nOther Language Changes\nNew Modules\nsecrets\nImproved Modules\narray\nast\nasyncio\nbinascii\ncmath\ncollections\nconcurrent.futures\ncontextlib\ndatetime\ndecimal\ndistutils\nemail\nencodings\nenum\nfaulthandler\nfileinput\nhashlib\nhttp.client\nidlelib and IDLE\nimportlib\ninspect\njson\nlogging\nmath\nmultiprocessing\nos\npathlib\npdb\npickle\npickletools\npydoc\nrandom\nre\nreadline\nrlcompleter\nshlex\nsite\nsqlite3\nsocket\nsocketserver\nssl\nstatistics\nstruct\nsubprocess\nsys\ntelnetlib\ntime\ntimeit\ntkinter\ntraceback\ntracemalloc\ntyping\nunicodedata\nunittest.mock\nurllib.request\nurllib.robotparser\nvenv\nwarnings\nwinreg\nwinsound\nxmlrpc.client\nzipfile\nzlib\nOptimizations\nBuild and C API Changes\nOther Improvements\nDeprecated\nNew Keywords\nDeprecated Python behavior\nDeprecated Python modules, functions and methods\nasynchat\nasyncore\ndbm\ndistutils\ngrp\nimportlib\nos\nre\nssl\ntkinter\nvenv\nxml\nDeprecated functions and types of the C API\nDeprecated Build Options\nRemoved\nAPI and Feature Removals\nPorting to Python 3.6\nChanges in ‘python’ Command Behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nNotable changes in Python 3.6.2\nNew\nmake\nregen-all\nbuild target\nRemoval of\nmake\ntouch\nbuild target\nNotable changes in Python 3.6.4\nNotable changes in Python 3.6.5\nNotable changes in Python 3.6.7\nNotable changes in Python 3.6.10\nNotable changes in Python 3.6.13\nNotable changes in Python 3.6.14\nWhat’s New In Python 3.5\nSummary – Release highlights\nNew Features\nPEP 492 - Coroutines with async and await syntax\nPEP 465 - A dedicated infix operator for matrix multiplication\nPEP 448 - Additional Unpacking Generalizations\nPEP 461 - percent formatting support for bytes and bytearray\nPEP 484 - Type Hints\nPEP 471 - os.scandir() function – a better and faster directory iterator\nPEP 475: Retry system calls failing with EINTR\nPEP 479: Change StopIteration handling inside generators\nPEP 485: A function for testing approximate equality\nPEP 486: Make the Python Launcher aware of virtual environments\nPEP 488: Elimination of PYO files\nPEP 489: Multi-phase extension module initialization\nOther Language Changes\nNew Modules\ntyping\nzipapp\nImproved Modules\nargparse\nasyncio\nbz2\ncgi\ncmath\ncode\ncollections\ncollections.abc\ncompileall\nconcurrent.futures\nconfigparser\ncontextlib\ncsv\ncurses\ndbm\ndifflib\ndistutils\ndoctest\nemail\nenum\nfaulthandler\nfunctools\nglob\ngzip\nheapq\nhttp\nhttp.client\nidlelib and IDLE\nimaplib\nimghdr\nimportlib\ninspect\nio\nipaddress\njson\nlinecache\nlocale\nlogging\nlzma\nmath\nmultiprocessing\noperator\nos\npathlib\npickle\npoplib\nre\nreadline\nselectors\nshutil\nsignal\nsmtpd\nsmtplib\nsndhdr\nsocket\nssl\nMemory BIO Support\nApplication-Layer Protocol Negotiation Support\nOther Changes\nsqlite3\nsubprocess\nsys\nsysconfig\ntarfile\nthreading\ntime\ntimeit\ntkinter\ntraceback\ntypes\nunicodedata\nunittest\nunittest.mock\nurllib\nwsgiref\nxmlrpc\nxml.sax\nzipfile\nOther module-level changes\nOptimizations\nBuild and C API Changes\nDeprecated\nNew Keywords\nDeprecated Python Behavior\nUnsupported Operating Systems\nDeprecated Python modules, functions and methods\nRemoved\nAPI and Feature Removals\nPorting to Python 3.5\nChanges in Python behavior\nChanges in the Python API\nChanges in the C API\nNotable changes in Python 3.5.4\nNew\nmake\nregen-all\nbuild target\nRemoval of\nmake\ntouch\nbuild target\nWhat’s New In Python 3.4\nSummary – Release Highlights\nNew Features\nPEP 453: Explicit Bootstrapping of PIP in Python Installations\nBootstrapping pip By Default\nDocumentation Changes\nPEP 446: Newly Created File Descriptors Are Non-Inheritable\nImprovements to Codec Handling\nPEP 451: A ModuleSpec Type for the Import System\nOther Language Changes\nNew Modules\nasyncio\nensurepip\nenum\npathlib\nselectors\nstatistics\ntracemalloc\nImproved Modules\nabc\naifc\nargparse\naudioop\nbase64\ncollections\ncolorsys\ncontextlib\ndbm\ndis\ndoctest\nemail\nfilecmp\nfunctools\ngc\nglob\nhashlib\nhmac\nhtml\nhttp\nidlelib and IDLE\nimportlib\ninspect\nipaddress\nlogging\nmarshal\nmmap\nmultiprocessing\noperator\nos\npdb\npickle\nplistlib\npoplib\npprint\npty\npydoc\nre\nresource\nselect\nshelve\nshutil\nsmtpd\nsmtplib\nsocket\nsqlite3\nssl\nstat\nstruct\nsubprocess\nsunau\nsys\ntarfile\ntextwrap\nthreading\ntraceback\ntypes\nurllib\nunittest\nvenv\nwave\nweakref\nxml.etree\nzipfile\nCPython Implementation Changes\nPEP 445: Customization of CPython Memory Allocators\nPEP 442: Safe Object Finalization\nPEP 456: Secure and Interchangeable Hash Algorithm\nPEP 436: Argument Clinic\nOther Build and C API Changes\nOther Improvements\nSignificant Optimizations\nDeprecated\nDeprecations in the Python API\nDeprecated Features\nRemoved\nOperating Systems No Longer Supported\nAPI and Feature Removals\nCode Cleanups\nPorting to Python 3.4\nChanges in ‘python’ Command Behavior\nChanges in the Python API\nChanges in the C API\nChanged in 3.4.3\nPEP 476: Enabling certificate verification by default for stdlib http clients\nWhat’s New In Python 3.3\nSummary – Release highlights\nPEP 405: Virtual Environments\nPEP 420: Implicit Namespace Packages\nPEP 3118: New memoryview implementation and buffer protocol documentation\nFeatures\nAPI changes\nPEP 393: Flexible String Representation\nFunctionality\nPerformance and resource usage\nPEP 397: Python Launcher for Windows\nPEP 3151: Reworking the OS and IO exception hierarchy\nPEP 380: Syntax for Delegating to a Subgenerator\nPEP 409: Suppressing exception context\nPEP 414: Explicit Unicode literals\nPEP 3155: Qualified name for classes and functions\nPEP 412: Key-Sharing Dictionary\nPEP 362: Function Signature Object\nPEP 421: Adding sys.implementation\nSimpleNamespace\nUsing importlib as the Implementation of Import\nNew APIs\nVisible Changes\nOther Language Changes\nA Finer-Grained Import Lock\nBuiltin functions and types\nNew Modules\nfaulthandler\nipaddress\nlzma\nImproved Modules\nabc\narray\nbase64\nbinascii\nbz2\ncodecs\ncollections\ncontextlib\ncrypt\ncurses\ndatetime\ndecimal\nFeatures\nAPI changes\nemail\nPolicy Framework\nProvisional Policy with New Header API\nOther API Changes\nftplib\nfunctools\ngc\nhmac\nhttp\nhtml\nimaplib\ninspect\nio\nitertools\nlogging\nmath\nmmap\nmultiprocessing\nnntplib\nos\npdb\npickle\npydoc\nre\nsched\nselect\nshlex\nshutil\nsignal\nsmtpd\nsmtplib\nsocket\nsocketserver\nsqlite3\nssl\nstat\nstruct\nsubprocess\nsys\ntarfile\ntempfile\ntextwrap\nthreading\ntime\ntypes\nunittest\nurllib\nwebbrowser\nxml.etree.ElementTree\nzlib\nOptimizations\nBuild and C API Changes\nDeprecated\nUnsupported Operating Systems\nDeprecated Python modules, functions and methods\nDeprecated functions and types of the C API\nDeprecated features\nPorting to Python 3.3\nPorting Python code\nPorting C code\nBuilding C extensions\nCommand Line Switch Changes\nWhat’s New In Python 3.2\nPEP 384: Defining a Stable ABI\nPEP 389: Argparse Command Line Parsing Module\nPEP 391:  Dictionary Based Configuration for Logging\nPEP 3148:  The\nconcurrent.futures\nmodule\nPEP 3147:  PYC Repository Directories\nPEP 3149: ABI Version Tagged .so Files\nPEP 3333: Python Web Server Gateway Interface v1.0.1\nOther Language Changes\nNew, Improved, and Deprecated Modules\nemail\nelementtree\nfunctools\nitertools\ncollections\nthreading\ndatetime and time\nmath\nabc\nio\nreprlib\nlogging\ncsv\ncontextlib\ndecimal and fractions\nftp\npopen\nselect\ngzip and zipfile\ntarfile\nhashlib\nast\nos\nshutil\nsqlite3\nhtml\nsocket\nssl\nnntp\ncertificates\nimaplib\nhttp.client\nunittest\nrandom\npoplib\nasyncore\ntempfile\ninspect\npydoc\ndis\ndbm\nctypes\nsite\nsysconfig\npdb\nconfigparser\nurllib.parse\nmailbox\nturtledemo\nMulti-threading\nOptimizations\nUnicode\nCodecs\nDocumentation\nIDLE\nCode Repository\nBuild and C API Changes\nPorting to Python 3.2\nWhat’s New In Python 3.1\nPEP 372: Ordered Dictionaries\nPEP 378: Format Specifier for Thousands Separator\nOther Language Changes\nNew, Improved, and Deprecated Modules\nOptimizations\nIDLE\nBuild and C API Changes\nPorting to Python 3.1\nWhat’s New In Python 3.0\nCommon Stumbling Blocks\nPrint Is A Function\nViews And Iterators Instead Of Lists\nOrdering Comparisons\nIntegers\nText Vs. Data Instead Of Unicode Vs. 8-bit\nOverview Of Syntax Changes\nNew Syntax\nChanged Syntax\nRemoved Syntax\nChanges Already Present In Python 2.6\nLibrary Changes\nPEP 3101\n: A New Approach To String Formatting\nChanges To Exceptions\nMiscellaneous Other Changes\nOperators And Special Methods\nBuiltins\nBuild and C API Changes\nPerformance\nPorting To Python 3.0\nWhat’s New in Python 2.7\nThe Future for Python 2.x\nChanges to the Handling of Deprecation Warnings\nPython 3.1 Features\nPEP 372: Adding an Ordered Dictionary to collections\nPEP 378: Format Specifier for Thousands Separator\nPEP 389: The argparse Module for Parsing Command Lines\nPEP 391: Dictionary-Based Configuration For Logging\nPEP 3106: Dictionary Views\nPEP 3137: The memoryview Object\nOther Language Changes\nInterpreter Changes\nOptimizations\nNew and Improved Modules\nNew module: importlib\nNew module: sysconfig\nttk: Themed Widgets for Tk\nUpdated module: unittest\nUpdated module: ElementTree 1.3\nBuild and C API Changes\nCapsules\nPort-Specific Changes: Windows\nPort-Specific Changes: Mac OS X\nPort-Specific Changes: FreeBSD\nOther Changes and Fixes\nPorting to Python 2.7\nNew Features Added to Python 2.7 Maintenance Releases\nTwo new environment variables for debug mode\nPEP 434: IDLE Enhancement Exception for All Branches\nPEP 466: Network Security Enhancements for Python 2.7\nPEP 477: Backport ensurepip (PEP 453) to Python 2.7\nBootstrapping pip By Default\nDocumentation Changes\nPEP 476: Enabling certificate verification by default for stdlib http clients\nPEP 493: HTTPS verification migration tools for Python 2.7\nNew\nmake\nregen-all\nbuild target\nRemoval of\nmake\ntouch\nbuild target\nAcknowledgements\nWhat’s New in Python 2.6\nPython 3.0\nChanges to the Development Process\nNew Issue Tracker: Roundup\nNew Documentation Format: reStructuredText Using Sphinx\nPEP 343: The ‘with’ statement\nWriting Context Managers\nThe contextlib module\nPEP 366: Explicit Relative Imports From a Main Module\nPEP 370: Per-user\nsite-packages\nDirectory\nPEP 371: The\nmultiprocessing\nPackage\nPEP 3101: Advanced String Formatting\nPEP 3105:\nprint\nAs a Function\nPEP 3110: Exception-Handling Changes\nPEP 3112: Byte Literals\nPEP 3116: New I/O Library\nPEP 3118: Revised Buffer Protocol\nPEP 3119: Abstract Base Classes\nPEP 3127: Integer Literal Support and Syntax\nPEP 3129: Class Decorators\nPEP 3141: A Type Hierarchy for Numbers\nThe\nfractions\nModule\nOther Language Changes\nOptimizations\nInterpreter Changes\nNew and Improved Modules\nThe\nast\nmodule\nThe\nfuture_builtins\nmodule\nThe\njson\nmodule: JavaScript Object Notation\nThe\nplistlib\nmodule: A Property-List Parser\nctypes Enhancements\nImproved SSL Support\nDeprecations and Removals\nBuild and C API Changes\nPort-Specific Changes: Windows\nPort-Specific Changes: Mac OS X\nPort-Specific Changes: IRIX\nPorting to Python 2.6\nAcknowledgements\nWhat’s New in Python 2.5\nPEP 308: Conditional Expressions\nPEP 309: Partial Function Application\nPEP 314: Metadata for Python Software Packages v1.1\nPEP 328: Absolute and Relative Imports\nPEP 338: Executing Modules as Scripts\nPEP 341: Unified try/except/finally\nPEP 342: New Generator Features\nPEP 343: The ‘with’ statement\nWriting Context Managers\nThe contextlib module\nPEP 352: Exceptions as New-Style Classes\nPEP 353: Using ssize_t as the index type\nPEP 357: The ‘__index__’ method\nOther Language Changes\nInteractive Interpreter Changes\nOptimizations\nNew, Improved, and Removed Modules\nThe ctypes package\nThe ElementTree package\nThe hashlib package\nThe sqlite3 package\nThe wsgiref package\nBuild and C API Changes\nPort-Specific Changes\nPorting to Python 2.5\nAcknowledgements\nWhat’s New in Python 2.4\nPEP 218: Built-In Set Objects\nPEP 237: Unifying Long Integers and Integers\nPEP 289: Generator Expressions\nPEP 292: Simpler String Substitutions\nPEP 318: Decorators for Functions and Methods\nPEP 322: Reverse Iteration\nPEP 324: New subprocess Module\nPEP 327: Decimal Data Type\nWhy is Decimal needed?\nThe\nDecimal\ntype\nThe\nContext\ntype\nPEP 328: Multi-line Imports\nPEP 331: Locale-Independent Float/String Conversions\nOther Language Changes\nOptimizations\nNew, Improved, and Deprecated Modules\ncookielib\ndoctest\nBuild and C API Changes\nPort-Specific Changes\nPorting to Python 2.4\nAcknowledgements\nWhat’s New in Python 2.3\nPEP 218: A Standard Set Datatype\nPEP 255: Simple Generators\nPEP 263: Source Code Encodings\nPEP 273: Importing Modules from ZIP Archives\nPEP 277: Unicode file name support for Windows NT\nPEP 278: Universal Newline Support\nPEP 279: enumerate()\nPEP 282: The logging Package\nPEP 285: A Boolean Type\nPEP 293: Codec Error Handling Callbacks\nPEP 301: Package Index and Metadata for Distutils\nPEP 302: New Import Hooks\nPEP 305: Comma-separated Files\nPEP 307: Pickle Enhancements\nExtended Slices\nOther Language Changes\nString Changes\nOptimizations\nNew, Improved, and Deprecated Modules\nDate/Time Type\nThe optparse Module\nPymalloc: A Specialized Object Allocator\nBuild and C API Changes\nPort-Specific Changes\nOther Changes and Fixes\nPorting to Python 2.3\nAcknowledgements\nWhat’s New in Python 2.2\nIntroduction\nPEPs 252 and 253: Type and Class Changes\nOld and New Classes\nDescriptors\nMultiple Inheritance: The Diamond Rule\nAttribute Access\nRelated Links\nPEP 234: Iterators\nPEP 255: Simple Generators\nPEP 237: Unifying Long Integers and Integers\nPEP 238: Changing the Division Operator\nUnicode Changes\nPEP 227: Nested Scopes\nNew and Improved Modules\nInterpreter Changes and Fixes\nOther Changes and Fixes\nAcknowledgements\nWhat’s New in Python 2.1\nIntroduction\nPEP 227: Nested Scopes\nPEP 236: __future__ Directives\nPEP 207: Rich Comparisons\nPEP 230: Warning Framework\nPEP 229: New Build System\nPEP 205: Weak References\nPEP 232: Function Attributes\nPEP 235: Importing Modules on Case-Insensitive Platforms\nPEP 217: Interactive Display Hook\nPEP 208: New Coercion Model\nPEP 241: Metadata in Python Packages\nNew and Improved Modules\nOther Changes and Fixes\nAcknowledgements\nWhat’s New in Python 2.0\nIntroduction\nWhat About Python 1.6?\nNew Development Process\nUnicode\nList Comprehensions\nAugmented Assignment\nString Methods\nGarbage Collection of Cycles\nOther Core Changes\nMinor Language Changes\nChanges to Built-in Functions\nPorting to 2.0\nExtending/Embedding Changes\nDistutils: Making Modules Easy to Install\nXML Modules\nSAX2 Support\nDOM Support\nRelationship to PyXML\nModule changes\nNew modules\nIDLE Improvements\nDeleted and Deprecated Modules\nAcknowledgements\nChangelog\nPython next\nTools/Demos\nTests\nSecurity\nLibrary\nDocumentation\nCore and Builtins\nBuild\nPython 3.13.5 final\nWindows\nTests\nLibrary\nCore and Builtins\nC API\nPython 3.13.4 final\nWindows\nTests\nSecurity\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.3 final\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.2 final\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.1 final\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.0 final\nCore and Builtins\nPython 3.13.0 release candidate 3\nmacOS\nWindows\nTests\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.0 release candidate 2\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nIDLE\nCore and Builtins\nC API\nBuild\nPython 3.13.0 release candidate 1\nTests\nSecurity\nLibrary\nIDLE\nCore and Builtins\nC API\nBuild\nPython 3.13.0 beta 4\nTests\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.0 beta 3\nCore and Builtins\nLibrary\nBuild\nC API\nPython 3.13.0 beta 2\nSecurity\nCore and Builtins\nLibrary\nTests\nBuild\nWindows\nC API\nPython 3.13.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.13.0 alpha 6\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nC API\nPython 3.13.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.13.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.13.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.13.0 alpha 2\nCore and Builtins\nLibrary\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.13.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.12.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.12.0 alpha 7\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nC API\nPython 3.12.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.12.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nPython 3.12.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.12.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.12.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.12.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.11.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.11.0 alpha 7\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.11.0 alpha 6\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\nPython 3.11.0 alpha 5\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.11.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.11.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.11.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.11.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.10.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 7\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\nPython 3.10.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nmacOS\nTools/Demos\nC API\nPython 3.10.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.10.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.9.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.9.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.9.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.9.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\nPython 3.9.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nBuild\nIDLE\nC API\nPython 3.9.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.9.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.8.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.8.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.8.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nC API\nPython 3.8.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nTests\nWindows\nIDLE\nPython 3.8.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.7.0 final\nLibrary\nC API\nPython 3.7.0 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nBuild\nWindows\nIDLE\nPython 3.7.0 beta 5\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nmacOS\nIDLE\nPython 3.7.0 beta 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nPython 3.7.0 beta 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.7.0 beta 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nPython 3.7.0 beta 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.7.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nWindows\nTools/Demos\nC API\nPython 3.7.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.7.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nBuild\nIDLE\nC API\nPython 3.7.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nC API\nPython 3.6.6 final\nPython 3.6.6 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.6.5 final\nTests\nBuild\nPython 3.6.5 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.6.4 final\nPython 3.6.4 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.6.3 final\nLibrary\nBuild\nPython 3.6.3 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nPython 3.6.2 final\nPython 3.6.2 release candidate 2\nSecurity\nPython 3.6.2 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nBuild\nDocumentation\nTools/Demos\nTests\nWindows\nPython 3.6.1 final\nCore and Builtins\nBuild\nPython 3.6.1 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nWindows\nC API\nDocumentation\nTests\nBuild\nPython 3.6.0 final\nPython 3.6.0 release candidate 2\nCore and Builtins\nTools/Demos\nWindows\nBuild\nPython 3.6.0 release candidate 1\nCore and Builtins\nLibrary\nC API\nDocumentation\nTools/Demos\nPython 3.6.0 beta 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nPython 3.6.0 beta 3\nCore and Builtins\nLibrary\nWindows\nBuild\nTests\nPython 3.6.0 beta 2\nCore and Builtins\nLibrary\nWindows\nC API\nBuild\nTests\nPython 3.6.0 beta 1\nCore and Builtins\nLibrary\nIDLE\nC API\nTests\nBuild\nTools/Demos\nWindows\nPython 3.6.0 alpha 4\nCore and Builtins\nLibrary\nIDLE\nTests\nWindows\nBuild\nPython 3.6.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nBuild\nTools/Demos\nDocumentation\nTests\nPython 3.6.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nWindows\nBuild\nC API\nTools/Demos\nPython 3.6.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nC API\nPython 3.5.5 final\nPython 3.5.5 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nPython 3.5.4 final\nLibrary\nPython 3.5.4 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nC API\nPython 3.5.3 final\nPython 3.5.3 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nDocumentation\nTests\nTools/Demos\nWindows\nBuild\nPython 3.5.2 final\nCore and Builtins\nTests\nIDLE\nPython 3.5.2 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nPython 3.5.1 final\nCore and Builtins\nWindows\nPython 3.5.1 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nPython 3.5.0 final\nBuild\nPython 3.5.0 release candidate 4\nLibrary\nBuild\nPython 3.5.0 release candidate 3\nCore and Builtins\nLibrary\nPython 3.5.0 release candidate 2\nCore and Builtins\nLibrary\nPython 3.5.0 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nPython 3.5.0 beta 4\nCore and Builtins\nLibrary\nBuild\nPython 3.5.0 beta 3\nCore and Builtins\nLibrary\nTests\nDocumentation\nBuild\nPython 3.5.0 beta 2\nCore and Builtins\nLibrary\nPython 3.5.0 beta 1\nCore and Builtins\nLibrary\nIDLE\nTests\nDocumentation\nTools/Demos\nPython 3.5.0 alpha 4\nCore and Builtins\nLibrary\nBuild\nTests\nTools/Demos\nC API\nPython 3.5.0 alpha 3\nCore and Builtins\nLibrary\nBuild\nTests\nTools/Demos\nPython 3.5.0 alpha 2\nCore and Builtins\nLibrary\nBuild\nC API\nWindows\nPython 3.5.0 alpha 1\nCore and Builtins\nLibrary\nIDLE\nBuild\nC API\nDocumentation\nTests\nTools/Demos\nWindows\nThe Python Tutorial\n1. Whetting Your Appetite\n2. Using the Python Interpreter\n2.1. Invoking the Interpreter\n2.1.1. Argument Passing\n2.1.2. Interactive Mode\n2.2. The Interpreter and Its Environment\n2.2.1. Source Code Encoding\n3. An Informal Introduction to Python\n3.1. Using Python as a Calculator\n3.1.1. Numbers\n3.1.2. Text\n3.1.3. Lists\n3.2. First Steps Towards Programming\n4. More Control Flow Tools\n4.1.\nif\nStatements\n4.2.\nfor\nStatements\n4.3. The\nrange()\nFunction\n4.4.\nbreak\nand\ncontinue\nStatements\n4.5.\nelse\nClauses on Loops\n4.6.\npass\nStatements\n4.7.\nmatch\nStatements\n4.8. Defining Functions\n4.9. More on Defining Functions\n4.9.1. Default Argument Values\n4.9.2. Keyword Arguments\n4.9.3. Special parameters\n4.9.3.1. Positional-or-Keyword Arguments\n4.9.3.2. Positional-Only Parameters\n4.9.3.3. Keyword-Only Arguments\n4.9.3.4. Function Examples\n4.9.3.5. Recap\n4.9.4. Arbitrary Argument Lists\n4.9.5. Unpacking Argument Lists\n4.9.6. Lambda Expressions\n4.9.7. Documentation Strings\n4.9.8. Function Annotations\n4.10. Intermezzo: Coding Style\n5. Data Structures\n5.1. More on Lists\n5.1.1. Using Lists as Stacks\n5.1.2. Using Lists as Queues\n5.1.3. List Comprehensions\n5.1.4. Nested List Comprehensions\n5.2. The\ndel\nstatement\n5.3. Tuples and Sequences\n5.4. Sets\n5.5. Dictionaries\n5.6. Looping Techniques\n5.7. More on Conditions\n5.8. Comparing Sequences and Other Types\n6. Modules\n6.1. More on Modules\n6.1.1. Executing modules as scripts\n6.1.2. The Module Search Path\n6.1.3. “Compiled” Python files\n6.2. Standard Modules\n6.3. The\ndir()\nFunction\n6.4. Packages\n6.4.1. Importing * From a Package\n6.4.2. Intra-package References\n6.4.3. Packages in Multiple Directories\n7. Input and Output\n7.1. Fancier Output Formatting\n7.1.1. Formatted String Literals\n7.1.2. The String format() Method\n7.1.3. Manual String Formatting\n7.1.4. Old string formatting\n7.2. Reading and Writing Files\n7.2.1. Methods of File Objects\n7.2.2. Saving structured data with\njson\n8. Errors and Exceptions\n8.1. Syntax Errors\n8.2. Exceptions\n8.3. Handling Exceptions\n8.4. Raising Exceptions\n8.5. Exception Chaining\n8.6. User-defined Exceptions\n8.7. Defining Clean-up Actions\n8.8. Predefined Clean-up Actions\n8.9. Raising and Handling Multiple Unrelated Exceptions\n8.10. Enriching Exceptions with Notes\n9. Classes\n9.1. A Word About Names and Objects\n9.2. Python Scopes and Namespaces\n9.2.1. Scopes and Namespaces Example\n9.3. A First Look at Classes\n9.3.1. Class Definition Syntax\n9.3.2. Class Objects\n9.3.3. Instance Objects\n9.3.4. Method Objects\n9.3.5. Class and Instance Variables\n9.4. Random Remarks\n9.5. Inheritance\n9.5.1. Multiple Inheritance\n9.6. Private Variables\n9.7. Odds and Ends\n9.8. Iterators\n9.9. Generators\n9.10. Generator Expressions\n10. Brief Tour of the Standard Library\n10.1. Operating System Interface\n10.2. File Wildcards\n10.3. Command Line Arguments\n10.4. Error Output Redirection and Program Termination\n10.5. String Pattern Matching\n10.6. Mathematics\n10.7. Internet Access\n10.8. Dates and Times\n10.9. Data Compression\n10.10. Performance Measurement\n10.11. Quality Control\n10.12. Batteries Included\n11. Brief Tour of the Standard Library — Part II\n11.1. Output Formatting\n11.2. Templating\n11.3. Working with Binary Data Record Layouts\n11.4. Multi-threading\n11.5. Logging\n11.6. Weak References\n11.7. Tools for Working with Lists\n11.8. Decimal Floating-Point Arithmetic\n12. Virtual Environments and Packages\n12.1. Introduction\n12.2. Creating Virtual Environments\n12.3. Managing Packages with pip\n13. What Now?\n14. Interactive Input Editing and History Substitution\n14.1. Tab Completion and History Editing\n14.2. Alternatives to the Interactive Interpreter\n15. Floating-Point Arithmetic:  Issues and Limitations\n15.1. Representation Error\n16. Appendix\n16.1. Interactive Mode\n16.1.1. Error Handling\n16.1.2. Executable Python Scripts\n16.1.3. The Interactive Startup File\n16.1.4. The Customization Modules\nPython Setup and Usage\n1. Command line and environment\n1.1. Command line\n1.1.1. Interface options\n1.1.2. Generic options\n1.1.3. Miscellaneous options\n1.1.4. Controlling color\n1.1.5. Options you shouldn’t use\n1.2. Environment variables\n1.2.1. Debug-mode variables\n2. Using Python on Unix platforms\n2.1. Getting and installing the latest version of Python\n2.1.1. On Linux\n2.1.1.1. Installing IDLE\n2.1.2. On FreeBSD and OpenBSD\n2.2. Building Python\n2.3. Python-related paths and files\n2.4. Miscellaneous\n2.5. Custom OpenSSL\n3. Configure Python\n3.1. Build Requirements\n3.2. Generated files\n3.2.1. configure script\n3.3. Configure Options\n3.3.1. General Options\n3.3.2. C compiler options\n3.3.3. Linker options\n3.3.4. Options for third-party dependencies\n3.3.5. WebAssembly Options\n3.3.6. Install Options\n3.3.7. Performance options\n3.3.8. Python Debug Build\n3.3.9. Debug options\n3.3.10. Linker options\n3.3.11. Libraries options\n3.3.12. Security Options\n3.3.13. macOS Options\n3.3.14. iOS Options\n3.3.15. Cross Compiling Options\n3.4. Python Build System\n3.4.1. Main files of the build system\n3.4.2. Main build steps\n3.4.3. Main Makefile targets\n3.4.3.1. make\n3.4.3.2. make platform\n3.4.3.3. make profile-opt\n3.4.3.4. make clean\n3.4.3.5. make distclean\n3.4.3.6. make install\n3.4.3.7. make test\n3.4.3.8. make buildbottest\n3.4.3.9. make regen-all\n3.4.4. C extensions\n3.5. Compiler and linker flags\n3.5.1. Preprocessor flags\n3.5.2. Compiler flags\n3.5.3. Linker flags\n4. Using Python on Windows\n4.1. The full installer\n4.1.1. Installation steps\n4.1.2. Removing the MAX_PATH Limitation\n4.1.3. Installing Without UI\n4.1.4. Installing Without Downloading\n4.1.5. Modifying an install\n4.1.6. Installing Free-threaded Binaries\n4.2. The Microsoft Store package\n4.2.1. Known issues\n4.2.1.1. Redirection of local data, registry, and temporary paths\n4.3. The nuget.org packages\n4.3.1. Free-threaded packages\n4.4. The embeddable package\n4.4.1. Python Application\n4.4.2. Embedding Python\n4.5. Alternative bundles\n4.6. Configuring Python\n4.6.1. Excursus: Setting environment variables\n4.6.2. Finding the Python executable\n4.7. UTF-8 mode\n4.8. Python Launcher for Windows\n4.8.1. Getting started\n4.8.1.1. From the command-line\n4.8.1.2. Virtual environments\n4.8.1.3. From a script\n4.8.1.4. From file associations\n4.8.2. Shebang Lines\n4.8.3. Arguments in shebang lines\n4.8.4. Customization\n4.8.4.1. Customization via INI files\n4.8.4.2. Customizing default Python versions\n4.8.5. Diagnostics\n4.8.6. Dry Run\n4.8.7. Install on demand\n4.8.8. Return codes\n4.9. Finding modules\n4.10. Additional modules\n4.10.1. PyWin32\n4.10.2. cx_Freeze\n4.11. Compiling Python on Windows\n4.12. Other Platforms\n5. Using Python on macOS\n5.1. Using Python for macOS from\npython.org\n5.1.1. Installation steps\n5.1.2. How to run a Python script\n5.2. Alternative Distributions\n5.3. Installing Additional Python Packages\n5.4. GUI Programming\n5.5. Advanced Topics\n5.5.1. Installing Free-threaded Binaries\n5.5.2. Installing using the command line\n5.5.3. Distributing Python Applications\n5.5.4. App Store Compliance\n5.6. Other Resources\n6. Using Python on Android\n6.1. Adding Python to an Android app\n6.2. Building a Python package for Android\n7. Using Python on iOS\n7.1. Python at runtime on iOS\n7.1.1. iOS version compatibility\n7.1.2. Platform identification\n7.1.3. Standard library availability\n7.1.4. Binary extension modules\n7.1.5. Compiler stub binaries\n7.2. Installing Python on iOS\n7.2.1. Tools for building iOS apps\n7.2.2. Adding Python to an iOS project\n7.2.3. Testing a Python package\n7.3. App Store Compliance\n8. Editors and IDEs\n8.1. IDLE — Python editor and shell\n8.2. Other Editors and IDEs\nThe Python Language Reference\n1. Introduction\n1.1. Alternate Implementations\n1.2. Notation\n2. Lexical analysis\n2.1. Line structure\n2.1.1. Logical lines\n2.1.2. Physical lines\n2.1.3. Comments\n2.1.4. Encoding declarations\n2.1.5. Explicit line joining\n2.1.6. Implicit line joining\n2.1.7. Blank lines\n2.1.8. Indentation\n2.1.9. Whitespace between tokens\n2.2. Other tokens\n2.3. Identifiers and keywords\n2.3.1. Keywords\n2.3.2. Soft Keywords\n2.3.3. Reserved classes of identifiers\n2.4. Literals\n2.4.1. String and Bytes literals\n2.4.1.1. Escape sequences\n2.4.2. String literal concatenation\n2.4.3. f-strings\n2.4.4. Numeric literals\n2.4.5. Integer literals\n2.4.6. Floating-point literals\n2.4.7. Imaginary literals\n2.5. Operators\n2.6. Delimiters\n3. Data model\n3.1. Objects, values and types\n3.2. The standard type hierarchy\n3.2.1. None\n3.2.2. NotImplemented\n3.2.3. Ellipsis\n3.2.4.\nnumbers.Number\n3.2.4.1.\nnumbers.Integral\n3.2.4.2.\nnumbers.Real\n(\nfloat\n)\n3.2.4.3.\nnumbers.Complex\n(\ncomplex\n)\n3.2.5. Sequences\n3.2.5.1. Immutable sequences\n3.2.5.2. Mutable sequences\n3.2.6. Set types\n3.2.7. Mappings\n3.2.7.1. Dictionaries\n3.2.8. Callable types\n3.2.8.1. User-defined functions\n3.2.8.1.1. Special read-only attributes\n3.2.8.1.2. Special writable attributes\n3.2.8.2. Instance methods\n3.2.8.3. Generator functions\n3.2.8.4. Coroutine functions\n3.2.8.5. Asynchronous generator functions\n3.2.8.6. Built-in functions\n3.2.8.7. Built-in methods\n3.2.8.8. Classes\n3.2.8.9. Class Instances\n3.2.9. Modules\n3.2.9.1. Import-related attributes on module objects\n3.2.9.2. Other writable attributes on module objects\n3.2.9.3. Module dictionaries\n3.2.10. Custom classes\n3.2.10.1. Special attributes\n3.2.10.2. Special methods\n3.2.11. Class instances\n3.2.11.1. Special attributes\n3.2.12. I/O objects (also known as file objects)\n3.2.13. Internal types\n3.2.13.1. Code objects\n3.2.13.1.1. Special read-only attributes\n3.2.13.1.2. Methods on code objects\n3.2.13.2. Frame objects\n3.2.13.2.1. Special read-only attributes\n3.2.13.2.2. Special writable attributes\n3.2.13.2.3. Frame object methods\n3.2.13.3. Traceback objects\n3.2.13.4. Slice objects\n3.2.13.5. Static method objects\n3.2.13.6. Class method objects\n3.3. Special method names\n3.3.1. Basic customization\n3.3.2. Customizing attribute access\n3.3.2.1. Customizing module attribute access\n3.3.2.2. Implementing Descriptors\n3.3.2.3. Invoking Descriptors\n3.3.2.4. __slots__\n3.3.3. Customizing class creation\n3.3.3.1. Metaclasses\n3.3.3.2. Resolving MRO entries\n3.3.3.3. Determining the appropriate metaclass\n3.3.3.4. Preparing the class namespace\n3.3.3.5. Executing the class body\n3.3.3.6. Creating the class object\n3.3.3.7. Uses for metaclasses\n3.3.4. Customizing instance and subclass checks\n3.3.5. Emulating generic types\n3.3.5.1. The purpose of\n__class_getitem__\n3.3.5.2.\n__class_getitem__\nversus\n__getitem__\n3.3.6. Emulating callable objects\n3.3.7. Emulating container types\n3.3.8. Emulating numeric types\n3.3.9. With Statement Context Managers\n3.3.10. Customizing positional arguments in class pattern matching\n3.3.11. Emulating buffer types\n3.3.12. Special method lookup\n3.4. Coroutines\n3.4.1. Awaitable Objects\n3.4.2. Coroutine Objects\n3.4.3. Asynchronous Iterators\n3.4.4. Asynchronous Context Managers\n4. Execution model\n4.1. Structure of a program\n4.2. Naming and binding\n4.2.1. Binding of names\n4.2.2. Resolution of names\n4.2.3. Annotation scopes\n4.2.4. Lazy evaluation\n4.2.5. Builtins and restricted execution\n4.2.6. Interaction with dynamic features\n4.3. Exceptions\n5. The import system\n5.1.\nimportlib\n5.2. Packages\n5.2.1. Regular packages\n5.2.2. Namespace packages\n5.3. Searching\n5.3.1. The module cache\n5.3.2. Finders and loaders\n5.3.3. Import hooks\n5.3.4. The meta path\n5.4. Loading\n5.4.1. Loaders\n5.4.2. Submodules\n5.4.3. Module specs\n5.4.4. __path__ attributes on modules\n5.4.5. Module reprs\n5.4.6. Cached bytecode invalidation\n5.5. The Path Based Finder\n5.5.1. Path entry finders\n5.5.2. Path entry finder protocol\n5.6. Replacing the standard import system\n5.7. Package Relative Imports\n5.8. Special considerations for __main__\n5.8.1. __main__.__spec__\n5.9. References\n6. Expressions\n6.1. Arithmetic conversions\n6.2. Atoms\n6.2.1. Identifiers (Names)\n6.2.1.1. Private name mangling\n6.2.2. Literals\n6.2.3. Parenthesized forms\n6.2.4. Displays for lists, sets and dictionaries\n6.2.5. List displays\n6.2.6. Set displays\n6.2.7. Dictionary displays\n6.2.8. Generator expressions\n6.2.9. Yield expressions\n6.2.9.1. Generator-iterator methods\n6.2.9.2. Examples\n6.2.9.3. Asynchronous generator functions\n6.2.9.4. Asynchronous generator-iterator methods\n6.3. Primaries\n6.3.1. Attribute references\n6.3.2. Subscriptions\n6.3.3. Slicings\n6.3.4. Calls\n6.4. Await expression\n6.5. The power operator\n6.6. Unary arithmetic and bitwise operations\n6.7. Binary arithmetic operations\n6.8. Shifting operations\n6.9. Binary bitwise operations\n6.10. Comparisons\n6.10.1. Value comparisons\n6.10.2. Membership test operations\n6.10.3. Identity comparisons\n6.11. Boolean operations\n6.12. Assignment expressions\n6.13. Conditional expressions\n6.14. Lambdas\n6.15. Expression lists\n6.16. Evaluation order\n6.17. Operator precedence\n7. Simple statements\n7.1. Expression statements\n7.2. Assignment statements\n7.2.1. Augmented assignment statements\n7.2.2. Annotated assignment statements\n7.3. The\nassert\nstatement\n7.4. The\npass\nstatement\n7.5. The\ndel\nstatement\n7.6. The\nreturn\nstatement\n7.7. The\nyield\nstatement\n7.8. The\nraise\nstatement\n7.9. The\nbreak\nstatement\n7.10. The\ncontinue\nstatement\n7.11. The\nimport\nstatement\n7.11.1. Future statements\n7.12. The\nglobal\nstatement\n7.13. The\nnonlocal\nstatement\n7.14. The\ntype\nstatement\n8. Compound statements\n8.1. The\nif\nstatement\n8.2. The\nwhile\nstatement\n8.3. The\nfor\nstatement\n8.4. The\ntry\nstatement\n8.4.1.\nexcept\nclause\n8.4.2.\nexcept*\nclause\n8.4.3.\nelse\nclause\n8.4.4.\nfinally\nclause\n8.5. The\nwith\nstatement\n8.6. The\nmatch\nstatement\n8.6.1. Overview\n8.6.2. Guards\n8.6.3. Irrefutable Case Blocks\n8.6.4. Patterns\n8.6.4.1. OR Patterns\n8.6.4.2. AS Patterns\n8.6.4.3. Literal Patterns\n8.6.4.4. Capture Patterns\n8.6.4.5. Wildcard Patterns\n8.6.4.6. Value Patterns\n8.6.4.7. Group Patterns\n8.6.4.8. Sequence Patterns\n8.6.4.9. Mapping Patterns\n8.6.4.10. Class Patterns\n8.7. Function definitions\n8.8. Class definitions\n8.9. Coroutines\n8.9.1. Coroutine function definition\n8.9.2. The\nasync\nfor\nstatement\n8.9.3. The\nasync\nwith\nstatement\n8.10. Type parameter lists\n8.10.1. Generic functions\n8.10.2. Generic classes\n8.10.3. Generic type aliases\n9. Top-level components\n9.1. Complete Python programs\n9.2. File input\n9.3. Interactive input\n9.4. Expression input\n10. Full Grammar specification\nThe Python Standard Library\nIntroduction\nNotes on availability\nWebAssembly platforms\nMobile platforms\nBuilt-in Functions\nBuilt-in Constants\nConstants added by the\nsite\nmodule\nBuilt-in Types\nTruth Value Testing\nBoolean Operations —\nand\n,\nor\n,\nnot\nComparisons\nNumeric Types —\nint\n,\nfloat\n,\ncomplex\nBitwise Operations on Integer Types\nAdditional Methods on Integer Types\nAdditional Methods on Float\nHashing of numeric types\nBoolean Type -\nbool\nIterator Types\nGenerator Types\nSequence Types —\nlist\n,\ntuple\n,\nrange\nCommon Sequence Operations\nImmutable Sequence Types\nMutable Sequence Types\nLists\nTuples\nRanges\nText Sequence Type —\nstr\nString Methods\nFormatted String Literals (f-strings)\nprintf\n-style String Formatting\nBinary Sequence Types —\nbytes\n,\nbytearray\n,\nmemoryview\nBytes Objects\nBytearray Objects\nBytes and Bytearray Operations\nprintf\n-style Bytes Formatting\nMemory Views\nSet Types —\nset\n,\nfrozenset\nMapping Types —\ndict\nDictionary view objects\nContext Manager Types\nType Annotation Types —\nGeneric Alias\n,\nUnion\nGeneric Alias Type\nStandard Generic Classes\nSpecial Attributes of\nGenericAlias\nobjects\nUnion Type\nOther Built-in Types\nModules\nClasses and Class Instances\nFunctions\nMethods\nCode Objects\nType Objects\nThe Null Object\nThe Ellipsis Object\nThe NotImplemented Object\nInternal Objects\nSpecial Attributes\nInteger string conversion length limitation\nAffected APIs\nConfiguring the limit\nRecommended configuration\nBuilt-in Exceptions\nException context\nInheriting from built-in exceptions\nBase classes\nConcrete exceptions\nOS exceptions\nWarnings\nException groups\nException hierarchy\nText Processing Services\nstring\n— Common string operations\nString constants\nCustom String Formatting\nFormat String Syntax\nFormat Specification Mini-Language\nFormat examples\nTemplate strings\nHelper functions\nre\n— Regular expression operations\nRegular Expression Syntax\nModule Contents\nFlags\nFunctions\nExceptions\nRegular Expression Objects\nMatch Objects\nRegular Expression Examples\nChecking for a Pair\nSimulating scanf()\nsearch() vs. match()\nMaking a Phonebook\nText Munging\nFinding all Adverbs\nFinding all Adverbs and their Positions\nRaw String Notation\nWriting a Tokenizer\ndifflib\n— Helpers for computing deltas\nSequenceMatcher Objects\nSequenceMatcher Examples\nDiffer Objects\nDiffer Example\nA command-line interface to difflib\nndiff example\ntextwrap\n— Text wrapping and filling\nunicodedata\n— Unicode Database\nstringprep\n— Internet String Preparation\nreadline\n— GNU readline interface\nInit file\nLine buffer\nHistory file\nHistory list\nStartup hooks\nCompletion\nExample\nrlcompleter\n— Completion function for GNU readline\nBinary Data Services\nstruct\n— Interpret bytes as packed binary data\nFunctions and Exceptions\nFormat Strings\nByte Order, Size, and Alignment\nFormat Characters\nExamples\nApplications\nNative Formats\nStandard Formats\nClasses\ncodecs\n— Codec registry and base classes\nCodec Base Classes\nError Handlers\nStateless Encoding and Decoding\nIncremental Encoding and Decoding\nIncrementalEncoder Objects\nIncrementalDecoder Objects\nStream Encoding and Decoding\nStreamWriter Objects\nStreamReader Objects\nStreamReaderWriter Objects\nStreamRecoder Objects\nEncodings and Unicode\nStandard Encodings\nPython Specific Encodings\nText Encodings\nBinary Transforms\nStandalone Codec Functions\nText Transforms\nencodings\n— Encodings package\nencodings.idna\n— Internationalized Domain Names in Applications\nencodings.mbcs\n— Windows ANSI codepage\nencodings.utf_8_sig\n— UTF-8 codec with BOM signature\nData Types\ndatetime\n— Basic date and time types\nAware and Naive Objects\nConstants\nAvailable Types\nCommon Properties\nDetermining if an Object is Aware or Naive\ntimedelta\nObjects\nExamples of usage:\ntimedelta\ndate\nObjects\nExamples of Usage:\ndate\ndatetime\nObjects\nExamples of Usage:\ndatetime\ntime\nObjects\nExamples of Usage:\ntime\ntzinfo\nObjects\ntimezone\nObjects\nstrftime()\nand\nstrptime()\nBehavior\nstrftime()\nand\nstrptime()\nFormat Codes\nTechnical Detail\nzoneinfo\n— IANA time zone support\nUsing\nZoneInfo\nData sources\nConfiguring the data sources\nCompile-time configuration\nEnvironment configuration\nRuntime configuration\nThe\nZoneInfo\nclass\nString representations\nPickle serialization\nFunctions\nGlobals\nExceptions and warnings\ncalendar\n— General calendar-related functions\nCommand-Line Usage\ncollections\n— Container datatypes\nChainMap\nobjects\nChainMap\nExamples and Recipes\nCounter\nobjects\ndeque\nobjects\ndeque\nRecipes\ndefaultdict\nobjects\ndefaultdict\nExamples\nnamedtuple()\nFactory Function for Tuples with Named Fields\nOrderedDict\nobjects\nOrderedDict\nExamples and Recipes\nUserDict\nobjects\nUserList\nobjects\nUserString\nobjects\ncollections.abc\n— Abstract Base Classes for Containers\nCollections Abstract Base Classes\nCollections Abstract Base Classes – Detailed Descriptions\nExamples and Recipes\nheapq\n— Heap queue algorithm\nBasic Examples\nPriority Queue Implementation Notes\nTheory\nbisect\n— Array bisection algorithm\nPerformance Notes\nSearching Sorted Lists\nExamples\narray\n— Efficient arrays of numeric values\nweakref\n— Weak references\nWeak Reference Objects\nExample\nFinalizer Objects\nComparing finalizers with\n__del__()\nmethods\ntypes\n— Dynamic type creation and names for built-in types\nDynamic Type Creation\nStandard Interpreter Types\nAdditional Utility Classes and Functions\nCoroutine Utility Functions\ncopy\n— Shallow and deep copy operations\npprint\n— Data pretty printer\nFunctions\nPrettyPrinter Objects\nExample\nreprlib\n— Alternate\nrepr()\nimplementation\nRepr Objects\nSubclassing Repr Objects\nenum\n— Support for enumerations\nModule Contents\nData Types\nSupported\n__dunder__\nnames\nSupported\n_sunder_\nnames\nUtilities and Decorators\nNotes\ngraphlib\n— Functionality to operate with graph-like structures\nExceptions\nNumeric and Mathematical Modules\nnumbers\n— Numeric abstract base classes\nThe numeric tower\nNotes for type implementers\nAdding More Numeric ABCs\nImplementing the arithmetic operations\nmath\n— Mathematical functions\nNumber-theoretic functions\nFloating point arithmetic\nFloating point manipulation functions\nPower, exponential and logarithmic functions\nSummation and product functions\nAngular conversion\nTrigonometric functions\nHyperbolic functions\nSpecial functions\nConstants\ncmath\n— Mathematical functions for complex numbers\nConversions to and from polar coordinates\nPower and logarithmic functions\nTrigonometric functions\nHyperbolic functions\nClassification functions\nConstants\ndecimal\n— Decimal fixed-point and floating-point arithmetic\nQuick-start tutorial\nDecimal objects\nLogical operands\nContext objects\nConstants\nRounding modes\nSignals\nFloating-point notes\nMitigating round-off error with increased precision\nSpecial values\nWorking with threads\nRecipes\nDecimal FAQ\nfractions\n— Rational numbers\nrandom\n— Generate pseudo-random numbers\nBookkeeping functions\nFunctions for bytes\nFunctions for integers\nFunctions for sequences\nDiscrete distributions\nReal-valued distributions\nAlternative Generator\nNotes on Reproducibility\nExamples\nRecipes\nCommand-line usage\nCommand-line example\nstatistics\n— Mathematical statistics functions\nAverages and measures of central location\nMeasures of spread\nStatistics for relations between two inputs\nFunction details\nExceptions\nNormalDist\nobjects\nExamples and Recipes\nClassic probability problems\nMonte Carlo inputs for simulations\nApproximating binomial distributions\nNaive bayesian classifier\nFunctional Programming Modules\nitertools\n— Functions creating iterators for efficient looping\nItertool Functions\nItertools Recipes\nfunctools\n— Higher-order functions and operations on callable objects\npartial\nObjects\noperator\n— Standard operators as functions\nMapping Operators to Functions\nIn-place Operators\nFile and Directory Access\npathlib\n— Object-oriented filesystem paths\nBasic use\nExceptions\nPure paths\nGeneral properties\nOperators\nAccessing individual parts\nMethods and properties\nConcrete paths\nParsing and generating URIs\nExpanding and resolving paths\nQuerying file type and status\nReading and writing files\nReading directories\nCreating files and directories\nRenaming and deleting\nPermissions and ownership\nPattern language\nComparison to the\nglob\nmodule\nComparison to the\nos\nand\nos.path\nmodules\nCorresponding tools\nos.path\n— Common pathname manipulations\nstat\n— Interpreting\nstat()\nresults\nfilecmp\n— File and Directory Comparisons\nThe\ndircmp\nclass\ntempfile\n— Generate temporary files and directories\nExamples\nDeprecated functions and variables\nglob\n— Unix style pathname pattern expansion\nExamples\nfnmatch\n— Unix filename pattern matching\nlinecache\n— Random access to text lines\nshutil\n— High-level file operations\nDirectory and files operations\nPlatform-dependent efficient copy operations\ncopytree example\nrmtree example\nArchiving operations\nArchiving example\nArchiving example with\nbase_dir\nQuerying the size of the output terminal\nData Persistence\npickle\n— Python object serialization\nRelationship to other Python modules\nComparison with\nmarshal\nComparison with\njson\nData stream format\nModule Interface\nWhat can be pickled and unpickled?\nPickling Class Instances\nPersistence of External Objects\nDispatch Tables\nHandling Stateful Objects\nCustom Reduction for Types, Functions, and Other Objects\nOut-of-band Buffers\nProvider API\nConsumer API\nExample\nRestricting Globals\nPerformance\nExamples\ncopyreg\n— Register\npickle\nsupport functions\nExample\nshelve\n— Python object persistence\nRestrictions\nExample\nmarshal\n— Internal Python object serialization\ndbm\n— Interfaces to Unix “databases”\ndbm.sqlite3\n— SQLite backend for dbm\ndbm.gnu\n— GNU database manager\ndbm.ndbm\n— New Database Manager\ndbm.dumb\n— Portable DBM implementation\nsqlite3\n— DB-API 2.0 interface for SQLite databases\nTutorial\nReference\nModule functions\nModule constants\nConnection objects\nCursor objects\nRow objects\nBlob objects\nPrepareProtocol objects\nExceptions\nSQLite and Python types\nDefault adapters and converters (deprecated)\nCommand-line interface\nHow-to guides\nHow to use placeholders to bind values in SQL queries\nHow to adapt custom Python types to SQLite values\nHow to write adaptable objects\nHow to register adapter callables\nHow to convert SQLite values to custom Python types\nAdapter and converter recipes\nHow to use connection shortcut methods\nHow to use the connection context manager\nHow to work with SQLite URIs\nHow to create and use row factories\nHow to handle non-UTF-8 text encodings\nExplanation\nTransaction control\nTransaction control via the\nautocommit\nattribute\nTransaction control via the\nisolation_level\nattribute\nData Compression and Archiving\nzlib\n— Compression compatible with\ngzip\ngzip\n— Support for\ngzip\nfiles\nExamples of usage\nCommand Line Interface\nCommand line options\nbz2\n— Support for\nbzip2\ncompression\n(De)compression of files\nIncremental (de)compression\nOne-shot (de)compression\nExamples of usage\nlzma\n— Compression using the LZMA algorithm\nReading and writing compressed files\nCompressing and decompressing data in memory\nMiscellaneous\nSpecifying custom filter chains\nExamples\nzipfile\n— Work with ZIP archives\nZipFile Objects\nPath Objects\nPyZipFile Objects\nZipInfo Objects\nCommand-Line Interface\nCommand-line options\nDecompression pitfalls\nFrom file itself\nFile System limitations\nResources limitations\nInterruption\nDefault behaviors of extraction\ntarfile\n— Read and write tar archive files\nTarFile Objects\nTarInfo Objects\nExtraction filters\nDefault named filters\nFilter errors\nHints for further verification\nSupporting older Python versions\nStateful extraction filter example\nCommand-Line Interface\nCommand-line options\nExamples\nReading examples\nWriting examples\nSupported tar formats\nUnicode issues\nFile Formats\ncsv\n— CSV File Reading and Writing\nModule Contents\nDialects and Formatting Parameters\nReader Objects\nWriter Objects\nExamples\nconfigparser\n— Configuration file parser\nQuick Start\nSupported Datatypes\nFallback Values\nSupported INI File Structure\nUnnamed Sections\nInterpolation of values\nMapping Protocol Access\nCustomizing Parser Behaviour\nLegacy API Examples\nConfigParser Objects\nRawConfigParser Objects\nExceptions\ntomllib\n— Parse TOML files\nExamples\nConversion Table\nnetrc\n— netrc file processing\nnetrc Objects\nplistlib\n— Generate and parse Apple\n.plist\nfiles\nExamples\nCryptographic Services\nhashlib\n— Secure hashes and message digests\nHash algorithms\nUsage\nConstructors\nAttributes\nHash Objects\nSHAKE variable length digests\nFile hashing\nKey derivation\nBLAKE2\nCreating hash objects\nConstants\nExamples\nSimple hashing\nUsing different digest sizes\nKeyed hashing\nRandomized hashing\nPersonalization\nTree mode\nCredits\nhmac\n— Keyed-Hashing for Message Authentication\nsecrets\n— Generate secure random numbers for managing secrets\nRandom numbers\nGenerating tokens\nHow many bytes should tokens use?\nOther functions\nRecipes and best practices\nGeneric Operating System Services\nos\n— Miscellaneous operating system interfaces\nFile Names, Command Line Arguments, and Environment Variables\nPython UTF-8 Mode\nProcess Parameters\nFile Object Creation\nFile Descriptor Operations\nQuerying the size of a terminal\nInheritance of File Descriptors\nFiles and Directories\nTimer File Descriptors\nLinux extended attributes\nProcess Management\nInterface to the scheduler\nMiscellaneous System Information\nRandom numbers\nio\n— Core tools for working with streams\nOverview\nText I/O\nBinary I/O\nRaw I/O\nText Encoding\nOpt-in EncodingWarning\nHigh-level Module Interface\nClass hierarchy\nI/O Base Classes\nRaw File I/O\nBuffered Streams\nText I/O\nPerformance\nBinary I/O\nText I/O\nMulti-threading\nReentrancy\ntime\n— Time access and conversions\nFunctions\nClock ID Constants\nTimezone Constants\nlogging\n— Logging facility for Python\nLogger Objects\nLogging Levels\nHandler Objects\nFormatter Objects\nFilter Objects\nLogRecord Objects\nLogRecord attributes\nLoggerAdapter Objects\nThread Safety\nModule-Level Functions\nModule-Level Attributes\nIntegration with the warnings module\nlogging.config\n— Logging configuration\nConfiguration functions\nSecurity considerations\nConfiguration dictionary schema\nDictionary Schema Details\nIncremental Configuration\nObject connections\nUser-defined objects\nHandler configuration order\nAccess to external objects\nAccess to internal objects\nImport resolution and custom importers\nConfiguring QueueHandler and QueueListener\nConfiguration file format\nlogging.handlers\n— Logging handlers\nStreamHandler\nFileHandler\nNullHandler\nWatchedFileHandler\nBaseRotatingHandler\nRotatingFileHandler\nTimedRotatingFileHandler\nSocketHandler\nDatagramHandler\nSysLogHandler\nNTEventLogHandler\nSMTPHandler\nMemoryHandler\nHTTPHandler\nQueueHandler\nQueueListener\nplatform\n—  Access to underlying platform’s identifying data\nCross platform\nJava platform\nWindows platform\nmacOS platform\niOS platform\nUnix platforms\nLinux platforms\nAndroid platform\nCommand-line usage\nerrno\n— Standard errno system symbols\nctypes\n— A foreign function library for Python\nctypes tutorial\nLoading dynamic link libraries\nAccessing functions from loaded dlls\nCalling functions\nFundamental data types\nCalling functions, continued\nCalling variadic functions\nCalling functions with your own custom data types\nSpecifying the required argument types (function prototypes)\nReturn types\nPassing pointers (or: passing parameters by reference)\nStructures and unions\nStructure/union alignment and byte order\nBit fields in structures and unions\nArrays\nPointers\nType conversions\nIncomplete Types\nCallback functions\nAccessing values exported from dlls\nSurprises\nVariable-sized data types\nctypes reference\nFinding shared libraries\nLoading shared libraries\nForeign functions\nFunction prototypes\nUtility functions\nData types\nFundamental data types\nStructured data types\nArrays and pointers\nCommand Line Interface Libraries\nargparse\n— Parser for command-line options, arguments and subcommands\nArgumentParser objects\nprog\nusage\ndescription\nepilog\nparents\nformatter_class\nprefix_chars\nfromfile_prefix_chars\nargument_default\nallow_abbrev\nconflict_handler\nadd_help\nexit_on_error\nThe add_argument() method\nname or flags\naction\nnargs\nconst\ndefault\ntype\nchoices\nrequired\nhelp\nmetavar\ndest\ndeprecated\nAction classes\nThe parse_args() method\nOption value syntax\nInvalid arguments\nArguments containing\n-\nArgument abbreviations (prefix matching)\nBeyond\nsys.argv\nThe Namespace object\nOther utilities\nSub-commands\nFileType objects\nArgument groups\nMutual exclusion\nParser defaults\nPrinting help\nPartial parsing\nCustomizing file parsing\nExiting methods\nIntermixed parsing\nRegistering custom types or actions\nExceptions\nArgparse Tutorial\nConcepts\nThe basics\nIntroducing Positional arguments\nIntroducing Optional arguments\nShort options\nCombining Positional and Optional arguments\nGetting a little more advanced\nSpecifying ambiguous arguments\nConflicting options\nHow to translate the argparse output\nCustom type converters\nConclusion\nMigrating\noptparse\ncode to\nargparse\noptparse\n— Parser for command line options\nChoosing an argument parsing library\nIntroduction\nBackground\nTerminology\nWhat are options for?\nWhat are positional arguments for?\nTutorial\nUnderstanding option actions\nThe store action\nHandling boolean (flag) options\nOther actions\nDefault values\nGenerating help\nGrouping Options\nPrinting a version string\nHow\noptparse\nhandles errors\nPutting it all together\nReference Guide\nCreating the parser\nPopulating the parser\nDefining options\nOption attributes\nStandard option actions\nStandard option types\nParsing arguments\nQuerying and manipulating your option parser\nConflicts between options\nCleanup\nOther methods\nOption Callbacks\nDefining a callback option\nHow callbacks are called\nRaising errors in a callback\nCallback example 1: trivial callback\nCallback example 2: check option order\nCallback example 3: check option order (generalized)\nCallback example 4: check arbitrary condition\nCallback example 5: fixed arguments\nCallback example 6: variable arguments\nExtending\noptparse\nAdding new types\nAdding new actions\nExceptions\ngetpass\n— Portable password input\nfileinput\n— Iterate over lines from multiple input streams\ncurses\n— Terminal handling for character-cell displays\nFunctions\nWindow Objects\nConstants\ncurses.textpad\n— Text input widget for curses programs\nTextbox objects\ncurses.ascii\n— Utilities for ASCII characters\ncurses.panel\n— A panel stack extension for curses\nFunctions\nPanel Objects\nConcurrent Execution\nthreading\n— Thread-based parallelism\nIntroduction\nGIL and performance considerations\nReference\nThread-local data\nThread objects\nLock objects\nRLock objects\nCondition objects\nSemaphore objects\nSemaphore\nexample\nEvent objects\nTimer objects\nBarrier objects\nUsing locks, conditions, and semaphores in the\nwith\nstatement\nmultiprocessing\n— Process-based parallelism\nIntroduction\nThe\nProcess\nclass\nContexts and start methods\nExchanging objects between processes\nSynchronization between processes\nSharing state between processes\nUsing a pool of workers\nReference\nProcess\nand exceptions\nPipes and Queues\nMiscellaneous\nConnection Objects\nSynchronization primitives\nShared\nctypes\nObjects\nThe\nmultiprocessing.sharedctypes\nmodule\nManagers\nCustomized managers\nUsing a remote manager\nProxy Objects\nCleanup\nProcess Pools\nListeners and Clients\nAddress Formats\nAuthentication keys\nLogging\nThe\nmultiprocessing.dummy\nmodule\nProgramming guidelines\nAll start methods\nThe\nspawn\nand\nforkserver\nstart methods\nExamples\nmultiprocessing.shared_memory\n— Shared memory for direct access across processes\nThe\nconcurrent\npackage\nconcurrent.futures\n— Launching parallel tasks\nExecutor Objects\nThreadPoolExecutor\nThreadPoolExecutor Example\nProcessPoolExecutor\nProcessPoolExecutor Example\nFuture Objects\nModule Functions\nException classes\nsubprocess\n— Subprocess management\nUsing the\nsubprocess\nModule\nFrequently Used Arguments\nPopen Constructor\nExceptions\nSecurity Considerations\nPopen Objects\nWindows Popen Helpers\nWindows Constants\nOlder high-level API\nReplacing Older Functions with the\nsubprocess\nModule\nReplacing\n/bin/sh\nshell command substitution\nReplacing shell pipeline\nReplacing\nos.system()\nReplacing the\nos.spawn\nfamily\nReplacing\nos.popen()\n,\nos.popen2()\n,\nos.popen3()\nReplacing functions from the\npopen2\nmodule\nLegacy Shell Invocation Functions\nNotes\nTimeout Behavior\nConverting an argument sequence to a string on Windows\nDisabling use of\nvfork()\nor\nposix_spawn()\nsched\n— Event scheduler\nScheduler Objects\nqueue\n— A synchronized queue class\nQueue Objects\nWaiting for task completion\nTerminating queues\nSimpleQueue Objects\ncontextvars\n— Context Variables\nContext Variables\nManual Context Management\nasyncio support\n_thread\n— Low-level threading API\nNetworking and Interprocess Communication\nasyncio\n— Asynchronous I/O\nRunners\nRunning an asyncio Program\nRunner context manager\nHandling Keyboard Interruption\nCoroutines and Tasks\nCoroutines\nAwaitables\nCreating Tasks\nTask Cancellation\nTask Groups\nTerminating a Task Group\nSleeping\nRunning Tasks Concurrently\nEager Task Factory\nShielding From Cancellation\nTimeouts\nWaiting Primitives\nRunning in Threads\nScheduling From Other Threads\nIntrospection\nTask Object\nStreams\nStreamReader\nStreamWriter\nExamples\nTCP echo client using streams\nTCP echo server using streams\nGet HTTP headers\nRegister an open socket to wait for data using streams\nSynchronization Primitives\nLock\nEvent\nCondition\nSemaphore\nBoundedSemaphore\nBarrier\nSubprocesses\nCreating Subprocesses\nConstants\nInteracting with Subprocesses\nSubprocess and Threads\nExamples\nQueues\nQueue\nPriority Queue\nLIFO Queue\nExceptions\nExamples\nExceptions\nEvent Loop\nEvent Loop Methods\nRunning and stopping the loop\nScheduling callbacks\nScheduling delayed callbacks\nCreating Futures and Tasks\nOpening network connections\nCreating network servers\nTransferring files\nTLS Upgrade\nWatching file descriptors\nWorking with socket objects directly\nDNS\nWorking with pipes\nUnix signals\nExecuting code in thread or process pools\nError Handling API\nEnabling debug mode\nRunning Subprocesses\nCallback Handles\nServer Objects\nEvent Loop Implementations\nExamples\nHello World with call_soon()\nDisplay the current date with call_later()\nWatch a file descriptor for read events\nSet signal handlers for SIGINT and SIGTERM\nFutures\nFuture Functions\nFuture Object\nTransports and Protocols\nTransports\nTransports Hierarchy\nBase Transport\nRead-only Transports\nWrite-only Transports\nDatagram Transports\nSubprocess Transports\nProtocols\nBase Protocols\nBase Protocol\nStreaming Protocols\nBuffered Streaming Protocols\nDatagram Protocols\nSubprocess Protocols\nExamples\nTCP Echo Server\nTCP Echo Client\nUDP Echo Server\nUDP Echo Client\nConnecting Existing Sockets\nloop.subprocess_exec() and SubprocessProtocol\nPolicies\nGetting and Setting the Policy\nPolicy Objects\nProcess Watchers\nCustom Policies\nPlatform Support\nAll Platforms\nWindows\nSubprocess Support on Windows\nmacOS\nExtending\nWriting a Custom Event Loop\nFuture and Task private constructors\nTask lifetime support\nHigh-level API Index\nTasks\nQueues\nSubprocesses\nStreams\nSynchronization\nExceptions\nLow-level API Index\nObtaining the Event Loop\nEvent Loop Methods\nTransports\nProtocols\nEvent Loop Policies\nDeveloping with asyncio\nDebug Mode\nConcurrency and Multithreading\nRunning Blocking Code\nLogging\nDetect never-awaited coroutines\nDetect never-retrieved exceptions\nsocket\n— Low-level networking interface\nSocket families\nModule contents\nExceptions\nConstants\nFunctions\nCreating sockets\nOther functions\nSocket Objects\nNotes on socket timeouts\nTimeouts and the\nconnect\nmethod\nTimeouts and the\naccept\nmethod\nExample\nssl\n— TLS/SSL wrapper for socket objects\nFunctions, Constants, and Exceptions\nSocket creation\nContext creation\nExceptions\nRandom generation\nCertificate handling\nConstants\nSSL Sockets\nSSL Contexts\nCertificates\nCertificate chains\nCA certificates\nCombined key and certificate\nSelf-signed certificates\nExamples\nTesting for SSL support\nClient-side operation\nServer-side operation\nNotes on non-blocking sockets\nMemory BIO Support\nSSL session\nSecurity considerations\nBest defaults\nManual settings\nVerifying certificates\nProtocol versions\nCipher selection\nMulti-processing\nTLS 1.3\nselect\n— Waiting for I/O completion\n/dev/poll\nPolling Objects\nEdge and Level Trigger Polling (epoll) Objects\nPolling Objects\nKqueue Objects\nKevent Objects\nselectors\n— High-level I/O multiplexing\nIntroduction\nClasses\nExamples\nsignal\n— Set handlers for asynchronous events\nGeneral rules\nExecution of Python signal handlers\nSignals and threads\nModule contents\nExamples\nNote on SIGPIPE\nNote on Signal Handlers and Exceptions\nmmap\n— Memory-mapped file support\nMADV_* Constants\nMAP_* Constants\nInternet Data Handling\nemail\n— An email and MIME handling package\nemail.message\n: Representing an email message\nemail.parser\n: Parsing email messages\nFeedParser API\nParser API\nAdditional notes\nemail.generator\n: Generating MIME documents\nemail.policy\n: Policy Objects\nemail.errors\n: Exception and Defect classes\nemail.headerregistry\n: Custom Header Objects\nemail.contentmanager\n: Managing MIME Content\nContent Manager Instances\nemail\n: Examples\nemail.message.Message\n: Representing an email message using the\ncompat32\nAPI\nemail.mime\n: Creating email and MIME objects from scratch\nemail.header\n: Internationalized headers\nemail.charset\n: Representing character sets\nemail.encoders\n: Encoders\nemail.utils\n: Miscellaneous utilities\nemail.iterators\n: Iterators\njson\n— JSON encoder and decoder\nBasic Usage\nEncoders and Decoders\nExceptions\nStandard Compliance and Interoperability\nCharacter Encodings\nInfinite and NaN Number Values\nRepeated Names Within an Object\nTop-level Non-Object, Non-Array Values\nImplementation Limitations\nCommand Line Interface\nCommand line options\nmailbox\n— Manipulate mailboxes in various formats\nMailbox\nobjects\nMaildir\nobjects\nmbox\nobjects\nMH\nobjects\nBabyl\nobjects\nMMDF\nobjects\nMessage\nobjects\nMaildirMessage\nobjects\nmboxMessage\nobjects\nMHMessage\nobjects\nBabylMessage\nobjects\nMMDFMessage\nobjects\nExceptions\nExamples\nmimetypes\n— Map filenames to MIME types\nMimeTypes Objects\nbase64\n— Base16, Base32, Base64, Base85 Data Encodings\nRFC 4648 Encodings\nBase85 Encodings\nLegacy Interface\nSecurity Considerations\nbinascii\n— Convert between binary and ASCII\nquopri\n— Encode and decode MIME quoted-printable data\nStructured Markup Processing Tools\nhtml\n— HyperText Markup Language support\nhtml.parser\n— Simple HTML and XHTML parser\nExample HTML Parser Application\nHTMLParser\nMethods\nExamples\nhtml.entities\n— Definitions of HTML general entities\nXML Processing Modules\nXML security\nxml.etree.ElementTree\n— The ElementTree XML API\nTutorial\nXML tree and elements\nParsing XML\nPull API for non-blocking parsing\nFinding interesting elements\nModifying an XML File\nBuilding XML documents\nParsing XML with Namespaces\nXPath support\nExample\nSupported XPath syntax\nReference\nFunctions\nXInclude support\nExample\nReference\nFunctions\nElement Objects\nElementTree Objects\nQName Objects\nTreeBuilder Objects\nXMLParser Objects\nXMLPullParser Objects\nExceptions\nxml.dom\n— The Document Object Model API\nModule Contents\nObjects in the DOM\nDOMImplementation Objects\nNode Objects\nNodeList Objects\nDocumentType Objects\nDocument Objects\nElement Objects\nAttr Objects\nNamedNodeMap Objects\nComment Objects\nText and CDATASection Objects\nProcessingInstruction Objects\nExceptions\nConformance\nType Mapping\nAccessor Methods\nxml.dom.minidom\n— Minimal DOM implementation\nDOM Objects\nDOM Example\nminidom and the DOM standard\nxml.dom.pulldom\n— Support for building partial DOM trees\nDOMEventStream Objects\nxml.sax\n— Support for SAX2 parsers\nSAXException Objects\nxml.sax.handler\n— Base classes for SAX handlers\nContentHandler Objects\nDTDHandler Objects\nEntityResolver Objects\nErrorHandler Objects\nLexicalHandler Objects\nxml.sax.saxutils\n— SAX Utilities\nxml.sax.xmlreader\n— Interface for XML parsers\nXMLReader Objects\nIncrementalParser Objects\nLocator Objects\nInputSource Objects\nThe\nAttributes\nInterface\nThe\nAttributesNS\nInterface\nxml.parsers.expat\n— Fast XML parsing using Expat\nXMLParser Objects\nExpatError Exceptions\nExample\nContent Model Descriptions\nExpat error constants\nInternet Protocols and Support\nwebbrowser\n— Convenient web-browser controller\nBrowser Controller Objects\nwsgiref\n— WSGI Utilities and Reference Implementation\nwsgiref.util\n– WSGI environment utilities\nwsgiref.headers\n– WSGI response header tools\nwsgiref.simple_server\n– a simple WSGI HTTP server\nwsgiref.validate\n— WSGI conformance checker\nwsgiref.handlers\n– server/gateway base classes\nwsgiref.types\n– WSGI types for static type checking\nExamples\nurllib\n— URL handling modules\nurllib.request\n— Extensible library for opening URLs\nRequest Objects\nOpenerDirector Objects\nBaseHandler Objects\nHTTPRedirectHandler Objects\nHTTPCookieProcessor Objects\nProxyHandler Objects\nHTTPPasswordMgr Objects\nHTTPPasswordMgrWithPriorAuth Objects\nAbstractBasicAuthHandler Objects\nHTTPBasicAuthHandler Objects\nProxyBasicAuthHandler Objects\nAbstractDigestAuthHandler Objects\nHTTPDigestAuthHandler Objects\nProxyDigestAuthHandler Objects\nHTTPHandler Objects\nHTTPSHandler Objects\nFileHandler Objects\nDataHandler Objects\nFTPHandler Objects\nCacheFTPHandler Objects\nUnknownHandler Objects\nHTTPErrorProcessor Objects\nExamples\nLegacy interface\nurllib.request\nRestrictions\nurllib.response\n— Response classes used by urllib\nurllib.parse\n— Parse URLs into components\nURL Parsing\nURL parsing security\nParsing ASCII Encoded Bytes\nStructured Parse Results\nURL Quoting\nurllib.error\n— Exception classes raised by urllib.request\nurllib.robotparser\n—  Parser for robots.txt\nhttp\n— HTTP modules\nHTTP status codes\nHTTP status category\nHTTP methods\nhttp.client\n— HTTP protocol client\nHTTPConnection Objects\nHTTPResponse Objects\nExamples\nHTTPMessage Objects\nftplib\n— FTP protocol client\nReference\nFTP objects\nFTP_TLS objects\nModule variables\npoplib\n— POP3 protocol client\nPOP3 Objects\nPOP3 Example\nimaplib\n— IMAP4 protocol client\nIMAP4 Objects\nIMAP4 Example\nsmtplib\n— SMTP protocol client\nSMTP Objects\nSMTP Example\nuuid\n— UUID objects according to\nRFC 4122\nCommand-Line Usage\nExample\nCommand-Line Example\nsocketserver\n— A framework for network servers\nServer Creation Notes\nServer Objects\nRequest Handler Objects\nExamples\nsocketserver.TCPServer\nExample\nsocketserver.UDPServer\nExample\nAsynchronous Mixins\nhttp.server\n— HTTP servers\nCommand-line interface\nSecurity considerations\nhttp.cookies\n— HTTP state management\nCookie Objects\nMorsel Objects\nExample\nhttp.cookiejar\n— Cookie handling for HTTP clients\nCookieJar and FileCookieJar Objects\nFileCookieJar subclasses and co-operation with web browsers\nCookiePolicy Objects\nDefaultCookiePolicy Objects\nCookie Objects\nExamples\nxmlrpc\n— XMLRPC server and client modules\nxmlrpc.client\n— XML-RPC client access\nServerProxy Objects\nDateTime Objects\nBinary Objects\nFault Objects\nProtocolError Objects\nMultiCall Objects\nConvenience Functions\nExample of Client Usage\nExample of Client and Server Usage\nxmlrpc.server\n— Basic XML-RPC servers\nSimpleXMLRPCServer Objects\nSimpleXMLRPCServer Example\nCGIXMLRPCRequestHandler\nDocumenting XMLRPC server\nDocXMLRPCServer Objects\nDocCGIXMLRPCRequestHandler\nipaddress\n— IPv4/IPv6 manipulation library\nConvenience factory functions\nIP Addresses\nAddress objects\nConversion to Strings and Integers\nOperators\nComparison operators\nArithmetic operators\nIP Network definitions\nPrefix, net mask and host mask\nNetwork objects\nOperators\nLogical operators\nIteration\nNetworks as containers of addresses\nInterface objects\nOperators\nLogical operators\nOther Module Level Functions\nCustom Exceptions\nMultimedia Services\nwave\n— Read and write WAV files\nWave_read Objects\nWave_write Objects\ncolorsys\n— Conversions between color systems\nInternationalization\ngettext\n— Multilingual internationalization services\nGNU\ngettext\nAPI\nClass-based API\nThe\nNullTranslations\nclass\nThe\nGNUTranslations\nclass\nSolaris message catalog support\nThe Catalog constructor\nInternationalizing your programs and modules\nLocalizing your module\nLocalizing your application\nChanging languages on the fly\nDeferred translations\nAcknowledgements\nlocale\n— Internationalization services\nBackground, details, hints, tips and caveats\nFor extension writers and programs that embed Python\nAccess to message catalogs\nProgram Frameworks\nturtle\n— Turtle graphics\nIntroduction\nGet started\nTutorial\nStarting a turtle environment\nBasic drawing\nPen control\nThe turtle’s position\nMaking algorithmic patterns\nHow to…\nGet started as quickly as possible\nUse the\nturtle\nmodule namespace\nUse turtle graphics in a script\nUse object-oriented turtle graphics\nTurtle graphics reference\nTurtle methods\nMethods of TurtleScreen/Screen\nMethods of RawTurtle/Turtle and corresponding functions\nTurtle motion\nTell Turtle’s state\nSettings for measurement\nPen control\nDrawing state\nColor control\nFilling\nMore drawing control\nTurtle state\nVisibility\nAppearance\nUsing events\nSpecial Turtle methods\nCompound shapes\nMethods of TurtleScreen/Screen and corresponding functions\nWindow control\nAnimation control\nUsing screen events\nInput methods\nSettings and special methods\nMethods specific to Screen, not inherited from TurtleScreen\nPublic classes\nExplanation\nHelp and configuration\nHow to use help\nTranslation of docstrings into different languages\nHow to configure Screen and Turtles\nturtledemo\n— Demo scripts\nChanges since Python 2.6\nChanges since Python 3.0\ncmd\n— Support for line-oriented command interpreters\nCmd Objects\nCmd Example\nshlex\n— Simple lexical analysis\nshlex Objects\nParsing Rules\nImproved Compatibility with Shells\nGraphical User Interfaces with Tk\ntkinter\n— Python interface to Tcl/Tk\nArchitecture\nTkinter Modules\nTkinter Life Preserver\nA Hello World Program\nImportant Tk Concepts\nUnderstanding How Tkinter Wraps Tcl/Tk\nHow do I…? What option does…?\nNavigating the Tcl/Tk Reference Manual\nThreading model\nHandy Reference\nSetting Options\nThe Packer\nPacker Options\nCoupling Widget Variables\nThe Window Manager\nTk Option Data Types\nBindings and Events\nThe index Parameter\nImages\nFile Handlers\ntkinter.colorchooser\n— Color choosing dialog\ntkinter.font\n— Tkinter font wrapper\nTkinter Dialogs\ntkinter.simpledialog\n— Standard Tkinter input dialogs\ntkinter.filedialog\n— File selection dialogs\nNative Load/Save Dialogs\ntkinter.commondialog\n— Dialog window templates\ntkinter.messagebox\n— Tkinter message prompts\ntkinter.scrolledtext\n— Scrolled Text Widget\ntkinter.dnd\n— Drag and drop support\ntkinter.ttk\n— Tk themed widgets\nUsing Ttk\nTtk Widgets\nWidget\nStandard Options\nScrollable Widget Options\nLabel Options\nCompatibility Options\nWidget States\nttk.Widget\nCombobox\nOptions\nVirtual events\nttk.Combobox\nSpinbox\nOptions\nVirtual events\nttk.Spinbox\nNotebook\nOptions\nTab Options\nTab Identifiers\nVirtual Events\nttk.Notebook\nProgressbar\nOptions\nttk.Progressbar\nSeparator\nOptions\nSizegrip\nPlatform-specific notes\nBugs\nTreeview\nOptions\nItem Options\nTag Options\nColumn Identifiers\nVirtual Events\nttk.Treeview\nTtk Styling\nLayouts\nIDLE — Python editor and shell\nMenus\nFile menu (Shell and Editor)\nEdit menu (Shell and Editor)\nFormat menu (Editor window only)\nRun menu (Editor window only)\nShell menu (Shell window only)\nDebug menu (Shell window only)\nOptions menu (Shell and Editor)\nWindow menu (Shell and Editor)\nHelp menu (Shell and Editor)\nContext menus\nEditing and Navigation\nEditor windows\nKey bindings\nAutomatic indentation\nSearch and Replace\nCompletions\nCalltips\nCode Context\nShell window\nText colors\nStartup and Code Execution\nCommand line usage\nStartup failure\nRunning user code\nUser output in Shell\nDeveloping tkinter applications\nRunning without a subprocess\nHelp and Preferences\nHelp sources\nSetting preferences\nIDLE on macOS\nExtensions\nidlelib — implementation of IDLE application\nDevelopment Tools\ntyping\n— Support for type hints\nSpecification for the Python Type System\nType aliases\nNewType\nAnnotating callable objects\nGenerics\nAnnotating tuples\nThe type of class objects\nAnnotating generators and coroutines\nUser-defined generic types\nThe\nAny\ntype\nNominal vs structural subtyping\nModule contents\nSpecial typing primitives\nSpecial types\nSpecial forms\nBuilding generic types and type aliases\nOther special directives\nProtocols\nABCs for working with IO\nFunctions and decorators\nIntrospection helpers\nConstant\nDeprecated aliases\nAliases to built-in types\nAliases to types in\ncollections\nAliases to other concrete types\nAliases to container ABCs in\ncollections.abc\nAliases to asynchronous ABCs in\ncollections.abc\nAliases to other ABCs in\ncollections.abc\nAliases to\ncontextlib\nABCs\nDeprecation Timeline of Major Features\npydoc\n— Documentation generator and online help system\nPython Development Mode\nEffects of the Python Development Mode\nResourceWarning Example\nBad file descriptor error example\ndoctest\n— Test interactive Python examples\nSimple Usage: Checking Examples in Docstrings\nSimple Usage: Checking Examples in a Text File\nCommand-line Usage\nHow It Works\nWhich Docstrings Are Examined?\nHow are Docstring Examples Recognized?\nWhat’s the Execution Context?\nWhat About Exceptions?\nOption Flags\nDirectives\nWarnings\nBasic API\nUnittest API\nAdvanced API\nDocTest Objects\nExample Objects\nDocTestFinder objects\nDocTestParser objects\nTestResults objects\nDocTestRunner objects\nOutputChecker objects\nDebugging\nSoapbox\nunittest\n— Unit testing framework\nBasic example\nCommand-Line Interface\nCommand-line options\nTest Discovery\nOrganizing test code\nRe-using old test code\nSkipping tests and expected failures\nDistinguishing test iterations using subtests\nClasses and functions\nTest cases\nGrouping tests\nLoading and running tests\nload_tests Protocol\nClass and Module Fixtures\nsetUpClass and tearDownClass\nsetUpModule and tearDownModule\nSignal Handling\nunittest.mock\n— mock object library\nQuick Guide\nThe Mock Class\nCalling\nDeleting Attributes\nMock names and the name attribute\nAttaching Mocks as Attributes\nThe patchers\npatch\npatch.object\npatch.dict\npatch.multiple\npatch methods: start and stop\npatch builtins\nTEST_PREFIX\nNesting Patch Decorators\nWhere to patch\nPatching Descriptors and Proxy Objects\nMagicMock and magic method support\nMocking Magic Methods\nMagic Mock\nHelpers\nsentinel\nDEFAULT\ncall\ncreate_autospec\nANY\nFILTER_DIR\nmock_open\nAutospeccing\nSealing mocks\nOrder of precedence of\nside_effect\n,\nreturn_value\nand\nwraps\nunittest.mock\n— getting started\nUsing Mock\nMock Patching Methods\nMock for Method Calls on an Object\nMocking Classes\nNaming your mocks\nTracking all Calls\nSetting Return Values and Attributes\nRaising exceptions with mocks\nSide effect functions and iterables\nMocking asynchronous iterators\nMocking asynchronous context manager\nCreating a Mock from an Existing Object\nUsing side_effect to return per file content\nPatch Decorators\nFurther Examples\nMocking chained calls\nPartial mocking\nMocking a Generator Method\nApplying the same patch to every test method\nMocking Unbound Methods\nChecking multiple calls with mock\nCoping with mutable arguments\nNesting Patches\nMocking a dictionary with MagicMock\nMock subclasses and their attributes\nMocking imports with patch.dict\nTracking order of calls and less verbose call assertions\nMore complex argument matching\ntest\n— Regression tests package for Python\nWriting Unit Tests for the\ntest\npackage\nRunning tests using the command-line interface\ntest.support\n— Utilities for the Python test suite\ntest.support.socket_helper\n— Utilities for socket tests\ntest.support.script_helper\n— Utilities for the Python execution tests\ntest.support.bytecode_helper\n— Support tools for testing correct bytecode generation\ntest.support.threading_helper\n— Utilities for threading tests\ntest.support.os_helper\n— Utilities for os tests\ntest.support.import_helper\n— Utilities for import tests\ntest.support.warnings_helper\n— Utilities for warnings tests\nDebugging and Profiling\nAudit events table\nbdb\n— Debugger framework\nfaulthandler\n— Dump the Python traceback\nDumping the traceback\nFault handler state\nDumping the tracebacks after a timeout\nDumping the traceback on a user signal\nIssue with file descriptors\nExample\npdb\n— The Python Debugger\nDebugger Commands\nThe Python Profilers\nIntroduction to the profilers\nInstant User’s Manual\nprofile\nand\ncProfile\nModule Reference\nThe\nStats\nClass\nWhat Is Deterministic Profiling?\nLimitations\nCalibration\nUsing a custom timer\ntimeit\n— Measure execution time of small code snippets\nBasic Examples\nPython Interface\nCommand-Line Interface\nExamples\ntrace\n— Trace or track Python statement execution\nCommand-Line Usage\nMain options\nModifiers\nFilters\nProgrammatic Interface\ntracemalloc\n— Trace memory allocations\nExamples\nDisplay the top 10\nCompute differences\nGet the traceback of a memory block\nPretty top\nRecord the current and peak size of all traced memory blocks\nAPI\nFunctions\nDomainFilter\nFilter\nFrame\nSnapshot\nStatistic\nStatisticDiff\nTrace\nTraceback\nSoftware Packaging and Distribution\nensurepip\n— Bootstrapping the\npip\ninstaller\nCommand line interface\nModule API\nvenv\n— Creation of virtual environments\nCreating virtual environments\nHow venvs work\nAPI\nAn example of extending\nEnvBuilder\nzipapp\n— Manage executable Python zip archives\nBasic Example\nCommand-Line Interface\nPython API\nExamples\nSpecifying the Interpreter\nCreating Standalone Applications with zipapp\nCaveats\nThe Python Zip Application Archive Format\nPython Runtime Services\nsys\n— System-specific parameters and functions\nsys.monitoring\n— Execution event monitoring\nTool identifiers\nRegistering and using tools\nEvents\nLocal events\nAncillary events\nOther events\nThe STOP_ITERATION event\nTurning events on and off\nSetting events globally\nPer code object events\nDisabling events\nRegistering callback functions\nCallback function arguments\nsysconfig\n— Provide access to Python’s configuration information\nConfiguration variables\nInstallation paths\nUser scheme\nposix_user\nnt_user\nosx_framework_user\nHome scheme\nposix_home\nPrefix scheme\nposix_prefix\nnt\nInstallation path functions\nOther functions\nCommand-line usage\nbuiltins\n— Built-in objects\n__main__\n— Top-level code environment\n__name__\n==\n'__main__'\nWhat is the “top-level code environment”?\nIdiomatic Usage\nPackaging Considerations\n__main__.py\nin Python Packages\nIdiomatic Usage\nimport\n__main__\nwarnings\n— Warning control\nWarning Categories\nThe Warnings Filter\nRepeated Warning Suppression Criteria\nDescribing Warning Filters\nDefault Warning Filter\nOverriding the default filter\nTemporarily Suppressing Warnings\nTesting Warnings\nUpdating Code For New Versions of Dependencies\nAvailable Functions\nAvailable Context Managers\ndataclasses\n— Data Classes\nModule contents\nPost-init processing\nClass variables\nInit-only variables\nFrozen instances\nInheritance\nRe-ordering of keyword-only parameters in\n__init__()\nDefault factory functions\nMutable default values\nDescriptor-typed fields\ncontextlib\n— Utilities for\nwith\n-statement contexts\nUtilities\nExamples and Recipes\nSupporting a variable number of context managers\nCatching exceptions from\n__enter__\nmethods\nCleaning up in an\n__enter__\nimplementation\nReplacing any use of\ntry-finally\nand flag variables\nUsing a context manager as a function decorator\nSingle use, reusable and reentrant context managers\nReentrant context managers\nReusable context managers\nabc\n— Abstract Base Classes\natexit\n— Exit handlers\natexit\nExample\ntraceback\n— Print or retrieve a stack traceback\nModule-Level Functions\nTracebackException\nObjects\nStackSummary\nObjects\nFrameSummary\nObjects\nExamples of Using the Module-Level Functions\nExamples of Using\nTracebackException\n__future__\n— Future statement definitions\nModule Contents\ngc\n— Garbage Collector interface\ninspect\n— Inspect live objects\nTypes and members\nRetrieving source code\nIntrospecting callables with the Signature object\nClasses and functions\nThe interpreter stack\nFetching attributes statically\nCurrent State of Generators, Coroutines, and Asynchronous Generators\nCode Objects Bit Flags\nBuffer flags\nCommand Line Interface\nsite\n— Site-specific configuration hook\nsitecustomize\nusercustomize\nReadline configuration\nModule contents\nCommand Line Interface\nCustom Python Interpreters\ncode\n— Interpreter base classes\nInteractive Interpreter Objects\nInteractive Console Objects\ncodeop\n— Compile Python code\nImporting Modules\nzipimport\n— Import modules from Zip archives\nzipimporter Objects\nExamples\npkgutil\n— Package extension utility\nmodulefinder\n— Find modules used by a script\nExample usage of\nModuleFinder\nrunpy\n— Locating and executing Python modules\nimportlib\n— The implementation of\nimport\nIntroduction\nFunctions\nimportlib.abc\n– Abstract base classes related to import\nimportlib.machinery\n– Importers and path hooks\nimportlib.util\n– Utility code for importers\nExamples\nImporting programmatically\nChecking if a module can be imported\nImporting a source file directly\nImplementing lazy imports\nSetting up an importer\nApproximating\nimportlib.import_module()\nimportlib.resources\n– Package resource reading, opening and access\nFunctional API\nimportlib.resources.abc\n– Abstract base classes for resources\nimportlib.metadata\n– Accessing package metadata\nOverview\nFunctional API\nEntry points\nDistribution metadata\nDistribution versions\nDistribution files\nDistribution requirements\nMapping import to distribution packages\nDistributions\nDistribution Discovery\nExtending the search algorithm\nExample\nThe initialization of the\nsys.path\nmodule search path\nVirtual environments\n_pth files\nEmbedded Python\nPython Language Services\nast\n— Abstract Syntax Trees\nAbstract Grammar\nNode classes\nRoot nodes\nLiterals\nVariables\nExpressions\nSubscripting\nComprehensions\nStatements\nImports\nControl flow\nPattern matching\nType annotations\nType parameters\nFunction and class definitions\nAsync and await\nast\nHelpers\nCompiler Flags\nCommand-Line Usage\nsymtable\n— Access to the compiler’s symbol tables\nGenerating Symbol Tables\nExamining Symbol Tables\nCommand-Line Usage\ntoken\n— Constants used with Python parse trees\nkeyword\n— Testing for Python keywords\ntokenize\n— Tokenizer for Python source\nTokenizing Input\nCommand-Line Usage\nExamples\ntabnanny\n— Detection of ambiguous indentation\npyclbr\n— Python module browser support\nFunction Objects\nClass Objects\npy_compile\n— Compile Python source files\nCommand-Line Interface\ncompileall\n— Byte-compile Python libraries\nCommand-line use\nPublic functions\ndis\n— Disassembler for Python bytecode\nCommand-line interface\nBytecode analysis\nAnalysis functions\nPython Bytecode Instructions\nOpcode collections\npickletools\n— Tools for pickle developers\nCommand line usage\nCommand line options\nProgrammatic Interface\nMS Windows Specific Services\nmsvcrt\n— Useful routines from the MS VC++ runtime\nFile Operations\nConsole I/O\nOther Functions\nwinreg\n— Windows registry access\nFunctions\nConstants\nHKEY_* Constants\nAccess Rights\n64-bit Specific\nValue Types\nRegistry Handle Objects\nwinsound\n— Sound-playing interface for Windows\nUnix Specific Services\nposix\n— The most common POSIX system calls\nLarge File Support\nNotable Module Contents\npwd\n— The password database\ngrp\n— The group database\ntermios\n— POSIX style tty control\nExample\ntty\n— Terminal control functions\npty\n— Pseudo-terminal utilities\nExample\nfcntl\n— The\nfcntl\nand\nioctl\nsystem calls\nresource\n— Resource usage information\nResource Limits\nResource Usage\nsyslog\n— Unix syslog library routines\nExamples\nSimple example\nModules command-line interface (CLI)\nSuperseded Modules\ngetopt\n— C-style parser for command line options\nRemoved Modules\nSecurity Considerations\nExtending and Embedding the Python Interpreter\nRecommended third party tools\nCreating extensions without third party tools\n1. Extending Python with C or C++\n1.1. A Simple Example\n1.2. Intermezzo: Errors and Exceptions\n1.3. Back to the Example\n1.4. The Module’s Method Table and Initialization Function\n1.5. Compilation and Linkage\n1.6. Calling Python Functions from C\n1.7. Extracting Parameters in Extension Functions\n1.8. Keyword Parameters for Extension Functions\n1.9. Building Arbitrary Values\n1.10. Reference Counts\n1.10.1. Reference Counting in Python\n1.10.2. Ownership Rules\n1.10.3. Thin Ice\n1.10.4. NULL Pointers\n1.11. Writing Extensions in C++\n1.12. Providing a C API for an Extension Module\n2. Defining Extension Types: Tutorial\n2.1. The Basics\n2.2. Adding data and methods to the Basic example\n2.3. Providing finer control over data attributes\n2.4. Supporting cyclic garbage collection\n2.5. Subclassing other types\n3. Defining Extension Types: Assorted Topics\n3.1. Finalization and De-allocation\n3.2. Object Presentation\n3.3. Attribute Management\n3.3.1. Generic Attribute Management\n3.3.2. Type-specific Attribute Management\n3.4. Object Comparison\n3.5. Abstract Protocol Support\n3.6. Weak Reference Support\n3.7. More Suggestions\n4. Building C and C++ Extensions\n4.1. Building C and C++ Extensions with setuptools\n5. Building C and C++ Extensions on Windows\n5.1. A Cookbook Approach\n5.2. Differences Between Unix and Windows\n5.3. Using DLLs in Practice\nEmbedding the CPython runtime in a larger application\n1. Embedding Python in Another Application\n1.1. Very High Level Embedding\n1.2. Beyond Very High Level Embedding: An overview\n1.3. Pure Embedding\n1.4. Extending Embedded Python\n1.5. Embedding Python in C++\n1.6. Compiling and Linking under Unix-like systems\nPython/C API Reference Manual\nIntroduction\nCoding standards\nInclude Files\nUseful macros\nObjects, Types and Reference Counts\nReference Counts\nReference Count Details\nTypes\nExceptions\nEmbedding Python\nDebugging Builds\nRecommended third party tools\nC API Stability\nUnstable C API\nStable Application Binary Interface\nLimited C API\nStable ABI\nLimited API Scope and Performance\nLimited API Caveats\nPlatform Considerations\nContents of Limited API\nThe Very High Level Layer\nReference Counting\nException Handling\nPrinting and clearing\nRaising exceptions\nIssuing warnings\nQuerying the error indicator\nSignal Handling\nException Classes\nException Objects\nUnicode Exception Objects\nRecursion Control\nException and warning types\nException types\nOSError aliases\nWarning types\nUtilities\nOperating System Utilities\nSystem Functions\nProcess Control\nImporting Modules\nData marshalling support\nParsing arguments and building values\nParsing arguments\nStrings and buffers\nNumbers\nOther objects\nAPI Functions\nBuilding values\nString conversion and formatting\nPyHash API\nReflection\nCodec registry and support functions\nCodec lookup API\nRegistry API for Unicode encoding error handlers\nPyTime C API\nTypes\nClock Functions\nRaw Clock Functions\nConversion functions\nSupport for Perf Maps\nAbstract Objects Layer\nObject Protocol\nCall Protocol\nThe\ntp_call\nProtocol\nThe Vectorcall Protocol\nRecursion Control\nVectorcall Support API\nObject Calling API\nCall Support API\nNumber Protocol\nSequence Protocol\nMapping Protocol\nIterator Protocol\nBuffer Protocol\nBuffer structure\nBuffer request types\nrequest-independent fields\nreadonly, format\nshape, strides, suboffsets\ncontiguity requests\ncompound requests\nComplex arrays\nNumPy-style: shape and strides\nPIL-style: shape, strides and suboffsets\nBuffer-related functions\nConcrete Objects Layer\nFundamental Objects\nType Objects\nCreating Heap-Allocated Types\nThe\nNone\nObject\nNumeric Objects\nInteger Objects\nBoolean Objects\nFloating-Point Objects\nPack and Unpack functions\nPack functions\nUnpack functions\nComplex Number Objects\nComplex Numbers as C Structures\nComplex Numbers as Python Objects\nSequence Objects\nBytes Objects\nByte Array Objects\nType check macros\nDirect API functions\nMacros\nUnicode Objects and Codecs\nUnicode Objects\nUnicode Type\nUnicode Character Properties\nCreating and accessing Unicode strings\nLocale Encoding\nFile System Encoding\nwchar_t Support\nBuilt-in Codecs\nGeneric Codecs\nUTF-8 Codecs\nUTF-32 Codecs\nUTF-16 Codecs\nUTF-7 Codecs\nUnicode-Escape Codecs\nRaw-Unicode-Escape Codecs\nLatin-1 Codecs\nASCII Codecs\nCharacter Map Codecs\nMBCS codecs for Windows\nMethods and Slot Functions\nTuple Objects\nStruct Sequence Objects\nList Objects\nContainer Objects\nDictionary Objects\nSet Objects\nFunction Objects\nFunction Objects\nInstance Method Objects\nMethod Objects\nCell Objects\nCode Objects\nExtra information\nOther Objects\nFile Objects\nModule Objects\nInitializing C modules\nSingle-phase initialization\nMulti-phase initialization\nLow-level module creation functions\nSupport functions\nModule lookup\nIterator Objects\nDescriptor Objects\nSlice Objects\nEllipsis Object\nMemoryView objects\nWeak Reference Objects\nCapsules\nFrame Objects\nFrame Locals Proxies\nInternal Frames\nGenerator Objects\nCoroutine Objects\nContext Variables Objects\nDateTime Objects\nObjects for Type Hinting\nInitialization, Finalization, and Threads\nBefore Python Initialization\nGlobal configuration variables\nInitializing and finalizing the interpreter\nProcess-wide parameters\nThread State and the Global Interpreter Lock\nReleasing the GIL from extension code\nNon-Python created threads\nCautions about fork()\nHigh-level API\nLow-level API\nSub-interpreter support\nA Per-Interpreter GIL\nBugs and caveats\nAsynchronous Notifications\nProfiling and Tracing\nReference tracing\nAdvanced Debugger Support\nThread Local Storage Support\nThread Specific Storage (TSS) API\nDynamic Allocation\nMethods\nThread Local Storage (TLS) API\nSynchronization Primitives\nPython Critical Section API\nPython Initialization Configuration\nExample\nPyWideStringList\nPyStatus\nPyPreConfig\nPreinitialize Python with PyPreConfig\nPyConfig\nInitialization with PyConfig\nIsolated Configuration\nPython Configuration\nPython Path Configuration\nPy_GetArgcArgv()\nMulti-Phase Initialization Private Provisional API\nMemory Management\nOverview\nAllocator Domains\nRaw Memory Interface\nMemory Interface\nObject allocators\nDefault Memory Allocators\nCustomize Memory Allocators\nDebug hooks on the Python memory allocators\nThe pymalloc allocator\nCustomize pymalloc Arena Allocator\nThe mimalloc allocator\ntracemalloc C API\nExamples\nObject Implementation Support\nAllocating Objects on the Heap\nCommon Object Structures\nBase object types and macros\nImplementing functions and methods\nAccessing attributes of extension types\nMember flags\nMember types\nDefining Getters and Setters\nType Object Structures\nQuick Reference\n“tp slots”\nsub-slots\nslot typedefs\nPyTypeObject Definition\nPyObject Slots\nPyVarObject Slots\nPyTypeObject Slots\nStatic Types\nHeap Types\nNumber Object Structures\nMapping Object Structures\nSequence Object Structures\nBuffer Object Structures\nAsync Object Structures\nSlot Type typedefs\nExamples\nSupporting Cyclic Garbage Collection\nControlling the Garbage Collector State\nQuerying Garbage Collector State\nAPI and ABI Versioning\nMonitoring C API\nGenerating Execution Events\nManaging the Monitoring State\nInstalling Python Modules\nKey terms\nBasic usage\nHow do I …?\n… install\npip\nin versions of Python prior to Python 3.4?\n… install packages just for the current user?\n… install scientific Python packages?\n… work with multiple versions of Python installed in parallel?\nCommon installation issues\nInstalling into the system Python on Linux\nPip not installed\nInstalling binary extensions\nPython HOWTOs\nPython Frequently Asked Questions\nGeneral Python FAQ\nGeneral Information\nPython in the real world\nProgramming FAQ\nGeneral Questions\nCore Language\nNumbers and strings\nPerformance\nSequences (Tuples/Lists)\nObjects\nModules\nDesign and History FAQ\nWhy does Python use indentation for grouping of statements?\nWhy am I getting strange results with simple arithmetic operations?\nWhy are floating-point calculations so inaccurate?\nWhy are Python strings immutable?\nWhy must ‘self’ be used explicitly in method definitions and calls?\nWhy can’t I use an assignment in an expression?\nWhy does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?\nWhy is join() a string method instead of a list or tuple method?\nHow fast are exceptions?\nWhy isn’t there a switch or case statement in Python?\nCan’t you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?\nWhy can’t lambda expressions contain statements?\nCan Python be compiled to machine code, C or some other language?\nHow does Python manage memory?\nWhy doesn’t CPython use a more traditional garbage collection scheme?\nWhy isn’t all memory freed when CPython exits?\nWhy are there separate tuple and list data types?\nHow are lists implemented in CPython?\nHow are dictionaries implemented in CPython?\nWhy must dictionary keys be immutable?\nWhy doesn’t list.sort() return the sorted list?\nHow do you specify and enforce an interface spec in Python?\nWhy is there no goto?\nWhy can’t raw strings (r-strings) end with a backslash?\nWhy doesn’t Python have a “with” statement for attribute assignments?\nWhy don’t generators support the with statement?\nWhy are colons required for the if/while/def/class statements?\nWhy does Python allow commas at the end of lists and tuples?\nLibrary and Extension FAQ\nGeneral Library Questions\nCommon tasks\nThreads\nInput and Output\nNetwork/Internet Programming\nDatabases\nMathematics and Numerics\nExtending/Embedding FAQ\nCan I create my own functions in C?\nCan I create my own functions in C++?\nWriting C is hard; are there any alternatives?\nHow can I execute arbitrary Python statements from C?\nHow can I evaluate an arbitrary Python expression from C?\nHow do I extract C values from a Python object?\nHow do I use Py_BuildValue() to create a tuple of arbitrary length?\nHow do I call an object’s method from C?\nHow do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?\nHow do I access a module written in Python from C?\nHow do I interface to C++ objects from Python?\nI added a module using the Setup file and the make fails; why?\nHow do I debug an extension?\nI want to compile a Python module on my Linux system, but some files are missing. Why?\nHow do I tell “incomplete input” from “invalid input”?\nHow do I find undefined g++ symbols __builtin_new or __pure_virtual?\nCan I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?\nPython on Windows FAQ\nHow do I run a Python program under Windows?\nHow do I make Python scripts executable?\nWhy does Python sometimes take so long to start?\nHow do I make an executable from a Python script?\nIs a\n*.pyd\nfile the same as a DLL?\nHow can I embed Python into a Windows application?\nHow do I keep editors from inserting tabs into my Python source?\nHow do I check for a keypress without blocking?\nHow do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll error?\nGraphic User Interface FAQ\nGeneral GUI Questions\nWhat GUI toolkits exist for Python?\nTkinter questions\n“Why is Python Installed on my Computer?” FAQ\nWhat is Python?\nWhy is Python installed on my machine?\nCan I delete Python?\nDeprecations\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nC API Deprecations\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending Removal in Future Versions\nGlossary\nAbout this documentation\nContributors to the Python documentation\nDealing with Bugs\nDocumentation bugs\nUsing the Python issue tracker\nGetting started contributing to Python yourself\nCopyright\nHistory and License\nHistory of the software\nTerms and conditions for accessing or otherwise using Python\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION\nLicenses and Acknowledgements for Incorporated Software\nMersenne Twister\nSockets\nAsynchronous socket services\nCookie management\nExecution tracing\nUUencode and UUdecode functions\nXML Remote Procedure Calls\ntest_epoll\nSelect kqueue\nSipHash24\nstrtod and dtoa\nOpenSSL\nexpat\nlibffi\nzlib\ncfuhash\nlibmpdec\nW3C C14N test suite\nmimalloc\nasyncio\nGlobal Unbounded Sequences (GUS)\nNext topic\nWhat’s New in Python\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Documentation contents\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/contents.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12352.6179613
  },
  {
    "title": "Index – M",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex – M\nM (in module re)\nmac_ver() (in module platform)\nMACHDEP\ncommand line option\nmachine() (in module platform)\nmacros (netrc.netrc attribute)\nMADV_AUTOSYNC (in module mmap)\nMADV_CORE (in module mmap)\nMADV_DODUMP (in module mmap)\nMADV_DOFORK (in module mmap)\nMADV_DONTDUMP (in module mmap)\nMADV_DONTFORK (in module mmap)\nMADV_DONTNEED (in module mmap)\nMADV_FREE (in module mmap)\nMADV_FREE_REUSABLE (in module mmap)\nMADV_FREE_REUSE (in module mmap)\nMADV_HUGEPAGE (in module mmap)\nMADV_HWPOISON (in module mmap)\nMADV_MERGEABLE (in module mmap)\nMADV_NOCORE (in module mmap)\nMADV_NOHUGEPAGE (in module mmap)\nMADV_NORMAL (in module mmap)\nMADV_NOSYNC (in module mmap)\nMADV_PROTECT (in module mmap)\nMADV_RANDOM (in module mmap)\nMADV_REMOVE (in module mmap)\nMADV_SEQUENTIAL (in module mmap)\nMADV_SOFT_OFFLINE (in module mmap)\nMADV_UNMERGEABLE (in module mmap)\nMADV_WILLNEED (in module mmap)\nmadvise() (mmap.mmap method)\nmagic\nmethod\nmagic method\nMAGIC_NUMBER (in module importlib.util)\nMagicMock (class in unittest.mock)\nmailbox\nmodule\nMailbox (class in mailbox)\nmailcap\nmodule\nMaildir (class in mailbox)\nMaildirMessage (class in mailbox)\nmain()\n,\n[1]\n,\n[2]\n(in module site)\n(in module unittest)\nmain_thread() (in module threading)\nmainloop() (in module turtle)\nmaintype (email.headerregistry.ContentTypeHeader attribute)\nmajor (email.headerregistry.MIMEVersionHeader attribute)\nmajor() (in module os)\nmake_alternative() (email.message.EmailMessage method)\nmake_archive() (in module shutil)\nmake_bad_fd() (in module test.support.os_helper)\nMAKE_CELL (opcode)\nmake_cookies() (http.cookiejar.CookieJar method)\nmake_dataclass() (in module dataclasses)\nmake_file() (difflib.HtmlDiff method)\nMAKE_FUNCTION (opcode)\nmake_header() (in module email.header)\nmake_legacy_pyc() (in module test.support.import_helper)\nmake_mixed() (email.message.EmailMessage method)\nmake_msgid() (in module email.utils)\nmake_parser() (in module xml.sax)\nmake_pkg() (in module test.support.script_helper)\nmake_related() (email.message.EmailMessage method)\nmake_script() (in module test.support.script_helper)\nmake_server() (in module wsgiref.simple_server)\nmake_table() (difflib.HtmlDiff method)\nmake_zip_pkg() (in module test.support.script_helper)\nmake_zip_script() (in module test.support.script_helper)\nmakedev() (in module os)\nmakedirs() (in module os)\nmakeelement() (xml.etree.ElementTree.Element method)\nmakefile() (socket method)\n(socket.socket method)\nmakeLogRecord() (in module logging)\nmakePickle() (logging.handlers.SocketHandler method)\nmakeRecord() (logging.Logger method)\nmakeSocket() (logging.handlers.DatagramHandler method)\n(logging.handlers.SocketHandler method)\nmaketrans() (bytearray static method)\n(bytes static method)\n(str static method)\nMalformedHeaderDefect\nmalloc (C function)\nmanager (logging.LoggerAdapter attribute)\nmangle_from_ (email.policy.Compat32 attribute)\n(email.policy.Policy attribute)\nmangling\nname\n,\n[1]\nMANPAGER\n,\n[1]\nmant_dig (sys.float_info attribute)\nmap()\nbuilt-in function\nmap() (concurrent.futures.Executor method)\n(multiprocessing.pool.Pool method)\n(tkinter.ttk.Style method)\nMAP_32BIT (in module mmap)\nMAP_ADD (opcode)\nMAP_ALIGNED_SUPER (in module mmap)\nMAP_ANON (in module mmap)\nMAP_ANONYMOUS (in module mmap)\nmap_async() (multiprocessing.pool.Pool method)\nMAP_CONCEAL (in module mmap)\nMAP_DENYWRITE (in module mmap)\nMAP_EXECUTABLE (in module mmap)\nMAP_HASSEMAPHORE (in module mmap)\nMAP_JIT (in module mmap)\nMAP_NOCACHE (in module mmap)\nMAP_NOEXTEND (in module mmap)\nMAP_NORESERVE (in module mmap)\nMAP_POPULATE (in module mmap)\nMAP_PRIVATE (in module mmap)\nMAP_RESILIENT_CODESIGN (in module mmap)\nMAP_RESILIENT_MEDIA (in module mmap)\nMAP_SHARED (in module mmap)\nMAP_STACK (in module mmap)\nmap_table_b2() (in module stringprep)\nmap_table_b3() (in module stringprep)\nmap_to_type() (email.headerregistry.HeaderRegistry method)\nMAP_TPRO (in module mmap)\nMAP_TRANSLATED_ALLOW_EXECUTE (in module mmap)\nMAP_UNIX03 (in module mmap)\nmapLogRecord() (logging.handlers.HTTPHandler method)\nmapping\nobject\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\n,\n[5]\ntypes, operations on\nMapping (class in collections.abc)\n(class in typing)\nMappingProxyType (class in types)\nMappingView (class in collections.abc)\n(class in typing)\nmapPriority() (logging.handlers.SysLogHandler method)\nmaps (collections.ChainMap attribute)\nMARCH (in module calendar)\nmarkcoroutinefunction() (in module inspect)\nmarshal\nmodule\nmarshalling\nobjects\nmasking\noperations\nmaster (tkinter.Tk attribute)\nmatch\ncase\nstatement\nMatch (class in ast)\n(class in re)\n(class in typing)\nmatch() (in module re)\n(pathlib.PurePath method)\n(re.Pattern method)\nmatch_case (class in ast)\nMATCH_CLASS (opcode)\nMATCH_KEYS (opcode)\nMATCH_MAPPING (opcode)\nMATCH_SEQUENCE (opcode)\nmatch_value() (test.support.Matcher method)\nMatchAs (class in ast)\nMatchClass (class in ast)\nMatcher (class in test.support)\nmatches() (test.support.Matcher method)\nMatchMapping (class in ast)\nMatchOr (class in ast)\nMatchSequence (class in ast)\nMatchSingleton (class in ast)\nMatchStar (class in ast)\nMatchValue (class in ast)\nmath\nmodule\n,\n[1]\n,\n[2]\nmatmul() (in module operator)\nMatMult (class in ast)\nmatrix multiplication\nmax\nbuilt-in function\nmax (datetime.date attribute)\n(datetime.datetime attribute)\n(datetime.time attribute)\n(datetime.timedelta attribute)\n(sys.float_info attribute)\nmax()\nbuilt-in function\nmax() (decimal.Context method)\n(decimal.Decimal method)\nmax_10_exp (sys.float_info attribute)\nmax_count (email.headerregistry.BaseHeader attribute)\nMAX_EMAX (in module decimal)\nmax_exp (sys.float_info attribute)\nMAX_INTERPOLATION_DEPTH (in module configparser)\nmax_line_length (email.policy.Policy attribute)\nmax_lines (textwrap.TextWrapper attribute)\nmax_mag() (decimal.Context method)\n(decimal.Decimal method)\nmax_memuse (in module test.support)\nMAX_PREC (in module decimal)\nmax_prefixlen (ipaddress.IPv4Address attribute)\n(ipaddress.IPv4Network attribute)\n(ipaddress.IPv6Address attribute)\n(ipaddress.IPv6Network attribute)\nMAX_Py_ssize_t (in module test.support)\nmaxarray (reprlib.Repr attribute)\nmaxdeque (reprlib.Repr attribute)\nmaxdict (reprlib.Repr attribute)\nmaxDiff (unittest.TestCase attribute)\nmaxfrozenset (reprlib.Repr attribute)\nMAXIMUM_SUPPORTED (ssl.TLSVersion attribute)\nmaximum_version (ssl.SSLContext attribute)\nmaxlen (collections.deque attribute)\nmaxlevel (reprlib.Repr attribute)\nmaxlist (reprlib.Repr attribute)\nmaxlong (reprlib.Repr attribute)\nmaxother (reprlib.Repr attribute)\nmaxset (reprlib.Repr attribute)\nmaxsize (asyncio.Queue attribute)\n(in module sys)\nmaxstring (reprlib.Repr attribute)\nmaxtuple (reprlib.Repr attribute)\nmaxunicode (in module sys)\nMAXYEAR (in module datetime)\nMAY (in module calendar)\nMB_ICONASTERISK (in module winsound)\nMB_ICONEXCLAMATION (in module winsound)\nMB_ICONHAND (in module winsound)\nMB_ICONQUESTION (in module winsound)\nMB_OK (in module winsound)\nmbox (class in mailbox)\nmboxMessage (class in mailbox)\nmd5() (in module hashlib)\nmean (statistics.NormalDist attribute)\nmean() (in module statistics)\nmeasure() (tkinter.font.Font method)\nmedian (statistics.NormalDist attribute)\nmedian() (in module statistics)\nmedian_grouped() (in module statistics)\nmedian_high() (in module statistics)\nmedian_low() (in module statistics)\nmember() (in module enum)\nmember_names (enum.EnumDict attribute)\nMemberDescriptorType (in module types)\nmembership\ntest\nmemfd_create() (in module os)\nmemmove() (in module ctypes)\nMemoryBIO (class in ssl)\nMemoryError\nMemoryHandler (class in logging.handlers)\nmemoryview\nobject\n,\n[1]\nmemoryview (built-in class)\nmemset() (in module ctypes)\nmerge() (in module heapq)\nmessage (BaseExceptionGroup attribute)\nMessage (class in email.message)\n(class in mailbox)\n(class in tkinter.messagebox)\nmessage digest, MD5\nmessage_factory (email.policy.Policy attribute)\nmessage_from_binary_file() (in module email)\nmessage_from_bytes() (in module email)\nmessage_from_file() (in module email)\nmessage_from_string() (in module email)\nMessageBeep() (in module winsound)\nMessageClass (http.server.BaseHTTPRequestHandler attribute)\nMessageDefect\nMessageError\nMessageParseError\nmessages (in module xml.parsers.expat.errors)\nmeta\nhooks\nmeta hooks\nmeta path finder\nmeta() (in module curses)\nmeta_path (in module sys)\nmetaclass\n,\n[1]\nmetaclass hint\nmetadata() (in module importlib.metadata)\nMetaPathFinder (class in importlib.abc)\nmetavar (optparse.Option attribute)\nMetavarTypeHelpFormatter (class in argparse)\nMETH_CLASS (C macro)\nMETH_COEXIST (C macro)\nMETH_FASTCALL (C macro)\nMETH_KEYWORDS (C macro)\nMETH_METHOD (C macro)\nMETH_NOARGS (C macro)\nMETH_O (C macro)\nMETH_STATIC (C macro)\nMETH_VARARGS (C macro)\nmethod\nbuilt-in\ncall\nmagic\nobject\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\n,\n[5]\nspecial\nuser-defined\nmethod (urllib.request.Request attribute)\nmethod resolution order\nmethod_calls (unittest.mock.Mock attribute)\nmethodcaller() (in module operator)\nMethodDescriptorType (in module types)\nmethodHelp() (xmlrpc.client.ServerProxy.system method)\nmethods\nbytearray\nbytes\nstring\nmethods (pyclbr.Class attribute)\nmethodSignature() (xmlrpc.client.ServerProxy.system method)\nMethodType (in module types)\n,\n[1]\n,\n[2]\nMethodWrapperType (in module types)\nmetrics() (tkinter.font.Font method)\nMFD_ALLOW_SEALING (in module os)\nMFD_CLOEXEC (in module os)\nMFD_HUGE_16GB (in module os)\nMFD_HUGE_16MB (in module os)\nMFD_HUGE_1GB (in module os)\nMFD_HUGE_1MB (in module os)\nMFD_HUGE_256MB (in module os)\nMFD_HUGE_2GB (in module os)\nMFD_HUGE_2MB (in module os)\nMFD_HUGE_32MB (in module os)\nMFD_HUGE_512KB (in module os)\nMFD_HUGE_512MB (in module os)\nMFD_HUGE_64KB (in module os)\nMFD_HUGE_8MB (in module os)\nMFD_HUGE_MASK (in module os)\nMFD_HUGE_SHIFT (in module os)\nMFD_HUGETLB (in module os)\nMH (class in mailbox)\nMHMessage (class in mailbox)\nmicrosecond (datetime.datetime attribute)\n(datetime.time attribute)\nmicroseconds (datetime.timedelta attribute)\nMIME\nbase64 encoding\ncontent type\nheaders\n,\n[1]\nquoted-printable encoding\nMIMEApplication (class in email.mime.application)\nMIMEAudio (class in email.mime.audio)\nMIMEBase (class in email.mime.base)\nMIMEImage (class in email.mime.image)\nMIMEMessage (class in email.mime.message)\nMIMEMultipart (class in email.mime.multipart)\nMIMENonMultipart (class in email.mime.nonmultipart)\nMIMEPart (class in email.message)\nMIMEText (class in email.mime.text)\nmimetypes\nmodule\nMimeTypes (class in mimetypes)\nMIMEVersionHeader (class in email.headerregistry)\nmin\nbuilt-in function\nmin (datetime.date attribute)\n(datetime.datetime attribute)\n(datetime.time attribute)\n(datetime.timedelta attribute)\n(sys.float_info attribute)\nmin()\nbuilt-in function\nmin() (decimal.Context method)\n(decimal.Decimal method)\nmin_10_exp (sys.float_info attribute)\nMIN_EMIN (in module decimal)\nMIN_ETINY (in module decimal)\nmin_exp (sys.float_info attribute)\nmin_mag() (decimal.Context method)\n(decimal.Decimal method)\nMINEQUAL (in module token)\nMINIMUM_SUPPORTED (ssl.TLSVersion attribute)\nminimum_version (ssl.SSLContext attribute)\nminor (email.headerregistry.MIMEVersionHeader attribute)\nminor() (in module os)\nminus\nMINUS (in module token)\nminus() (decimal.Context method)\nminute (datetime.datetime attribute)\n(datetime.time attribute)\nMINYEAR (in module datetime)\nmirrored() (in module unicodedata)\nmisc_header (cmd.Cmd attribute)\nMisplacedEnvelopeHeaderDefect\nMISSING (contextvars.Token attribute)\n(in module dataclasses)\n(in module sys.monitoring)\nMISSING_C_DOCSTRINGS (in module test.support)\nmissing_compiler_executable() (in module test.support)\nMissingHeaderBodySeparatorDefect\nMissingSectionHeaderError\nmkd() (ftplib.FTP method)\nmkdir() (in module os)\n(pathlib.Path method)\n(zipfile.ZipFile method)\nmkdtemp() (in module tempfile)\nmkfifo() (in module os)\nmknod() (in module os)\nmkstemp() (in module tempfile)\nmktemp() (in module tempfile)\nmktime() (in module time)\nmktime_tz() (in module email.utils)\nmlsd() (ftplib.FTP method)\nmmap\nmodule\nmmap (class in mmap)\nMMDF (class in mailbox)\nMMDFMessage (class in mailbox)\nMock (class in unittest.mock)\nmock_add_spec() (unittest.mock.Mock method)\nmock_calls (unittest.mock.Mock attribute)\nmock_open() (in module unittest.mock)\nMod (class in ast)\nmod() (in module operator)\nmode (bz2.BZ2File attribute)\n(gzip.GzipFile attribute)\n(io.FileIO attribute)\n(lzma.LZMAFile attribute)\n(statistics.NormalDist attribute)\n(tarfile.TarInfo attribute)\nmode() (in module statistics)\n(in module turtle)\nmodes\nfile\nmodf() (in module math)\nmodified() (urllib.robotparser.RobotFileParser method)\nmodify() (select.devpoll method)\n(select.epoll method)\n(select.poll method)\n(selectors.BaseSelector method)\nmodule\n__future__\n__main__\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\n,\n[5]\n,\n[6]\n,\n[7]\n,\n[8]\n,\n[9]\n_locale\n_thread\n,\n[1]\n_tkinter\nabc\naifc\nargparse\narray\n,\n[1]\n,\n[2]\nast\nasynchat\nasyncio\nasyncore\natexit\naudioop\nbase64\n,\n[1]\nbdb\n,\n[1]\nbinascii\nbisect\nbuiltins\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\n,\n[5]\n,\n[6]\n,\n[7]\nbz2\ncalendar\ncgi\ncgitb\nchunk\ncmath\ncmd\n,\n[1]\ncode\ncodecs\ncodeop\ncollections\n,\n[1]\ncollections.abc\ncolorsys\ncompileall\nconcurrent.futures\nconfigparser\ncontextlib\ncontextvars\ncopy\n,\n[1]\ncopyreg\ncProfile\ncrypt\ncsv\nctypes\ncurses\ncurses.ascii\ncurses.panel\ncurses.textpad\ndataclasses\ndatetime\ndbm\ndbm.dumb\ndbm.gnu\n,\n[1]\n,\n[2]\ndbm.ndbm\n,\n[1]\n,\n[2]\ndbm.sqlite3\ndecimal\ndifflib\ndis\ndistutils\ndoctest\nemail\nemail.charset\nemail.contentmanager\nemail.encoders\nemail.errors\nemail.generator\nemail.header\nemail.headerregistry\nemail.iterators\nemail.message\nemail.mime\nemail.mime.application\nemail.mime.audio\nemail.mime.base\nemail.mime.image\nemail.mime.message\nemail.mime.multipart\nemail.mime.nonmultipart\nemail.mime.text\nemail.parser\nemail.policy\nemail.utils\nencodings\nencodings.idna\nencodings.mbcs\nencodings.utf_8_sig\nensurepip\nenum\nerrno\n,\n[1]\nextension\nfaulthandler\nfcntl\nfilecmp\nfileinput\nfnmatch\nfractions\nftplib\nfunctools\ngc\ngetopt\ngetpass\ngettext\nglob\n,\n[1]\ngraphlib\ngrp\ngzip\nhashlib\nheapq\nhmac\nhtml\nhtml.entities\nhtml.parser\nhttp\nhttp.client\nhttp.cookiejar\nhttp.cookies\nhttp.server\nidlelib\nimaplib\nimghdr\nimp\nimporting\nimportlib\nimportlib.abc\nimportlib.machinery\nimportlib.metadata\nimportlib.resources\nimportlib.resources.abc\nimportlib.util\ninspect\nio\n,\n[1]\nipaddress\nitertools\njson\n,\n[1]\njson.tool\nkeyword\nlinecache\nlocale\nlogging\nlogging.config\nlogging.handlers\nlzma\nmailbox\nmailcap\nmarshal\nmath\n,\n[1]\n,\n[2]\nmimetypes\nmmap\nmodulefinder\nmsilib\nmsvcrt\nmultiprocessing\nmultiprocessing.connection\nmultiprocessing.dummy\nmultiprocessing.managers\nmultiprocessing.pool\nmultiprocessing.shared_memory\nmultiprocessing.sharedctypes\nnamespace\nnetrc\nnis\nnntplib\nnumbers\nobject\n,\n[1]\n,\n[2]\noperator\noptparse\nos\n,\n[1]\nos.path\nossaudiodev\npathlib\npdb\npickle\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\npickletools\npipes\npkgutil\nplatform\nplistlib\npoplib\nposix\npprint\nprofile\npstats\npty\n,\n[1]\npwd\n,\n[1]\npy_compile\npyclbr\npydoc\npyexpat\nqueue\nquopri\nrandom\nre\n,\n[1]\n,\n[2]\nreadline\nreprlib\nresource\nrlcompleter\nrunpy\nsched\nsearch path\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\n,\n[5]\n,\n[6]\nsecrets\nselect\nselectors\nshelve\n,\n[1]\nshlex\nshutil\nsignal\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\nsite\nsitecustomize\nsmtpd\nsmtplib\nsndhdr\nsocket\n,\n[1]\nsocketserver\nspwd\nsqlite3\nssl\nstat\n,\n[1]\nstatistics\nstring\nstringprep\nstruct\n,\n[1]\nsubprocess\nsunau\nsymtable\nsys\n,\n[1]\n,\n[2]\n,\n[3]\n,\n[4]\n,\n[5]\n,\n[6]\n,\n[7]\n,\n[8]\nsys.monitoring\nsysconfig\nsyslog\ntabnanny\ntarfile\ntelnetlib\ntempfile\ntermios\ntest\ntest.regrtest\ntest.support\ntest.support.bytecode_helper\ntest.support.import_helper\ntest.support.os_helper\ntest.support.script_helper\ntest.support.socket_helper\ntest.support.threading_helper\ntest.support.warnings_helper\ntextwrap\nthreading\ntime\ntimeit\ntkinter\ntkinter.colorchooser\ntkinter.commondialog\ntkinter.dnd\ntkinter.filedialog\ntkinter.font\ntkinter.messagebox\ntkinter.scrolledtext\ntkinter.simpledialog\ntkinter.ttk\ntoken\ntokenize\ntomllib\ntrace\ntraceback\ntracemalloc\ntty\nturtle\nturtledemo\ntypes\n,\n[1]\ntyping\nunicodedata\nunittest\nunittest.mock\nurllib\nurllib.error\nurllib.parse\nurllib.request\n,\n[1]\nurllib.response\nurllib.robotparser\nusercustomize\nuu\nuuid\nvenv\nwarnings\nwave\nweakref\nwebbrowser\nwinreg\nwinsound\nwsgiref\nwsgiref.handlers\nwsgiref.headers\nwsgiref.simple_server\nwsgiref.types\nwsgiref.util\nwsgiref.validate\nxdrlib\nxml\nxml.dom\nxml.dom.minidom\nxml.dom.pulldom\nxml.etree.ElementInclude\nxml.etree.ElementTree\nxml.parsers.expat\nxml.parsers.expat.errors\nxml.parsers.expat.model\nxml.sax\nxml.sax.handler\nxml.sax.saxutils\nxml.sax.xmlreader\nxmlrpc\nxmlrpc.client\nxmlrpc.server\nzipapp\nzipfile\nzipimport\nzlib\nzoneinfo\nModule (class in ast)\nmodule (pyclbr.Class attribute)\n(pyclbr.Function attribute)\nMODULE (symtable.SymbolTableType attribute)\nModule browser\nmodule spec\n,\n[1]\nmodule_from_spec() (in module importlib.util)\nmodulefinder\nmodule\nModuleFinder (class in modulefinder)\nModuleInfo (class in pkgutil)\nModuleNotFoundError\nmodules (in module sys)\n,\n[1]\n,\n[2]\n(modulefinder.ModuleFinder attribute)\nmodules_cleanup() (in module test.support.import_helper)\nmodules_setup() (in module test.support.import_helper)\nModuleSpec (class in importlib.machinery)\nModuleType (class in types)\n(in module types)\nmodulo\nmodulus (sys.hash_info attribute)\nMON_1 (in module locale)\nMON_10 (in module locale)\nMON_11 (in module locale)\nMON_12 (in module locale)\nMON_2 (in module locale)\nMON_3 (in module locale)\nMON_4 (in module locale)\nMON_5 (in module locale)\nMON_6 (in module locale)\nMON_7 (in module locale)\nMON_8 (in module locale)\nMON_9 (in module locale)\nMONDAY (in module calendar)\nmonotonic() (in module time)\nmonotonic_ns() (in module time)\nmonth\ncalendar command line option\nmonth (calendar.IllegalMonthError attribute)\nMonth (class in calendar)\nmonth (datetime.date attribute)\n(datetime.datetime attribute)\nmonth() (in module calendar)\nmonth_abbr (in module calendar)\nmonth_name (in module calendar)\nmonthcalendar() (in module calendar)\nmonthdatescalendar() (calendar.Calendar method)\nmonthdays2calendar() (calendar.Calendar method)\nmonthdayscalendar() (calendar.Calendar method)\nmonthrange() (in module calendar)\nMorsel (class in http.cookies)\nmost_common() (collections.Counter method)\nmouseinterval() (in module curses)\nmousemask() (in module curses)\nmove() (curses.panel.Panel method)\n(curses.window method)\n(in module shutil)\n(mmap.mmap method)\n(tkinter.ttk.Treeview method)\nmove_to_end() (collections.OrderedDict method)\nMozillaCookieJar (class in http.cookiejar)\nMRO\nmro() (type method)\nmsg (http.client.HTTPResponse attribute)\n(json.JSONDecodeError attribute)\n(netrc.NetrcParseError attribute)\n(re.PatternError attribute)\n(traceback.TracebackException attribute)\nmsilib\nmodule\nmsvcrt\nmodule\nmtime (gzip.GzipFile attribute)\n(tarfile.TarInfo attribute)\nmtime() (urllib.robotparser.RobotFileParser method)\nmul() (in module operator)\nMult (class in ast)\nMultiCall (class in xmlrpc.client)\nMULTILINE (in module re)\nMultilineContinuationError\nMultiLoopChildWatcher (class in asyncio)\nmultimode() (in module statistics)\nMultipartConversionError\nMultipartInvariantViolationDefect\nmultiplication\nmultiply() (decimal.Context method)\nmultiprocessing\nmodule\nmultiprocessing.connection\nmodule\nmultiprocessing.dummy\nmodule\nmultiprocessing.Manager()\nbuilt-in function\nmultiprocessing.managers\nmodule\nmultiprocessing.pool\nmodule\nmultiprocessing.shared_memory\nmodule\nmultiprocessing.sharedctypes\nmodule\nmutable\nobject\n,\n[1]\n,\n[2]\nsequence types\nmutable object\nmutable sequence\nloop over\nobject\nMutableMapping (class in collections.abc)\n(class in typing)\nMutableSequence (class in collections.abc)\n(class in typing)\nMutableSet (class in collections.abc)\n(class in typing)\nmvderwin() (curses.window method)\nmvwin() (curses.window method)\nmyrights() (imaplib.IMAP4 method)\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/genindex-M.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12353.9270439
  },
  {
    "title": "Index",
    "content": "Navigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\nIndex\nIndex pages by letter:\nSymbols\n|\n_\n|\nA\n|\nB\n|\nC\n|\nD\n|\nE\n|\nF\n|\nG\n|\nH\n|\nI\n|\nJ\n|\nK\n|\nL\n|\nM\n|\nN\n|\nO\n|\nP\n|\nQ\n|\nR\n|\nS\n|\nT\n|\nU\n|\nV\n|\nW\n|\nX\n|\nY\n|\nZ\nFull index on one page\n(can be huge)\n«\nNavigation\nindex\nmodules\n|\nPython\n»\n3.13.5 Documentation\n»\nIndex\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/genindex.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12354.2775362
  },
  {
    "title": "stat — Interpreting stat() results¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nFile and Directory Access\n»\nstat\n— Interpreting\nstat()\nresults\n|\nTheme\nAuto\nLight\nDark\n|\nstat\n— Interpreting\nstat()\nresults\n¶\nSource code:\nLib/stat.py\nThe\nstat\nmodule defines constants and functions for interpreting the\nresults of\nos.stat()\n,\nos.fstat()\nand\nos.lstat()\n(if they\nexist).  For complete details about the\nstat()\n,\nfstat()\nand\nlstat()\ncalls, consult the documentation for your system.\nChanged in version 3.4:\nThe stat module is backed by a C implementation.\nThe\nstat\nmodule defines the following functions to test for specific file\ntypes:\nstat.\nS_ISDIR\n(\nmode\n)\n¶\nReturn non-zero if the mode is from a directory.\nstat.\nS_ISCHR\n(\nmode\n)\n¶\nReturn non-zero if the mode is from a character special device file.\nstat.\nS_ISBLK\n(\nmode\n)\n¶\nReturn non-zero if the mode is from a block special device file.\nstat.\nS_ISREG\n(\nmode\n)\n¶\nReturn non-zero if the mode is from a regular file.\nstat.\nS_ISFIFO\n(\nmode\n)\n¶\nReturn non-zero if the mode is from a FIFO (named pipe).\nstat.\nS_ISLNK\n(\nmode\n)\n¶\nReturn non-zero if the mode is from a symbolic link.\nstat.\nS_ISSOCK\n(\nmode\n)\n¶\nReturn non-zero if the mode is from a socket.\nstat.\nS_ISDOOR\n(\nmode\n)\n¶\nReturn non-zero if the mode is from a door.\nAdded in version 3.4.\nstat.\nS_ISPORT\n(\nmode\n)\n¶\nReturn non-zero if the mode is from an event port.\nAdded in version 3.4.\nstat.\nS_ISWHT\n(\nmode\n)\n¶\nReturn non-zero if the mode is from a whiteout.\nAdded in version 3.4.\nTwo additional functions are defined for more general manipulation of the file’s\nmode:\nstat.\nS_IMODE\n(\nmode\n)\n¶\nReturn the portion of the file’s mode that can be set by\nos.chmod()\n—that is, the file’s permission bits, plus the sticky\nbit, set-group-id, and set-user-id bits (on systems that support them).\nstat.\nS_IFMT\n(\nmode\n)\n¶\nReturn the portion of the file’s mode that describes the file type (used by the\nS_IS*()\nfunctions above).\nNormally, you would use the\nos.path.is*()\nfunctions for testing the type\nof a file; the functions here are useful when you are doing multiple tests of\nthe same file and wish to avoid the overhead of the\nstat()\nsystem call\nfor each test.  These are also useful when checking for information about a file\nthat isn’t handled by\nos.path\n, like the tests for block and character\ndevices.\nExample:\nimport\nos\n,\nsys\nfrom\nstat\nimport\n*\ndef\nwalktree\n(\ntop\n,\ncallback\n):\n'''recursively descend the directory tree rooted at top,\ncalling the callback function for each regular file'''\nfor\nf\nin\nos\n.\nlistdir\n(\ntop\n):\npathname\n=\nos\n.\npath\n.\njoin\n(\ntop\n,\nf\n)\nmode\n=\nos\n.\nlstat\n(\npathname\n)\n.\nst_mode\nif\nS_ISDIR\n(\nmode\n):\n# It's a directory, recurse into it\nwalktree\n(\npathname\n,\ncallback\n)\nelif\nS_ISREG\n(\nmode\n):\n# It's a file, call the callback function\ncallback\n(\npathname\n)\nelse\n:\n# Unknown file type, print a message\nprint\n(\n'Skipping\n%s\n'\n%\npathname\n)\ndef\nvisitfile\n(\nfile\n):\nprint\n(\n'visiting'\n,\nfile\n)\nif\n__name__\n==\n'__main__'\n:\nwalktree\n(\nsys\n.\nargv\n[\n1\n],\nvisitfile\n)\nAn additional utility function is provided to convert a file’s mode in a human\nreadable string:\nstat.\nfilemode\n(\nmode\n)\n¶\nConvert a file’s mode to a string of the form ‘-rwxrwxrwx’.\nAdded in version 3.3.\nChanged in version 3.4:\nThe function supports\nS_IFDOOR\n,\nS_IFPORT\nand\nS_IFWHT\n.\nAll the variables below are simply symbolic indexes into the 10-tuple returned\nby\nos.stat()\n,\nos.fstat()\nor\nos.lstat()\n.\nstat.\nST_MODE\n¶\nInode protection mode.\nstat.\nST_INO\n¶\nInode number.\nstat.\nST_DEV\n¶\nDevice inode resides on.\nstat.\nST_NLINK\n¶\nNumber of links to the inode.\nstat.\nST_UID\n¶\nUser id of the owner.\nstat.\nST_GID\n¶\nGroup id of the owner.\nstat.\nST_SIZE\n¶\nSize in bytes of a plain file; amount of data waiting on some special files.\nstat.\nST_ATIME\n¶\nTime of last access.\nstat.\nST_MTIME\n¶\nTime of last modification.\nstat.\nST_CTIME\n¶\nThe “ctime” as reported by the operating system.  On some systems (like Unix) is\nthe time of the last metadata change, and, on others (like Windows), is the\ncreation time (see platform documentation for details).\nThe interpretation of “file size” changes according to the file type.  For plain\nfiles this is the size of the file in bytes.  For FIFOs and sockets under most\nflavors of Unix (including Linux in particular), the “size” is the number of\nbytes waiting to be read at the time of the call to\nos.stat()\n,\nos.fstat()\n, or\nos.lstat()\n; this can sometimes be useful, especially\nfor polling one of these special files after a non-blocking open.  The meaning\nof the size field for other character and block devices varies more, depending\non the implementation of the underlying system call.\nThe variables below define the flags used in the\nST_MODE\nfield.\nUse of the functions above is more portable than use of the first set of flags:\nstat.\nS_IFSOCK\n¶\nSocket.\nstat.\nS_IFLNK\n¶\nSymbolic link.\nstat.\nS_IFREG\n¶\nRegular file.\nstat.\nS_IFBLK\n¶\nBlock device.\nstat.\nS_IFDIR\n¶\nDirectory.\nstat.\nS_IFCHR\n¶\nCharacter device.\nstat.\nS_IFIFO\n¶\nFIFO.\nstat.\nS_IFDOOR\n¶\nDoor.\nAdded in version 3.4.\nstat.\nS_IFPORT\n¶\nEvent port.\nAdded in version 3.4.\nstat.\nS_IFWHT\n¶\nWhiteout.\nAdded in version 3.4.\nNote\nS_IFDOOR\n,\nS_IFPORT\nor\nS_IFWHT\nare defined as\n0 when the platform does not have support for the file types.\nThe following flags can also be used in the\nmode\nargument of\nos.chmod()\n:\nstat.\nS_ISUID\n¶\nSet UID bit.\nstat.\nS_ISGID\n¶\nSet-group-ID bit.  This bit has several special uses.  For a directory\nit indicates that BSD semantics is to be used for that directory:\nfiles created there inherit their group ID from the directory, not\nfrom the effective group ID of the creating process, and directories\ncreated there will also get the\nS_ISGID\nbit set.  For a\nfile that does not have the group execution bit (\nS_IXGRP\n)\nset, the set-group-ID bit indicates mandatory file/record locking\n(see also\nS_ENFMT\n).\nstat.\nS_ISVTX\n¶\nSticky bit.  When this bit is set on a directory it means that a file\nin that directory can be renamed or deleted only by the owner of the\nfile, by the owner of the directory, or by a privileged process.\nstat.\nS_IRWXU\n¶\nMask for file owner permissions.\nstat.\nS_IRUSR\n¶\nOwner has read permission.\nstat.\nS_IWUSR\n¶\nOwner has write permission.\nstat.\nS_IXUSR\n¶\nOwner has execute permission.\nstat.\nS_IRWXG\n¶\nMask for group permissions.\nstat.\nS_IRGRP\n¶\nGroup has read permission.\nstat.\nS_IWGRP\n¶\nGroup has write permission.\nstat.\nS_IXGRP\n¶\nGroup has execute permission.\nstat.\nS_IRWXO\n¶\nMask for permissions for others (not in group).\nstat.\nS_IROTH\n¶\nOthers have read permission.\nstat.\nS_IWOTH\n¶\nOthers have write permission.\nstat.\nS_IXOTH\n¶\nOthers have execute permission.\nstat.\nS_ENFMT\n¶\nSystem V file locking enforcement.  This flag is shared with\nS_ISGID\n:\nfile/record locking is enforced on files that do not have the group\nexecution bit (\nS_IXGRP\n) set.\nstat.\nS_IREAD\n¶\nUnix V7 synonym for\nS_IRUSR\n.\nstat.\nS_IWRITE\n¶\nUnix V7 synonym for\nS_IWUSR\n.\nstat.\nS_IEXEC\n¶\nUnix V7 synonym for\nS_IXUSR\n.\nThe following flags can be used in the\nflags\nargument of\nos.chflags()\n:\nstat.\nUF_SETTABLE\n¶\nAll user settable flags.\nAdded in version 3.13.\nstat.\nUF_NODUMP\n¶\nDo not dump the file.\nstat.\nUF_IMMUTABLE\n¶\nThe file may not be changed.\nstat.\nUF_APPEND\n¶\nThe file may only be appended to.\nstat.\nUF_OPAQUE\n¶\nThe directory is opaque when viewed through a union stack.\nstat.\nUF_NOUNLINK\n¶\nThe file may not be renamed or deleted.\nstat.\nUF_COMPRESSED\n¶\nThe file is stored compressed (macOS 10.6+).\nstat.\nUF_TRACKED\n¶\nUsed for handling document IDs (macOS)\nAdded in version 3.13.\nstat.\nUF_DATAVAULT\n¶\nThe file needs an entitlement for reading or writing (macOS 10.13+)\nAdded in version 3.13.\nstat.\nUF_HIDDEN\n¶\nThe file should not be displayed in a GUI (macOS 10.5+).\nstat.\nSF_SETTABLE\n¶\nAll super-user changeable flags\nAdded in version 3.13.\nstat.\nSF_SUPPORTED\n¶\nAll super-user supported flags\nAvailability\n: macOS\nAdded in version 3.13.\nstat.\nSF_SYNTHETIC\n¶\nAll super-user read-only synthetic flags\nAvailability\n: macOS\nAdded in version 3.13.\nstat.\nSF_ARCHIVED\n¶\nThe file may be archived.\nstat.\nSF_IMMUTABLE\n¶\nThe file may not be changed.\nstat.\nSF_APPEND\n¶\nThe file may only be appended to.\nstat.\nSF_RESTRICTED\n¶\nThe file needs an entitlement to write to (macOS 10.13+)\nAdded in version 3.13.\nstat.\nSF_NOUNLINK\n¶\nThe file may not be renamed or deleted.\nstat.\nSF_SNAPSHOT\n¶\nThe file is a snapshot file.\nstat.\nSF_FIRMLINK\n¶\nThe file is a firmlink (macOS 10.15+)\nAdded in version 3.13.\nstat.\nSF_DATALESS\n¶\nThe file is a dataless object (macOS 10.15+)\nAdded in version 3.13.\nSee the *BSD or macOS systems man page\nchflags(2)\nfor more information.\nOn Windows, the following file attribute constants are available for use when\ntesting bits in the\nst_file_attributes\nmember returned by\nos.stat()\n.\nSee the\nWindows API documentation\nfor more detail on the meaning of these constants.\nstat.\nFILE_ATTRIBUTE_ARCHIVE\n¶\nstat.\nFILE_ATTRIBUTE_COMPRESSED\n¶\nstat.\nFILE_ATTRIBUTE_DEVICE\n¶\nstat.\nFILE_ATTRIBUTE_DIRECTORY\n¶\nstat.\nFILE_ATTRIBUTE_ENCRYPTED\n¶\nstat.\nFILE_ATTRIBUTE_HIDDEN\n¶\nstat.\nFILE_ATTRIBUTE_INTEGRITY_STREAM\n¶\nstat.\nFILE_ATTRIBUTE_NORMAL\n¶\nstat.\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED\n¶\nstat.\nFILE_ATTRIBUTE_NO_SCRUB_DATA\n¶\nstat.\nFILE_ATTRIBUTE_OFFLINE\n¶\nstat.\nFILE_ATTRIBUTE_READONLY\n¶\nstat.\nFILE_ATTRIBUTE_REPARSE_POINT\n¶\nstat.\nFILE_ATTRIBUTE_SPARSE_FILE\n¶\nstat.\nFILE_ATTRIBUTE_SYSTEM\n¶\nstat.\nFILE_ATTRIBUTE_TEMPORARY\n¶\nstat.\nFILE_ATTRIBUTE_VIRTUAL\n¶\nAdded in version 3.5.\nOn Windows, the following constants are available for comparing against the\nst_reparse_tag\nmember returned by\nos.lstat()\n. These are well-known\nconstants, but are not an exhaustive list.\nstat.\nIO_REPARSE_TAG_SYMLINK\n¶\nstat.\nIO_REPARSE_TAG_MOUNT_POINT\n¶\nstat.\nIO_REPARSE_TAG_APPEXECLINK\n¶\nAdded in version 3.8.\nPrevious topic\nos.path\n— Common pathname manipulations\nNext topic\nfilecmp\n— File and Directory Comparisons\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nFile and Directory Access\n»\nstat\n— Interpreting\nstat()\nresults\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/stat.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12354.3971941
  },
  {
    "title": "History and License¶",
    "content": "Navigation\nindex\nmodules\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nHistory and License\n|\nTheme\nAuto\nLight\nDark\n|\nHistory and License\n¶\nHistory of the software\n¶\nPython was created in the early 1990s by Guido van Rossum at Stichting\nMathematisch Centrum (CWI, see\nhttps://www.cwi.nl\n) in the Netherlands as a\nsuccessor of a language called ABC.  Guido remains Python’s principal author,\nalthough it includes many contributions from others.\nIn 1995, Guido continued his work on Python at the Corporation for National\nResearch Initiatives (CNRI, see\nhttps://www.cnri.reston.va.us\n) in Reston,\nVirginia where he released several versions of the software.\nIn May 2000, Guido and the Python core development team moved to BeOpen.com to\nform the BeOpen PythonLabs team.  In October of the same year, the PythonLabs\nteam moved to Digital Creations, which became\nZope Corporation.  In 2001, the Python Software Foundation (PSF, see\nhttps://www.python.org/psf/\n) was formed, a non-profit organization created\nspecifically to own Python-related Intellectual Property.  Zope Corporation was a\nsponsoring member of the PSF.\nAll Python releases are Open Source (see\nhttps://opensource.org\nfor the Open\nSource Definition). Historically, most, but not all, Python releases have also\nbeen GPL-compatible; the table below summarizes the various releases.\nRelease\nDerived from\nYear\nOwner\nGPL-compatible? (1)\n0.9.0 thru 1.2\nn/a\n1991-1995\nCWI\nyes\n1.3 thru 1.5.2\n1.2\n1995-1999\nCNRI\nyes\n1.6\n1.5.2\n2000\nCNRI\nno\n2.0\n1.6\n2000\nBeOpen.com\nno\n1.6.1\n1.6\n2001\nCNRI\nyes (2)\n2.1\n2.0+1.6.1\n2001\nPSF\nno\n2.0.1\n2.0+1.6.1\n2001\nPSF\nyes\n2.1.1\n2.1+2.0.1\n2001\nPSF\nyes\n2.1.2\n2.1.1\n2002\nPSF\nyes\n2.1.3\n2.1.2\n2002\nPSF\nyes\n2.2 and above\n2.1.1\n2001-now\nPSF\nyes\nNote\nGPL-compatible doesn’t mean that we’re distributing Python under the GPL.\nAll Python licenses, unlike the GPL, let you distribute a modified version\nwithout making your changes open source. The GPL-compatible licenses make\nit possible to combine Python with other software that is released under\nthe GPL; the others don’t.\nAccording to Richard Stallman, 1.6.1 is not GPL-compatible, because its license\nhas a choice of law clause. According to CNRI, however, Stallman’s lawyer has\ntold CNRI’s lawyer that 1.6.1 is “not incompatible” with the GPL.\nThanks to the many outside volunteers who have worked under Guido’s direction to\nmake these releases possible.\nTerms and conditions for accessing or otherwise using Python\n¶\nPython software and documentation are licensed under the\nPython Software Foundation License Version 2.\nStarting with Python 3.8.6, examples, recipes, and other code in\nthe documentation are dual licensed under the PSF License Version 2\nand the\nZero-Clause BSD license\n.\nSome software incorporated into Python is under different licenses.\nThe licenses are listed with code falling under that license.\nSee\nLicenses and Acknowledgements for Incorporated Software\nfor an incomplete list of these licenses.\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n¶\n1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and\nthe Individual or Organization (\"Licensee\") accessing and otherwise using this\nsoftware (\"Python\") in source or binary form and its associated documentation.\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative\nversion, provided, however, that PSF's License Agreement and PSF's notice of\ncopyright, i.e., \"Copyright © 2001-2024 Python Software Foundation; All Rights\nReserved\" are retained in Python alone or in any derivative version\nprepared by Licensee.\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python or any part thereof, and wants to make the\nderivative work available to others as provided herein, then Licensee hereby\nagrees to include in any such work a brief summary of the changes made to Python.\n4. PSF is making Python available to Licensee on an \"AS IS\" basis.\nPSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. Nothing in this License Agreement shall be deemed to create any relationship\nof agency, partnership, or joint venture between PSF and Licensee.  This License\nAgreement does not grant permission to use PSF trademarks or trade name in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party.\n8. By copying, installing or otherwise using Python, Licensee agrees\nto be bound by the terms and conditions of this License Agreement.\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\n¶\nBEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at\n160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization\n(\"Licensee\") accessing and otherwise using this software in source or binary\nform and its associated documentation (\"the Software\").\n2. Subject to the terms and conditions of this BeOpen Python License Agreement,\nBeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license\nto reproduce, analyze, test, perform and/or display publicly, prepare derivative\nworks, distribute, and otherwise use the Software alone or in any derivative\nversion, provided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n3. BeOpen is making the Software available to Licensee on an \"AS IS\" basis.\nBEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,\nMODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF\nADVISED OF THE POSSIBILITY THEREOF.\n5. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n6. This License Agreement shall be governed by and interpreted in all respects\nby the law of the State of California, excluding conflict of law provisions.\nNothing in this License Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between BeOpen and Licensee.  This License\nAgreement does not grant permission to use BeOpen trademarks or trade names in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party.  As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the permissions\ngranted on that web page.\n7. By copying, installing or otherwise using the software, Licensee agrees to be\nbound by the terms and conditions of this License Agreement.\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n¶\n1. This LICENSE AGREEMENT is between the Corporation for National Research\nInitiatives, having an office at 1895 Preston White Drive, Reston, VA 20191\n(\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using Python 1.6.1 software in source or binary form and its\nassociated documentation.\n2. Subject to the terms and conditions of this License Agreement, CNRI hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python 1.6.1 alone or in any derivative version,\nprovided, however, that CNRI's License Agreement and CNRI's notice of copyright,\ni.e., \"Copyright © 1995-2001 Corporation for National Research Initiatives; All\nRights Reserved\" are retained in Python 1.6.1 alone or in any derivative version\nprepared by Licensee.  Alternately, in lieu of CNRI's License Agreement,\nLicensee may substitute the following text (omitting the quotes): \"Python 1.6.1\nis made available subject to the terms and conditions in CNRI's License\nAgreement.  This Agreement together with Python 1.6.1 may be located on the\ninternet using the following unique, persistent identifier (known as a handle):\n1895.22/1013.  This Agreement may also be obtained from a proxy server on the\ninternet using the following URL: http://hdl.handle.net/1895.22/1013\".\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python 1.6.1 or any part thereof, and wants to make the derivative\nwork available to others as provided herein, then Licensee hereby agrees to\ninclude in any such work a brief summary of the changes made to Python 1.6.1.\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis.  CNRI\nMAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF EXAMPLE,\nBUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY\nOF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF\nPYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. This License Agreement shall be governed by the federal intellectual property\nlaw of the United States, including without limitation the federal copyright\nlaw, and, to the extent such U.S. federal law does not apply, by the law of the\nCommonwealth of Virginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based on Python\n1.6.1 that incorporate non-separable material that was previously distributed\nunder the GNU General Public License (GPL), the law of the Commonwealth of\nVirginia shall govern this License Agreement only as to issues arising under or\nwith respect to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in\nthis License Agreement shall be deemed to create any relationship of agency,\npartnership, or joint venture between CNRI and Licensee.  This License Agreement\ndoes not grant permission to use CNRI trademarks or trade name in a trademark\nsense to endorse or promote products or services of Licensee, or any third\nparty.\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing\nor otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and\nconditions of this License Agreement.\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\n¶\nCopyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The\nNetherlands.  All rights reserved.\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted, provided that\nthe above copyright notice appear in all copies and that both that copyright\nnotice and this permission notice appear in supporting documentation, and that\nthe name of Stichting Mathematisch Centrum or CWI not be used in advertising or\npublicity pertaining to distribution of the software without specific, written\nprior permission.\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO\nEVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\nZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION\n¶\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nLicenses and Acknowledgements for Incorporated Software\n¶\nThis section is an incomplete, but growing list of licenses and acknowledgements\nfor third-party software incorporated in the Python distribution.\nMersenne Twister\n¶\nThe\n_random\nC extension underlying the\nrandom\nmodule\nincludes code based on a download from\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html\n. The following are\nthe verbatim comments from the original code:\nA C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. The names of its contributors may not be used to endorse or promote\nproducts derived from this software without specific prior written\npermission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\nSockets\n¶\nThe\nsocket\nmodule uses the functions,\ngetaddrinfo()\n, and\ngetnameinfo()\n, which are coded in separate source files from the WIDE\nProject,\nhttps://www.wide.ad.jp/\n.\nCopyright (C) 1995, 1996, 1997, and 1998 WIDE Project.\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. Neither the name of the project nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nAsynchronous socket services\n¶\nThe\ntest.support.asynchat\nand\ntest.support.asyncore\nmodules contain the following notice:\nCopyright 1996 by Sam Rushing\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and\nits documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of Sam\nRushing not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\nSAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN\nNO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nCookie management\n¶\nThe\nhttp.cookies\nmodule contains the following notice:\nCopyright 2000 by Timothy O'Malley <timo@alum.mit.edu>\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nTimothy O'Malley  not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nTimothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nExecution tracing\n¶\nThe\ntrace\nmodule contains the following notice:\nportions copyright 2001, Autonomous Zones Industries, Inc., all rights...\nerr...  reserved and offered to the public under the terms of the\nPython 2.2 license.\nAuthor: Zooko O'Whielacronx\nhttp://zooko.com/\nmailto:zooko@zooko.com\nCopyright 2000, Mojam Media, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1999, Bioreason, Inc., all rights reserved.\nAuthor: Andrew Dalke\nCopyright 1995-1997, Automatrix, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.\nPermission to use, copy, modify, and distribute this Python software and\nits associated documentation for any purpose without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of neither Automatrix,\nBioreason or Mojam Media be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission.\nUUencode and UUdecode functions\n¶\nThe\nuu\ncodec contains the following notice:\nCopyright 1994 by Lance Ellinghouse\nCathedral City, California Republic, United States of America.\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Lance Ellinghouse\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\nLANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nModified by Jack Jansen, CWI, July 1995:\n- Use binascii module to do the actual line-by-line conversion\nbetween ascii and binary. This results in a 1000-fold speedup. The C\nversion is still 5 times faster, though.\n- Arguments more compliant with Python standard\nXML Remote Procedure Calls\n¶\nThe\nxmlrpc.client\nmodule contains the following notice:\nThe XML-RPC client interface is\nCopyright (c) 1999-2002 by Secret Labs AB\nCopyright (c) 1999-2002 by Fredrik Lundh\nBy obtaining, using, and/or copying this software and/or its\nassociated documentation, you agree that you have read, understood,\nand will comply with the following terms and conditions:\nPermission to use, copy, modify, and distribute this software and\nits associated documentation for any purpose and without fee is\nhereby granted, provided that the above copyright notice appears in\nall copies, and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nSecret Labs AB or the author not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\nTO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\nABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\nBE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\nOF THIS SOFTWARE.\ntest_epoll\n¶\nThe\ntest.test_epoll\nmodule contains the following notice:\nCopyright (c) 2001-2006 Twisted Matrix Laboratories.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nSelect kqueue\n¶\nThe\nselect\nmodule contains the following notice for the kqueue\ninterface:\nCopyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nSipHash24\n¶\nThe file\nPython/pyhash.c\ncontains Marek Majkowski’ implementation of\nDan Bernstein’s SipHash24 algorithm. It contains the following note:\n<MIT License>\nCopyright (c) 2013  Marek Majkowski <marek@popcount.org>\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n</MIT License>\nOriginal location:\nhttps://github.com/majek/csiphash/\nSolution inspired by code from:\nSamuel Neves (supercop/crypto_auth/siphash24/little)\ndjb (supercop/crypto_auth/siphash24/little2)\nJean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)\nstrtod and dtoa\n¶\nThe file\nPython/dtoa.c\n, which supplies C functions dtoa and\nstrtod for conversion of C doubles to and from strings, is derived\nfrom the file of the same name by David M. Gay, currently available\nfrom\nhttps://web.archive.org/web/20220517033456/http://www.netlib.org/fp/dtoa.c\n.\nThe original file, as retrieved on March 16, 2009, contains the following\ncopyright and licensing notice:\n/****************************************************************\n*\n* The author of this software is David M. Gay.\n*\n* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.\n*\n* Permission to use, copy, modify, and distribute this software for any\n* purpose without fee is hereby granted, provided that this entire notice\n* is included in all copies of any software which is or includes a copy\n* or modification of this software and in all copies of the supporting\n* documentation for such software.\n*\n* THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\n* WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\n* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\n* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n*\n***************************************************************/\nOpenSSL\n¶\nThe modules\nhashlib\n,\nposix\nand\nssl\nuse\nthe OpenSSL library for added performance if made available by the\noperating system. Additionally, the Windows and macOS installers for\nPython may include a copy of the OpenSSL libraries, so we include a copy\nof the OpenSSL license here. For the OpenSSL 3.0 release,\nand later releases derived from that, the Apache License v2 applies:\nApache License\nVersion 2.0, January 2004\nhttps://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n1. Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nexpat\n¶\nThe\npyexpat\nextension is built using an included copy of the expat\nsources unless the build is configured\n--with-system-expat\n:\nCopyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd\nand Clark Cooper\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nlibffi\n¶\nThe\n_ctypes\nC extension underlying the\nctypes\nmodule\nis built using an included copy of the libffi\nsources unless the build is configured\n--with-system-libffi\n:\nCopyright (c) 1996-2008  Red Hat, Inc and others.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\nzlib\n¶\nThe\nzlib\nextension is built using an included copy of the zlib\nsources if the zlib version found on the system is too old to be\nused for the build:\nCopyright (C) 1995-2011 Jean-loup Gailly and Mark Adler\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\nJean-loup Gailly        Mark Adler\njloup@gzip.org          madler@alumni.caltech.edu\ncfuhash\n¶\nThe implementation of the hash table used by the\ntracemalloc\nis based\non the cfuhash project:\nCopyright (c) 2005 Don Owens\nAll rights reserved.\nThis code is released under the BSD license:\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\n* Neither the name of the author nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\nlibmpdec\n¶\nThe\n_decimal\nC extension underlying the\ndecimal\nmodule\nis built using an included copy of the libmpdec\nlibrary unless the build is configured\n--with-system-libmpdec\n:\nCopyright (c) 2008-2020 Stefan Krah. All rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nW3C C14N test suite\n¶\nThe C14N 2.0 test suite in the\ntest\npackage\n(\nLib/test/xmltestdata/c14n-20/\n) was retrieved from the W3C website at\nhttps://www.w3.org/TR/xml-c14n2-testcases/\nand is distributed under the\n3-clause BSD license:\nCopyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),\nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of works must retain the original copyright notice,\nthis list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the original copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name of the W3C nor the names of its contributors may be\nused to endorse or promote products derived from this work without\nspecific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nmimalloc\n¶\nMIT License:\nCopyright (c) 2018-2021 Microsoft Corporation, Daan Leijen\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nasyncio\n¶\nParts of the\nasyncio\nmodule are incorporated from\nuvloop 0.16\n,\nwhich is distributed under the MIT license:\nCopyright (c) 2015-2021 MagicStack Inc.  http://magic.io\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nGlobal Unbounded Sequences (GUS)\n¶\nThe file\nPython/qsbr.c\nis adapted from FreeBSD’s “Global Unbounded\nSequences” safe memory reclamation scheme in\nsubr_smr.c\n.\nThe file is distributed under the 2-Clause BSD License:\nCopyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice unmodified, this list of conditions, and the following\ndisclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nTable of Contents\nHistory and License\nHistory of the software\nTerms and conditions for accessing or otherwise using Python\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION\nLicenses and Acknowledgements for Incorporated Software\nMersenne Twister\nSockets\nAsynchronous socket services\nCookie management\nExecution tracing\nUUencode and UUdecode functions\nXML Remote Procedure Calls\ntest_epoll\nSelect kqueue\nSipHash24\nstrtod and dtoa\nOpenSSL\nexpat\nlibffi\nzlib\ncfuhash\nlibmpdec\nW3C C14N test suite\nmimalloc\nasyncio\nGlobal Unbounded Sequences (GUS)\nPrevious topic\nCopyright\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nHistory and License\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/license.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12354.6343993
  },
  {
    "title": "About this documentation¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nAbout this documentation\n|\nTheme\nAuto\nLight\nDark\n|\nAbout this documentation\n¶\nPython’s documentation is generated from\nreStructuredText\nsources\nusing\nSphinx\n, a documentation generator originally created for Python\nand now maintained as an independent project.\nDevelopment of the documentation and its toolchain is an entirely volunteer\neffort, just like Python itself.  If you want to contribute, please take a\nlook at the\nDealing with Bugs\npage for information on how to do so.  New\nvolunteers are always welcome!\nMany thanks go to:\nFred L. Drake, Jr., the creator of the original Python documentation toolset\nand author of much of the content;\nthe\nDocutils\nproject for creating\nreStructuredText and the Docutils suite;\nFredrik Lundh for his Alternative Python Reference project from which Sphinx\ngot many good ideas.\nContributors to the Python documentation\n¶\nMany people have contributed to the Python language, the Python standard\nlibrary, and the Python documentation.  See\nMisc/ACKS\nin the Python\nsource distribution for a partial list of contributors.\nIt is only with the input and contributions of the Python community\nthat Python has such wonderful documentation – Thank You!\nTable of Contents\nAbout this documentation\nContributors to the Python documentation\nPrevious topic\nGlossary\nNext topic\nDealing with Bugs\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nAbout this documentation\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/about.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12354.7056562
  },
  {
    "title": "Changelog¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nWhat’s New in Python\n»\nChangelog\n|\nTheme\nAuto\nLight\nDark\n|\nChangelog\n¶\nPython next\n¶\nRelease date: XXXX-XX-XX\nTools/Demos\n¶\ngh-135968\n: Stubs for\nstrip\nare now provided as part of an iOS install.\nTests\n¶\ngh-135966\n: The iOS testbed now handles the\napp_packages\nfolder as a\nsite directory.\ngh-135494\n: Fix regrtest to support excluding tests from\n--pgo\ntests.\nPatch by Victor Stinner.\ngh-135489\n: Show verbose output for failing tests during PGO profiling step\nwith –enable-optimizations.\nSecurity\n¶\ngh-135661\n: Fix parsing start and end tags in\nhtml.parser.HTMLParser\naccording to the HTML5 standard.\nWhitespaces no longer accepted between\n</\nand the tag name.\nE.g.\n</\nscript>\ndoes not end the script section.\nVertical tabulation (\n\\v\n) and non-ASCII whitespaces no longer recognized\nas whitespaces. The only whitespaces are\n\\t\\n\\r\\f\nand space.\nNull character (U+0000) no longer ends the tag name.\nAttributes and slashes after the tag name in end tags are now ignored,\ninstead of terminating after the first\n>\nin quoted attribute value.\nE.g.\n</script/foo=\">\"/>\n.\nMultiple slashes and whitespaces between the last attribute and closing\n>\nare now ignored in both start and end tags. E.g.\n<a\nfoo=bar/\n//>\n.\nMultiple\n=\nbetween attribute name and value are no longer collapsed.\nE.g.\n<a\nfoo==bar>\nproduces attribute “foo” with value “=bar”.\ngh-102555\n: Fix comment parsing in\nhtml.parser.HTMLParser\naccording to the HTML5 standard.\n--!>\nnow ends the comment.\n--\n>\nno longer ends the comment. Support abnormally ended empty comments\n<-->\nand\n<--->\n.\ngh-135462\n: Fix quadratic complexity in processing specially crafted input\nin\nhtml.parser.HTMLParser\n. End-of-file errors are now handled\naccording to the HTML5 specs – comments and declarations are\nautomatically closed, tags are ignored.\ngh-118350\n: Fix support of escapable raw text mode (elements “textarea” and\n“title”) in\nhtml.parser.HTMLParser\n.\nLibrary\n¶\ngh-130522\n: Fix unraisable\nTypeError\nraised during\ninterpreter shutdown\nin the\nthreading\nmodule.\ngh-130577\n:\ntarfile\nnow validates archives to ensure member offsets\nare non-negative.  (Contributed by Alexander Enrique Urieles Nieto in\ngh-130577\n.)\ngh-136549\n: Fix signature of\nthreading.excepthook()\n.\ngh-136523\n: Fix\nwave.Wave_write\nemitting an unraisable when open\nraises.\ngh-52876\n: Add missing\nkeepends\n(default\nTrue\n) parameter to\ncodecs.StreamReaderWriter.readline()\nand\ncodecs.StreamReaderWriter.readlines()\n.\ngh-85702\n: If\nzoneinfo._common.load_tzdata\nis given a package without a\nresource a\nzoneinfo.ZoneInfoNotFoundError\nis raised rather than a\nPermissionError\n. Patch by Victor Stinner.\ngh-134759\n: Fix\nUnboundLocalError\nin\nemail.message.Message.get_payload()\nwhen the payload to decode is a\nbytes\nobject. Patch by Kliment Lamonov.\ngh-136028\n: Fix parsing month names containing “İ” (U+0130, LATIN CAPITAL\nLETTER I WITH DOT ABOVE) in\ntime.strptime()\n. This affects locales\naz_AZ, ber_DZ, ber_MA and crh_UA.\ngh-135995\n: In the palmos encoding, make byte\n0x9b\ndecode to\n›\n(U+203A - SINGLE RIGHT-POINTING ANGLE QUOTATION MARK).\ngh-53203\n: Fix\ntime.strptime()\nfor\n%c\nand\n%x\nformats on\nlocales byn_ER, wal_ET and lzh_TW, and for\n%X\nformat on locales ar_SA,\nbg_BG and lzh_TW.\ngh-91555\n: An earlier change, which was introduced in 3.13.4, has been\nreverted. It disabled logging for a logger during handling of log messages\nfor that logger. Since the reversion, the behaviour should be as it was\nbefore 3.13.4.\ngh-135878\n: Fixes a crash of\ntypes.SimpleNamespace\non\nfree\nthreading\nbuilds, when several threads were calling its\n__repr__()\nmethod at the same time.\ngh-135836\n: Fix\nIndexError\nin\nasyncio.loop.create_connection()\nthat could occur when non-\nOSError\nexception is raised during\nconnection and socket’s\nclose()\nraises\nOSError\n.\ngh-135836\n: Fix\nIndexError\nin\nasyncio.loop.create_connection()\nthat could occur when the Happy Eyeballs algorithm resulted in an empty\nexceptions list during connection attempts.\ngh-135855\n: Raise\nTypeError\ninstead of\nSystemError\nwhen\n_interpreters.set___main___attrs()\nis passed a non-dict object.\nPatch by Brian Schubert.\ngh-135815\n:\nnetrc\n: skip security checks if\nos.getuid()\nis\nmissing. Patch by Bénédikt Tran.\ngh-135640\n: Address bug where it was possible to call\nxml.etree.ElementTree.ElementTree.write()\non an ElementTree object\nwith an invalid root element. This behavior blanked the file passed to\nwrite\nif it already existed.\ngh-135497\n: Fix\nos.getlogin()\nfailing for longer usernames on\nBSD-based platforms.\ngh-135487\n: Fix\nreprlib.Repr.repr_int()\nwhen given integers with\nmore than\nsys.get_int_max_str_digits()\ndigits. Patch by Bénédikt\nTran.\ngh-135335\n:\nmultiprocessing\n: Flush\nstdout\nand\nstderr\nafter\npreloading modules in the\nforkserver\n.\ngh-135069\n: Fix the “Invalid error handling” exception in\nencodings.idna.IncrementalDecoder\nto correctly replace the\n‘errors’ parameter.\ngh-134698\n: Fix a crash when calling methods of\nssl.SSLContext\nor\nssl.SSLSocket\nacross multiple threads.\ngh-133439\n: Fix dot commands with trailing spaces are mistaken for\nmulti-line SQL statements in the sqlite3 command-line interface.\ngh-132969\n: Prevent the\nProcessPoolExecutor\nexecutor thread, which remains running when\nshutdown(wait=False)\n, from attempting to adjust the\npool’s worker processes after the object state has already been reset\nduring shutdown. A combination of conditions, including a worker process\nhaving terminated abormally, resulted in an exception and a potential hang\nwhen the still-running executor thread attempted to replace dead workers\nwithin the pool.\ngh-130664\n: Support the\n'_'\ndigit separator in formatting of the\nintegral part of\nDecimal\n’s.  Patch by Sergey B\nKirpichev.\ngh-85702\n: If\nzoneinfo._common.load_tzdata\nis given a package without a\nresource a\nZoneInfoNotFoundError\nis raised rather than a\nIsADirectoryError\n.\ngh-130664\n: Handle corner-case for\nFraction\n’s\nformatting: treat zero-padding (preceding the width field by a zero\n(\n'0'\n) character) as an equivalent to a fill character of\n'0'\nwith\nan alignment type of\n'='\n, just as in case of\nfloat\n’s.\nDocumentation\n¶\ngh-136155\n: EPUB builds are fixed by excluding non-XHTML-compatible tags.\ngh-135171\n: Document that the\niterator\nfor the leftmost\nfor\nclause in the generator expression is created immediately.\nCore and Builtins\n¶\ngh-136541\n: Fix some issues with the perf trampolines on x86-64 and\naarch64.  The trampolines were not being generated correctly for some\ncases, which could lead to the perf integration not working correctly.\nPatch by Pablo Galindo.\ngh-109700\n: Fix memory error handling in\nPyDict_SetDefault()\n.\ngh-78465\n: Fix error message for\ncls.__new__(cls,\n...)\nwhere\ncls\nis\nnot instantiable builtin or extension type (with\ntp_new\nset to\nNULL\n).\ngh-135871\n: Non-blocking mutex lock attempts now return immediately when\nthe lock is busy instead of briefly spinning in the\nfree threading\nbuild.\ngh-135607\n: Fix potential\nweakref\nraces in an object’s destructor on\nthe\nfree threaded\nbuild.\ngh-135496\n: Fix typo in the f-string conversion type error (“exclamanation”\n-> “exclamation”).\ngh-135148\n: Fixed a bug where f-string debug expressions (using =) would\nincorrectly strip out parts of strings containing escaped quotes and #\ncharacters. Patch by Pablo Galindo.\ngh-132617\n: Fix\ndict.update()\nmodification check that could\nincorrectly raise a “dict mutated during update” error when a different\ndictionary was modified that happens to share the same underlying keys\nobject.\ngh-91153\n: Fix a crash when a\nbytearray\nis concurrently mutated\nduring item assignment.\ngh-127971\n: Fix off-by-one read beyond the end of a string in string\nsearch.\ngh-125723\n: Fix crash with\ngi_frame.f_locals\nwhen generator frames\noutlive their generator. Patch by Mikhail Efimov.\nBuild\n¶\ngh-135497\n: Fix the detection of\nMAXLOGNAME\nin the\nconfigure.ac\nscript.\nPython 3.13.5 final\n¶\nRelease date: 2025-06-11\nWindows\n¶\ngh-135151\n: Avoid distributing modified\npyconfig.h\nin the\ntraditional installer. Extension module builds must always specify\nPy_GIL_DISABLED\nwhen targeting the free-threaded runtime.\nTests\n¶\ngh-135120\n: Add\ntest.support.subTests()\n.\nLibrary\n¶\ngh-133967\n: Do not normalize\nlocale\nname ‘C.UTF-8’ to ‘en_US.UTF-8’.\ngh-135326\n: Restore support of integer-like objects with\n__index__()\nin\nrandom.getrandbits()\n.\ngh-135321\n: Raise a correct exception for values greater than 0x7fffffff\nfor the\nBINSTRING\nopcode in the C implementation of\npickle\n.\ngh-135276\n: Backported bugfixes in zipfile.Path from zipp 3.23. Fixed\n.name\n,\n.stem\nand other basename-based properties on Windows when\nworking with a zipfile on disk.\ngh-134151\n:\nemail\n: Fix\nTypeError\nin\nemail.utils.decode_params()\nwhen sorting\nRFC 2231\ncontinuations\nthat contain an unnumbered section.\ngh-134152\n:\nemail\n: Fix parsing of email message ID with invalid\ndomain.\ngh-127081\n: Fix libc thread safety issues with\nos\nby replacing\ngetlogin\nwith\ngetlogin_r\nre-entrant version.\ngh-131884\n: Fix formatting issues in\njson.dump()\nwhen both\nindent\nand\nskipkeys\nare used.\nCore and Builtins\n¶\ngh-135171\n: Roll back changes to generator and list comprehensions that\nwent into 3.13.4 to fix\ngh-127682\n, but which involved semantic and\nbytecode changes not appropriate for a bugfix release.\nC API\n¶\ngh-134989\n: Fix\nPy_RETURN_NONE\n,\nPy_RETURN_TRUE\nand\nPy_RETURN_FALSE\nmacros in the limited C API 3.11 and older: don’t\ntreat\nPy_None\n,\nPy_True\nand\nPy_False\nas immortal. Patch by\nVictor Stinner.\ngh-134989\n: Implement\nPyObject_DelAttr()\nand\nPyObject_DelAttrString()\nas macros in the limited C API 3.12 and\nolder. Patch by Victor Stinner.\nPython 3.13.4 final\n¶\nRelease date: 2025-06-03\nWindows\n¶\ngh-130727\n: Fix a race in internal calls into WMI that can result in an\n“invalid handle” exception under high load. Patch by Chris Eibl.\ngh-76023\n: Make\nos.path.realpath()\nignore Windows error 1005 when in\nnon-strict mode.\ngh-133626\n: Ensures packages are not accidentally bundled into the\ntraditional installer.\ngh-133512\n: Add warnings to\nPython Launcher for Windows\nabout use of subcommands\nbelonging to the Python install manager.\nTests\n¶\ngh-133744\n: Fix multiprocessing interrupt test. Add an event to synchronize\nthe parent process with the child process: wait until the child process\nstarts sleeping. Patch by Victor Stinner.\ngh-133639\n: Fix\nTestPyReplAutoindent.test_auto_indent_default()\ndoesn’t\nrun\ninput_code\n.\ngh-133131\n: The iOS testbed will now select the most recently released\n“SE-class” device for testing if a device isn’t explicitly specified.\ngh-109981\n: The test helper that counts the list of open file descriptors\nnow uses the optimised\n/dev/fd\napproach on all Apple platforms, not\njust macOS. This avoids crashes caused by guarded file descriptors.\nSecurity\n¶\ngh-135034\n: Fixes multiple issues that allowed\ntarfile\nextraction\nfilters (\nfilter=\"data\"\nand\nfilter=\"tar\"\n) to be bypassed using\ncrafted symlinks and hard links.\nAddresses\nCVE 2024-12718\n,\nCVE 2025-4138\n,\nCVE 2025-4330\n, and\nCVE 2025-4517\n.\ngh-133767\n: Fix use-after-free in the “unicode-escape” decoder with a\nnon-“strict” error handler.\ngh-128840\n: Short-circuit the processing of long IPv6 addresses early in\nipaddress\nto prevent excessive memory consumption and a minor\ndenial-of-service.\nLibrary\n¶\ngh-134718\n:\nast.dump()\nnow only omits\nNone\nand\n[]\nvalues if\nthey are default values.\ngh-128840\n: Fix parsing long IPv6 addresses with embedded IPv4 address.\ngh-134696\n: Built-in HACL* and OpenSSL implementations of hash function\nconstructors now correctly accept the same\ndocumented\nnamed arguments.\nFor instance,\nmd5()\ncould be previously invoked as\nmd5(data=data)\nor\nmd5(string=string)\ndepending on the underlying\nimplementation but these calls were not compatible. Patch by Bénédikt\nTran.\ngh-134210\n:\ncurses.window.getch()\nnow correctly handles signals.\nPatch by Bénédikt Tran.\ngh-80334\n:\nmultiprocessing.freeze_support()\nnow checks for work on\nany “spawn” start method platform rather than only on Windows.\ngh-114177\n: Fix\nasyncio\nto not close subprocess pipes which would\notherwise error out when the event loop is already closed.\ngh-134152\n: Fixed\nUnboundLocalError\nthat could occur during\nemail\nheader parsing if an expected trailing delimiter is missing\nin some contexts.\ngh-62184\n: Remove import of C implementation of\nio.FileIO\nfrom\nPython implementation which has its own implementation\ngh-133982\n: Emit\nRuntimeWarning\nin the Python implementation of\nio\nwhen the\nfile-like object\nis not closed\nexplicitly in the presence of multiple I/O layers.\ngh-133890\n: The\ntarfile\nmodule now handles\nUnicodeEncodeError\nin the same way as\nOSError\nwhen cannot extract a member.\ngh-134097\n: Fix interaction of the new\nREPL\nand\n-X\nshowrefcount\ncommand line option.\ngh-133889\n: The generated directory listing page in\nhttp.server.SimpleHTTPRequestHandler\nnow only shows the decoded\npath component of the requested URL, and not the query and fragment.\ngh-134098\n: Fix handling paths that end with a percent-encoded slash\n(\n%2f\nor\n%2F\n) in\nhttp.server.SimpleHTTPRequestHandler\n.\ngh-134062\n:\nipaddress\n: fix collisions in\n__hash__()\nfor\nIPv4Network\nand\nIPv6Network\nobjects.\ngh-133745\n: In 3.13.3 we accidentally changed the signature of the asyncio\ncreate_task()\nfamily of methods and how it calls a custom task factory\nin a backwards incompatible way. Since some 3rd party libraries have\nalready made changes to work around the issue that might break if we\nsimply reverted the changes, we’re instead changing things to be backwards\ncompatible with 3.13.2 while still supporting those workarounds for\n3.13.3. In particular, the special-casing of\nname\nand\ncontext\nis\nback (until 3.14) and consequently eager tasks may still find that their\nname hasn’t been set before they execute their first yielding await.\ngh-71253\n: Raise\nValueError\nin\nopen()\nif\nopener\nreturns a\nnegative file-descriptor in the Python implementation of\nio\nto\nmatch the C implementation.\ngh-77057\n: Fix handling of invalid markup declarations in\nhtml.parser.HTMLParser\n.\ngh-133489\n:\nrandom.getrandbits()\ncan now generate more that 2\n31\nbits.\nrandom.randbytes()\ncan now generate more that 256\nMiB.\ngh-133290\n: Fix attribute caching issue when setting\nctypes._Pointer._type_\nin the undocumented and deprecated\nctypes.SetPointerType()\nfunction and the undocumented\nset_type()\nmethod.\ngh-132876\n:\nldexp()\non Windows doesn’t round subnormal results before\nWindows 11, but should.  Python’s\nmath.ldexp()\nwrapper now does\nround them, so results may change slightly, in rare cases of very small\nresults, on Windows versions before 11.\ngh-133089\n: Use original timeout value for\nsubprocess.TimeoutExpired\nwhen the func\nsubprocess.run()\nis called with a timeout instead of\nsometimes a confusing partial remaining time out value used internally on\nthe final\nwait()\n.\ngh-133009\n:\nxml.etree.ElementTree\n: Fix a crash in\nElement.__deepcopy__\nwhen the element is\nconcurrently mutated. Patch by Bénédikt Tran.\ngh-132995\n: Bump the version of pip bundled in ensurepip to version 25.1.1\ngh-132017\n: Fix error when\npyrepl\nis suspended, then resumed and\nterminated.\ngh-132673\n: Fix a crash when using\n_align_\n=\n0\nand\n_fields_\n=\n[]\nin\na\nctypes.Structure\n.\ngh-132527\n: Include the valid typecode ‘w’ in the error message when an\ninvalid typecode is passed to\narray.array\n.\ngh-132439\n: Fix\nPyREPL\non Windows: characters entered via AltGr are\nswallowed. Patch by Chris Eibl.\ngh-132429\n: Fix support of Bluetooth sockets on NetBSD and DragonFly BSD.\ngh-132106\n:\nQueueListener.start\nnow raises a\nRuntimeError\nif the listener is already started.\ngh-132417\n: Fix a\nNULL\npointer dereference when a C function called\nusing\nctypes\nwith\nrestype\npy_object\nreturns\nNULL\n.\ngh-132385\n: Fix instance error suggestions trigger potential exceptions in\nobject.__getattr__()\nin\ntraceback\n.\ngh-132308\n: A\ntraceback.TracebackException\nnow correctly renders\nthe\n__context__\nand\n__cause__\nattributes from\nfalsey\nException\n, and the\nexceptions\nattribute from falsey\nExceptionGroup\n.\ngh-132250\n: Fixed the\nSystemError\nin\ncProfile\nwhen locating\nthe actual C function of a method raises an exception.\ngh-132063\n: Prevent exceptions that evaluate as falsey (namely, when their\n__bool__\nmethod returns\nFalse\nor their\n__len__\nmethod returns\n0) from being ignored by\nconcurrent.futures.ProcessPoolExecutor\nand\nconcurrent.futures.ThreadPoolExecutor\n.\ngh-119605\n: Respect\nfollow_wrapped\nfor\n__init__()\nand\n__new__()\nmethods when getting the class signature for a class with\ninspect.signature()\n. Preserve class signature after wrapping with\nwarnings.deprecated()\n. Patch by Xuehai Pan.\ngh-91555\n: Ignore log messages generated during handling of log messages,\nto avoid deadlock or infinite recursion. [NOTE: This change has since been\nreverted.]\ngh-131434\n: Improve error reporting for incorrect format in\ntime.strptime()\n.\ngh-131127\n: Systems using LibreSSL now successfully build.\ngh-130999\n: Avoid exiting the new REPL and offer suggestions even if there\nare non-string candidates when errors occur.\ngh-130941\n: Fix\nconfigparser.ConfigParser\nparsing empty\ninterpolation with\nallow_no_value\nset to\nTrue\n.\ngh-129098\n: Fix REPL traceback reporting when using\ncompile()\nwith an\ninexisting file. Patch by Bénédikt Tran.\ngh-130631\n:\nhttp.cookiejar.join_header_words()\nis now more similar\nto the original Perl version. It now quotes the same set of characters and\nalways quote values that end with\n\"\\n\"\n.\ngh-129719\n: Fix missing\nsocket.CAN_RAW_ERR_FILTER\nconstant in the\nsocket module on Linux systems. It was missing since Python 3.11.\ngh-124096\n: Turn on virtual terminal mode and enable bracketed paste in\nREPL on Windows console. (If the terminal does not support bracketed\npaste, enabling it does nothing.)\ngh-122559\n: Remove\n__reduce__()\nand\n__reduce_ex__()\nmethods\nthat always raise\nTypeError\nin the C implementation of\nio.FileIO\n,\nio.BufferedReader\n,\nio.BufferedWriter\nand\nio.BufferedRandom\nand replace them with default\n__getstate__()\nmethods that raise\nTypeError\n. This restores\nfine details of behavior of Python 3.11 and older versions.\ngh-122179\n:\nhashlib.file_digest()\nnow raises\nBlockingIOError\nwhen no data is available during non-blocking I/O. Before, it added\nspurious null bytes to the digest.\ngh-86155\n:\nhtml.parser.HTMLParser.close()\nno longer loses data when\nthe\n<script>\ntag is not closed. Patch by Waylan Limberg.\ngh-69426\n: Fix\nhtml.parser.HTMLParser\nto not unescape character\nentities in attribute values if they are followed by an ASCII alphanumeric\nor an equals sign.\nbpo-44172\n: Keep a reference to original\ncurses\nwindows in\nsubwindows so that the original window does not get deleted before\nsubwindows.\nIDLE\n¶\ngh-112936\n: fix IDLE: no Shell menu item in single-process mode.\nDocumentation\n¶\ngh-107006\n: Move documentation and example code for\nthreading.local\nfrom its docstring to the official docs.\nCore and Builtins\n¶\ngh-134908\n: Fix crash when iterating over lines in a text file on the\nfree threaded\nbuild.\ngh-127682\n: No longer call\n__iter__\ntwice in list comprehensions. This\nbrings the behavior of list comprehensions in line with other forms of\niteration\ngh-134381\n: Fix\nRuntimeError\nwhen using a not-started\nthreading.Thread\nafter calling\nos.fork()\ngh-128066\n: Fixes an edge case where PyREPL improperly threw an error when\nPython is invoked on a read only filesystem while trying to write history\nfile entries.\ngh-134100\n: Fix a use-after-free bug that occurs when an imported module\nisn’t in\nsys.modules\nafter its initial import. Patch by\nNico-Posada.\ngh-133703\n: Fix hashtable in dict can be bigger than intended in some\nsituations.\ngh-132869\n: Fix crash in the\nfree threading\nbuild when accessing an\nobject attribute that may be concurrently inserted or deleted.\ngh-132762\n:\nfromkeys()\nno longer loops forever when adding a\nsmall set of keys to a large base dict. Patch by Angela Liss.\ngh-133543\n: Fix a possible memory leak that could occur when directly\naccessing instance dictionaries (\n__dict__\n) that later become part of a\nreference cycle.\ngh-133516\n: Raise\nValueError\nwhen constants\nTrue\n,\nFalse\nor\nNone\nare used as an identifier after NFKC normalization.\ngh-133441\n: Fix crash upon setting an attribute with a\ndict\nsubclass. Patch by Victor Stinner.\ngh-132942\n: Fix two races in the type lookup cache.  This affected the\nfree-threaded build and could cause crashes (apparently quite difficult to\ntrigger).\ngh-132713\n: Fix\nrepr(list)\nrace condition: hold a strong reference to\nthe item while calling\nrepr(item)\n. Patch by Victor Stinner.\ngh-132747\n: Fix a crash when calling\n__get__()\nof a\nmethod\nwith a\nNone\nsecond argument.\ngh-132542\n: Update\nThread.native_id\nafter\nfork(2)\nto ensure accuracy. Patch by Noam Cohen.\ngh-124476\n: Fix decoding from the locale encoding in the C.UTF-8 locale.\ngh-131927\n: Compiler warnings originating from the same module and line\nnumber are now only emitted once, matching the behaviour of warnings\nemitted from user code. This can also be configured with\nwarnings\nfilters.\ngh-127682\n: No longer call\n__iter__\ntwice when creating and executing a\ngenerator expression. Creating a generator expression from a non-interable\nwill raise only when the generator expression is executed. This brings the\nbehavior of generator expressions in line with other generators.\ngh-131878\n: Handle uncaught exceptions in the main input loop for the new\nREPL.\ngh-131878\n: Fix support of unicode characters with two or more codepoints\non Windows in the new REPL.\ngh-130804\n: Fix support of unicode characters on Windows in the new REPL.\ngh-130070\n: Fixed an assertion error for\nexec()\npassed a string\nsource\nand a non-\nNone\nclosure\n. Patch by Bartosz Sławecki.\ngh-129958\n: Fix a bug that was allowing newlines inconsitently in format\nspecifiers for single-quoted f-strings. Patch by Pablo Galindo.\nC API\n¶\ngh-132909\n: Fix an overflow when handling the\nK\nformat in\nPy_BuildValue()\n. Patch by\nBénédikt Tran.\nBuild\n¶\ngh-134923\n: Windows builds with profile-guided optimization enabled now use\n/GENPROFILE\nand\n/USEPROFILE\ninstead of deprecated\n/LTCG:\noptions.\ngh-133183\n: iOS compiler shims now include\nIPHONEOS_DEPLOYMENT_TARGET\nin target triples, ensuring that SDK version minimums are honored.\ngh-133167\n: Fix compilation process with\n--enable-optimizations\nand\n--without-docstrings\n.\ngh-132649\n: The\nPClayout\nscript now allows passing\n--include-tcltk\non Windows ARM64.\ngh-117088\n: AIX linker don’t support -h option, so avoid it through\nplatform check\ngh-132026\n: Fix use of undefined identifiers in platform triplet detection\non MIPS Linux platforms.\nPython 3.13.3 final\n¶\nRelease date: 2025-04-08\nmacOS\n¶\ngh-124111\n: Update macOS installer to use Tcl/Tk 8.6.16.\ngh-131423\n: Update macOS installer to use OpenSSL 3.0.16. Patch by Bénédikt\nTran.\ngh-131025\n: Update macOS installer to ship with SQLite 3.49.1.\ngh-91132\n: Update macOS installer to use ncurses 6.5.\nWindows\n¶\ngh-131423\n: Update bundled version of OpenSSL to 3.0.16. The new build also\ndisables uplink support, which may be relevant to embedders but has no\nimpact on normal use.\ngh-131025\n: Update Windows installer to ship with SQLite 3.49.1.\ngh-131020\n:\npylauncher\ncorrectly detects a BOM\nwhen searching for the shebang. Fix by Chris Eibl.\nTools/Demos\n¶\ngh-131852\n:\nmsgfmt\nno longer adds the\nPOT-Creation-Date\nto\ngenerated\n.mo\nfiles for consistency with GNU\nmsgfmt\n.\ngh-85012\n: Correctly reset\nmsgctxt\nwhen compiling messages in\nmsgfmt\n.\ngh-130025\n: The iOS testbed now correctly handles symlinks used as Python\nframework references.\nTests\n¶\ngh-131050\n:\ntest_ssl.test_dh_params\nis skipped if the underlying TLS\nlibrary does not support finite-field ephemeral Diffie-Hellman.\ngh-129200\n: Multiple iOS testbed runners can now be started at the same\ntime without introducing an ambiguity over simulator ownership.\ngh-130292\n: The iOS testbed will now run successfully on a machine that has\nnot previously run Xcode tests (such as CI configurations).\ngh-130293\n: The tests of terminal colorization are no longer sensitive to\nthe value of the\nTERM\nvariable in the testing environment.\ngh-126332\n: Add unit tests for pyrepl.\nSecurity\n¶\ngh-131809\n: Update bundled libexpat to 2.7.1\ngh-131261\n: Upgrade to libexpat 2.7.0\ngh-127371\n: Avoid unbounded buffering for\ntempfile.SpooledTemporaryFile.writelines()\n. Previously, disk\nspillover was only checked after the lines iterator had been exhausted.\nThis is now done after each line is written.\ngh-121284\n: Fix bug in the folding of rfc2047 encoded-words when flattening\nan email message using a modern email policy. Previously when an\nencoded-word was too long for a line, it would be decoded, split across\nlines, and re-encoded. But commas and other special characters in the\noriginal text could be left unencoded and unquoted. This could\ntheoretically be used to spoof header lines using a carefully constructed\nencoded-word if the resulting rendered email was transmitted or re-parsed.\nLibrary\n¶\ngh-132174\n: Fix function name in error message of\n_interpreters.run_string\n.\ngh-132171\n: Fix crash of\n_interpreters.run_string\non string subclasses.\ngh-129204\n: Introduce new\n_PYTHON_SUBPROCESS_USE_POSIX_SPAWN\nenvironment variable knob in\nsubprocess\nto control the use of\nos.posix_spawn()\n.\ngh-132159\n: Do not shadow user arguments in generated\n__new__()\nby\ndecorator\nwarnings.deprecated\n. Patch by Xuehai Pan.\ngh-132075\n: Fix possible use of\nsocket\naddress structures with\nuninitialized members. Now all structure members are initialized with\nzeroes by default.\ngh-132002\n: Fix crash when deallocating\ncontextvars.ContextVar\nwith weird unahashable string names.\ngh-131668\n:\nsocket\n: Fix code parsing AF_BLUETOOTH socket addresses.\ngh-131492\n: Fix a resource leak when constructing a\ngzip.GzipFile\nwith a filename fails, for example when passing an invalid\ncompresslevel\n.\ngh-131325\n: Fix sendfile fallback implementation to drain data after\nwriting to transport in\nasyncio\n.\ngh-129843\n: Fix incorrect argument passing in\nwarnings.warn_explicit()\n.\ngh-131204\n: Use monospace font from System Font Stack for cross-platform\nsupport in\ndifflib.HtmlDiff\n.\ngh-130940\n: The\nPyConfig.use_system_logger\nattribute, introduced in\nPython 3.13.2, has been removed. The introduction of this attribute\ninadvertently introduced an ABI breakage on macOS and iOS. The use of the\nsystem logger is now enabled by default on iOS, and disabled by default on\nmacOS.\ngh-131045\n: Fix issue with\n__contains__\n, values, and pseudo-members for\nenum.Flag\n.\ngh-130959\n: Fix pure-Python implementation of\ndatetime.time.fromisoformat()\nto reject times with spaces in\nfractional part (for example,\n12:34:56.400\n+02:00\n), matching the C\nimplementation. Patch by Michał Gorny.\ngh-130637\n: Add validation for numeric response data in poplib.POP3.stat()\nmethod\ngh-130461\n: Remove\n..\nindex::\ndirectives from the\nuuid\nmodule\ndocumentation. These directives previously created entries in the general\nindex for\ngetnode()\nas well as the\nuuid1()\n,\nuuid3()\n,\nuuid4()\n, and\nuuid5()\nconstructor functions.\ngh-130379\n: The zipapp module now calculates the list of files to be added\nto the archive before creating the archive. This avoids accidentally\nincluding the target when it is being created in the source directory.\ngh-130285\n: Fix corner case for\nrandom.sample()\nallowing the\ncounts\nparameter to specify an empty population. So now,\nsample([],\n0,\ncounts=[])\nand\nsample('abc',\nk=0,\ncounts=[0,\n0,\n0])\nboth give the\nsame result as\nsample([],\n0)\n.\ngh-130250\n: Fix regression in\ntraceback.print_last()\n.\ngh-130230\n: Fix crash in\npow()\nwith only\nDecimal\nthird argument.\ngh-118761\n: Reverts a change in the previous release attempting to make\nsome stdlib imports used within the\nsubprocess\nmodule lazy as this\nwas causing errors during\n__del__\nfinalizers calling methods such as\nterminate\n, or\nkill\n, or\nsend_signal\n.\ngh-130164\n: Fixed failure to raise\nTypeError\nin\ninspect.Signature.bind()\nfor positional-only arguments provided by\nkeyword when a variadic keyword argument (e.g.\n**kwargs\n) is present.\ngh-130151\n: Fix reference leaks in\n_hashlib.hmac_new()\nand\n_hashlib.hmac_digest()\n. Patch by Bénédikt Tran.\ngh-130145\n: Fix\nasyncio.AbstractEventloop.run_forever()\nwhen another\nloop is already running.\ngh-129726\n: Fix\ngzip.GzipFile\nraising an unraisable exception\nduring garbage collection when referring to a temporary object by breaking\nthe reference loop with\nweakref\n.\ngh-127750\n: Remove broken\nfunctools.singledispatchmethod()\ncaching\nintroduced in\ngh-85160\n.\ngh-129583\n: Update bundled pip to 25.0.1\ngh-97850\n: Update the deprecation warning of\nimportlib.abc.Loader.load_module()\n.\ngh-129646\n: Update the locale alias mapping in the\nlocale\nmodule to\nmatch the latest X Org locale alias mapping and support new locales in\nGlibc 2.41.\ngh-129603\n: Fix bugs where\nsqlite3.Row\nobjects could segfault if\ntheir inherited\ndescription\nwas set to\nNone\n.\nPatch by Erlend Aasland.\ngh-128231\n: Execution of multiple statements in the new REPL now stops\nimmediately upon the first exception encountered. Patch by Bartosz\nSławecki.\ngh-117779\n: Fix reading duplicated entries in\nzipfile\nby name.\nReading duplicated entries (except the last one) by\nZipInfo\nnow emits\na warning instead of raising an exception.\ngh-128772\n: Fix\npydoc\nfor methods with the\n__module__\nattribute\nequal to\nNone\n.\ngh-92897\n: Scheduled the deprecation of the\ncheck_home\nargument of\nsysconfig.is_python_build()\nto Python 3.15.\ngh-128657\n: Fix possible extra reference when using objects returned by\nhashlib.sha256()\nunder\nfree threading\n.\ngh-128703\n: Fix\nmimetypes.guess_type()\nto use default mapping for\nempty\nContent-Type\nin registry.\ngh-128308\n: Support the\nname\nkeyword argument for eager tasks in\nasyncio.loop.create_task()\n,\nasyncio.create_task()\nand\nasyncio.TaskGroup.create_task()\n, by passing on all\nkwargs\nto the\ntask factory set by\nasyncio.loop.set_task_factory()\n.\ngh-128388\n: Fix\nPyREPL\non Windows to support more keybindings, like the\nControl\n-\n←\nand\nControl\n-\n→\nword-skipping keybindings and those\nwith meta (i.e.\nAlt\n), e.g.\nAlt\n-\nd\nto\nkill-word\nor\nAlt\n-\nBackspace\nbackward-kill-word\n.\ngh-126037\n:\nxml.etree.ElementTree\n: Fix a crash in\nElement.find\n,\nElement.findtext\nand\nElement.findall\nwhen the\ntag to find implements an\n__eq__()\nmethod mutating the\nelement being queried. Patch by Bénédikt Tran.\ngh-127712\n: Fix handling of the\nsecure\nargument of\nlogging.handlers.SMTPHandler\n.\ngh-126033\n:\nxml.etree.ElementTree\n: Fix a crash in\nElement.remove\nwhen the\nelement is concurrently mutated. Patch by Bénédikt Tran.\ngh-118201\n: Fixed intermittent failures of\nos.confstr\n,\nos.pathconf\nand\nos.sysconf\non iOS and Android.\ngh-124927\n: Non-printing characters are now properly handled in the new\nREPL.\nIDLE\n¶\ngh-129873\n: Simplify displaying the IDLE doc by only copying the text\nsection of idle.html to idlelib/help.html. Patch by Stan Ulbrych.\nDocumentation\n¶\ngh-131417\n: Mention\nasyncio.Future\nand\nasyncio.Task\nin\ngeneric classes list.\ngh-125722\n: Require Sphinx 8.2.0 or later to build the Python\ndocumentation. Patch by Adam Turner.\ngh-129712\n: The wheel tags supported by each macOS universal SDK option are\nnow documented.\ngh-46236\n: C API: Document\nPyUnicode_RSplit()\n,\nPyUnicode_Partition()\nand\nPyUnicode_RPartition()\n.\nCore and Builtins\n¶\ngh-132011\n: Fix crash when calling\nlist.append()\nas an unbound\nmethod.\ngh-131998\n: Fix a crash when using an unbound method\ndescriptor\nobject in a function where a bound method descriptor was used.\ngh-131988\n: Fix a performance regression that caused scaling bottlenecks in\nthe free threaded build in 3.13.1 and 3.13.2.\ngh-131719\n: Fix missing NULL check in\n_PyMem_FreeDelayed\nin\nfree-threaded\nbuild.\ngh-131670\n: Fix\nanext()\nfailing on sync\n__anext__()\nraising an exception.\ngh-131141\n: Fix data race in\nsys.monitoring\ninstrumentation while\nregistering callback.\ngh-130932\n: Fix incorrect exception handling in\n_PyModule_IsPossiblyShadowing\ngh-130851\n: Fix a crash in the\nfree threading\nbuild when\nconstructing a\ncode\nobject with\nco_consts\nthat contains instances of types that are not otherwise generated by the\nbytecode compiler.\ngh-130794\n: Fix memory leak in the\nfree threaded\nbuild when resizing a shared list or dictionary from multiple short-lived\nthreads.\ngh-130775\n: Do not crash on negative\ncolumn\nand\nend_column\nin\nast\nlocations.\ngh-130382\n: Fix\nPyRefTracer_DESTROY\nnot being sent from\nPython/ceval.c\nPy_DECREF()\n.\ngh-130618\n: Fix a bug that was causing\nUnicodeDecodeError\nor\nSystemError\nto be raised when using f-strings with\nlambda\nexpressions with non-ASCII characters. Patch by Pablo Galindo\ngh-130163\n: Fix possible crashes related to concurrent change and use of\nthe\nsys\nmodule attributes.\ngh-88887\n: Fixing multiprocessing Resource Tracker process leaking, usually\nobserved when running Python as PID 1.\ngh-130115\n: Fix an issue with thread identifiers being sign-extended on\nsome platforms.\ngh-128396\n: Fix a crash that occurs when calling\nlocals()\ninside an\ninline comprehension that uses the same local variable as the outer frame\nscope where the variable is a free or cell var.\ngh-116042\n: Fix location for SyntaxErrors of invalid escapes in the\ntokenizer. Patch by Pablo Galindo\ngh-129983\n: Fix data race in compile_template in\nsre.c\n.\ngh-129967\n: Fix a race condition in the\nfree threading\nbuild when\nrepr(set)\nis called concurrently with\nset.clear()\n.\ngh-129900\n: Fix return codes inside\nSystemExit\nnot getting returned\nby the REPL.\ngh-129732\n: Fixed a race in\n_Py_qsbr_reserve\nin the free threading\nbuild.\ngh-129643\n: Fix thread safety of\nPyList_Insert()\nin free-threading\nbuilds.\ngh-129668\n: Fix race condition when raising\nMemoryError\nin the free\nthreaded build.\ngh-129643\n: Fix thread safety of\nPyList_SetItem()\nin free-threading\nbuilds. Patch by Kumar Aditya.\ngh-128714\n: Fix the potential races in get/set dunder methods\n__annotations__\n,\n__annotate__\nand\n__type_params__\nfor function\nobject, and add related tests.\ngh-128632\n: Disallow\n__classdict__\nas the name of a type parameter.\nUsing this name would previously crash the interpreter in some\ncircumstances.\ngh-127953\n: The time to handle a\nLINE\nevent in sys.monitoring (and\nsys.settrace) is now independent of the number of lines in the code\nobject.\ngh-125331\n:\nfrom\n__future__\nimport\nbarry_as_FLUFL\nnow works in more\ncontexts, including when it is used in files, with the\n-c\nflag, and in\nthe REPL when there are multiple statements on the same line. Previously,\nit worked only on subsequent lines in the REPL, and when the appropriate\nflags were passed directly to\ncompile()\n. Patch by Pablo Galindo.\nC API\n¶\ngh-131740\n: Update PyUnstable_GC_VisitObjects to traverse perm gen.\ngh-129533\n: Update\nPyGC_Enable()\n,\nPyGC_Disable()\n,\nPyGC_IsEnabled()\nto use atomic operation for thread-safety at\nfree-threading build. Patch by Donghee Na.\nBuild\n¶\ngh-131865\n: The DTrace build now properly passes the\nCC\nand\nCFLAGS\nvariables to the\ndtrace\ncommand when utilizing SystemTap on Linux.\ngh-131675\n: Fix mimalloc library builds for 32-bit ARM targets.\ngh-130673\n: Fix potential\nKeyError\nwhen handling object sections during\nJIT building process.\ngh-130740\n: Ensure that\nPython.h\nis included before\nstdbool.h\nunless\npyconfig.h\nis included before or in some platform-specific\ncontexts.\ngh-129838\n: Don’t redefine\n_Py_NO_SANITIZE_UNDEFINED\nwhen compiling\nwith a recent GCC version and undefined sanitizer enabled.\ngh-129660\n: Drop\ntest_embed\nfrom PGO training, whose contribution in\nrecent versions is considered to be ignorable.\nPython 3.13.2 final\n¶\nRelease date: 2025-02-04\nmacOS\n¶\ngh-127592\n: Usage of the unified Apple System Log APIs was disabled when\nthe minimum macOS version is earlier than 10.12.\nWindows\n¶\ngh-127353\n: Allow to force color output on Windows using environment\nvariables. Patch by Andrey Efremov.\nTools/Demos\n¶\ngh-129248\n: The iOS test runner now strips the log prefix from each line\noutput by the test suite.\ngh-128152\n: Fix a bug where Argument Clinic’s C pre-processor parser tried\nto parse pre-processor directives inside C comments. Patch by Erlend\nAasland.\nTests\n¶\ngh-127906\n: Test the limited C API in test_cppext. Patch by Victor Stinner.\ngh-127637\n: Add tests for the\ndis\ncommand-line interface. Patch by\nBénédikt Tran.\ngh-126925\n: iOS test results are now streamed during test execution, and\nthe deprecated xcresulttool is no longer used.\nSecurity\n¶\ngh-105704\n: When using\nurllib.parse.urlsplit()\nand\nurllib.parse.urlparse()\nhost parsing would not reject domain names\ncontaining square brackets (\n[\nand\n]\n). Square brackets are only\nvalid for IPv6 and IPvFuture hosts according to\nRFC 3986 Section 3.2.2\n.\ngh-127655\n: Fixed the\nasyncio.selector_events._SelectorSocketTransport\ntransport not\npausing writes for the protocol when the buffer reaches the high water\nmark when using\nasyncio.WriteTransport.writelines()\n.\ngh-126108\n: Fix a possible\nNULL\npointer dereference in\nPySys_AddWarnOptionUnicode()\n.\ngh-80222\n: Fix bug in the folding of quoted strings when flattening an\nemail message using a modern email policy. Previously when a quoted string\nwas folded so that it spanned more than one line, the surrounding quotes\nand internal escapes would be omitted. This could theoretically be used to\nspoof header lines using a carefully constructed quoted string if the\nresulting rendered email was transmitted or re-parsed.\ngh-119511\n: Fix a potential denial of service in the\nimaplib\nmodule.\nWhen connecting to a malicious server, it could cause an arbitrary amount\nof memory to be allocated. On many systems this is harmless as unused\nvirtual memory is only a mapping, but if this hit a virtual address size\nlimit it could lead to a\nMemoryError\nor other process crash. On\nunusual systems or builds where all allocated memory is touched and backed\nby actual ram or storage it could’ve consumed resources doing so until\nsimilarly crashing.\nLibrary\n¶\ngh-129502\n: Unlikely errors in preparing arguments for\nctypes\ncallback are now handled in the same way as errors raised in the callback\nof in converting the result of the callback – using\nsys.unraisablehook()\ninstead of\nsys.excepthook()\nand not\nsetting\nsys.last_exc\nand other variables.\ngh-129403\n: Corrected\nValueError\nmessage for\nasyncio.Barrier\nand\nthreading.Barrier\n.\ngh-129409\n: Fix an integer overflow in the\ncsv\nmodule when writing a\ndata field larger than 2GB.\ngh-118761\n: Improve import time of\nsubprocess\nby lazy importing\nlocale\nand\nsignal\n. Patch by Taneli Hukkinen.\ngh-129346\n: In\nsqlite3\n, handle out-of-memory when creating\nuser-defined SQL functions.\ngh-129061\n: Fix FORCE_COLOR and NO_COLOR when empty strings. Patch by Hugo\nvan Kemenade.\ngh-128550\n: Removed an incorrect optimization relating to eager tasks in\nasyncio.TaskGroup\nthat resulted in cancellations being missed.\ngh-128991\n: Release the enter frame reference within\nbdb\ncallback\ngh-128978\n: Fix a\nNameError\nin\nsysconfig.expand_makefile_vars()\n. Patch by Bénédikt Tran.\ngh-128961\n: Fix a crash when setting state on an exhausted\narray.array\niterator.\ngh-128894\n: Fix\ntraceback.TracebackException._format_syntax_error\nnot\nto fail on exceptions with custom metadata.\ngh-128916\n: Do not attempt to set\nSO_REUSEPORT\non sockets of address\nfamilies other than\nAF_INET\nand\nAF_INET6\n, as it is meaningless\nwith these address families, and the call with fail with Linux kernel\n6.12.9 and newer.\ngh-128679\n: Fix\ntracemalloc.stop()\nrace condition. Fix\ntracemalloc\nto support calling\ntracemalloc.stop()\nin one\nthread, while another thread is tracing memory allocations. Patch by\nVictor Stinner.\ngh-128636\n: Fix PyREPL failure when\nos.environ\nis overwritten with\nan invalid value.\ngh-128562\n: Fix possible conflicts in generated\ntkinter\nwidget names\nif the widget class name ends with a digit.\ngh-128498\n: Default to stdout isatty for color detection instead of stderr.\nPatch by Hugo van Kemenade.\ngh-128552\n: Fix cyclic garbage introduced by\nasyncio.loop.create_task()\nand\nasyncio.TaskGroup.create_task()\nholding a reference to the created task if it is eager.\ngh-128479\n: Fix\nasyncio.staggered.staggered_race()\nleaking tasks and\nissuing an unhandled exception.\ngh-128400\n: Fix crash when using\nfaulthandler.dump_traceback()\nwhile\nother threads are active on the\nfree threaded\nbuild.\ngh-88834\n: Unify the instance check for\ntyping.Union\nand\ntypes.UnionType\n:\nUnion\nnow uses the instance checks\nagainst its parameters instead of the subclass checks.\ngh-128302\n: Fix\nxml.dom.xmlbuilder.DOMEntityResolver.resolveEntity()\n, which was\nbroken by the Python 3.0 transition.\ngh-128302\n: Allow\nxml.dom.xmlbuilder.DOMParser.parse()\nto correctly\nhandle\nxml.dom.xmlbuilder.DOMInputSource\ninstances that only\nhave a\nsystemId\nattribute set.\ngh-112064\n: Fix incorrect handling of negative read sizes in\nHTTPResponse.read\n. Patch by Yury\nManushkin.\ngh-58956\n: Fixed a frame reference leak in\nbdb\n.\ngh-128131\n: Completely support random access of uncompressed unencrypted\nread-only zip files obtained by\nZipFile.open\n.\ngh-112328\n:\nenum.EnumDict\ncan now be used without resorting to\nprivate API.\ngh-127975\n: Avoid reusing quote types in\nast.unparse()\nif not needed.\ngh-128062\n: Revert the font of\nturtledemo\n’s menu bar to its default\nvalue and display the shortcut keys in the correct position.\ngh-128014\n: Fix resetting the default window icon by passing\ndefault=''\nto the\ntkinter\nmethod\nwm_iconbitmap()\n.\ngh-115514\n: Fix exceptions and incomplete writes after\nasyncio._SelectorTransport\nis closed before writes are\ncompleted.\ngh-41872\n: Fix quick extraction of module docstrings from a file in\npydoc\n. It now supports docstrings with single quotes, escape\nsequences, raw string literals, and other Python syntax.\ngh-127060\n: Set TERM environment variable to “dumb” to disable traceback\ncolors in IDLE, since IDLE doesn’t understand ANSI escape sequences. Patch\nby Victor Stinner.\ngh-126742\n: Fix support of localized error messages reported by\ndlerror(3)\nand\ngdbm_strerror\nin\nctypes\nand\ndbm.gnu\nfunctions respectively. Patch by Bénédikt\nTran.\ngh-127873\n: When\n-E\nis set, only ignore\nPYTHON_COLORS\nand not\nFORCE_COLOR\n/\nNO_COLOR\n/\nTERM\nwhen colourising output. Patch by\nHugo van Kemenade.\ngh-127870\n: Detect recursive calls in ctypes\n_as_parameter_\nhandling.\nPatch by Victor Stinner.\ngh-127847\n: Fix the position when doing interleaved seeks and reads in\nuncompressed, unencrypted zip files returned by\nzipfile.ZipFile.open()\n.\ngh-127732\n: The\nplatform\nmodule now correctly detects Windows Server\n2025.\ngh-126821\n: macOS and iOS apps can now choose to redirect stdout and stderr\nto the system log during interpreter configuration.\ngh-93312\n: Include\n<sys/pidfd.h>\nto get\nos.PIDFD_NONBLOCK\nconstant.\nPatch by Victor Stinner.\ngh-83662\n: Add missing\n__class_getitem__\nmethod to the Python\nimplementation of\nfunctools.partial()\n, to make it compatible with\nthe C version. This is mainly relevant for alternative Python\nimplementations like PyPy and GraalPy, because CPython will usually use\nthe C-implementation of that function.\ngh-127586\n:\nmultiprocessing.pool.Pool\nnow properly restores\nblocked signal handlers of the parent thread when creating processes via\neither\nspawn\nor\nforkserver\n.\ngh-98188\n: Fix an issue in\nemail.message.Message.get_payload()\nwhere\ndata cannot be decoded if the Content Transfer Encoding mechanism contains\ntrailing whitespaces or additional junk text. Patch by Hui Liu.\ngh-127257\n: In\nssl\n, system call failures that OpenSSL reports using\nERR_LIB_SYS\nare now raised as\nOSError\n.\ngh-127096\n: Do not recreate unnamed section on every read in\nconfigparser.ConfigParser\n. Patch by Andrey Efremov.\ngh-127196\n: Fix crash when dict with keys in invalid encoding were passed\nto several functions in\n_interpreters\nmodule.\ngh-126775\n: Make\nlinecache.checkcache()\nthread safe and GC\nre-entrancy safe.\ngh-126332\n: Fix _pyrepl crash when entering a double CTRL-Z on an\noverflowing line.\ngh-126225\n:\ngetopt\nand\noptparse\nare no longer marked as\ndeprecated. There are legitimate reasons to use one of these modules in\npreference to\nargparse\n, and none of these modules are at risk of\nbeing removed from the standard library. Of the three,\nargparse\nremains the recommended default choice,\nunless\none of the concerns noted\nat the top of the\noptparse\nmodule documentation applies.\ngh-125553\n: Fix round-trip invariance for backslash continuations in\ntokenize.untokenize()\n.\ngh-123987\n: Fixed issue in NamespaceReader where a non-path item in a\nnamespace path, such as a sentinel added by an editable installer, would\nbreak resource loading.\ngh-123401\n: The\nhttp.cookies\nmodule now supports parsing obsolete\nRFC 850\ndate formats, in accordance with\nRFC 9110\nrequirements.\nPatch by Nano Zheng.\ngh-122431\n:\nreadline.append_history_file()\nnow raises a\nValueError\nwhen given a negative value.\ngh-119257\n: Show tab completions menu below the current line, which results\nin less janky behaviour, and fixes a cursor movement bug. Patch by Daniel\nHollas\nDocumentation\n¶\ngh-125722\n: Require Sphinx 8.1.3 or later to build the Python\ndocumentation. Patch by Adam Turner.\ngh-67206\n: Document that\nstring.printable\nis not printable in the\nPOSIX sense. In particular,\nstring.printable.isprintable()\nreturns\nFalse\n. Patch by Bénédikt Tran.\nCore and Builtins\n¶\ngh-129345\n: Fix null pointer dereference in\nsyslog.openlog()\nwhen an\naudit hook raises an exception.\ngh-129093\n: Fix f-strings such as\nf'{expr=}'\nsometimes not displaying\nthe full expression when the expression contains\n!=\n.\ngh-124363\n: Treat debug expressions in f-string as raw strings. Patch by\nPablo Galindo\ngh-128799\n: Add frame of\nexcept*\nto traceback when it wraps a naked\nexception.\ngh-128078\n: Fix a\nSystemError\nwhen using\nanext()\nwith a\ndefault tuple value. Patch by Bénédikt Tran.\ngh-128717\n: Fix a crash when setting the recursion limit while other\nthreads are active on the\nfree threaded\nbuild.\ngh-128330\n: Restore terminal control characters on REPL exit.\ngh-128079\n: Fix a bug where\nexcept*\ndoes not\nproperly check the return value of an\nExceptionGroup\n’s\nsplit()\nfunction, leading to a crash in some\ncases. Now when\nsplit()\nreturns an invalid\nobject,\nexcept*\nraises a\nTypeError\nwith\nthe original raised\nExceptionGroup\nobject chained to it.\ngh-128030\n: Avoid error from calling\nPyModule_GetFilenameObject\non a\nnon-module object when importing a non-existent symbol from a non-module\nobject.\ngh-127903\n:\nObjects/unicodeobject.c\n: fix a crash on DEBUG builds in\n_copy_characters\nwhen there is nothing to copy.\ngh-127599\n: Fix statistics for increments of object reference counts (in\nparticular, when a reference count was increased by more than 1 in a\nsingle operation).\ngh-127651\n: When raising\nImportError\nfor missing symbols in\nfrom\nimports, use\n__file__\nin the error message if\n__spec__.origin\nis\nnot a location\ngh-127582\n: Fix non-thread-safe object resurrection when calling finalizers\nand watcher callbacks in the free threading build.\ngh-127434\n: The iOS compiler shims can now accept arguments with spaces.\ngh-127536\n: Add missing locks around some list assignment operations in the\nfree threading build.\ngh-126862\n: Fix a possible overflow when a class inherits from an absurd\nnumber of super-classes. Reported by Valery Fedorenko. Patch by Bénédikt\nTran.\ngh-127349\n: Fixed the error when resizing terminal in Python REPL. Patch by\nSemyon Moroz.\ngh-126076\n: Relocated objects such as\ntuple\n,\nbytes\nand\nstr\nobjects are properly tracked by\ntracemalloc\nand its associated\nhooks. Patch by Pablo Galindo.\nC API\n¶\ngh-127791\n: Fix loss of callbacks after more than one call to\nPyUnstable_AtExit()\n.\nBuild\n¶\ngh-129539\n: Don’t redefine\nEX_OK\nwhen the system has the\nsysexits.h\nheader.\ngh-128472\n: Skip BOLT optimization of functions using computed gotos,\nfixing errors on build with LLVM 19.\ngh-123925\n: Fix building the\ncurses\nmodule on platforms with\nlibncurses but without libncursesw.\ngh-128321\n: Set\nLIBS\ninstead of\nLDFLAGS\nwhen checking if\nsqlite3\nlibrary functions are available. This fixes the ordering of\nlinked libraries during checks, which was incorrect when using a\nstatically linked\nlibsqlite3\n.\ngh-127865\n: Fix build failure on systems without thread-locals support.\nPython 3.13.1 final\n¶\nRelease date: 2024-12-03\nmacOS\n¶\ngh-124448\n: Update bundled Tcl/Tk in macOS installer to 8.6.15.\nWindows\n¶\ngh-126911\n: Update credits command output.\ngh-118973\n: Ensures the experimental free-threaded install includes the\n_tkinter\nmodule. The optional Tcl/Tk component must also be installed\nin order for the module to work.\ngh-126497\n: Fixes venv failure due to missing redirector executables in\nexperimental free-threaded installs.\ngh-126074\n: Removed unnecessary DLLs from Windows embeddable package\ngh-125315\n: Avoid crashing in\nplatform\ndue to slow WMI calls on some\nWindows machines.\ngh-126084\n: Fix venvwlauncher to launch pythonw instead of python so no\nextra console window is created.\ngh-125842\n: Fix a\nSystemError\nwhen\nsys.exit()\nis called with\n0xffffffff\non Windows.\ngh-125550\n: Enable the\nPython Launcher for Windows\nto detect Python 3.14 installs from\nthe Windows Store.\ngh-124448\n: Updated bundled Tcl/Tk to 8.6.15.\nTools/Demos\n¶\ngh-126807\n: Fix extraction warnings in\npygettext.py\ncaused by\nmistaking function definitions for function calls.\ngh-126167\n: The iOS testbed was modified so that it can be used by\nthird-party projects for testing purposes.\nTests\n¶\ngh-126909\n: Fix test_os extended attribute tests to work on filesystems\nwith 1 KiB xattr size limit.\ngh-125041\n: Re-enable skipped tests for\nzlib\non the s390x\narchitecture: only skip checks of the compressed bytes, which can be\ndifferent between zlib’s software implementation and the\nhardware-accelerated implementation.\ngh-124295\n: Add translation tests to the\nargparse\nmodule.\nSecurity\n¶\ngh-126623\n: Upgrade libexpat to 2.6.4\ngh-125140\n: Remove the current directory from\nsys.path\nwhen using\nPyREPL.\ngh-122792\n: Changed IPv4-mapped\nipaddress.IPv6Address\nto consistently\nuse the mapped IPv4 address value for deciding properties. Properties\nwhich have their behavior fixed are\nis_multicast\n,\nis_reserved\n,\nis_link_local\n,\nis_global\n, and\nis_unspecified\n.\nLibrary\n¶\ngh-127321\n:\npdb.set_trace()\nwill not stop at an opcode that does not\nhave an associated line number anymore.\ngh-127303\n: Publicly expose\nEXACT_TOKEN_TYPES\nin\ntoken.__all__\n.\ngh-123967\n: Fix faulthandler for trampoline frames. If the top-most frame\nis a trampoline frame, skip it. Patch by Victor Stinner.\ngh-127182\n: Fix\nio.StringIO.__setstate__()\ncrash, when\nNone\nwas passed as the first value.\ngh-127217\n: Fix\nurllib.request.pathname2url()\nfor paths starting with\nmultiple slashes on Posix.\ngh-127035\n: Fix\nshutil.which\non Windows. Now it looks at direct\nmatch if and only if the command ends with a PATHEXT extension or X_OK is\nnot in mode. Support extensionless files if “.” is in PATHEXT. Support\nPATHEXT extensions that end with a dot.\ngh-122273\n: Support PyREPL history on Windows. Patch by devdanzin and\nVictor Stinner.\ngh-127078\n: Fix issue where\nurllib.request.url2pathname()\nfailed to\ndiscard an extra slash before a UNC drive in the URL path on Windows.\ngh-126766\n: Fix issue where\nurllib.request.url2pathname()\nfailed to\ndiscard any ‘localhost’ authority present in the URL.\ngh-127065\n: Fix crash when calling a\noperator.methodcaller()\ninstance\nfrom multiple threads in the free threading build.\ngh-126997\n: Fix support of STRING and GLOBAL opcodes with non-ASCII\narguments in\npickletools\n.\npickletools.dis()\nnow outputs\nnon-ASCII bytes in STRING, BINSTRING and SHORT_BINSTRING arguments as\nescaped (\n\\xXX\n).\ngh-126316\n:\ngrp\n: Make\ngrp.getgrall()\nthread-safe by adding a\nmutex. Patch by Victor Stinner.\ngh-126618\n: Fix the representation of\nitertools.count\nobjects when\nthe count value is\nsys.maxsize\n.\ngh-85168\n: Fix issue where\nurllib.request.url2pathname()\nand\npathname2url()\nalways used UTF-8 when quoting and\nunquoting file URIs. They now use the\nfilesystem encoding and error\nhandler\n.\ngh-67877\n: Fix memory leaks when\nregular\nexpression\nmatching\nterminates abruptly, either because of a signal or because memory\nallocation fails.\ngh-126789\n: Fixed the values of\nsysconfig.get_config_vars()\n,\nsysconfig.get_paths()\n, and their siblings when the\nsite\ninitialization happens after\nsysconfig\nhas built a cache for\nsysconfig.get_config_vars()\n.\ngh-126188\n: Update bundled pip to 24.3.1\ngh-126780\n: Fix\nos.path.normpath()\nfor drive-relative paths on\nWindows.\ngh-126766\n: Fix issue where\nurllib.request.url2pathname()\nfailed to\ndiscard two leading slashes introducing an empty authority section.\ngh-126727\n:\nlocale.nl_langinfo(locale.ERA)\nnow returns multiple era\ndescription segments separated by semicolons. Previously it only returned\nthe first segment on platforms with Glibc.\ngh-126699\n: Allow\ncollections.abc.AsyncIterator\nto be a base for\nProtocols.\ngh-126654\n: Fix crash when non-dict was passed to several functions in\n_interpreters\nmodule.\ngh-104745\n: Limit starting a patcher (from\nunittest.mock.patch()\nor\nunittest.mock.patch.object()\n) more than once without stopping it\ngh-126595\n: Fix a crash when instantiating\nitertools.count\nwith an\ninitial count of\nsys.maxsize\non debug builds. Patch by Bénédikt\nTran.\ngh-120423\n: Fix issue where\nurllib.request.pathname2url()\nmishandled\nWindows paths with embedded forward slashes.\ngh-126565\n: Improve performances of\nzipfile.Path.open()\nfor\nnon-reading modes.\ngh-126505\n: Fix bugs in compiling case-insensitive\nregular\nexpressions\nwith character classes containing non-BMP characters:\nupper-case non-BMP character did was ignored and the ASCII flag was\nignored when matching a character range whose upper bound is beyond the\nBMP region.\ngh-117378\n: Fixed the\nmultiprocessing\n\"forkserver\"\nstart method\nforkserver process to correctly inherit the parent’s\nsys.path\nduring the importing of\nmultiprocessing.set_forkserver_preload()\nmodules in the same manner as\nsys.path\nis configured in workers\nbefore executing work items.\nThis bug caused some forkserver module preloading to silently fail to\npreload. This manifested as a performance degration in child processes\nwhen the\nsys.path\nwas required due to additional repeated work in\nevery worker.\nIt could also have a side effect of\n\"\"\nremaining in\nsys.path\nduring forkserver preload imports instead of the absolute path from\nos.getcwd()\nat multiprocessing import time used in the worker\nsys.path\n.\nThe\nsys.path\ndifferences between phases in the child process could\npotentially have caused preload to import incorrect things from the wrong\nlocation.  We are unaware of that actually having happened in practice.\ngh-125679\n: The\nmultiprocessing.Lock\nand\nmultiprocessing.RLock\nrepr\nvalues no longer say “unknown” on\nmacOS.\ngh-126476\n: Raise\ncalendar.IllegalMonthError\n(now a subclass of\nIndexError\n) for\ncalendar.month()\nwhen the input month is\nnot correct.\ngh-126489\n: The Python implementation of\npickle\nno longer calls\npickle.Pickler.persistent_id()\nfor the result of\npersistent_id()\n.\ngh-126313\n: Fix an issue in\ncurses.napms()\nwhen\ncurses.initscr()\nhas not yet been called. Patch by Bénédikt Tran.\ngh-126303\n: Fix pickling and copying of\nos.sched_param\nobjects.\ngh-126138\n: Fix a use-after-free crash on\nasyncio.Task\nobjects\nwhose underlying coroutine yields an object that implements an evil\n__getattribute__()\n. Patch by Nico Posada.\ngh-126220\n: Fix crash in\ncProfile.Profile\nand\n_lsprof.Profiler\nwhen their callbacks were directly called with\n0 arguments.\ngh-126212\n: Fix issue where\nurllib.request.pathname2url()\nand\nurl2pathname()\nremoved slashes from Windows DOS\ndrive paths and URLs.\ngh-126223\n: Raise a\nUnicodeEncodeError\ninstead of a\nSystemError\nupon calling\n_interpreters.create()\nwith an\ninvalid Unicode character.\ngh-126205\n: Fix issue where\nurllib.request.pathname2url()\ngenerated\nURLs beginning with four slashes (rather than two) when given a Windows\nUNC path.\ngh-126105\n: Fix a crash in\nast\nwhen the\nast.AST._fields\nattribute is deleted.\ngh-126106\n: Fixes a possible\nNULL\npointer dereference in\nssl\n.\ngh-126080\n: Fix a use-after-free crash on\nasyncio.Task\nobjects for\nwhich the underlying event loop implements an evil\n__getattribute__()\n. Reported by Nico-Posada. Patch by\nBénédikt Tran.\ngh-126083\n: Fixed a reference leak in\nasyncio.Task\nobjects when\nreinitializing the same object with a non-\nNone\ncontext. Patch by Nico\nPosada.\ngh-125984\n: Fix use-after-free crashes on\nasyncio.Future\nobjects\nfor which the underlying event loop implements an evil\n__getattribute__()\n. Reported by Nico-Posada. Patch by\nBénédikt Tran.\ngh-125969\n: Fix an out-of-bounds crash when an evil\nasyncio.loop.call_soon()\nmutates the length of the internal\ncallbacks list. Patch by Bénédikt Tran.\ngh-125966\n: Fix a use-after-free crash in\nasyncio.Future.remove_done_callback()\n. Patch by Bénédikt Tran.\ngh-125789\n: Fix possible crash when mutating list of callbacks returned by\nasyncio.Future._callbacks\n. It now always returns a new copy in C\nimplementation\n_asyncio\n. Patch by Kumar Aditya.\ngh-124452\n: Fix an issue in\nemail.policy.EmailPolicy.header_source_parse()\nand\nemail.policy.Compat32.header_source_parse()\nthat introduced spurious\nleading whitespaces into header values when the header includes a newline\ncharacter after the header name delimiter (\n:\n) and before the value.\ngh-125884\n: Fixed the bug for\npdb\nwhere it can’t set breakpoints on\nfunctions with certain annotations.\ngh-125355\n: Fix several bugs in\nargparse.ArgumentParser.parse_intermixed_args()\n.\nThe parser no longer changes temporarily during parsing.\nDefault values are not processed twice.\nRequired mutually exclusive groups containing positional arguments are now supported.\nThe missing arguments report now includes the names of all required optional and positional arguments.\nUnknown options can be intermixed with positional arguments in parse_known_intermixed_args().\ngh-125666\n: Avoid the exiting the interpreter if a null byte is given as\ninput in the new REPL.\ngh-125710\n: [Enum] fix hashable<->nonhashable comparisons for member values\ngh-125631\n: Restore ability to set\npersistent_id\nand\npersistent_load\nattributes of instances of\nthe\nPickler\nand\nUnpickler\nclasses in the\npickle\nmodule.\ngh-125378\n: Fixed the bug in\npdb\nwhere after a multi-line command,\nan empty line repeats the first line of the multi-line command, instead of\nthe full command.\ngh-125682\n: Reject non-ASCII digits in the Python implementation of\njson.loads()\nconforming to the JSON specification.\ngh-125660\n: Reject invalid unicode escapes for Python implementation of\njson.loads()\n.\ngh-125259\n: Fix the notes removal logic for errors thrown in enum\ninitialization.\ngh-125590\n: Allow\nFrameLocalsProxy\nto delete and pop if the key is not\na fast variable.\ngh-125519\n: Improve traceback if\nimportlib.reload()\nis called with an\nobject that is not a module. Patch by Alex Waygood.\ngh-125451\n: Fix deadlock when\nconcurrent.futures.ProcessPoolExecutor\nshuts down concurrently\nwith an error when feeding a job to a worker process.\ngh-125422\n: Fixed the bug where\npdb\nand\nbdb\ncan step into the\nbottom caller frame.\ngh-100141\n: Fixed the bug where\npdb\nwill be stuck in an infinite\nloop when debugging an empty file.\ngh-125115\n: Fixed a bug in\npdb\nwhere arguments starting with\n-\ncan’t be passed to the debugged script.\ngh-53203\n: Fix\ntime.strptime()\nfor\n%c\n,\n%x\nand\n%X\nformats\nin many locales that use non-ASCII digits, like Persian, Burmese, Odia and\nShan.\ngh-125398\n: Fix the conversion of the\nVIRTUAL_ENV\npath in the\nactivate script in\nvenv\nwhen running in Git Bash for Windows.\ngh-125316\n: Fix using\nfunctools.partial()\nas\nenum.Enum\nmember. A FutureWarning with suggestion to use\nenum.member()\nis now\nemitted when the\npartial\ninstance is used as an enum member.\ngh-125245\n: Fix race condition when importing\ncollections.abc\n, which\ncould incorrectly return an empty module.\ngh-125243\n: Fix data race when creating\nzoneinfo.ZoneInfo\nobjects\nin the free threading build.\ngh-125254\n: Fix a bug where ArgumentError includes the incorrect ambiguous\noption in\nargparse\n.\ngh-125235\n: Keep\ntkinter\nTCL paths in venv pointing to base\ninstallation on Windows.\ngh-61011\n: Fix inheritance of nested mutually exclusive groups from parent\nparser in\nargparse.ArgumentParser\n. Previously, all nested\nmutually exclusive groups lost their connection to the group containing\nthem and were displayed as belonging directly to the parser.\ngh-52551\n: Fix encoding issues in\ntime.strftime()\n, the\nstrftime()\nmethod of the\ndatetime\nclasses\ndatetime\n,\ndate\nand\ntime\nand formatting of these classes. Characters not\nencodable in the current locale are now acceptable in the format string.\nSurrogate pairs and sequence of surrogatescape-encoded bytes are no longer\nrecombinated. Embedded null character no longer terminates the format\nstring.\ngh-125118\n: Don’t copy arbitrary values to\n_Bool\nin the\nstruct\nmodule.\ngh-125069\n: Fix an issue where providing a\npathlib.PurePath\nobject\nas an initializer argument to a second\nPurePath\nobject\nwith a different\nparser\nresulted in arguments to\nthe former object’s initializer being joined by the latter object’s\nparser.\ngh-125096\n: If the\nPYTHON_BASIC_REPL\nenvironment variable is set,\nthe\nsite\nmodule no longer imports the\n_pyrepl\nmodule.\nMoreover, the\nsite\nmodule now respects\n-E\nand\n-I\ncommand line options: ignore\nPYTHON_BASIC_REPL\nin\nthis case. Patch by Victor Stinner.\ngh-124969\n: Fix\nlocale.nl_langinfo(locale.ALT_DIGITS)\non platforms with\nglibc. Now it returns a string consisting of up to 100 semicolon-separated\nsymbols (an empty string in most locales) on all Posix platforms.\nPreviously it only returned the first symbol or an empty string.\ngh-124960\n: Fix support for the\nbarry_as_FLUFL\nfuture flag in the new\nREPL.\ngh-124984\n: Fixed thread safety in\nssl\nin the free-threaded build.\nOpenSSL operations are now protected by a per-object lock.\ngh-124958\n: Fix refcycles in exceptions raised from\nasyncio.TaskGroup\nand the python implementation of\nasyncio.Future\ngh-53203\n: Fix\ntime.strptime()\nfor\n%c\nand\n%x\nformats in many\nlocales: Arabic, Bislama, Breton, Bodo, Kashubian, Chuvash, Estonian,\nFrench, Irish, Ge’ez, Gurajati, Manx Gaelic, Hebrew, Hindi, Chhattisgarhi,\nHaitian Kreyol, Japanese, Kannada, Korean, Marathi, Malay, Norwegian,\nNynorsk, Punjabi, Rajasthani, Tok Pisin, Yoruba, Yue Chinese, Yau/Nungon\nand Chinese.\ngh-124917\n: Allow calling\nos.path.exists()\nand\nos.path.lexists()\nwith keyword arguments on Windows. Fixes a\nregression in 3.13.0.\ngh-124653\n: Fix detection of the minimal Queue API needed by the\nlogging\nmodule. Patch by Bénédikt Tran.\ngh-124858\n: Fix reference cycles left in tracebacks in\nasyncio.open_connection()\nwhen used with\nhappy_eyeballs_delay\ngh-124390\n: Fixed\nAssertionError\nwhen using\nasyncio.staggered.staggered_race()\nwith\nasyncio.eager_task_factory\n.\ngh-124651\n: Properly quote template strings in\nvenv\nactivation\nscripts.\ngh-116850\n: Fix\nargparse\nfor namespaces with not directly writable\ndict (e.g. classes).\ngh-58573\n: Fix conflicts between abbreviated long options in the parent\nparser and subparsers in\nargparse\n.\ngh-124594\n: All\nasyncio\nREPL prompts run in the same\ncontext\n. Contributed by Bartosz Sławecki.\ngh-61181\n: Fix support of\nchoices\nwith string value in\nargparse\n. Substrings of the specified string no longer considered\nvalid values.\ngh-80259\n: Fix\nargparse\nsupport of positional arguments with\nnargs='?'\n,\ndefault=argparse.SUPPRESS\nand specified\ntype\n.\ngh-120378\n: Fix a crash related to an integer overflow in\ncurses.resizeterm()\nand\ncurses.resize_term()\n.\ngh-123884\n: Fixed bug in itertools.tee() handling of other tee inputs (a\ntee in a tee). The output now has the promised\nn\nindependent new\niterators.  Formerly, the first iterator was identical (not independent)\nto the input iterator. This would sometimes give surprising results.\ngh-58956\n: Fixed a bug in\npdb\nwhere sometimes the breakpoint won’t\ntrigger if it was set on a function which is already in the call stack.\ngh-124345\n:\nargparse\nvim supports abbreviated single-dash long\noptions separated by\n=\nfrom its value.\ngh-104860\n: Fix disallowing abbreviation of single-dash long options in\nargparse\nwith\nallow_abbrev=False\n.\ngh-63143\n: Fix parsing mutually exclusive arguments in\nargparse\n.\nArguments with the value identical to the default value (e.g. booleans,\nsmall integers, empty or 1-character strings) are no longer considered\n“not present”.\ngh-72795\n: Positional arguments with\nnargs\nequal to\n'*'\nor\nargparse.REMAINDER\nare no longer required. This allows to use\npositional argument with\nnargs='*'\nand without\ndefault\nin mutually\nexclusive group and improves error message about required arguments.\ngh-59317\n: Fix parsing positional argument with\nnargs\nequal to\n'?'\nor\n'*'\nif it is preceded by an option and another positional\nargument.\ngh-53780\n:\nargparse\nnow ignores the first\n\"--\"\n(double dash)\nbetween an option and command.\ngh-124217\n: Add RFC 9637 reserved IPv6 block\n3fff::/20\nin\nipaddress\nmodule.\ngh-81691\n: Fix handling of multiple\n\"--\"\n(double dashes) in\nargparse\n. Only the first one has now been removed, all subsequent\nones are now taken literally.\ngh-123978\n: Remove broken\ntime.thread_time()\nand\ntime.thread_time_ns()\non NetBSD.\ngh-124008\n: Fix possible crash (in debug build), incorrect output or\nreturning incorrect value from raw binary\nwrite()\nwhen writing to\nconsole on Windows.\ngh-123935\n: Fix parent slots detection for dataclasses that inherit from\nclasses with\n__dictoffset__\n.\ngh-122765\n: Fix unbalanced quote errors occurring when activate.csh in\nvenv\nwas sourced with a custom prompt containing unpaired quotes or\nnewlines.\ngh-123370\n: Fix the canvas not clearing after running turtledemo clock.\ngh-116810\n: Resolve a memory leak introduced in CPython 3.10’s\nssl\nwhen the\nssl.SSLSocket.session\nproperty was accessed.  Speeds up\nread and write access to said property by no longer unnecessarily cloning\nsession objects via serialization.\ngh-120754\n: Update unbounded\nread\ncalls in\nzipfile\nto specify an\nexplicit\nsize\nputting a limit on how much data they may read. This\nalso updates handling around ZIP max comment size to match the standard\ninstead of reading comments that are one byte too long.\ngh-70764\n: Fixed an issue where\ninspect.getclosurevars()\nwould\nincorrectly classify an attribute name as a global variable when the name\nexists both as an attribute name and a global variable.\ngh-118289\n:\nposixpath.realpath()\nnow raises\nNotADirectoryError\nwhen\nstrict\nmode is enabled and a\nnon-directory path with a trailing slash is supplied.\ngh-119826\n: Always return an absolute path for\nos.path.abspath()\non\nWindows.\ngh-117766\n: Always use\nstr()\nto print\nchoices\nin\nargparse\n.\ngh-101955\n: Fix SystemError when match regular expression pattern\ncontaining some combination of possessive quantifier, alternative and\ncapture group.\ngh-88110\n: Fixed\nmultiprocessing.Process\nreporting a\n.exitcode\nof 1 even on success when using the\n\"fork\"\nstart method while using a\nconcurrent.futures.ThreadPoolExecutor\n.\ngh-71936\n: Fix a race condition in\nmultiprocessing.pool.Pool\n.\nbpo-46128\n: Strip\nunittest.IsolatedAsyncioTestCase\nstack frames\nfrom reported stacktraces.\nbpo-14074\n: Fix\nargparse\nmetavar processing to allow positional\narguments to have a tuple metavar.\nIDLE\n¶\ngh-122392\n: Increase currently inadequate vertical spacing for the IDLE\nbrowsers (path, module, and stack) on high-resolution monitors.\nDocumentation\n¶\ngh-126622\n: Added stub pages for removed modules explaining their removal,\nwhere to find replacements, and linking to the last Python version that\nsupported them. Contributed by Ned Batchelder.\ngh-125277\n: Require Sphinx 7.2.6 or later to build the Python\ndocumentation. Patch by Adam Turner.\ngh-124872\n: Added definitions for\ncontext\n,\ncurrent context\n,\nand\ncontext management protocol\n, updated related definitions to be\nconsistent, and expanded the documentation for\ncontextvars.Context\n.\ngh-125018\n: The\nimportlib.metadata\ndocumentation now includes\nsemantic cross-reference targets for the significant documented APIs. This\nmeans intersphinx references like\nimportlib.metadata.version()\nwill\nnow work as expected.\ngh-70870\n: Clarified the dual usage of the term “free variable” (both the\nformal meaning of any reference to names defined outside the local scope,\nand the narrower pragmatic meaning of nonlocal variables named in\nco_freevars\n).\ngh-121277\n: Writers of CPython’s documentation can now use\nnext\nas the\nversion for the\nversionchanged\n,\nversionadded\n,\ndeprecated\ndirectives.\ngh-60712\n: Include the\nobject\ntype in the lists of documented\ntypes. Change by Furkan Onder and Martin Panter.\nbpo-34008\n: The\nPy_Main()\ndocumentation moved from the “Very High\nLevel API” section to the “Initialization and Finalization” section.\nAlso make it explicit that we expect\nPy_Main\nto typically be called\ninstead of\nPy_Initialize\nrather than after it (since\nPy_Main\nmakes\nits own call to\nPy_Initialize\n). Document that calling both is\nsupported but is version dependent on which settings will be applied\ncorrectly.\nCore and Builtins\n¶\ngh-113841\n: Fix possible undefined behavior division by zero in\ncomplex\n’s\n_Py_c_pow()\n.\ngh-127020\n: Fix a crash in the free threading build when\nPyCode_GetCode()\n,\nPyCode_GetVarnames()\n,\nPyCode_GetCellvars()\n, or\nPyCode_GetFreevars()\nwere called\nfrom multiple threads at the same time.\ngh-126980\n: Fix\n__buffer__()\nof\nbytearray\ncrashing\nwhen\nREAD\nor\nWRITE\nare passed as flags.\ngh-126881\n: Fix crash in finalization of dtoa state. Patch by Kumar Aditya.\ngh-126341\n: Now\nValueError\nis raised instead of\nSystemError\nwhen trying to iterate over a released\nmemoryview\nobject.\ngh-126688\n: Fix a crash when calling\nos.fork()\non some operating\nsystems, including SerenityOS.\ngh-126066\n: Fix\nimportlib\nto not write an incomplete .pyc files when\na ulimit or some other operating system mechanism is preventing the write\nto go through fully.\ngh-126312\n: Fix crash during garbage collection on an object frozen by\ngc.freeze()\non the free-threaded build.\ngh-126139\n: Provide better error location when attempting to use a\nfuture statement\nwith an unknown future feature.\ngh-126018\n: Fix a crash in\nsys.audit()\nwhen passing a non-string as\nfirst argument and Python was compiled in debug mode.\ngh-125942\n: On Android, the\nerrors\nsetting of\nsys.stdout\nwas\nchanged from\nsurrogateescape\nto\nbackslashreplace\n.\ngh-125859\n: Fix a crash in the free threading build when\ngc.get_objects()\nor\ngc.get_referrers()\nis called during an\nin-progress garbage collection.\ngh-125703\n: Correctly honour\ntracemalloc\nhooks in specialized\nPy_DECREF\npaths. Patch by Pablo Galindo\ngh-125593\n: Use color to highlight error locations in traceback from\nexception group\ngh-125444\n: Fix illegal instruction for older Arm architectures. Patch by\nDiego Russo, testing by Ross Burton.\ngh-124375\n: Fix a crash in the free threading build when the GC runs\nconcurrently with a new thread starting.\ngh-125221\n: Fix possible race condition when calling\n__reduce_ex__()\nfor the first time in the free threading\nbuild.\ngh-125038\n: Fix crash when iterating over a generator expression after\ndirect changes on\ngi_frame.f_locals\n. Patch by Mikhail Efimov.\ngh-123378\n: Fix a crash in the\n__str__()\nmethod of\nUnicodeError\nobjects when the\nUnicodeError.start\nand\nUnicodeError.end\nvalues are invalid or out-of-range. Patch by\nBénédikt Tran.\ngh-116510\n: Fix a crash caused by immortal interned strings being shared\nbetween sub-interpreters that use basic single-phase init.  In that case,\nthe string can be used by an interpreter that outlives the interpreter\nthat created and interned it.  For interpreters that share obmalloc state,\nalso share the interned dict with the main interpreter.\ngh-122878\n: Use the\npager\nbinary, if available (e.g. on Debian and\nderivatives), to display REPL\nhelp()\n.\ngh-124188\n: Fix reading and decoding a line from the source file witn\nnon-UTF-8 encoding for syntax errors raised in the compiler.\ngh-123930\n: Improve the error message when a script shadowing a module from\nthe standard library causes\nImportError\nto be raised during a\n“from” import. Similarly, improve the error message when a script\nshadowing a third party module attempts to “from” import an attribute from\nthat third party module while still initialising.\ngh-122907\n: Building with\nHAVE_DYNAMIC_LOADING\nnow works as well as it\ndid in 3.12. Existing deficiences will be addressed separately. (See\nhttps://github.com/python/cpython/issues/122950\n.)\ngh-118950\n: Fix bug where SSLProtocol.connection_lost wasn’t getting called\nwhen OSError was thrown on writing to socket.\ngh-113570\n: Fixed a bug in\nreprlib.repr\nwhere it incorrectly called the\nrepr method on shadowed Python built-in types.\ngh-109746\n: If\n_thread.start_new_thread()\nfails to start a new\nthread, it deletes its state from interpreter and thus avoids its repeated\ncleanup on finalization.\nC API\n¶\ngh-126554\n: Fix error handling in\nctypes.CDLL\nobjects which could\nresult in a crash in rare situations.\ngh-125608\n: Fix a bug where dictionary watchers (e.g.,\nPyDict_Watch()\n) on an object’s attribute dictionary\n(\n__dict__\n) were not triggered when the object’s attributes\nwere modified.\nbpo-34008\n: Added\nPy_IsInitialized\nto the list of APIs that are safe to\ncall before the interpreter is initialized, and updated the embedding\ntests to cover it.\nBuild\n¶\ngh-123877\n: Set\nwasm32-wasip1\nas the WASI target. The old\nwasm32-wasi\ntarget is deprecated so it can be used for an eventual\nWASI 1.0.\ngh-89640\n: Hard-code float word ordering as little endian on WASM.\ngh-125940\n: The Android build now supports\n16 KB page sizes\n.\ngh-89640\n: Improve detection of float word ordering on Linux when link-time\noptimizations are enabled.\ngh-125269\n: Fix detection of whether\n-latomic\nis needed when\ncross-compiling CPython using the configure script.\ngh-121634\n: Allow for specifying the target compile triple for WASI.\ngh-122578\n: Use WASI SDK 24 for testing.\ngh-115382\n: Fix cross compile failures when the host and target SOABIs\nmatch.\nPython 3.13.0 final\n¶\nRelease date: 2024-10-07\nCore and Builtins\n¶\ngh-125008\n: Fix\ntokenize.untokenize()\nproducing invalid syntax for\ndouble braces preceded by certain escape characters.\ngh-124871\n: Fix compiler bug (in some versions of 3.13) where an assertion\nfails during reachability analysis.\nPython 3.13.0 release candidate 3\n¶\nRelease date: 2024-10-01\nmacOS\n¶\ngh-123797\n: Check for runtime availability of\nptsname_r\nfunction on\nmacos.\nWindows\n¶\ngh-124609\n: Fix\n_Py_ThreadId\nfor Windows builds using MinGW. Patch by\nTony Roberts.\ngh-124254\n: Ensures experimental free-threaded binaries remain installed\nwhen updating.\ngh-123915\n: Ensure that\nTools\\msi\\buildrelease.bat\nuses different\ndirectories for AMD64 and ARM64 builds.\nTests\n¶\ngh-124378\n: Updated\ntest_ttk\nto pass with Tcl/Tk 8.6.15.\nLibrary\n¶\ngh-124538\n: Fixed crash when using\ngc.get_referents()\non a capsule\nobject.\ngh-124498\n: Fix\ntyping.TypeAliasType\nnot to be generic, when\ntype_params\nis an empty tuple.\ngh-123017\n: Due to unreliable results on some devices,\ntime.strftime()\nno longer accepts negative years on Android.\ngh-123014\n:\nos.pidfd_open()\nand\nsignal.pidfd_send_signal()\nare\nnow unavailable when building against Android API levels older than 31,\nsince the underlying system calls may cause a crash.\ngh-124248\n: Fixed potential crash when using\nstruct\nto process\nzero-width ‘Pascal string’ fields (\n0p\n).\ngh-87041\n: Fix a bug in\nargparse\nwhere lengthy subparser argument\nhelp is incorrectly indented.\ngh-124212\n: Fix invalid variable in\nvenv\nhandling of failed symlink\non Windows\ngh-124171\n: Add workaround for broken\nfmod()\nimplementations on\nWindows, that loose zero sign (e.g.\nfmod(-10,\n1)\nreturns\n0.0\n).\nPatch by Sergey B Kirpichev.\ngh-123934\n: Fix\nunittest.mock.MagicMock\nreseting magic methods\nreturn values after\n.reset_mock(return_value=True)\nwas called.\ngh-123968\n: Fix the command-line interface for the\nrandom\nmodule to\nselect floats between 0 and N, not 1 and N.\ngh-123892\n: Add\n\"_wmi\"\nto\nsys.stdlib_module_names\n. Patch by\nVictor Stinner.\ngh-123339\n: Fix\ninspect.getsource()\nfor classes in\ncollections.abc\nand\ndecimal\n(for pure Python implementation)\nmodules.\ninspect.getcomments()\nnow raises OSError instead of\nIndexError if the\n__firstlineno__\nvalue for a class is out of bound.\ngh-121735\n: When working with zip archives, importlib.resources now\nproperly honors module-adjacent references (e.g.\nfiles(pkg.mod)\nand\nnot just\nfiles(pkg)\n).\ngh-122145\n: Fix an issue when reporting tracebacks corresponding to Python\ncode emitting an empty AST body. Patch by Nikita Sobolev and Bénédikt\nTran.\ngh-119004\n: Fix a crash in\nOrderedDict.__eq__\nwhen operands are mutated during the\ncheck. Patch by Bénédikt Tran.\nbpo-44864\n: Do not translate user-provided strings in\nargparse.ArgumentParser\n.\nIDLE\n¶\ngh-112938\n: Fix uninteruptable hang when Shell gets rapid continuous\noutput.\ngh-120104\n: Fix padding in config and search dialog windows in IDLE.\nDocumentation\n¶\ngh-124720\n: Update “Using Python on a Mac” section of the “Python Setup and\nUsage” document and include information on installing free-threading\nsupport.\ngh-116622\n: Add an Android platform guide, and flag modules not available\non Android.\nCore and Builtins\n¶\ngh-124567\n: Revert the incremental GC (in 3.13), since it’s not clear the\nbenefits outweigh the costs at this point.\ngh-124642\n: Fixed scalability issue in free-threaded builds for lock-free\nreads from dictionaries in multi-threaded scenarios\ngh-116510\n: Fix a bug that can cause a crash when sub-interpreters use\n“basic” single-phase extension modules.  Shared objects could refer to\nPyGC_Head nodes that had been freed as part of interpreter cleanup.\ngh-124547\n: When deallocating an object with inline values whose\n__dict__\nis still live: if memory allocation for the inline values\nfails, clear the dictionary. Prevents an interpreter crash.\ngh-124513\n: Fix a crash in FrameLocalsProxy constructor: check the number\nof arguments. Patch by Victor Stinner.\ngh-124442\n: Fix nondeterminism in compilation by sorting the value of\n__static_attributes__\n. Patch by kp2pml30.\ngh-123856\n: Fix PyREPL failure when a keyboard interrupt is triggered after\nusing a history search\ngh-65961\n: Document the deprecation of setting and using\n__package__\nand\n__cached__\n.\ngh-124027\n: Support\n<page\nup>\n,\n<page\ndown>\n, and\n<delete>\nkeys\nin the Python REPL when\n$TERM\nis set to\nvt100\n.\ngh-77894\n: Fix possible crash in the garbage collector when it tries to\nbreak a reference loop containing a\nmemoryview\nobject. Now a\nmemoryview\nobject can only be cleared if there are no buffers\nthat refer it.\ngh-123339\n: Setting the\n__module__\nattribute for a class now\nremoves the\n__firstlineno__\nitem from the type’s dict, so they will no\nlonger be inconsistent.\nC API\n¶\ngh-124160\n: Fix crash when importing modules containing state and\nsingle-phase initialization in a subinterpreter.\ngh-123880\n: Fixed a bug that prevented circular imports of extension\nmodules that use single-phase initialization.\nBuild\n¶\ngh-124487\n: Windows builds now use Windows 8.1 as their API baseline\n(installation already required Windows 8.1).\ngh-124043\n: Building using\n--with-trace-refs\nis (temporarily)\ndisallowed when the GIL is disabled.\nPython 3.13.0 release candidate 2\n¶\nRelease date: 2024-09-06\nmacOS\n¶\ngh-123418\n: Updated macOS installer build to use OpenSSL 3.0.15.\nWindows\n¶\ngh-123418\n: Updated Windows build to use OpenSSL 3.0.15.\ngh-122573\n: The Windows build of CPython now requires 3.10 or newer.\ngh-100256\n:\nmimetypes\nno longer fails when it encounters an\ninaccessible registry key.\ngh-79846\n: Makes\nssl.create_default_context()\nignore invalid\ncertificates in the Windows certificate store\nTools/Demos\n¶\ngh-123418\n: Update GitHub CI workflows to use OpenSSL 3.0.15 and\nmultissltests to use 3.0.15, 3.1.7, and 3.2.3.\nTests\n¶\ngh-119727\n: Add\n--single-process\ncommand line option to Python test\nrunner (regrtest). Patch by Victor Stinner.\ngh-101525\n: Skip\ntest_gdb\nif the binary is relocated by BOLT. Patch by\nDonghee Na.\nSecurity\n¶\ngh-123678\n: Upgrade libexpat to 2.6.3\ngh-121285\n: Remove backtracking from tarfile header parsing for\nhdrcharset\n, PAX, and GNU sparse headers.\nLibrary\n¶\ngh-123657\n: Fix crash and memory leak in\ndecimal.getcontext()\n. It\ncrashed when using a thread-local context by\n--with-decimal-contextvar=no\n.\ngh-123448\n: Fixed memory leak of\ntyping.NoDefault\nby moving it to\nthe static types array.\ngh-123409\n: Fix\nipaddress.IPv6Address.reverse_pointer\noutput\naccording to\nRFC 3596, §2.5\n.  Patch by Bénédikt\nTran.\ngh-123270\n: Applied a more surgical fix for malformed payloads in\nzipfile.Path\ncausing infinite loops (\ngh-122905\n) without breaking\ncontents using legitimate characters.\ngh-123228\n: Fix return type for\n_pyrepl.readline._ReadlineWrapper.get_line_buffer()\nto be\nstr()\n.  Patch by Sergey B Kirpichev.\ngh-123240\n: Raise audit events for the\ninput()\nin the new REPL.\ngh-123243\n: Fix memory leak in\n_decimal\n.\ngh-122546\n: Consistently use same file name for different exceptions in the\nnew repl. Patch by Sergey B Kirpichev.\ngh-123213\n:\nxml.etree.ElementTree.Element.extend()\nand\nElement\nassignment no longer hide the\ninternal exception if an erronous generator is passed. Patch by Bar Harel.\ngh-85110\n: Preserve relative path in URL without netloc in\nurllib.parse.urlunsplit()\nand\nurllib.parse.urlunparse()\n.\ngh-123067\n: Fix quadratic complexity in parsing\n\"\n-quoted cookie values\nwith backslashes by\nhttp.cookies\n.\ngh-122981\n: Fix\ninspect.getsource()\nfor generated classes with Python\nbase classes (e.g. enums).\ngh-122903\n:\nzipfile.Path.glob\nnow correctly matches directories instead\nof silently omitting them.\ngh-122905\n:\nzipfile.Path\nobjects now sanitize names from the\nzipfile.\ngh-122695\n: Fixed double-free when using\ngc.get_referents()\nwith a\nfreed\nasyncio.Future\niterator.\ngh-116263\n:\nlogging.handlers.RotatingFileHandler\nno longer rolls\nover empty log files.\ngh-105376\n: Restore the deprecated\nlogging\nwarn()\nmethod. It was\nremoved in Python 3.13 alpha 1. Keep the deprecated\nwarn()\nmethod in\nPython 3.13. Patch by Victor Stinner.\ngh-122744\n: Bump the version of pip bundled in ensurepip to version 24.2.\ngh-118814\n: Fix the\ntyping.TypeVar\nconstructor when name is passed\nby keyword.\ngh-122478\n: Remove internal frames from tracebacks shown in\ncode.InteractiveInterpreter\nwith non-default\nsys.excepthook()\n. Save correct tracebacks in\nsys.last_traceback\nand update\n__traceback__\nattribute of\nsys.last_value\nand\nsys.last_exc\n.\ngh-116622\n: On Android, the\nFICLONE\nand\nFICLONERANGE\nconstants are\nno longer exposed by\nfcntl\n, as these ioctls are blocked by SELinux.\ngh-82378\n: Make sure that the new\nREPL\ninterprets\nsys.tracebacklimit\nin the same way that the classic REPL did.\ngh-122334\n: Fix crash when importing\nssl\nafter the main interpreter\nrestarts.\ngh-87320\n: In\ncode.InteractiveInterpreter\n, handle exceptions\ncaused by calling a non-default\nsys.excepthook()\n. Before, the\nexception bubbled up to the caller, ending the\nREPL\n.\ngh-121650\n:\nemail\nheaders with embedded newlines are now quoted on\noutput. The\ngenerator\nwill now refuse to serialize (write)\nheaders that are unsafely folded or delimited; see\nverify_generated_headers\n. (Contributed by Bas\nBloemsaat and Petr Viktorin in\ngh-121650\n.)\ngh-121723\n: Make\nlogging.config.dictConfig()\naccept any object\nimplementing the Queue public API. See the\nqueue configuration\nsection for details. Patch by Bénédikt Tran.\ngh-122081\n: Fix a crash in the\ndecimal.IEEEContext()\noptional\nfunction available via the\nEXTRA_FUNCTIONALITY\nconfiguration flag.\ngh-121804\n: Correctly show error locations, when\nSyntaxError\nraised\nin new repl. Patch by Sergey B Kirpichev.\ngh-121151\n: Fix wrapping of long usage text of arguments inside a mutually\nexclusive group in\nargparse\n.\ngh-108172\n:\nwebbrowser\nhonors OS preferred browser on Linux when its\ndesktop entry name contains the text of a known browser name.\ngh-109109\n: You can now get the raw TLS certificate chains from TLS\nconnections via\nssl.SSLSocket.get_verified_chain()\nand\nssl.SSLSocket.get_unverified_chain()\nmethods.\nContributed by Mateusz Nowak.\nIDLE\n¶\ngh-120083\n: Add explicit black IDLE Hovertip foreground color needed for\nrecent macOS. Fixes Sonoma showing unreadable white on pale yellow.  Patch\nby John Riggles.\nCore and Builtins\n¶\ngh-120221\n: asyncio REPL is now again properly recognizing\nKeyboardInterrupts. Display of exceptions raised in secondary threads is\nfixed.\ngh-119310\n: Allow the new interactive shell to read history files written\nwith the editline library that use unicode-escaped entries.  Patch by\naorcajo and Łukasz Langa.\ngh-123572\n: Fix key mappings for various F-keys in Windows for the new\nREPL. Patch by devdanzin\ngh-119034\n: Change\n<page\nup>\nand\n<page\ndown>\nkeys of the Python\nREPL to history search forward/backward. Patch by Victor Stinner.\ngh-123545\n: Fix a double decref in rare cases on experimental JIT builds.\ngh-123484\n: Fix\n_Py_DebugOffsets\nfor long objects to be relative to the\nstart of the object rather than the start of a subobject.\ngh-123344\n: Add AST optimizations for type parameter defaults.\ngh-123321\n: Prevent Parser/myreadline race condition from segfaulting on\nmulti-threaded use. Patch by Bar Harel and Amit Wienner.\ngh-123177\n: Fix a bug causing stray prompts to appear in the middle of\nwrapped lines in the new REPL.\ngh-122982\n: Extend the deprecation period for bool inversion (\n~\n) by two\nyears.\ngh-123275\n: Support\n-X\ngil=1\nand\nPYTHON_GIL=1\non non-free-threaded builds.\ngh-123177\n: Deactivate line wrap in the Apple Terminal via a ANSI escape\ncode. Patch by Pablo Galindo\ngh-123229\n: Fix valgrind warning by initializing the f-string buffers to 0\nin the tokenizer. Patch by Pablo Galindo\ngh-122298\n: Restore printout of GC stats when\ngc.set_debug(gc.DEBUG_STATS)\nis called. This featue was accidentally\nremoved when implementing incremental GC.\ngh-121804\n: Correctly show error locations when a\nSyntaxError\nis\nraised in the basic REPL. Patch by Sergey B Kirpichev.\ngh-123142\n: Fix too-wide source location in exception tracebacks coming\nfrom broken iterables in comprehensions.\ngh-123048\n: Fix a bug where pattern matching code could emit a\nJUMP_FORWARD\nwith no source location.\ngh-123123\n: Fix displaying\nSyntaxError\nexceptions covering multiple\nlines. Patch by Pablo Galindo\ngh-123083\n: Fix a potential use-after-free in\nSTORE_ATTR_WITH_HINT\n.\ngh-123022\n: Fix crash in free-threaded build when calling\nPy_Initialize()\nfrom a non-main thread.\ngh-122888\n: Fix crash on certain calls to\nstr()\nwith positional\narguments of the wrong type. Patch by Jelle Zijlstra.\ngh-116622\n: Fix Android stdout and stderr messages being truncated or lost.\ngh-122527\n: Fix a crash that occurred when a\nPyStructSequence\nwas\ndeallocated after its type’s dictionary was cleared by the GC.  The type’s\ntp_basicsize\nnow accounts for non-sequence\nfields that aren’t included in the\nPy_SIZE\nof the sequence.\ngh-122445\n: Add only fields which are modified via self.* to\n__static_attributes__\n.\ngh-98442\n: Fix too wide source locations of the cleanup instructions of a\nwith statement.\ngh-93691\n: Fix source locations of instructions generated for with\nstatements.\ngh-120097\n:\nFrameLocalsProxy\nnow subclasses\ncollections.abc.Mapping\nand can be matched as a mapping in\nmatch\nstatements\nC API\n¶\ngh-122728\n: Fix\nPyEval_GetLocals()\nto avoid\nSystemError\n(“bad argument to internal function”). Patch by Victor Stinner.\nBuild\n¶\ngh-123418\n: Updated Android build to use OpenSSL 3.0.15.\ngh-123297\n: Propagate the value of\nLDFLAGS\nto\nLDCXXSHARED\nin\nsysconfig\n. Patch by Pablo Galindo\ngh-116622\n: Rename build variable\nMODULE_LDFLAGS\nback to\nLIBPYTHON\n,\nas it’s used by package build systems (e.g. Meson).\ngh-118943\n: Fix an issue where the experimental JIT could be built several\ntimes by the\nmake\nregen-all\ntarget, leading to possible race\nconditions on heavily parallelized builds.\ngh-118943\n: Fix a possible race condition affecting parallel builds\nconfigured with\n--enable-experimental-jit\n, in which\nFileNotFoundError\ncould be caused by another process already moving\njit_stencils.h.new\nto\njit_stencils.h\n.\nPython 3.13.0 release candidate 1\n¶\nRelease date: 2024-07-31\nTests\n¶\ngh-59022\n: Add tests for\npkgutil.extend_path()\n. Patch by Andreas\nStocker.\ngh-99242\n:\nos.getloadavg()\nmay throw\nOSError\nwhen running\nregression tests under certain conditions (e.g. chroot). This error is now\ncaught and ignored, since reporting load average is optional.\nSecurity\n¶\ngh-122133\n: Authenticate the socket connection for the\nsocket.socketpair()\nfallback on platforms where\nAF_UNIX\nis not\navailable like Windows.\nPatch by Gregory P. Smith <\ngreg\n@\nkrypto\n.\norg\n> and Seth Larson\n<\nseth\n@\npython\n.\norg\n>. Reported by Ellie <\nel\n@\nhorse64\n.\norg\n>\ngh-121957\n: Fixed missing audit events around interactive use of Python,\nnow also properly firing for\npython\n-i\n, as well as for\npython\n-m\nasyncio\n. The events in question are\ncpython.run_stdin\nand\ncpython.run_startup\n.\nLibrary\n¶\ngh-122400\n: Handle\nValueError\ns raised by\nos.stat()\nin\nfilecmp.dircmp\nand\nfilecmp.cmpfiles()\n. Patch by Bénédikt\nTran.\ngh-122311\n: Fix some error messages in\npickle\n.\ngh-122332\n: Fixed segfault with\nasyncio.Task.get_coro()\nwhen using an\neager task factory.\ngh-105733\n:\nctypes.ARRAY()\nis now\nsoft deprecated\n: it no\nlonger emits deprecation warnings and is not scheduled for removal.\ngh-122087\n: Restore\ninspect.ismethoddescriptor()\nand\ninspect.isroutine()\nreturning\nFalse\nfor\nfunctools.partial\nobjects.\ngh-122170\n: Handle\nValueError\ns raised by\nos.stat()\nin\nlinecache\n. Patch by Bénédikt Tran.\ngh-82951\n: Serializing objects with complex\n__qualname__\n(such as\nunbound methods and nested classes) by name no longer involves serializing\nparent objects by value in pickle protocols < 4.\ngh-113785\n:\ncsv\nnow correctly parses numeric fields (when used with\ncsv.QUOTE_NONNUMERIC\nor\ncsv.QUOTE_STRINGS\n) which start\nwith an escape character.\ngh-122088\n:\n@warnings.deprecated\nnow copies\nthe coroutine status of functions and methods so that\ninspect.iscoroutinefunction()\nreturns the correct result.\ngh-120930\n: Fixed a bug introduced by\ngh-92081\nthat added an incorrect\nextra blank to encoded words occurring in wrapped headers.\ngh-121474\n: Fix missing sanity check for\nparties\narg in\nthreading.Barrier\nconstructor. Patch by Clinton Christian\n(pygeek).\ngh-120289\n: Fixed the use-after-free issue in\ncProfile\nby\ndisallowing\ndisable()\nand\nclear()\nin external timers.\nIDLE\n¶\ngh-122482\n: Change About IDLE to direct users to discuss.python.org instead\nof the now unused idle-dev email and mailing list.\nCore and Builtins\n¶\ngh-116090\n: Fix an issue in JIT builds that prevented some\nfor\nloops from correctly firing\nRAISE\nmonitoring events.\ngh-122208\n: Dictionary watchers now only deliver the PyDict_EVENT_ADDED\nevent when the insertion is in a known good state to succeed.\ngh-122300\n: Preserve AST nodes for f-string with single-element format\nspecifiers. Patch by Pablo Galindo\ngh-120906\n:\nframe.f_locals\nnow supports arbitrary hashable objects\nas keys.\ngh-122029\n: Emit\nc_call\nevents in\nsys.setprofile()\nwhen a\nPyMethodObject\npointing to a\nPyCFunction\nis called.\ngh-122026\n: Fix a bug that caused the tokenizer to not correctly identify\nmismatched parentheses inside f-strings in some situations. Patch by Pablo\nGalindo\ngh-118934\n: Make\nPyEval_GetLocals\nreturn borrowed reference\nC API\n¶\ngh-116622\n: Make\nPyObject_Print\nwork around a bug in Android and\nOpenBSD which prevented it from throwing an exception when trying to write\nto a read-only stream.\ngh-121489\n: Export private\n_PyBytes_Join()\nagain.\nBuild\n¶\ngh-120522\n: Added a\n--with-app-store-compliance\noption to patch\nout known issues with macOS/iOS App Store review processes.\nPython 3.13.0 beta 4\n¶\nRelease date: 2024-07-18\nTests\n¶\ngh-121084\n: Fix test_typing random leaks. Clear typing ABC caches when\nrunning tests for refleaks (\n-R\noption): call\n_abc_caches_clear()\non typing abstract classes and their subclasses. Patch by Victor Stinner.\ngh-121160\n: Add a test for\nreadline.set_history_length()\n. Note that\nthis test may fail on readline libraries.\ngh-121200\n: Fix\ntest_expanduser_pwd2()\nof\ntest_posixpath\n.  Call\ngetpwnam()\nto get\npw_dir\n, since it can be different than\ngetpwall()\npw_dir\n. Patch by Victor Stinner.\ngh-121188\n: When creating the JUnit XML file, regrtest now escapes\ncharacters which are invalid in XML, such as the chr(27) control character\nused in ANSI escape sequences. Patch by Victor Stinner.\nLibrary\n¶\ngh-57141\n: The\nshallow\nargument to\nfilecmp.dircmp\n(new in Python\n3.13) is now keyword-only.\ngh-121245\n: Simplify handling of the history file in\nsite.register_readline()\nhelper. The\nCAN_USE_PYREPL\nvariable now\nwill be initialized, when imported.  Patch by Sergey B Kirpichev.\ngh-121332\n: Fix constructor of\nast\nnodes with custom\n_attributes\n. Previously, passing custom attributes would raise a\nDeprecationWarning\n. Passing arguments to the constructor that\nare not in\n_fields\nor\n_attributes\nremains deprecated. Patch by\nJelle Zijlstra.\ngh-121279\n: Avoid\nNameError\nfor the\nwarnings\nmodule when\naccessing the depracated atributes of the\nimportlib.abc\nmodule.\ngh-121245\n: Fix a bug in the handling of the command history of the new\nREPL\nthat caused the history file to be wiped at REPL exit.\ngh-87744\n: Fix waitpid race while calling\nsend_signal()\nin asyncio. Patch by Kumar\nAditya.\ngh-121018\n: Fixed other issues where\nargparse.ArgumentParser\ndid\nnot honor\nexit_on_error=False\n.\ngh-120678\n: Fix regression in the new REPL that meant that globals from\nfiles passed using the\n-i\nargument would not be included in the REPL’s\nglobal namespace. Patch by Alex Waygood.\ngh-120782\n: Fix wrong references of the\ndatetime\ntypes after\nreloading the module.\ngh-120713\n:\ndatetime.datetime.strftime()\nnow 0-pads years with less\nthan four digits for the format specifiers\n%Y\nand\n%G\non Linux.\nPatch by Ben Hsing\ngh-117983\n: Defer the\nthreading\nimport in\nimportlib.util\nuntil lazy\nloading is used.\ngh-119189\n: When using the\n**\noperator or\npow()\nwith\nFraction\nas the base and an exponent that is not\nrational, a float, or a complex, the fraction is no longer converted to a\nfloat.\ngh-118714\n: Allow\nrestart\nin post-mortem debugging of\npdb\n.\nRemoved restart message when the user quits pdb from post-mortem mode.\ngh-105623\n: Fix performance degradation in\nlogging.handlers.RotatingFileHandler\n. Patch by Craig Robson.\nIDLE\n¶\ngh-78889\n: Stop Shell freezes by blocking user access to non-method\nsys.stdout.shell attributes, which are all private.\nDocumentation\n¶\ngh-121749\n: Fix documentation for\nPyModule_AddObjectRef()\n.\ngh-120012\n: Clarify the behaviours of\nmultiprocessing.Queue.empty()\nand\nmultiprocessing.SimpleQueue.empty()\non closed queues. Patch by\nBénédikt Tran.\nCore and Builtins\n¶\ngh-121860\n: Fix crash when rematerializing a managed dictionary after it\nwas deleted.\ngh-121814\n: Fixed the SegFault when\nPyEval_SetTrace()\nis used with\nno Python frame on stack.\ngh-121295\n: Fix PyREPL console getting into a blocked state after\ninterrupting a long paste\ngh-121794\n: Fix bug in free-threaded Python where a resurrected object\ncould lead to a negative ref count assertion failure.\ngh-121657\n: Improve the\nSyntaxError\nmessage if the user tries to use\nyield\nfrom\noutside a function.\ngh-121609\n: Fix pasting of characters containing unicode character joiners\nin the new REPL. Patch by Marta Gomez Macias\ngh-117482\n: Unexpected slot wrappers are no longer created for builtin\nstatic types in subinterpreters.\ngh-121499\n: Fix a bug affecting how multi-line history was being rendered\nin the new REPL after interacting with the new screen cache. Patch by\nPablo Galindo\ngh-121497\n: Fix a bug that was preventing the REPL to correctly respect the\nhistory when an input hook was set. Patch by Pablo Galindo\ngh-121012\n: Tier 2 execution now ensures that list iterators remain\nexhausted, once they become exhausted.\ngh-121439\n: Allow tuples of length 20 in the freelist to be reused.\ngh-121368\n: Fix race condition in\n_PyType_Lookup\nin the free-threaded\nbuild due to a missing memory fence.  This could lead to\n_PyType_Lookup\nreturning incorrect results on arm64.\ngh-121130\n: Fix f-strings with debug expressions in format specifiers.\nPatch by Pablo Galindo\ngh-121115\n:\nPyLong_AsNativeBytes()\nno longer uses\n__index__()\nmethods by default. The\nPy_ASNATIVEBYTES_ALLOW_INDEX\nflag has been added to allow it.\nC API\n¶\ngh-89364\n: Export the\nPySignal_SetWakeupFd()\nfunction. Previously,\nthe function was documented but it couldn’t be used in 3rd party code.\nPatch by Victor Stinner.\ngh-113993\n:\nPyUnicode_InternInPlace()\nno longer prevents its\nargument from being garbage collected.\nSeveral functions that take\nchar\n*\nare now documented as possibly\npreventing string objects from being garbage collected; refer to their\ndocumentation for details:\nPyUnicode_InternFromString()\n,\nPyDict_SetItemString()\n,\nPyObject_SetAttrString()\n,\nPyObject_DelAttrString()\n,\nPyUnicode_InternFromString()\n,\nand\nPyModule_Add*\nconvenience functions.\ngh-113601\n: Removed debug build assertions related to interning strings,\nwhich were falsely triggered by stable ABI extensions.\ngh-112136\n: Restore the private\n_PyArg_Parser\nstructure and the private\n_PyArg_ParseTupleAndKeywordsFast()\nfunction, previously removed in\nPython 3.13 alpha 1. Patch by Victor Stinner.\nBuild\n¶\ngh-120371\n: Support WASI SDK 22 by explicitly skipping functions that are\njust stubs in wasi-libc.\ngh-121731\n: Fix mimalloc compile error on GNU/Hurd\ngh-121487\n: Fix deprecation warning for ATOMIC_VAR_INIT in mimalloc.\ngh-121467\n: Fix a Makefile bug that prevented mimalloc header files from\nbeing installed.\ngh-121103\n: On POSIX systems, excluding macOS framework installs, the lib\ndirectory for the free-threaded build now includes a “t” suffix to avoid\nconflicts with a co-located default build installation.\ngh-120831\n: The default minimum iOS version was increased to 13.0.\ngh-113565\n: Improve\ncurses\nand\ncurses.panel\ndependency checks\nin\nconfigure\n.\nPython 3.13.0 beta 3\n¶\nRelease date: 2024-06-27\nCore and Builtins\n¶\ngh-120838\n:\nPy_Finalize()\nand\nPy_FinalizeEx()\nnow\nalways run with the main interpreter active.\ngh-113433\n: Subinterpreters now get cleaned up automatically during runtime\nfinalization.\ngh-119462\n: Make sure that invariants of type versioning are maintained: *\nSuperclasses always have their version number assigned before subclasses *\nThe version tag is always zero if the tag is not valid. * The version tag\nis always non-zero if the tag is valid.\ngh-120437\n: Fix\n_CHECK_STACK_SPACE\noptimization problems introduced in\ngh-118322\n.\ngh-120722\n: Correctly set the bytecode position on return instructions\nwithin lambdas. Patch by Jelle Zijlstra.\ngh-120367\n: Fix bug where compiler creates a redundant jump during\npseudo-op replacement. Can only happen with a synthetic AST that has a try\non the same line as the instruction following the exception handler.\ngh-113993\n: Strings interned with\nsys.intern()\nare again\ngarbage-collected when no longer used, as per the documentation. Strings\ninterned with the C function\nPyUnicode_InternInPlace()\nare still\nimmortal. Internals of the string interning mechanism have been changed.\nThis may affect performance and identities of\nstr\nobjects.\ngh-120384\n: Fix an array out of bounds crash in\nlist_ass_subscript\n,\nwhich could be invoked via some specificly tailored input: including\nconcurrent modification of a list object, where one thread assigns a slice\nand another clears it.\ngh-120367\n: Fix crash in compiler on code with redundant NOPs and JUMPs\nwhich show up after exception handlers are moved to the end of the code.\ngh-120380\n: Fix Python implementation of\npickle.Pickler\nfor\nbytes\nand\nbytearray\nobjects when using protocol version\n5. Patch by Bénédikt Tran.\ngh-120400\n: Support Linux perf profiler to see Python calls on RISC-V\narchitecture.\ngh-120221\n: Deliver real signals on Ctrl-C and Ctrl-Z in the new REPL.\nPatch by Pablo Galindo\ngh-120346\n: Respect\nPYTHON_BASIC_REPL\nwhen running in interative\ninspect mode (\npython\n-i\n). Patch by Pablo Galindo\ngh-93691\n: Fix source locations of instructions generated for the iterator\nof a for statement.\ngh-120198\n: Fix a crash when multiple threads read and write to the same\n__class__\nof an object concurrently.\ngh-120298\n: Fix use-after free in\nlist_richcompare_impl\nwhich can be\ninvoked via some specificly tailored evil input.\ngh-119666\n: Fix a compiler crash in the case where two comprehensions in\nclass scope both reference\n__class__\n.\ngh-120225\n: Fix crash in compiler on empty block at end of exception\nhandler.\ngh-119933\n: Improve\nSyntaxError\nmessages for invalid expressions in\na type parameters bound, a type parameter constraint tuple or a default\ntype parameter. Patch by Bénédikt Tran.\nbpo-24766\n: Fix handling of\ndoc\nargument to subclasses of\nproperty\n.\nLibrary\n¶\ngh-121027\n: Add a future warning in\nfunctools.partial.__get__()\n. In\nfuture Python versions\nfunctools.partial\nwill be a method\ndescriptor.\ngh-121025\n: Improve the\n__repr__()\nof\nfunctools.partialmethod\n. Patch by Bénédikt Tran.\ngh-121018\n: Fixed an issue where\nargparse.ArgumentParser.parses_args()\ndid not honor\nexit_on_error=False\nwhen given unrecognized arguments. Patch by Ben\nHsing.\ngh-119614\n: Fix truncation of strings with embedded null characters in some\ninternal operations in\ntkinter\n.\ngh-120910\n: When reading installed files from an egg, use\nrelative_to(walk_up=True)\nto honor files installed outside of the\ninstallation root.\ngh-120888\n: Upgrade pip wheel bundled with ensurepip (pip 24.1.1)\ngh-101830\n: Accessing the\ntkinter\nobject’s string representation no\nlonger converts the underlying Tcl object to a string on Windows.\ngh-120811\n: Fix possible memory leak in\ncontextvars.Context.run()\n.\ngh-120769\n: Make empty line in\npdb\nrepeats the last command even\nwhen the command is from\ncmdqueue\n.\ngh-120732\n: Fix\nname\npassing to\nunittest.mock.Mock\nobject when\nusing\nunittest.mock.create_autospec()\n.\ngh-120683\n: Fix an error in\nlogging.LogRecord\n, when the integer\npart of the timestamp is rounded up, while the millisecond calculation\ntruncates, causing the log timestamp to be wrong by up to 999 ms (affected\nroughly 1 in 8 million timestamps).\ngh-120633\n: Move scrollbar and remove tear-off menus in turtledemo.\ngh-120541\n: Improve the prompt in the “less” pager when\nhelp()\nis\ncalled with non-string argument.\ngh-120495\n: Fix incorrect exception handling in Tab Nanny. Patch by\nWulian233.\ngh-120381\n: Correct\ninspect.ismethoddescriptor()\nto check also for\nthe lack of\n__delete__()\n.  Patch by Jan Kaliszewski.\ngh-90425\n: The OS byte in gzip headers is now always set to 255 when using\ngzip.compress()\n.\ngh-120343\n: Fix column offset reporting for tokens that come after\nmultiline f-strings in the\ntokenize\nmodule.\ngh-119600\n: Fix\nunittest.mock.patch()\nto not read attributes of the\ntarget when\nnew_callable\nis set. Patch by Robert Collins.\ngh-114053\n: Fix edge-case bug where\ntyping.get_type_hints()\nwould\nproduce incorrect results if type parameters in a class scope were\noverridden by assignments in a class scope and\nfrom\n__future__\nimport\nannotations\nsemantics were enabled. Patch by Alex Waygood.\ngh-114053\n: Fix erroneous\nNameError\nwhen calling\ninspect.get_annotations()\nwith\neval_str=True`\non a class that\nmade use of\nPEP 695\ntype parameters in a module that had\nfrom\n__future__\nimport\nannotations\nat the top of the file. Patch by Alex\nWaygood.\ngh-120268\n: Prohibit passing\nNone\nto pure-Python\ndatetime.date.fromtimestamp()\nto achieve consistency with\nC-extension implementation.\ngh-120244\n: Fix memory leak in\nre.sub()\nwhen the replacement string\ncontains backreferences.\ngh-120211\n: Fix\ntkinter.ttk\nwith Tcl/Tk 9.0.\ngh-71587\n: Fix crash in C version of\ndatetime.datetime.strptime()\nwhen called again on the restarted interpreter.\ngh-120161\n:\ndatetime\nno longer crashes in certain complex reference\ncycle situations.\ngh-119698\n: Fix\nsymtable.Class.get_methods()\nand document its\nbehaviour. Patch by Bénédikt Tran.\ngh-120121\n: Add\nconcurrent.futures.InvalidStateError\nto module’s\n__all__\n.\ngh-119933\n: Add the\nsymtable.SymbolTableType\nenumeration to\nrepresent the possible outputs of the\nsymtable.SymbolTable.get_type\nmethod. Patch by Bénédikt Tran.\ngh-120108\n: Fix calling\ncopy.deepcopy()\non\nast\ntrees that have\nbeen modified to have references to parent nodes. Patch by Jelle Zijlstra.\ngh-112672\n: Support building\ntkinter\nwith Tcl 9.0.\ngh-65454\n:\nunittest.mock.Mock.attach_mock()\nno longer triggers a call\nto a\nPropertyMock\nbeing attached.\ngh-81936\n:\nhelp()\nand\nshowtopic()\nmethods now respect a\nconfigured\noutput\nargument to\npydoc.Helper\nand not use the\npager in such cases. Patch by Enrico Tröger.\ngh-119577\n: The\nDeprecationWarning\nemitted when testing the truth\nvalue of an\nxml.etree.ElementTree.Element\nnow describes\nunconditionally returning\nTrue\nin a future version rather than raising\nan exception in Python 3.14.\ngh-118908\n: Limit exposed globals from internal imports and definitions on\nnew REPL startup. Patch by Eugene Triguba and Pablo Galindo.\ngh-119506\n: Fix\nio.TextIOWrapper.write()\nmethod breaks internal\nbuffer when the method is called again during flushing internal buffer.\nBuild\n¶\ngh-120671\n: Fix failing configure tests due to a missing space when\nappending to CFLAGS.\ngh-120602\n: Correctly handle LLVM installs with\nLLVM_VERSION_SUFFIX\nwhen building with\n--enable-experimental-jit\n.\ngh-120326\n: On Windows, fix build error when\n--disable-gil\nand\n--experimental-jit\noptions are combined.\ngh-120291\n: Make the\npython-config\nshell script compatible with\nnon-bash shells.\nC API\n¶\ngh-120642\n: Remove the private\n_Py_CODEUNIT\ntype from the public C API.\nThe internal\npycore_code.h\nheader should now be used to get this\ninternal type. Patch by Victor Stinner.\ngh-120858\n:\nPyDict_Next()\nno longer locks the dictionary in the\nfree-threaded build.  The locking needs to be done by the caller around\nthe entire iteration loop.\ngh-120642\n: Remove the following unstable functions:\nPyUnstable_Replace_Executor()\nPyUnstable_SetOptimizer()\nPyUnstable_GetOptimizer()\nPyUnstable_GetExecutor()\nPyUnstable_Optimizer_NewCounter()\nPyUnstable_Optimizer_NewUOpOptimizer()\nPatch by Victor Stinner.\ngh-119344\n: The critical section API is now public as part of the\nnon-limited C API.\ngh-118789\n: Add\nPyUnstable_Object_ClearWeakRefsNoCallbacks()\n, which\nclears weakrefs without calling their callbacks.\ngh-117511\n: Make the\nPyMutex\npublic in the non-limited C API.\nPython 3.13.0 beta 2\n¶\nRelease date: 2024-06-05\nSecurity\n¶\ngh-118773\n: Fixes creation of ACLs in\nos.mkdir()\non Windows to work\ncorrectly on non-English machines.\ngh-118486\n:\nos.mkdir()\non Windows now accepts\nmode\nof\n0o700\nto\nrestrict the new directory to the current user. This fixes\nCVE 2024-4030\naffecting\ntempfile.mkdtemp()\nin scenarios where the\nbase temporary directory is more permissive than the default.\nCore and Builtins\n¶\ngh-119724\n: Reverted improvements to error messages for\nelif\n/\nelse\nstatements not matching any valid statements, which made in hard to locate\nthe syntax errors inside those\nelif\n/\nelse\nblocks.\ngh-119842\n: Honor\nPyOS_InputHook()\nin the new REPL. Patch by Pablo\nGalindo\ngh-119821\n: Fix execution of\nannotation scopes\nwithin classes when\nglobals\nis set to a non-dict. Patch by Jelle\nZijlstra.\ngh-119548\n: Add a\nclear\ncommand to the REPL. Patch by Pablo Galindo\ngh-111999\n: Fix the signature of\nstr.format_map()\n.\ngh-119560\n: An invalid assert in beta 1 has been removed.  The assert would\nfail if\nPyState_FindModule()\nwas used in an extension module’s init\nfunction before the module def had been initialized.\ngh-119369\n: Fix deadlock during thread deletion in free-threaded build,\nwhich could occur when the GIL was enabled at runtime.\ngh-119525\n: Fix deadlock involving\n_PyType_Lookup()\ncache in the\nfree-threaded build when the GIL is dynamically enabled at runtime.\ngh-119311\n: Fix bug where names are unexpectedly mangled in the bases of\ngeneric classes.\ngh-119395\n: Fix bug where names appearing after a generic class are mangled\nas if they are in the generic class.\ngh-119213\n: Non-builtin modules built with argument clinic were crashing if\nused in a subinterpreter before the main interpreter.  The objects that\nwere causing the problem by leaking between interpreters carelessly have\nbeen fixed.\ngh-119011\n: Fixes\ntype.__type_params__\nto return an empty tuple instead\nof a descriptor.\ngh-118692\n: Avoid creating unnecessary\nStopIteration\ninstances for\nmonitoring.\ngh-119049\n: Fix displaying the source line for warnings created by the C\nAPI if the\nwarnings\nmodule had not yet been imported.\ngh-118844\n: Fix build failures when configuring with both\n--disable-gil\nand\n--enable-experimental-jit\n.\ngh-118921\n: Add\ncopy()\nmethod for\nFrameLocalsProxy\nwhich returns a\nsnapshot\ndict\nfor local variables.\ngh-117657\n: Fix data races on the field that stores a pointer to the\ninterpreter’s main thread that occur in free-threaded builds.\ngh-118561\n: Fix race condition in free-threaded build where\nlist.extend()\ncould expose uninitialised memory to concurrent\nreaders.\ngh-117195\n: Avoid assertion failure for debug builds when calling\nobject.__sizeof__(1)\nLibrary\n¶\ngh-119819\n: Fix regression to allow logging configuration with\nmultiprocessing queue types.\ngh-117142\n: The\nctypes\nmodule may now be imported in all\nsubinterpreters, including those that have their own GIL.\ngh-118835\n: Fix _pyrepl crash when using custom prompt with ANSI escape\ncodes.\ngh-117398\n: The\n_datetime\nmodule (C implementation for\ndatetime\n)\nnow supports being imported in multiple interpreters.\ngh-89727\n: Fix issue with\nshutil.rmtree()\nwhere a\nRecursionError\nis raised on deep directory trees.\ngh-89727\n: Partially fix issue with\nshutil.rmtree()\nwhere a\nRecursionError\nis raised on deep directory trees. A recursion error\nis no longer raised when\nrmtree.avoids_symlink_attacks\nis false.\ngh-119118\n: Fix performance regression in the\ntokenize\nmodule by\ncaching the\nline\ntoken attribute and calculating the column offset\nmore efficiently.\ngh-89727\n: Fix issue with\nos.fwalk()\nwhere a\nRecursionError\nwas raised on deep directory trees by adjusting the implementation to be\niterative instead of recursive.\ngh-119588\n:\nzipfile.Path.is_symlink\nnow assesses if the given path is a\nsymlink.\ngh-119555\n: Catch\nSyntaxError\nfrom\ncompile()\nin the\nrunsource() method of the InteractiveColoredConsole.  Patch by Sergey B\nKirpichev.\ngh-113892\n: Now, the method\nsock_connect\nof\nasyncio.ProactorEventLoop\nraises a\nValueError\nif given\nsocket is not in non-blocking mode, as well as in other loop\nimplementations.\ngh-119443\n: The interactive REPL no longer runs with\nfrom\n__future__\nimport\nannotations\nenabled. Patch by Jelle Zijlstra.\ngh-117398\n: Objects in the datetime C-API are now all statically allocated,\nwhich means better memory safety, especially when the module is reloaded.\nThis should be transparent to users.\ngh-118894\n:\nasyncio\nREPL now has the same capabilities as PyREPL.\ngh-118911\n: In PyREPL, updated\nmaybe-accept\n’s logic so that if the user\nhits\nEnter\ntwice, they are able to terminate the block even if\nthere’s trailing whitespace. Also, now when the user hits arrow up, the\ncursor is on the last functional line. This matches IPython’s behavior.\nPatch by Aya Elsayed.\ngh-111201\n: Remove dependency to\nreadline\nfrom the new Python REPL.\ngh-119174\n: Fix high DPI causes turtledemo(turtle-graphics examples)\nwindows blurry Patch by Wulian233 and Terry Jan Reedy\ngh-119121\n: Fix a NameError happening in\nasyncio.staggered.staggered_race\n. This function is now tested.\ngh-119113\n: Fix issue where\npathlib.PurePath.with_suffix()\ndidn’t\nraise\nTypeError\nwhen given\nNone\nas a suffix.\ngh-118643\n: Fix an AttributeError in the\nemail\nmodule when re-fold a\nlong address list. Also fix more cases of incorrect encoding of the\naddress separator in the address list.\ngh-58933\n: Make\npdb\nreturn to caller frame correctly when\nf_trace\nof the caller frame is not set\ngh-118895\n: Setting attributes on\ntyping.NoDefault\nnow raises\nAttributeError\ninstead of\nTypeError\n.\ngh-118868\n: Fixed issue where kwargs were no longer passed to the logging\nhandler QueueHandler\ngh-118851\n:\nctx\narguments to the constructors of\nast\nnode\nclasses now default to\nast.Load()\n. Patch by Jelle\nZijlstra.\ngh-118760\n: Restore the default value of\ntkiter.wantobjects\nto\n1\n.\ngh-118760\n: Fix errors in calling Tkinter bindings on Windows.\ngh-118507\n: Fix\nos.path.isfile()\non Windows for pipes. Speedup\nos.path.isjunction()\nand\nos.path.lexists()\non Windows with a\nnative implementation.\ngh-118772\n: Allow\ntyping.TypeVar\ninstances without a default to\nfollow instances without a default in some cases. Patch by Jelle Zijlstra.\ngh-110863\n:\nos.path.realpath()\nnow suppresses any\nOSError\nfrom\nos.readlink()\nwhen\nstrict\nmode is disabled (the default).\ngh-118263\n: Speed up\nos.path.splitroot()\n&\nos.path.normpath()\nwith a direct C call.\ngh-118033\n: Fix\ndataclasses.dataclass()\nnot creating a\n__weakref__\nslot when subclassing\ntyping.Generic\n.\ngh-106531\n: In\nimportlib.resources\n, sync with\nimportlib_resources\n6.3.2\n,\nincluding:\nMultiplexedPath\nnow expects\nTraversable\npaths,\ndeprecating string arguments to\nMultiplexedPath\n; Enabled support for\nresources in namespace packages in zip files; Fixed\nNotADirectoryError\nwhen calling files on a subdirectory of a namespace package.\ngh-113978\n: Ignore warnings on text completion inside REPL.\ngh-103956\n: Fix lack of newline characters in\ntrace\nmodule output\nwhen line tracing is enabled but source code line for current frame is not\navailable.\ngh-92081\n: Fix missing spaces in email headers when the spaces are mixed\nwith encoded 8-bit characters.\ngh-103194\n: Prepare Tkinter for C API changes in Tcl 8.7/9.0 to avoid\n_tkinter.Tcl_Obj\nbeing unexpectedly returned instead of\nbool\n,\nstr\n,\nbytearray\n, or\nint\n.\ngh-87106\n: Fixed handling in\ninspect.Signature.bind()\nof keyword\narguments having the same name as positional-only arguments when a\nvariadic keyword argument (e.g.\n**kwargs\n) is present.\nbpo-45767\n: Fix integer conversion in\nos.major()\n,\nos.minor()\n,\nand\nos.makedev()\n. Support device numbers larger than\n2**63-1\n.\nSupport non-existent device number (\nNODEV\n).\ngh-67693\n: Fix\nurllib.parse.urlunparse()\nand\nurllib.parse.urlunsplit()\nfor URIs with path starting with multiple\nslashes and no authority. Based on patch by Ashwin Ramaswami.\nTests\n¶\ngh-119050\n: regrtest test runner: Add XML support to the refleak checker\n(-R option). Patch by Victor Stinner.\nBuild\n¶\ngh-119729\n: On POSIX systems, the pkg-config (\n.pc\n) filenames now\ninclude the ABI flags, which may include debug (“d”) and free-threaded\n(“t”).  For example: *\npython-3.14.pc\n(default, non-debug build) *\npython-3.14d.pc\n(default, debug build) *\npython-3.14t.pc\n(free-threaded build)\ngh-115119\n: Fall back to the bundled libmpdec if a system version cannot be\nfound.\ngh-119132\n: Update\nsys.version\nto identify whether the build is\ndefault build or free-threading build. Patch By Donghee Na.\ngh-118836\n: Fix an\nAssertionError\nwhen building with\n--enable-experimental-jit\nand the compiler emits a\nSHT_NOTE\nsection.\ngh-118943\n: Fix a possible race condition affecting parallel builds\nconfigured with\n--enable-experimental-jit\n, in which compilation errors\ncould be caused by an incompletely-generated header file.\nWindows\n¶\ngh-119679\n: Ensures correct import libraries are included in Windows\ninstalls.\ngh-119690\n: Adds Unicode support and fixes audit events for\n_winapi.CreateNamedPipe\n.\ngh-111201\n: Add support for new pyrepl on Windows\ngh-119070\n: Fixes\npy.exe\nhandling of shebangs like\n/usr/bin/env\npython3.12\n, which were previously interpreted as\npython3.exe\ninstead\nof\npython3.12.exe\n.\ngh-117505\n: Fixes an issue with the Windows installer not running ensurepip\nin a fully isolated environment. This could cause unexpected interactions\nwith the user site-packages.\ngh-118209\n: Avoid crashing in\nmmap\non Windows when the mapped memory\nis inaccessible due to file system errors or access violations.\ngh-116145\n: Updated bundled Tcl/Tk to 8.6.14.\nC API\n¶\ngh-119585\n: Fix crash when a thread state that was created by\nPyGILState_Ensure()\ncalls a destructor that during\nPyThreadState_Clear()\nthat calls back into\nPyGILState_Ensure()\nand\nPyGILState_Release()\n. This might\noccur when in the free-threaded build or when using thread-local variables\nwhose destructors call\nPyGILState_Ensure()\n.\ngh-119336\n: Restore the removed\n_PyLong_NumBits()\nfunction. It is used\nby the pywin32 project. Patch by Ethan Smith\ngh-119247\n: Added\nPy_BEGIN_CRITICAL_SECTION_SEQUENCE_FAST\nand\nPy_END_CRITICAL_SECTION_SEQUENCE_FAST\nmacros to make it possible to\nuse PySequence_Fast APIs safely when free-threaded, and update str.join to\nwork without the GIL using them.\ngh-111389\n: Add\nPyHASH_MULTIPLIER\nconstant: prime multiplier\nused in string and various other hashes. Patch by Victor Stinner.\ngh-116984\n: Make mimalloc includes relative to the current file to avoid\nembedders or extensions needing to include\nInternal/mimalloc\nif they\nare already including internal CPython headers.\ngh-118789\n: Restore\n_PyWeakref_ClearRef\nthat was previously removed in\nPython 3.13 alpha 1.\nPython 3.13.0 beta 1\n¶\nRelease date: 2024-05-08\nSecurity\n¶\ngh-116741\n: Update bundled libexpat to 2.6.2\ngh-117233\n: Detect BLAKE2, SHA3, Shake, & truncated SHA512 support in the\nOpenSSL-ish libcrypto library at build time.  This allows\nhashlib\nto be used with libraries that do not to support every algorithm that\nupstream OpenSSL does.\nCore and Builtins\n¶\ngh-118414\n: Add instrumented opcodes to YIELD_VALUE assertion for tracing\ncases.\ngh-117953\n: When a builtin or extension module is imported for the first\ntime, while a subinterpreter is active, the module’s init function is now\nrun by the main interpreter first before import continues in the\nsubinterpreter. Consequently, single-phase init modules now fail in an\nisolated subinterpreter without the init function running under that\ninterpreter, whereas before it would run under the subinterpreter\nbefore\nfailing, potentially leaving behind global state and callbacks and\notherwise leaving the module in an inconsistent state.\ngh-117549\n: Don’t use designated initializer syntax in inline functions in\ninternal headers. They cause problems for C++ or MSVC users who aren’t yet\nusing the latest C++ standard (C++20). While internal, pycore_backoff.h,\nis included (indirectly, via pycore_code.h) by some key 3rd party software\nthat does so for speed.\ngh-95382\n: Improve performance of\njson.dumps()\nand\njson.dump()\nwhen using the argument\nindent\n. Depending on the data the encoding using\njson.dumps()\nwith\nindent\ncan be up to 2 to 3 times faster.\ngh-116322\n: In\n--disable-gil\nbuilds, the GIL will be enabled while\nloading C extension modules. If the module indicates that it supports\nrunning without the GIL, the GIL will be disabled once loading is\ncomplete. Otherwise, the GIL will remain enabled for the remainder of the\ninterpreter’s lifetime. This behavior does not apply if the GIL has been\nexplicitly enabled or disabled with\nPYTHON_GIL\nor\n-Xgil\n.\ngh-118513\n: Fix incorrect\nUnboundLocalError\nwhen two comprehensions\nin the same function both reference the same name, and in one\ncomprehension the name is bound while in the other it’s an implicit\nglobal.\ngh-118518\n: Allow the Linux perf support to work without frame pointers\nusing perf’s advanced JIT support. The feature is activated when using the\nPYTHON_PERF_JIT_SUPPORT\nenvironment variable or when running Python\nwith\n-Xperf_jit\n. Patch by Pablo Galindo.\ngh-117514\n: Add\nsys._is_gil_enabled()\nfunction that returns whether the\nGIL is currently enabled.  In the default build it always returns\nTrue\nbecause the GIL is always enabled.  In the free-threaded build, it may\nreturn\nTrue\nor\nFalse\n.\ngh-118164\n: Break a loop between the Python implementation of the\ndecimal\nmodule and the Python code for integer to string\nconversion. Also optimize integer to string conversion for values in the\nrange from 9_000 to 135_000 decimal digits.\ngh-118473\n: Fix\nsys.set_asyncgen_hooks()\nnot to be partially set when\nraising\nTypeError\n.\ngh-118465\n: Compiler populates the new\n__firstlineno__\nfield on a class\nwith the line number of the first line of the class definition.\ngh-118492\n: Fix an issue where the type cache can expose a previously\naccessed attribute when a finalizer is run.\ngh-117714\n: update\nasync_generator.athrow().close()\nand\nasync_generator.asend().close()\nto close their section of the\nunderlying async generator\ngh-111201\n: The\ninteractive\ninterpreter is now implemented in\nPython, which allows for a number of new features like colors, multiline\ninput, history viewing, and paste mode. Contributed by Pablo Galindo,\nŁukasz Langa and Lysandros Nikolaou based on code from the PyPy project.\ngh-74929\n: Implement PEP 667: converted\nFrameType.f_locals\nand\nPyFrame_GetLocals()\nto return a\nwrite-through proxy object when the frame refers to a function or\ncomprehension.\ngh-116767\n: Fix crash in compiler on ‘async with’ that has many context\nmanagers.\ngh-118335\n: Change how to use the tier 2 interpreter. Instead of running\nPython with\n-X\nuops\nor setting the environment variable\nPYTHON_UOPS=1\n, this choice is now made at build time by configuring\nwith\n--enable-experimental-jit=interpreter\n.\nBeware!\nThis changes the environment variable to enable or disable\nmicro-ops to\nPYTHON_JIT\n. The old\nPYTHON_UOPS\nis no longer used.\ngh-118306\n: Update JIT compilation to use LLVM 18\ngh-118160\n:\nAnnotation scopes\nwithin classes can\nnow contain comprehensions. However, such comprehensions are not inlined\ninto their parent scope at runtime. Patch by Jelle Zijlstra.\ngh-118272\n: Fix bug where\ngenerator.close\ndoes not free the generator\nframe’s locals.\ngh-118216\n: Don’t consider\n__future__\nimports with dots before the\nmodule name.\ngh-118074\n: Make sure that the Executor objects in the COLD_EXITS array\naren’t assumed to be GC-able (which would access bytes outside the\nobject).\ngh-107674\n: Lazy load frame line number to improve performance of tracing\ngh-118082\n: Improve\nSyntaxError\nmessage for imports without names,\nlike in\nfrom\nx\nimport\nand\nimport\ncases. It now points out to users\nthat\nimport\nexpects at least one name after it.\ngh-118090\n: Improve\nSyntaxError\nmessage for empty type param\nbrackets.\ngh-117958\n: Added a\nget_jit_code()\nmethod to access JIT compiled\nmachine code from the UOp Executor when the experimental JIT is enabled.\nPatch by Anthony Shaw.\ngh-117901\n: Add option for compiler’s codegen to save nested instruction\nsequences for introspection.\ngh-116622\n: Redirect stdout and stderr to system log when embedded in an\nAndroid app.\ngh-109118\n:\nannotation scope\nwithin class scopes\ncan now contain lambdas.\ngh-117894\n: Prevent\nagen.aclose()\nobjects being re-used after\n.throw()\n.\ngh-117881\n: prevent concurrent access to an async generator via\nathrow().throw() or asend().throw()\ngh-117536\n: Fix a\nRuntimeWarning\nwhen calling\nagen.aclose().throw(Exception)\n.\ngh-117755\n: Fix mimalloc allocator for huge memory allocation (around\n8,589,934,592 GiB) on s390x. Patch by Victor Stinner.\ngh-117750\n: Fix issue where an object’s dict would get out of sync with the\nobject’s internal values when being cleared.\nobj.__dict__.clear()\nnow\nclears the internal values, but leaves the dict attached to the object.\ngh-117431\n: Improve the performance of the following\nbytes\nand\nbytearray\nmethods by adapting them to the\nMETH_FASTCALL\ncalling convention:\ncount()\nfind()\nindex()\nrfind()\nrindex()\ngh-117709\n: Speed up calls to\nstr()\nwith positional-only argument, by\nusing the\nPEP 590\nvectorcall\ncalling convention. Patch by Erlend\nAasland.\ngh-117680\n: Give\n_PyInstructionSequence\na Python interface and use it\nin tests.\ngh-115776\n: Statically allocated objects are, by definition, immortal so\nmust be marked as such regardless of whether they are in extension modules\nor not.\ngh-117385\n: Remove unhandled\nPY_MONITORING_EVENT_BRANCH\nand\nPY_MONITORING_EVENT_EXCEPTION_HANDLED\nevents from\nsys.settrace()\n.\ngh-116322\n: Extension modules may indicate to the runtime that they can run\nwithout the GIL. Multi-phase init modules do so by calling providing\nPy_MOD_GIL_NOT_USED\nfor the\nPy_mod_gil\nslot, while single-phase\ninit modules call\nPyUnstable_Module_SetGIL(mod,\nPy_MOD_GIL_NOT_USED)\nfrom their init function.\ngh-116129\n: Implement\nPEP 696\n, adding support for defaults on type\nparameters. Patch by Jelle Zijlstra.\ngh-93502\n: Add two new functions to the C-API,\nPyRefTracer_SetTracer()\nand\nPyRefTracer_GetTracer()\n, that\nallows to track object creation and destruction the same way the\ntracemalloc\nmodule does. Patch by Pablo Galindo\ngh-107674\n: Improved the performance of\nsys.settrace()\nsignificantly\ngh-95754\n: Improve the error message when a script shadowing a module from\nthe standard library causes\nAttributeError\nto be raised. Similarly,\nimprove the error message when a script shadowing a third party module\nattempts to access an attribute from that third party module while still\ninitialising.\ngh-99180\n: Elide uninformative traceback indicators in\nreturn\nand\nsimple\nassignment\nstatements. Patch by Pablo Galindo.\ngh-105879\n: Allow the\nglobals\nand\nlocals\narguments to\nexec()\nand\neval()\nto be passed as keywords.\nLibrary\n¶\ngh-118418\n: A\nDeprecationWarning\nis now emitted if you fail to pass\na value to the new\ntype_params\nparameter of\ntyping._eval_type()\nor\ntyping.ForwardRef._evaluate()\n. (Using either of these private and\nundocumented functions is discouraged to begin with, but failing to pass a\nvalue to the\ntype_params\nparameter may lead to incorrect behaviour on\nPython 3.12 or newer.)\ngh-118660\n: Add an optional second type parameter to\ntyping.ContextManager\nand\ntyping.AsyncContextManager\n,\nrepresenting the return types of\n__exit__()\nand\n__aexit__()\nrespectively. This parameter defaults to\nbool\n|\nNone\n.\ngh-118650\n: The\nenum\nmodule allows method named\n_repr_*\nto be\ndefined on\nEnum\ntypes.\ngh-118648\n: Add type parameter defaults to\ntyping.Generator\nand\ntyping.AsyncGenerator\n.\ngh-101137\n: Mime type\ntext/x-rst\nis now supported by\nmimetypes\n.\ngh-118164\n: The Python implementation of the\ndecimal\nmodule could\nappear to hang in relatively small power cases (like\n2**117\n) if\ncontext precision was set to a very high value. A different method to\ncheck for exactly representable results is used now that doesn’t rely on\ncomputing\n10**precision\n(which could be effectively too large to\ncompute).\ngh-111744\n:\nbreakpoint()\nand\npdb.set_trace()\nnow enter the debugger\nimmediately after the call rather than before the next line is executed.\ngh-118500\n: Add\npdb\nsupport for zipapps\ngh-118406\n: Add signature for\nsqlite3.Connection\nobjects.\ngh-101732\n: Use a Y2038 compatible openssl time function when available.\ngh-118404\n: Fix\ninspect.signature()\nfor non-comparable callables.\ngh-118402\n: Fix\ninspect.signature()\nfor the result of the\nfunctools.cmp_to_key()\ncall.\ngh-116622\n: On Android,\nsysconfig.get_platform\nnow returns the\nformat specified by\nPEP 738\n.\ngh-118285\n: Allow to specify the signature of custom callable instances of\nextension type by the\n__text_signature__\nattribute. Specify signatures\nof\noperator.attrgetter\n,\noperator.itemgetter\n, and\noperator.methodcaller\ninstances.\ngh-118314\n: Fix an edge case in\nbinascii.a2b_base64()\nstrict mode,\nwhere excessive padding is not detected when no padding is necessary.\ngh-118271\n: Add the\nPhotoImage\nmethods\nread()\nto read an\nimage from a file and\ndata()\nto get the image data. Add\nbackground\nand\ngrayscale\nparameters to\nPhotoImage\nmethod\nwrite()\n.\ngh-118225\n: Add the\nPhotoImage\nmethod\ncopy_replace()\nto\ncopy a region from one image to other image, possibly with pixel zooming\nand/or subsampling. Add\nfrom_coords\nparameter to\nPhotoImage\nmethods\ncopy()\n,\nzoom()\nand\nsubsample()\n. Add\nzoom\nand\nsubsample\nparameters to\nPhotoImage\nmethod\ncopy()\n.\ngh-118221\n: Fix a bug where\nsqlite3.Connection.iterdump()\ncould fail\nif a custom\nrow\nfactory\nwas used.\nPatch by Erlend Aasland.\ngh-118013\n: Fix regression introduced in\ngh-103193\nthat meant that calling\ninspect.getattr_static()\non an instance would cause a strong\nreference to that instance’s class to persist in an internal cache in the\ninspect\nmodule. This caused unexpected memory consumption if the\nclass was dynamically created, the class held strong references to other\nobjects which took up a significant amount of memory, and the cache\ncontained the sole strong reference to the class. The fix for the\nregression leads to a slowdown in\ngetattr_static()\n, but the\nfunction should still be significantly faster than it was in Python 3.11.\nPatch by Alex Waygood.\ngh-118218\n: Speed up\nitertools.pairwise()\nin the common case by up to\n1.8x.\ngh-117486\n: Improve the behavior of user-defined subclasses of\nast.AST\n. Such classes will now require no changes in the usual\ncase to conform with the behavior changes of the\nast\nmodule in\nPython 3.13. Patch by Jelle Zijlstra.\ngh-90848\n: Fixed\nunittest.mock.create_autospec()\nto configure parent\nmock with keyword arguments.\ngh-118168\n: Fix incorrect argument substitution when\ntyping.Unpack\nis used with the builtin\ntuple\n.\ntyping.Unpack\nnow raises\nTypeError\nwhen used with certain invalid types. Patch by Jelle\nZijlstra.\ngh-118131\n: Add command-line interface for the\nrandom\nmodule. Patch\nby Hugo van Kemenade.\ngh-118107\n: Fix\nzipimport\nreading of ZIP64 files with file entries\nthat are too big or offset too far.\ngh-102511\n: Fix\nos.path.normpath()\nfor UNC paths on Windows. Speed up\nos.path.splitroot()\nwith a native implementation.\ngh-117535\n: Change the unknown filename of\nwarnings\nfrom\nsys\nto\n<sys>\nto clarify that it’s not a real filename.\ngh-114053\n: Fix erroneous\nNameError\nwhen calling\ntyping.get_type_hints()\non a class that made use of\nPEP 695\ntype\nparameters in a module that had\nfrom\n__future__\nimport\nannotations\nat\nthe top of the file. Patch by Alex Waygood.\ngh-116931\n: Add parameter\nfileobj\ncheck for\ntarfile.TarFile.addfile()\ngh-117995\n: Don’t raise\nDeprecationWarning\nwhen a\nsequence\nof parameters is used to bind indexed, nameless placeholders. See also\ngh-100668\n.\ngh-80361\n: Fix TypeError in\nemail.message.Message.get_payload()\nwhen\nthe charset is\nRFC 2231\nencoded.\ngh-86650\n: Fix IndexError when parse some emails with invalid Message-ID\n(including one-off addresses generated by Microsoft Outlook).\ngh-117691\n: Improve the error messages emitted by\ntarfile\ndeprecation warnings relating to PEP 706. If a\nfilter\nargument is not\nprovided to\nextract()\nor\nextractall\n, the deprecation warning now\npoints to the line in the user’s code where the relevant function was\ncalled. Patch by Alex Waygood.\ngh-115874\n: Fixed a possible segfault during garbage collection of\n_asyncio.FutureIter\nobjects. Patch by Savannah Ostrowski.\ngh-115060\n: Speed up\npathlib.Path.glob()\nby omitting an initial\nis_dir()\ncall. As a result of this change,\nglob()\ncan no longer raise\nOSError\n.\ngh-77102\n:\nsite\nmodule now parses\n.pth\nfile with UTF-8 first,\nand\nlocale encoding\nif\nUnicodeDecodeError\nhappened. It\nsupported only locale encoding before.\ngh-76785\n: We’ve exposed the low-level\n_interpreters\nmodule for the\nsake of the PyPI implementation of\nPEP 734\n.  It was sometimes available\nas the\n_xxsubinterpreters\nmodule and was formerly used only for\ntesting. For the most part, it should be considered an internal module,\nlike\n_thread\nand\n_imp\n. See\nhttps://discuss.python.org/t/pep-734-multiple-interpreters-in-the-stdlib/41147/26\n.\ngh-115060\n: Speed up\npathlib.Path.glob()\nby not scanning directories\nfor non-wildcard pattern segments.\ngh-117727\n: Speed up\npathlib.Path.iterdir()\nby using\nos.scandir()\ninternally.\ngh-117586\n: Speed up\npathlib.Path.walk()\nby working with strings\ninternally.\ngh-117722\n: Change the new multi-separator support in\nasyncio.StreamReader.readuntil()\nto only accept tuples of separators\nrather than arbitrary iterables.\ngh-117692\n: Fixes a bug when\ndoctest.DocTestFinder\nwas failing on\nwrapped\nbuiltin_function_or_method\n.\ngh-117348\n: Largely restored import time performance of configparser by\navoiding dataclasses.\ngh-117641\n: Speedup\nos.path.commonpath()\non Unix.\ngh-117663\n: Fix\n_simple_enum\nto detect aliases when multiple arguments\nare present but only one is the member value.\ngh-117636\n: Speedup\nos.path.join()\n.\ngh-117618\n: Support\npackage.module\nas\nfilename\nfor\nbreak\ncommand of\npdb\ngh-102247\n: the status codes enum with constants in http.HTTPStatus are\nupdated to include the names from RFC9110. This RFC includes some HTTP\nstatuses previously only used for WEBDAV and assigns more generic names to\nthem.\nThe old constants are preserved for backwards compatibility.\ngh-117607\n: Speedup\nos.path.relpath()\n.\ngh-117586\n: Speed up\npathlib.Path.glob()\nby working with strings\ninternally.\ngh-117225\n: Add colour to doctest output. Patch by Hugo van Kemenade.\ngh-117566\n:\nipaddress.IPv6Address.is_loopback()\nwill now return\nTrue\nfor IPv4-mapped loopback addresses, i.e. addresses in the\n::ffff:127.0.0.0/104\naddress space.\ngh-117546\n: Fix issue where\nos.path.realpath()\nstopped resolving\nsymlinks after encountering a symlink loop on POSIX.\ngh-116720\n: Improved behavior of\nasyncio.TaskGroup\nwhen an\nexternal cancellation collides with an internal cancellation. For example,\nwhen two task groups are nested and both experience an exception in a\nchild task simultaneously, it was possible that the outer task group would\nmisbehave, because its internal cancellation was swallowed by the inner\ntask group.\nIn the case where a task group is cancelled externally and also must raise\nan\nExceptionGroup\n, it will now call the parent task’s\ncancel()\nmethod. This ensures that a\nasyncio.CancelledError\nwill be raised at the next\nawait\n,\nso the cancellation is not lost.\nAn added benefit of these changes is that task groups now preserve the\ncancellation count (\nasyncio.Task.cancelling()\n).\nIn order to handle some corner cases,\nasyncio.Task.uncancel()\nmay\nnow reset the undocumented\n_must_cancel\nflag when the cancellation\ncount reaches zero.\ngh-117516\n: Add\ntyping.TypeIs\n, implementing\nPEP 742\n. Patch by\nJelle Zijlstra.\ngh-117503\n: Fix support of non-ASCII user names in bytes paths in\nos.path.expanduser()\non Posix.\ngh-117394\n:\nos.path.ismount()\nis now 2-3 times faster if the user has\npermissions.\ngh-117313\n: Only treat\n'\\n'\n,\n'\\r'\nand\n'\\r\\n'\nas line separators\nin re-folding the\nemail\nmessages. Preserve control characters\n'\\v'\n,\n'\\f'\n,\n'\\x1c'\n,\n'\\x1d'\nand\n'\\x1e'\nand Unicode line\nseparators\n'\\x85'\n,\n'\\u2028'\nand\n'\\u2029'\nas is.\ngh-117142\n: Convert\n_ctypes\nto multi-phase initialisation\n(\nPEP 489\n).\ngh-66543\n: Add the\nmimetypes.guess_file_type()\nfunction which works\nwith file path. Passing file path instead of URL in\nguess_type()\nis\nsoft deprecated\n.\ngh-68583\n: webbrowser CLI: replace getopt with argparse, add long options.\nPatch by Hugo van Kemenade.\ngh-116871\n: Name suggestions for\nAttributeError\nand\nImportError\nnow only include underscored names if the original name\nwas underscored.\ngh-116023\n: Don’t show empty fields (value\nNone\nor\n[]\n) in\nast.dump()\nby default. Add\nshow_empty=False\nparameter to\noptionally show them.\ngh-115961\n: Added\nname\nand\nmode\nattributes for compressed\nand archived file-like objects in modules\nbz2\n,\nlzma\n,\ntarfile\nand\nzipfile\n. The value of the\nmode\nattribute of\ngzip.GzipFile\nwas changed from integer (\n1\nor\n2\n) to string (\n'rb'\nor\n'wb'\n). The value of the\nmode\nattribute of the readable file-like object returned by\nzipfile.ZipFile.open()\nwas changed from\n'r'\nto\n'rb'\n.\ngh-82062\n: Fix\ninspect.signature()\nto correctly handle parameter\ndefaults on methods in extension modules that use names defined in the\nmodule namespace.\ngh-83856\n: Honor\natexit\nfor all\nmultiprocessing\nstart methods\ngh-113081\n: Print colorized exception just like built-in traceback in\npdb\ngh-112855\n: Speed up pickling of\npathlib.PurePath\nobjects. Patch\nby Barney Gale.\ngh-111744\n: Support opcode events in\nbdb\ngh-109617\n:\nncurses\n: fixed a crash that could occur on macOS 13 or\nearlier when Python was built with Apple Xcode 15’s SDK.\ngh-83151\n: Enabled arbitrary statements and evaluations in\npdb\nshell\nto access the local variables of the current frame, which made it possible\nfor multi-scope code like generators or nested function to work.\ngh-110209\n: Add\n__class_getitem__()\nto\ntypes.GeneratorType\nand\ntypes.CoroutineType\nfor type\nhinting purposes. Patch by James Hilton-Balfe.\ngh-108191\n: The\ntypes.SimpleNamespace\nnow accepts an optional\npositional argument which specifies initial values of attributes as a dict\nor an iterable of key-value pairs.\ngh-62090\n: Fix assertion errors caused by whitespace in metavars or\nSUPPRESS\n-ed groups in\nargparse\nby simplifying usage formatting.\nPatch by Ali Hamdan.\ngh-102402\n: Adjust\nlogging.LogRecord\nto use\ntime.time_ns()\nand fix\nminor bug related to floating-point math.\ngh-100242\n: Bring pure Python implementation\nfunctools.partial.__new__\nmore in line with the C-implementation by not just always checking for the\npresence of the attribute\n'func'\non the first argument of\npartial\n.\nInstead, both the Python version and the C version perform an\nisinstance(func,\npartial)\ncheck on the first argument of\npartial\n.\ngh-99730\n: HEAD requests are no longer upgraded to GET request during\nredirects in urllib.\ngh-66410\n: Setting the\ntkinter\nmodule global\nwantobjects\nto\n2\nbefore creating the\nTk\nobject or call the\nwantobjects()\nmethod of the\nTk\nobject with argument\n2\nmakes now arguments to callbacks registered in the\ntkinter\nmodule\nto be passed as various Python objects (\nint\n,\nfloat\n,\nbytes\n,\ntuple\n), depending on their internal representation in Tcl, instead of\nalways\nstr\n.\ntkinter.wantobjects\nis now set to\n2\nby\ndefault.\nbpo-40943\n: Fix several IndexError when parse emails with truncated\nMessage-ID, address, routes, etc, e.g.\nexample@\n.\nbpo-39324\n: Add mime type mapping for .md <-> text/markdown\nbpo-18108\n:\nshutil.chown()\nnow supports\ndir_fd\nand\nfollow_symlinks\nkeyword arguments.\nbpo-30988\n: Fix parsing of emails with invalid address headers having a\nleading or trailing dot. Patch by tsufeki.\nbpo-32839\n: Add the\nafter_info()\nmethod for Tkinter widgets.\nDocumentation\n¶\ngh-117928\n: The minimum Sphinx version required for the documentation is\nnow 6.2.1.\nBuild\n¶\ngh-118734\n: Fixes Windows build when invoked directly (not through the\nbuild.bat\nscript) without specifying a value for\nUseTIER2\n.\ngh-115119\n: The\nconfigure\noption\n--with-system-libmpdec\nnow defaults to\nyes\n. The bundled copy of\nlibmpdecimal\nwill be\nremoved in Python 3.15.\ngh-117845\n: Fix building against recent libedit versions by detecting\nreadline hook signatures in\nconfigure\n.\ngh-116622\n: A testbed project was added to run the test suite on Android.\ngh-117645\n: Increase WASI stack size from 512 KiB to 8 MiB and the initial\nmemory from 10 MiB to 20 MiB. Patch by Victor Stinner.\ngh-115119\n:\nconfigure\nnow uses\npkg-config\nto detect\ndecimal\ndependencies if the\n--with-system-libmpdec\noption\nis given.\nWindows\n¶\ngh-115119\n: Update Windows installer to use libmpdecimal 4.0.0.\ngh-118486\n:\nos.mkdir()\nnow accepts\nmode\nof\n0o700\nto restrict\nthe new directory to the current user.\ngh-118347\n: Fixes launcher updates not being installed.\ngh-118293\n: The\nmultiprocessing\nmodule now passes the\nSTARTF_FORCEOFFFEEDBACK\nflag when spawning processes to tell Windows\nnot to change the mouse cursor.\ngh-115009\n: Update Windows installer to use SQLite 3.45.3.\ngh-90329\n: Suppress the warning displayed on virtual environment creation\nwhen the requested and created paths differ only by a short (8.3 style)\nname. Warnings will continue to be shown if a junction or symlink in the\npath caused the venv to be created in a different location than originally\nrequested.\ngh-117786\n: Fixes virtual environments not correctly launching when created\nfrom a Store install.\nmacOS\n¶\ngh-115119\n: Update macOS installer to use libmpdecimal 4.0.0.\ngh-114099\n: iOS preprocessor symbol usage was made compatible with older\nmacOS SDKs.\ngh-115009\n: Update macOS installer to use SQLite 3.45.3.\ngh-91629\n: Use\n~/.config/fish/conf.d\nconfigs and\nfish_add_path\nto set\nPATH\nwhen installing for the\nFish shell.\nIDLE\n¶\nbpo-34774\n: Use user-selected color theme for Help => IDLE Doc.\nC API\n¶\ngh-118124\n: Fix\nPy_BUILD_ASSERT\nand\nPy_BUILD_ASSERT_EXPR\nfor non-constant expressions: use\nstatic_assert()\non C11 and newer. Patch by Victor Stinner.\ngh-110850\n: Add “Raw” variant of PyTime functions\nPyTime_MonotonicRaw()\nPyTime_PerfCounterRaw()\nPyTime_TimeRaw()\nPatch by Victor Stinner.\ngh-117987\n: Restore functions removed in Python 3.13 alpha 1:\nPy_SetPythonHome()\nPy_SetProgramName()\nPySys_SetArgvEx()\nPySys_SetArgv()\nPatch by Victor Stinner.\ngh-117929\n: Restore removed\nPyEval_InitThreads()\nfunction. Patch by\nVictor Stinner.\ngh-117534\n: Improve validation logic in the C implementation of\ndatetime.datetime.fromisoformat()\nto better handle invalid years.\nPatch by Vlad Efanov.\ngh-68114\n: Fixed skipitem()’s handling of the old ‘w’ and ‘w#’ formatters.\nThese are no longer supported and now raise an exception if used.\ngh-111997\n: Add a C-API for firing monitoring events.\nPython 3.13.0 alpha 6\n¶\nRelease date: 2024-04-09\nCore and Builtins\n¶\ngh-117494\n: Refactored the instruction sequence data structure out of\ncompile.c into instruction_sequence.c.\ngh-116968\n: Introduce a unified 16-bit backoff counter type\n(\n_Py_BackoffCounter\n), shared between the Tier 1 adaptive specializer\nand the Tier 2 optimizer. The API used for adaptive specialization\ncounters is changed but the behavior is (supposed to be) identical.\nThe behavior of the Tier 2 counters is changed:\nThere are no longer dynamic thresholds (we never varied these).\nAll counters now use the same exponential backoff.\nThe counter for\nJUMP_BACKWARD\nstarts counting down from 16.\nThe\ntemperature\nin side exits starts counting down from 64.\ngh-117431\n: Improve the performance of the following\nbytes\nand\nbytearray\nmethods by adapting them to the\nMETH_FASTCALL\ncalling convention:\nendswith()\nstartswith()\ngh-117431\n: Improve the performance of the following\nstr\nmethods\nby adapting them to the\nMETH_FASTCALL\ncalling convention:\ncount()\nendswith()\nfind()\nindex()\nrfind()\nrindex()\nstartswith()\ngh-117411\n: Move\nPyFutureFeatures\nto an internal header and make it\nprivate.\ngh-109120\n: Added handle of incorrect star expressions, e.g\nf(3,\n*)\n.\nPatch by Grigoryev Semyon\ngh-117266\n: Fix crashes for certain user-created subclasses of\nast.AST\n. Such classes are now expected to set the\n_field_types\nattribute.\ngh-99108\n: Updated the\nhashlib\nbuilt-in\nHACL* project\nC code\nfrom upstream that we use for many implementations when they are not\npresent via OpenSSL in a given build.  This also avoids the rare potential\nfor a C symbol name one definition rule linking issue.\ngh-117108\n: Change the old space bit of objects in the young generation\nfrom 0 to gcstate->visited, so that any objects created during GC will\nhave the old bit set correctly if they get moved into the old generation.\ngh-117108\n: The cycle GC now chooses the size of increments based on the\ntotal heap size, instead of the rate of object creation. This ensures that\nit can keep up with growing heaps.\ngh-116735\n: For\nINSTRUMENTED_CALL_FUNCTION_EX\n, set\narg0\nto\nsys.monitoring.MISSING\ninstead of\nNone\nfor\nCALL\nevent.\ngh-113964\n: Starting new threads and process creation through\nos.fork()\nare now only prevented once all non-daemon threads exit.\ngh-116626\n: Ensure\nINSTRUMENTED_CALL_FUNCTION_EX\nalways emits\nCALL\ngh-116554\n:\nlist.sort()\nnow exploits more cases of partial ordering,\nparticularly those with long descending runs with sub-runs of equal\nvalues. Those are recognized as single runs now (previously, each block of\nrepeated values caused a new run to be created).\ngh-114099\n: Added a Loader that can discover extension modules in an\niOS-style Frameworks folder.\ngh-115775\n: Compiler populates the new\n__static_attributes__\nfield on a\nclass with the names of attributes of this class which are accessed\nthrough self.X from any function in its body.\ngh-115776\n: The array of values, the\nPyDictValues\nstruct is now\nembedded in the object during allocation. This provides better performance\nin the common case, and does not degrade as much when the object’s\n__dict__\nis materialized.\ngh-108362\n: Implement an incremental cyclic garbage collector. By\ncollecting the old generation in increments, there is no need for a full\nheap scan. This can hugely reduce maximum pause time for programs with\nlarge heaps.\nReduce the number of generations from three to two. The old generation is\nsplit into two spaces, “visited” and “pending”.\nCollection happens in two steps:: * An increment is formed from the young\ngeneration and a small part of the pending space. * This increment is\nscanned and the survivors moved to the end of the visited space.\nWhen the collecting space becomes empty, the two spaces are swapped.\ngh-109870\n: Dataclasses now calls\nexec()\nonce per dataclass, instead\nof once per method being added.  This can speed up dataclass creation by\nup to 20%.\ngh-97901\n: Mime type\ntext/rtf\nis now supported by\nmimetypes\n.\nbpo-24612\n: Improve the\nSyntaxError\nthat happens when ‘not’ appears\nafter an operator. Patch by Pablo Galindo\nLibrary\n¶\ngh-117648\n: Improve performance of\nos.path.join()\nand\nos.path.expanduser()\n.\ngh-117584\n: Raise\nTypeError\nfor non-paths in\nposixpath.relpath()\n.\ngh-117467\n: Preserve mailbox ownership when rewriting in\nmailbox.mbox.flush()\n. Patch by Tony Mountifield.\ngh-114848\n: Raise\nFileNotFoundError\nwhen\ngetcwd()\nreturns\n‘(unreachable)’, which can happen on Linux >= 2.6.36 with glibc < 2.27.\ngh-117459\n:\nasyncio.asyncio.run_coroutine_threadsafe()\nnow keeps the\ntraceback of\nCancelledError\n,\nTimeoutError\nand\nInvalidStateError\nwhich are raised in the coroutine.\ngh-117381\n: Fix error message for\nntpath.commonpath()\n.\ngh-117337\n: Deprecate undocumented\nglob.glob0()\nand\nglob.glob1()\nfunctions. Use\nglob.glob()\nand pass a directory\nto its\nroot_dir\nargument instead.\ngh-117349\n: Optimise several functions in\nos.path\n.\ngh-117348\n: Refactored\nconfigparser.RawConfigParser._read()\nto reduce\ncyclometric complexity and improve comprehensibility.\ngh-117335\n: Raise TypeError for non-sequences for\nntpath.commonpath()\n.\ngh-66449\n:\nconfigparser.ConfigParser\nnow accepts unnamed sections\nbefore named ones, if configured to do so.\ngh-88014\n: In documentation of\ngzip.GzipFile\nin module gzip,\nexplain data type of optional constructor argument\nmtime\n, and recommend\nmtime\n=\n0\nfor generating deterministic streams.\ngh-117310\n: Fixed an unlikely early & extra\nPy_DECREF\ntriggered crash\nin\nssl\nwhen creating a new\n_ssl._SSLContext\nif CPython was\nbuilt implausibly such that the default cipher list is empty\nor\nthe\nSSL library it was linked against reports a failure from its C\nSSL_CTX_set_cipher_list()\nAPI.\ngh-117294\n: A\nDocTestCase\nnow reports as skipped if all examples in the\ndoctest are skipped.\ngh-98966\n: In\nsubprocess\n, raise a more informative message when\nstdout=STDOUT\n.\ngh-117225\n: doctest: only print “and X failed” when non-zero, don’t\npluralise “1 items”. Patch by Hugo van Kemenade.\ngh-117205\n: Speed up\ncompileall.compile_dir()\nby 20% when using\nmultiprocessing by increasing\nchunksize\n.\ngh-117178\n: Fix regression in lazy loading of self-referential modules,\nintroduced in\ngh-114781\n.\ngh-112383\n: Fix\ndis\nmodule’s handling of\nENTER_EXECUTOR\ninstructions.\ngh-117182\n: Lazy-loading of modules that modify their own\n__class__\nno\nlonger reverts the\n__class__\nto\ntypes.ModuleType\n.\ngh-117084\n: Fix\nzipfile\nextraction for directory entries with the\nname containing backslashes on Windows.\ngh-117114\n: Make\nos.path.isdevdrive()\navailable on all platforms. For\nthose that do not offer Dev Drives, it will always return\nFalse\n.\ngh-117110\n: Fix a bug that prevents subclasses of\ntyping.Any\nto be\ninstantiated with arguments. Patch by Chris Fu.\ngh-109653\n: Deferred select imports in importlib.metadata and\nimportlib.resources for a 14% speedup.\ngh-70647\n: Start the deprecation period for the current behavior of\ndatetime.datetime.strptime()\nand\ntime.strptime()\nwhich always\nfails to parse a date string with a\nValueError\ninvolving a day of\nmonth such as\nstrptime(\"02-29\",\n\"%m-%d\")\nwhen a year is\nnot\nspecified and the date happen to be February 29th.  This should help avoid\nusers finding new bugs every four years due to a natural mistaken\nassumption about the API when parsing partial date values.\ngh-116987\n: Fixed\ninspect.findsource()\nfor class code objects.\ngh-114099\n: Modify standard library to allow for iOS platform differences.\ngh-90872\n: On Windows,\nsubprocess.Popen.wait()\nno longer calls\nWaitForSingleObject()\nwith a negative timeout: pass\n0\nms if the\ntimeout is negative. Patch by Victor Stinner.\ngh-116957\n: configparser: Don’t leave ConfigParser values in an invalid\nstate (stored as a list instead of a str) after an earlier read raised\nDuplicateSectionError or DuplicateOptionError.\ngh-115538\n:\n_io.WindowsConsoleIO\nnow emit a warning if a boolean\nvalue is passed as a filedescriptor argument.\ngh-90095\n: Ignore empty lines and comments in\n.pdbrc\ngh-106531\n: Refreshed zipfile._path from\nzipp 3.18\n, providing\nbetter compatibility for PyPy, better glob performance for deeply nested\nzipfiles, and providing internal access to\nCompleteDirs.inject\nfor use\nin other tests (like importlib.resources).\ngh-63207\n: On Windows,\ntime.time()\nnow uses the\nGetSystemTimePreciseAsFileTime()\nclock to have a resolution better\nthan 1 us, instead of the\nGetSystemTimeAsFileTime()\nclock which has a\nresolution of 15.6 ms. Patch by Victor Stinner.\ngh-116764\n: Restore support of\nNone\nand other false values in\nurllib.parse\nfunctions\nparse_qs()\nand\nparse_qsl()\n. Also, they now raise a TypeError for\nnon-zero integers and non-empty sequences.\ngh-116811\n: In\nPathFinder.invalidate_caches\n, delegate to\nMetadataPathFinder.invalidate_caches\n.\ngh-116647\n: Fix recursive child in dataclasses\ngh-113171\n: Fixed various false positives and false negatives in\nipaddress.IPv4Address.is_private\n(see these docs for details)\nipaddress.IPv4Address.is_global\nipaddress.IPv6Address.is_private\nipaddress.IPv6Address.is_global\nAlso in the corresponding\nipaddress.IPv4Network\nand\nipaddress.IPv6Network\nattributes.\ngh-63283\n: In\nencodings.idna\n, any capitalization of the ACE prefix\n(\nxn--\n) is now acceptable. Patch by Pepijn de Vos and Zackery Spytz.\ngh-71042\n: Add\nplatform.android_ver()\n, which provides device and OS\ninformation on Android.\ngh-73468\n: Added new\nmath.fma()\nfunction, wrapping C99’s\nfma()\noperation: fused multiply-add function. Patch by Mark Dickinson and Victor\nStinner.\ngh-116608\n: The\nimportlib.resources\nfunctions\nis_resource()\n,\nopen_binary()\n,\nopen_text()\n,\npath()\n,\nread_binary()\n, and\nread_text()\nare un-deprecated, and support\nsubdirectories via multiple positional arguments. The\ncontents()\nfunction also allows subdirectories,\nbut remains deprecated.\ngh-116484\n: Change automatically generated\ntkinter.Checkbutton\nwidget names to avoid collisions with automatically generated\ntkinter.ttk.Checkbutton\nwidget names within the same parent\nwidget.\ngh-114314\n: In\nctypes\n, ctype data is now stored in type objects\ndirectly rather than in a dict subclass. This is an internal change that\nshould not affect usage.\ngh-116401\n: Fix blocking\nos.fwalk()\nand\nshutil.rmtree()\non\nopening named pipe.\ngh-71052\n: Implement\nctypes.util.find_library()\non Android.\ngh-90535\n: Fix support of\ninterval\nvalues > 1 in\nlogging.TimedRotatingFileHandler\nfor\nwhen='MIDNIGHT'\nand\nwhen='Wx'\n.\ngh-113308\n: Remove some internal protected parts from\nuuid\n:\n_has_uuid_generate_time_safe\n,\n_netbios_getnode\n,\n_ipconfig_getnode\n, and\n_load_system_functions\n. They were unused.\ngh-115627\n: Fix the\nssl\nmodule error handling of connection\nterminate by peer. It now throws an OSError with the appropriate error\ncode instead of an EOFError.\ngh-114847\n: Speed up\nos.path.realpath()\non non-Windows platforms.\ngh-114271\n: Fix a race in\nthreading.Thread.join()\n.\nthreading._MainThread\nnow always represents the main thread of the\nmain interpreter.\nPyThreadState.on_delete\nand\nPyThreadState.on_delete_data\nhave been\nremoved.\ngh-113538\n: Add\nasyncio.Server.close_clients()\nand\nasyncio.Server.abort_clients()\nmethods which allow to more\nforcefully close an asyncio server.\ngh-85287\n: Changes Unicode codecs to return UnicodeEncodeError or\nUnicodeDecodeError, rather than just UnicodeError.\ngh-113548\n:\npdb\nnow allows CLI arguments to\npdb\n-m\n.\ngh-112948\n: Make completion of\npdb\nsimilar to Python REPL\ngh-105866\n: Fixed\n_get_slots\nbug which caused error when defining\ndataclasses with slots and a weakref_slot.\ngh-96471\n: Add\nasyncio.Queue\ntermination with\nshutdown()\nmethod.\ngh-89739\n: The\nzipimport\nmodule can now read ZIP64 files.\nbpo-33533\n:\nasyncio.as_completed()\nnow returns an object that is both\nan asynchronous iterator and plain iterator. The new asynchronous\niteration pattern allows for easier correlation between prior tasks and\ntheir completed results. This is a closer match to\nconcurrent.futures.as_completed()\n’s iteration pattern. Patch by\nJustin Arthur.\nbpo-27578\n:\ninspect.getsource()\n(and related functions) work with\nempty module files, returning\n'\\n'\n(or reasonable equivalent) instead\nof raising\nOSError\n. Patch by Kernc.\nbpo-37141\n: Accept an iterable of separators in\nasyncio.StreamReader.readuntil()\n, stopping when one of them is\nencountered.\ngh-66543\n: Make\nmimetypes.guess_type()\nproperly parsing of URLs with\nonly a host name, URLs containing fragment or query, and filenames with\nonly a UNC sharepoint on Windows. Based on patch by Dong-hee Na.\nbpo-15010\n:\nunittest.TestLoader.discover()\nnow saves the original\nvalue of\nunittest.TestLoader._top_level_dir\nand restores it at the end\nof the call.\nDocumentation\n¶\ngh-115977\n: Remove compatibility references to Emscripten.\ngh-114099\n: Add an iOS platform guide, and flag modules not available on\niOS.\ngh-91565\n: Changes to documentation files and config outputs to reflect the\nnew location for reporting bugs - i.e. GitHub rather than bugs.python.org.\nTests\n¶\ngh-83434\n: Disable JUnit XML output (\n--junit-xml=FILE\ncommand line\noption) in regrtest when hunting for reference leaks (\n-R\noption).\nPatch by Victor Stinner.\ngh-117187\n: Fix XML tests for vanilla Expat <2.6.0.\ngh-116333\n: Tests of TLS related things (error codes, etc) were updated to\nbe more lenient about specific error message strings and behaviors as seen\nin the BoringSSL and AWS-LC forks of OpenSSL.\ngh-117089\n: Consolidated tests for importlib.metadata in their own\nmetadata\npackage.\ngh-115979\n: Update test_importlib so that it passes under WASI SDK 21.\ngh-112536\n: Add –tsan to test.regrtest for running TSAN tests in\nreasonable execution times. Patch by Donghee Na.\ngh-116307\n: Added import helper\nisolated_modules\nas\nCleanImport\ndoes not remove modules imported during the context. Use it in\nimportlib.resources tests to avoid leaving\nmod\naround to impede\nimportlib.metadata tests.\nBuild\n¶\ngh-114736\n: Have WASI builds use WASI SDK 21.\ngh-115983\n: Skip building test modules that must be built as shared under\nWASI.\ngh-71052\n: Add Android build script and instructions.\nWindows\n¶\ngh-117267\n: Ensure\nDirEntry.stat().st_ctime\nbehaves consistently with\nos.stat()\nduring the deprecation period of\nst_ctime\nby\ncontaining the same value as\nst_birthtime\n. After the deprecation\nperiod,\nst_ctime\nwill be the metadata change time (or unavailable\nthrough\nDirEntry\n), and only\nst_birthtime\nwill contain the creation\ntime.\ngh-116195\n: Improves performance of\nos.getppid()\nby using an\nalternate system API when available. Contributed by vxiiduu.\ngh-88494\n: On Windows,\ntime.monotonic()\nnow uses the\nQueryPerformanceCounter()\nclock to have a resolution better than 1 us,\ninstead of the\nGetTickCount64()\nclock which has a resolution of 15.6\nms. Patch by Victor Stinner.\ngh-116773\n: Fix instances of\n<_overlapped.Overlapped\nobject\nat\n0xXXX>\nstill\nhas\npending\noperation\nat\ndeallocation,\nthe\nprocess\nmay\ncrash\n.\ngh-91227\n: Fix the asyncio ProactorEventLoop implementation so that sending\na datagram to an address that is not listening does not prevent receiving\nany more datagrams.\ngh-115119\n: Switched from vendored\nlibmpdecimal\ncode to a\nseparately-hosted external package in the\ncpython-source-deps\nrepository when building the\n_decimal\nmodule.\nC API\n¶\ngh-117642\n: Fix\nPEP 737\nimplementation for\n%#T\nand\n%#N\n.\ngh-87193\n:\n_PyBytes_Resize()\ncan now be called for bytes objects\nwith reference count > 1, including 1-byte bytes objects. It creates a new\nbytes object and destroys the old one if it has reference count > 1.\ngh-117021\n: Fix integer overflow in\nPyLong_AsPid()\non non-Windows\n64-bit platforms.\ngh-115756\n:\nPyCode_GetFirstFree()\nis an ustable API now and has\nbeen renamed to\nPyUnstable_Code_GetFirstFree()\n. (Contributed by\nBogdan Romanyuk in\ngh-115781\n)\ngh-116869\n: Add\ntest_cext\ntest: build a C extension to check if the\nPython C API emits C compiler warnings. Patch by Victor Stinner.\ngh-116869\n: Make the C API compatible with\n-Werror=declaration-after-statement\ncompiler flag again. Patch by\nVictor Stinner.\ngh-116936\n: Add\nPyType_GetModuleByDef()\nto the limited C API. Patch\nby Victor Stinner.\ngh-116809\n: Restore removed private\n_PyErr_ChainExceptions1()\nfunction.\nPatch by Victor Stinner.\ngh-115754\n: In the limited C API version 3.13, getting\nPy_None\n,\nPy_False\n,\nPy_True\n,\nPy_Ellipsis\nand\nPy_NotImplemented\nsingletons is now implemented as function calls at the stable ABI level to\nhide implementation details. Getting these constants still return borrowed\nreferences. Patch by Victor Stinner.\ngh-115754\n: Add\nPy_GetConstant()\nand\nPy_GetConstantBorrowed()\nfunctions to get constants. For example,\nPy_GetConstant(Py_CONSTANT_ZERO)\nreturns a\nstrong reference\nto\nthe constant zero. Patch by Victor Stinner.\ngh-111696\n: Add support for\n%T\n,\n%T#\n,\n%N\nand\n%N#\nformats to\nPyUnicode_FromFormat()\n: format the fully qualified name of an\nobject type and of a type: call\nPyType_GetModuleName()\n. See\nPEP 737\nfor more information. Patch by Victor Stinner.\ngh-111696\n: Add\nPyType_GetModuleName()\nfunction to get the type’s\nmodule name. Equivalent to getting the\ntype.__module__\nattribute.\nPatch by Eric Snow and Victor Stinner.\ngh-111696\n: Add\nPyType_GetFullyQualifiedName()\nfunction to get the\ntype’s fully qualified name. Equivalent to\nf\"{type.__module__}.{type.__qualname__}\"\n, or\ntype.__qualname__\nif\ntype.__module__\nis not a string or is equal to\n\"builtins\"\n. Patch\nby Victor Stinner.\ngh-85283\n: The\nfcntl\n,\ngrp\n,\npwd\n,\ntermios\n,\n_statistics\nand\n_testconsole\nC extensions are now built with the\nlimited C\nAPI\n. Patch by Victor Stinner.\ngh-111140\n: Add additional flags to\nPyLong_AsNativeBytes()\nand\nPyLong_FromNativeBytes()\nto allow the caller to determine how to\nhandle edge cases around values that fill the entire buffer.\ngh-113024\n: Add\nPyObject_GenericHash()\nfunction.\nPython 3.13.0 alpha 5\n¶\nRelease date: 2024-03-12\nSecurity\n¶\ngh-115398\n: Allow controlling Expat >=2.6.0 reparse deferral\n(\nCVE 2023-52425\n) by adding five new methods:\nxml.etree.ElementTree.XMLParser.flush()\nxml.etree.ElementTree.XMLPullParser.flush()\nxml.parsers.expat.xmlparser.GetReparseDeferralEnabled()\nxml.parsers.expat.xmlparser.SetReparseDeferralEnabled()\nxml.sax.expatreader.ExpatParser.flush()\ngh-114572\n:\nssl.SSLContext.cert_store_stats()\nand\nssl.SSLContext.get_ca_certs()\nnow correctly lock access to the\ncertificate store, when the\nssl.SSLContext\nis shared across\nmultiple threads.\nCore and Builtins\n¶\ngh-116604\n: Respect the status of the garbage collector when indirect calls\nare made via\nPyErr_CheckSignals()\nand the evaluation breaker.\nPatch by Pablo Galindo\ngh-112087\n:\nlist\nis now compatible with the implementation of\nPEP 703\n.\ngh-116381\n: Add specialization for\nCONTAINS_OP\n.\ngh-116296\n: Fix possible refleak in\nobject.__reduce__()\ninternal\nerror handling.\ngh-115823\n: Properly calculate error ranges in the parser when raising\nSyntaxError\nexceptions caused by invalid byte sequences. Patch by\nPablo Galindo\ngh-115778\n: Add\ntierN\nannotation for instruction definition in\ninterpreter DSL.\ngh-115733\n: Fix crash when calling\nnext()\non exhausted list iterators.\ngh-115700\n: The regen-cases build stage now works on Windows.\ngh-115347\n: Fix bug where docstring was replaced by a redundant NOP when\nPython is run with\n-OO\n.\ngh-115323\n: Make error message more meaningful for when\nbytearray.extend()\nis called with a\nstr\nobject.\ngh-112175\n: Every\nPyThreadState\nnow has its own\neval_breaker\n,\nallowing specific threads to be interrupted.\ngh-115154\n: Fix a bug that was causing the\ntokenize.untokenize()\nfunction to handle unicode named literals incorrectly. Patch by Pablo\nGalindo\ngh-112433\n: Add ability to force alignment of\nctypes.Structure\nby\nway of the new\n_align_\nattribute on the class.\ngh-104090\n: The multiprocessing resource tracker now exits with non-zero\nstatus code if a resource leak was detected. It still exits with status\ncode 0 otherwise.\ngh-105858\n: Improve the constructors for\nast\nnodes. Arguments of\nlist types now default to an empty list if omitted, and optional fields\ndefault to\nNone\n. AST nodes now have an\n__annotations__\nattribute\nwith the expected types of their attributes. Passing unrecognized extra\narguments to AST nodes is deprecated and will become an error in Python\n3.15. Omitting a required argument to an AST node is deprecated and will\nbecome an error in Python 3.15. Patch by Jelle Zijlstra.\ngh-101860\n: Expose\n__name__\nattribute on property.\ngh-96497\n: Fix incorrect resolution of mangled class variables used in\nassignment expressions in comprehensions.\nLibrary\n¶\ngh-116600\n: Fix\nrepr()\nfor global\nFlag\nmembers.\ngh-116349\n:\nplatform.java_ver()\nis deprecated and will be removed in\n3.15. It was largely untested, had a confusing API, and was only useful\nfor Jython support.\ngh-116143\n: Fix a race in pydoc\n_start_server\n, eliminating a window in\nwhich\n_start_server\ncan return a thread that is “serving” but without\na\ndocserver\nset.\ngh-116127\n:\ntyping\n: implement\nPEP 705\nwhich adds\ntyping.ReadOnly\nsupport to\ntyping.TypedDict\n.\ngh-116325\n:\ntyping\n: raise\nSyntaxError\ninstead of\nAttributeError\non forward references as empty strings.\ngh-115957\n: When\nasyncio.TaskGroup.create_task\nis called on an inactive\nasyncio.TaskGroup\n, the given coroutine will be closed (which prevents\na\nRuntimeWarning\n).\ngh-115978\n: Disable preadv(), readv(), pwritev(), and writev() on WASI.\nUnder wasmtime for WASI 0.2, these functions don’t pass test_posix\n(\nhttps://github.com/bytecodealliance/wasmtime/issues/7830\n).\ngh-88352\n: Fix the computation of the next rollover time in the\nlogging.TimedRotatingFileHandler\nhandler.\ncomputeRollover()\nnow always returns a timestamp larger than the\nspecified time and works correctly during the DST change.\ndoRollover()\nno longer overwrite the already rolled over file,\nsaving from data loss when run at midnight or during repeated time at the\nDST change.\ngh-87115\n: Set\n__main__.__spec__\nto\nNone\nwhen running a script with\npdb\ngh-76511\n: Fix UnicodeEncodeError in\nemail.Message.as_string()\nthat\nresults when a message that claims to be in the ascii character set\nactually has non-ascii characters. Non-ascii characters are now replaced\nwith the U+FFFD replacement character, like in the\nreplace\nerror\nhandler.\ngh-89547\n: Add support for nested typing special forms like\nFinal[ClassVar[int]].\ngh-65824\n: Improve the\nless\nprompt in\npydoc\n.\ngh-116040\n: [Enum] fix by-value calls when second value is falsey; e.g.\nCardinal(1, 0)\ngh-115821\n: [Enum] Improve error message when calling super().__new__() in\ncustom __new__.\ngh-85644\n: Use the\nXDG_CURRENT_DESKTOP\nenvironment variable in\nwebbrowser\nto check desktop. Prefer it to the deprecated\nGNOME_DESKTOP_SESSION_ID\nfor GNOME detection.\ngh-75988\n: Fixed\nunittest.mock.create_autospec()\nto pass the call\nthrough to the wrapped object to return the real result.\ngh-115881\n: Fix issue where\nast.parse()\nwould incorrectly flag\nconditional context managers (such as\nwith\n(x()\nif\ny\nelse\nz()):\n...\n)\nas invalid syntax if\nfeature_version=(3,\n8)\nwas passed. This reverts\nchanges to the grammar made as part of\ngh-94949\n.\ngh-115886\n: Fix silent truncation of the name with an embedded null\ncharacter in\nmultiprocessing.shared_memory.SharedMemory\n.\ngh-115532\n: Add kernel density estimation to the statistics module.\ngh-115714\n: On WASI, the\ntime\nmodule no longer get process time\nusing\ntimes()\nor\nCLOCK_PROCESS_CPUTIME_ID\n, system API is that is\nunreliable and is likely to be removed from WASI. The affected clock\nfunctions fall back to calling\nclock()\n.\ngh-115809\n: Improve algorithm for computing which rolled-over log files to\ndelete in\nlogging.TimedRotatingFileHandler\n. It is now reliable\nfor handlers without\nnamer\nand with arbitrary deterministic\nnamer\nthat leaves the datetime part in the file name unmodified.\ngh-74668\n:\nurllib.parse\nfunctions\nparse_qs()\nand\nparse_qsl()\nnow support bytes arguments containing raw\nand percent-encoded non-ASCII data.\ngh-67044\n:\ncsv.writer()\nnow always quotes or escapes\n'\\r'\nand\n'\\n'\n, regardless of\nlineterminator\nvalue.\ngh-115712\n: Restore support of space delimiter with\nskipinitialspace=True\nin\ncsv\n.\ncsv.writer()\nnow quotes\nempty fields if delimiter is a space and skipinitialspace is true and\nraises exception if quoting is not possible.\ngh-112364\n: Fixed\nast.unparse()\nto handle format_spec with\n\"\n,\n'\nor\n\\\\\n. Patched by Frank Hoffmann.\ngh-112997\n: Stop logging potentially sensitive callback arguments in\nasyncio\nunless debug mode is active.\ngh-114914\n: Fix an issue where an abandoned\nStreamWriter\nwould not\nbe garbage collected.\ngh-111358\n: Fix a bug in\nasyncio.BaseEventLoop.shutdown_default_executor()\nto ensure the\ntimeout passed to the coroutine behaves as expected.\ngh-115618\n: Fix improper decreasing the reference count for\nNone\nargument in\nproperty\nmethods\ngetter()\n,\nsetter()\nand\ndeleter()\n.\ngh-112720\n: Refactor\ndis.ArgResolver\nto make it possible to\nsubclass and change the way jump args are interpreted.\ngh-112006\n: Fix\ninspect.unwrap()\nfor types with the\n__wrapper__\ndata descriptor. Fix\ninspect.Signature.from_callable()\nfor builtins\nclassmethod()\nand\nstaticmethod()\n.\ngh-101293\n: Support callables with the\n__call__()\nmethod and types with\n__new__()\nand\n__init__()\nmethods set to class methods, static\nmethods, bound methods, partial functions, and other types of methods and\ndescriptors in\ninspect.Signature.from_callable()\n.\ngh-103092\n: Isolate\n_lsprof\n(apply\nPEP 687\n).\ngh-113942\n:\npydoc\nno longer skips global functions implemented as\nbuiltin methods, such as\nMethodDescriptorType\nand\nWrapperDescriptorType\n.\ngh-115256\n: Added DeprecationWarning when accessing the tarfile attribute\nof TarInfo objects. The attribute is never used internally and is only\nattached to TarInfos when the tarfile is opened in write-mode, not\nread-mode. The attribute creates an unnecessary reference cycle which may\ncause corruption when not closing the handle after writing a tarfile.\ngh-115197\n:\nurllib.request\nno longer resolves the hostname before\nchecking it against the system’s proxy bypass list on macOS and Windows.\ngh-113812\n:\nDatagramTransport.sendto()\nwill now send zero-length\ndatagrams if called with an empty bytes object. The transport flow control\nalso now accounts for the datagram header when calculating the buffer\nsize.\ngh-114763\n: Protect modules loaded with\nimportlib.util.LazyLoader\nfrom race conditions when multiple threads try to access attributes before\nthe loading is complete.\ngh-114709\n:\nposixpath.commonpath()\nnow raises a\nValueError\nexception when passed an empty iterable. Previously,\nIndexError\nwas\nraised.\nposixpath.commonpath()\nnow raises a\nTypeError\nexception when\npassed\nNone\n. Previously,\nValueError\nwas raised.\ngh-114610\n: Fix bug where\npathlib.PurePath.with_stem()\nconverted a\nnon-empty path suffix to a stem when given an empty\nstem\nargument. It\nnow raises\nValueError\n, just like\npathlib.PurePath.with_suffix()\ndoes when called on a path with an\nempty stem, given a non-empty\nsuffix\nargument.\ngh-107361\n: Add\nssl.VERIFY_X509_PARTIAL_CHAIN\nand\nVERIFY_X509_STRICT\nto the default SSL context created with\nssl.create_default_context()\n.\ngh-112281\n: Allow creating\nunion of types\nfor\ntyping.Annotated\nwith unhashable metadata.\ngh-111775\n: Fix\nimportlib.resources.simple.ResourceHandle.open()\nfor\ntext mode, added missed\nstream\nargument.\ngh-90095\n: Make .pdbrc and -c work with any valid pdb commands.\ngh-107625\n: Raise\nconfigparser.ParsingError\nfrom\nread()\nand\nread_file()\nmethods of\nconfigparser.ConfigParser\nif a key without a corresponding value\nis continued (that is, followed by an indented line).\ngh-107155\n: Fix incorrect output of\nhelp(x)\nwhere\nx\nis a\nlambda\nfunction, which has an\n__annotations__\ndictionary\nattribute with a\n\"return\"\nkey.\ngh-57141\n: Add option for\nnon-shallow\ncomparisons to\nfilecmp.dircmp\nlike\nfilecmp.cmp()\n. Original patch by Steven\nWard. Enhanced by Tobias Rautenkranz\ngh-69990\n:\nProfile.print_stats()\nhas been improved to accept multiple\nsort arguments. Patched by Chiu-Hsiang Hsu and Furkan Onder.\ngh-104061\n: Add\nsocket.SO_BINDTOIFINDEX\nconstant.\ngh-60346\n: Fix ArgumentParser inconsistent with parse_known_args.\ngh-102389\n: Add\nwindows_31j\nto aliases for\ncp932\ncodec\ngh-72249\n:\nfunctools.partial`s\nof\n:func:`repr()\nhas been improved to\ninclude the\nmodule\nname. Patched by Furkan Onder and Anilyka\nBarry.\ngh-100985\n: Update HTTPSConnection to consistently wrap IPv6 Addresses when\nusing a proxy.\ngh-100884\n: email: fix misfolding of comma in address-lists over multiple\nlines in combination with unicode encoding.\ngh-95782\n: Fix\nio.BufferedReader.tell()\n,\nio.BufferedReader.seek()\n,\n_pyio.BufferedReader.tell()\n,\nio.BufferedRandom.tell()\n,\nio.BufferedRandom.seek()\nand\n_pyio.BufferedRandom.tell()\nbeing able to return negative offsets.\ngh-96310\n: Fix a traceback in\nargparse\nwhen all options in a\nmutually exclusive group are suppressed.\ngh-93205\n: Fixed a bug in\nlogging.handlers.TimedRotatingFileHandler\nwhere multiple rotating\nhandler instances pointing to files with the same name but different\nextensions would conflict and not delete the correct files.\nbpo-31116\n: Add Z85 encoding to\nbase64\n.\nbpo-44865\n: Add missing call to localization function in\nargparse\n.\nbpo-43952\n: Fix\nmultiprocessing.connection.Listener.accept()\nto\naccept empty bytes as authkey. Not accepting empty bytes as key causes it\nto hang indefinitely.\nbpo-42125\n: linecache: get module name from\n__spec__\nif available. This\nallows getting source code for the\n__main__\nmodule when a custom\nloader is used.\nbpo-41122\n: Failing to pass arguments properly to\nfunctools.singledispatchmethod()\nnow throws a TypeError instead of\nhitting an index out of bounds internally.\nbpo-40818\n: The asyncio REPL now runs\nsys.__interactivehook__\non\nstartup. The default implementation of\nsys.__interactivehook__\nprovides auto-completion to the asyncio REPL. Patch contributed by Rémi\nLapeyre.\nbpo-33775\n: Add ‘default’ and ‘version’ help text for localization in\nargparse.\nDocumentation\n¶\ngh-115399\n: Document\nCVE 2023-52425\nof Expat <2.6.0 under “XML\nvulnerabilities”.\ngh-109653\n: Improve import time of\nuuid\non Linux.\nTests\n¶\ngh-71052\n: Add test exclusions to support running the test suite on\nAndroid.\ngh-71052\n: Enable\ntest_concurrent_futures\non platforms that support\nthreading but not multiprocessing.\ngh-115796\n: Make ‘_testinternalcapi.assemble_code_object’ construct the\nexception table for the code object.\ngh-115720\n: Leak tests (\n-R\n,\n--huntrleaks\n) now show a summary of the\nnumber of leaks found in each iteration.\ngh-115122\n: Add\n--bisect\noption to regrtest test runner: run failed\ntests with\ntest.bisect_cmd\nto identify failing tests. Patch by Victor\nStinner.\ngh-115596\n: Fix\nProgramPriorityTests\nin\ntest_os\npermanently\nchanging the process priority.\ngh-115556\n: On Windows, commas passed in arguments to\nTools\\buildbot\\test.bat\nand\nPCbuild\\\\rt.bat\nare now properly\nhandled.\ngh-115420\n: Fix translation of exception handler targets by\n_testinternalcapi.optimize_cfg\n.\ngh-115376\n: Fix segfault in\n_testinternalcapi.compiler_codegen\non bad\ninput.\nBuild\n¶\ngh-116313\n: Get WASI builds to work under wasmtime 18 w/ WASI 0.2/preview2\nprimitives.\ngh-71052\n: Change Android’s\nsys.platform\nfrom\n\"linux\"\nto\n\"android\"\n.\ngh-116117\n: Backport\nlibb2\n’s PR #42 to fix compiling CPython on 32-bit\nWindows with\nclang-cl\n.\ngh-71052\n: Fix several Android build issues\ngh-114099\n: A testbed project was added to run the test suite on iOS.\ngh-115350\n: Fix building ctypes module with -DWIN32_LEAN_AND_MEAN defined\ngh-111225\n: Link extension modules against libpython on Android.\ngh-115737\n: The install name for libPython is now correctly set for\nnon-framework macOS builds.\ngh-114099\n: Makefile targets were added to support compiling an\niOS-compatible framework build.\nWindows\n¶\ngh-116012\n: Ensure the value of\nGetLastError()\nis preserved across GIL\noperations.\ngh-115582\n: Building extensions intended for free-threaded builds of\nCPython now require compiling with\n/DPy_GIL_DISABLED\nmanually when\nusing a regular install. This is expected to change in future releases.\ngh-115554\n: The installer now has more strict rules about updating the\nPython Launcher for Windows\n. In general, most users only have a single launcher\ninstalled and will see no difference. When multiple launchers have been\ninstalled, the option to install the launcher is disabled until all but\none have been removed. Downgrading the launcher (which was never allowed)\nis now more obviously blocked.\ngh-115543\n:\nPython Launcher for Windows\ncan now detect Python 3.13 when installed from\nthe Microsoft Store, and will install Python 3.12 by default when\nPYLAUNCHER_ALLOW_INSTALL\nis set.\nmacOS\n¶\ngh-116145\n: Update macOS installer to Tcl/Tk 8.6.14.\nIDLE\n¶\ngh-88516\n: On macOS show a proxy icon in the title bar of editor windows to\nmatch platform behaviour.\nTools/Demos\n¶\ngh-100176\n: Remove outdated Tools/{io,cc,string}bench\nbpo-45101\n: Add consistency in usage message IO between 2 versions of\npython-config.\nC API\n¶\ngh-114626\n: Add again\n_PyCFunctionFastWithKeywords\nname, removed in\nPython 3.13 alpha 4 by mistake.  Keep the old private\n_PyCFunctionFastWithKeywords\nname (Python 3.7) as an alias to the new\npublic name\nPyCFunctionFastWithKeywords\n(Python 3.13a4). Patch by\nVictor Stinner.\ngh-111418\n: Add\nPyHASH_MODULUS\n,\nPyHASH_BITS\n,\nPyHASH_INF\nand\nPyHASH_IMAG\nC macros.  Patch by\nSergey B Kirpichev.\nPython 3.13.0 alpha 4\n¶\nRelease date: 2024-02-15\nSecurity\n¶\ngh-115399\n: Update bundled libexpat to 2.6.0\ngh-115243\n: Fix possible crashes in\ncollections.deque.index()\nwhen\nthe deque is concurrently modified.\nCore and Builtins\n¶\ngh-112087\n: For an empty reverse iterator for list will be reduced to\nreversed()\n. Patch by Donghee Na\ngh-114570\n: Add\nPythonFinalizationError\nexception. This exception\nderived from\nRuntimeError\nis raised when an operation is blocked\nduring the\nPython finalization\n. Patch by\nVictor Stinner.\ngh-114695\n: Add\nsys._clear_internal_caches()\n, which clears all\ninternal performance-related caches (and deprecate the less-general\nsys._clear_type_cache()\nfunction).\ngh-114828\n: Fix compilation crashes in uncommon code examples using\nsuper()\ninside a comprehension in a class body.\ngh-112069\n: Adapt\nset\nand\nfrozenset\nmethods to Argument\nClinic.\ngh-115011\n: Setters for members with an unsigned integer type now support\nthe same range of valid values for objects that has a\n__index__()\nmethod as for\nint\n.\ngh-114887\n: Changed socket type validation in\ncreate_datagram_endpoint()\nto accept all non-stream\nsockets. This fixes a regression in compatibility with raw sockets.\ngh-114944\n: Fixes a race between\nPyParkingLot_Park\nand\n_PyParkingLot_UnparkAll\n.\ngh-113462\n: Limit the number of versions that a single class can use.\nPrevents a few wayward classes using up all the version numbers.\ngh-76763\n: The\nchr()\nbuiltin function now always raises\nValueError\nfor values outside the valid range. Previously it raised\nOverflowError\nfor very large or small values.\ngh-114806\n: No longer specialize calls to classes, if those classes have\nmetaclasses. Fixes bug where the\n__call__\nmethod of the metaclass was\nnot being called.\ngh-107944\n: Improve error message for function calls with bad keyword\narguments via getargs\ngh-112529\n: The free-threaded build no longer allocates space for the\nPyGC_Head\nstructure in objects that support cyclic garbage collection.\nA number of other fields and data structures are used as replacements,\nincluding\nob_gc_bits\n,\nob_tid\n, and mimalloc internal data\nstructures.\ngh-114456\n: Lower the recursion limit under a debug build of WASI.\ngh-114083\n: Compiler applies folding of LOAD_CONST with following\ninstruction in a separate pass before other optimisations. This enables\njump threading in certain circumstances.\ngh-114388\n: Fix a\nRuntimeWarning\nemitted when assign an integer-like\nvalue that is not an instance of\nint\nto an attribute that\ncorresponds to a C struct member of\ntype\nT_UINT\nand T_ULONG. Fix a double\nRuntimeWarning\nemitted when assign a\nnegative integer value to an attribute that corresponds to a C struct\nmember of type T_UINT.\ngh-114265\n: Compiler propagates line numbers before optimization, leading\nto more optimization opportunities and removing the need for the\nguarantee_lineno_for_exits\nhack.\ngh-112529\n: The free-threaded build now has its own thread-safe GC\nimplementation that uses mimalloc to find GC tracked objects. It is\nnon-generational, unlike the existing GC implementation.\ngh-114050\n: Fix segmentation fault caused by an incorrect format string in\nTypeError\nexception when more than two arguments are passed to\nint\n.\ngh-112354\n: The\nEND_FOR\ninstruction now pops only one value. This is to\nbetter support side exits in loops.\ngh-113884\n: Make\nqueue.SimpleQueue\nthread safe when the GIL is\ndisabled.\ngh-114058\n: Implement the foundations of the Tier 2 redundancy eliminator.\ngh-113939\n: frame.clear(): Clear frame.f_locals as well, and not only the\nfast locals. This is relevant once frame.f_locals was accessed, which\nwould contain also references to all the locals.\ngh-112050\n: Convert\ncollections.deque\nto use Argument Clinic.\ngh-112050\n: Make methods on\ncollections.deque\nthread-safe when the\nGIL is disabled.\ngh-113464\n: Add an option (\n--enable-experimental-jit\nfor\nconfigure\n-based builds or\n--experimental-jit\nfor\nPCbuild\n-based\nones) to build an\nexperimental\njust-in-time compiler, based on\ncopy-and-patch\ngh-113055\n: Make interp->obmalloc a pointer. For interpreters that share\nstate with the main interpreter, this points to the same static memory\nstructure. For interpreters with their own obmalloc state, it is heap\nallocated. Add free_obmalloc_arenas() which will free the obmalloc arenas\nand radix tree structures for interpreters with their own obmalloc state.\ngh-55664\n: Add warning when creating\ntype\nusing a namespace\ndictionary with non-string keys. Patched by Daniel Urban and Furkan Onder.\ngh-104530\n: Use native Win32 condition variables.\nLibrary\n¶\ngh-115392\n: Fix a bug in\ndoctest\nwhere incorrect line numbers would\nbe reported for decorated functions.\ngh-114563\n: Fix several\nformat()\nbugs when using the C implementation\nof\nDecimal\n: * memory leak in some rare cases when using\nthe\nz\nformat option (coerce negative 0) * incorrect output when\napplying the\nz\nformat option to type\nF\n(fixed-point with capital\nNAN\n/\nINF\n) * incorrect output when applying the\n#\nformat\noption (alternate form)\ngh-102840\n: Fix confused traceback when floordiv, mod, or divmod operations\nhappens between instances of\nfractions.Fraction\nand\ncomplex\n.\ngh-115165\n: Most exceptions are now ignored when attempting to set the\n__orig_class__\nattribute on objects returned when calling\ntyping\ngeneric aliases (including generic aliases created using\ntyping.Annotated\n). Previously only\nAttributeError\nwas\nignored. Patch by Dave Shawley.\ngh-112903\n: Fix “issubclass() arg 1 must be a class” errors in certain\ncases of multiple inheritance with generic aliases (regression in early\n3.13 alpha releases).\ngh-115133\n: Fix tests for\nXMLPullParser\nwith Expat 2.6.0.\ngh-115059\n:\nio.BufferedRandom.read1()\nnow flushes the underlying\nwrite buffer.\ngh-79382\n: Trailing\n**\nno longer allows to match files and non-existing\npaths in recursive\nglob()\n.\ngh-67837\n: Avoid race conditions in the creation of directories during\nconcurrent extraction in\ntarfile\nand\nzipfile\n.\ngh-115060\n: Speed up\npathlib.Path.glob()\nby removing redundant regex\nmatching.\ngh-97928\n: Partially revert the behavior of\ntkinter.Text.count()\n. By\ndefault it preserves the behavior of older Python versions, except that\nsetting\nwantobjects\nto 0 no longer has effect. Add a new parameter\nreturn_ints\n: specifying\nreturn_ints=True\nmakes\nText.count()\nalways returning the single count as an integer instead of a 1-tuple or\nNone\n.\ngh-114628\n: When csv.Error is raised when handling TypeError, do not print\nthe TypeError traceback.\ngh-85984\n: Added\n_POSIX_VDISABLE\nfrom C’s\n<unistd.h>\nto\ntermios\n.\ngh-114965\n: Update bundled pip to 24.0\ngh-114959\n:\ntarfile\nno longer ignores errors when trying to extract\na directory on top of a file.\ngh-114894\n: Add\narray.array.clear()\n.\ngh-114071\n: Support tuple subclasses using auto() for enum member value.\ngh-109475\n: Fix support of explicit option value “–” in\nargparse\n(e.g.\n--option=--\n).\ngh-49766\n: Fix\ndate\n-\ndatetime\ncomparison. Now the special comparison methods like\n__eq__\nand\n__lt__\nreturn\nNotImplemented\nif one of comparands is\ndate\nand other is\ndatetime\ninstead of ignoring the\ntime part and the time zone or forcefully return “not equal” or raise\nTypeError\n. It makes comparison of\ndate\nand\ndatetime\nsubclasses more symmetric and allows to change the\ndefault behavior by overriding the special comparison methods in\nsubclasses.\ngh-110190\n: Fix ctypes structs with array on Windows ARM64 platform by\nsetting\nMAX_STRUCT_SIZE\nto 32 in stgdict. Patch by Diego Russo\ngh-114678\n: Ensure that deprecation warning for ‘N’ specifier in\nDecimal\nformat is not raised for cases where ‘N’ appears\nin other places in the format specifier. Based on patch by Stefan Krah.\ngh-70303\n: Return both files and directories from\npathlib.Path.glob()\nif a pattern ends with “\n**\n”. Previously only directories were\nreturned.\ngh-109653\n: Improve import time of\nimportlib.metadata\nand\nemail.utils\n.\ngh-113280\n: Fix a leak of open socket in rare cases when error occurred in\nssl.SSLSocket\ncreation.\ngh-77749\n:\nemail.policy.EmailPolicy.fold()\nnow always encodes\nnon-ASCII characters in headers if\nutf8\nis false.\ngh-83383\n: Synchronization of the\ndbm.dumb\ndatabase is now no-op if\nthere was no modification since opening or last synchronization. The\ndirectory file for a newly created empty\ndbm.dumb\ndatabase is now\ncreated immediately after opening instead of deferring this until\nsynchronizing or closing.\ngh-91602\n: Add\nfilter\nkeyword-only parameter to\nsqlite3.Connection.iterdump()\nfor filtering database objects to\ndump. Patch by Mariusz Felisiak.\ngh-112451\n: Prohibit subclassing pure-Python\ndatetime.timezone\n.\nThis is consistent with C-extension implementation. Patch by Mariusz\nFelisiak.\ngh-69893\n: Add the\nclose()\nmethod for the iterator returned by\nxml.etree.ElementTree.iterparse()\n.\ngh-109653\n: Reduce the import time of\nthreading\nmodule by ~50%.\nPatch by Daniel Hollas.\ngh-114492\n: Make the result of\ntermios.tcgetattr()\nreproducible on\nAlpine Linux. Previously it could leave a random garbage in some fields.\ngh-114315\n: Make\nthreading.Lock\na real class, not a factory\nfunction. Add\n__new__\nto\n_thread.lock\ntype.\ngh-100414\n: Add\ndbm.sqlite3\nas a backend to\ndbm\n, and make it\nthe new default\ndbm\nbackend. Patch by Raymond Hettinger and Erlend\nE. Aasland.\ngh-113267\n: Revert changes in\ngh-106584\nwhich made calls of\nTestResult\nmethods\nstartTest()\nand\nstopTest()\nunbalanced.\ngh-75128\n: Ignore an\nOSError\nin\nasyncio.BaseEventLoop.create_server()\nwhen IPv6 is available but the\ninterface cannot actually support it.\ngh-114423\n:\n_DummyThread\nentries in\nthreading._active\nare now\nautomatically removed when the related thread dies.\ngh-114257\n: Dismiss the\nFileNotFound\nerror in\nctypes.util.find_library()\nand just return\nNone\non Linux.\ngh-114321\n: Expose more platform specific constants in the\nfcntl\nmodule on Linux, macOS, FreeBSD and NetBSD.\ngh-114328\n: The\ntty.setcbreak()\nand new\ntty.cfmakecbreak()\nno\nlonger clears the terminal input ICRLF flag. This fixes a regression\nintroduced in 3.12 that no longer matched how OSes define cbreak mode in\ntheir\nstty(1)\nmanual pages.\ngh-114281\n: Remove type hints from\nLib/asyncio/staggered.py\n. The\nannotations in the\ntypeshed\nproject should be used instead.\ngh-101438\n: Avoid reference cycle in ElementTree.iterparse. The iterator\nreturned by\nElementTree.iterparse\nmay hold on to a file descriptor.\nThe reference cycle prevented prompt clean-up of the file descriptor if\nthe returned iterator was not exhausted.\ngh-114198\n: The signature for the\n__replace__\nmethod on\ndataclasses\nnow has the first argument named\nself\n, rather than\nobj\n.\ngh-104522\n:\nOSError\nraised when run a subprocess now only has\nfilename\nattribute set to\ncwd\nif the error was caused by a failed\nattempt to change the current directory.\ngh-114149\n: Enum: correctly handle tuple subclasses in custom\n__new__\n.\ngh-83648\n: Support deprecation of options, positional arguments and\nsubcommands in\nargparse\n.\ngh-114087\n: Speed up\ndataclasses.asdict\nup to 1.35x.\ngh-109534\n: Fix a reference leak in\nasyncio.selector_events.BaseSelectorEventLoop\nwhen SSL handshakes\nfail. Patch contributed by Jamie Phan.\ngh-79634\n: Accept\npath-like objects\nas patterns\nin\npathlib.Path.glob()\nand\nrglob()\n.\ngh-112202\n: Ensure that a\nasyncio.Condition.notify()\ncall does not\nget lost if the awakened\nTask\nis simultaneously cancelled or\nencounters any other error.\ngh-113951\n: Fix the behavior of\ntag_unbind()\nmethods of\ntkinter.Text\nand\ntkinter.Canvas\nclasses with three\narguments. Previously,\nwidget.tag_unbind(tag,\nsequence,\nfuncid)\ndestroyed the current binding for\nsequence\n, leaving\nsequence\nunbound,\nand deleted the\nfuncid\ncommand. Now it removes only\nfuncid\nfrom the\nbinding for\nsequence\n, keeping other commands, and deletes the\nfuncid\ncommand. It leaves\nsequence\nunbound only if\nfuncid\nwas the last bound\ncommand.\ngh-97959\n: Fix rendering class methods, bound methods, method and function\naliases in\npydoc\n. Class methods no longer have “method of\nbuiltins.type instance” note. Corresponding notes are now added for class\nand unbound methods. Method and function aliases now have references to\nthe module or the class where the origin was defined if it differs from\nthe current. Bound methods are now listed in the static methods section.\nMethods of builtin classes are now supported as well as methods of Python\nclasses.\ngh-113796\n: Add more validation checks in the\ncsv.Dialect\nconstructor.\nValueError\nis now raised if the same character is used\nin different roles.\ngh-113732\n: Fix support of\nQUOTE_NOTNULL\nand\nQUOTE_STRINGS\nin\ncsv.reader()\n.\ngh-113225\n: Speed up\npathlib.Path.walk()\nby using\nos.DirEntry.path\nwhere possible.\ngh-89039\n: When replace() method is called on a subclass of datetime, date\nor time, properly call derived constructor. Previously, only the base\nclass’s constructor was called.\nAlso, make sure to pass non-zero fold values when creating subclasses in\nvarious methods. Previously, fold was silently ignored.\ngh-112919\n: Speed-up\ndatetime.datetime.replace()\n,\ndatetime.date.replace()\nand\ndatetime.time.replace()\n.\ngh-59013\n: Set breakpoint on the first executable line of the function,\ninstead of the line of function definition when the user do\nbreak\nfunc\nusing\npdb\ngh-112343\n: Improve handling of pdb convenience variables to avoid\nreplacing string contents.\ngh-112240\n: Add option to calendar module CLI to specify the weekday to\nstart each week. Patch by Steven Ward.\ngh-111741\n: Recognise\nimage/webp\nas a standard format in the\nmimetypes\nmodule.\ngh-43457\n: Fix the\ntkinter\nwidget method\nwm_attributes()\n. It\nnow accepts the attribute name without the minus prefix to get window\nattributes and allows to specify attributes and values to set as keyword\narguments. Add new optional keyword argument\nreturn_python_dict\n: calling\nw.wm_attributes(return_python_dict=True)\nreturns the attributes as a\ndict instead of a tuple. Calling\nw.wm_attributes()\nnow returns a tuple\ninstead of string if\nwantobjects\nwas set to 0.\ngh-82626\n: Many functions now emit a warning if a boolean value is passed\nas a file descriptor argument.\ngh-111051\n: Added check for file modification during debugging with\npdb\ngh-110345\n: Show the Tcl/Tk patchlevel (rather than version) in\ntkinter._test()\n.\ngh-38807\n: Fix race condition in\ntrace\n. Instead of checking if a\ndirectory exists and creating it, directly call\nos.makedirs()\nwith\nthe kwarg\nexist_ok=True\n.\ngh-75705\n: Set unixfrom envelope in\nmailbox.mbox\nand\nmailbox.MMDF\n.\ngh-106233\n: Fix stacklevel in\nInvalidTZPathWarning\nduring\nzoneinfo\nmodule import.\ngh-105102\n: Allow\nctypes.Union\nto be nested in\nctypes.Structure\nwhen the system endianness is the opposite of\nthe classes.\ngh-104282\n: Fix null pointer dereference in\nlzma._decode_filter_properties()\ndue to improper handling of BCJ\nfilters with properties of zero length. Patch by Radislav Chugunov.\ngh-96471\n: Add\nqueue.Queue\ntermination with\nshutdown()\n.\ngh-101599\n: Changed argparse flag options formatting to remove redundancy.\ngh-85984\n: Add POSIX pseudo-terminal functions\nos.posix_openpt()\n,\nos.grantpt()\n,\nos.unlockpt()\n, and\nos.ptsname()\n.\ngh-102512\n: When\nos.fork()\nis called from a foreign thread (aka\n_DummyThread\n), the type of the thread in a child process is changed to\n_MainThread\n. Also changed its name and daemonic status, it can be now\njoined.\ngh-88569\n: Add\nos.path.isreserved()\n, which identifies reserved\npathnames such as “NUL”, “AUX” and “CON”. This function is only available\non Windows.\nDeprecate\npathlib.PurePath.is_reserved()\n.\nbpo-38364\n: The\ninspect\nfunctions\nisgeneratorfunction\n,\niscoroutinefunction\n,\nisasyncgenfunction\nnow support\nfunctools.partialmethod\nwrapped functions the same way they support\nfunctools.partial\n.\nDocumentation\n¶\ngh-115233\n: Fix an example for\nLoggerAdapter\nin the\nLogging Cookbook.\ngh-114123\n: Move the\ncsv\nmodule docstring to the\ncsv\nmodule\ninstead of reexporting it from the internal\n_csv\nmodule, and\nremove\n__doc__\nfrom\ncsv.__all__\n.\nMove\ncsv.__version__\nto the\ncsv\nmodule instead of\nreexporting it from the internal\n_csv\nmodule, and remove\n__version__\nfrom\ncsv.__all__\n.\nTests\n¶\ngh-114099\n: Added test exclusions required to run the test suite on iOS.\ngh-105089\n: Fix\ntest.test_zipfile.test_core.TestWithDirectory.test_create_directory_with_write\ntest in AIX by doing a bitwise AND of 0xFFFF on mode , so that it will be\nin sync with\nzinfo.external_attr\nBuild\n¶\ngh-115167\n: Avoid vendoring\nvcruntime140_threads.dll\nwhen building with\nVisual Studio 2022 version 17.8.\ngh-113632\n: Promote WASI to a tier 2 platform and drop Emscripten from tier\n3 in configure.ac.\ngh-114099\n: configure and Makefile were refactored to accommodate framework\nbuilds on Apple platforms other than macOS.\ngh-114875\n: Add\ngetgrent()\nas a prerequisite for building the\ngrp\nmodule.\nWindows\n¶\ngh-115049\n: Fixes\npy.exe\nlauncher failing when run as users without\nuser profiles.\ngh-115009\n: Update Windows installer to use SQLite 3.45.1.\ngh-109991\n: Update Windows build to use OpenSSL 3.0.13.\ngh-111239\n: Update Windows builds to use zlib v1.3.1.\ngh-100107\n: The\npy.exe\nlauncher will no longer attempt to run the\nMicrosoft Store redirector when launching a script containing a\n/usr/bin/env\nshebang\ngh-112984\n: Adds free-threaded binaries to Windows installer as an optional\ncomponent.\ngh-89240\n: Allows\nmultiprocessing\nto create pools of greater than 62\nprocesses.\nmacOS\n¶\ngh-115009\n: Update macOS installer to use SQLite 3.45.1.\ngh-109991\n: Update macOS installer to use OpenSSL 3.0.13.\ngh-114490\n: Add Mach-O linkage support for\nplatform.architecture()\n.\ngh-87804\n: On macOS the result of\nos.statvfs\nand\nos.fstatvfs\nnow\ncorrectly report the size of very large disks, in previous versions the\nreported number of blocks was wrong for disks with at least 2**32 blocks.\nIDLE\n¶\ngh-96905\n: In idlelib code, stop redefining built-ins ‘dict’ and ‘object’.\ngh-103820\n: Revise IDLE bindings so that events from mouse button 4/5 on\nnon-X11 windowing systems (i.e. Win32 and Aqua) are not mistaken for\nscrolling.\nTools/Demos\n¶\ngh-113516\n: Don’t set\nLDSHARED\nwhen building for WASI.\ngh-109991\n: Update GitHub CI workflows to use OpenSSL 3.0.13 and\nmultissltests to use 1.1.1w, 3.0.13, 3.1.5, and 3.2.1.\ngh-115015\n: Fix a bug in Argument Clinic that generated incorrect code for\nmethods with no parameters that use the\nMETH_METHOD | METH_FASTCALL\n| METH_KEYWORDS\ncalling\nconvention. Only the positional parameter count was checked; any keyword\nargument passed would be silently accepted.\nC API\n¶\ngh-111140\n: Adds\nPyLong_AsNativeBytes()\n,\nPyLong_FromNativeBytes()\nand\nPyLong_FromUnsignedNativeBytes()\nfunctions.\ngh-114685\n:\nPyBuffer_FillInfo()\nnow raises a\nSystemError\nif\ncalled with\nPyBUF_READ\nor\nPyBUF_WRITE\nas flags.\nThese flags should only be used with the\nPyMemoryView_*\nC API.\ngh-114685\n:\nPyObject_GetBuffer()\nnow raises a\nSystemError\nif\ncalled with\nPyBUF_READ\nor\nPyBUF_WRITE\nas flags.\nThese flags should only be used with the\nPyMemoryView_*\nC API.\ngh-114626\n: Add\nPyCFunctionFast\nand\nPyCFunctionFastWithKeywords\ntypedefs (identical to the existing\n_PyCFunctionFast\nand\n_PyCFunctionFastWithKeywords\ntypedefs, just without a leading\n_\nprefix).\ngh-114329\n: Add\nPyList_GetItemRef()\n, which is similar to\nPyList_GetItem()\nbut returns a\nstrong reference\ninstead of\na\nborrowed reference\n.\ngh-110850\n: Add PyTime C API:\nPyTime_t\ntype.\nPyTime_MIN\nand\nPyTime_MAX\nconstants.\nPyTime_AsSecondsDouble()\n,\nPyTime_Monotonic()\n,\nPyTime_PerfCounter()\n, and\nPyTime_Time()\nfunctions.\nPatch by Victor Stinner.\ngh-112066\n: Add\nPyDict_SetDefaultRef()\n: insert a key and value into\na dictionary if the key is not already present. This is similar to\ndict.setdefault()\n, but returns an integer value indicating if the\nkey was already present. It is also similar to\nPyDict_SetDefault()\n, but returns a strong reference instead of a\nborrowed reference.\nPython 3.13.0 alpha 3\n¶\nRelease date: 2024-01-17\nSecurity\n¶\ngh-113659\n: Skip\n.pth\nfiles with names starting with a dot or hidden\nfile attribute.\ngh-112302\n: Created a Software Bill-of-Materials document and tooling for\ntracking dependencies.\nCore and Builtins\n¶\ngh-107901\n: Compiler duplicates basic blocks that have an eval breaker\ncheck, no line number, and multiple predecessors.\ngh-107901\n: A jump leaving an exception handler back to normal code no\nlonger checks the eval breaker.\ngh-113655\n: Set the C recursion limit to 4000 on Windows, and 10000 on\nLinux/OSX. This seems to be near the sweet spot to maintain safety, but\nnot compromise backwards compatibility.\ngh-113710\n: Add typed stack effects to the interpreter DSL, along with\nvarious instruction annotations.\ngh-77046\n: On Windows, file descriptors wrapping Windows handles are now\ncreated non inheritable by default (\nPEP 446\n). Patch by Zackery Spytz\nand Victor Stinner.\ngh-113853\n: Guarantee that all executors make progress. This then\nguarantees that tier 2 execution always makes progress.\ngh-113753\n: Fix an issue where the finalizer of\nPyAsyncGenASend\nobjects\nmight not be called if they were allocated from a free list.\ngh-107901\n: Compiler changed so that synthetic jumps which are not at loop\nend no longer check the eval breaker.\ngh-113703\n: Fix a regression in the\ncodeop\nmodule that was causing\nit to incorrectly identify incomplete f-strings. Patch by Pablo Galindo\ngh-89811\n: Check for a valid\ntp_version_tag\nbefore performing bytecode\nspecializations that rely on this value being usable.\ngh-111488\n: Changed error message in case of no ‘in’ keyword after ‘for’ in\nlist comprehensions\ngh-113657\n: Fix an issue that caused important instruction pointer updates\nto be optimized out of tier two traces.\ngh-113603\n: Fixed bug where a redundant NOP is not removed, causing an\nassertion to fail in the compiler in debug mode.\ngh-113602\n: Fix an error that was causing the parser to try to overwrite\nexisting errors and crashing in the process. Patch by Pablo Galindo\ngh-113486\n: No longer issue spurious\nPY_UNWIND\nevents for optimized\ncalls to classes.\ngh-113297\n: Fix segfault in the compiler on with statement with 19 context\nmanagers.\ngh-113212\n: Improve\nsuper\nerror messages.\ngh-111375\n: Only use\nNULL\nin the exception stack to indicate an\nexception was handled. Patch by Carey Metcalfe.\ngh-112215\n: Increase the C recursion limit by a factor of 3 for non-debug\nbuilds, except for webassembly and s390 platforms which are unchanged.\nThis mitigates some regressions in 3.12 with deep recursion mixing builtin\n(C) and Python code.\ngh-113054\n: Fixed bug where a redundant NOP is not removed, causing an\nassertion to fail in the compiler in debug mode.\ngh-106905\n: Use per AST-parser state rather than global state to track\nrecursion depth within the AST parser to prevent potential race condition\ndue to simultaneous parsing.\nThe issue primarily showed up in 3.11 by multithreaded users of\nast.parse()\n.  In 3.12 a change to when garbage collection can be\ntriggered prevented the race condition from occurring.\ngh-108866\n: Change the API and contract of\n_PyExecutorObject\nto return\nthe next_instr pointer, instead of the frame, and to always execute at\nleast one instruction.\ngh-90350\n: Optimize builtin functions\nmin()\nand\nmax()\n.\ngh-112943\n: Correctly compute end column offsets for multiline tokens in\nthe\ntokenize\nmodule. Patch by Pablo Galindo\ngh-112125\n: Fix\nNone.__ne__(None)\nreturning\nNotImplemented\ninstead\nof\nFalse\n.\ngh-74616\n:\ninput()\nnow raises a ValueError when output on the\nterminal if the prompt contains embedded null characters instead of\nsilently truncating it.\ngh-112716\n: Fix SystemError in the\nimport\nstatement and in\n__reduce__()\nmethods of builtin types when\n__builtins__\nis not a\ndict.\ngh-112730\n: Use color to highlight error locations in tracebacks. Patch by\nPablo Galindo\ngh-112625\n: Fixes a bug where a bytearray object could be cleared while\niterating over an argument in the\nbytearray.join()\nmethod that could\nresult in reading memory after it was freed.\ngh-112660\n: Do not clear unexpected errors during formatting error messages\nfor ImportError and AttributeError for modules.\ngh-105967\n: Workaround a bug in Apple’s macOS platform zlib library where\nzlib.crc32()\nand\nbinascii.crc32()\ncould produce incorrect\nresults on multi-gigabyte inputs. Including when using\nzipfile\non\nzips containing large data.\ngh-95754\n: Provide a better error message when accessing invalid attributes\non partially initialized modules. The origin of the module being accessed\nis now included in the message to help with the common issue of shadowing\nother modules.\ngh-112217\n: Add check for the type of\n__cause__\nreturned from calling\nthe type\nT\nin\nraise\nfrom\nT\n.\ngh-111058\n: Change coro.cr_frame/gen.gi_frame to return\nNone\nafter the\ncoroutine/generator has been closed. This fixes a bug where\ngetcoroutinestate()\nand\ngetgeneratorstate()\nreturn the wrong state for a closed coroutine/generator.\ngh-112388\n: Fix an error that was causing the parser to try to overwrite\ntokenizer errors. Patch by pablo Galindo\ngh-112387\n: Fix error positions for decoded strings with backwards tokenize\nerrors. Patch by Pablo Galindo\ngh-99606\n: Make code generated for an empty f-string identical to the code\nof an empty normal string.\ngh-112367\n: Avoid undefined behaviour when using the perf trampolines by\nnot freeing the code arenas until shutdown. Patch by Pablo Galindo\ngh-112320\n: The Tier 2 translator now tracks the confidence level for\nstaying “on trace” (i.e. not exiting back to the Tier 1 interpreter) for\nbranch instructions based on the number of bits set in the branch\n“counter”. Trace translation ends when the confidence drops below 1/3rd.\ngh-109598\n:\nPyComplex_RealAsDouble()\n/\nPyComplex_ImagAsDouble()\nnow\ntries to convert an object to a\ncomplex\ninstance using its\n__complex__()\nmethod before falling back to the\n__float__()\nmethod. Patch by Sergey B Kirpichev.\ngh-94606\n: Fix UnicodeEncodeError when\nemail.message.get_payload()\nreads a message with a Unicode surrogate character and the message content\nis not well-formed for surrogateescape encoding. Patch by Sidney\nMarkowitz.\nbpo-21861\n: Use the object’s actual class name in\n_io.FileIO.__repr__()\n,\n_io._WindowsConsoleIO()\nand\n_io.TextIOWrapper.__repr__()\n, to make these methods subclass\nfriendly.\nbpo-45369\n: Remove LibreSSL workarounds as per\nPEP 644\n.\nbpo-34392\n: Added\nsys._is_interned()\n.\nLibrary\n¶\ngh-114077\n: Fix possible\nOverflowError\nin\nsocket.socket.sendfile()\nwhen pass\ncount\nlarger than 2 GiB on\n32-bit platform.\ngh-111803\n:\nplistlib\nnow supports loading more deeply nested lists\nin binary format.\ngh-114014\n: Fixed a bug in\nfractions.Fraction\nwhere an invalid\nstring using\nd\nin the decimals part creates a different error compared\nto other invalid letters/characters. Patch by Jeremiah Gabriel Pascual.\ngh-108364\n:\nsqlite3.Connection.iterdump()\nnow ensures that foreign\nkey support is disabled before dumping the database schema, if there is\nany foreign key violation. Patch by Erlend E. Aasland and Mariusz\nFelisiak.\ngh-113971\n: The\nzipfile.ZipInfo\npreviously protected\n._compresslevel\nattribute has been made public as\n.compress_level\nwith the old\n_compresslevel\nname remaining available as a property to\nretain compatibility.\ngh-113877\n: Fix\ntkinter\nmethod\nwinfo_pathname()\non 64-bit\nWindows.\ngh-113868\n: Added\nmmap.MAP_NORESERVE\n,\nmmap.MAP_NOEXTEND\n,\nmmap.MAP_HASSEMAPHORE\n,\nmmap.MAP_NOCACHE\n,\nmmap.MAP_JIT\n,\nmmap.MAP_RESILIENT_CODESIGN\n,\nmmap.MAP_RESILIENT_MEDIA\n,\nmmap.MAP_32BIT\n,\nmmap.MAP_TRANSLATED_ALLOW_EXECUTE\n,\nmmap.MAP_UNIX03\nand\nmmap.MAP_TPRO\n. All of them are\nmmap(2)\nflags on macOS.\ngh-113848\n:\nasyncio.TaskGroup()\nand\nasyncio.timeout()\ncontext\nmanagers now handle\nCancelledError\nsubclasses as well as\nexact\nCancelledError\n.\ngh-113661\n: unittest runner: Don’t exit 5 if tests were skipped. The\nintention of exiting 5 was to detect issues where the test suite wasn’t\ndiscovered at all. If we skipped tests, it was correctly discovered.\ngh-96037\n: Insert\nTimeoutError\nin the context of the exception that\nwas raised during exiting an expired\nasyncio.timeout()\nblock.\ngh-113781\n: Silence unraisable AttributeError when warnings are emitted\nduring Python finalization.\ngh-113238\n: Add\nAnchor\nto\nimportlib.resources\n(in order for the\ncode to comply with the documentation)\ngh-111693\n:\nasyncio.Condition.wait()\nnow re-raises the same\nCancelledError\ninstance that may have caused it to be interrupted.\nFixed race condition in\nasyncio.Semaphore.acquire()\nwhen interrupted\nwith a\nCancelledError\n.\ngh-113791\n: Add\nCLOCK_MONOTONIC_RAW_APPROX\nand\nCLOCK_UPTIME_RAW_APPROX\nto\ntime\non macOS. These are clocks\navailable on macOS 10.12 or later.\ngh-112932\n: Restore the ability for\nzipfile\nto\nextractall\nfrom\nzip files with a “/” directory entry in them as is commonly added to zips\nby some wiki or bug tracker data exporters.\ngh-113568\n: Raise deprecation warnings from\npathlib.PurePath\nand\nnot its private base class\nPurePathBase\n.\ngh-113594\n: Fix\nUnicodeEncodeError\nin\nemail\nwhen re-fold\nlines that contain unknown-8bit encoded part followed by non-unknown-8bit\nencoded part.\ngh-113538\n: In\nasyncio.StreamReaderProtocol.connection_made()\n, there\nis callback that logs an error if the task wrapping the “connected\ncallback” fails. This callback would itself fail if the task was\ncancelled. Prevent this by checking whether the task was cancelled first.\nIf so, close the transport but don’t log an error.\ngh-113626\n: Add support for the\nallow_code\nargument in the\nmarshal\nmodule. Passing\nallow_code=False\nprevents serialization and\nde-serialization of code objects which is incompatible between Python\nversions.\ngh-85567\n: Fix resource warnings for unclosed files in\npickle\nand\npickletools\ncommand line interfaces.\ngh-113537\n: Support loads\nstr\nin\nplistlib.loads()\n.\ngh-89850\n: Add default implementations of\npickle.Pickler.persistent_id()\nand\npickle.Unpickler.persistent_load()\nmethods in the C implementation.\nCalling\nsuper().persistent_id()\nand\nsuper().persistent_load()\nin\nsubclasses of the C implementation of\npickle.Pickler\nand\npickle.Unpickler\nclasses no longer causes infinite recursion.\ngh-113569\n: Indicate if there were no actual calls in unittest\nassert_has_calls()\nfailure.\ngh-101225\n: Increase the backlog for\nmultiprocessing.connection.Listener\nobjects created by\nmultiprocessing.manager\nand\nmultiprocessing.resource_sharer\nto significantly reduce the risk of getting a connection refused error\nwhen creating a\nmultiprocessing.connection.Connection\nto them.\ngh-113568\n: Raise audit events from\npathlib.Path\nand not its\nprivate base class\nPathBase\n.\ngh-113543\n: Make sure that\nwebbrowser.MacOSXOSAScript\nsends\nwebbrowser.open\naudit event.\ngh-113028\n: When a second reference to a string appears in the input to\npickle\n, and the Python implementation is in use, we are guaranteed\nthat a single copy gets pickled and a single object is shared when\nreloaded. Previously, in protocol 0, when a string contained certain\ncharacters (e.g. newline) it resulted in duplicate objects.\ngh-113421\n: Fix multiprocessing logger for\n%(filename)s\n.\ngh-111784\n: Fix segfaults in the\n_elementtree\nmodule. Fix first\nsegfault during deallocation of\n_elementtree.XMLParser\ninstances by\nkeeping strong reference to\npyexpat\nmodule in module state for capsule\nlifetime. Fix second segfault which happens in the same deallocation\nprocess  by keeping strong reference to\n_elementtree\nmodule in\nXMLParser\nstructure for\n_elementtree\nmodule lifetime.\ngh-113407\n: Fix import of\nunittest.mock\nwhen CPython is built\nwithout docstrings.\ngh-113320\n: Fix regression in Python 3.12 where\nProtocol\nclasses that were not marked as\nruntime-checkable\nwould be unnecessarily introspected,\npotentially causing exceptions to be raised if the protocol had\nproblematic members. Patch by Alex Waygood.\ngh-53502\n: Add a new option\naware_datetime\nin\nplistlib\nto loads\nor dumps aware datetime.\ngh-113358\n: Fix rendering tracebacks with exceptions with a broken\n__getattr__\ngh-113214\n: Fix an\nAttributeError\nduring asyncio SSL protocol aborts in\nSSL-over-SSL scenarios.\ngh-113246\n: Update bundled pip to 23.3.2.\ngh-87264\n: Fixed tarfile list() method to show file type.\ngh-112182\n:\nasyncio.futures.Future.set_exception()\nnow transforms\nStopIteration\ninto\nRuntimeError\ninstead of hanging or other\nmisbehavior. Patch contributed by Jamie Phan.\ngh-113225\n: Speed up\npathlib.Path.glob()\nby using\nos.DirEntry.path\nwhere possible.\ngh-113149\n: Improve error message when a JSON array or object contains a\ntrailing comma. Patch by Carson Radtke.\ngh-113117\n: The\nsubprocess\nmodule can now use the\nos.posix_spawn()\nfunction with\nclose_fds=True\non platforms where\nposix_spawn_file_actions_addclosefrom_np\nis available. Patch by Jakub\nKulik.\ngh-113199\n: Make\nhttp.client.HTTPResponse.read1\nand\nhttp.client.HTTPResponse.readline\nclose IO after reading all data when\ncontent length is known. Patch by Illia Volochii.\ngh-113191\n: Add support of\nos.fchmod()\nand a file descriptor in\nos.chmod()\non Windows.\ngh-113188\n: Fix\nshutil.copymode()\nand\nshutil.copystat()\non\nWindows. Previously they worked differently if\ndst\nis a symbolic link:\nthey modified the permission bits of\ndst\nitself rather than the file it\npoints to if\nfollow_symlinks\nis true or\nsrc\nis not a symbolic link,\nand did not modify the permission bits if\nfollow_symlinks\nis false and\nsrc\nis a symbolic link.\ngh-113119\n:\nos.posix_spawn()\nnow accepts\nenv=None\n, which makes\nthe newly spawned process use the current process environment. Patch by\nJakub Kulik.\ngh-113202\n: Add a\nstrict\noption to\nbatched()\nin the\nitertools\nmodule.\ngh-61648\n: Detect line numbers of properties in doctests.\ngh-113175\n: Sync with importlib_metadata 7.0, including improved type\nannotations, fixed issue with symlinked packages in\npackage_distributions\n, added\nEntryPoints.__repr__\n, introduced the\ndiagnose\nscript, added\nDistribution.origin\nproperty, and removed\ndeprecated\nEntryPoint\naccess by numeric index (tuple behavior).\ngh-59616\n: Add support of\nos.lchmod()\nand the\nfollow_symlinks\nargument in\nos.chmod()\non Windows. Note that the default value of\nfollow_symlinks\nin\nos.lchmod()\nis\nFalse\non Windows.\ngh-112559\n:\nsignal.signal()\nand\nsignal.getsignal()\nno longer\ncall\nrepr\non callable handlers.\nasyncio.run()\nand\nasyncio.Runner.run()\nno longer call\nrepr\non the task results.\nPatch by Yilei Yang.\ngh-112962\n:\ndis\nmodule functions add cache information to the\nInstruction\ninstance rather than creating fake\nInstruction\ninstances to represent the cache entries.\ngh-112989\n: Reduce overhead to connect sockets with\nasyncio\nSelectorEventLoop.\ngh-112970\n: Use\nclosefrom()\non Linux where available (e.g.\nglibc-2.34), rather than only FreeBSD.\ngh-110190\n: Fix ctypes structs with array on PPC64LE platform by setting\nMAX_STRUCT_SIZE\nto 64 in stgdict. Patch by Diego Russo.\ngh-112540\n: The statistics.geometric_mean() function now returns zero for\ndatasets containing a zero.  Formerly, it would raise an exception.\ngh-87286\n: Added\nLOG_FTP\n,\nLOG_NETINFO\n,\nLOG_REMOTEAUTH\n,\nLOG_INSTALL\n,\nLOG_RAS\n, and\nLOG_LAUNCHD\ntot the\nsyslog\nmodule, all of them constants\non used on macOS.\ngh-112800\n: Fix\nasyncio\nSubprocessTransport.close()\nnot to throw\nPermissionError\nwhen used with setuid executables.\ngh-51944\n: Add the following constants to the\ntermios\nmodule. These\nvalues are present in macOS system headers:\nALTWERASE\n,\nB14400\n,\nB28800\n,\nB7200\n,\nB76800\n,\nCCAR_OFLOW\n,\nCCTS_OFLOW\n,\nCDSR_OFLOW\n,\nCDTR_IFLOW\n,\nCIGNORE\n,\nCRTS_IFLOW\n,\nEXTPROC\n,\nIUTF8\n,\nMDMBUF\n,\nNL2\n,\nNL3\n,\nNOKERNINFO\n,\nONOEOT\n,\nOXTABS\n,\nVDSUSP\n,\nVSTATUS\n.\ngh-79325\n: Fix an infinite recursion error in\ntempfile.TemporaryDirectory()\ncleanup on Windows.\ngh-94692\n:\nshutil.rmtree()\nnow only catches OSError exceptions.\nPreviously a symlink attack resistant version of\nshutil.rmtree()\ncould\nignore or pass to the error handler arbitrary exception when invalid\narguments were provided.\ngh-112736\n: The use of del-safe symbols in\nsubprocess\nwas refactored to\nallow for use in cross-platform build environments.\ngh-112727\n: Speed up\npathlib.Path.absolute()\n. Patch by Barney Gale.\ngh-74690\n: Speedup\nissubclass()\nchecks against simple\nruntime-checkable\nprotocols\nby around\n6%. Patch by Alex Waygood.\ngh-74690\n: Speedup\nisinstance()\nchecks by roughly 20% for\nruntime-checkable\nprotocols\nthat only\nhave one callable member. Speedup\nissubclass()\nchecks for these\nprotocols by roughly 10%. Patch by Alex Waygood.\ngh-112645\n: Remove deprecation error on passing\nonerror\nto\nshutil.rmtree()\n.\ngh-112640\n: Add\nkwdefaults\nparameter to\ntypes.FunctionType\nto\nset default keyword argument values.\ngh-112622\n: Ensure\nname\nparameter is passed to event loop in\nasyncio.create_task()\n.\ngh-112618\n: Fix a caching bug relating to\ntyping.Annotated\n.\nAnnotated[str,\nTrue]\nis no longer identical to\nAnnotated[str,\n1]\n.\ngh-112334\n: Fixed a performance regression in 3.12’s\nsubprocess\non\nLinux where it would no longer use the fast-path\nvfork()\nsystem call\nwhen it could have due to a logic bug, instead falling back to the safe\nbut slower\nfork()\n.\nAlso fixed a second 3.12.0 potential security bug.  If a value of\nextra_groups=[]\nwas passed to\nsubprocess.Popen\nor related APIs,\nthe underlying\nsetgroups(0,\nNULL)\nsystem call to clear the groups list\nwould not be made in the child process prior to\nexec()\n.\nThis was identified via code inspection in the process of fixing the first\nbug.\ngh-110190\n: Fix ctypes structs with array on Arm platform by setting\nMAX_STRUCT_SIZE\nto 32 in stgdict. Patch by Diego Russo.\ngh-81194\n: Fix a crash in\nsocket.if_indextoname()\nwith specific value\n(UINT_MAX). Fix an integer overflow in\nsocket.if_indextoname()\non\n64-bit non-Windows platforms.\ngh-112578\n: Fix a spurious\nRuntimeWarning\nwhen executing the\nzipfile\nmodule.\ngh-112516\n: Update the bundled copy of pip to version 23.3.1.\ngh-112510\n: Add\nreadline.backend\nfor the backend readline uses\n(\neditline\nor\nreadline\n)\ngh-112328\n: [Enum] Make\nEnumDict\n,\nEnumDict.member_names\n,\nEnumType._add_alias_\nand\nEnumType._add_value_alias_\npublic.\ngh-112509\n: Fix edge cases that could cause a key to be present in both the\n__required_keys__\nand\n__optional_keys__\nattributes of a\ntyping.TypedDict\n. Patch by Jelle Zijlstra.\ngh-101336\n: Add\nkeep_alive\nkeyword parameter for\nAbstractEventLoop.create_server()\nand\nBaseEventLoop.create_server()\n.\ngh-63284\n: Added support for TLS-PSK (pre-shared key) mode to the\nssl\nmodule.\ngh-112414\n: Fix regression in Python 3.12 where calling\nrepr()\non a\nmodule that had been imported using a custom\nloader\ncould fail\nwith\nAttributeError\n. Patch by Alex Waygood.\ngh-112358\n: Revert change to\nstruct.Struct\ninitialization that\nbroke some cases of subclassing.\ngh-112405\n: Optimize\npathlib.PurePath.relative_to()\n. Patch by Alex\nWaygood.\ngh-94722\n: Fix bug where comparison between instances of\nDocTest\nfails if one of them has\nNone\nas its lineno.\ngh-112361\n: Speed up a small handful of\npathlib\nmethods by removing\nsome temporary objects.\ngh-112345\n: Improve error message when trying to call\nissubclass()\nagainst a\ntyping.Protocol\nthat has non-method members. Patch by\nRandolf Scholz.\ngh-112137\n: Change\ndis\noutput to display no-lineno as “–” instead\nof “None”.\ngh-112332\n: Deprecate the\nexc_type\nfield of\ntraceback.TracebackException\n. Add\nexc_type_str\nto replace it.\ngh-81620\n: Add extra tests for\nrandom.binomialvariate()\ngh-112292\n: Fix a crash in\nreadline\nwhen imported from a sub\ninterpreter. Patch by Anthony Shaw\ngh-77621\n: Slightly improve the import time of the\npathlib\nmodule by\ndeferring some imports. Patch by Barney Gale.\ngh-112137\n: Change\ndis\noutput to display logical labels for jump\ntargets instead of offsets.\ngh-112139\n: Add\nSignature.format()\nto format signatures to string\nwith extra options. And use it in\npydoc\nto render more readable\nsignatures that have new lines between parameters.\ngh-112105\n: Make\nreadline.set_completer_delims()\nwork with libedit\ngh-106922\n: Display multiple lines with\ntraceback\nwhen errors span\nmultiple lines.\ngh-111874\n: When creating a\ntyping.NamedTuple\nclass, ensure\n__set_name__()\nis called on all objects that define\n__set_name__\nand exist in the values of the\nNamedTuple\nclass’s\nclass dictionary. Patch by Alex Waygood.\ngh-68166\n: Add support of the “vsapi” element type in\ntkinter.ttk.Style.element_create()\n.\ngh-110275\n: Named tuple’s methods\n_replace()\nand\n__replace__()\nnow\nraise TypeError instead of ValueError for invalid keyword arguments.\ngh-99367\n: Do not mangle\nsys.path[0]\nin\npdb\nif safe_path is set\ngh-111615\n: Fix a regression caused by a fix to\ngh-93162\nwhereby you\ncouldn’t configure a\nQueueHandler\nwithout specifying handlers.\ngh-75666\n: Fix the behavior of\ntkinter\nwidget’s\nunbind()\nmethod\nwith two arguments. Previously,\nwidget.unbind(sequence,\nfuncid)\ndestroyed the current binding for\nsequence\n, leaving\nsequence\nunbound,\nand deleted the\nfuncid\ncommand. Now it removes only\nfuncid\nfrom the\nbinding for\nsequence\n, keeping other commands, and deletes the\nfuncid\ncommand. It leaves\nsequence\nunbound only if\nfuncid\nwas the last bound\ncommand.\ngh-67790\n: Implement basic formatting support (minimum width, alignment,\nfill) for\nfractions.Fraction\n.\ngh-111049\n: Fix crash during garbage collection of the\nio.BytesIO\nbuffer object.\ngh-102980\n: Redirect the output of\ninteract\ncommand of\npdb\nto\nthe same channel as the debugger. Add tests and improve docs.\ngh-102988\n:\nemail.utils.getaddresses()\nand\nemail.utils.parseaddr()\nnow return\n('',\n'')\n2-tuples in more\nsituations where invalid email addresses are encountered instead of\npotentially inaccurate values. Add optional\nstrict\nparameter to these\ntwo functions: use\nstrict=False\nto get the old behavior, accept\nmalformed inputs.\ngetattr(email.utils,\n'supports_strict_parsing',\nFalse)\ncan be use to check if the\nstrict\nparameter is available. Patch\nby Thomas Dwyer and Victor Stinner to improve the\nCVE 2023-27043\nfix.\ngh-52161\n:\ncmd.Cmd.do_help()\nnow cleans docstrings with\ninspect.cleandoc()\nbefore writing them. Patch by Filip Łapkiewicz.\ngh-82300\n: Add\ntrack\nparameter to\nmultiprocessing.shared_memory.SharedMemory\nthat allows using\nshared memory blocks without having to register with the POSIX resource\ntracker that automatically releases them upon process exit.\ngh-110109\n: Add private\npathlib._PurePathBase\nclass: a base class for\npathlib.PurePath\nthat omits certain magic methods. It may be made\npublic (along with\n_PathBase\n) in future.\ngh-109858\n: Protect\nzipfile\nfrom “quoted-overlap” zipbomb. It now\nraises BadZipFile when try to read an entry that overlaps with other entry\nor central directory.\ngh-109786\n: Fix possible reference leaks and crash when re-enter the\n__next__()\nmethod of\nitertools.pairwise\n.\ngh-91539\n: Small (10 - 20%) and trivial performance improvement of\nurllib.request.getproxies_environment()\n, typically useful when there\nare many environment variables to go over.\ngh-103363\n: Add\nfollow_symlinks\nkeyword-only argument to\npathlib.Path.owner()\nand\ngroup()\n, defaulting to\nTrue\n.\ngh-102130\n: Support tab completion in\ncmd\nfor\neditline\n.\ngh-99437\n:\nrunpy.run_path()\nnow decodes path-like objects, making\nsure __file__ and sys.argv[0] of the module being run are always strings.\ngh-104003\n: Add\nwarnings.deprecated()\n, a decorator to mark deprecated\nfunctions to static type checkers and to warn on usage of deprecated\nclasses and functions. See\nPEP 702\n. Patch by Jelle Zijlstra.\ngh-103708\n: Make hardcoded python name, a configurable parameter so that\ndifferent implementations of python can override it instead of making huge\ndiffs in sysconfig.py\ngh-66515\n:\nmailbox.MH\nnow supports folders that do not contain a\n.mh_sequences\nfile (e.g. Claws Mail IMAP-cache folders). Patch by\nSerhiy Storchaka.\ngh-83162\n: Renamed\nre.error\nto\nPatternError\nfor clarity, and\nkept\nre.error\nfor backward compatibility. Patch by Matthias\nBussonnier and Adam Chhina.\ngh-91133\n: Fix a bug in\ntempfile.TemporaryDirectory\ncleanup, which\nnow no longer dereferences symlinks when working around file system\npermission errors.\nbpo-43153\n: On Windows,\ntempfile.TemporaryDirectory\npreviously masked a\nPermissionError\nwith\nNotADirectoryError\nduring directory cleanup.\nIt now correctly raises\nPermissionError\nif errors are not ignored.\nPatch by Andrei Kulakov and Ken Jin.\nbpo-32731\n:\ngetpass.getuser()\nnow raises\nOSError\nfor all\nfailures rather than\nImportError\non systems lacking the\npwd\nmodule or\nKeyError\nif the password database is empty.\nbpo-34321\n:\nmmap.mmap\nnow has a\ntrackfd\nparameter on Unix; if it\nis\nFalse\n, the file descriptor specified by\nfileno\nwill not be\nduplicated.\nbpo-35332\n: The\nshutil.rmtree()\nfunction now ignores errors when\ncalling\nos.close()\nwhen\nignore_errors\nis\nTrue\n, and\nos.close()\nno longer retried after error.\nbpo-35928\n:\nio.TextIOWrapper\nnow correctly handles the decoding\nbuffer after\nread()\nand\nwrite()\n.\nbpo-26791\n:\nshutil.move()\nnow moves a symlink into a directory when\nthat directory is the target of the symlink.  This provides the same\nbehavior as the mv shell command.  The previous behavior raised an\nexception.  Patch by Jeffrey Kintscher.\nbpo-41422\n: Fixed memory leaks of\npickle.Pickler\nand\npickle.Unpickler\ninvolving cyclic references via the internal\nmemo mapping.\nbpo-19821\n: The\npydoc.ispackage()\nfunction has been deprecated.\nbpo-40262\n: The\nssl.SSLSocket.recv_into()\nmethod no longer requires\nthe\nbuffer\nargument to implement\n__len__\nand supports buffers with\narbitrary item size.\nbpo-39912\n:\nwarnings.filterwarnings()\nand\nwarnings.simplefilter()\nnow raise appropriate exceptions instead of\nAssertionError\n. Patch contributed by Rémi Lapeyre.\nbpo-37260\n: Fixed a race condition in\nshutil.rmtree()\nin which\ndirectory entries removed by another process or thread while\nshutil.rmtree()\nis running can cause it to raise FileNotFoundError.\nPatch by Jeffrey Kintscher.\nbpo-36959\n: Fix some error messages for invalid ISO format string\ncombinations in\nstrptime()\nthat referred to directives not contained\nin the format string. Patch by Gordon P. Hemsley.\nbpo-18060\n: Fixed a class inheritance issue that can cause segfaults when\nderiving two or more levels of subclasses from a base class of Structure\nor Union.\nbpo-29779\n: Add a new\nPYTHON_HISTORY\nenvironment variable to set\nthe location of a\n.python_history\nfile.\nbpo-21360\n:\nmailbox.Maildir\nnow ignores files with a leading dot.\nDocumentation\n¶\ngh-111699\n: Relocate\nsmtpd\ndeprecation notice to its own section rather\nthan under\nlocale\nin What’s New in Python 3.12 document\ngh-110746\n: Improved markup for valid options/values for methods\nttk.treeview.column and ttk.treeview.heading, and for Layouts.\ngh-95649\n: Document that the\nasyncio\nmodule contains code taken from\nv0.16.0 of the uvloop project\n, as well as the\nrequired MIT licensing information.\nTests\n¶\ngh-111798\n: Disable\ntest_super_deep()\nfrom\ntest_call\nunder pydebug\nbuilds on WASI; the stack depth is too small to make the test useful.\ngh-111801\n: Lower the recursion limit in\ntest_isinstance\nfor\ntest_infinitely_many_bases()\n. This prevents a stack overflow on a\npydebug build of WASI.\ngh-111802\n: Specify a low recursion depth for\ntest_bad_getattr()\nin\ntest.pickletester\nto avoid exhausting the stack under a pydebug build\nfor WASI.\ngh-44626\n: Fix\nos.path.isabs()\nincorrectly returning\nTrue\nwhen\ngiven a path that starts with exactly one (back)slash on Windows.\nFix\npathlib.PureWindowsPath.is_absolute()\nincorrectly returning\nFalse\nfor some paths beginning with two (back)slashes.\ngh-113633\n: Use module state for the _testcapi extension module.\ngh-109980\n: Fix\ntest_tarfile_vs_tar\nin\ntest_shutil\nfor macOS, where\nsystem tar can include more information in the archive than\nshutil.make_archive\n.\ngh-112769\n: The tests now correctly compare zlib version when\nzlib.ZLIB_RUNTIME_VERSION\ncontains non-integer suffixes. For\nexample zlib-ng defines the version as\n1.3.0.zlib-ng\n.\ngh-112334\n: Adds a regression test to verify that\nvfork()\nis used when\nexpected by\nsubprocess\non vfork enabled POSIX systems (Linux).\ngh-108927\n: Fixed order dependence in running tests in the same process\nwhen a test that has submodules (e.g. test_importlib) follows a test that\nimports its submodule (e.g. test_importlib.util) and precedes a test (e.g.\ntest_unittest or test_compileall) that uses that submodule.\nbpo-40648\n: Test modes that file can get with chmod() on Windows.\nBuild\n¶\ngh-114013\n: Fix\nTools/wasm/wasi.py\nto not include the path to\npython.wasm\nas part of\nHOSTRUNNER\n. The environment variable is\nmeant to specify how to run the WASI host only, having\npython.wasm\nand\nrelevant flags appended to the\nHOSTRUNNER\n. This fixes\nmake\ntest\nwork.\ngh-113258\n: Changed the Windows build to write out generated frozen modules\ninto the build tree instead of the source tree.\ngh-112305\n: Fixed the\ncheck-clean-src\nstep performed on out of tree\nbuilds to detect errant\n$(srcdir)/Python/frozen_modules/*.h\nfiles and\nrecommend appropriate source tree cleanup steps to get a working build\nagain.\ngh-112536\n: Add support for thread sanitizer (TSAN)\ngh-112867\n: Fix the build for the case that WITH_PYMALLOC_RADIX_TREE=0 set.\ngh-103065\n: Introduce\nTools/wasm/wasi.py\nto simplify doing a WASI\nbuild.\nbpo-11102\n: The\nos.major()\n,\nos.makedev()\n, and\nos.minor()\nfunctions are now available on HP-UX v3.\nbpo-36351\n: Do not set ipv6type when cross-compiling.\nWindows\n¶\ngh-114096\n: Process privileges that are activated for creating directory\njunctions are now restored afterwards, avoiding behaviour changes in other\nparts of the program.\ngh-111877\n:\nos.stat()\ncalls were returning incorrect time values for\nfiles that could not be accessed directly.\ngh-111973\n: Update Windows installer to use SQLite 3.44.2.\ngh-113009\n:\nmultiprocessing\n: On Windows, fix a race condition in\nProcess.terminate()\n: no longer set the\nreturncode\nattribute to\nalways call\nWaitForSingleObject()\nin\nProcess.wait()\n.  Previously,\nsometimes the process was still running after\nTerminateProcess()\neven\nif\nGetExitCodeProcess()\nis not\nSTILL_ACTIVE\n. Patch by Victor\nStinner.\ngh-86179\n: Fixes path calculations when launching Python on Windows through\na symlink.\ngh-71383\n: Update Tcl/Tk in Windows installer to 8.6.13 with a patch to\nsuppress incorrect ThemeChanged warnings.\ngh-111650\n: Ensures the\nPy_GIL_DISABLED\npreprocessor variable is\ndefined in\npyconfig.h\nso that extension modules written in C are\nable to use it.\ngh-112278\n: Reduce the time cost for some functions in\nplatform\non\nWindows if current user has no permission to the WMI.\ngh-73427\n: Deprecate\nsys._enablelegacywindowsfsencoding()\n. Use\nPYTHONLEGACYWINDOWSFSENCODING\ninstead. Patch by Inada Naoki.\ngh-87868\n: Correctly sort and remove duplicate environment variables in\n_winapi.CreateProcess()\n.\nbpo-37308\n: Fix mojibake in\nmmap.mmap\nwhen using a non-ASCII\ntagname\nargument on Windows.\nmacOS\n¶\ngh-113666\n: Add the following constants to module\nstat\n:\nUF_SETTABLE\n,\nUF_TRACKED\n,\nUF_DATAVAULT\n,\nSF_SUPPORTED\n,\nSF_SETTABLE\n,\nSF_SYNTHETIC\n,\nSF_RESTRICTED\n,\nSF_FIRMLINK\nand\nSF_DATALESS\n. The values\nUF_SETTABLE\n,\nSF_SUPPORTED\n,\nSF_SETTABLE\nand\nSF_SYNTHETIC\nare only available on macOS.\ngh-113536\n:\nos.waitid()\nis now available on macOS\ngh-110459\n: Running\nconfigure\n...\n--with-openssl-rpath=X/Y/Z\nno longer\nfails to detect OpenSSL on macOS.\ngh-74573\n: Document that\ndbm.ndbm\ncan silently corrupt DBM files on\nupdates when exceeding undocumented platform limits, and can crash\n(segmentation fault) when reading such a corrupted file. (FB8919203)\ngh-65701\n: The\nfreeze\ntool doesn’t work with framework builds of\nPython. Document this and bail out early when running the tool with such a\nbuild.\ngh-87277\n: webbrowser: Don’t look for X11 browsers on macOS. Those are\ngenerally not used and probing for them can result in starting XQuartz\neven if it isn’t used otherwise.\ngh-111973\n: Update macOS installer to use SQLite 3.44.2.\ngh-108269\n: Set\nCFBundleAllowMixedLocalizations\nto true in the\nInfo.plist for the framework, embedded Python.app and IDLE.app with\nframework installs on macOS.  This allows applications to pick up the\nuser’s preferred locale when that’s different from english.\ngh-102362\n: Make sure the result of\nsysconfig.get_plaform()\nincludes\nat least a major and minor versions, even if\nMACOSX_DEPLOYMENT_TARGET\nis set to only a major version during build to match the format expected\nby pip.\ngh-110017\n: Disable a signal handling stress test on macOS due to a bug in\nmacOS (FB13453490).\ngh-110820\n: Make sure the preprocessor definitions for\nALIGNOF_MAX_ALIGN_T\n,\nSIZEOF_LONG_DOUBLE\nand\nHAVE_GCC_ASM_FOR_X64\nare correct for Universal 2 builds on macOS.\ngh-109981\n: Use\n/dev/fd\non macOS to determine the number of open files\nin\ntest.support.os_helper.fd_count\nto avoid a crash with “guarded”\nfile descriptors when probing for open files.\nIDLE\n¶\ngh-72284\n: Improve the lists of features, editor key bindings, and shell\nkey bingings in the IDLE doc.\ngh-113903\n: Fix rare failure of test.test_idle, in test_configdialog.\ngh-113729\n: Fix the “Help -> IDLE Doc” menu bug in 3.11.7 and 3.12.1.\ngh-113269\n: Fix test_editor hang on macOS Catalina.\ngh-112898\n: Fix processing unsaved files when quitting IDLE on macOS.\nbpo-13586\n: Enter the selected text when opening the “Replace” dialog.\nC API\n¶\ngh-106560\n: Fix redundant declarations in the public C API. Declare\nPyBool_Type, PyLong_Type and PySys_Audit() only once. Patch by Victor\nStinner.\ngh-112438\n: Fix support of format units “es”, “et”, “es#”, and “et#” in\nnested tuples in\nPyArg_ParseTuple()\n-like functions.\ngh-111545\n: Add\nPy_HashPointer()\nfunction to hash a pointer. Patch\nby Victor Stinner.\ngh-65210\n: Change the declaration of the\nkeywords\nparameter of\nPyArg_ParseTupleAndKeywords()\nand\nPyArg_VaParseTupleAndKeywords()\nfor better compatibility with C++.\nPython 3.13.0 alpha 2\n¶\nRelease date: 2023-11-22\nCore and Builtins\n¶\ngh-112243\n: Don’t include comments in f-string debug expressions. Patch by\nPablo Galindo\ngh-112287\n: Slightly optimize the Tier 2 (uop) interpreter by only loading\noparg\nand\noperand\nwhen needed. Also double the trace size limit\nagain, to 512 this time.\ngh-112266\n: Change docstrings of\n__dict__\nand\n__weakref__\n.\ngh-111807\n: Lower the max parser stack depth to 1000 under WASI debug\nbuilds.\ngh-111798\n: When Python is built in debug mode, set the C recursion limit\nto 500 instead of 1500. A debug build is likely built with low\noptimization level which implies higher stack memory usage than a release\nbuild. Patch by Victor Stinner.\ngh-106529\n: Enable translating unspecialized\nFOR_ITER\nto Tier 2.\ngh-111916\n: Make hashlib related modules thread-safe without the GIL\ngh-81137\n: Deprecate assignment to a function’s\n__code__\nfield when the\nnew code object is of a mismatched type (e.g., from a generator to a plain\nfunction).\ngh-79932\n: Raise exception if\nframe.clear()\nis called on a suspended\nframe.\ngh-81925\n: Implement native thread ids for GNU KFreeBSD.\ngh-111843\n: Use exponential backoff to reduce the number of failed tier 2\noptimization attempts by over 99%.\ngh-110829\n: Joining a thread now ensures the underlying OS thread has\nexited. This is required for safer fork() in multi-threaded processes.\ngh-109369\n: Make sure that tier 2 traces are de-optimized if the code is\ninstrumented\ngh-111772\n: Specialize slot loads and stores for _Py_T_OBJECT as well as\nPy_T_OBJECT_EX\ngh-111666\n: Speed up\nBaseExceptionGroup.derive()\n,\nBaseExceptionGroup.subgroup()\n, and\nBaseExceptionGroup.split()\nby changing how they parse passed arguments.\ngh-111654\n: Fix runtime crash when some error happens in opcode\nLOAD_FROM_DICT_OR_DEREF\n.\ngh-111623\n: Add support for sharing tuples between interpreters using the\ncross-interpreter API.  Patch by Anthony Shaw.\ngh-111354\n: The oparg of\nYIELD_VALUE\nis now\n1\nif the\ninstruction is part of a yield-from or await, and\n0\notherwise.\nThe SUSPENDED frame state is now split into\nSUSPENDED\nand\nSUSPENDED_YIELD_FROM\n. This simplifies the code in\n_PyGen_yf\n.\ngh-111520\n: Merge the Tier 1 (bytecode) and Tier 2 (micro-ops) interpreters\ntogether, moving the Tier 2 interpreter loop and switch into\n_PyEval_EvalFrameDefault()\nin\nPython/ceval.c\n. The\nPython/executor.c\nfile is gone. Also the\nTIER_ONE\nand\nTIER_TWO\nmacros are now handled by the code generator.\nBeware!\nThis changes the environment variables to enable micro-ops and\ntheir debugging to\nPYTHON_UOPS\nand\nPYTHON_LLTRACE\n.\ngh-109181\n: Speed up\nTraceback\nobject creation by lazily compute\nthe line number. Patch by Pablo Galindo\ngh-111420\n: Allow type comments in parenthesized\nwith\nstatements\ngh-111438\n: Add support for sharing floats between interpreters using the\ncross-interpreter API.  Patch by Anthony Shaw.\ngh-111435\n: Add support for sharing of\nTrue\nand\nFalse\nbetween\ninterpreters using the cross-interpreter API.  Patch by Anthony Shaw.\ngh-102388\n: Fix a bug where\niso2022_jp_3\nand\niso2022_jp_2004\ncodecs\nread out of bounds\ngh-111366\n: Fix an issue in the\ncodeop\nthat was causing\nSyntaxError\nexceptions raised in the presence of invalid syntax to\nnot contain precise error messages. Patch by Pablo Galindo\ngh-111380\n: Fix a bug that was causing\nSyntaxWarning\nto appear twice\nwhen parsing if invalid syntax is encountered later. Patch by Pablo\ngalindo\ngh-111374\n: Added a new environment variable\nPYTHON_FROZEN_MODULES\n. It determines whether or not frozen\nmodules are ignored by the import machinery, equivalent of the\n-X\nfrozen_modules\ncommand-line option.\ngh-111354\n: Remove\noparg\nfrom\nYIELD_VALUE\n. Change\noparg\nof\nRESUME\nto include information about the except-depth. These\nchanges make it possible to simplify the code in generator close.\ngh-94438\n: Fix a regression that prevented jumping across\nis\nNone\nand\nis\nnot\nNone\nwhen debugging. Patch by Savannah Ostrowski.\ngh-67224\n: Show source lines in tracebacks when using the\n-c\noption\nwhen running Python. Patch by Pablo Galindo\ngh-111123\n: Fix a bug where a\nglobal\ndeclaration in an\nexcept\nblock is rejected when the global is used in the\nelse\nblock.\ngh-110938\n: Fix error messages for indented blocks with functions and\nclasses with generic type parameters. Patch by Pablo Galindo\ngh-109214\n: Remove unnecessary instruction pointer updates before returning\nfrom frames.\ngh-110912\n: Correctly display the traceback for\nMemoryError\nexceptions using the\ntraceback\nmodule. Patch by Pablo Galindo\ngh-109894\n: Fixed crash due to improperly initialized static\nMemoryError\nin subinterpreter.\ngh-110892\n: Return\nNULL\nfor\nPyTrace_RETURN\nevents caused by an\nexception\ngh-110864\n: Fix argument parsing by\n_PyArg_UnpackKeywordsWithVararg\nfor\nfunctions defining pos-or-keyword, vararg, and kw-only parameters.\ngh-109094\n: Replace\nprev_instr\non the interpreter frame by\ninstr_ptr\nwhich points to the beginning of the instruction that is\ncurrently executing (or will execute once the frame resumes).\ngh-110805\n: Allow the repl to show source code and complete tracebacks.\nPatch by Pablo Galindo\ngh-110722\n: Add\nPYTHON_PRESITE=package.module\nto import a module\nearly in the interpreter lifecycle before\nsite.py\nis executed.  Python\nneeds to be\nbuilt in debug mode\nfor this option to\nexist.\ngh-110481\n: Implement biased reference counting in\n--disable-gil\nbuilds.\ngh-110543\n: Fix regression in Python 3.12 where\ntypes.CodeType.replace()\nwould produce a broken code object if\ncalled on a module or class code object that contains a comprehension.\nPatch by Jelle Zijlstra.\ngh-89519\n: Removed chained\nclassmethod\ndescriptors (introduced in\nbpo-19072\n).  This can no longer be used to wrap other descriptors\nsuch as\nproperty\n.  The core design of this feature was flawed and\ncaused a number of downstream problems.  To “pass-through” a\nclassmethod\n, consider using the\n__wrapped__\nattribute\nthat was added in Python 3.10.\ngh-103615\n: Use local events for opcode tracing\nbpo-46657\n: Add mimalloc memory allocator support.\ngh-106718\n: When PyConfig.stdlib_dir is explicitly set, it’s now respected\nand won’t be overridden by PyConfig.home.\ngh-106905\n: Fix incorrect SystemError about AST constructor recursion depth\nmismatch.\ngh-100445\n: Improve error message for unterminated strings with escapes.\nbpo-45759\n: Improved error messages for\nelif\n/\nelse\nstatements not\nmatching any valid statements. Patch by Jeremiah Vivian.\nLibrary\n¶\ngh-111942\n: Fix SystemError in the TextIOWrapper constructor with\nnon-encodable “errors” argument in non-debug mode.\ngh-111995\n: Added the\nNI_IDN\nconstant to the\nsocket\nmodule when\npresent in C at build time for use with\nsocket.getnameinfo()\n.\ngh-109538\n: Issue warning message instead of having\nRuntimeError\nbe displayed when event loop has already been closed at\nStreamWriter.__del__()\n.\ngh-111942\n: Fix crashes in\nio.TextIOWrapper.reconfigure()\nwhen pass\ninvalid arguments, e.g. non-string encoding.\ngh-111460\n:\ncurses\n: restore wide character support (including\ncurses.unget_wch()\nand\nget_wch()\n) on macOS,\nwhich was unavailable due to a regression in Python 3.12.\ngh-103791\n:\ncontextlib.suppress\nnow supports suppressing\nexceptions raised as part of a\nBaseExceptionGroup\n, in addition to\nthe recent support for\nExceptionGroup\n.\ngh-111835\n: The\nmmap.mmap\nclass now has an\nseekable()\nmethod that can be used when a seekable\nfile-like object is required. The\nseek()\nmethod now\nreturns the new absolute position. Patch by Donghee Na.\ngh-111804\n: Remove posix.fallocate() under WASI as the underlying\nposix_fallocate() is not available in WASI preview2.\ngh-111841\n: Fix truncating arguments on an embedded null character in\nos.putenv()\nand\nos.unsetenv()\non Windows.\ngh-111768\n:\nwsgiref.util.is_hop_by_hop()\nis now exposed correctly in\n__all__\n.\ngh-80731\n: Avoid executing the default function in\ncmd.Cmd\nin an\nexcept block\ngh-111541\n: Fix\ndoctest\nfor\nSyntaxError\nnot-builtin\nsubclasses.\ngh-111719\n: Add extra argument validation for\nalias\ncommand in\npdb\ngh-111482\n:\ntime\n: Make\ntime.clock_gettime()\nand\ntime.clock_gettime_ns()\nfunctions up to 2x faster by faster calling\nconvention. Patch by Victor Stinner.\ngh-110894\n: Call loop exception handler for exceptions in\nclient_connected_cb\nof\nasyncio.start_server()\nso that\napplications can handle it. Patch by Kumar Aditya.\ngh-111531\n: Fix reference leaks in\nbind_class()\nand\nbind_all()\nmethods of\ntkinter\nwidgets.\ngh-111246\n:\nasyncio.loop.create_unix_server()\nwill now automatically\nremove the Unix socket when the server is closed.\ngh-111356\n: Added\nio.text_encoding()\n,\nio.DEFAULT_BUFFER_SIZE\n,\nand\nio.IncrementalNewlineDecoder\nto\nio.__all__\n.\ngh-66425\n: Remove the code to set the REMOTE_HOST header from wsgiref\nmodule, as it is unreachable. This header is used for performance reasons,\nwhich is not necessary in the wsgiref module.\ngh-111429\n: Speed up\npathlib.PurePath.relative_to()\nand\nis_relative_to()\n.\ngh-111342\n: Fixed typo in\nmath.sumprod()\n.\ngh-68166\n: Remove mention of not supported “vsapi” element type in\ntkinter.ttk.Style.element_create()\n. Add tests for\nelement_create()\nand other\nttk.Style\nmethods. Add examples for\nelement_create()\nin the documentation.\ngh-111388\n: Add\nshow_group\nparameter to\ntraceback.format_exception_only()\n, which allows to format\nExceptionGroup\ninstances.\ngh-79033\n: Another attempt at fixing\nasyncio.Server.wait_closed()\n. It\nnow blocks until both conditions are true: the server is closed,\nand\nthere are no more active connections. (This means that in some cases where\nin 3.12.0 this function would\nincorrectly\nhave returned immediately, it\nwill now block; in particular, when there are no active connections but\nthe server hasn’t been closed yet.)\ngh-111259\n: Optimize recursive wildcards in\npathlib\n.\ngh-111295\n: Fix\ntime\nnot checking for errors when initializing.\ngh-111253\n: Add error checking during\n_socket\nmodule init.\ngh-111251\n: Fix\n_blake2\nnot checking for errors when initializing.\ngh-111233\n: Fix\nselect\nnot checking for errors when initializing.\ngh-111230\n: Fix\nssl\nnot checking for errors when initializing.\ngh-111174\n: Fix crash in\nio.BytesIO.getbuffer()\ncalled repeatedly for\nempty BytesIO.\ngh-111187\n: Postpone removal version for locale.getdefaultlocale() to\nPython 3.15.\ngh-111159\n: Fix\ndoctest\noutput comparison for exceptions with notes.\ngh-110910\n: Fix invalid state handling in\nasyncio.TaskGroup\nand\nasyncio.Timeout\n. They now raise proper RuntimeError if they are\nimproperly used and are left in consistent state after this.\ngh-111092\n: Make turtledemo run without default root enabled.\ngh-110944\n: Support alias and convenience vars for\npdb\ncompletion\ngh-110745\n: Added\nnewline\nparameter to\npathlib.Path.read_text()\n.\nPatch by Junya Okabe.\ngh-84583\n: Make\npdb\nenter post-mortem mode even for\nSyntaxError\ngh-80675\n: Set\nf_trace_lines\n=\nTrue\non all frames upon\npdb.set_trace()\ngh-110771\n: Expose the setup and cleanup portions of\nasyncio.run_forever()\nas the standalone methods\nasyncio.run_forever_setup()\nand\nasyncio.run_forever_cleanup()\n.\nThis allows for tighter integration with GUI event loops.\ngh-110774\n: Support setting the\nasyncio.Runner\nloop_factory kwarg\nin\nunittest.IsolatedAsyncioTestCase\ngh-110392\n: Fix\ntty.setraw()\nand\ntty.setcbreak()\n: previously\nthey returned partially modified list of the original tty attributes.\ntty.cfmakeraw()\nand\ntty.cfmakecbreak()\nnow make a copy of the\nlist of special characters before modifying it.\ngh-59013\n: Make line number of function breakpoint more precise in\npdb\ngh-88434\n: Emit deprecation warning for non-integer numbers in\ngettext\nfunctions and methods that consider plural forms even if\nthe translation was not found.\ngh-110395\n: Ensure that\nselect.kqueue()\nobjects correctly appear as\nclosed in forked children, to prevent operations on an invalid file\ndescriptor.\ngh-110196\n: Add\n__reduce__\nmethod to\nIPv6Address\nin order to\nkeep\nscope_id\ngh-109747\n: Improve errors for unsupported look-behind patterns. Now\nre.error is raised instead of OverflowError or RuntimeError for too large\nwidth of look-behind pattern.\ngh-109466\n: Add the\nipaddress.IPv4Address.ipv6_mapped\nproperty,\nwhich returns the IPv4-mapped IPv6 address.\ngh-85098\n: Implement the CLI of the\nsymtable\nmodule and improve the\nrepr of\nSymbol\n.\ngh-108791\n: Improved error handling in\npdb\ncommand line interface,\nmaking it produce more concise error messages.\ngh-105931\n: Change\ncompileall\nto only strip the stripdir prefix from\nthe full path recorded in the compiled\n.pyc\nfile, when the prefix\nmatches the start of the full path in its entirety. When the prefix does\nnot match, no stripping is performed and a warning to this effect is\ndisplayed.\nPreviously all path components of the stripdir prefix that matched the\nfull path were removed, while those that did not match were left alone\n(including ones interspersed between matching components).\ngh-107431\n: Make the\nDictProxy\nand\nListProxy\ntypes in\nmultiprocessing.managers\nGeneric Alias\nTypes\nfor\n[]\nuse in typing contexts.\ngh-72904\n: Add\nglob.translate()\n. This function converts a pathname\nwith shell-style wildcards to a regular expression.\ngh-90026\n: Define\nUSE_XATTRS\non Cygwin so that XATTR-related functions\nin the\nos\nmodule become available.\ngh-90890\n: New methods\nmailbox.Maildir.get_info()\n,\nmailbox.Maildir.set_info()\n,\nmailbox.Maildir.get_flags()\n,\nmailbox.Maildir.set_flags()\n,\nmailbox.Maildir.add_flag()\n,\nmailbox.Maildir.remove_flag()\n. These methods speed up accessing a\nmessage’s info and/or flags and are useful when it is not necessary to\naccess the message’s contents, as when iterating over a Maildir to find\nmessages with specific flags.\ngh-102956\n: Fix returning of empty byte strings after seek in zipfile\nmodule\ngh-102895\n: Added a parameter\nlocal_exit\nfor\ncode.interact()\nto\nprevent\nexit()\nand\nquit\nfrom closing\nsys.stdin\nand raise\nSystemExit\n.\ngh-97928\n: Change the behavior of\ntkinter.Text.count()\n. It now always\nreturns an integer if one or less counting options are specified.\nPreviously it could return a single count as a 1-tuple, an integer (only\nif option\n\"update\"\nwas specified) or\nNone\nif no items found. The\nresult is now the same if\nwantobjects\nis set to\n0\n.\ngh-96954\n: Switch the storage of the unicode codepoint names to use a\ndifferent data-structure, a\ndirected acyclic word graph\n.\nThis makes the unicodedata shared library about 440 KiB smaller.\nContributed by Carl Friedrich Bolz-Tereick using code from the PyPy\nproject.\ngh-73561\n: Omit the interface scope from an IPv6 address when used as Host\nheader by\nhttp.client\n.\ngh-86826\n:\nzipinfo\nnow supports the full range of values in the TZ\nstring determined by RFC 8536 and detects all invalid formats. Both Python\nand C implementations now raise exceptions of the same type on invalid\ndata.\nTests\n¶\ngh-111808\n: Make the default value of\ntest.support.infinite_recursion()\nto be conditional based on whether optimizations were used when compiling\nthe interpreter. This helps with platforms like WASI whose stack size is\ngreatly restricted in debug builds.\ngh-110722\n: Gathering line coverage of standard libraries within the\nregression test suite is now precise, as well as much faster. Patch by\nŁukasz Langa.\ngh-110367\n: Make regrtest\n--verbose3\noption compatible with\n--huntrleaks\n-jN\noptions. The\n./python\n-m\ntest\n-j1\n-R\n3:3\n--verbose3\ncommand now works as expected. Patch by Victor Stinner.\ngh-111165\n: Remove no longer used functions\nrun_unittest()\nand\nrun_doctest()\nfrom the\ntest.support\nmodule.\ngh-110932\n: Fix regrtest if the\nSOURCE_DATE_EPOCH\nenvironment variable\nis defined: use the variable value as the random seed. Patch by Victor\nStinner.\ngh-110995\n: test_gdb: Fix detection of gdb built without Python scripting\nsupport. Patch by Victor Stinner.\ngh-110918\n: Test case matching patterns specified by options\n--match\n,\n--ignore\n,\n--matchfile\nand\n--ignorefile\nare now tested in the\norder of specification, and the last match determines whether the test\ncase be run or ignored.\ngh-108747\n: Add unit test for\nusercustomize\nand\nsitecustomize\nhooks\nfrom\nsite\n.\nBuild\n¶\ngh-96954\n: Make\nmake\nregen-unicodedata\nwork for out-of-tree builds of\nCPython.\ngh-112088\n: Add\nTools/build/regen-configure.sh\nscript to regenerate the\nconfigure\nwith an Ubuntu container image. The\nquay.io/tiran/cpython_autoconf:271\ncontainer image\n(\ntiran/cpython_autoconf\n) is\nno longer used. Patch by Victor Stinner.\ngh-111046\n: For wasi-threads, memory is now exported to fix compatibility\nissues with some wasm runtimes.\ngh-110828\n: AIX 32bit needs\n-latomic\nto build the\n_testcapi\nextension module.\ngh-85283\n: The\nerrno\n,\nmd5\n,\nresource\n,\nwinsound\n,\n_ctypes_test\n,\n_multiprocessing.posixshmem\n,\n_scproxy\n,\n_stat\n,\n_testimportmultiple\nand\n_uuid\nC extensions are now\nbuilt with the\nlimited C API\n. Patch by Victor\nStinner.\nWindows\n¶\ngh-111856\n: Fixes\nfstat()\non file systems that do not support\nfile ID requests. This includes FAT32 and exFAT.\ngh-111293\n: Fix\nos.DirEntry.inode\ndropping higher 64 bits of a file\nid on some filesystems on Windows.\ngh-110913\n: WindowsConsoleIO now correctly chunks large buffers without\nsplitting up UTF-8 sequences.\nmacOS\n¶\ngh-59703\n: For macOS framework builds, in\ngetpath.c\nuse the system\ndladdr\nfunction to find the path to the shared library rather than\ndepending on deprecated macOS APIs.\ngh-110950\n: Update macOS installer to include an upstream Tcl/Tk fix for\nthe\nSecure\ncoding\nis\nnot\nenabled\nfor\nrestorable\nstate!\nwarning\nencountered in Tkinter on macOS 14 Sonoma.\ngh-111015\n: Ensure that IDLE.app and Python Launcher.app are installed with\nappropriate permissions on macOS builds.\ngh-71383\n: Update macOS installer to include an upstream Tcl/Tk fix for the\nttk::ThemeChanged\nerror encountered in Tkinter.\ngh-92603\n: Update macOS installer to include a fix accepted by upstream\nTcl/Tk for a crash encountered after the first\ntkinter.Tk()\ninstance\nis destroyed.\nIDLE\n¶\nbpo-35668\n: Add docstrings to the IDLE debugger module. Fix two bugs:\ninitialize\nIdb.botframe\n(should be in Bdb); in\nIdb.in_rpc_code\n,\ncheck whether\nprev_frame\nis\nNone\nbefore trying to use it. Greatly\nexpand test_debugger.\nTools/Demos\n¶\ngh-111903\n: Argument Clinic now supports the\n@critical_section\ndirective that instructs Argument Clinic to generate a critical section\naround the function call, which locks the\nself\nobject in\n--disable-gil\nbuilds. Patch by Sam Gross.\nC API\n¶\ngh-112026\n: Add again the private\n_PyThreadState_UncheckedGet()\nfunction as an alias to the new public\nPyThreadState_GetUnchecked()\nfunction. Patch by Victor Stinner.\ngh-112026\n: Restore the removed\n_PyDict_GetItemStringWithError()\nfunction. It is used by numpy. Patch by Victor Stinner.\ngh-112026\n: Restore removed private C API functions, macros and structures\nwhich have no simple replacement for now:\n_PyDict_GetItem_KnownHash()\n_PyDict_NewPresized()\n_PyHASH_BITS\n_PyHASH_IMAG\n_PyHASH_INF\n_PyHASH_MODULUS\n_PyHASH_MULTIPLIER\n_PyLong_Copy()\n_PyLong_FromDigits()\n_PyLong_New()\n_PyLong_Sign()\n_PyObject_CallMethodId()\n_PyObject_CallMethodNoArgs()\n_PyObject_CallMethodOneArg()\n_PyObject_CallOneArg()\n_PyObject_EXTRA_INIT\n_PyObject_FastCallDict()\n_PyObject_GetAttrId()\n_PyObject_Vectorcall()\n_PyObject_VectorcallMethod()\n_PyStack_AsDict()\n_PyThread_CurrentFrames()\n_PyUnicodeWriter structure\n_PyUnicodeWriter_Dealloc()\n_PyUnicodeWriter_Finish()\n_PyUnicodeWriter_Init()\n_PyUnicodeWriter_Prepare()\n_PyUnicodeWriter_PrepareKind()\n_PyUnicodeWriter_WriteASCIIString()\n_PyUnicodeWriter_WriteChar()\n_PyUnicodeWriter_WriteLatin1String()\n_PyUnicodeWriter_WriteStr()\n_PyUnicodeWriter_WriteSubstring()\n_PyUnicode_AsString()\n_PyUnicode_FromId()\n_PyVectorcall_Function()\n_Py_IDENTIFIER()\n_Py_c_abs()\n_Py_c_diff()\n_Py_c_neg()\n_Py_c_pow()\n_Py_c_prod()\n_Py_c_quot()\n_Py_c_sum()\n_Py_static_string()\n_Py_static_string_init()\nPatch by Victor Stinner.\ngh-112026\n: Add again\n<ctype.h>\nand\n<unistd.h>\nincludes in\nPython.h\n, but don’t include them in the limited C API version 3.13 and\nnewer. Patch by Victor Stinner.\ngh-111956\n: Add internal-only one-time initialization API:\n_PyOnceFlag\nand\n_PyOnceFlag_CallOnce\n.\ngh-111262\n: Add\nPyDict_Pop()\nand\nPyDict_PopString()\nfunctions: remove a key from a dictionary and optionally return the\nremoved value. This is similar to\ndict.pop()\n, but without the\ndefault value and not raising\nKeyError\nif the key missing. Patch by\nStefan Behnel and Victor Stinner.\ngh-111863\n: Rename\nPy_NOGIL\nto\nPy_GIL_DISABLED\n. Patch by Hugo van\nKemenade.\ngh-111138\n: Add\nPyList_Extend()\nand\nPyList_Clear()\nfunctions: similar to Python\nlist.extend()\nand\nlist.clear()\nmethods. Patch by Victor Stinner.\ngh-108765\n: On Windows,\nPython.h\nno longer includes the\n<stddef.h>\nstandard header file. If needed, it should now be included explicitly.\nPatch by Victor Stinner.\ngh-111569\n: Implement “Python Critical Sections” from\nPEP 703\n. These are\nmacros to help replace the GIL with per-object locks in the\n--disable-gil\nbuild of CPython. The macros are no-ops in the default\nbuild.\ngh-111506\n: In the limited C API version 3.13,\nPy_SET_REFCNT()\nfunction is now implemented as an opaque function call. Patch by Victor\nStinner.\ngh-108082\n: Add\nPyErr_FormatUnraisable()\nfunction.\ngh-110964\n: Move the undocumented private _PyArg functions and\n_PyArg_Parser structure to internal C API (\npycore_modsupport.h\n). Patch\nby Victor Stinner.\ngh-110815\n: Support non-ASCII keyword names in\nPyArg_ParseTupleAndKeywords()\n.\ngh-109587\n: Introduced\nPyUnstable_PerfTrampoline_CompileCode()\n,\nPyUnstable_PerfTrampoline_SetPersistAfterFork()\nand\nPyUnstable_CopyPerfMapFile()\n. These functions allow extension\nmodules to initialize trampolines eagerly, after the application is\n“warmed up”. This makes it possible to have perf-trampolines running in an\nalways-enabled fashion.\ngh-85283\n: Add the\nPySys_Audit()\nfunction to the limited C API.\nPatch by Victor Stinner.\ngh-85283\n: Add\nPyMem_RawMalloc()\n,\nPyMem_RawCalloc()\n,\nPyMem_RawRealloc()\nand\nPyMem_RawFree()\nto the limited C\nAPI. Patch by Victor Stinner.\ngh-106672\n: Functions\nPyDict_GetItem()\n,\nPyDict_GetItemString()\n,\nPyMapping_HasKey()\n,\nPyMapping_HasKeyString()\n,\nPyObject_HasAttr()\n,\nPyObject_HasAttrString()\n, and\nPySys_GetObject()\n, which\nclear all errors occurred during calling the function, report now them\nusing\nsys.unraisablehook()\n.\ngh-67565\n: Remove redundant C-contiguity check in\ngetargs.c\n,\nbinascii\n,\nssl\nand Argument Clinic. Patched by Stefan Krah\nand Furkan Onder\nPython 3.13.0 alpha 1\n¶\nRelease date: 2023-10-13\nSecurity\n¶\ngh-108310\n: Fixed an issue where instances of\nssl.SSLSocket\nwere\nvulnerable to a bypass of the TLS handshake and included protections (like\ncertificate verification) and treating sent unencrypted data as if it were\npost-handshake TLS encrypted data.  Security issue reported as\nCVE 2023-40217\nby Aapo Oksman. Patch by Gregory P. Smith.\ngh-107774\n: PEP 669 specifies that\nsys.monitoring.register_callback\nwill generate an audit event. Pre-releases of Python 3.12 did not generate\nthe audit event. This is now fixed.\ngh-102988\n: Reverted the\nemail.utils\nsecurity improvement change\nreleased in 3.12beta4 that unintentionally caused\nemail.utils.getaddresses\nto fail to parse email addresses with a\ncomma in the quoted name field. See\ngh-106669\n.\ngh-99108\n: Refresh our new HACL* built-in\nhashlib\ncode from\nupstream. Built-in SHA2 should be faster and an issue with SHA3 on 32-bit\nplatforms is fixed.\ngh-102509\n: Start initializing\nob_digit\nduring creation of\nPyLongObject\nobjects. Patch by Illia Volochii.\nCore and Builtins\n¶\ngh-110782\n: Fix crash when\ntyping.TypeVar\nis constructed with a\nkeyword argument. Patch by Jelle Zijlstra.\ngh-110752\n: Reset\nceval.eval_breaker\nin\ninterpreter_clear()\ngh-110721\n: Use the\ntraceback\nimplementation for the default\nPyErr_Display()\nfunctionality. Patch by Pablo Galindo\ngh-110696\n: Fix incorrect error message for invalid argument unpacking.\nPatch by Pablo Galindo\ngh-104169\n: Split the tokenizer into two separate directories: - One part\nincludes the actual lexeme producing logic and lives in\nParser/lexer\n.\n- The second part wraps the lexer according to the different tokenization\nmodes   we have (string, utf-8, file, interactive, readline) and lives in\nParser/tokenizer\n.\ngh-110688\n: Remove undocumented\ntest_c_api\nmethod from\nset\n,\nwhich was only defined for testing purposes under\nPy_DEBUG\n. Now we\nhave proper CAPI tests.\ngh-104584\n: Fix a reference leak when running with\nPYTHONUOPS\nor\n-X\nuops\nenabled.\ngh-110514\n: Add\nPY_THROW\nto\nsys.setprofile()\nevents\ngh-110489\n: Optimise\nmath.ceil()\nwhen the input is exactly a float,\nresulting in about a 10% improvement.\ngh-110455\n: Guard\nassert(tstate->thread_id\n>\n0)\nwith\n#ifndef\nHAVE_PTHREAD_STUBS\n. This allows for for pydebug builds to work under\nWASI which (currently) lacks thread support.\ngh-110309\n: Remove unnecessary empty constant nodes in the ast of f-string\nspecs.\ngh-110259\n: Correctly identify the format spec in f-strings (with single or\ntriple quotes) that have multiple lines in the expression part and include\na formatting spec. Patch by Pablo Galindo\ngh-110237\n: Fix missing error checks for calls to\nPyList_Append\nin\n_PyEval_MatchClass\n.\ngh-110164\n: regrtest: If the\nSOURCE_DATE_EPOCH\nenvironment variable is\ndefined, regrtest now disables tests randomization. Patch by Victor\nStinner.\ngh-109889\n: Fix the compiler’s redundant NOP detection algorithm to skip\nover NOPs with no line number when looking for the next instruction’s\nlineno.\ngh-109853\n:\nsys.path[0]\nis now set correctly for subinterpreters.\ngh-109923\n: Set line number on the\nPOP_TOP\nthat follows a\nRETURN_GENERATOR\n.\ngh-105716\n: Subinterpreters now correctly handle the case where they have\nthreads running in the background.  Before, such threads would interfere\nwith cleaning up and destroying them, as well as prevent running another\nscript.\ngh-109369\n: The internal eval_breaker and supporting flags, plus the\nmonitoring version have been merged into a single atomic integer to speed\nup checks.\ngh-109823\n: Fix bug where compiler does not adjust labels when removing an\nempty basic block which is a jump target.\ngh-109793\n: The main thread no longer exits prematurely when a\nsubinterpreter is cleaned up during runtime finalization.  The bug was a\nproblem particularly because, when triggered, the Python process would\nalways return with a 0 exitcode, even if it failed.\ngh-109719\n: Fix missing jump target labels when compiler reorders cold/warm\nblocks.\ngh-109595\n: Add\n-X\ncpu_count\ncommand line option to\noverride return results of\nos.cpu_count()\nand\nos.process_cpu_count()\n. This option is useful for users who need to\nlimit CPU resources of a container system without having to modify the\ncontainer (application code). Patch by Donghee Na.\ngh-109627\n: Fix bug where the compiler does not assign a new jump target\nlabel to a duplicated small exit block.\ngh-109596\n: Fix some tokens in the grammar that were incorrectly marked as\nsoft keywords. Also fix some repeated rule names and ensure that repeated\nrules are not allowed. Patch by Pablo Galindo\ngh-109496\n: On a Python built in debug mode,\nPy_DECREF()\nnow\ncalls\n_Py_NegativeRefcount()\nif the object is a dangling pointer to\ndeallocated memory: memory filled with\n0xDD\n“dead byte” by the debug\nhook on memory allocators. The fix is to check the reference count\nbefore\nchecking for\n_Py_IsImmortal()\n. Patch by Victor Stinner.\ngh-107265\n: Deopt opcodes hidden by the executor when base opcode is needed\ngh-109371\n: Deopted instructions correctly for tool initialization and\nmodified the incorrect assertion in instrumentation, when a previous tool\nalready sets INSTRUCTION events\ngh-105658\n: Fix bug where the line trace of an except block ending with a\nconditional includes an excess event with the line of the conditional\nexpression.\ngh-109219\n: Fix compiling type param scopes that use a name which is also\nfree in an inner scope.\ngh-109351\n: Fix crash when compiling an invalid AST involving a named\n(walrus) expression.\ngh-109341\n: Fix crash when compiling an invalid AST involving a\nast.TypeAlias\n.\ngh-109195\n: Fix source location for the\nLOAD_*\ninstruction preceding a\nLOAD_SUPER_ATTR\nto load the\nsuper\nglobal (or shadowing variable)\nso that it encompasses only the name\nsuper\nand not the following\nparentheses.\ngh-109256\n: Opcode IDs for specialized opcodes are allocated in their own\nrange to improve stability of the IDs for the ‘real’ opcodes.\ngh-109216\n: Fix possible memory leak in\nBUILD_MAP\n.\ngh-109207\n: Fix a SystemError in\n__repr__\nof symtable entry object.\ngh-109179\n: Fix bug where the C traceback display drops notes from\nSyntaxError\n.\ngh-109118\n: Disallow nested scopes (lambdas, generator expressions, and\ncomprehensions) within PEP 695 annotation scopes that are nested within\nclasses.\ngh-109156\n: Add tests for de-instrumenting instructions while keeping the\ninstrumentation for lines\ngh-109114\n: Relax the detection of the error message for invalid lambdas\ninside f-strings to not search for arbitrary replacement fields to avoid\nfalse positives. Patch by Pablo Galindo\ngh-105848\n: Add a new\nCALL_KW\nopcode, used for calls containing\nkeyword arguments. Also, fix a possible crash when jumping over method\ncalls in a debugger.\ngh-109052\n: Use the base opcode when comparing code objects to avoid\ninterference from instrumentation\ngh-109118\n: Fix interpreter crash when a NameError is raised inside the\ntype parameters of a generic class.\ngh-88943\n: Improve syntax error for non-ASCII character that follows a\nnumerical literal. It now points on the invalid non-ASCII character, not\non the valid numerical literal.\ngh-108976\n: Fix crash that occurs after de-instrumenting a code object in a\nmonitoring callback.\ngh-108732\n: Make iteration variables of module- and class-scoped\ncomprehensions visible to pdb and other tools that use\nframe.f_locals\nagain.\ngh-108959\n: Fix caret placement for error locations for subscript and\nbinary operations that involve non-semantic parentheses and spaces. Patch\nby Pablo Galindo\ngh-104584\n: Fix a crash when running with\nPYTHONUOPS\nor\n-X\nuops\nenabled and an error occurs during optimization.\ngh-108727\n: Define\ntp_dealloc\nfor\nCounterOptimizer_Type\n. This fixes\na segfault on deallocation.\ngh-108520\n: Fix\nmultiprocessing.synchronize.SemLock.__setstate__()\nto\nproperly initialize\nmultiprocessing.synchronize.SemLock._is_fork_ctx\n. This fixes a\nregression when passing a SemLock across nested processes.\nRename\nmultiprocessing.synchronize.SemLock.is_fork_ctx\nto\nmultiprocessing.synchronize.SemLock._is_fork_ctx\nto avoid exposing\nit as public API.\ngh-108654\n: Restore locals shadowed by an inlined comprehension if the\ncomprehension raises an exception.\ngh-108488\n: Change the initialization of inline cache entries so that the\ncache entry for\nJUMP_BACKWARD\nis initialized to zero, instead of the\nadaptive_counter_warmup()\nvalue used for all other instructions. This\ncounter, unique among instructions, counts up from zero.\ngh-108716\n: Turn off deep-freezing of code objects. Modules are still\nfrozen, so that a file system search is not needed for common modules.\ngh-108614\n: Add RESUME_CHECK instruction, to avoid having to handle\ninstrumentation, signals, and contexts switches in the tier 2 execution\nengine.\ngh-108487\n: Move an assert that would cause a spurious crash in a devious\ncase that should only trigger deoptimization.\ngh-106176\n: Use a\nWeakValueDictionary\nto track the lists containing the\nmodules each thread is currently importing. This helps avoid a reference\nleak from keeping the list around longer than necessary. Weakrefs are used\nas GC can’t interrupt the cleanup.\ngh-105481\n: The regen-opcode build stage was removed and its work is now\ndone in regen-cases.\ngh-107901\n: Fix missing line number on\nJUMP_BACKWARD\nat the end\nof a for loop.\ngh-108113\n: The\ncompile()\nbuilt-in can now accept a new flag,\nast.PyCF_OPTIMIZED_AST\n, which is similar to\nast.PyCF_ONLY_AST\nexcept that the returned\nAST\nis optimized according to the value of\nthe\noptimize\nargument.\nast.parse()\nnow accepts an optional argument\noptimize\nwhich is\npassed on to the\ncompile()\nbuilt-in. This makes it possible to\nobtain an optimized\nAST\n.\ngh-107971\n: Opcode IDs are generated from bytecodes.c instead of being hard\ncoded in opcode.py.\ngh-107944\n: Improve error message for function calls with bad keyword\narguments. Patch by Pablo Galindo\ngh-108390\n: Raise an exception when setting a non-local event (\nRAISE\n,\nEXCEPTION_HANDLED\n, etc.) in\nsys.monitoring.set_local_events\n.\nFixes crash when tracing in recursive calls to Python classes.\ngh-108035\n: Remove the\n_PyCFrame\nstruct, moving the pointer to the\ncurrent interpreter frame back to the threadstate, as it was for 3.10 and\nearlier. The\n_PyCFrame\nexisted as a performance optimization for\ntracing. Since PEP 669 has been implemented, this optimization no longer\napplies.\ngh-91051\n: Fix abort / segfault when using all eight type watcher slots, on\nplatforms where\nchar\nis signed by default.\ngh-106581\n: Fix possible assertion failures and missing instrumentation\nevents when\nPYTHONUOPS\nor\n-X\nuops\nis enabled.\ngh-107526\n: Revert converting\nvars\n,\ndir\n,\nnext\n,\ngetattr\n, and\niter\nto argument clinic.\ngh-84805\n: Autogenerate signature for\nMETH_NOARGS\nand\nMETH_O\nextension functions.\ngh-107758\n: Make the\ndump_stack()\nroutine used by the\nlltrace\nfeature (low-level interpreter debugging) robust against recursion by\nensuring that it never calls a\n__repr__\nmethod implemented in Python.\nAlso make the similar output for Tier-2 uops appear on\nstdout\n(instead\nof\nstderr\n), to match the\nlltrace\ncode in ceval.c.\ngh-107659\n: Add docstrings for\nctypes.pointer()\nand\nctypes.POINTER()\n.\ngh-105848\n: Modify the bytecode so that the actual callable for a\nCALL\nis at a consistent position on the stack (regardless of\nwhether or not bound-method-calling optimizations are active).\ngh-107674\n: Fixed performance regression in\nsys.settrace\n.\ngh-107724\n: In pre-release versions of 3.12, up to rc1, the sys.monitoring\ncallback function for the\nPY_THROW\nevent was missing the third,\nexception argument. That is now fixed.\ngh-84436\n: Skip reference count modifications for many known immortal\nobjects.\ngh-107596\n: Specialize subscripting\nstr\nobjects by\nint\nindexes.\ngh-107080\n: Trace refs builds (\n--with-trace-refs\n) were crashing when\nused with isolated subinterpreters.  The problematic global state has been\nisolated to each interpreter.  Other fixing the crashes, this change does\nnot affect users.\ngh-107557\n: Generate the cases needed for the barebones tier 2 abstract\ninterpreter for optimization passes in CPython.\ngh-106608\n: Make\n_PyUOpExecutorObject\nvariable length.\ngh-100964\n: Clear generators’ exception state after\nreturn\nto break\nreference cycles.\ngh-107455\n: Improve error messages when converting an incompatible type to\nctypes.c_char_p\n,\nctypes.c_wchar_p\nand\nctypes.c_void_p\n.\ngh-107263\n: Increase C recursion limit for functions other than the main\ninterpreter from 800 to 1500. This should allow functions like\nlist.__repr__\nand\njson.dumps\nto handle all the inputs that they\ncould prior to 3.12\ngh-104584\n: Fix an issue which caused incorrect inline caches to be read\nwhen running with\nPYTHONUOPS\nor\n-X\nuops\nenabled.\ngh-104432\n: Fix potential unaligned memory access on C APIs involving\nreturned sequences of\nchar\n*\npointers within the\ngrp\nand\nsocket\nmodules. These were revealed using a\n-fsaniziter=alignment\nbuild on ARM macOS. Patch by Christopher Chavez.\ngh-106078\n: Isolate\n_decimal\n(apply\nPEP 687\n). Patch by Charlie\nZhao.\ngh-106898\n: Add the exception as the third argument to\nPY_UNIND\ncallbacks in\nsys.monitoring\n. This makes the\nPY_UNWIND\ncallback\nconsistent with the other exception handling callbacks.\ngh-106895\n: Raise a\nValueError\nwhen a monitoring callback function\nreturns\nDISABLE\nfor events that cannot be disabled locally.\ngh-106897\n: Add a\nRERAISE\nevent to\nsys.monitoring\n, which occurs\nwhen an exception is reraise, either explicitly by a plain\nraise\nstatement, or implicitly in an\nexcept\nor\nfinally\nblock.\ngh-77377\n: Ensure that multiprocessing synchronization objects created in a\nfork context are not sent to a different process created in a spawn\ncontext. This changes a segfault into an actionable RuntimeError in the\nparent process.\ngh-106931\n: Statically allocated string objects are now interned globally\ninstead of per-interpreter.  This fixes a situation where such a string\nwould only be interned in a single interpreter. Normal string objects are\nunaffected.\ngh-104621\n: Unsupported modules now always fail to be imported.\ngh-107122\n: Add\ndbm.ndbm.ndbm.clear()\nto\ndbm.ndbm\n. Patch By\nDonghee Na.\ngh-107122\n: Add\ndbm.gnu.gdbm.clear()\nto\ndbm.gnu\n. Patch By\nDonghee Na.\ngh-107015\n: The ASYNC and AWAIT tokens are removed from the Grammar, which\nremoves the possibility of making\nasync\nand\nawait\nsoft keywords\nwhen using\nfeature_version<7\nin\nast.parse()\n.\ngh-106917\n: Fix classmethod-style\nsuper()\nmethod calls (i.e., where\nthe second argument to\nsuper()\n, or the implied second argument drawn\nfrom\nself/cls\nin the case of zero-arg super, is a type) when the\ntarget of the call is not a classmethod.\ngh-105699\n: Python no longer crashes due an infrequent race when\ninitializing per-interpreter interned strings.  The crash would manifest\nwhen the interpreter was finalized.\ngh-105699\n: Python no longer crashes due to an infrequent race in setting\nPy_FileSystemDefaultEncoding\nand\nPy_FileSystemDefaultEncodeErrors\n(both deprecated), when simultaneously initializing two isolated\nsubinterpreters.  Now they are only set during runtime initialization.\ngh-106908\n: Fix various hangs, reference leaks, test failures, and\ntracing/introspection bugs when running with\nPYTHONUOPS\nor\n-X\nuops\nenabled.\ngh-106092\n: Fix a segmentation fault caused by a use-after-free bug in\nframe_dealloc\nwhen the trashcan delays the deallocation of a\nPyFrameObject\n.\ngh-106485\n: Reduce the number of materialized instances dictionaries by\ndematerializing them when possible.\ngh-106719\n: No longer suppress arbitrary errors in the\n__annotations__\ngetter and setter in the type and module types.\ngh-106723\n: Propagate\nfrozen_modules\nto multiprocessing spawned process\ninterpreters.\ngh-104909\n: Split\nLOAD_ATTR_INSTANCE_VALUE\ninto micro-ops.\ngh-104909\n: Split\nLOAD_GLOBAL\nspecializations into micro-ops.\ngh-106597\n: A new debug structure of offsets has been added to the\n_PyRuntimeState\nthat will help out-of-process debuggers and profilers\nto obtain the offsets to relevant interpreter structures in a way that is\nagnostic of how Python was compiled and that doesn’t require copying the\nheaders. Patch by Pablo Galindo\ngh-106487\n: Allow the\ncount\nargument of\nstr.replace()\nto be a\nkeyword. Patch by Hugo van Kemenade.\ngh-96844\n: Improve error message of\nlist.remove()\n. Patch by Donghee\nNa.\ngh-81283\n: Compiler now strips indents from docstrings. It reduces\npyc\nfile size 5% when the module is heavily documented. This change affects to\n__doc__\nso tools like doctest will be affected.\ngh-106396\n: When the format specification of an f-string expression is\nempty, the parser now generates an empty\nast.JoinedStr\nnode for\nit instead of an one-element\nast.JoinedStr\nwith an empty string\nast.Constant\n.\ngh-100288\n: Specialize\nLOAD_ATTR\nfor non-descriptors on the\nclass. Adds\nLOAD_ATTR_NONDESCRIPTOR_WITH_VALUES\nand\nLOAD_ATTR_NONDESCRIPTOR_NO_DICT\n.\ngh-106008\n: Fix possible reference leaks when failing to optimize\ncomparisons with\nNone\nin the bytecode compiler.\ngh-106145\n: Make\nend_lineno\nand\nend_col_offset\nrequired on\ntype_param\nast nodes.\ngh-106213\n: Changed the way that Emscripten call trampolines work for\ncompatibility with Wasm/JS Promise integration.\ngh-106182\n:\nsys.getfilesystemencoding()\nand\nsys.getfilesystemencodeerrors\nnow return interned Unicode object.\ngh-106210\n: Removed Emscripten import trampoline as it was no longer\nnecessary for Pyodide.\ngh-104584\n: Added a new, experimental, tracing optimizer and interpreter\n(a.k.a. “tier 2”). This currently pessimizes, so don’t use yet – this is\ninfrastructure so we can experiment with optimizing passes. To enable it,\npass\n-Xuops\nor set\nPYTHONUOPS=1\n. To get debug output, set\nPYTHONUOPSDEBUG=N\nwhere\nN\nis a debug level (0-4, where 0 is no\ndebug output and 4 is excessively verbose).\ngh-105775\n:\nLOAD_CLOSURE\nis now a pseudo-op.\ngh-105730\n: Allow any callable other than type objects as the condition\npredicate in\nBaseExceptionGroup.split()\nand\nBaseExceptionGroup.subgroup()\n.\ngh-105979\n: Fix crash in\n_imp.get_frozen_object()\ndue to improper\nexception handling.\ngh-106003\n: Add a new\nTO_BOOL\ninstruction, which performs boolean\nconversions for\nPOP_JUMP_IF_TRUE\n,\nPOP_JUMP_IF_FALSE\n,\nand\nUNARY_NOT\n(which all expect exact\nbool\nvalues now).\nAlso, modify the oparg of\nCOMPARE_OP\nto include an optional\n“boolean conversion” flag.\ngh-98931\n: Ensure custom\nSyntaxError\nerror messages are raised for\ninvalid imports with multiple targets. Patch by Pablo Galindo\ngh-105724\n: Improve\nassert\nerror messages by providing exact error\nrange.\ngh-105908\n: Fixed bug where\ngh-99111\nbreaks future import\nbarry_as_FLUFL\nin the Python REPL.\ngh-105840\n: Fix possible crashes when specializing function calls with too\nmany\n__defaults__\n.\ngh-105831\n: Fix an f-string bug, where using a debug expression (the\n=\nsign) that appears in the last line of a file results to the debug buffer\nthat holds the expression text being one character too small.\ngh-105800\n: Correctly issue\nSyntaxWarning\nin f-strings if invalid\nsequences are used. Patch by Pablo Galindo\ngh-105340\n: Include the comprehension iteration variable in\nlocals()\ninside a module- or class-scope comprehension.\ngh-105331\n: Raise\nValueError\nif the\ndelay\nargument to\nasyncio.sleep()\nis a NaN (matching\ntime.sleep()\n).\ngh-105587\n: The runtime can’t guarantee that immortal objects will not be\nmutated by Extensions. Thus, this modifies _PyStaticObject_CheckRefcnt to\nwarn instead of asserting.\ngh-105564\n: Don’t include artificil newlines in the\nline\nattribute of\ntokens in the APIs of the\ntokenize\nmodule. Patch by Pablo Galindo\ngh-105549\n: Tokenize separately\nNUMBER\nand\nNAME\ntokens that are not\nambiguous. Patch by Pablo Galindo.\ngh-105588\n: Fix an issue that could result in crashes when compiling\nmalformed\nast\nnodes.\ngh-100987\n: Allow objects other than code objects as the “executable” in\ninternal frames. In the long term, this can help tools like Cython and\nPySpy interact more efficiently. In the shorter term, it allows us to\nperform some optimizations more simply.\ngh-105375\n: Fix bugs in the\nbuiltins\nmodule where exceptions could\nend up being overwritten.\ngh-105375\n: Fix bug in the compiler where an exception could end up being\noverwritten.\ngh-105375\n: Improve error handling in\nPyUnicode_BuildEncodingMap()\nwhere an exception could end up being overwritten.\ngh-105486\n: Change the repr of\nParamSpec\nlist of args in\ntypes.GenericAlias\n.\ngh-105678\n: Break the\nMAKE_FUNCTION\ninstruction into two parts,\nMAKE_FUNCTION\nwhich makes the function and\nSET_FUNCTION_ATTRIBUTE\nwhich sets the attributes on the function. This makes the stack effect of\nMAKE_FUNCTION\nregular to ease optimization and code generation.\ngh-105435\n: Fix spurious newline character if file ends on a comment\nwithout a newline. Patch by Pablo Galindo\ngh-105390\n: Correctly raise\ntokenize.TokenError\nexceptions instead\nof\nSyntaxError\nfor tokenize errors such as incomplete input. Patch\nby Pablo Galindo\ngh-105259\n: Don’t include newline character for trailing\nNEWLINE\ntokens\nemitted in the\ntokenize\nmodule. Patch by Pablo Galindo\ngh-104635\n: Eliminate redundant\nSTORE_FAST\ninstructions in the\ncompiler. Patch by Donghee Na and Carl Meyer.\ngh-105324\n: Fix the main function of the\ntokenize\nmodule when\nreading from\nsys.stdin\n. Patch by Pablo Galindo\ngh-33092\n: Simplify and speed up interpreter for f-strings. Removes\nFORMAT_VALUE\nopcode. Add\nCONVERT_VALUE\n,\nFORMAT_SIMPLE\nand\nFORMAT_WITH_SPEC\nopcode. Compiler emits more efficient sequence for\neach format expression.\ngh-105229\n: Remove remaining two-codeunit superinstructions. All remaining\nsuperinstructions only take a single codeunit, simplifying instrumentation\nand quickening.\ngh-105235\n: Prevent out-of-bounds memory access during\nmmap.find()\ncalls.\ngh-98963\n: Restore the ability for a subclass of\nproperty\nto\ndefine\n__slots__\nor otherwise be dict-less by ignoring failures to set\na docstring on such a class.  This behavior had regressed in 3.12beta1.\nAn\nAttributeError\nwhere there had not previously been one was\ndisruptive to existing code.\ngh-104812\n: The “pending call” machinery now works for all interpreters,\nnot just the main interpreter, and runs in all threads, not just the main\nthread. Some calls are still only done in the main thread, ergo in the\nmain interpreter. This change does not affect signal handling nor the\nexisting public C-API (\nPy_AddPendingCall()\n), which both still only\ntarget the main thread. The new functionality is meant strictly for\ninternal use for now, since consequences of its use are not well\nunderstood yet outside some very restricted cases.  This change brings the\ncapability in line with the intention when the state was made\nper-interpreter several years ago.\ngh-105194\n: Do not escape with backslashes f-string format specifiers.\nPatch by Pablo Galindo\ngh-105229\n: Replace some dynamic superinstructions with single instruction\nequivalents.\ngh-105162\n: Fixed bug in generator.close()/throw() where an inner iterator\nwould be ignored when the outer iterator was instrumented.\ngh-105164\n: Ensure annotations are set up correctly if the only annotation\nin a block is within a\nmatch\nblock. Patch by Jelle Zijlstra.\ngh-105148\n: Make\n_PyASTOptimizeState\ninternal to ast_opt.c. Make\n_PyAST_Optimize\ntake two integers instead of a pointer to this struct.\nThis avoids the need to include pycore_compile.h in ast_opt.c.\ngh-104799\n: Attributes of\nast\nnodes that are lists now default to\nthe empty list if omitted. This means that some code that previously\nraised\nTypeError\nwhen the AST node was used will now proceed with\nthe empty list instead. Patch by Jelle Zijlstra.\ngh-105111\n: Remove the old trashcan macros\nPy_TRASHCAN_SAFE_BEGIN\nand\nPy_TRASHCAN_SAFE_END\n. They should be replaced by the new macros\nPy_TRASHCAN_BEGIN\nand\nPy_TRASHCAN_END\n.\ngh-105035\n: Fix\nsuper()\ncalls on types with custom\ntp_getattro\nimplementation (e.g. meta-types.)\ngh-105017\n: Show CRLF lines in the tokenize string attribute in both NL and\nNEWLINE tokens. Patch by Marta Gómez.\ngh-105013\n: Fix handling of multiline parenthesized lambdas in\ninspect.getsource()\n. Patch by Pablo Galindo\ngh-105017\n: Do not include an additional final\nNL\ntoken when parsing\nfiles having CRLF lines. Patch by Marta Gómez.\ngh-104976\n: Ensure that trailing\nDEDENT\ntokenize.TokenInfo\nobjects emitted by the\ntokenize\nmodule are reported as in Python\n3.11. Patch by Pablo Galindo\ngh-104972\n: Ensure that the\nline\nattribute in\ntokenize.TokenInfo\nobjects in the\ntokenize\nmodule are\nalways correct. Patch by Pablo Galindo\ngh-104955\n: Fix signature for the new\n__release_buffer__()\nslot. Patch by Jelle Zijlstra.\ngh-104690\n: Starting new threads and process creation through\nos.fork()\nduring interpreter shutdown (such as from\natexit\nhandlers) is no longer supported.  It can lead to race condition between\nthe main Python runtime thread freeing thread states while internal\nthreading\nroutines are trying to allocate and use the state of just\ncreated threads. Or forked children trying to use the mid-shutdown runtime\nand thread state in the child process.\ngh-104879\n: Fix crash when accessing the\n__module__\nattribute of type\naliases defined outside a module. Patch by Jelle Zijlstra.\ngh-104825\n: Tokens emitted by the\ntokenize\nmodule do not include an\nimplicit\n\\n\ncharacter in the\nline\nattribute anymore. Patch by\nPablo Galindo\ngh-104770\n: If a generator returns a value upon being closed, the value is\nnow returned by\ngenerator.close()\n.\ngh-89091\n: Raise\nRuntimeWarning\nfor unawaited async generator\nmethods like\nasend()\n,\nathrow()\nand\naclose()\n. Patch by Kumar Aditya.\ngh-96663\n: Add a better, more introspect-able error message when setting\nattributes on classes without a\n__dict__\nand no slot member for the\nattribute.\ngh-93627\n: Update the Python pickle module implementation to match the C\nimplementation of the pickle module. For objects setting reduction methods\nlike\n__reduce_ex__()\nor\n__reduce__()\nto\nNone\n, pickling will result in a\nTypeError\n.\ngh-101006\n: Improve error handling when read\nmarshal\ndata.\ngh-91095\n: Specializes calls to most Python classes. Specifically, any\nclass that inherits from\nobject\n, or another Python class, and does not\noverride\n__new__\n.\nThe specialized instruction does the following:\nCreates the object (by calling\nobject.__new__\n)\nPushes a shim frame to the frame stack (to cleanup after\n__init__\n)\nPushes the frame for\n__init__\nto the frame stack\nSpeeds up the instantiation of most Python classes.\nLibrary\n¶\ngh-110786\n:\nsysconfig\n’s CLI now ignores\nBrokenPipeError\n,\nmaking it exit normally if its output is being piped and the pipe closes.\ngh-103480\n: The\nsysconfig\nmodule is now a package, instead of a\nsingle-file module.\ngh-110733\n: Micro-optimization: Avoid calling\nmin()\n,\nmax()\nin\nBaseEventLoop._run_once()\n.\ngh-94597\n: Added\nasyncio.EventLoop\nfor use with the\nasyncio.run()\nloop_factory\nkwarg to avoid calling the asyncio\npolicy system.\ngh-110682\n:\nruntime-checkable\nprotocols\nused to consider\n__match_args__\na protocol member in\n__instancecheck__\nif it was present on the protocol. Now, this\nattribute is ignored if it is present.\ngh-110488\n: Fix a couple of issues in\npathlib.PurePath.with_name()\n: a\nsingle dot was incorrectly considered a valid name, and in\nPureWindowsPath\n, a name with an NTFS alternate data stream, like\na:b\n, was incorrectly considered invalid.\ngh-110590\n: Fix a bug in\n_sre.compile()\nwhere\nTypeError\nwould\nbe overwritten by\nOverflowError\nwhen the\ncode\nargument was a list\nof non-ints.\ngh-65052\n: Prevent\npdb\nfrom crashing when trying to display\nundisplayable objects\ngh-110519\n: Deprecation warning about non-integer number in\ngettext\nnow always refers to the line in the user code where gettext function or\nmethod is used. Previously it could refer to a line in\ngettext\ncode.\ngh-89902\n: Deprecate non-standard format specifier “N” for\ndecimal.Decimal\n. It was not documented and only supported in the\nC implementation.\ngh-110378\n:\ncontextmanager()\nand\nasynccontextmanager()\ncontext managers now close an\ninvalid underlying generator object that yields more then one value.\ngh-106670\n: In\npdb\n, set convenience variable\n$_exception\nfor\npost mortem debugging.\ngh-110365\n: Fix\ntermios.tcsetattr()\nbug that was overwriting existing\nerrors during parsing integers from\nterm\nlist.\ngh-109653\n: Slightly improve the import time of several standard-library\nmodules by deferring imports of\nwarnings\nwithin those modules.\nPatch by Alex Waygood.\ngh-110273\n:\ndataclasses.replace()\nnow raises TypeError instead of\nValueError if specify keyword argument for a field declared with\ninit=False or miss keyword argument for required InitVar field.\ngh-110249\n: Add\n--inline-caches\nflag to\ndis\ncommand line.\ngh-109653\n: Fix a Python 3.12 regression in the import time of\nrandom\n. Patch by Alex Waygood.\ngh-110222\n: Add support of struct sequence objects in\ncopy.replace()\n.\nPatched by Xuehai Pan.\ngh-109649\n:\nmultiprocessing\n,\nconcurrent.futures\n,\ncompileall\n: Replace\nos.cpu_count()\nwith\nos.process_cpu_count()\nto select the default number of worker\nthreads and processes. Get the CPU affinity if supported. Patch by Victor\nStinner.\ngh-110150\n: Fix base case handling in statistics.quantiles.  Now allows a\nsingle data point.\ngh-110036\n: On Windows, multiprocessing\nPopen.terminate()\nnow catches\nPermissionError\nand get the process exit code. If the process is\nstill running, raise again the\nPermissionError\n. Otherwise, the\nprocess terminated as expected: store its exit code. Patch by Victor\nStinner.\ngh-110038\n: Fixed an issue that caused\nKqueueSelector.select()\nto not\nreturn all the ready events in some cases when a file descriptor is\nregistered for both read and write.\ngh-110045\n: Update the\nsymtable\nmodule to support the new scopes\nintroduced by\nPEP 695\n.\ngh-88402\n: Add new variables to\nsysconfig.get_config_vars()\non\nWindows:\nLIBRARY\n,\nLDLIBRARY\n,\nLIBDIR\n,\nSOABI\n, and\nPy_NOGIL\n.\ngh-109631\n:\nre\nfunctions such as\nre.findall()\n,\nre.split()\n,\nre.search()\nand\nre.sub()\nwhich perform short\nrepeated matches can now be interrupted by user.\ngh-109653\n: Reduce the import time of\nemail.utils\nby around 43%.\nThis results in the import time of\nemail.message\nfalling by around\n18%, which in turn reduces the import time of\nimportlib.metadata\nby\naround 6%. Patch by Alex Waygood.\ngh-109818\n: Fix\nreprlib.recursive_repr()\nnot copying\n__type_params__\nfrom decorated function.\ngh-109047\n:\nconcurrent.futures\n: The\nexecutor manager thread\nnow\ncatches exceptions when adding an item to the\ncall queue\n. During Python\nfinalization, creating a new thread can now raise\nRuntimeError\n.\nCatch the exception and call\nterminate_broken()\nin this case. Patch by\nVictor Stinner.\ngh-109782\n: Ensure the signature of\nos.path.isdir()\nis identical on\nall platforms. Patch by Amin Alaee.\ngh-109653\n: Improve import time of\nfunctools\nby around 13%. Patch by\nAlex Waygood.\ngh-109590\n:\nshutil.which()\nwill prefer files with an extension in\nPATHEXT\nif the given mode includes\nos.X_OK\non win32. If no\nPATHEXT\nmatch is found, a file without an extension in\nPATHEXT\ncan\nbe returned. This change will have\nshutil.which()\nact more similarly\nto previous behavior in Python 3.11.\ngh-109653\n: Reduce the import time of\nenum\nby over 50%. Patch by\nAlex Waygood.\ngh-109593\n: Avoid deadlocking on a reentrant call to the multiprocessing\nresource tracker. Such a reentrant call, though unlikely, can happen if a\nGC pass invokes the finalizer for a multiprocessing object such as\nSemLock.\ngh-109653\n: Reduce the import time of\ntyping\nby around a third.\nPatch by Alex Waygood.\ngh-109649\n: Add\nos.process_cpu_count()\nfunction to get the number of\nlogical CPUs usable by the calling thread of the current process. Patch by\nVictor Stinner.\ngh-74481\n: Add\nset_error_mode\nrelated constants in\nmsvcrt\nmodule in\nPython debug build.\ngh-109613\n: Fix\nos.stat()\nand\nos.DirEntry.stat()\n: check for\nexceptions. Previously, on Python built in debug mode, these functions\ncould trigger a fatal Python error (and abort the process) when a function\nsucceeded with an exception set. Patch by Victor Stinner.\ngh-109599\n: Expose the type of PyCapsule objects as\ntypes.CapsuleType\n.\ngh-109109\n: You can now get the raw TLS certificate chains from TLS\nconnections via\nssl.SSLSocket.get_verified_chain()\nand\nssl.SSLSocket.get_unverified_chain()\nmethods.\nContributed by Mateusz Nowak.\ngh-109559\n: Update\nunicodedata\ndatabase to Unicode 15.1.0.\ngh-109543\n: Remove unnecessary\nhasattr()\ncheck during\ntyping.TypedDict\ncreation.\ngh-109495\n: Remove unnecessary extra\n__slots__\nin\ndatetime\n's pure python implementation to reduce memory\nsize, as they are defined in the superclass. Patch by James Hilton-Balfe\ngh-109461\n:\nlogging\n: Use a context manager for lock acquisition.\ngh-109096\n:\nhttp.server.CGIHTTPRequestHandler\nhas been deprecated\nfor removal in 3.15.  Its design is old and the web world has long since\nmoved beyond CGI.\ngh-109409\n: Fix error when it was possible to inherit a frozen dataclass\nfrom multiple parents some of which were possibly not frozen.\ngh-109375\n: The\npdb\nalias\ncommand now prevents registering\naliases without arguments.\ngh-109319\n: Deprecate the\ndis.HAVE_ARGUMENT\nfield in favour of\ndis.hasarg\n.\ngh-107219\n: Fix a race condition in\nconcurrent.futures\n. When a process\nin the process pool was terminated abruptly (while the future was running\nor pending), close the connection write end. If the call queue is blocked\non sending bytes to a worker process, closing the connection write end\ninterrupts the send, so the queue can be closed. Patch by Victor Stinner.\ngh-66143\n: The\ncodecs.CodecInfo\nobject has been made copyable and\npickleable. Patched by Robert Lehmann and Furkan Onder.\ngh-109187\n:\npathlib.Path.resolve()\nnow treats symlink loops like\nother errors: in strict mode,\nOSError\nis raised, and in non-strict\nmode, no exception is raised.\ngh-50644\n: Attempts to pickle or create a shallow or deep copy of\ncodecs\nstreams now raise a TypeError. Previously, copying failed\nwith a RecursionError, while pickling produced wrong results that\neventually caused unpickling to fail with a RecursionError.\ngh-109174\n: Add support of\ntypes.SimpleNamespace\nin\ncopy.replace()\n.\ngh-109164\n:\npdb\n: Replace\ngetopt\nwith\nargparse\nfor\nparsing command line arguments.\ngh-109151\n: Enable\nreadline\nediting features in the\nsqlite3\ncommand-line interface\n(\npython\n-m\nsqlite3\n).\ngh-108987\n: Fix\n_thread.start_new_thread()\nrace condition. If a\nthread is created during Python finalization, the newly spawned thread now\nexits immediately instead of trying to access freed memory and lead to a\ncrash. Patch by Victor Stinner.\ngh-108682\n: Enum: require\nnames=()\nor\ntype=...\nto create an empty\nenum using the functional syntax.\ngh-109033\n: Exceptions raised by os.utime builtin function now include the\nrelated filename\ngh-108843\n: Fix an issue in\nast.unparse()\nwhen unparsing f-strings\ncontaining many quote types.\ngh-108469\n:\nast.unparse()\nnow supports new\nf-string\nsyntax\nintroduced in Python 3.12. Note that the\nf-string\nquotes are\nreselected for simplicity under the new syntax. (Patch by Steven Sun)\ngh-108751\n: Add\ncopy.replace()\nfunction which allows to create a\nmodified copy of an object. It supports named tuples, dataclasses, and\nmany other objects.\ngh-108682\n: Enum: raise\nTypeError\nif\nsuper().__new__()\nis called\nfrom a custom\n__new__\n.\ngh-108278\n: Deprecate passing the callback callable by keyword for the\nfollowing\nsqlite3.Connection\nAPIs:\nset_authorizer()\nset_progress_handler()\nset_trace_callback()\nThe affected parameters will become positional-only in Python 3.15.\nPatch by Erlend E. Aasland.\ngh-105829\n: Fix concurrent.futures.ProcessPoolExecutor deadlock\ngh-108295\n: Fix crashes related to use of weakrefs on\ntyping.TypeVar\n.\ngh-108463\n: Make expressions/statements work as expected in pdb\ngh-108277\n: Add\nos.timerfd_create()\n,\nos.timerfd_settime()\n,\nos.timerfd_gettime()\n,\nos.timerfd_settime_ns()\n, and\nos.timerfd_gettime_ns()\nto provide a low level interface for Linux’s\ntimer notification file descriptor.\ngh-107811\n:\ntarfile\n: extraction of members with overly large UID or\nGID (e.g. on an OS with 32-bit\nid_t\n) now fails in the same way\nas failing to set the ID.\ngh-64662\n: Fix support for virtual tables in\nsqlite3.Connection.iterdump()\n. Patch by Aviv Palivoda.\ngh-108111\n: Fix a regression introduced in\ngh-101251\nfor 3.12, resulting in\nan incorrect offset calculation in\ngzip.GzipFile.seek()\n.\ngh-108294\n:\ntime.sleep()\nnow raises an auditing event.\ngh-108278\n: Deprecate passing name, number of arguments, and the callable\nas keyword arguments, for the following\nsqlite3.Connection\nAPIs:\ncreate_function()\ncreate_aggregate()\nThe affected parameters will become positional-only in Python 3.15.\nPatch by Erlend E. Aasland.\ngh-108322\n: Speed-up NormalDist.samples() by using the inverse CDF method\ninstead of calling random.gauss().\ngh-83417\n: Add the ability for venv to create a\n.gitignore\nfile which\ncauses the created environment to be ignored by Git. It is on by default\nwhen venv is called via its CLI.\ngh-105736\n: Harmonized the pure Python version of\nOrderedDict\nwith the C version. Now, both versions\nset up their internal state in\n__new__\n.  Formerly, the pure Python\nversion did the set up in\n__init__\n.\ngh-108083\n: Fix bugs in the constructor of\nsqlite3.Connection\nand\nsqlite3.Connection.close()\nwhere exceptions could be leaked. Patch\nby Erlend E. Aasland.\ngh-107932\n: Fix\ndis\nmodule to properly report and display bytecode that\ndo not have source lines.\ngh-105539\n:\nsqlite3\nnow emits an\nResourceWarning\nif a\nsqlite3.Connection\nobject is not\nclosed\nexplicitly. Patch by Erlend E. Aasland.\ngh-107995\n: The\n__module__\nattribute on instances of\nfunctools.cached_property\nis now set to the name of the module in\nwhich the cached_property is defined, rather than “functools”. This means\nthat doctests in\ncached_property\ndocstrings are now properly collected\nby the\ndoctest\nmodule. Patch by Tyler Smart.\ngh-107963\n: Fix\nmultiprocessing.set_forkserver_preload()\nto check the\ngiven list of modules names. Patch by Donghee Na.\ngh-106242\n: Fixes\nos.path.normpath()\nto handle embedded null\ncharacters without truncating the path.\ngh-81555\n:\nxml.dom.minidom\nnow only quotes\n\"\nin attributes.\ngh-50002\n:\nxml.dom.minidom\nnow preserves whitespaces in attributes.\ngh-93057\n: Passing more than one positional argument to\nsqlite3.connect()\nand the\nsqlite3.Connection\nconstructor is\ndeprecated. The remaining parameters will become keyword-only in Python\n3.15. Patch by Erlend E. Aasland.\ngh-76913\n: Add\nmerge_extra\nparameter/feature to\nlogging.LoggerAdapter\ngh-107913\n: Fix possible losses of\nerrno\nand\nwinerror\nvalues in\nOSError\nexceptions if they were cleared or modified by the cleanup\ncode before creating the exception object.\ngh-107845\n:\ntarfile.data_filter()\nnow takes the location of symlinks\ninto account when determining their target, so it will no longer reject\nsome valid tarballs with\nLinkOutsideDestinationError\n.\ngh-107812\n: Extend socket’s netlink support to the FreeBSD platform.\ngh-107805\n: Fix signatures of module-level generated functions in\nturtle\n.\ngh-107782\n:\npydoc\nis now able to show signatures which are not\nrepresentable in Python, e.g. for\ngetattr\nand\ndict.pop\n.\ngh-56166\n: Deprecate passing optional arguments\nmaxsplit\n,\ncount\nand\nflags\nin module-level functions\nre.split()\n,\nre.sub()\nand\nre.subn()\nas positional. They should only be passed by keyword.\ngh-107710\n: Speed up\nlogging.getHandlerNames()\n.\ngh-107715\n: Fix\ndoctest.DocTestFinder.find()\nin presence of class\nnames with special characters. Patch by Gertjan van Zwieten.\ngh-100814\n: Passing a callable object as an option value to a Tkinter image\nnow raises the expected TclError instead of an AttributeError.\ngh-72684\n: Add\ntkinter\nwidget methods:\ntk_busy_hold()\n,\ntk_busy_configure()\n,\ntk_busy_cget()\n,\ntk_busy_forget()\n,\ntk_busy_current()\n, and\ntk_busy_status()\n.\ngh-106684\n: Raise\nResourceWarning\nwhen\nasyncio.StreamWriter\nis not closed leading to memory leaks. Patch by Kumar Aditya.\ngh-107465\n: Add\npathlib.Path.from_uri()\nclassmethod.\ngh-107077\n: Seems that in some conditions, OpenSSL will return\nSSL_ERROR_SYSCALL\ninstead of\nSSL_ERROR_SSL\nwhen a certification\nverification has failed, but the error parameters will still contain\nERR_LIB_SSL\nand\nSSL_R_CERTIFICATE_VERIFY_FAILED\n. We are now\ndetecting this situation and raising the appropriate\nssl.SSLCertVerificationError\n. Patch by Pablo Galindo\ngh-107576\n: Fix\ntypes.get_original_bases()\nto only return\n__orig_bases__\nif it is present on\ncls\ndirectly. Patch by\nJames Hilton-Balfe.\ngh-105481\n: Remove\nopcode.is_pseudo\n,\nopcode.MIN_PSEUDO_OPCODE\nand\nopcode.MAX_PSEUDO_OPCODE\n, which were added in 3.12, were never\ndocumented and were not intended to be used externally.\ngh-105481\n:\nopcode.ENABLE_SPECIALIZATION\n(which was added in 3.12\nbut never documented or intended for external usage) is moved to\n_opcode.ENABLE_SPECIALIZATION\nwhere tests can access it.\ngh-107396\n: tarfiles; Fixed use before assignment of self.exception for\ngzip decompression\ngh-107409\n: Set\n__wrapped__\nattribute in\nreprlib.recursive_repr()\n.\ngh-107406\n: Implement new\n__repr__()\nmethod for\nstruct.Struct\n. Now it returns\nStruct(<format\nrepr>)\n.\ngh-107369\n: Optimize\ntextwrap.indent()\n. It is ~30% faster for large\ninput. Patch by Inada Naoki.\ngh-78722\n: Fix issue where\npathlib.Path.iterdir()\ndid not raise\nOSError\nuntil iterated.\ngh-105578\n: Deprecate\ntyping.AnyStr\nin favor of the new Type\nParameter syntax. See PEP 695.\ngh-62519\n: Make\ngettext.pgettext()\nsearch plural definitions when\ntranslation is not found.\ngh-107089\n: Shelves opened with\nshelve.open()\nhave a much faster\nclear()\nmethod. Patch by James Cave.\ngh-82500\n: Fix overflow on 32-bit systems with\nasyncio\nos.sendfile()\nimplementation.\ngh-83006\n: Document behavior of\nshutil.disk_usage()\nfor non-mounted\nfilesystems on Unix.\ngh-65495\n: Use lowercase\nmail\nfrom\nand\nrcpt\nto\nin\nsmptlib.SMTP\n.\ngh-106186\n: Do not report\nMultipartInvariantViolationDefect\ndefect when\nthe\nemail.parser.Parser\nclass is used to parse emails with\nheadersonly=True\n.\ngh-105002\n: Fix invalid result from\nPurePath.relative_to()\nmethod\nwhen attempting to walk a “\n..\n” segment in\nother\nwith\nwalk_up\nenabled. A\nValueError\nexception is now raised in this case.\ngh-106739\n: Add the\nrtype_cache\nto the warning message (as an addition\nto the type of leaked objects and the number of leaked objects already\nincluded in the message) to make debugging leaked objects easier when the\nmultiprocessing resource tracker process finds leaked objects at shutdown.\nThis helps more quickly identify what was leaked and/or why the leaked\nobject was not properly cleaned up.\ngh-106751\n: Optimize\nSelectSelector.select()\nfor many iteration case.\nPatch By Donghee Na.\ngh-106751\n: Optimize\n_PollLikeSelector.select()\nfor many iteration\ncase.\ngh-106751\n: Optimize\nKqueueSelector.select()\nfor many iteration case.\nPatch By Donghee Na.\ngh-106831\n: Fix potential missing\nNULL\ncheck of\nd2i_SSL_SESSION\nresult in\n_ssl.c\n.\ngh-105481\n: The various opcode lists in the\ndis\nmodule are now\ngenerated from bytecodes.c instead of explicitly constructed in opcode.py.\ngh-106727\n: Make\ninspect.getsource()\nsmarter for class for same name\ndefinitions\ngh-106789\n: Remove import of\npprint\nfrom\nsysconfig\n.\ngh-105726\n: Added\n__slots__\nto\ncontextlib.AbstractContextManager\nand\ncontextlib.AbstractAsyncContextManager\nso that child classes can\nuse\n__slots__\n.\ngh-106774\n: Update the bundled copy of pip to version 23.2.1.\ngh-106751\n:\nselectors\n: Optimize\nEpollSelector.select()\ncode by\nmoving some code outside of the loop.\ngh-106752\n: Fixed several bugs in zipfile.Path, including: in\nzipfile.Path.match()\n, Windows separators are no longer honored (and\nnever were meant to be); Fixed\nname\n/\nsuffix\n/\nsuffixes\n/\nstem\noperations when no filename is present and the Path is not at the root of\nthe zipfile; Reworked glob for performance and more correct matching\nbehavior.\ngh-105293\n: Remove call to\nSSL_CTX_set_session_id_context\nduring client\nside context creation in the\nssl\nmodule.\ngh-106734\n: Disable tab completion in multiline mode of\npdb\ngh-105481\n: Expose opcode metadata through\n_opcode\n.\ngh-106670\n: Add the new\nexceptions\ncommand to the Pdb debugger. It\nmakes it possible to move between chained exceptions when using post\nmortem debugging.\ngh-106602\n: Add __copy__ and __deepcopy__ in\nenum\ngh-106664\n:\nselectors\n: Add\n_SelectorMapping.get()\nmethod and\noptimize\n_SelectorMapping.__getitem__()\n.\ngh-106628\n: Speed up parsing of emails by about 20% by not compiling a new\nregular expression for every single email.\ngh-89427\n: Set the environment variable\nVIRTUAL_ENV_PROMPT\nat\nvenv\nactivation, even when\nVIRTUAL_ENV_DISABLE_PROMPT\nis set.\ngh-106530\n: Revert a change to\ncolorsys.rgb_to_hls()\nthat caused\ndivision by zero for certain almost-white inputs.  Patch by Terry Jan\nReedy.\ngh-106584\n: Fix exit code for\nunittest\nif all tests are skipped. Patch\nby Egor Eliseev.\ngh-106566\n: Optimize\n(?!)\n(pattern which always fails) in regular\nexpressions.\ngh-106554\n:\nselectors\n: Reduce Selector overhead by using a\ndict.get()\nto lookup file descriptors.\ngh-106558\n: Remove ref cycle in callers of\nconvert_to_error()\nby deleting\nresult\nfrom scope in a\nfinally\nblock.\ngh-100502\n: Add\npathlib.PurePath.pathmod\nclass attribute that\nstores the implementation of\nos.path\nused for low-level path\noperations: either\nposixpath\nor\nntpath\n.\ngh-106527\n: Reduce overhead to add and remove\nasyncio\nreaders and\nwriters.\ngh-106524\n: Fix crash in\n_sre.template()\nwith templates containing\ninvalid group indices.\ngh-106531\n: Removed\n_legacy\nand the names it provided from\nimportlib.resources\n:\nResource\n,\ncontents\n,\nis_resource\n,\nopen_binary\n,\nopen_text\n,\npath\n,\nread_binary\n, and\nread_text\n.\ngh-106052\n:\nre\nmodule: fix the matching of possessive quantifiers in\nthe case of a subpattern containing backtracking.\ngh-106510\n: Improve debug output for atomic groups in regular expressions.\ngh-106503\n: Fix ref cycle in\nasyncio._SelectorSocketTransport\nby\nremoving\n_write_ready\nin\nclose\n.\ngh-105497\n: Fix flag mask inversion when unnamed flags exist.\ngh-90876\n: Prevent\nmultiprocessing.spawn\nfrom failing to\nimport\nin\nenvironments where\nsys.executable\nis\nNone\n.  This regressed in 3.11\nwith the addition of support for path-like objects in multiprocessing.\ngh-106403\n: Instances of\ntyping.TypeVar\n,\ntyping.ParamSpec\n,\ntyping.ParamSpecArgs\n,\ntyping.ParamSpecKwargs\n, and\ntyping.TypeVarTuple\nonce\nagain support weak references, fixing a regression introduced in Python\n3.12.0 beta 1. Patch by Jelle Zijlstra.\ngh-89812\n: Add private\npathlib._PathBase\nclass, which provides\nexperimental support for virtual filesystems, and may be made public in a\nfuture version of Python.\ngh-106292\n: Check for an instance-dict cached value in the\n__get__()\nmethod of\nfunctools.cached_property()\n. This better matches the\npre-3.12 behavior and improves compatibility for users subclassing\nfunctools.cached_property()\nand adding a\n__set__()\nmethod.\ngh-106350\n: Detect possible memory allocation failure in the libtommath\nfunction\nmp_init()\nused by the\n_tkinter\nmodule.\ngh-106330\n: Fix incorrect matching of empty paths in\npathlib.PurePath.match()\n. This bug was introduced in Python 3.12.0\nbeta 1.\ngh-106309\n: Deprecate\ntyping.no_type_check_decorator()\n. No major type\nchecker ever added support for this decorator. Patch by Alex Waygood.\ngh-102541\n: Make\npydoc.doc()\ncatch bad module\nImportError\nwhen\noutput stream is not\nNone\n.\ngh-106263\n: Fix crash when calling\nrepr\nwith a manually constructed\nSignalDict object. Patch by Charlie Zhao.\ngh-106236\n: Replace\nassert\nstatements with\nraise\nRuntimeError\nin\nthreading\n, so that\n_DummyThread\ncannot be joined even with\n-OO\n.\ngh-106238\n: Fix rare concurrency bug in lock acquisition by the logging\npackage.\ngh-106152\n: Added PY_THROW event hook for\ncProfile\nfor generators\ngh-106075\n: Added\nasyncio.taskgroups.__all__\nto\nasyncio.__all__\nfor\nexport in star imports.\ngh-104527\n: Zipapp will now skip over appending an archive to itself.\ngh-106046\n: Improve the error message from\nos.fspath()\nif called on\nan object where\n__fspath__\nis set to\nNone\n. Patch by Alex Waygood.\ngh-105987\n: Fix crash due to improper reference counting in\nasyncio\neager task factory internal routines.\ngh-105974\n: Fix bug where a\ntyping.Protocol\nclass that had one or\nmore non-callable members would raise\nTypeError\nwhen\nissubclass()\nwas called against it, even if it defined a custom\n__subclasshook__\nmethod. The behaviour in Python 3.11 and lower –\nwhich has now been restored – was not to raise\nTypeError\nin these\nsituations if a custom\n__subclasshook__\nmethod was defined. Patch by\nAlex Waygood.\ngh-96145\n: Reverted addition of\njson.AttrDict\n.\ngh-89812\n: Add\npathlib.UnsupportedOperation\n, which is raised instead\nof\nNotImplementedError\nwhen a path operation isn’t supported.\ngh-105808\n: Fix a regression introduced in\ngh-101251\nfor 3.12, causing\ngzip.GzipFile.flush()\nto not flush the compressor (nor pass along\nthe\nzip_mode\nargument).\ngh-105481\n:\nstack_effect()\nno longer raises an exception if an\noparg\nis provided for an\nopcode\nthat doesn’t use its arg, or when\nit is not provided for an\nopcode\nthat does use it. In the latter case,\nthe stack effect is returned for\noparg=0\n.\ngh-104799\n: Enable\nast.unparse()\nto unparse function and class\ndefinitions created without the new\ntype_params\nfield from\nPEP 695\n.\nPatch by Jelle Zijlstra.\ngh-105793\n: Add\nfollow_symlinks\nkeyword-only argument to\npathlib.Path.is_dir()\nand\nis_file()\n, defaulting\nto\nTrue\n.\ngh-105570\n: Deprecate two methods of creating\ntyping.TypedDict\nclasses with 0 fields using the functional syntax:\nTD\n=\nTypedDict(\"TD\")\nand\nTD\n=\nTypedDict(\"TD\",\nNone)\n. Both will be\ndisallowed in Python 3.15. To create a\nTypedDict\nclass with 0 fields,\neither use\nclass\nTD(TypedDict):\npass\nor\nTD\n=\nTypedDict(\"TD\",\n{})\n.\ngh-105745\n: Fix\nwebbrowser.Konqueror.open\nmethod.\ngh-105733\n:\nctypes\n: Deprecate undocumented\nctypes.SetPointerType()\nand\nctypes.ARRAY()\nfunctions. Patch\nby Victor Stinner.\ngh-105687\n: Remove deprecated\nre.template\n,\nre.T\n,\nre.TEMPLATE\n,\nsre_constans.SRE_FLAG_TEMPLATE\n.\ngh-105684\n: Supporting\nasyncio.Task.set_name()\nis now mandatory for\nthird party task implementations. The undocumented\n_set_task_name()\nfunction (deprecated since 3.8) has been removed. Patch by Kumar Aditya.\ngh-105375\n: Fix a bug in\n_Unpickler_SetInputStream()\nwhere an\nexception could end up being overwritten in case of failure.\ngh-105626\n: Change the default return value of\nhttp.client.HTTPConnection.get_proxy_response_headers()\nto be\nNone\nand not\n{}\n.\ngh-105375\n: Fix bugs in\nsys\nwhere exceptions could end up being\noverwritten because of deferred error handling.\ngh-105605\n: Harden\npyexpat\nerror handling during module\ninitialisation to prevent exceptions from possibly being overwritten, and\nobjects from being dereferenced twice.\ngh-105375\n: Fix bug in\ndecimal\nwhere an exception could end up being\noverwritten.\ngh-105375\n: Fix bugs in\n_datetime\nwhere exceptions could be\noverwritten in case of module initialisation failure.\ngh-105375\n: Fix bugs in\n_ssl\ninitialisation which could lead to\nleaked references and overwritten exceptions.\ngh-105375\n: Fix a bug in\narray.array\nwhere an exception could end\nup being overwritten.\ngh-105375\n: Fix bugs in\n_ctypes\nwhere exceptions could end up being\noverwritten.\ngh-105375\n: Fix a bug in the\nposix\nmodule where an exception could\nbe overwritten.\ngh-105375\n: Fix bugs in\n_elementtree\nwhere exceptions could be\noverwritten.\ngh-105375\n: Fix bugs in\nzoneinfo\nwhere exceptions could be\noverwritten.\ngh-105375\n: Fix bugs in\nerrno\nwhere exceptions could be overwritten.\ngh-105566\n: Deprecate creating a\ntyping.NamedTuple\nclass using\nkeyword arguments to denote the fields (\nNT\n=\nNamedTuple(\"NT\",\nx=int,\ny=str)\n). This will be disallowed in Python 3.15. Use the class-based\nsyntax or the functional syntax instead.\nTwo methods of creating\nNamedTuple\nclasses with 0 fields using the\nfunctional syntax are also deprecated, and will be disallowed in Python\n3.15:\nNT\n=\nNamedTuple(\"NT\")\nand\nNT\n=\nNamedTuple(\"NT\",\nNone)\n. To\ncreate a\nNamedTuple\nclass with 0 fields, either use\nclass\nNT(NamedTuple):\npass\nor\nNT\n=\nNamedTuple(\"NT\",\n[])\n.\ngh-105545\n: Remove deprecated in 3.11\nwebbrowser.MacOSXOSAScript._name\nattribute.\ngh-105497\n: Fix flag inversion when alias/mask members exist.\ngh-105509\n:\ntyping.Annotated\nis now implemented as an instance of\ntyping._SpecialForm\nrather than a class. This should have no\nuser-facing impact for users of the\ntyping\nmodule public API.\ngh-105375\n: Fix bugs in\npickle\nwhere exceptions could be\noverwritten.\ngh-70303\n: Emit\nFutureWarning\nfrom\npathlib.Path.glob()\nand\nrglob()\nif the given pattern ends with “\n**\n”. In a\nfuture Python release, patterns with this ending will match both files and\ndirectories. Add a trailing slash to only match directories.\ngh-105375\n: Fix a bug in\nsqlite3\nwhere an exception could be\noverwritten in the\ncollation\ncallback.\ngh-105382\n: Remove\ncafile\n,\ncapath\nand\ncadefault\nparameters of the\nurllib.request.urlopen()\nfunction, deprecated in Python 3.6. Patch\nby Victor Stinner.\ngh-105376\n:\nlogging\n: Remove undocumented and untested\nLogger.warn()\nand\nLoggerAdapter.warn()\nmethods and\nlogging.warn()\nfunction. Deprecated since Python 3.3, they were\naliases to the\nlogging.Logger.warning()\nmethod,\nlogging.LoggerAdapter.warning()\nmethod and\nlogging.warning()\nfunction. Patch by Victor Stinner.\ngh-105332\n: Revert pickling method from by-name back to by-value.\ngh-104554\n: Add RTSPS scheme support in urllib.parse\ngh-105292\n: Add option to\ntraceback.format_exception_only()\nto\nrecurse into the nested exception of a\nBaseExceptionGroup\n.\ngh-105280\n: Fix bug where\nisinstance([],\ncollections.abc.Mapping)\ncould\nevaluate to\nTrue\nif garbage collection happened at the wrong time. The\nbug was caused by changes to the implementation of\ntyping.Protocol\nin Python 3.12.\ngh-80480\n:\narray\n: Add\n'w'\ntypecode that represents\nPy_UCS4\n.\ngh-105239\n: Fix longstanding bug where\nissubclass(object,\ntyping.Protocol)\nwould evaluate to\nTrue\nin some edge cases. Patch by\nAlex Waygood.\ngh-104310\n: In the beta 1 release we added a utility function for extension\nmodule authors, to use when testing their module for support in multiple\ninterpreters or under a per-interpreter GIL.  The name of that function\nhas changed from\nallowing_all_extensions\nto\n_incompatible_extension_module_restrictions\n.  The default for the\n“disable_check” argument has change from\nTrue\nto\nFalse\n, to better\nmatch the new function name.\ngh-105080\n: Fixed inconsistent signature on derived classes for\ninspect.signature()\ngh-105144\n: Fix a recent regression in the\ntyping\nmodule. The\nregression meant that doing\nclass\nFoo(X,\ntyping.Protocol)\n, where\nX\nwas a class that had\nabc.ABCMeta\nas its metaclass, would then\ncause subsequent\nisinstance(1,\nX)\ncalls to erroneously raise\nTypeError\n. Patch by Alex Waygood.\ngh-62948\n: The\nio.IOBase\nfinalizer now logs the\nclose()\nmethod\nerrors with\nsys.unraisablehook\n. Previously, errors were ignored\nsilently by default, and only logged in\nPython Development Mode\nor on\nPython built on debug mode\n.  Patch\nby Victor Stinner.\ngh-105096\n:\nwave\n: Deprecate the\ngetmark()\n,\nsetmark()\nand\ngetmarkers()\nmethods of the\nwave.Wave_read\nand\nwave.Wave_write\nclasses. They will be removed in Python 3.15.\nPatch by Victor Stinner.\ngh-104992\n: Remove the untested and undocumented\nunittest.TestProgram.usageExit()\nmethod, deprecated in Python 3.11.\nPatch by Hugo van Kemenade.\ngh-104996\n: Improve performance of\npathlib.PurePath\ninitialisation\nby deferring joining of paths when multiple arguments are given.\ngh-101588\n: Deprecate undocumented copy/deepcopy/pickle support for\nitertools.\ngh-103631\n: Fix\npathlib.PurePosixPath(pathlib.PureWindowsPath(...))\nnot\nconverting path separators to restore 3.11 compatible behavior.\ngh-104947\n: Make comparisons between\npathlib.PureWindowsPath\nobjects consistent across Windows and Posix to match 3.11 behavior.\ngh-104773\n:\nPEP 594\n: Remove the\naudioop\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104773\n:\nPEP 594\n: Remove the\naifc\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104773\n:\nPEP 594\n: Remove the\nuu\nmodule, deprecated in Python\n3.11. Patch by Victor Stinner.\ngh-104935\n: Fix bugs with the interaction between\ntyping.runtime_checkable()\nand\ntyping.Generic\nthat were\nintroduced by the\nPEP 695\nimplementation. Patch by Jelle Zijlstra.\ngh-104773\n:\nPEP 594\n: Remove the\ncrypt\nmodule and its private\n_crypt\nextension, deprecated in Python 3.11. Patch by Victor\nStinner.\ngh-104773\n:\nPEP 594\n: Remove the\nnis\nmodule, deprecated in Python\n3.11. Patch by Victor Stinner.\ngh-104898\n: Add missing\n__slots__\nto\nos.PathLike\n.\ngh-104773\n:\nPEP 594\n: Remove the\nxdrlib\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104773\n:\nPEP 594\n: Remove the\nnntplib\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104886\n: Remove the undocumented\nconfigparser.LegacyInterpolation\nclass, deprecated in the\ndocstring since Python 3.2, and with a deprecation warning since Python\n3.11. Patch by Hugo van Kemenade.\ngh-104786\n: Remove kwargs-based\ntyping.TypedDict\ncreation\ngh-104876\n: Remove the\nturtle.RawTurtle.settiltangle()\nmethod,\ndeprecated in docs since Python 3.1 and with a deprecation warning since\nPython 3.11. Patch by Hugo van Kemenade.\ngh-104773\n:\nPEP 594\n: Removed the\nmsilib\npackage, deprecated in\nPython 3.11.\ngh-104773\n:\nPEP 594\n: Remove the\nspwd\nmodule, deprecated in\nPython 3.11: the\npython-pam\nproject can be used instead. Patch by\nVictor Stinner.\ngh-75552\n: Removed the\ntkinter.tix\nmodule, deprecated since Python 3.6.\ngh-104773\n:\nPEP 594\n: Remove the\nchunk\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104773\n:\nPEP 594\n: Remove the\nmailcap\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104773\n:\nPEP 594\n: Remove the\nsunau\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104780\n:\nPEP 594\n: Remove the\nossaudiodev\nmodule, deprecated\nin Python 3.11. Patch Victor Stinner.\ngh-104773\n:\nPEP 594\n: Remove the\npipes\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104873\n: Add\ntyping.get_protocol_members()\nto return the set of\nmembers defining a\ntyping.Protocol\n.  Add\ntyping.is_protocol()\nto check whether a class is a\ntyping.Protocol\n. Patch by Jelle Zijlstra.\ngh-104874\n: Document the\n__name__\nand\n__supertype__\nattributes of\ntyping.NewType\n. Patch by Jelle Zijlstra.\ngh-104835\n: Removed the following\nunittest\nfunctions, deprecated in\nPython 3.11:\nunittest.findTestCases()\nunittest.makeSuite()\nunittest.getTestCaseNames()\nUse\nTestLoader\nmethods instead:\nunittest.TestLoader.loadTestsFromModule()\nunittest.TestLoader.loadTestsFromTestCase()\nunittest.TestLoader.getTestCaseNames()\nPatch by Hugo van Kemenade.\ngh-104804\n: Remove the untested and undocumented\nwebbrowser\nMacOSX\nclass, deprecated in Python 3.11. Patch by Hugo van\nKemenade.\ngh-83863\n: Support for using\npathlib.Path\nobjects as context\nmanagers has been removed. Before Python 3.9, exiting the context manager\nmarked a path as “closed”, which caused some (but not all!) methods to\nraise when called. Since Python 3.9, using a path as a context manager\ndoes nothing.\ngh-104799\n: Adjust the location of the (see\nPEP 695\n)\ntype_params\nfield on\nast.ClassDef\n,\nast.AsyncFunctionDef\n, and\nast.FunctionDef\nto better preserve backward compatibility. Patch\nby Jelle Zijlstra\ngh-104797\n: Allow\ntyping.Protocol\nclasses to inherit from\ncollections.abc.Buffer\n. Patch by Jelle Zijlstra.\ngh-104783\n: Remove\nlocale.resetlocale()\nfunction deprecated in Python\n3.11. Patch by Victor Stinner.\ngh-104780\n: Remove the\n2to3\nprogram and the\nlib2to3\nmodule,\ndeprecated in Python 3.11. Patch by Victor Stinner.\ngh-104773\n:\nPEP 594\n: Remove the\ntelnetlib\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104773\n:\nPEP 594\n: Remove the\nimghdr\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104773\n:\nPEP 594\n: Remove the\ncgi\nand\ncgitb\nmodules,\ndeprecated in Python 3.11. Patch by Victor Stinner.\ngh-104773\n:\nPEP 594\n: Remove the\nsndhdr\nmodule, deprecated in\nPython 3.11. Patch by Victor Stinner.\ngh-104372\n: On Linux where\nsubprocess\ncan use the\nvfork()\nsyscall for faster spawning, prevent the parent process from blocking\nother threads by dropping the GIL while it waits for the vfork’ed child\nprocess\nexec()\noutcome. This prevents spawning a binary from a slow\nfilesystem from blocking the rest of the application.\ngh-99108\n: We now release the GIL around built-in\nhashlib\ncomputations of reasonable size for the SHA families and MD5 hash\nfunctions, matching what our OpenSSL backed hash computations already\ndoes.\ngh-102613\n: Improve performance of\npathlib.Path.glob()\nwhen expanding\na pattern with a non-terminal “\n**\n” component by filtering walked paths\nthrough a regular expression, rather than calling\nos.scandir()\nmore\nthan once on each directory.\ngh-104399\n: Prepare the\n_tkinter\nmodule for building with Tcl 9.0 and\nfuture libtommath by replacing usage of deprecated functions\nmp_to_unsigned_bin_n()\nand\nmp_unsigned_bin_size()\nwhen\nnecessary.\ngh-102676\n: Add fields\nstart_offset\n,\ncache_offset\n,\nend_offset\n,\nbaseopname\n,\nbaseopcode\n,\njump_target\nand\noparg\nto\ndis.Instruction\n.\ngh-103558\n: Fixed\nparent\nargument validation mechanism of\nargparse\n. Improved test coverage.\ngh-103464\n: Provide helpful usage messages when parsing incorrect\npdb\ncommands.\ngh-103384\n: Generalize the regex pattern\nBaseConfigurator.INDEX_PATTERN\nto allow spaces and non-alphanumeric characters in keys.\ngh-103124\n: Added multiline statement support for\npdb\ngh-101162\n: Forbid using\nbuiltins.issubclass()\nwith\ntypes.GenericAlias\nas the first argument.\ngh-103200\n: Fix cache repopulation semantics of\nzipimport.invalidate_caches(). The cache is now repopulated upon\nretrieving files with an invalid cache, not when the cache is invalidated.\ngh-100061\n: Fix a bug that causes wrong matches for regular expressions\nwith possessive qualifier.\ngh-77609\n: Add\nfollow_symlinks\nargument to\npathlib.Path.glob()\nand\nrglob()\n, defaulting to false.\ngh-102541\n: Hide traceback in\nhelp()\nprompt, when import failed.\ngh-102120\n: Added a stream mode to\ntarfile\nthat allows for reading\narchives without caching info about the inner files.\ngh-102029\n: Deprecate passing any arguments to\nthreading.RLock()\n.\ngh-88233\n: Refactored\nzipfile._strip_extra\nto use higher level\nabstractions for extras instead of a heavy-state loop.\ngh-102024\n: Reduce calls of\n_idle_semaphore.release()\nin\nconcurrent.futures.thread._worker()\n.\ngh-73435\n: Add support for recursive wildcards in\npathlib.PurePath.match()\n.\ngh-84867\n:\nunittest.TestLoader\nno longer loads test cases from\nexact\nunittest.TestCase\nand\nunittest.FunctionTestCase\nclasses.\ngh-99203\n: Restore following CPython <= 3.10.5 behavior of\nshutil.make_archive()\n: do not create an empty archive if\nroot_dir\nis not a directory, and, in that case, raise\nFileNotFoundError\nor\nNotADirectoryError\nregardless of\nformat\nchoice. Beyond the brought-back behavior, the function may now\nalso raise these exceptions in\ndry_run\nmode.\ngh-80480\n: Emit\nDeprecationWarning\nfor\narray\n’s\n'u'\ntype\ncode, deprecated in docs since Python 3.3.\ngh-94924\n:\nunittest.mock.create_autospec()\nnow properly returns\ncoroutine functions compatible with\ninspect.iscoroutinefunction()\ngh-94777\n: Fix hanging\nmultiprocessing\nProcessPoolExecutor\nwhen\na child process crashes while data is being written in the call queue.\ngh-92871\n: Remove the\ntyping.io\nand\ntyping.re\nnamespaces,\ndeprecated since Python 3.8. All items are still available from the main\ntyping\nmodule.\nbpo-43633\n: Improve the textual representation of IPv4-mapped IPv6\naddresses (\nRFC 4291\nSections 2.2, 2.5.5.2) in\nipaddress\n. Patch\nby Oleksandr Pavliuk.\nbpo-44850\n: Improve performance of\noperator.methodcaller()\nusing the\nPEP 590\nvectorcall\nconvention. Patch by Anthony Lee and Pieter\nEendebak.\nbpo-44185\n:\nunittest.mock.mock_open()\nwill call the\nclose()\nmethod of the file handle mock when it is exiting from the context\nmanager. Patch by Samet Yaslan.\nbpo-40988\n: Improve performance of\nfunctools.singledispatchmethod\nby caching the generated dispatch wrapper. Optimization suggested by\nfrederico. Patch by @mental32, Alex Waygood and Pieter Eendebak.\nbpo-41768\n:\nunittest.mock\nspeccing no longer calls class properties.\nPatch by Melanie Witt.\nbpo-18319\n: Ensure\ngettext(msg)\nretrieve translations even if a plural\nform exists. In other words:\ngettext(msg)\n==\nngettext(msg,\n'',\n1)\n.\nbpo-17013\n: Add\nThreadingMock\nto\nunittest.mock\nthat can be used\nto create Mock objects that can wait until they are called. Patch by\nKarthikeyan Singaravelan and Mario Corchero.\nDocumentation\n¶\ngh-109209\n: The minimum Sphinx version required for the documentation is\nnow 4.2.\ngh-108826\n:\ndis\nmodule command-line interface is now mentioned in\ndocumentation.\ngh-107305\n: Add documentation for\nPyInterpreterConfig\nand\nPy_NewInterpreterFromConfig()\n.  Also clarify some of the nearby\ndocs relative to per-interpreter GIL.\ngh-107008\n: Document the\ncurses\nmodule variables\nLINES\nand\nCOLS\n.\ngh-106948\n: Add a number of standard external names to\nnitpick_ignore\n.\ngh-106232\n: Make timeit doc command lines compatible with Windows by using\ndouble quotes for arguments.  This works on linux and macOS also.\ngh-105172\n: Fixed\nfunctools.lru_cache()\ndocstring accounting for\ntyped\nargument’s different handling of str and int. Patch by Bar\nHarel.\ngh-105052\n: Update\ntimeit\ndoc to specify that time in seconds is just\nthe default.\ngh-89455\n: Add missing documentation for the\nmax_group_depth\nand\nmax_group_width\nparameters and the\nexceptions\nattribute of the\ntraceback.TracebackException\nclass.\ngh-89412\n: Add missing documentation for the\nend_lineno\nand\nend_offset\nattributes of the\ntraceback.TracebackException\nclass.\ngh-104943\n: Remove mentions of old Python versions in\ntyping.NamedTuple\n.\ngh-54738\n: Add documentation on how to localize the\nargparse\nmodule.\ngh-102823\n: Document the return type of\nx\n//\ny\nwhen\nx\nand\ny\nhave type\nfloat\n.\ngh-102759\n: Align function signature for\nfunctools.reduce\nin\ndocumentation and docstring with the C implementation.\nTests\n¶\ngh-110647\n: Fix test_stress_modifying_handlers() of test_signal. Patch by\nVictor Stinner.\ngh-103053\n: Fix test_tools.test_freeze on FreeBSD: run “make distclean”\ninstead of “make clean” in the copied source directory to remove also the\n“python” program. Patch by Victor Stinner.\ngh-110167\n: Fix a deadlock in test_socket when server fails with a timeout\nbut the client is still running in its thread. Don’t hold a lock to call\ncleanup functions in doCleanups(). One of the cleanup function waits until\nthe client completes, whereas the client could deadlock if it called\naddCleanup() in such situation. Patch by Victor Stinner.\ngh-110388\n: Add tests for\ntty\n.\ngh-81002\n: Add tests for\ntermios\n.\ngh-110367\n: regrtest: When using worker processes (-jN) with –verbose3\noption, regrtest can now display the worker output even if a worker\nprocess does crash. Previously, sys.stdout and sys.stderr were replaced\nand so the worker output was lost on a crash. Patch by Victor Stinner.\ngh-110267\n: Add tests for pickling and copying PyStructSequence objects.\nPatched by Xuehai Pan.\ngh-110171\n:\nlibregrtest\nnow always sets and shows\nrandom.seed\n, so\ntests are more reproducible. Use\n--randseed\nflag to pass the explicit\nrandom seed for tests.\ngh-110152\n: Remove\nTools/scripts/run_tests.py\nand\nmake\nhostrunnertest\n. Just run\n./python\n-m\ntest\n--slow-ci\n,\nmake\nbuildbottest\nor\nmake\ntest\ninstead. Python test runner (regrtest) now\nhandles cross-compilation and HOSTRUNNER. It also adds options to Python\nsuch fast\n-u\n-E\n-W\ndefault\n-bb\nwhen\n--fast-ci\nor\n--slow-ci\noption is used. Patch by Victor Stinner.\ngh-110031\n: Skip test_threading tests using thread+fork if Python is built\nwith Address Sanitizer (ASAN). Patch by Victor Stinner.\ngh-110088\n: Fix test_asyncio timeouts: don’t measure the maximum duration,\na test should not measure a CI performance. Only measure the minimum\nduration when a task has a timeout or delay. Add\nCLOCK_RES\nto\ntest_asyncio.utils\n. Patch by Victor Stinner.\ngh-109974\n: Fix race conditions in test_threading lock tests. Wait until a\ncondition is met rather than using\ntime.sleep()\nwith a hardcoded\nnumber of seconds. Patch by Victor Stinner.\ngh-110033\n: Fix\ntest_interprocess_signal()\nof\ntest_signal\n. Make\nsure that the\nsubprocess.Popen\nobject is deleted before the test\nraising an exception in a signal handler. Otherwise,\nPopen.__del__()\ncan get the exception which is logged as\nException\nignored\nin:\n...\nand\nthe test fails. Patch by Victor Stinner.\ngh-109594\n: Fix test_timeout() of test_concurrent_futures.test_wait. Remove\nthe future which may or may not complete depending if it takes longer than\nthe timeout or not. Keep the second future which does not complete before\nwait() timeout. Patch by Victor Stinner.\ngh-109972\n: Split test_gdb.py file into a test_gdb package made of multiple\ntests, so tests can now be run in parallel. Patch by Victor Stinner.\ngh-109566\n: regrtest: When\n--fast-ci\nor\n--slow-ci\noption is used,\nregrtest now replaces the current process with a new process to add\n-u\n-W\ndefault\n-bb\n-E\noptions to Python. Patch by Victor Stinner.\ngh-109748\n: Fix\ntest_zippath_from_non_installed_posix()\nof test_venv:\ndon’t copy\n__pycache__/\nsub-directories, because they can be modified\nby other Python tests running in parallel. Patch by Victor Stinner.\ngh-109739\n: regrtest: Fix reference leak check on Windows. Disable the load\ntracker on Windows in the reference leak check mode (-R option). Patch by\nVictor Stinner.\ngh-109276\n: regrtest: When a test fails with “env changed” and the –rerun\noption is used, the test is now re-run in verbose mode in a fresh process.\nPatch by Victor Stinner.\ngh-103053\n: Skip test_freeze_simple_script() of test_tools.test_freeze if\nPython is built with\n./configure\n--enable-optimizations\n, which means\nwith Profile Guided Optimization (PGO): it just makes the test too slow.\nThe freeze tool is tested by many other CIs with other (faster) compiler\nflags. Patch by Victor Stinner.\ngh-109580\n: Skip\ntest_perf_profiler\nif Python is built with ASAN, MSAN\nor UBSAN sanitizer. Python does crash randomly in this test on such build.\nPatch by Victor Stinner.\ngh-109566\n: regrtest: Add\n--fast-ci\nand\n--slow-ci\noptions.\n--fast-ci\nuses a default timeout of 10 minutes and\n-u\nall,-cpu\n(skip slowest tests).\n--slow-ci\nuses a default timeout of 20 minutes\nand\n-u\nall\n(run all tests). Patch by Victor Stinner.\ngh-109425\n: libregrtest now decodes stdout of test worker processes with\nthe “backslashreplace” error handler to log corrupted stdout, instead of\nfailing with an error and not logging the stdout. Patch by Victor Stinner.\ngh-109396\n: Fix\ntest_socket.test_hmac_sha1()\nin FIPS mode. Use a longer\nkey: FIPS mode requires at least of at least 112 bits. The previous key\nwas only 32 bits. Patch by Victor Stinner.\ngh-104736\n: Fix test_gdb on Python built with LLVM clang 16 on Linux\nppc64le (ex: Fedora 38). Search patterns in gdb “bt” command output to\ndetect when gdb fails to retrieve the traceback. For example, skip a test\nif\nBacktrace\nstopped:\nframe\ndid\nnot\nsave\nthe\nPC\nis found. Patch by\nVictor Stinner.\ngh-109276\n: libregrtest now calls\nrandom.seed()\nbefore running each\ntest file when\n-r/--randomize\ncommand line option is used. Moreover,\nit’s also called in worker processes.  It should help to make tests more\ndeterministic. Previously, it was only called once in the main process\nbefore running all test files and it was not called in worker processes.\nPatch by Victor Stinner.\ngh-109276\n: libregrtest now uses a separated file descriptor to write test\nresult as JSON. Previously, if a test wrote debug messages late around the\nJSON, the main test process failed to parse JSON. Patch by Victor Stinner.\ngh-108996\n: Fix and enable\ntest_msvcrt\n.\ngh-109237\n: Fix\ntest_site.test_underpth_basic()\nwhen the working\ndirectory contains at least one non-ASCII character: encode the\n._pth\nfile to UTF-8 and enable the UTF-8 Mode to use UTF-8 for the child process\nstdout. Patch by Victor Stinner.\ngh-109230\n: Fix\ntest_pyexpat.test_exception()\n: it can now be run from a\ndirectory different than Python source code directory. Before, the test\nfailed in this case.  Skip the test if Modules/pyexpat.c source is not\navailable. Skip also the test on Python implementations other than\nCPython. Patch by Victor Stinner.\ngh-108996\n: Add tests for\nmsvcrt\n.\ngh-109015\n: Fix test_asyncio, test_imaplib and test_socket tests on FreeBSD\nif the TCP blackhole is enabled (\nsysctl\nnet.inet.tcp.blackhole\n). Skip\nthe few tests which failed with\nETIMEDOUT\nwhich such non standard\nconfiguration. Currently, the\nFreeBSD GCP image enables TCP and UDP\nblackhole\n(\nsysctl\nnet.inet.tcp.blackhole=2\nand\nsysctl\nnet.inet.udp.blackhole=1\n).\nPatch by Victor Stinner.\ngh-91960\n: Skip\ntest_gdb\nif gdb is unable to retrieve Python frame\nobjects: if a frame is\n<optimized\nout>\n. When Python is built with\n“clang -Og”, gdb can fail to retrieve the\nframe\nparameter of\n_PyEval_EvalFrameDefault()\n. In this case, tests like\npy_bt()\nare\nlikely to fail. Without getting access to Python frames,\npython-gdb.py\nis mostly clueless on retrieving the Python traceback. Moreover,\ntest_gdb\nis no longer skipped on macOS if Python is built with Clang.\nPatch by Victor Stinner.\ngh-108962\n: Skip\ntest_tempfile.test_flags()\nif\nchflags()\nfails with\n“OSError: [Errno 45] Operation not supported” (ex: on FreeBSD 13). Patch\nby Victor Stinner.\ngh-91960\n: FreeBSD 13.2 CI coverage for pull requests is now provided by\nCirrus-CI (a hosted CI service that supports Linux, macOS, Windows, and\nFreeBSD).\ngh-89392\n: Removed support of\ntest_main()\nfunction in tests. They now\nalways use normal unittest test runner.\ngh-108851\n: Fix\ntest_tomllib\nrecursion tests for WASI buildbots: reduce\nthe recursion limit and compute the maximum nested array/dict depending on\nthe current available recursion limit. Patch by Victor Stinner.\ngh-108851\n: Add\nget_recursion_available()\nand\nget_recursion_depth()\nfunctions to the\ntest.support\nmodule. Patch by Victor Stinner.\ngh-108834\n: Add\n--fail-rerun\noption\noption to regrtest: if a test\nfailed when then passed when rerun in verbose mode, exit the process with\nexit code 2 (error), instead of exit code 0 (success). Patch by Victor\nStinner.\ngh-108834\n: Rename regrtest\n--verbose2\noption (\n-w\n) to\n--rerun\n.\nKeep\n--verbose2\nas a deprecated alias. Patch by Victor Stinner.\ngh-108834\n: When regrtest reruns failed tests in verbose mode (\n./python\n-m\ntest\n--rerun\n), tests are now rerun in fresh worker processes rather\nthan being executed in the main process. If a test does crash or is killed\nby a timeout, the main process can detect and handle the killed worker\nprocess. Tests are rerun in parallel if the\n-jN\noption is used to run\ntests in parallel. Patch by Victor Stinner.\ngh-108822\n:\nregrtest\nnow computes statistics on all tests: successes,\nfailures and skipped.\ntest_netrc\n,\ntest_pep646_syntax\nand\ntest_xml_etree\nnow return results in their\ntest_main()\nfunction.\nPatch by Victor Stinner and Alex Waygood.\ngh-108794\n: The\ndoctest.DocTestRunner.run()\nmethod now counts the\nnumber of skipped tests. Add\ndoctest.DocTestRunner.skips\nand\ndoctest.TestResults.skipped\nattributes. Patch by Victor Stinner.\ngh-108388\n: Convert test_concurrent_futures to a package of 7 sub-tests.\nPatch by Victor Stinner.\ngh-108388\n: Split test_multiprocessing_fork,\ntest_multiprocessing_forkserver and test_multiprocessing_spawn into test\npackages. Each package is made of 4 sub-tests: processes, threads, manager\nand misc. It allows running more tests in parallel and so reduce the total\ntest duration. Patch by Victor Stinner.\ngh-105776\n: Fix test_cppext when the C compiler command\n-std=c11\noption: remove\n-std=\noptions from the compiler command. Patch by\nVictor Stinner.\ngh-107652\n: Set up CIFuzz to run fuzz targets in GitHub Actions. Patch by\nIllia Volochii.\ngh-107237\n:\ntest_logging\n: Fix\ntest_udp_reconnection()\nby increasing\nthe timeout from 100 ms to 5 minutes (LONG_TIMEOUT). Patch by Victor\nStinner.\ngh-107178\n: Add the C API test for functions in the Mapping Protocol, the\nSequence Protocol and some functions in the Object Protocol.\ngh-106714\n: test_capi: Fix test_no_FatalError_infinite_loop() to no longer\nwrite a coredump, by using test.support.SuppressCrashReport. Patch by\nVictor Stinner.\ngh-104090\n: Avoid creating a reference to the test object in\ncollectedDurations()\n.\ngh-106752\n: Moved tests for\nzipfile.Path\ninto\nLib/test/test_zipfile/_path\n. Made\nzipfile._path\na package.\ngh-106690\n: Add .coveragerc to cpython repository for use with coverage\npackage.\ngh-101634\n: When running the Python test suite with\n-jN\noption, if a\nworker stdout cannot be decoded from the locale encoding report a failed\ntestn so the exitcode is non-zero. Patch by Victor Stinner.\ngh-105084\n: When the Python build is configured\n--with-wheel-pkg-dir\n,\ntests requiring the\nsetuptools\nand\nwheel\nwheels will search for\nthe wheels in\nWHEEL_PKG_DIR\n.\ngh-81005\n: String tests are modified to reflect that\nstr\nand\nunicode\nare merged in Python 3. Patch by Daniel Fortunov.\ngh-103186\n: Suppress and assert expected RuntimeWarnings in\ntest_sys_settrace.py\ngh-69714\n: Add additional tests to\ncalendar\nto achieve full test\ncoverage.\nBuild\n¶\ngh-103053\n: “make check-clean-src” now also checks if the “python” program\nis found in the source directory: fail with an error if it does exist.\nPatch by Victor Stinner.\ngh-109191\n: Fix compile error when building with recent versions of\nlibedit.\ngh-110276\n: No longer ignore\nPROFILE_TASK\nfailure silently:\ncommand used by Profile Guided Optimization (PGO). Patch by Victor\nStinner.\ngh-109566\n: Remove\nmake\ntestall\ntarget: use\nmake\nbuildbottest\ninstead. Patch by Victor Stinner.\ngh-109740\n: The experimental\n--disable-gil\nconfigure flag now includes\n“t” (for “threaded”) in extension ABI tags.\ngh-109054\n: Fix building the\n_testcapi\nextension on Linux AArch64 which\nrequires linking to libatomic when\n<cpython/pyatomic.h>\nis used: the\n_Py_atomic_or_uint64()\nfunction requires libatomic\n__atomic_fetch_or_8()\non this platform. The configure script now\nchecks if linking to libatomic is needed and generates a new LIBATOMIC\nvariable used to build the _testcapi extension. Patch by Victor Stinner.\ngh-63760\n: Fix Solaris build: no longer redefine the\ngethostname()\nfunction. Solaris defines the function since 2005. Patch by Victor\nStinner, original patch by Jakub Kulík.\ngh-108740\n: Fix a race condition in\nmake\nregen-all\n. The\ndeepfreeze.c\nsource and files generated by Argument Clinic are now\ngenerated or updated before generating “global objects”. Previously, some\nidentifiers may miss depending on the order in which these files were\ngenerated. Patch by Victor Stinner.\ngh-108634\n: Python built with\nconfigure\n--with-trace-refs\n(tracing references) is now ABI compatible with Python release build and\ndebug build\n. Patch by Victor Stinner.\ngh-85283\n: The\n_stat\nC extension is now built with the\nlimited C\nAPI\n. Patch by Victor Stinner.\ngh-108447\n: Fix x86_64 GNU/Hurd build\ngh-107814\n: When calling\nfind_python.bat\nwith\n-q\nit did not\nproperly silence the output of nuget. That is now fixed.\ngh-105481\n: Remove the make target\nregen-opcode-targets\n, merge its work\ninto\nregen-opcode\nwhich repeats most of the calculation. This\nsimplifies the code for the build and reduces code duplication.\ngh-106881\n: Check for\nlinux/limits.h\nbefore including it in\nModules/posixmodule.c\n.\ngh-95855\n: Refactor platform triplet detection code and add detection for\nMIPS soft float and musl libc.\ngh-106962\n: Detect MPI compilers in\nconfigure\n.\ngh-106118\n: Fix compilation for platforms without\nO_CLOEXEC\n. The\nissue was introduced with Python 3.12b1 in\ngh-103295\n. Patch by Erlend\nAasland.\ngh-105875\n: SQLite 3.15.2 or newer is required to build the\nsqlite3\nextension module. Patch by Erlend Aasland.\ngh-90005\n: Fix a regression in\nconfigure\nwhere we could end up\nunintentionally linking with\nlibbsd\n.\ngh-102404\n: Document how to perform a WASI build on Linux. Also add\nTools/wasm/build_wasi.sh as a reference implementation of the docs.\ngh-89886\n: Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate\n!configure\n.\ngh-104692\n: Include\ncommoninstall\nas a prerequisite for\nbininstall\nThis ensures that\ncommoninstall\nis completed before\nbininstall\nis\nstarted when parallel builds are used (\nmake\n-j\ninstall\n), and so the\npython3\nsymlink is only installed after all standard library modules\nare installed.\ngh-101538\n: Add experimental wasi-threads support. Patch by Takashi\nYamamoto.\nWindows\n¶\ngh-110437\n: Allows overriding the source of VC redistributables so that\nreleases can be guaranteed to never downgrade between updates.\ngh-109286\n: Update Windows installer to use SQLite 3.43.1.\ngh-82367\n:\nos.path.realpath()\nnow resolves MS-DOS style file names\neven if the file is not accessible. Patch by Moonsik Park.\ngh-109991\n: Update Windows build to use OpenSSL 3.0.11.\ngh-106242\n: Fixes\nrealpath()\nto behave consistently when\npassed a path containing an embedded null character on Windows. In strict\nmode, it now raises\nOSError\ninstead of the unexpected\nValueError\n, and in non-strict mode will make the path absolute.\ngh-83180\n: Changes the\nPython Launcher for Windows\nto prefer an active virtual\nenvironment when the launched script has a shebang line using a Unix-like\nvirtual command, even if the command requests a specific version of\nPython.\ngh-106844\n: Fix integer overflow and truncating by the null character in\n_winapi.LCMapStringEx()\nwhich affects\nntpath.normcase()\n.\ngh-105436\n: Ensure that an empty environment block is terminated by two\nnull characters, as is required by Windows.\ngh-105146\n: Updated the links at the end of the installer to point to\nDiscourse rather than the mailing lists.\ngh-103646\n: When installed from the Microsoft Store,\npip\nno longer\ndefaults to per-user installs. However, as the install directory is\nunwritable, it should automatically decide to do a per-user install\nanyway. This should resolve issues when\npip\nis passed an option that\nconflicts with\n--user\n.\ngh-88745\n: Improve performance of\nshutil.copy2()\nby using the\noperating system’s\nCopyFile2\nfunction. This may result in subtle\nchanges to metadata copied along with some files, bringing them in line\nwith normal OS behavior.\ngh-104820\n: Fixes\nstat()\nand related functions on file systems\nthat do not support file ID requests. This includes FAT32 and exFAT.\ngh-104803\n: Add\nos.path.isdevdrive()\nto detect whether a path is on a\nWindows Dev Drive. Returns\nFalse\non platforms that do not support Dev\nDrive, and is absent on non-Windows platforms.\nmacOS\n¶\ngh-109286\n: Update macOS installer to use SQLite 3.43.1.\ngh-109991\n: Update macOS installer to use OpenSSL 3.0.11.\ngh-99079\n: Update macOS installer to use OpenSSL 3.0.9.\nIDLE\n¶\ngh-104719\n: Remove IDLE’s modification of tokenize.tabsize and test other\nuses of tokenize data and methods.\nTools/Demos\n¶\ngh-109991\n: Update GitHub CI workflows to use OpenSSL 3.0.11 and\nmultissltests to use 1.1.1w, 3.0.11, and 3.1.3.\ngh-108494\n:\nArgument Clinic\nnow has a\npartial support of the\nLimited API\n: see\ndocumentation in the Python Developer’s Guide\nPatch by Victor Stinner.\ngh-107704\n: It is now possible to deprecate passing keyword arguments for\nkeyword-or-positional parameters with Argument Clinic, using the new\n/\n[from\nX.Y]\nsyntax. (To be read as\n“positional-only from Python version\nX.Y”\n.) See\ndocumentation in the Python Developer’s Guide\nfor more information.\ngh-107880\n: Argument Clinic can now clone\n__init__()\nand\n__new__()\nmethods.\ngh-104683\n: Add\n--exclude\noption to Argument Clinic CLI.\ngh-95065\n: Argument Clinic now supports overriding automatically generated\nsignature by using directive\n@text_signature\n. See\ndocumentation in\nthe Python Developer’s Guide\ngh-107609\n: Fix duplicate module check in Argument Clinic. Previously, a\nduplicate definition would incorrectly be silently accepted. Patch by\nErlend E. Aasland.\ngh-107467\n: The Argument Clinic command-line tool now prints to stderr\ninstead of stdout on failure.\ngh-106970\n: Fix bugs in the Argument Clinic\ndestination\n<name>\nclear\ncommand; the destination buffers would never be cleared, and the\ndestination\ndirective parser would simply continue to the fault\nhandler after processing the command. Patch by Erlend E. Aasland.\ngh-106706\n: Change bytecode syntax for families to remove redundant name\nmatching pseudo syntax.\ngh-106359\n: Argument Clinic now explicitly forbids “kwarg splats” in\nfunction calls used as annotations.\ngh-103186\n:\nfreeze\nnow fetches\nCONFIG_ARGS\nfrom the original\nCPython instance the Makefile uses to call utility scripts. Patch by\nIjtaba Hussain.\ngh-95065\n: It is now possible to deprecate passing parameters positionally\nwith Argument Clinic, using the new\n*\n[from\nX.Y]\nsyntax. (To be read\nas\n“keyword-only from Python version X.Y”\n.) See\ndocumentation in the\nPython Developer’s Guide\nfor more information. Patch by Erlend E. Aasland with help from Alex\nWaygood, Nikita Sobolev, and Serhiy Storchaka.\nC API\n¶\ngh-85283\n: If the\nPy_LIMITED_API\nmacro is defined,\nPy_BUILD_CORE\n,\nPy_BUILD_CORE_BUILTIN\nand\nPy_BUILD_CORE_MODULE\nmacros are now undefined by\n<Python.h>\n. Patch by Victor Stinner.\ngh-110289\n: Add\nPyUnicode_EqualToUTF8AndSize()\nand\nPyUnicode_EqualToUTF8()\nfunctions.\ngh-110235\n: Raise\nTypeError\nfor duplicate/unknown fields in\nPyStructSequence\nconstructor. Patched by Xuehai Pan.\ngh-110014\n: Remove undocumented\nPY_TIMEOUT_MAX\nconstant from the\nlimited C API. Patch by Victor Stinner.\ngh-109521\n:\nPyImport_GetImporter()\nnow sets RuntimeError if it\nfails to get\nsys.path_hooks\nor\nsys.path_importer_cache\nor\nthey are not list and dict correspondingly. Previously it could return\nNULL without setting error in obscure cases, crash or raise SystemError if\nthese attributes have wrong type.\ngh-108724\n: Add\nPyMutex\ninternal-only lightweight locking API.\ngh-85283\n: Add\nPySys_AuditTuple()\nfunction: similar to\nPySys_Audit()\n, but pass event arguments as a Python\ntuple\nobject.  Patch by Victor Stinner.\ngh-108867\n: Add\nPyThreadState_GetUnchecked()\nfunction: similar to\nPyThreadState_Get()\n, but don’t kill the process with a fatal\nerror if it is NULL. The caller is responsible to check if the result is\nNULL. Previously, the function was private and known as\n_PyThreadState_UncheckedGet()\n. Patch by Victor Stinner.\ngh-108765\n:\nPython.h\nno longer includes the\n<ctype.h>\nstandard\nheader file. If needed, it should now be included explicitly. For example,\nit provides\nisalpha()\nand\ntolower()\nfunctions which are locale\ndependent. Python provides locale independent functions, like\nPy_ISALPHA()\nand\nPy_TOLOWER()\n. Patch by Victor Stinner.\ngh-108765\n:\nPython.h\nno longer includes the\n<unistd.h>\nstandard\nheader file. If needed, it should now be included explicitly. For example,\nit provides the functions:\nclose()\n,\ngetpagesize()\n,\ngetpid()\nand\nsysconf()\n. Patch by Victor Stinner.\ngh-108765\n:\nPython.h\nno longer includes the\n<ieeefp.h>\nstandard\nheader. It was included for the\nfinite()\nfunction which is now\nprovided by the\n<math.h>\nheader. It should now be included explicitly\nif needed. Remove also the\nHAVE_IEEEFP_H\nmacro. Patch by Victor\nStinner.\ngh-108765\n:\nPython.h\nno longer includes these standard header files:\n<time.h>\n,\n<sys/select.h>\nand\n<sys/time.h>\n. If needed, they\nshould now be included explicitly. For example,\n<time.h>\nprovides the\nclock()\nand\ngmtime()\nfunctions,\n<sys/select.h>\nprovides the\nselect()\nfunction, and\n<sys/time.h>\nprovides the\nfutimes()\n,\ngettimeofday()\nand\nsetitimer()\nfunctions. Patch by Victor Stinner.\ngh-108511\n: Add functions\nPyObject_HasAttrWithError()\n,\nPyObject_HasAttrStringWithError()\n,\nPyMapping_HasKeyWithError()\nand\nPyMapping_HasKeyStringWithError()\n.\ngh-107073\n: Add\nPyObject_VisitManagedDict()\nand\nPyObject_ClearManagedDict()\nfunctions which must be called by the\ntraverse and clear functions of a type using\nPy_TPFLAGS_MANAGED_DICT\nflag. Patch by Victor Stinner.\ngh-108634\n: Python built with\nconfigure\n--with-trace-refs\n(tracing references) now supports the\nLimited API\n.\nPatch by Victor Stinner.\ngh-108014\n: Add\nPyLong_AsInt()\nfunction: similar to\nPyLong_AsLong()\n, but store the result in a C\nint\ninstead\nof a C\nlong\n. Previously, it was known as the private function\n_PyLong_AsInt()\n(with an underscore prefix). Patch by Victor\nStinner.\ngh-108314\n: Add\nPyDict_ContainsString()\nfunction: same as\nPyDict_Contains()\n, but\nkey\nis specified as a\nconst\nchar\n*\nUTF-8 encoded bytes string, rather than a\nPyObject\n*\n.\nPatch by Victor Stinner.\ngh-108337\n: Add atomic operations on additional data types in pyatomic.h.\ngh-108014\n: Add\nPy_IsFinalizing()\nfunction: check if the main\nPython interpreter is\nshutting down\n. Patch\nby Victor Stinner.\ngh-107916\n: C API functions\nPyErr_SetFromErrnoWithFilename()\n,\nPyErr_SetExcFromWindowsErrWithFilename()\nand\nPyErr_SetFromWindowsErrWithFilename()\nsave now the error code\nbefore calling\nPyUnicode_DecodeFSDefault()\n.\ngh-107915\n: Such C API functions as\nPyErr_SetString()\n,\nPyErr_Format()\n,\nPyErr_SetFromErrnoWithFilename()\nand many others\nno longer crash or ignore errors if it failed to format the error message\nor decode the filename. Instead, they keep a corresponding error.\ngh-107810\n: Improve\nDeprecationWarning\nfor uses of\nPyType_Spec\nwith metaclasses that have custom\ntp_new\n.\ngh-107249\n: Implement the\nPy_UNUSED\nmacro for Windows MSVC\ncompiler. Patch by Victor Stinner.\ngh-107226\n:\nPyModule_AddObjectRef()\nis now only available in the\nlimited API version 3.10 or later.\ngh-106320\n: Remove private\n_PyUnicode_AsString()\nalias to\nPyUnicode_AsUTF8()\n. It was kept for backward compatibility with\nPython 3.0 - 3.2. The\nPyUnicode_AsUTF8()\nis available since Python\n3.3. The\nPyUnicode_AsUTF8String()\nfunction can be used to keep\ncompatibility with Python 3.2 and older. Patch by Victor Stinner.\ngh-106572\n: Convert\nPyObject_DelAttr()\nand\nPyObject_DelAttrString()\nmacros to functions. Patch by Victor\nStinner.\ngh-106307\n: Add\nPyMapping_GetOptionalItem()\nfunction.\ngh-106521\n: Add\nPyObject_GetOptionalAttr()\nand\nPyObject_GetOptionalAttrString()\nfunctions.\ngh-106320\n: Remove\n_PyInterpreterState_Get()\nalias to\nPyInterpreterState_Get()\nwhich was kept for backward\ncompatibility with Python 3.8. Patch by Victor Stinner.\ngh-106316\n: Remove\ncpython/pytime.h\nheader file: it only contained\nprivate functions. Patch by Victor Stinner.\ngh-106023\n: Remove private\n_PyObject_FastCall()\nfunction: use\nPyObject_Vectorcall()\nwhich is available since Python 3.8\n(\nPEP 590\n). Patch by Victor Stinner.\ngh-106168\n: If Python is built in\ndebug mode\nor\nwith\nassertions\n,\nPyTuple_SET_ITEM()\nand\nPyList_SET_ITEM()\nnow check the index argument with an\nassertion. If the assertion fails, make sure that the size is set before.\nPatch by Victor Stinner.\ngh-106084\n: Remove the old aliases to functions calling functions which\nwere kept for backward compatibility with Python 3.8 provisional API:\n_PyObject_CallMethodNoArgs()\n: use\nPyObject_CallMethodNoArgs()\n_PyObject_CallMethodOneArg()\n: use\nPyObject_CallMethodOneArg()\n_PyObject_CallOneArg()\n: use\nPyObject_CallOneArg()\n_PyObject_FastCallDict()\n: use\nPyObject_VectorcallDict()\n_PyObject_Vectorcall()\n: use\nPyObject_Vectorcall()\n_PyObject_VectorcallMethod()\n: use\nPyObject_VectorcallMethod()\n_PyVectorcall_Function()\n: use\nPyVectorcall_Function()\nJust remove the underscore prefix to update your code. Patch by Victor\nStinner.\ngh-106004\n: Adds\nPyDict_GetItemRef()\nand\nPyDict_GetItemStringRef()\nfunctions: similar to\nPyDict_GetItemWithError()\nbut returning a\nstrong reference\ninstead of a\nborrowed reference\n. Patch by Victor Stinner.\ngh-105927\n: Deprecate the\nPyWeakref_GetObject()\nand\nPyWeakref_GET_OBJECT()\nfunctions: use the new\nPyWeakref_GetRef()\nfunction instead. Patch by Victor Stinner.\ngh-105927\n: Add\nPyWeakref_GetRef()\nfunction: similar to\nPyWeakref_GetObject()\nbut returns a\nstrong reference\n, or\nNULL\nif the referent is no longer live. Patch by Victor Stinner.\ngh-105922\n: Add\nPyImport_AddModuleRef()\n: similar to\nPyImport_AddModule()\n, but return a\nstrong reference\ninstead of a\nborrowed reference\n. Patch by Victor Stinner.\ngh-105227\n: The new\nPyType_GetDict()\nprovides the dictionary for\nthe given type object that is normally exposed by\ncls.__dict__\n.\nNormally it’s sufficient to use\ntp_dict\n, but for\nthe static builtin types\ntp_dict\nis now always\nNULL\n.\nPyType_GetDict()\nprovides the correct dict object instead.\ngh-105375\n: Fix a bug in\nPyErr_WarnExplicit()\nwhere an exception\ncould end up being overwritten if the API failed internally.\ngh-105603\n: We’ve renamed the new (in 3.12)\nPyInterpreterConfig.own_gil\nto\nPyInterpreterConfig.gil\nand changed the meaning of the value from\n“bool” to an integer with supported values of\nPyInterpreterConfig_DEFAULT_GIL\n,\nPyInterpreterConfig_SHARED_GIL\n,\nand\nPyInterpreterConfig_OWN_GIL\n. The default is “shared”.\ngh-105387\n: In the limited C API version 3.12,\nPy_INCREF()\nand\nPy_DECREF()\nfunctions are now implemented as opaque function calls\nto hide implementation details. Patch by Victor Stinner.\ngh-105396\n: Deprecate the\nPyImport_ImportModuleNoBlock()\nfunction\nwhich is just an alias to\nPyImport_ImportModule()\nsince Python\n3.3. Patch by Victor Stinner.\ngh-103968\n:\nPyType_FromMetaclass()\nnow allows metaclasses with\ntp_new\nset to\nNULL\n.\ngh-105268\n: Remove the old private, undocumented and untested\n_PyGC_FINALIZED()\nmacro which was kept for backward compatibility with\nPython 3.8 and older. Patch by Victor Stinner.\ngh-105182\n: Remove\nPyEval_AcquireLock()\nand\nPyEval_ReleaseLock()\nfunctions, deprecated in Python 3.2. Patch by Victor Stinner.\ngh-105182\n: Remove\nPyEval_InitThreads()\nand\nPyEval_ThreadsInitialized()\nfunctions, deprecated in Python 3.9. Patch\nby Victor Stinner.\ngh-105145\n: Deprecate old Python initialization functions:\nPySys_ResetWarnOptions()\nPy_GetExecPrefix()\nPy_GetPath()\nPy_GetPrefix()\nPy_GetProgramFullPath()\nPy_GetProgramName()\nPy_GetPythonHome()\nPatch by Victor Stinner.\ngh-85275\n:\nPyObject_AsCharBuffer()\n,\nPyObject_AsReadBuffer()\n,\nPyObject_CheckReadBuffer()\n, and\nPyObject_AsWriteBuffer()\nare\nremoved. Please migrate to new buffer protocol;\nPyObject_GetBuffer()\nand\nPyBuffer_Release()\n.\ngh-105156\n: Deprecate the old\nPy_UNICODE\nand\nPY_UNICODE_TYPE\ntypes:\nuse directly the\nwchar_t\ntype instead. Since Python 3.3,\nPy_UNICODE\nand\nPY_UNICODE_TYPE\nare just aliases to\nwchar_t\n. Patch by Victor Stinner.\ngh-105145\n: Remove the following old functions to configure the Python\ninitialization, deprecated in Python 3.11:\nPySys_AddWarnOptionUnicode()\nPySys_AddWarnOption()\nPySys_AddXOption()\nPySys_HasWarnOptions()\nPySys_SetArgvEx()\nPySys_SetArgv()\nPySys_SetPath()\nPy_SetPath()\nPy_SetProgramName()\nPy_SetPythonHome()\nPy_SetStandardStreamEncoding()\n_Py_SetProgramFullPath()\nPatch by Victor Stinner.\ngh-105107\n: Remove functions deprecated in Python 3.9.\nPyEval_CallObject()\n,\nPyEval_CallObjectWithKeywords()\n: use\nPyObject_CallNoArgs()\nand\nPyObject_Call()\n(positional\narguments must not be\nNULL\n) instead.\nPyEval_CallFunction()\n: use\nPyObject_CallFunction()\ninstead.\nPyEval_CallMethod()\n: use\nPyObject_CallMethod()\ninstead.\nPyCFunction_Call()\n: use\nPyObject_Call()\ninstead.\nPatch by Victor Stinner.\ngh-105115\n:\nPyTypeObject.tp_bases\n(and\ntp_mro\n) for builtin static\ntypes are now shared by all interpreters, whereas in 3.12-beta1 they were\nstored on\nPyInterpreterState\n.  Also note that now the tuples are\nimmortal objects.\ngh-105071\n: Add\nPyUnstable_Exc_PrepReraiseStar\nto the unstable C api to\nexpose the implementation of\nexcept*\n.\ngh-104922\n:\nPY_SSIZE_T_CLEAN\nis no longer required to use\n'#'\nformats in APIs like\nPyArg_ParseTuple()\nand\nPy_BuildValue()\n. They uses\nPy_ssize_t\nfor\n'#'\nregardless\nPY_SSIZE_T_CLEAN\n.\ngh-104584\n: Add an unstable C API for hooking in an optimizer. This is\nmainly internal, but marked “unstable” to allow third-party\nexperimentation.\ngh-104668\n: Don’t call\nPyOS_InputHook\nor\nPyOS_ReadlineFunctionPointer\nin subinterpreters, since it’s\ngenerally difficult to avoid using global state in their registered\ncallbacks. This also avoids situations where extensions may find\nthemselves running in a subinterpreter they don’t support (or haven’t yet\nbeen loaded in).\nbpo-42327\n: Add\nPyModule_Add()\nfunction: similar to\nPyModule_AddObjectRef()\nand\nPyModule_AddObject()\n, but\nalways steals a reference to the value.\nbpo-40309\n: Properly handle trailing spaces before closing parenthesis in\nPy_BuildValue()\nformat strings.\nPython 3.12.0 beta 1\n¶\nRelease date: 2023-05-22\nSecurity\n¶\ngh-99889\n: Fixed a security in flaw in\nuu.decode()\nthat could allow\nfor directory traversal based on the input if no\nout_file\nwas\nspecified.\ngh-104049\n: Do not expose the local on-disk location in directory indexes\nproduced by\nhttp.client.SimpleHTTPRequestHandler\n.\ngh-99108\n: Upgrade built-in\nhashlib\nSHA3 implementation to a\nverified implementation from the\nHACL*\nproject.  Used when OpenSSL is\nnot present or lacks SHA3.\ngh-102153\n:\nurllib.parse.urlsplit()\nnow strips leading C0 control and\nspace characters following the specification for URLs defined by WHATWG in\nresponse to\nCVE 2023-24329\n. Patch by Illia Volochii.\nCore and Builtins\n¶\ngh-102856\n: Implement PEP 701 changes in the\ntokenize\nmodule. Patch\nby Marta Gómez Macías and Pablo Galindo Salgado\ngh-104615\n: Fix wrong ordering of assignments in code like\na,\na\n=\nx,\ny\n.\nContributed by Carl Meyer.\ngh-104572\n: Improve syntax error message for invalid constructs in\nPEP 695\ncontexts and in annotations when\nfrom\n__future__\nimport\nannotations\nis active.\ngh-104482\n: Fix three error handling bugs in ast.c’s validation of pattern\nmatching statements.\ngh-102818\n: Do not add a frame to the traceback in the\nsys.setprofile\nand\nsys.settrace\ntrampoline functions. This ensures that frames are\nnot duplicated if an exception is raised in the callback function, and\nensures that frames are not omitted if a C callback is used and that does\nnot add the frame.\ngh-104405\n: Fix an issue where some\nbytecode\ninstructions could\nignore\nPEP 523\nwhen “inlining” calls.\ngh-103082\n: Change behavior of\nsys.monitoring.events.LINE\nevents in\nsys.monitoring\n: Line events now occur when a new line is reached\ndynamically, instead of using a static approximation, as before. This\nmakes the behavior very similar to that of “line” events in\nsys.settrace\n. This should ease porting of tools from 3.11 to 3.12.\ngh-104263\n: Fix\nfloat(\"nan\")\nto produce a quiet NaN on platforms (like\nMIPS) where the meaning of the signalling / quiet bit is inverted from its\nusual meaning. Also introduce a new macro\nPy_INFINITY\nmatching C99’s\nINFINITY\n, and refactor internals to rely on C99’s\nNAN\nand\nINFINITY\nmacros instead of hard-coding bit patterns for infinities and\nNaNs. Thanks Sebastian Berg.\ngh-99113\n: Multi-phase init extension modules may now indicate that they\nsupport running in subinterpreters that have their own GIL.  This is done\nby using\nPy_MOD_PER_INTERPRETER_GIL_SUPPORTED\nas the value for the\nPy_mod_multiple_interpreters\nmodule def slot.  Otherwise the module,\nby default, cannot be imported in such subinterpreters.  (This does not\naffect the main interpreter or subinterpreters that do not have their own\nGIL.)  In addition to the isolation that multi-phase init already normally\nrequires, support for per-interpreter GIL involves one additional\nconstraint: thread-safety.  If the module has external (linked)\ndependencies and those libraries have any state that isn’t thread-safe\nthen the module must do the additional work to add thread-safety.  This\nshould be an uncommon case.\ngh-99113\n: The GIL is now (optionally) per-interpreter.  This is the\nfundamental change for PEP 684.  This is all made possible by virtue of\nthe isolated state of each interpreter in the process.  The behavior of\nthe main interpreter remains unchanged.  Likewise, interpreters created\nusing\nPy_NewInterpreter()\nare not affected.  To get an interpreter\nwith its own GIL, call\nPy_NewInterpreterFromConfig()\n.\ngh-104108\n: Multi-phase init extension modules may now indicate whether or\nnot they actually support multiple interpreters.  By default such modules\nare expected to support use in multiple interpreters.  In the uncommon\ncase that one does not, it may use the new\nPy_mod_multiple_interpreters\nmodule def slot.  A value of\n0\nmeans\nthe module does not support them.\n1\nmeans it does.  The default is\n1\n.\ngh-104142\n: Fix an issue where\nlist\nor\ntuple\nrepetition\ncould fail to respect\nPEP 683\n.\ngh-104078\n: Improve the performance of\nPyObject_HasAttrString()\ngh-104066\n: Improve the performance of\nhasattr()\nfor module objects\nwith a missing attribute.\ngh-104028\n: Reduce object creation while calling callback function from gc.\nPatch by Donghee Na.\ngh-104018\n: Disallow the “z” format specifier in %-format of bytes objects.\ngh-102213\n: Fix performance loss when accessing an object’s attributes with\n__getattr__\ndefined.\ngh-103895\n: Improve handling of edge cases in showing\nException.__notes__\n. Ensures that the messages always end with a\nnewline and that string/bytes are not exploded over multiple lines. Patch\nby Carey Metcalfe.\ngh-103907\n: Don’t modify the refcounts of known immortal objects\n(\nTrue\n,\nFalse\n, and\nNone\n) in the main interpreter\nloop.\ngh-103899\n: Provide a helpful hint in the\nTypeError\nmessage when\naccidentally calling a\nmodule\nobject that has a callable attribute\nof the same name (such as\ndis.dis()\nor\ndatetime.datetime\n).\ngh-103845\n: Remove both line and instruction instrumentation before adding\nnew ones for monitoring, to avoid newly added instrumentation being\nremoved immediately.\ngh-103763\n: Implement\nPEP 695\n, adding syntactic support for generic\nclasses, generic functions, and type aliases.\nA new\ntype\nX\n=\n...\nsyntax is added for type aliases, which resolves at\nruntime to an instance of the new class\ntyping.TypeAliasType\n. The\nvalue is lazily evaluated and is accessible through the\n.__value__\nattribute. This is implemented as a new AST node\nast.TypeAlias\n.\nNew syntax (\nclass\nX[T]:\n...\n,\ndef\nfunc[T]():\n...\n) is added for\ndefining generic functions and classes. This is implemented as a new\ntype_params\nattribute on the AST nodes for classes and functions. This\nnode holds instances of the new AST classes\nast.TypeVar\n,\nast.ParamSpec\n, and\nast.TypeVarTuple\n.\ntyping.TypeVar\n,\ntyping.ParamSpec\n,\ntyping.ParamSpecArgs\n,\ntyping.ParamSpecKwargs\n,\ntyping.TypeVarTuple\n, and\ntyping.Generic\nare now implemented in C rather than Python.\nThere are new bytecode instructions\nLOAD_LOCALS\n,\nLOAD_CLASSDICT_OR_GLOBAL\n, and\nLOAD_CLASSDICT_OR_DEREF\nto support\ncorrect resolution of names in class namespaces.\nPatch by Eric Traut, Larry Hastings, and Jelle Zijlstra.\ngh-103801\n: Adds three minor linting fixes to the wasm module caught that\nwere caught by ruff.\ngh-103793\n: Optimized asyncio Task creation by deferring expensive string\nformatting (task name generation) from Task creation to the first time\nget_name\nis called. This makes asyncio benchmarks up to 5% faster.\ngh-102310\n: Change the error range for invalid bytes literals.\ngh-103590\n: Do not wrap a single exception raised from a\ntry-except*\nconstruct in an\nExceptionGroup\n.\ngh-103650\n: Change the perf map format to remove the ‘0x’ prefix from the\naddresses\ngh-102856\n: Implement the required C tokenizer changes for PEP 701. Patch\nby Pablo Galindo Salgado, Lysandros Nikolaou, Batuhan Taskaya, Marta Gómez\nMacías and sunmy2019.\ngh-100530\n: Clarify the error message raised when the called part of a\nclass pattern isn’t actually a class.\ngh-101517\n: Fix bug in line numbers of instructions emitted for\nexcept*\n.\ngh-103492\n: Clarify\nSyntaxWarning\nwith literal\nis\ncomparison by\nspecifying which literal is problematic, since comparisons using\nis\nwith e.g.\nNone\nand bool literals are idiomatic.\ngh-87729\n: Add\nLOAD_SUPER_ATTR\n(and a specialization for\nsuper().method()\n) to speed up\nsuper().method()\nand\nsuper().attr\n. This makes\nsuper().method()\nroughly 2.3x faster and\nbrings it within 20% of the performance of a simple method call. Patch by\nVladimir Matveev and Carl Meyer.\ngh-103488\n: Change the internal offset distinguishing yield and return\ntarget addresses, so that the instruction pointer is correct for exception\nhandling and other stack unwinding.\ngh-82012\n: The bitwise inversion operator (\n~\n) on bool is deprecated. It\nreturns the bitwise inversion of the underlying\nint\nrepresentation\nsuch that\nbool(~True)\n==\nTrue\n, which can be confusing. Use\nnot\nfor\nlogical negation of bools. In the rare case that you really need the\nbitwise inversion of the underlying\nint\n, convert to int explicitly\n~int(x)\n.\ngh-77757\n: Exceptions raised in a typeobject’s\n__set_name__\nmethod are\nno longer wrapped by a\nRuntimeError\n. Context information is added\nto the exception as a\nPEP 678\nnote.\ngh-103333\n:\nAttributeError\nnow retains the\nname\nattribute when\npickled and unpickled.\ngh-103242\n: Migrate\nset_ecdh_curve()\nmethod not to\nuse deprecated OpenSSL APIs. Patch by Donghee Na.\ngh-103323\n: We’ve replaced our use of\n_PyRuntime.tstate_current\nwith a\nthread-local variable.  This is a fairly low-level implementation detail,\nand there should be no change in behavior.\ngh-84436\n: The implementation of PEP-683 which adds Immortal Objects by\nusing a fixed reference count that skips reference counting to make\nobjects truly immutable.\ngh-102700\n: Allow built-in modules to be submodules. This allows submodules\nto be statically linked into a CPython binary.\ngh-103082\n: Implement\nPEP 669\nLow Impact Monitoring for CPython.\ngh-88691\n: Reduce the number of inline\nCACHE\nentries for\nCALL\n.\ngh-102500\n: Make the buffer protocol accessible in Python code using the\nnew\n__buffer__\nand\n__release_buffer__\nmagic methods. See\nPEP 688\nfor details. Patch by Jelle Zijlstra.\ngh-97933\n:\nPEP 709\n: inline list, dict and set comprehensions to improve\nperformance and reduce bytecode size.\ngh-99184\n: Bypass instance attribute access of\n__name__\nin\nrepr\nof\nweakref.ref\n.\ngh-98003\n: Complex function calls are now faster and consume no C stack\nspace.\nbpo-39610\n:\nlen()\nfor 0-dimensional\nmemoryview\nobjects (such\nas\nmemoryview(ctypes.c_uint8(42))\n) now raises a\nTypeError\n.\nPreviously this returned\n1\n, which was not consistent with\nmem_0d[0]\nraising an\nIndexError\n.\nbpo-31821\n: Fix\npause_reading()\nto work when called from\nconnection_made()\nin\nasyncio\n.\nLibrary\n¶\ngh-104600\n:\nfunctools.update_wrapper()\nnow sets the\n__type_params__\nattribute (added by\nPEP 695\n).\ngh-104340\n: When an\nasyncio\npipe protocol loses its connection due to\nan error, and the caller doesn’t await\nwait_closed()\non the\ncorresponding\nStreamWriter\n, don’t log a warning about an exception\nthat was never retrieved. After all, according to the\nStreamWriter.close()\ndocs, the\nwait_closed()\ncall is optional\n(“not mandatory”).\ngh-104555\n: Fix issue where an\nissubclass()\ncheck comparing a class\nX\nagainst a\nruntime-checkable\nprotocol\nY\nwith non-callable members would not\ncause\nTypeError\nto be raised if an\nisinstance()\ncall had\npreviously been made comparing an instance of\nX\nto\nY\n. This issue\nwas present in edge cases on Python 3.11, but became more prominent in\n3.12 due to some unrelated changes that were made to runtime-checkable\nprotocols. Patch by Alex Waygood.\ngh-104372\n: Refactored the\n_posixsubprocess\ninternals to avoid Python C\nAPI usage between fork and exec when marking\npass_fds=\nfile\ndescriptors inheritable.\ngh-104484\n: Added\ncase_sensitive\nargument to\npathlib.PurePath.match()\ngh-75367\n: Fix data descriptor detection in\ninspect.getattr_static()\n.\ngh-104536\n: Fix a race condition in the internal\nmultiprocessing.process\ncleanup logic that could manifest as an\nunintended\nAttributeError\nwhen calling\nprocess.close()\n.\ngh-103857\n: Update datetime deprecations’ stracktrace to point to the\ncalling line\ngh-101520\n: Move the core functionality of the\ntracemalloc\nmodule in\nthe\nPython/\nfolder, leaving just the module wrapper in\nModules/\n.\ngh-104392\n: Remove undocumented and unused\n_paramspec_tvars\nattribute\nfrom some classes in\ntyping\n.\ngh-102613\n: Fix issue where\npathlib.Path.glob()\nraised\nRecursionError\nwhen walking deep directory trees.\ngh-103000\n: Improve performance of\ndataclasses.asdict()\nfor the\ncommon case where\ndict_factory\nis\ndict\n. Patch by David C Ellis.\ngh-104301\n: Allow leading whitespace in disambiguated statements in\npdb\n.\ngh-104139\n: Teach\nurllib.parse.unsplit()\nto retain the\n\"//\"\nwhen\nassembling\nitms-services://?action=generate-bugs\nstyle\nApple Platform\nDeployment\nURLs.\ngh-104307\n:\nsocket.getnameinfo()\nnow releases the GIL while\ncontacting the DNS server\ngh-104310\n: Users may now use\nimportlib.util.allowing_all_extensions()\n(a context manager) to temporarily disable the strict compatibility checks\nfor importing extension modules in subinterpreters.\ngh-87695\n: Fix issue where\npathlib.Path.glob()\nraised\nOSError\nwhen it encountered a symlink to an overly long path.\ngh-104265\n: Prevent possible crash by disallowing instantiation of the\n_csv.Reader\nand\n_csv.Writer\ntypes. The regression was\nintroduced in 3.10.0a4 with PR 23224 (\nbpo-14935\n). Patch by Radislav\nChugunov.\ngh-102613\n: Improve performance of\npathlib.Path.glob()\nwhen expanding\nrecursive wildcards (”\n**\n”) by merging adjacent wildcards and\nde-duplicating results only when necessary.\ngh-65772\n: Remove unneeded comments and code in turtle.py.\ngh-90208\n: Fixed issue where\npathlib.Path.glob()\nreturned incomplete\nresults when it encountered a\nPermissionError\n. This method now\nsuppresses all\nOSError\nexceptions, except those raised from calling\nis_dir()\non the top-level path.\ngh-104144\n: Optimize\nasyncio.TaskGroup\nwhen using\nasyncio.eager_task_factory()\n. Skip scheduling a done callback if a\nTaskGroup task completes eagerly.\ngh-104144\n: Optimize\nasyncio.gather()\nwhen using\nasyncio.eager_task_factory()\nto complete eagerly if all fututres\ncompleted eagerly. Avoid scheduling done callbacks for futures that\ncomplete eagerly.\ngh-104114\n: Fix issue where\npathlib.Path.glob()\nreturns paths using\nthe case of non-wildcard segments for corresponding path segments, rather\nthan the real filesystem case.\ngh-104104\n: Improve performance of\npathlib.Path.glob()\nby using\nre.IGNORECASE\nto implement case-insensitive matching.\ngh-104102\n: Improve performance of\npathlib.Path.glob()\nwhen\nevaluating patterns that contain\n'../'\nsegments.\ngh-103822\n: Update the return type of\nweekday\nto the newly added Day\nattribute\ngh-103629\n: Update the\nrepr\nof\ntyping.Unpack\naccording to\nPEP 692\n.\ngh-103963\n: Make\ndis\ndisplay the names of the args for\nCALL_INTRINSIC_*\n.\ngh-104035\n: Do not ignore user-defined\n__getstate__\nand\n__setstate__\nmethods for slotted frozen dataclasses.\ngh-103987\n: In\nmmap\n, fix several bugs that could lead to access to\nmemory-mapped files after they have been invalidated.\ngh-103977\n: Improve import time of\nplatform\nmodule.\ngh-88773\n: Added\nturtle.teleport()\nto the\nturtle\nmodule to\nmove a turtle to a new point without tracing a line, visible or invisible.\nPatch by Liam Gersten.\ngh-103935\n: Use\nio.open_code()\nfor files to be executed instead of\nraw\nopen()\ngh-68968\n: Fixed garbled output of\nassertEqual()\nwhen an input lacks final newline.\ngh-100370\n: Fix potential\nOverflowError\nin\nsqlite3.Connection.blobopen()\nfor 32-bit builds. Patch by Erlend E.\nAasland.\ngh-102628\n: Substitute CTRL-D with CTRL-Z in\nsqlite3\nCLI banner when\nrunning on Windows.\ngh-103636\n: Module-level attributes\nJanuary\nand\nFebruary\nare\ndeprecated from\ncalendar\n.\ngh-103583\n: Isolate\n_multibytecodec\nand codecs extension modules.\nPatches by Erlend E. Aasland.\ngh-103848\n: Add checks to ensure that\n[\nbracketed\n]\nhosts found by\nurllib.parse.urlsplit()\nare of IPv6 or IPvFuture format.\ngh-103872\n: Update the bundled copy of pip to version 23.1.2.\ngh-99944\n: Make\ndis\ndisplay the value of oparg of\nKW_NAMES\n.\ngh-74940\n: The C.UTF-8 locale is no longer converted to en_US.UTF-8,\nenabling the use of UTF-8 encoding on systems which have no locales\ninstalled.\ngh-103861\n: Fix\nzipfile.Zipfile\ncreating invalid zip files when\nforce_zip64\nwas used to add files to them. Patch by Carey Metcalfe.\ngh-103857\n: Deprecated\ndatetime.datetime.utcnow()\nand\ndatetime.datetime.utcfromtimestamp()\n. (Patch by Paul Ganssle)\ngh-103839\n: Avoid compilation error due to tommath.h not being found when\nbuilding Tkinter against Tcl 8.7 built with bundled libtommath.\ngh-103791\n:\ncontextlib.suppress\nnow supports suppressing\nexceptions raised as part of an\nExceptionGroup\n. If other exceptions\nexist on the group, they are re-raised in a group that does not contain\nthe suppressed exceptions.\ngh-90750\n: Use\ndatetime.datetime.fromisocalendar()\nin the\nimplementation of\ndatetime.datetime.strptime()\n, which should now\naccept only valid ISO dates. (Patch by Paul Ganssle)\ngh-103685\n: Prepare\ntkinter.Menu.index()\nfor Tk 8.7 so that it does\nnot raise\nTclError:\nexpected\ninteger\nbut\ngot\n\"\"\nwhen it should return\nNone\n.\ngh-81403\n:\nurllib.request.CacheFTPHandler\nno longer raises\nURLError\nif a cached FTP instance is reused. ftplib’s endtransfer\nmethod calls voidresp to drain the connection to handle FTP instance reuse\nproperly.\ngh-103699\n: Add\n__orig_bases__\nto non-generic TypedDicts, call-based\nTypedDicts, and call-based NamedTuples. Other TypedDicts and NamedTuples\nalready had the attribute.\ngh-103693\n: Add convenience variable feature to\npdb\ngh-92248\n: Deprecate\ntype\n,\nchoices\n, and\nmetavar\nparameters of\nargparse.BooleanOptionalAction\n.\ngh-89415\n: Add\nsocket\nconstants for source-specific multicast. Patch\nby Reese Hyde.\ngh-103673\n:\nsocketserver\ngains\nForkingUnixStreamServer\nand\nForkingUnixDatagramServer\nclasses. Patch by Jay Berry.\ngh-103636\n: Added Enum for months and days in the calendar module.\ngh-84976\n: Create a new\nLib/_pydatetime.py\nfile that defines the Python\nversion of the\ndatetime\nmodule, and make\ndatetime\nimport the\ncontents of the new library only if the C implementation is missing.\nCurrently, the full Python implementation is defined and then deleted if\nthe C implementation is not available, slowing down\nimport\ndatetime\nunnecessarily.\ngh-103596\n: Attributes/methods are no longer shadowed by same-named enum\nmembers, although they may be shadowed by enum.property’s.\ngh-103584\n: Updated\nimportlib.metadata\nwith changes from\nimportlib_metadata\n5.2 through 6.5.0, including: Support\ninstalled-files.txt\nfor\nDistribution.files\nwhen present.\nPackageMetadata\nnow stipulates an additional\nget\nmethod allowing\nfor easy querying of metadata keys that may not be present.\npackages_distributions\nnow honors packages and modules with Python\nmodules that not\n.py\nsources (e.g.\n.pyc\n,\n.so\n). Expand protocol\nfor\nPackageMetadata.get_all\nto match the upstream implementation of\nemail.message.Message.get_all\nin python/typeshed#9620. Deprecated use\nof\nDistribution\nwithout defining abstract methods. Deprecated\nexpectation that\nPackageMetadata.__getitem__\nwill return\nNone\nfor\nmissing keys. In the future, it will raise a\nKeyError\n.\ngh-103578\n: Fixed a bug where\npdb\ncrashes when reading source file\nwith different encoding by replacing\nio.open()\nwith\nio.open_code()\n. The new method would also call into the hook set by\nPyFile_SetOpenCodeHook()\n.\ngh-103556\n: Now creating\ninspect.Signature\nobjects with\npositional-only parameter with a default followed by a\npositional-or-keyword parameter without one is impossible.\ngh-103559\n: Update the bundled copy of pip to version 23.1.1.\ngh-103548\n: Improve performance of\npathlib.Path.absolute()\nand\ncwd()\nby joining paths only when necessary. Also\nimprove performance of\npathlib.PurePath.is_absolute()\non Posix by\nskipping path parsing and normalization.\ngh-103538\n: Remove\n_tkinter\nmodule code guarded by definition of the\nTK_AQUA\nmacro which was only needed for Tk 8.4.7 or earlier and was\nnever actually defined by any build system or documented for manual use.\ngh-103533\n: Update\ncProfile\nto use PEP 669 API\ngh-103525\n: Fix misleading exception message when mixed\nstr\nand\nbytes\narguments are supplied to\npathlib.PurePath\nand\nPath\n.\ngh-103489\n: Add\ngetconfig()\nand\nsetconfig()\nto\nConnection\nto\nmake configuration changes to a database connection. Patch by Erlend E.\nAasland.\ngh-103365\n: Set default Flag boundary to\nSTRICT\nand fix bitwise\noperations.\ngh-103472\n: Avoid a potential\nResourceWarning\nin\nhttp.client.HTTPConnection\nby closing the proxy / tunnel’s\nCONNECT response explicitly.\ngh-103462\n: Fixed an issue with using\nwritelines()\nin\nasyncio\nto send very\nlarge payloads that exceed the amount of data that can be written in one\ncall to\nsocket.socket.send()\nor\nsocket.socket.sendmsg()\n,\nresulting in the remaining buffer being left unwritten.\ngh-103449\n: Fix a bug in doc string generation in\ndataclasses.dataclass()\n.\ngh-103092\n: Isolate\n_collections\n(apply\nPEP 687\n). Patch by\nErlend E. Aasland.\ngh-103357\n: Added support for\nlogging.Formatter\ndefaults\nparameter to\nlogging.config.dictConfig()\nand\nlogging.config.fileConfig()\n. Patch by Bar Harel.\ngh-103092\n: Adapt the\nwinreg\nextension module to\nPEP 687\n.\ngh-74690\n: The performance of\nisinstance()\nchecks against\nruntime-checkable\nprotocols\nhas been\nconsiderably improved for protocols that only have a few members. To\nachieve this improvement, several internal implementation details of the\ntyping\nmodule have been refactored, including\ntyping._ProtocolMeta.__instancecheck__\n,\ntyping._is_callable_members_only\n, and\ntyping._get_protocol_attrs\n.\nPatches by Alex Waygood.\ngh-74690\n: The members of a runtime-checkable protocol are now considered\n“frozen” at runtime as soon as the class has been created. See\n“What’s new in Python 3.12”\nfor more\ndetails.\ngh-103256\n: Fixed a bug that caused\nhmac\nto raise an exception when\nthe requested hash algorithm was not available in OpenSSL despite being\navailable separately as part of\nhashlib\nitself.  It now falls back\nproperly to the built-in. This could happen when, for example, your\nOpenSSL does not include SHA3 support and you want to compute\nhmac.digest(b'K',\nb'M',\n'sha3_256')\n.\ngh-102778\n: Support\nsys.last_exc\nin\nidlelib\n.\ngh-103285\n: Improve performance of\nast.get_source_segment()\n.\ngh-103225\n: Fix a bug in\npdb\nwhen displaying line numbers of\nmodule-level source code.\ngh-103092\n: Adapt the\nmsvcrt\nextension module to\nPEP 687\n.\ngh-103092\n: Adapt the\nwinsound\nextension module to\nPEP 687\n.\ngh-93910\n: Remove deprecation of enum\nmember.member\naccess.\ngh-102978\n: Fixes\nunittest.mock.patch()\nnot enforcing function\nsignatures for methods decorated with\n@classmethod\nor\n@staticmethod\nwhen patch is called with\nautospec=True\n.\ngh-103092\n: Isolate\n_socket\n(apply\nPEP 687\n). Patch by Erlend E.\nAasland.\ngh-100479\n: Add\npathlib.PurePath.with_segments()\n, which creates a\npath object from arguments. This method is called whenever a derivative\npath is created, such as from\npathlib.PurePath.parent\n. Subclasses\nmay override this method to share information between path objects.\ngh-103220\n: Fix issue where\nos.path.join()\nadded a slash when joining\nonto an incomplete UNC drive with a trailing slash on Windows.\ngh-103204\n: Fixes\nhttp.server\naccepting HTTP requests with HTTP\nversion numbers preceded by ‘+’, or ‘-’, or with digit-separating ‘_’\ncharacters.  The length of the version numbers is also constrained.\ngh-75586\n: Fix various Windows-specific issues with\nshutil.which\n.\ngh-103193\n: Improve performance of\ninspect.getattr_static()\n. Patch by\nAlex Waygood.\ngh-103176\n:\nsys._current_exceptions()\nnow returns a mapping from\nthread-id to an exception instance, rather than to a\n(typ,\nexc,\ntb)\ntuple.\ngh-103143\n: Polish the help messages and docstrings of\npdb\n.\ngh-103015\n: Add\nentrypoint\nkeyword-only parameter to\nsqlite3.Connection.load_extension()\n, for overriding the SQLite\nextension entry point. Patch by Erlend E. Aasland.\ngh-103000\n: Improve performance of\ndataclasses.astuple()\nand\ndataclasses.asdict()\nin cases where the contents are common Python\ntypes.\ngh-102953\n: The extraction methods in\ntarfile\n, and\nshutil.unpack_archive()\n, have a new a\nfilter\nargument that allows\nlimiting tar features than may be surprising or dangerous, such as\ncreating files outside the destination directory. See\nExtraction filters\nfor details.\ngh-97696\n: Implemented an eager task factory in asyncio. When used as a\ntask factory on an event loop, it performs eager execution of coroutines.\nCoroutines that are able to complete synchronously (e.g. return or raise\nwithout blocking) are returned immediately as a finished task, and the\ntask is never scheduled to the event loop. If the coroutine blocks, the\n(pending) task is scheduled and returned.\ngh-81079\n: Add\ncase_sensitive\nkeyword-only argument to\npathlib.Path.glob()\nand\nrglob()\n.\ngh-101819\n: Isolate the\nio\nextension module by applying\nPEP 687\n.\nPatch by Kumar Aditya, Victor Stinner, and Erlend E. Aasland.\ngh-91896\n: Deprecate\ncollections.abc.ByteString\ngh-101362\n: Speed up\npathlib.Path\nconstruction by omitting the\npath anchor from the internal list of path parts.\ngh-102114\n: Functions in the\ndis\nmodule that accept a source code\nstring as argument now print a more concise traceback when the string\ncontains a syntax or indentation error.\ngh-62432\n: The\nunittest\nrunner will now exit with status code 5 if\nno tests were run. It is common for test runner misconfiguration to fail\nto find any tests, this should be an error.\ngh-78079\n: Fix incorrect normalization of UNC device path roots, and\npartial UNC share path roots, in\npathlib.PurePath\n. Pathlib no\nlonger appends a trailing slash to such paths.\ngh-85984\n: Add\ntty.cfmakeraw()\nand\ntty.cfmakecbreak()\nto\ntty\nand modernize, the behavior of\ntty.setraw()\nand\ntty.setcbreak()\nto use POSIX.1-2017 Chapter 11 “General Terminal\nInterface” flag masks by default.\ngh-101688\n: Implement\ntypes.get_original_bases()\nto provide further\nintrospection for types.\ngh-101640\n:\nargparse.ArgumentParser\nnow catches errors when\nwriting messages, such as when\nsys.stderr\nis\nNone\n. Patch by\nOleg Iarygin.\ngh-83861\n: Fix datetime.astimezone method return value when invoked on a\nnaive datetime instance that represents local time falling in a timezone\ntransition gap. PEP 495 requires that instances with fold=1 produce\nearlier times than those with fold=0 in this case.\ngh-89550\n: Decrease execution time of some\ngzip\nfile writes by 15%\nby adding more appropriate buffering.\ngh-95299\n: Remove the bundled setuptools wheel from\nensurepip\n, and stop\ninstalling setuptools in environments created by\nvenv\n.\ngh-99353\n: Respect the\nhttp.client.HTTPConnection\n.debuglevel\nflag in\nurllib.request.AbstractHTTPHandler\nwhen its constructor\nparameter\ndebuglevel\nis not set. And do the same for\n*HTTPS*\n.\ngh-98040\n: Remove the long-deprecated\nimp\nmodule.\ngh-97850\n: Deprecate\npkgutil.find_loader()\nand\npkgutil.get_loader()\nin favor of\nimportlib.util.find_spec()\n.\ngh-94473\n: Flatten arguments in\ntkinter.Canvas.coords()\n. It now\naccepts not only\nx1,\ny1,\nx2,\ny2,\n...\nand\n[x1,\ny1,\nx2,\ny2,\n...]\n,\nbut also\n(x1,\ny1),\n(x2,\ny2),\n...\nand\n[(x1,\ny1),\n(x2,\ny2),\n...]\n.\ngh-98040\n: Remove more deprecated importlib APIs:\nfind_loader()\n,\nfind_module()\n,\nimportlib.abc.Finder\n,\npkgutil.ImpImporter\n,\npkgutil.ImpLoader\n.\ngh-96522\n: Fix potential deadlock in pty.spawn()\ngh-96534\n: Support divert(4) added in FreeBSD 14.\ngh-87474\n: Fix potential file descriptor leaks in\nsubprocess.Popen\n.\ngh-94906\n: Support multiple steps in\nmath.nextafter()\n. Patch by\nShantanu Jain and Matthias Gorgens.\ngh-51574\n: Make\ntempfile.mkdtemp()\nreturn absolute paths when its\ndir\nparameter is relative.\ngh-94518\n: Convert private\n_posixsubprocess.fork_exec()\nto use\nArgument Clinic.\ngh-92184\n: When creating zip files using\nzipfile\n,\nos.altsep\n, if\nnot\nNone\n, will always be treated as a path separator even when it is\nnot\n/\n. Patch by Carey Metcalfe.\nbpo-46797\n: Deprecation warnings are now emitted for\nast.Num\n,\nast.Bytes\n,\nast.Str\n,\nast.NameConstant\nand\nast.Ellipsis\n. These have been documented as deprecated since\nPython 3.8, and will be removed in Python 3.14.\nbpo-44844\n: Enables\nwebbrowser\nto detect and launch Microsoft Edge\nbrowser.\nbpo-45606\n: Fixed the bug in\npathlib.Path.glob()\n– previously a\ndangling symlink would not be found by this method when the pattern is an\nexact match, but would be found when the pattern contains a wildcard or\nthe recursive wildcard (\n**\n). With this change, a dangling symlink will\nbe found in both cases.\nbpo-23041\n: Add\nQUOTE_STRINGS\nand\nQUOTE_NOTNULL\nto the suite of\ncsv\nmodule quoting styles.\nbpo-24964\n: Added\nhttp.client.HTTPConnection.get_proxy_response_headers()\nthat\nprovides access to the HTTP headers on a proxy server response to the\nCONNECT\nrequest.\nbpo-17258\n:\nmultiprocessing\nnow supports stronger HMAC algorithms\nfor inter-process connection authentication rather than only HMAC-MD5.\nbpo-39744\n: Make\nasyncio.subprocess.Process.communicate()\nclose the\nsubprocess’s stdin even when called with\ninput=None\n.\nbpo-22708\n: http.client CONNECT method tunnel improvements: Use HTTP 1.1\nprotocol; send a matching Host: header with CONNECT, if one is not\nprovided; convert IDN domain names to Punycode. Patch by Michael Handler.\nDocumentation\n¶\ngh-67056\n: Document that the effect of registering or unregistering an\natexit\ncleanup function from within a registered cleanup function\nis undefined.\ngh-103629\n: Mention the new way of typing\n**kwargs\nwith\nUnpack\nand\nTypedDict\nintroduced in\nPEP 692\n.\ngh-48241\n: Clarifying documentation about the url parameter to\nurllib.request.urlopen and urllib.request.Request needing to be encoded\nproperly.\ngh-86094\n: Add support for Unicode Path Extra Field in ZipFile. Patch by\nYeojin Kim and Andrea Giudiceandrea\ngh-99202\n: Fix extension type from documentation for compiling in C++20\nmode\nTests\n¶\ngh-104494\n: Update\ntest_pack_configure_in\nand\ntest_place_configure_in\nfor changes to error message formatting in Tk\n8.7.\ngh-104461\n: Run test_configure_screen on X11 only, since the\nDISPLAY\nenvironment variable and\n-screen\noption for toplevels are not useful\non Tk for Win32 or Aqua.\ngh-86275\n: Added property-based tests to the\nzoneinfo\ntests, along\nwith stubs for the\nhypothesis\ninterface. (Patch by Paul Ganssle)\ngh-103329\n: Regression tests for the behaviour of\nunittest.mock.PropertyMock\nwere added.\ngh-102795\n: fix use of poll in test_epoll’s test_control_and_wait\ngh-75729\n: Fix the\nos.spawn*\ntests failing on Windows\nwhen the working directory or interpreter path contains spaces.\nBuild\n¶\ngh-101282\n: BOLT optimization is now applied to the libpython shared\nlibrary if building a shared library. BOLT instrumentation and application\nsettings can now be influenced via the\nBOLT_INSTRUMENT_FLAGS\nand\nBOLT_APPLY_FLAGS\nconfigure variables.\ngh-99017\n:\nPYTHON_FOR_REGEN\nnow require Python 3.10 or newer.\ngh-104490\n: Define\n.PHONY\n/ virtual make targets consistently and\nproperly.\ngh-104106\n: Add gcc fallback of mkfifoat/mknodat for macOS. Patch by\nDonghee Na.\ngh-103532\n: The\nTKINTER_PROTECT_LOADTK\nmacro is no longer defined or\nused in the\n_tkinter\nmodule.  It was previously only defined when\nbuilding against Tk 8.4.13 and older, but Tk older than 8.5.12 has been\nunsupported since\ngh-91152\n.\ngh-99069\n: Extended workaround defining\nstatic_assert\nwhen missing from\nthe libc headers to all clang and gcc builds. In particular, this fixes\nbuilding on macOS <= 10.10.\ngh-100220\n: Changed the default value of the\nSHELL\nMakefile variable\nfrom\n/bin/sh\nto\n/bin/sh\n-e\nto ensure that complex recipes\ncorrectly fail after an error. Previously,\nmake\ninstall\ncould fail to\ninstall some files and yet return a successful result.\ngh-90656\n: Add platform triplets for 64-bit LoongArch:\nloongarch64-linux-gnusf\nloongarch64-linux-gnuf32\nloongarch64-linux-gnu\nPatch by Zhang Na.\nWindows\n¶\ngh-104623\n: Update Windows installer to use SQLite 3.42.0.\ngh-82814\n: Fix a potential\n[Errno\n13]\nPermission\ndenied\nwhen using\nshutil.copystat()\nwithin Windows Subsystem for Linux (WSL) on a\nmounted filesystem by adding\nerrno.EACCES\nto the list of ignored\nerrors within the internal implementation.\ngh-103088\n: Fix virtual environment\nactivate\nscript having\nincorrect line endings for Cygwin.\ngh-103088\n: Fixes venvs not working in bash on Windows across different\ndisks\ngh-102997\n: Update Windows installer to use SQLite 3.41.2.\ngh-88013\n: Fixed a bug where\nTypeError\nwas raised when calling\nntpath.realpath()\nwith a bytes parameter in some cases.\nmacOS\n¶\ngh-99834\n: Update macOS installer to Tcl/Tk 8.6.13.\ngh-104623\n: Update macOS installer to SQLite 3.42.0.\ngh-103545\n: Add\nos.PRIO_DARWIN_THREAD\n,\nos.PRIO_DARWIN_PROCESS\n,\nos.PRIO_DARWIN_BG\nand\nos.PRIO_DARWIN_NONUI\n. These can be used with\nos.setpriority\nto run the process at a lower priority and make use of\nthe efficiency cores on Apple Silicon systems.\ngh-104180\n: Support reading SOCKS proxy configuration from macOS System\nConfiguration. Patch by Sam Schott.\ngh-60436\n: update curses textbox to additionally handle backspace using the\ncurses.ascii.DEL\nkey press.\ngh-102997\n: Update macOS installer to SQLite 3.41.2.\nIDLE\n¶\ngh-104499\n: Fix completions for Tk Aqua 8.7 (currently blank).\ngh-104496\n: About prints both tcl and tk versions if different (expected\nsomeday).\ngh-88496\n: Fix IDLE test hang on macOS.\nTools/Demos\n¶\ngh-104389\n: Argument Clinic C converters now accept the\nunused\nkeyword,\nfor wrapping a parameter with\nPy_UNUSED\n. Patch by Erlend E.\nAasland.\nC API\n¶\ngh-101291\n: Added unstable C API for extracting the value of “compact”\nintegers:\nPyUnstable_Long_IsCompact()\nand\nPyUnstable_Long_CompactValue()\n.\ngh-104109\n: We’ve added\nPy_NewInterpreterFromConfig()\nand\nPyInterpreterConfig\nto the public C-API (but not the stable ABI; not\nyet at least).  The new function may be used to create a new interpreter\nwith various features configured.  The function was added to support PEP\n684 (per-interpreter GIL).\ngh-103968\n:\nPyType_FromSpec()\nand its variants now allow creating\nclasses whose metaclass overrides\ntp_new\n. The\ntp_new\nis ignored. This behavior is deprecated and will be disallowed\nin 3.14+. The new\nPyType_FromMetaclass()\nalready disallows it.\ngh-103743\n: Add\nPyUnstable_Object_GC_NewWithExtraData()\nfunction\nthat can be used to allocate additional memory after an object for data\nnot managed by Python.\ngh-103295\n: Introduced\nPyUnstable_WritePerfMapEntry()\n,\nPyUnstable_PerfMapState_Init()\nand\nPyUnstable_PerfMapState_Fini()\n. These allow extension modules (JIT\ncompilers in particular) to write to perf-map files in a thread safe\nmanner. The\nPython support for the Linux perf profiler\nalso uses these APIs to write\nentries in the perf-map file.\ngh-103509\n: Added C API for extending types whose instance memory layout is\nopaque:\nPyType_Spec.basicsize\ncan now be zero or negative,\nPyObject_GetTypeData()\ncan be used to get subclass-specific data,\nand\nPy_TPFLAGS_ITEMS_AT_END\ncan be used to safely extend\nvariable-size objects. See\nPEP 697\nfor details.\ngh-103091\n: Add a new C-API function to eagerly assign a version tag to a\nPyTypeObject:\nPyUnstable_Type_AssignVersionTag()\n.\ngh-101408\n:\nPyObject_GC_Resize\nshould calculate preheader size\nif needed. Patch by Donghee Na.\ngh-98836\n: Add support of more formatting options (left aligning, octals,\nuppercase hexadecimals,\nintmax_t\n,\nptrdiff_t\n,\nwchar_t\nC strings, variable width and precision) in\nPyUnicode_FromFormat()\nand\nPyUnicode_FromFormatV()\n.\ngh-96803\n: Add unstable C-API functions to get the code object, lasti and\nline number from the internal\n_PyInterpreterFrame\nin the limited API.\nThe functions are:\nPyCodeObject\n*\nPyUnstable_InterpreterFrame_GetCode(struct\n_PyInterpreterFrame\n*frame)\nint\nPyUnstable_InterpreterFrame_GetLasti(struct\n_PyInterpreterFrame\n*frame)\nint\nPyUnstable_InterpreterFrame_GetLine(struct\n_PyInterpreterFrame\n*frame)\nPython 3.12.0 alpha 7\n¶\nRelease date: 2023-04-04\nCore and Builtins\n¶\ngh-102192\n: Deprecated\n_PyErr_ChainExceptions\nin favour of\n_PyErr_ChainExceptions1\n.\ngh-89987\n: Reduce the number of inline\nCACHE\nentries for\nBINARY_SUBSCR\n.\ngh-102859\n: Removed\nJUMP_IF_FALSE_OR_POP\nand\nJUMP_IF_TRUE_OR_POP\ninstructions.\ngh-101975\n: Fixed\nstacktop\nvalue on tracing entries to avoid corruption\non garbage collection.\ngh-102778\n: Add\nsys.last_exc\nand deprecate\nsys.last_type\n,\nsys.last_value\nand\nsys.last_traceback\n, which hold the same\ninformation in its legacy form.\ngh-100982\n: Replace all occurrences of\nCOMPARE_AND_BRANCH\nwith\nCOMPARE_OP\n.\ngh-102701\n: Fix overflow when creating very large dict.\ngh-102755\n: Add\nPyErr_DisplayException()\nwhich takes just an\nexception instance, to replace the legacy\nPyErr_Display()\nwhich\ntakes the\n(typ,\nexc,\ntb)\ntriplet.\ngh-102594\n: Add note to exception raised in\nPyErr_SetObject\nwhen\nnormalization fails.\ngh-90997\n: Shrink the number of inline\nCACHE\nentries used by\nLOAD_GLOBAL\n.\ngh-102491\n: Improve import time of\nplatform\nby removing IronPython\nversion parsing. The IronPython version parsing was not functional (see\nhttps://github.com/IronLanguages/ironpython3/issues/1667\n).\ngh-101291\n: Rearrage bits in first field (after header) of PyLongObject. *\nBits 0 and 1: 1 - sign. I.e. 0 for positive numbers, 1 for zero and 2 for\nnegative numbers. * Bit 2 reserved (probably for the immortal bit) * Bits\n3+ the unsigned size.\nThis makes a few operations slightly more efficient, and will enable a\nmore compact and faster 2s-complement representation of most ints in\nfuture.\ngh-102397\n: Fix segfault from race condition in signal handling during\ngarbage collection. Patch by Kumar Aditya.\ngh-102406\n:\ncodecs\nencoding/decoding errors now get the context\ninformation (which operation and which codecs) attached as\nPEP 678\nnotes instead of through chaining a new instance of the exception.\ngh-102281\n: Fix potential nullptr dereference and use of uninitialized\nmemory in fileutils. Patch by Max Bachmann.\ngh-102300\n: Reuse operands with refcount of 1 in float specializations of\nBINARY_OP.\ngh-102213\n: Fix performance loss when accessing an object’s attributes with\n__getattr__\ndefined.\ngh-102255\n: Improve build support for the Xbox. Patch by Max Bachmann.\ngh-102027\n: Fix SSE2 and SSE3 detection in\n_blake2\ninternal module.\nPatch by Max Bachmann.\ngh-101865\n: Deprecate\nco_lnotab\nin code objects, schedule it for\nremoval in Python 3.14\nbpo-1635741\n: Adapt\n_pickle\nto\nPEP 687\n. Patch by Mohamed Koubaa\nand Erlend Aasland.\nLibrary\n¶\ngh-103085\n: Pure python\nlocale.getencoding()\nwill not warn\ndeprecation.\ngh-103068\n: It’s no longer possible to register conditional breakpoints in\nPdb\nthat raise\nSyntaxError\n. Patch by Tian Gao.\ngh-102549\n: Don’t ignore exceptions in member type creation.\ngh-103056\n: Ensure final\n_generate_next_value_\nis a\nstaticmethod\n.\ngh-103046\n: Display current line label correctly in\ndis\nwhen\nshow_caches\nis False and\nlasti\npoints to a CACHE entry.\ngh-102433\n:\nisinstance()\nchecks against\nruntime-checkable\nprotocols\nnow use\ninspect.getattr_static()\nrather than\nhasattr()\nto lookup\nwhether attributes exist. This means that descriptors and\n__getattr__()\nmethods are no longer unexpectedly evaluated\nduring\nisinstance()\nchecks against runtime-checkable protocols.\nHowever, it may also mean that some objects which used to be considered\ninstances of a runtime-checkable protocol may no longer be considered\ninstances of that protocol on Python 3.12+, and vice versa. Most users are\nunlikely to be affected by this change. Patch by Alex Waygood.\ngh-103023\n: It’s no longer possible to register expressions to display in\nPdb\nthat raise\nSyntaxError\n. Patch by Tian Gao.\ngh-102947\n: Improve traceback when\ndataclasses.fields()\nis called on\na non-dataclass. Patch by Alex Waygood\ngh-102780\n: The\nasyncio.Timeout\ncontext manager now works reliably\neven when performing cleanup due to task cancellation.  Previously it\ncould raise a\nCancelledError\ninstead of an\nTimeoutError\nin such cases.\ngh-102871\n: Remove support for obsolete browsers from\nwebbrowser\n.\nRemoved browsers include Grail, Mosaic, Netscape, Galeon, Skipstone,\nIceape, Firebird, and Firefox versions 35 and below.\ngh-102839\n: Improve performance of\nmath.log()\narguments handling by\nremoving the argument clinic.\ngh-102828\n: Add the\nonexc\narg to\nshutil.rmtree()\n, which is like\nonerror\nbut expects an exception instance rather than an exc_info\ntuple. Deprecate\nonerror\n.\ngh-88965\n: typing: Fix a bug relating to substitution in custom classes\ngeneric over a\nParamSpec\n. Previously, if the\nParamSpec\nwas substituted with a parameters list that itself contained\na\nTypeVar\n, the\nTypeVar\nin the parameters list could\nnot be subsequently substituted. This is now fixed.\nPatch by Nikita Sobolev.\ngh-76846\n: Fix issue where\n__new__()\nand\n__init__()\nmethods of\npathlib.PurePath\nand\nPath\nsubclasses were not\ncalled in some circumstances.\ngh-78530\n:\nasyncio.wait()\nnow accepts generators yielding tasks.\nPatch by Kumar Aditya.\ngh-102748\n:\nasyncio.iscoroutine()\nnow returns\nFalse\nfor\ngenerators as\nasyncio\ndoes not support legacy generator-based\ncoroutines. Patch by Kumar Aditya.\ngh-102670\n: Optimized fmean(), correlation(), covariance(), and\nlinear_regression() using the new math.sumprod() function.\ngh-102615\n: Typing: Improve the\nrepr\nof generic aliases for classes\ngeneric over a\nParamSpec\n. (Use square brackets to\nrepresent a parameter list.)\ngh-100112\n:\nasyncio.Task.get_coro()\nnow always returns a coroutine\nwhen wrapping an awaitable object. Patch by Kumar Aditya.\ngh-102578\n: Speed up setting or deleting mutable attributes on\nnon-dataclass subclasses of frozen dataclasses. Due to the implementation\nof\n__setattr__\nand\n__delattr__\nfor frozen dataclasses, this\npreviously had a time complexity of\nO\n(\nn\n). It now has a time\ncomplexity of\nO\n(1).\ngh-102519\n: Add\nos.listdrives()\n,\nos.listvolumes()\nand\nos.listmounts()\nfunctions on Windows for enumerating drives, volumes\nand mount points\ngh-74468\n: Attribute name of the extracted\ntarfile\nfile object now\nholds filename of itself rather than of the archive it is contained in.\nPatch by Oleg Iarygin.\ngh-102378\n: Private helper method\ninspect._signature_strip_non_python_syntax\nwill no longer strip\n/\nfrom the input string.\ngh-79940\n: Add\ninspect.getasyncgenstate()\nand\ninspect.getasyncgenlocals()\n. Patch by Thomas Krennwallner.\ngh-102103\n: Add\nmodule\nargument to\ndataclasses.make_dataclass()\nand make classes produced by it pickleable.\ngh-102069\n: Fix\n__weakref__\ndescriptor generation for custom\ndataclasses.\ngh-102038\n: Skip a\nstat\nin\nsite\nif we have already found a\npyvenv.cfg\ngh-98886\n: Fix issues when defining dataclasses that have fields with\nspecific underscore names that aren’t clearly reserved by\ndataclasses\n.\ngh-101673\n: Fix a\npdb\nbug where\nll\nclears the changes to local\nvariables.\ngh-101313\n: Added -h and –help arguments to the webbrowser CLI\ngh-100372\n:\nssl.SSLContext.load_verify_locations()\nno longer\nincorrectly accepts some cases of trailing data when parsing DER.\ngh-89727\n: Fix pathlib.Path.walk RecursionError on deep directory trees by\nrewriting it using iteration instead of recursion.\ngh-100131\n: Added an optional\ndelete\nkeyword argument to\ntempfile.TemporaryDirectory\n.\ngh-48330\n: Added\n--durations\ncommand line option, showing the N slowest\ntest cases.\nunittest.TextTestRunner\nand\nunittest.TextTestResult\nconstructors accept a new\ndurations\nkeyword argument. Subclasses should take this into account or accept\n**kwargs\n. Added\nunittest.TestResult.addDuration()\nmethod and\nunittest.TestResult.collectedDurations\nattribute.\n(Contributed by Giampaolo Rodola)\ngh-98169\n: Fix\ndataclasses.astuple()\ncrash when\ncollections.defaultdict\nis present in the attributes.\ngh-96931\n: Fix incorrect results from\nssl.SSLSocket.shared_ciphers()\ngh-95495\n: When built against OpenSSL 3.0, the\nssl\nmodule had a bug\nwhere it reported unauthenticated EOFs (i.e. without close_notify) as a\nclean TLS-level EOF. It now raises\nSSLEOFError\n, matching the\nbehavior in previous versions of OpenSSL. The\noptions\nattribute on\nSSLContext\nalso\nno longer includes\nOP_IGNORE_UNEXPECTED_EOF\nby default. This\noption may be set to specify the previous OpenSSL 3.0 behavior.\ngh-94684\n: Now\nuuid.uuid3()\nand\nuuid.uuid5()\nfunctions support\nbytes\nobjects as their\nname\nargument.\ngh-94440\n: Fix a\nconcurrent.futures.process\nbug where\nProcessPoolExecutor\nshutdown could hang after a future has been\nquickly submitted and canceled.\ngh-72346\n: Added deprecation warning to\nisdst\nparameter of\nemail.utils.localtime()\n.\nbpo-36305\n: Fix handling of Windows filenames that resemble drives, such as\n./a:b\n, in\npathlib\n.\nDocumentation\n¶\ngh-103112\n: Add docstring to\nhttp.client.HTTPResponse.read()\nto fix\npydoc\noutput.\nTests\n¶\ngh-102980\n: Improve test coverage on\npdb\n.\ngh-102537\n: Adjust the error handling strategy in\ntest_zoneinfo.TzPathTest.python_tzpath_context\n. Patch by Paul Ganssle.\ngh-101377\n: Improved test_locale_calendar_formatweekday of calendar.\nBuild\n¶\ngh-102973\n: Add a dev container (along with accompanying Dockerfile) for\ndevelopment purposes.\ngh-102711\n: Fix\n-Wstrict-prototypes\ncompiler warnings.\nWindows\n¶\ngh-102690\n: Update\nwebbrowser\nto fall back to Microsoft Edge instead\nof Internet Explorer.\ngh-99726\n: Improves correctness of stat results for Windows, and uses\nfaster API when available\nTools/Demos\n¶\ngh-102809\n:\nMisc/gdbinit\nwas removed.\nC API\n¶\ngh-102013\n: Add a new (unstable) C-API function for iterating over GC’able\nobjects using a callback:\nPyUnstable_VisitObjects\n.\nPython 3.12.0 alpha 6\n¶\nRelease date: 2023-03-07\nSecurity\n¶\ngh-99108\n: Replace builtin hashlib implementations of MD5 and SHA1 with\nverified ones from the HACL* project.\ngh-101727\n: Updated the OpenSSL version used in Windows and macOS binary\nrelease builds to 1.1.1t to address\nCVE 2023-0286\n,\nCVE 2022-4303\n,\nand\nCVE 2022-4303\nper\nthe OpenSSL 2023-02-07 security advisory\n.\ngh-99108\n: Replace the builtin\nhashlib\nimplementations of SHA2-384\nand SHA2-512 originally from LibTomCrypt with formally verified,\nside-channel resistant code from the\nHACL*\nproject. The builtins remain a\nfallback only used when OpenSSL does not provide them.\ngh-101283\n:\nsubprocess.Popen\nnow uses a safer approach to find\ncmd.exe\nwhen launching with\nshell=True\n. Patch by Eryk Sun, based\non a patch by Oleg Iarygin.\nCore and Builtins\n¶\ngh-102493\n: Fix regression in semantics of normalisation in\nPyErr_SetObject\n.\ngh-102416\n: Do not memoize incorrectly automatically generated loop rules\nin the parser. Patch by Pablo Galindo.\ngh-102356\n: Fix a bug that caused a crash when deallocating deeply nested\nfilter objects. Patch by Marta Gómez Macías.\ngh-102336\n: Cleanup Windows 7 specific special handling. Patch by Max\nBachmann.\ngh-102250\n: Fixed a segfault occurring when the interpreter calls a\n__bool__\nmethod that raises.\ngh-102126\n: Fix deadlock at shutdown when clearing thread states if any\nfinalizer tries to acquire the runtime head lock. Patch by Kumar Aditya.\ngh-102027\n: Use\nGetCurrentProcessId\non Windows when\ngetpid\nis\nunavailable. Patch by Max Bachmann.\ngh-102056\n: Fix error handling bugs in interpreter’s exception printing\ncode, which could cause a crash on infinite recursion.\ngh-100982\n: Restrict the scope of the\nFOR_ITER_RANGE\ninstruction\nto the scope of the original\nFOR_ITER\ninstruction, to allow\ninstrumentation.\ngh-101967\n: Fix possible segfault in\npositional_only_passed_as_keyword\nfunction, when new list created.\ngh-101952\n: Fix possible segfault in\nBUILD_SET\nopcode, when new set\ncreated.\ngh-74895\n:\nsocket.getaddrinfo\nno longer raises\nOverflowError\nfor\nint\nport\nvalues outside of the C\nlong range. Out of range values are left up to the underlying string based\nC library API to report. A\nsocket.gaierror\nSAI_SERVICE\nmay\noccur instead, or no error at all as not all platform C libraries generate\nan error.\ngh-101799\n: Add\nCALL_INTRINSIC_2\nand use it instead of\nPREP_RERAISE_STAR\n.\ngh-101857\n: Fix xattr support detection on Linux systems by widening the\ncheck to linux, not just glibc. This fixes support for musl.\ngh-84783\n: Make the slice object hashable. Patch by Will Bradshaw and\nFurkan Onder.\ngh-87849\n: Change the\nSEND\ninstruction to leave the receiver on the\nstack. This allows the specialized form of\nSEND\nto skip the chain of C\ncalls and jump directly to the\nRESUME\nin the generator or coroutine.\ngh-101765\n: Fix SystemError / segmentation fault in iter\n__reduce__\nwhen internal access of\nbuiltins.__dict__\nkeys mutates the iter\nobject.\ngh-101430\n: Update\ntracemalloc\nto handle presize of object properly.\nPatch by Donghee Na.\ngh-101696\n: Invalidate type version tag in\n_PyStaticType_Dealloc\nfor\nstatic types, avoiding bug where a false cache hit could crash the\ninterpreter. Patch by Kumar Aditya.\ngh-101632\n: Adds a new\nRETURN_CONST\ninstruction.\ngh-100719\n: Remove gi_code field from generator (and coroutine and async\ngenerator) objects as it is redundant. The frame already includes a\nreference to the code object.\ngh-98627\n: When an interpreter is configured to check (and only then),\nimporting an extension module will now fail when the extension does not\nsupport multiple interpreters (i.e. doesn’t implement PEP 489 multi-phase\ninit). This does not apply to the main interpreter, nor to subinterpreters\ncreated with\nPy_NewInterpreter()\n.\nLibrary\n¶\ngh-102302\n: Micro-optimise hashing of\ninspect.Parameter\n, reducing\nthe time it takes to hash an instance by around 40%.\ngh-101979\n: Fix a bug where parentheses in the\nmetavar\nargument to\nargparse.ArgumentParser.add_argument()\nwere dropped. Patch by Yeojin\nKim.\ngh-91038\n:\nplatform.platform()\nnow has boolean default arguments.\ngh-81652\n: Add\nmmap.MAP_ALIGNED_SUPER\nFreeBSD and\nmmap.MAP_CONCEAL\nOpenBSD constants to\nmmap\n. Patch by\nYeojin Kim.\ngh-102179\n: Fix\nos.dup2()\nerror message for negative fds.\ngh-101961\n: For the binary mode,\nfileinput.hookcompressed()\ndoesn’t\nset the\nencoding\nvalue even if the value is\nNone\n. Patch by Gihwan\nKim.\ngh-101936\n: The default value of\nfp\nbecomes\nio.BytesIO\nif\nHTTPError\nis initialized without a designated\nfp\nparameter. Patch by Long Vo.\ngh-101566\n: In zipfile, sync Path with\nzipp 3.14\n, including\nfix for extractall on the underlying zipfile after being wrapped in\nPath\n.\ngh-97930\n: Apply changes from\nimportlib_resources 5.12\n,\nincluding fix for\nMultiplexedPath\nto support directories in multiple\nnamespaces (python/importlib_resources#265).\ngh-101997\n: Upgrade pip wheel bundled with ensurepip (pip 23.0.1)\ngh-99108\n: The built-in extension modules for\nhashlib\nSHA2\nalgorithms, used when OpenSSL does not provide them, now live in a single\ninternal\n_sha2\nmodule instead of separate\n_sha256\nand\n_sha512\nmodules.\ngh-101892\n: Callable iterators no longer raise\nSystemError\nwhen\nthe callable object exhausts the iterator but forgets to either return a\nsentinel value or raise\nStopIteration\n.\ngh-87634\n: Remove locking behavior from\nfunctools.cached_property()\n.\ngh-97786\n: Fix potential undefined behaviour in corner cases of\nfloating-point-to-time conversions.\ngh-101517\n: Fixed bug where\nbdb\nlooks up the source line with\nlinecache\nwith a\nlineno=None\n, which causes it to fail with an\nunhandled exception.\ngh-101773\n: Optimize\nfractions.Fraction\nfor small components. The\nprivate argument\n_normalize\nof the\nfractions.Fraction\nconstructor has been removed.\ngh-101693\n: In\nsqlite3.Cursor.execute()\n,\nDeprecationWarning\nis\nnow emitted when\nnamed placeholders\nare used\ntogether with parameters supplied as a\nsequence\ninstead of as a\ndict\n. Starting from Python 3.14, using named placeholders with\nparameters supplied as a sequence will raise a\nProgrammingError\n. Patch by Erlend E. Aasland.\ngh-101446\n: Change repr of\ncollections.OrderedDict\nto use regular\ndictionary formatting instead of pairs of keys and values.\ngh-101362\n: Speed up\npathlib.PurePath\nconstruction by handling\narguments more uniformly. When a\npathlib.Path\nargument is\nsupplied, we use its string representation rather than joining its parts\nwith\nos.path.join()\n.\ngh-101362\n: Speed up\npathlib.PurePath\nconstruction by calling\nos.path.join()\nonly when two or more arguments are given.\ngh-101362\n: Speed up\npathlib.Path\nconstruction by running the path\nflavour compatibility check only when pathlib is imported.\ngh-85984\n: Refactored the implementation of\npty.fork()\nto use\nos.login_tty()\n.\nA\nDeprecationWarning\nis now raised by\npty.master_open()\nand\npty.slave_open()\n. They were undocumented and deprecated long long ago\nin the docstring in favor of\npty.openpty()\n.\ngh-101561\n: Add a new decorator\ntyping.override()\n. See\nPEP 698\nfor\ndetails. Patch by Steven Troxler.\ngh-63301\n: Set exit code when\ntabnanny\nCLI exits on error.\ngh-101360\n: Fix anchor matching in\npathlib.PureWindowsPath.match()\n.\nPath and pattern anchors are now matched with\nfnmatch\n, just like\nother path parts. This allows patterns such as\n\"*:/Users/*\"\nto be\nmatched.\ngh-101277\n: Remove global state from\nitertools\nmodule (\nPEP 687\n).\nPatches by Erlend E. Aasland.\ngh-100809\n: Fix handling of drive-relative paths (like ‘C:’ and ‘C:foo’) in\npathlib.Path.absolute()\n. This method now uses the OS API to retrieve\nthe correct current working directory for the drive.\ngh-99138\n: Apply\nPEP 687\nto\nzoneinfo\n. Patch by Erlend E. Aasland.\ngh-96764\n:\nasyncio.wait_for()\nnow uses\nasyncio.timeout()\nas its\nunderlying implementation. Patch by Kumar Aditya.\ngh-88233\n: Correctly preserve “extra” fields in\nzipfile\nregardless of\ntheir ordering relative to a zip64 “extra.”\nbpo-23224\n: Fix segfaults when creating\nlzma.LZMADecompressor\nand\nbz2.BZ2Decompressor\nobjects without calling\n__init__()\n, and\nfix leakage of locks and internal buffers when calling the\n__init__()\nmethods of\nlzma.LZMADecompressor\n,\nlzma.LZMACompressor\n,\nbz2.BZ2Compressor\n, and\nbz2.BZ2Decompressor\nobjects\nmultiple times.\nDocumentation\n¶\ngh-85417\n: Update\ncmath\ndocumentation to clarify behaviour on branch\ncuts.\ngh-97725\n: Fix\nasyncio.Task.print_stack()\ndescription for\nfile=None\n. Patch by Oleg Iarygin.\nTests\n¶\ngh-102019\n: Fix deadlock on shutdown if\ntest_current_{exception,frames}\nfails. Patch by Jacob Bower.\ngh-85984\n: Utilize new “winsize” functions from termios in pty tests.\ngh-89792\n:\ntest_tools\nnow copies up to 10x less source data to a\ntemporary directory during the\nfreeze\ntest by ignoring git metadata\nand other artifacts.  It also limits its python build parallelism based on\nos.cpu_count instead of hard coding it as 8 cores.\nBuild\n¶\ngh-99942\n: On Android, in a static build, python-config in embed mode no\nlonger incorrectly reports a library to link to.\ngh-99942\n: On Android, python.pc now correctly reports the library to link\nto, the same as python-config.sh.\ngh-100221\n: Fix creating install directories in\nmake\nsharedinstall\nif\nthey exist outside\nDESTDIR\nalready.\ngh-96821\n: Explicitly mark C extension modules that need defined signed\ninteger overflow, and add a configure option\n--with-strict-overflow\n. Patch by Matthias Görgens and Shantanu\nJain.\nWindows\n¶\ngh-102344\n: Implement\nwinreg.QueryValue\nusing\nQueryValueEx\nand\nwinreg.SetValue\nusing\nSetValueEx\n. Patch by Max Bachmann.\ngh-101881\n: Handle read and write operations on non-blocking pipes properly\non Windows.\ngh-101881\n: Add support for the os.get_blocking() and os.set_blocking()\nfunctions on Windows.\ngh-101849\n: Ensures installer will correctly upgrade existing\npy.exe\nlauncher installs.\ngh-101763\n: Updates copy of libffi bundled with Windows installs to 3.4.4.\ngh-101759\n: Update Windows installer to SQLite 3.40.1.\ngh-101614\n: Correctly handle extensions built against debug binaries that\nreference\npython3_d.dll\n.\ngh-101196\n: The functions\nos.path.isdir\n,\nos.path.isfile\n,\nos.path.islink\nand\nos.path.exists\nare now 13% to 28% faster on\nWindows, by making fewer Win32 API calls.\nmacOS\n¶\ngh-101759\n: Update macOS installer to SQLite 3.40.1.\nC API\n¶\ngh-101907\n: Removes use of non-standard C++ extension in public header\nfiles.\ngh-99293\n: Document that the Py_TPFLAGS_VALID_VERSION_TAG is an internal\nfeature, should not be used, and will be removed.\ngh-101578\n: Add\nPyErr_GetRaisedException()\nand\nPyErr_SetRaisedException()\nfor saving and restoring the current\nexception. These functions return and accept a single exception object,\nrather than the triple arguments of the now-deprecated\nPyErr_Fetch()\nand\nPyErr_Restore()\n. This is less error\nprone and a bit more efficient.\nAdd\nPyException_GetArgs()\nand\nPyException_SetArgs()\nas\nconvenience functions for retrieving and modifying the\nargs\npassed to the exception’s constructor.\ngh-91744\n: Introduced the\nUnstable C API tier\n, marking APi that is\nallowed to change in minor releases without a deprecation period. See\nPEP 689\nfor details.\nPython 3.12.0 alpha 5\n¶\nRelease date: 2023-02-07\nSecurity\n¶\ngh-99108\n: Replace the builtin\nhashlib\nimplementations of SHA2-224\nand SHA2-256 originally from LibTomCrypt with formally verified,\nside-channel resistant code from the\nHACL*\nproject. The builtins remain a\nfallback only used when OpenSSL does not provide them.\nCore and Builtins\n¶\ngh-92173\n: Fix the\ndefs\nand\nkwdefs\narguments to\nPyEval_EvalCodeEx()\nand a reference leak in that function.\ngh-59956\n: The GILState API is now partially compatible with\nsubinterpreters. Previously,\nPyThreadState_GET()\nand\nPyGILState_GetThisThreadState()\nwould get out of sync, causing\ninconsistent behavior and crashes.\ngh-101400\n: Fix wrong lineno in exception message on\ncontinue\nor\nbreak\nwhich are not in a loop. Patch by Donghee Na.\ngh-101372\n: Fix\nis_normalized()\nto properly handle the\nUCD 3.2.0 cases. Patch by Donghee Na.\ngh-101266\n: Fix\nsys.getsizeof()\nreporting for\nint\nsubclasses.\ngh-101291\n: Refactor the\nPyLongObject\nstruct into a normal Python\nobject header and a\nPyLongValue\nstruct.\ngh-101046\n: Fix a possible memory leak in the parser when raising\nMemoryError\n. Patch by Pablo Galindo\ngh-101037\n: Fix potential memory underallocation issue for instances of\nint\nsubclasses with value zero.\ngh-100762\n: Record the (virtual) exception block depth in the oparg of\nYIELD_VALUE\n. Use this to avoid the expensive\nthrow()\nwhen\nclosing generators (and coroutines) that can be closed trivially.\ngh-100982\n: Adds a new\nCOMPARE_AND_BRANCH\ninstruction. This is a\nbit more efficient when performing a comparison immediately followed by a\nbranch, and restores the design intent of PEP 659 that specializations are\nlocal to a single instruction.\ngh-100942\n: Fixed segfault in property.getter/setter/deleter that occurred\nwhen a property subclass overrode the\n__new__\nmethod to return a\nnon-property instance.\ngh-100923\n: Remove the\nmask\ncache entry for the\nCOMPARE_OP\ninstruction and embed the mask into the oparg.\ngh-100892\n: Fix race while iterating over thread states in clearing\nthreading.local\n. Patch by Kumar Aditya.\ngh-91351\n: Fix a case where re-entrant imports could corrupt the import\ndeadlock detection code and cause a\nKeyError\nto be raised out of\nimportlib/_bootstrap\n.  In addition to the straightforward cases,\nthis could also happen when garbage collection leads to a warning being\nemitted – as happens when it collects an open socket or file)\ngh-100726\n: Optimize construction of\nrange\nobject for medium size\nintegers.\ngh-100712\n: Added option to build cpython with specialization disabled, by\nsetting\nENABLE_SPECIALIZATION=False\nin\nopcode\n, followed by\nmake\nregen-all\n.\nbpo-32780\n: Inter-field padding is now inserted into the PEP3118 format\nstrings obtained from\nctypes.Structure\nobjects, reflecting their\ntrue representation in memory.\nLibrary\n¶\ngh-101541\n: [Enum] - fix psuedo-flag creation\ngh-101570\n: Upgrade pip wheel bundled with ensurepip (pip 23.0)\ngh-101323\n: Fix a bug where errors where not thrown by\nzlib._ZlibDecompressor if encountered during decompressing.\ngh-101317\n: Add\nssl_shutdown_timeout\nparameter for\nasyncio.StreamWriter.start_tls()\n.\ngh-101326\n: Fix regression when passing\nNone\nas second or third\nargument to\nFutureIter.throw\n.\ngh-92123\n: Adapt the\n_elementtree\nextension module to multi-phase init\n(\nPEP 489\n). Patches by Erlend E. Aasland.\ngh-100795\n: Avoid potential unexpected\nfreeaddrinfo\ncall (double free)\nin\nsocket\nwhen when a libc\ngetaddrinfo()\nimplementation leaves\ngarbage in an output pointer when returning an error. Original patch by\nSergey G. Brester.\ngh-101143\n: Remove unused references to\nTimerHandle\nin\nasyncio.base_events.BaseEventLoop._add_callback\n.\ngh-101144\n: Make\nzipfile.Path.open()\nand\nzipfile.Path.read_text()\nalso accept\nencoding\nas a positional\nargument. This was the behavior in Python 3.9 and earlier.  3.10\nintroduced a regression where supplying it as a positional argument would\nlead to a\nTypeError\n.\ngh-94518\n: Group-related variables of\n_posixsubprocess\nmodule are\nrenamed to stress that supplementary group affinity is added to a fork,\nnot replace the inherited ones. Patch by Oleg Iarygin.\ngh-101015\n: Fix\ntyping.get_type_hints()\non\n'*tuple[...]'\nand\n*tuple[...]\n. It must not drop the\nUnpack\npart.\ngh-101000\n: Add\nos.path.splitroot()\n, which splits a path into a\n3-item tuple\n(drive,\nroot,\ntail)\n. This new function is used by\npathlib\nto improve the performance of path construction by up to a\nthird.\ngh-100573\n: Fix a Windows\nasyncio\nbug with named pipes where a\nclient doing\nos.stat()\non the pipe would cause an error in the server\nthat disabled serving future requests.\ngh-39615\n:\nwarnings.warn()\nnow has the ability to skip stack frames\nbased on code filename prefix rather than only a numeric\nstacklevel\nvia the new\nskip_file_prefixes\nkeyword argument.\ngh-100750\n: pass encoding kwarg to subprocess in platform\ngh-100160\n: Emit a deprecation warning in\nasyncio.DefaultEventLoopPolicy.get_event_loop()\nif there is no\ncurrent event loop set and it decides to create one.\ngh-96290\n: Fix handling of partial and invalid UNC drives in\nntpath.splitdrive()\n, and in\nntpath.normpath()\non non-Windows\nsystems. Paths such as ‘\\server’ and ‘\\’ are now considered by\nsplitdrive()\nto contain only a drive, and consequently are not\nmodified by\nnormpath()\non non-Windows systems. The behaviour of\nnormpath()\non Windows systems is unaffected, as native OS APIs are\nused. Patch by Eryk Sun, with contributions by Barney Gale.\ngh-99952\n: Fix a reference undercounting issue in\nctypes.Structure\nwith\nfrom_param()\nresults larger than a C pointer.\ngh-67790\n: Add float-style formatting support for\nfractions.Fraction\ninstances.\ngh-99266\n: Preserve more detailed error messages in\nctypes\n.\ngh-86682\n: Ensure runtime-created collections have the correct module name\nusing the newly added (internal)\nsys._getframemodulename()\n.\ngh-88597\n:\nuuid\nnow has a command line interface. Try\npython\n-m\nuuid\n-h\n.\ngh-60580\n:\nctypes.wintypes.BYTE\ndefinition changed from\nc_byte\nto\nc_ubyte\nto match Windows SDK.\nPatch by Anatoly Techtonik and Oleg Iarygin.\ngh-94518\n:\n_posixsubprocess\nnow initializes all UID and GID variables\nusing a reserved\n-1\nvalue instead of a separate flag. Patch by Oleg\nIarygin.\nbpo-38941\n: The\nxml.etree.ElementTree\nmodule now emits\nDeprecationWarning\nwhen testing the truth value of an\nxml.etree.ElementTree.Element\n. Before, the Python implementation\nemitted\nFutureWarning\n, and the C implementation emitted nothing.\nbpo-40077\n: Convert\nelementtree\ntypes to heap types. Patch by Erlend\nE. Aasland.\nbpo-29847\n: Fix a bug where\npathlib.Path\naccepted and ignored\nkeyword arguments. Patch provided by Yurii Karabas.\ngh-77772\n:\nctypes.CDLL\n,\nctypes.OleDLL\n,\nctypes.WinDLL\n, and\nctypes.PyDLL\nnow accept\npath-like objects\nas their\nname\nargument.\nPatch by Robert Hoelzl.\nDocumentation\n¶\ngh-88324\n: Reword\nsubprocess\nto emphasize default behavior of\nstdin\n,\nstdout\n, and\nstderr\narguments. Remove inaccurate statement\nabout child file handle inheritance.\nTests\n¶\ngh-101334\n:\ntest_tarfile\nhas been updated to pass when run as a high\nUID.\nBuild\n¶\ngh-101282\n: Update BOLT configuration not to use deprecated usage of\n--split\nfunctions\n. Patch by Donghee Na.\ngh-101522\n: Allow overriding Windows dependencies versions and paths using\nMSBuild properties.\ngh-77532\n: Minor fixes to allow building with\nPlatformToolset=ClangCL\non Windows.\ngh-101152\n: In accordance with\nPEP 699\n, the\nma_version_tag\nfield in\nPyDictObject\nis deprecated for extension modules. Accessing this\nfield will generate a compiler warning at compile time. This field will be\nremoved in Python 3.14.\ngh-100340\n: Allows -Wno-int-conversion for wasm-sdk 17 and onwards, thus\nenables building WASI builds once against the latest sdk.\ngh-101060\n: Conditionally add\n-fno-reorder-blocks-and-partition\nin\nconfigure. Effectively fixes\n--enable-bolt\nwhen using Clang, as this\nappears to be a GCC-only flag.\ngh-98705\n:\n__bool__\nis defined in AIX system header files which breaks\nthe build in AIX, so undefine it.\ngh-98636\n: Fix a regression in detecting\ngdbm_compat\nlibrary for the\n_gdbm\nmodule build.\ngh-96305\n:\n_aix_support\nnow uses a simple code to get platform details\nrather than the now non-existent\n_bootsubprocess\nduring bootstrap.\nWindows\n¶\ngh-101543\n: Ensure the install path in the registry is only used when the\nstandard library hasn’t been located in any other way.\ngh-101467\n: The\npy.exe\nlauncher now correctly filters when only a\nsingle runtime is installed. It also correctly handles prefix matches on\ntags so that\n-3.1\ndoes not match\n3.11\n, but would still match\n3.1-32\n.\ngh-99834\n: Updates bundled copy of Tcl/Tk to 8.6.13.0\ngh-101135\n: Restore ability to launch older 32-bit versions from the\npy.exe\nlauncher when both 32-bit and 64-bit installs of the same\nversion are available.\ngh-82052\n: Fixed an issue where writing more than 32K of Unicode output to\nthe console screen in one go can result in mojibake.\ngh-100320\n: Ensures the\nPythonPath\nregistry key from an install is used\nwhen launching from a different copy of Python that relies on an existing\ninstall to provide a copy of its modules and standard library.\ngh-100247\n: Restores support for the\npy.exe\nlauncher finding\nshebang commands in its configuration file using the full command name.\nPython 3.12.0 alpha 4\n¶\nRelease date: 2023-01-10\nCore and Builtins\n¶\ngh-100776\n: Fix misleading default value in\ninput()\n’s\n__text_signature__\n.\ngh-99005\n: Remove\nUNARY_POSITIVE\n,\nASYNC_GEN_WRAP\nand\nLIST_TO_TUPLE\n, replacing them with intrinsics.\ngh-99005\n: Add new\nCALL_INTRINSIC_1\ninstruction. Remove\nIMPORT_STAR\n,\nPRINT_EXPR\nand\nSTOPITERATION_ERROR\n, replacing them with the\nCALL_INTRINSIC_1\ninstruction.\ngh-100288\n: Remove the LOAD_ATTR_METHOD_WITH_DICT specialized instruction.\nStats show it is not useful.\ngh-100720\n: Added\n_PyFrame_NumSlotsForCodeObject\n, which returns the\nnumber of slots needed in a frame for a given code object.\ngh-100719\n: Removed the co_nplaincellvars field from the code object, as it\nis redundant.\ngh-100637\n: Fix\nint.__sizeof__()\ncalculation to include the 1-element\nob_digit\narray for\n0\nand\nFalse\n.\ngh-100649\n: Update the native_thread_id field of PyThreadState after fork.\ngh-100126\n: Fix an issue where “incomplete” frames could be briefly visible\nto C code while other frames are being torn down, possibly resulting in\ncorruption or hard crashes of the interpreter while running finalizers.\ngh-87447\n: Fix\nSyntaxError\non comprehension rebind checking with\nnames that are not actually redefined.\nNow reassigning\nb\nin\n[(b\n:=\n1)\nfor\na,\nb.prop\nin\nsome_iter]\nis\nallowed. Reassigning\na\nis still disallowed as per\nPEP 572\n.\ngh-100268\n: Add\nint.is_integer()\nto improve duck type compatibility\nbetween\nint\nand\nfloat\n.\ngh-100425\n: Improve the accuracy of\nsum()\nwith compensated summation.\ngh-100374\n: Fix incorrect result and delay in\nsocket.getfqdn()\n. Patch\nby Dominic Socular.\ngh-100357\n: Convert\nvars\n,\ndir\n,\nnext\n,\ngetattr\n, and\niter\nto argument clinic.\ngh-100117\n: Improve the output of\ncodeobject.co_lines()\nby emitting\nonly one entry for each line range.\ngh-90043\n: Handle NaNs when specializing\nCOMPARE_OP\nfor\nfloat\nvalues.\ngh-100222\n: Redefine the\n_Py_CODEUNIT\ntypedef as a union to describe\nits layout to the C compiler, avoiding type punning and improving clarity.\ngh-99955\n: Internal compiler functions (in compile.c) now consistently\nreturn -1 on error and 0 on success.\ngh-100188\n: The\nBINARY_SUBSCR_LIST_INT\nand\nBINARY_SUBSCR_TUPLE_INT\ninstructions are no longer used for negative integers because those\ninstructions always miss when encountering negative integers.\ngh-99110\n: Initialize frame->previous in frameobject.c to fix a\nsegmentation fault when accessing frames created by\nPyFrame_New()\n.\ngh-94155\n: Improved the hashing algorithm for code objects, mitigating some\nhash collisions.\ngh-99540\n:\nNone\nnow hashes to a constant value. This is not a\nrequirements change.\ngh-100143\n: When built with\n--enable-pystats\n, stats collection is now\noff by default. To enable it early at startup, pass the\n-Xpystats\nflag.  Stats are now always dumped, even if switched off.\ngh-100146\n: Improve\nBUILD_LIST\nopcode so that it works similarly to the\nBUILD_TUPLE\nopcode, by stealing references from the stack rather than\nrepeatedly using stack operations to set list elements.  Implementation\ndetails are in a new private API\n_PyList_FromArraySteal()\n.\ngh-100110\n: Specialize\nFOR_ITER\nfor tuples.\ngh-100050\n: Honor existing errors obtained when searching for mismatching\nparentheses in the tokenizer. Patch by Pablo Galindo\ngh-92216\n: Improve the performance of\nhasattr()\nfor type objects with\na missing attribute.\ngh-99582\n: Freeze\nzipimport\nmodule into\n_bootstrap_python\n.\ngh-99554\n: Pack debugging location tables more efficiently during bytecode\ncompilation.\ngh-98522\n: Add an internal version number to code objects, to give better\nversioning of inner functions and comprehensions, and thus better\nspecialization of those functions. This change is invisible to both Python\nand C extensions.\ngh-94603\n: Improve performance of\nlist.pop\nfor small lists.\ngh-89051\n: Add\nssl.OP_LEGACY_SERVER_CONNECT\nbpo-32782\n:\nctypes\narrays of length 0 now report a correct itemsize\nwhen a\nmemoryview\nis constructed from them, rather than always giving\na value of 0.\nLibrary\n¶\ngh-100833\n: Speed up\nmath.fsum()\nby removing defensive\nvolatile\nqualifiers.\ngh-100805\n: Modify\nrandom.choice()\nimplementation to once again work\nwith NumPy arrays.\ngh-100813\n: Add\nsocket.IP_PKTINFO\nconstant.\ngh-100792\n: Make\nemail.message.Message.__contains__()\ntwice as fast.\ngh-91851\n: Microoptimizations for\nfractions.Fraction.__round__()\n,\nfractions.Fraction.__ceil__()\nand\nfractions.Fraction.__floor__()\n.\ngh-90104\n: Avoid RecursionError on\nrepr\nif a dataclass field definition\nhas a cyclic reference.\ngh-100689\n: Fix crash in\npyexpat\nby statically allocating\nPyExpat_CAPI\ncapsule.\ngh-100740\n: Fix\nunittest.mock.Mock\nnot respecting the spec for\nattribute names prefixed with\nassert\n.\ngh-91219\n: Change\nSimpleHTTPRequestHandler\nto support subclassing to\nprovide a different set of index file names instead of using\n__init__\nparameters.\ngh-100690\n:\nMock\nobjects which are not unsafe will now raise an\nAttributeError\nwhen accessing an attribute that matches the name of an\nassertion but without the prefix\nassert_\n, e.g. accessing\ncalled_once\ninstead of\nassert_called_once\n. This is in addition to\nthis already happening for accessing attributes with prefixes\nassert\n,\nassret\n,\nasert\n,\naseert\n, and\nassrt\n.\ngh-89727\n: Simplify and optimize\nos.walk()\nby using\nisinstance()\nchecks to check the top of the stack.\ngh-100485\n: Add math.sumprod() to compute the sum of products.\ngh-86508\n: Fix\nasyncio.open_connection()\nto skip binding to local\naddresses of different family. Patch by Kumar Aditya.\ngh-97930\n:\nimportlib.resources.files\nnow accepts a module as an anchor\ninstead of only accepting packages. If a module is passed, resources are\nresolved adjacent to that module (in the same package or at the package\nroot). The parameter was renamed from\npackage\nto\nanchor\nwith a\ncompatibility shim for those passing by keyword. Additionally, the new\nanchor\nparameter is now optional and will default to the caller’s\nmodule.\ngh-100585\n: Fixed a bug where importlib.resources.as_file was leaving file\npointers open\ngh-100562\n: Improve performance of\npathlib.Path.absolute()\nby nearly\n2x. This comes at the cost of a performance regression in\npathlib.Path.cwd()\n, which is generally used less frequently in user\ncode.\ngh-100519\n: Small simplification of\nhttp.cookiejar.eff_request_host()\nthat improves readability and better matches the RFC wording.\ngh-100287\n: Fix the interaction of\nunittest.mock.seal()\nwith\nunittest.mock.AsyncMock\n.\ngh-100488\n: Add\nFraction.is_integer()\nto check whether a\nfractions.Fraction\nis an integer. This improves duck type\ncompatibility with\nfloat\nand\nint\n.\ngh-100474\n:\nhttp.server\nnow checks that an index page is actually a\nregular file before trying to serve it.  This avoids issues with\ndirectories named\nindex.html\n.\ngh-100363\n: Speed up\nasyncio.get_running_loop()\nby removing redundant\ngetpid\nchecks. Patch by Kumar Aditya.\ngh-78878\n: Fix crash when creating an instance of\n_ctypes.CField\n.\ngh-100348\n: Fix ref cycle in\nasyncio._SelectorSocketTransport\nby\nremoving\n_read_ready_cb\nin\nclose\n.\ngh-100344\n: Provide C implementation for\nasyncio.current_task()\nfor a\n4x-6x speedup.\ngh-100272\n: Fix JSON serialization of OrderedDict.  It now preserves the\norder of keys.\ngh-83076\n: Instantiation of\nMock()\nand\nAsyncMock()\nis now 3.8x\nfaster.\ngh-100234\n: Set a default value of 1.0 for the\nlambd\nparameter in\nrandom.expovariate().\ngh-100228\n: A\nDeprecationWarning\nmay be raised when\nos.fork()\nor\nos.forkpty()\nis called from multi-threaded processes.  Forking\nwith threads is unsafe and can cause deadlocks, crashes and subtle\nproblems. Lack of a warning does not indicate that the fork call was\nactually safe, as Python may not be aware of all threads.\ngh-100039\n: Improve signatures for enums and flags.\ngh-100133\n: Fix regression in\nasyncio\nwhere a subprocess would\nsometimes lose data received from pipe.\nbpo-44592\n: Fixes inconsistent handling of case sensitivity of\nextrasaction\narg in\ncsv.DictWriter\n.\ngh-100098\n: Fix\ntuple\nsubclasses being cast to\ntuple\nwhen used as\nenum values.\ngh-85432\n: Rename the\nfmt\nparameter of the pure-Python implementation of\ndatetime.time.strftime()\nto\nformat\n. Rename the\nt\nparameter of\ndatetime.datetime.fromtimestamp()\nto\ntimestamp\n. These changes mean\nthe parameter names in the pure-Python implementation now match the\nparameter names in the C implementation. Patch by Alex Waygood.\ngh-98778\n: Update\nHTTPError\nto be initialized\nproperly, even if the\nfp\nis\nNone\n. Patch by Donghee Na.\ngh-99925\n: Unify error messages in JSON serialization between\njson.dumps(float('nan'),\nallow_nan=False)\nand\njson.dumps(float('nan'),\nallow_nan=False,\nindent=<SOMETHING>)\n. Now\nboth include the representation of the value that could not be serialized.\ngh-89727\n: Fix issue with\nos.walk()\nwhere a\nRecursionError\nwould occur on deep directory structures by adjusting the implementation\nof\nos.walk()\nto be iterative instead of recursive.\ngh-94943\n: Add\nDataclass support\nto the\nEnum\n__repr__()\n. When inheriting from a\ndataclass\n, only show the field names in the value\nsection of the member\nrepr()\n, and not the dataclass’ class name.\ngh-83035\n: Fix\ninspect.getsource()\nhandling of decorator calls with\nnested parentheses.\ngh-99576\n: Fix\n.save()\nmethod for\nLWPCookieJar\nand\nMozillaCookieJar\n: saved file was not truncated on repeated save.\ngh-94912\n: Add\ninspect.markcoroutinefunction()\ndecorator which\nmanually marks a function as a coroutine for the benefit of\niscoroutinefunction()\n.\ngh-99509\n: Add\nPEP 585\nsupport for\nmultiprocessing.queues.Queue\n.\ngh-99482\n: Remove\nJython\npartial compatibility code from several stdlib\nmodules.\ngh-99433\n: Fix\ndoctest\nfailure on\ntypes.MethodWrapperType\nin modules.\ngh-85267\n: Several improvements to\ninspect.signature()\n’s handling of\n__text_signature\n. - Fixes a case where\ninspect.signature()\ndropped parameters - Fixes a case where\ninspect.signature()\nraised\ntokenize.TokenError\n- Allows\ninspect.signature()\nto\nunderstand defaults involving binary operations of constants -\ninspect.signature()\nis documented as only raising\nTypeError\nor\nValueError\n, but sometimes raised\nRuntimeError\n. These\ncases now raise\nValueError\n- Removed a dead code path\ngh-91166\n:\nasyncio\nis optimized to avoid excessive copying when\nwriting to socket and use\nsendmsg()\nif the platform\nsupports it. Patch by Kumar Aditya.\ngh-98030\n: Add missing TCP socket options from Linux:\nTCP_MD5SIG\n,\nTCP_THIN_LINEAR_TIMEOUTS\n,\nTCP_THIN_DUPACK\n,\nTCP_REPAIR\n,\nTCP_REPAIR_QUEUE\n,\nTCP_QUEUE_SEQ\n,\nTCP_REPAIR_OPTIONS\n,\nTCP_TIMESTAMP\n,\nTCP_CC_INFO\n,\nTCP_SAVE_SYN\n,\nTCP_SAVED_SYN\n,\nTCP_REPAIR_WINDOW\n,\nTCP_FASTOPEN_CONNECT\n,\nTCP_ULP\n,\nTCP_MD5SIG_EXT\n,\nTCP_FASTOPEN_KEY\n,\nTCP_FASTOPEN_NO_COOKIE\n,\nTCP_ZEROCOPY_RECEIVE\n,\nTCP_INQ\n,\nTCP_TX_DELAY\n.\ngh-88500\n: Reduced the memory usage of\nurllib.parse.unquote()\nand\nurllib.parse.unquote_to_bytes()\non large values.\ngh-96127\n:\ninspect.signature\nwas raising\nTypeError\non call with\nmock objects. Now it correctly returns\n(*args,\n**kwargs)\nas inferred\nsignature.\ngh-95882\n: Fix a 3.11 regression in\nasynccontextmanager()\n, which caused it to propagate\nexceptions with incorrect tracebacks and fix a 3.11 regression in\ncontextmanager()\n, which caused it to propagate\nexceptions with incorrect tracebacks for\nStopIteration\n.\ngh-78707\n: Deprecate passing more than one positional argument to\npathlib.PurePath.relative_to()\nand\nis_relative_to()\n.\ngh-92122\n: Fix reStructuredText syntax errors in docstrings in the\nenum\nmodule.\ngh-91851\n: Optimize the\nFraction\narithmetics for small\ncomponents.\nbpo-24132\n: Make\npathlib.PurePath\nand\nPath\nsubclassable (private to start). Previously, attempting to instantiate a\nsubclass resulted in an\nAttributeError\nbeing raised. Patch by\nBarney Gale.\nbpo-40447\n: Accept\nos.PathLike\n(such as\npathlib.Path\n) in\nthe\nstripdir\narguments of\ncompileall.compile_file()\nand\ncompileall.compile_dir()\n.\nbpo-36880\n: Fix a reference counting issue when a\nctypes\ncallback\nwith return type\npy_object\nreturns\nNone\n, which could\ncause crashes.\nDocumentation\n¶\ngh-100616\n: Document existing\nattr\nparameter to\ncurses.window.vline()\nfunction in\ncurses\n.\ngh-100472\n: Remove claim in documentation that the\nstripdir\n,\nprependdir\nand\nlimit_sl_dest\nparameters of\ncompileall.compile_dir()\nand\ncompileall.compile_file()\ncould\nbe\nbytes\n.\nbpo-25377\n: Clarify use of octal format of mode argument in help(os.chmod)\nas well as help(os.fchmod)\nTests\n¶\ngh-100454\n: Start running SSL tests with OpenSSL 3.1.0-beta1.\ngh-100086\n: The Python test runner (libregrtest) now logs Python build\ninformation like “debug” vs “release” build, or LTO and PGO optimizations.\nPatch by Victor Stinner.\ngh-93018\n: Make two tests forgiving towards host system libexpat with\nbackported security fixes applied.\nBuild\n¶\ngh-100540\n: Removed the\n--with-system-ffi\nconfigure\noption;\nlibffi\nmust now always be supplied by the system on all non-Windows\nplatforms.  The option has had no effect on non-Darwin platforms for\nseveral releases, and in 3.11 only had the non-obvious effect of invoking\npkg-config\nto find\nlibffi\nand never setting\n-DUSING_APPLE_OS_LIBFFI\n.  Now on Darwin platforms\nconfigure\nwill\nfirst check for the OS\nlibffi\nand then fall back to the same\nprocessing as other platforms if it is not found.\ngh-88267\n: Avoid exporting Python symbols in linked Windows applications\nwhen the core is built as static.\nbpo-41916\n: Allow override of ac_cv_cxx_thread so that cross compiled\npython can set -pthread for CXX.\nWindows\n¶\ngh-100180\n: Update Windows installer to OpenSSL 1.1.1s\ngh-99191\n: Use\n_MSVC_LANG\n>=\n202002L\ninstead of less-precise\n_MSC_VER\n>=1929\nto more accurately test for C++20 support in\nPC/_wmimodule.cpp\n.\ngh-79218\n: Define\nMS_WIN64\nfor Mingw-w64 64bit, fix cython compilation\nfailure.\ngh-99941\n: Ensure that\nasyncio.Protocol.data_received()\nreceives an\nimmutable\nbytes\nobject (as documented), instead of\nbytearray\n.\nbpo-43984\n:\nwinreg.SetValueEx()\nnow leaves the target value untouched\nin the case of conversion errors. Previously,\n-1\nwould be written in\ncase of such errors.\nbpo-34816\n:\nhasattr(ctypes.windll,\n'nonexistant')\nnow returns\nFalse\ninstead of raising\nOSError\n.\nmacOS\n¶\ngh-100180\n: Update macOS installer to OpenSSL 1.1.1s\ngh-100540\n: Removed obsolete\ndlfcn.h\nshim from the\n_ctypes\nextension module, which has not been necessary since Mac OS X 10.2.\nTools/Demos\n¶\nbpo-45256\n: Fix a bug that caused an\nAttributeError\nto be raised in\npython-gdb.py\nwhen\npy-locals\nis used without a frame.\ngh-100342\n: Add missing\nNULL\ncheck for possible allocation failure in\n*args\nparsing in Argument Clinic.\nC API\n¶\ngh-99947\n: Raising SystemError on import will now have its cause be set to\nthe original unexpected exception.\ngh-99240\n: In argument parsing, after deallocating newly allocated memory,\nreset its pointer to NULL.\ngh-98724\n: The\nPy_CLEAR\n,\nPy_SETREF\nand\nPy_XSETREF\nmacros now only evaluate their arguments once. If an\nargument has side effects, these side effects are no longer duplicated.\nPatch by Victor Stinner.\nPython 3.12.0 alpha 3\n¶\nRelease date: 2022-12-06\nSecurity\n¶\ngh-100001\n:\npython\n-m\nhttp.server\nno longer allows terminal control\ncharacters sent within a garbage request to be printed to the stderr\nserver log.\nThis is done by changing the\nhttp.server\nBaseHTTPRequestHandler\n.log_message\nmethod to replace control\ncharacters with a\n\\x\nHH\nhex escape before printing.\ngh-87604\n: Avoid publishing list of active per-interpreter audit hooks via\nthe\ngc\nmodule\nCore and Builtins\n¶\ngh-99891\n: Fix a bug in the tokenizer that could cause infinite recursion\nwhen showing syntax warnings that happen in the first line of the source.\nPatch by Pablo Galindo\ngh-91054\n: Add\nPyCode_AddWatcher()\nand\nPyCode_ClearWatcher()\nAPIs to register callbacks to receive\nnotification on creation and destruction of code objects.\ngh-99729\n: Fix an issue that could cause frames to be visible to Python\ncode as they are being torn down, possibly leading to memory corruption or\nhard crashes of the interpreter.\ngh-99708\n: Fix bug where compiler crashes on an if expression with an empty\nbody block.\ngh-99578\n: Fix a reference bug in\n_imp.create_builtin()\nafter the\ncreation of the first sub-interpreter for modules\nbuiltins\nand\nsys\n. Patch by Victor Stinner.\ngh-99581\n: Fixed a bug that was causing a buffer overflow if the tokenizer\ncopies a line missing the newline character from a file that is as long as\nthe available tokenizer buffer. Patch by Pablo galindo\ngh-99553\n: Fix bug where an\nExceptionGroup\nsubclass can wrap a\nBaseException\n.\ngh-99547\n: Add a function to os.path to check if a path is a junction:\nisjunction. Add similar functionality to pathlib.Path as is_junction.\ngh-99370\n: Fix zip path for venv created from a non-installed python on\nPOSIX platforms.\ngh-99377\n: Add audit events for thread creation and clear operations.\ngh-98686\n: Remove the\nBINARY_OP_GENERIC\nand\nCOMPARE_OP_GENERIC\n“specializations”.\ngh-99298\n: Remove the remaining error paths for attribute specializations,\nand refuse to specialize attribute accesses on types that haven’t had\nPyType_Ready()\ncalled on them yet.\ngh-99127\n: Allow some features of\nsyslog\nto the main interpreter\nonly. Patch by Donghee Na.\ngh-91053\n: Optimizing interpreters and JIT compilers may need to invalidate\ninternal metadata when functions are modified. This change adds the\nability to provide a callback that will be invoked each time a function is\ncreated, modified, or destroyed.\ngh-90994\n: Improve error messages when there’s a syntax error with call\narguments. The following three cases are covered: - No value is assigned\nto a named argument, eg\nfoo(a=)\n. - A value is assigned to a star\nargument, eg\nfoo(*args=[0])\n. - A value is assigned to a double-star\nkeyword argument, eg\nfoo(**kwarg={'a':\n0})\n.\nbpo-45026\n: Optimize the\nrange\nobject iterator. It is now smaller,\nfaster iteration of ranges containing large numbers. Smaller pickles,\nfaster unpickling.\nbpo-31718\n: Raise\nValueError\ninstead of\nSystemError\nwhen\nmethods of uninitialized\nio.IncrementalNewlineDecoder\nobjects are\ncalled. Patch by Oren Milman.\nbpo-38031\n: Fix a possible assertion failure in\nio.FileIO\nwhen the\nopener returns an invalid file descriptor.\nLibrary\n¶\ngh-100001\n: Also escape s in the http.server\nBaseHTTPRequestHandler.log_message so that it is technically possible to\nparse the line and reconstruct what the original data was.  Without this a\nxHH is ambiguous as to if it is a hex replacement we put in or the\ncharacters r”x” came through in the original request line.\ngh-99957\n: Add\nfrozen_default\nparameter to\ntyping.dataclass_transform()\n.\ngh-79033\n: Fix\nasyncio.Server.wait_closed()\nto actually do what the\ndocs promise – wait for all existing connections to complete, after\nclosing the server.\ngh-51524\n: Fix bug when calling trace.CoverageResults with valid infile.\ngh-99645\n: Fix a bug in handling class cleanups in\nunittest.TestCase\n.  Now\naddClassCleanup()\nuses separate lists\nfor different\nTestCase\nsubclasses, and\ndoClassCleanups()\nonly\ncleans up the particular class.\ngh-99508\n: Fix\nTypeError\nin\nLib/importlib/_bootstrap_external.py\nwhile calling\n_imp.source_hash()\n.\ngh-66285\n: Fix\nasyncio\nto not share event loop and signal wakeupfd\nin forked processes. Patch by Kumar Aditya.\ngh-97001\n: Release the GIL when calling termios APIs to avoid blocking\nthreads.\ngh-92647\n: Use final status of an enum to determine lookup or creation\nbranch of functional API.\ngh-99388\n: Add\nloop_factory\nparameter to\nasyncio.run()\nto allow\nspecifying a custom event loop factory. Patch by Kumar Aditya.\ngh-99341\n: Fix\nast.increment_lineno()\nto also cover\nast.TypeIgnore\nwhen changing line numbers.\ngh-99382\n: Check the number of arguments in substitution in user generics\ncontaining a\nTypeVarTuple\nand one or more\nTypeVar\n.\ngh-99379\n: Fix substitution of\nParamSpec\nfollowed by\nTypeVarTuple\nin generic aliases.\ngh-99344\n: Fix substitution of\nTypeVarTuple\nand\nParamSpec\ntogether in user generics.\ngh-99284\n: Remove\n_use_broken_old_ctypes_structure_semantics_\nold\nuntested and undocumented hack from\nctypes\n.\ngh-99201\n: Fix\nIndexError\nwhen initializing the config variables on\nWindows if\nHAVE_DYNAMIC_LOADING\nis not set.\ngh-99240\n: Fix double-free bug in Argument Clinic\nstr_converter\nby\nextracting memory clean up to a new\npost_parsing\nsection.\ngh-64490\n: Fix refcount error when arguments are packed to tuple in\nArgument Clinic.\ngh-99029\n:\npathlib.PurePath.relative_to()\nnow treats naked Windows\ndrive paths as relative. This brings its behaviour in line with other\nparts of pathlib.\ngh-98253\n: The implementation of the typing module is now more resilient to\nreference leaks in binary extension modules.\nPreviously, a reference leak in a typed C API-based extension module could\nleak internals of the typing module, which could in turn introduce leaks\nin essentially any other package with typed function signatures. Although\nthe typing package is not the original source of the problem, such\nnon-local dependences exacerbate debugging of large-scale projects, and\nthe implementation was therefore changed to reduce harm by providing\nbetter isolation.\ngh-98458\n: Fix infinite loop in unittest when a self-referencing chained\nexception is raised\ngh-93453\n:\nasyncio.get_event_loop()\nand many other\nasyncio\nfunctions like\nasyncio.ensure_future()\n,\nasyncio.shield()\nor\nasyncio.gather()\n, and also the\nget_event_loop()\nmethod of\nasyncio.BaseDefaultEventLoopPolicy\nnow raise a\nRuntimeError\nif called when there is no running event loop and the\ncurrent event loop was not set. Previously they implicitly created and set\na new current event loop.\nDeprecationWarning\nis no longer emitted\nif there is no running event loop but the current event loop was set.\ngh-97966\n: On\nuname_result\n, restored expectation that\n_fields\nand\n_asdict\nwould include all six properties including\nprocessor\n.\ngh-98248\n: Provide informative error messages in\nstruct.pack()\nwhen\nits integral arguments are not in range.\ngh-98108\n:\nzipfile.Path\nis now pickleable if its initialization\nparameters were pickleable (e.g. for file system paths).\ngh-98098\n: Created packages from zipfile and test_zipfile modules,\nseparating\nzipfile.Path\nfunctionality.\ngh-82836\n: Fix\nis_private\nproperties in the\nipaddress\nmodule. Previously non-private networks (0.0.0.0/0) would\nreturn\nTrue\nfrom this method; now they correctly return\nFalse\n.\ngh-96828\n: Add an\nOP_ENABLE_KTLS\noption for enabling the use\nof the kernel TLS (kTLS). Patch by Illia Volochii.\ngh-88863\n: To avoid apparent memory leaks when\nasyncio.open_connection()\nraises, break reference cycles generated\nby local exception and future instances (which has exception instance as\nits member var). Patch by Dong Uk, Kang.\ngh-91078\n:\nTarFile.next()\nnow returns\nNone\nwhen called on an\nempty tarfile.\nbpo-47220\n: Document the optional\ncallback\nparameter of\nWeakMethod\n. Patch by Géry Ogam.\nbpo-44817\n: Ignore WinError 53 (ERROR_BAD_NETPATH), 65\n(ERROR_NETWORK_ACCESS_DENIED) and 161 (ERROR_BAD_PATHNAME) when using\nntpath.realpath().\nbpo-41260\n: Rename the\nfmt\nparameter of the pure Python implementation of\ndatetime.date.strftime()\nto\nformat\n.\nbpo-15999\n: All built-in functions now accept arguments of any type instead\nof just\nbool\nand\nint\nfor boolean parameters.\nDocumentation\n¶\ngh-99931\n: Use\nsphinxext-opengraph\nto generate\nOpenGraph\nmetadata\n.\ngh-89682\n: Reworded docstring of the default\n__contains__\nto clarify\nthat it returns a\nbool\n.\ngh-88330\n: Improved the description of what a resource is in\nimportlib.resources docs.\ngh-92892\n: Document that calling variadic functions with ctypes requires\nspecial care on macOS/arm64 (and possibly other platforms).\nbpo-41825\n: Restructured the documentation for the\nos.wait*\nfamily of functions, and improved the docs for\nos.waitid()\nwith more explanation of the possible argument\nconstants.\nTests\n¶\ngh-99892\n: Skip test_normalization() of test_unicodedata if it fails to\ndownload NormalizationTest.txt file from pythontest.net. Patch by Victor\nStinner.\ngh-99934\n: Correct test_marsh on (32 bit) x86: test_deterministic sets was\nfailing.\ngh-99741\n: We’ve implemented multi-phase init (PEP 489/630/687) for the\ninternal (for testing) _xxsubinterpreters module.\ngh-99659\n: Optional big memory tests in\ntest_sqlite3\nnow catch the\ncorrect\nsqlite.DataError\nexception type in case of too large\nstrings and/or blobs passed.\ngh-99593\n: Cover the Unicode C API with tests.\ngh-96002\n: Add functional test for Argument Clinic.\nBuild\n¶\ngh-99086\n: Fix\n-Wimplicit-int\n,\n-Wstrict-prototypes\n, and\n-Wimplicit-function-declaration\ncompiler warnings in\nconfigure\nchecks.\ngh-99337\n: Fix a compilation issue with GCC 12 on macOS.\ngh-99289\n: Add a\nCOMPILEALL_OPTS\nvariable in Makefile to override\ncompileall\noptions (default:\n-j0\n) in\nmake\ninstall\n. Also\nmerged the\ncompileall\ncommands into a single command building .pyc\nfiles for the all optimization levels (0, 1, 2) at once. Patch by Victor\nStinner.\ngh-98872\n: Fix a possible fd leak in\nPrograms/_freeze_module.c\nintroduced in Python 3.11.\ngh-88226\n: Always define\nTARGET_*\nlabels in\nPython/ceval.c\n, even if\nUSE_COMPUTED_GOTOS\nis disabled.  This allows breakpoints to be set at\nthose labels in (for instance)\ngdb\n.\nWindows\n¶\ngh-99345\n: Use faster initialization functions to detect install location\nfor Windows Store package\ngh-98629\n: Fix initialization of\nsys.version\nand\nsys._git\non\nWindows\ngh-99442\n: Fix handling in\nPython Launcher for Windows\nwhen\nargv[0]\ndoes not\ninclude a file extension.\nbpo-40882\n: Fix a memory leak in\nmultiprocessing.shared_memory.SharedMemory\non Windows.\nmacOS\n¶\ngh-87235\n: On macOS\npython3\n/dev/fd/9\n9</path/to/script.py\nfailed for\nany script longer than a couple of bytes.\ngh-98940\n: Fix\nMac/Extras.install.py\nfile filter bug.\nTools/Demos\n¶\ngh-64490\n: Argument Clinic varargs bugfixes\nFix out-of-bounds error in\n_PyArg_UnpackKeywordsWithVararg()\n.\nFix incorrect check which allowed more than one varargs in clinic.py.\nFix miscalculation of\nnoptargs\nin generated code.\nDo not generate\nnoptargs\nwhen there is a vararg argument and no optional argument.\nC API\n¶\ngh-98680\n:\nPyBUF_*\nconstants were marked as part of Limited API of\nPython 3.11+. These were available in 3.11.0 with\nPy_LIMITED_API\ndefined for 3.11, and are necessary to use the\nbuffer API.\ngh-99612\n: Fix\nPyUnicode_DecodeUTF8Stateful()\nfor ASCII-only data:\n*consumed\nwas not set.\ngh-47146\n: The\nstructmember.h\nheader is deprecated. Its non-deprecated\ncontents are now available just by including\nPython.h\n, with a\nPy_\nprefix added if it was missing. (Deprecated contents are\nT_OBJECT\n,\nT_NONE\n, and no-op flags.) Patch by Petr\nViktorin, based on earlier work by Alexander Belopolsky and Matthias\nBraun.\nPython 3.12.0 alpha 2\n¶\nRelease date: 2022-11-14\nSecurity\n¶\ngh-98433\n: The IDNA codec decoder used on DNS hostnames by\nsocket\nor\nasyncio\nrelated name resolution functions no longer involves a\nquadratic algorithm. This prevents a potential CPU denial of service if an\nout-of-spec excessive length hostname involving bidirectional characters\nwere decoded. Some protocols such as\nurllib\nhttp\n3\nxx\nredirects potentially allow for an attacker to supply such a name.\nIndividual labels within an IDNA encoded DNS name will now raise an error\nearly during IDNA decoding if they are longer than 1024 unicode characters\ngiven that each decoded DNS label must be 63 or fewer characters and the\nentire decoded DNS name is limited to 255. Only an application presenting\na hostname or label consisting primarily of\nRFC 3454\nsection 3.1\n“Nothing” characters to be removed would run into of this new limit. See\nalso\nRFC 5894\nsection 6 and\nRFC 3491\n.\ngh-98739\n: Update bundled libexpat to 2.5.0\nCore and Builtins\n¶\ngh-81057\n: The docs clearly say that\nPyImport_Inittab\n,\nPyImport_AppendInittab()\n, and\nPyImport_ExtendInittab()\nshould not be used after\nPy_Initialize()\nhas been called. We now\nenforce this for the two functions.  Additionally, the runtime now uses an\ninternal copy of\nPyImport_Inittab\n, to guard against modification.\ngh-99298\n: Fix an issue that could potentially cause incorrect error\nhandling for some bytecode instructions.\ngh-99254\n: The compiler now removes all unused constants from code objects\n(except the first one, which may be a docstring).\ngh-99205\n: Fix an issue that prevented\nPyThreadState\nand\nPyInterpreterState\nmemory from being freed properly.\ngh-81057\n: The 18 global C variables holding the state of the allocators\nhave been moved to\n_PyRuntimeState\n.  This is a strictly internal\nchange with no change in behavior.\ngh-99181\n: Fix failure in\nexcept*\nwith unhashable\nexceptions.\ngh-99204\n: Fix calculation of\nsys._base_executable\nwhen inside a\nPOSIX virtual environment using copies of the python binary when the base\ninstallation does not provide the executable name used by the venv.\nCalculation will fall back to alternative names (“python<MAJOR>”,\n“python<MAJOR>.<MINOR>”).\ngh-96055\n: Update\nfaulthandler\nto emit an error message with the\nproper unexpected signal number. Patch by Donghee Na.\ngh-99153\n: Fix location of\nSyntaxError\nfor a\ntry\nblock\nwith both\nexcept\nand\nexcept*\n.\ngh-98686\n: Merge the adaptive opcode logic into each instruction’s\nunquickened variant, and merge the logic in\nEXTENDED_ARG_QUICK\ninto\nEXTENDED_ARG\n. With these changes, the quickening that happens at\ncode object creation is now only responsible for initializing warmup\ncounters and inserting superinstructions.\ngh-99103\n: Fix the error reporting positions of specialized traceback\nanchors when the source line contains Unicode characters.\ngh-99139\n: Improve the error suggestion for\nNameError\nexceptions for\ninstances. Now if a\nNameError\nis raised in a method and the\ninstance has an attribute that’s exactly equal to the name in the\nexception, the suggestion will include\nself.<NAME>\ninstead of the\nclosest match in the method scope. Patch by Pablo Galindo\ngh-98401\n: Octal escapes with value larger than\n0o377\n(ex:\n\"\\477\"\n),\ndeprecated in Python 3.11, now produce a\nSyntaxWarning\n, instead of\nDeprecationWarning\n. In a future Python version they will be\neventually a\nSyntaxError\n. Patch by Victor Stinner.\ngh-98401\n: A backslash-character pair that is not a valid escape sequence\nnow generates a\nSyntaxWarning\n, instead of\nDeprecationWarning\n.  For example,\nre.compile(\"\\d+\\.\\d+\")\nnow\nemits a\nSyntaxWarning\n(\n\"\\d\"\nis an invalid escape sequence), use\nraw strings for regular expression:\nre.compile(r\"\\d+\\.\\d+\")\n. In a\nfuture Python version,\nSyntaxError\nwill eventually be raised,\ninstead of\nSyntaxWarning\n. Patch by Victor Stinner.\ngh-96793\n: Handle StopIteration and StopAsyncIteration raised in generator\nor coroutines in the bytecode, rather than in wrapping C code.\ngh-98931\n: Improve the\nSyntaxError\nerror message when the user types\nimport\nx\nfrom\ny\ninstead of\nfrom\ny\nimport\nx\n. Patch by Pablo Galindo\ngh-98852\n: Fix subscription of type aliases containing bare generic types\nor types like\nTypeVar\n: for example\ntuple[A,\nT][int]\nand\ntuple[TypeVar,\nT][int]\n, where\nA\nis a generic type, and\nT\nis a type variable.\ngh-98925\n: Lower the recursion depth for marshal on WASI to support\n(in-development) wasmtime 2.0.\ngh-98783\n: Fix multiple crashes in debug mode when\nstr\nsubclasses are\nused instead of\nstr\nitself.\ngh-98811\n: Use complete source locations to simplify detection of\n__future__\nimports which are not at the beginning of the file. Also\ncorrects the offset in the exception raised in one case, which was off by\none and impeded highlighting.\ngh-96793\n: Add specialization of\nFOR_ITER\nfor generators. Saves\nmultiple layers of dispatch and checking to get from the\nFOR_ITER\ninstruction in the caller to the\nRESUME\nin\nthe generator.\ngh-98762\n: Fix source locations of\nmatch\nsub-patterns.\ngh-98586\n: Added the methods\nPyObject_Vectorcall()\nand\nPyObject_VectorcallMethod()\nto the\nLimited API\nalong with the auxiliary macro constant\nPY_VECTORCALL_ARGUMENTS_OFFSET\n.\nThe availability of these functions enables more efficient\nPEP 590\nvector calls from binary extension modules that avoid argument\nboxing/unboxing overheads.\ngh-99257\n: Fix an issue where member descriptors (such as those for\n__slots__\n) could behave incorrectly or crash instead of\nraising a\nTypeError\nwhen accessed via an instance of an invalid\ntype.\ngh-93143\n: Rather than changing\nco_code\n, the\ninterpreter will now display a\nRuntimeWarning\nand assign\nNone\nto any fast locals that are left unbound after jumps or\ndel\nstatements executed while tracing.\ngh-96421\n: When calling into Python code from C code, through\nPyEval_EvalFrameEx()\nor a related C-API function, a shim frame in\ninserted into the call stack. This occurs in the\n_PyEval_EvalFrameDefault()\nfunction. The extra frame should be\ninvisible to all Python and most C extensions, but out-of-process\nprofilers and debuggers need to be aware of it. These shim frames can be\ndetected by checking\nframe->owner\n==\nFRAME_OWNED_BY_CSTACK\n.\nExtensions implementing their own interpreters using PEP 523 need to be\naware of this shim frame and the changes to the semantics of\nRETURN_VALUE\n,\nYIELD_VALUE\n, and\nRETURN_GENERATOR\n, which now clear the frame.\ngh-98415\n: Fix detection of MAC addresses for\nuuid\non certain OSs.\nPatch by Chaim Sanders\ngh-98686\n: Quicken all code objects, and specialize adaptive bytecode\ninstructions more aggressively.\ngh-92119\n: Print exception class name instead of its string representation\nwhen raising errors from\nctypes\ncalls.\ngh-91058\n:\nImportError\nraised from failed\nfrom\n<module>\nimport\n<name>\nnow include suggestions for the value of\n<name>\nbased on the\navailable names in\n<module>\n. Patch by Pablo Galindo\ngh-96793\n: The\nFOR_ITER\nnow leaves the iterator on the stack on\ntermination of the loop. This is to assist specialization of loops for\ngenerators.\ngh-90716\n: Add _pylong.py module.  It includes asymptotically faster\nalgorithms that can be used for operations on integers with many digits.\nIt is used by longobject.c to speed up some operations.\ngh-95389\n: Expose\nETH_P_ALL\nand some of the\nETHERTYPE_* constants\nin\nsocket\n.\nPatch by Noam Cohen.\ngh-93696\n: Allow\npdb\nto locate source for frozen modules in the\nstandard library.\nLibrary\n¶\ngh-99418\n: Fix bug in\nurllib.parse.urlparse()\nthat causes URL schemes\nthat begin with a digit, a plus sign, or a minus sign to be parsed\nincorrectly.\ngh-94597\n: Deprecate\nasyncio.AbstractChildWatcher\nto be removed in\nPython 3.14. Patch by Kumar Aditya.\ngh-99305\n: Improve performance of\nsecrets.token_hex()\n.\ngh-74044\n: Fixed bug where\ninspect.signature()\nreported incorrect\narguments for decorated methods.\ngh-99275\n: Fix\nSystemError\nin\nctypes\nwhen exception was not set\nduring\n__initsubclass__\n.\ngh-99277\n: Remove older version of\n_SSLProtocolTransport.get_write_buffer_limits\nin\nasyncio.sslproto\ngh-99248\n: fix negative numbers failing in verify()\ngh-99155\n: Fix\nstatistics.NormalDist\npickle with\n0\nand\n1\nprotocols.\ngh-93464\n:\nenum.auto()\nis now correctly activated when combined with\nother assignment values.  E.g.\nONE\n=\nauto(),\n'some\ntext'\nwill now\nevaluate as\n(1,\n'some\ntext')\n.\ngh-99134\n: Update the bundled copy of pip to version 22.3.1.\ngh-92584\n: Remove the\ndistutils\npackage. It was deprecated in Python\n3.10 by\nPEP 632\n“Deprecate distutils module”. For projects still using\ndistutils\nand cannot be updated to something else, the\nsetuptools\nproject can be installed: it still provides\ndistutils\n. Patch by Victor\nStinner.\ngh-98999\n: Now\n_pyio\nis consistent with\n_io\nin raising\nValueError\nwhen executing methods over closed buffers.\ngh-83004\n: Clean up refleak on failed module initialisation in\n_zoneinfo\ngh-83004\n: Clean up refleaks on failed module initialisation in\n_pickle\ngh-83004\n: Clean up refleak on failed module initialisation in\n_io\n.\ngh-98897\n: Fix memory leak in\nmath.dist()\nwhen both points don’t have\nthe same dimension. Patch by Kumar Aditya.\ngh-98878\n: Use the frame bound builtins when offering a name suggestion in\ntraceback\nto prevent crashing when\n__builtins__\nis not a dict.\ngh-98139\n: In\nimportlib._bootstrap\n, enhance namespace package repr\nto\n<module\n'x'\n(namespace)\nfrom\n['path']>\n.\ngh-90352\n: Fix\n_SelectorDatagramTransport\nto inherit from\nDatagramTransport\nin\nasyncio\n. Patch by Kumar\nAditya.\ngh-98793\n: Fix argument typechecks in\n_overlapped.WSAConnect()\nand\n_overlapped.Overlapped.WSASendTo()\nfunctions.\ngh-98744\n: Prevent crashing in\ntraceback\nwhen retrieving the\nbyte-offset for some source files that contain certain unicode characters.\ngh-98740\n: Fix internal error in the\nre\nmodule which in very rare\ncircumstances prevented compilation of a regular expression containing a\nconditional expression\nwithout the\n“else” branch.\ngh-98703\n: Fix\nasyncio.StreamWriter.drain()\nto call\nprotocol.connection_lost\ncallback only once on Windows.\ngh-98624\n: Add a mutex to unittest.mock.NonCallableMock to protect\nconcurrent access to mock attributes.\ngh-98658\n: The\narray.array\nclass now supports subscripting, making\nit a\ngeneric type\n.\ngh-98284\n: Improved\nTypeError\nmessage for undefined abstract\nmethods of a\nabc.ABC\ninstance. The names of the missing methods\nare surrounded by single-quotes to highlight them.\ngh-96151\n: Allow\nBUILTINS\nto be a valid field name for frozen\ndataclasses.\ngh-98086\n: Make sure\npatch.dict()\ncan be applied on async functions.\ngh-72719\n: Remove modules\nasyncore\nand\nasynchat\n, which were\ndeprecated by\nPEP 594\n.\ngh-96192\n: Fix handling of\nbytes\npath-like objects\nin\nos.ismount()\n.\ngh-94172\n:\nftplib\n: Remove the\nFTP_TLS.ssl_version\nclass\nattribute: use the\ncontext\nparameter instead. Patch by Victor Stinner\ngh-94172\n: Remove the\nkeyfile\nand\ncertfile\nparameters from the\nftplib\n,\nimaplib\n,\npoplib\nand\nsmtplib\nmodules,\nand the\nkey_file\n,\ncert_file\nand\ncheck_hostname\nparameters from the\nhttp.client\nmodule, all deprecated since Python 3.6. Use the\ncontext\nparameter (\nssl_context\nin\nimaplib\n) instead. Patch by\nVictor Stinner.\ngh-83638\n: Add the\nautocommit\nattribute to\nsqlite3.Connection\nand the\nautocommit\nparameter to\nsqlite3.connect()\nto control\nPEP 249\n-compliant\ntransaction\nhandling\n. Patch by Erlend E.\nAasland.\ngh-92452\n: Fixed a race condition that could cause\nsysconfig.get_config_var()\nto incorrectly return\nNone\nin\nmulti-threaded programs.\ngh-91803\n: Fix an error when using a method of objects mocked with\nunittest.mock.create_autospec()\nafter it was sealed with\nunittest.mock.seal()\nfunction.\nbpo-38523\n:\nshutil.copytree()\nnow applies the\nignore_dangling_symlinks\nargument recursively.\nbpo-40358\n: Add walk_up argument in\npathlib.PurePath.relative_to()\n.\nbpo-36267\n: Fix IndexError in\nargparse.ArgumentParser\nwhen a\nstore_true\naction is given an explicit argument.\nDocumentation\n¶\ngh-98832\n: Changes wording of docstring for\npathlib.Path.iterdir()\n.\ngh-97966\n: Update uname docs to clarify the special nature of the platform\nattribute and to indicate when it became late-bound.\nTests\n¶\ngh-98903\n: The Python test suite now fails with exit code 4 if no tests\nran. It should help detecting typos in test names and test methods.\ngh-98713\n: Fix a bug in the\ntyping\ntests where a test relying on\nCPython-specific implementation details was not decorated with\n@cpython_only\nand was not skipped on other implementations.\ngh-87390\n: Add tests for star-unpacking with PEP 646, and some other\nmiscellaneous PEP 646 tests.\ngh-96853\n: Added explicit coverage of\nPy_Initialize\n(and hence\nPy_InitializeEx\n) back to the embedding tests (all other embedding\ntests migrated to\nPy_InitializeFromConfig\nin Python 3.11)\nbpo-34272\n: Some C API tests were moved into the new Lib/test/test_capi/\ndirectory.\nBuild\n¶\ngh-99086\n: Fix\n-Wimplicit-int\ncompiler warning in\nconfigure\ncheck for\nPTHREAD_SCOPE_SYSTEM\n.\ngh-99016\n: Fix build with\nPYTHON_FOR_REGEN=python3.8\n.\ngh-97731\n: Specify the full path to the source location for\nmake\ndocclean\n(needed for cross-builds).\ngh-98949\n: Drop unused build dependency on\nreadelf\n.\ngh-98989\n: Use\npython3.11\n, if available, for regeneration and freezing.\ngh-98831\n: Add new tooling, in\nTools/cases_generator\n, to generate the\ninterpreter switch statement from a list of opcode definitions. This only\naffects adding, modifying or removing instruction definitions. The\ninstruction definitions now live in\nPython/bytecodes.c\n, in the form of\na\ncustom DSL (under development)\n.\nThe tooling reads this file and writes\nPython/generated_cases.c.h\n,\nwhich is then included by\nPython/ceval.c\nto provide most of the cases\nof the main interpreter switch.\ngh-98817\n: Remove PCbuild/lib.pyproj: it’s not used for anything, is only a\nminor convenience for Visual Studio users (who probably mostly don’t even\nknow about it), and it takes a lot of maintenance effort to keep updated.\ngh-98776\n: Fix\nmake\nregen-test-levenshtein\nfor out-of-tree builds.\ngh-98707\n: Don’t use vendored\nlibmpdec\nheaders if\n--with-system-libmpdec\nis passed to\nconfigure\n. Don’t\nuse vendored\nlibexpat\nheaders if\n--with-system-expat\nis\npassed to\nconfigure\n.\nWindows\n¶\ngh-98689\n: Update Windows builds to zlib v1.2.13.  v1.2.12 has\nCVE 2022-37434\n, but the vulnerable\ninflateGetHeader\nAPI is not used\nby Python.\ngh-98790\n: Assumes that a missing\nDLLs\ndirectory means that standard\nextension modules are in the executable’s directory.\ngh-98745\n: Update\npy.exe\nlauncher to install 3.11 by default and\n3.12 on request.\ngh-98692\n: Fix the\nPython Launcher for Windows\nignoring unrecognized shebang lines\ninstead of treating them as local paths\ngh-94328\n: Update Windows installer to use SQLite 3.39.4.\nmacOS\n¶\ngh-94328\n: Update macOS installer to SQLite 3.39.4.\nC API\n¶\ngh-98724\n: The\nPy_CLEAR\n,\nPy_SETREF\nand\nPy_XSETREF\nmacros now only evaluate their argument once. If the\nargument has side effects, these side effects are no longer duplicated.\nPatch by Victor Stinner.\ngh-98978\n: Fix use-after-free in\nPy_SetPythonHome(NULL)\n,\nPy_SetProgramName(NULL)\nand\n_Py_SetProgramFullPath(NULL)\nfunction\ncalls. Issue reported by Benedikt Reinartz. Patch by Victor Stinner.\ngh-98410\n: Add\ngetbufferproc\nand\nreleasebufferproc\nto the stable\nAPI.\ngh-98610\n: Some configurable capabilities of sub-interpreters have changed.\nThey always allow subprocesses (\nsubprocess\n) now, whereas before\nsubprocesses could be optionally disallowed for a sub-interpreter. Instead\nos.exec()\ncan now be disallowed. Disallowing daemon threads is now\nsupported.  Disallowing all threads is still allowed, but is never done by\ndefault. Note that the optional restrictions are only available through\n_Py_NewInterpreterFromConfig()\n, which isn’t a public API. They do not\naffect the main interpreter, nor\nPy_NewInterpreter()\n.\ngh-98608\n: A\n_PyInterpreterConfig\nhas been added and\n_Py_NewInterpreter()\nhas been renamed to\n_Py_NewInterpreterFromConfig()\n.  The “isolated_subinterpreters”\nargument is now a granular config that captures the previous behavior.\nNote that this is all “private” API.\ngh-96853\n:\nPy_InitializeEx\nnow correctly calls\nPyConfig_Clear\nafter\ninitializing the interpreter (the omission didn’t cause a memory leak only\nbecause none of the dynamically allocated config fields are populated by\nthe wrapper function)\ngh-91248\n: Add\nPyFrame_GetVar()\nand\nPyFrame_GetVarString()\nfunctions to get a frame variable by its name. Patch by Victor Stinner.\nPython 3.12.0 alpha 1\n¶\nRelease date: 2022-10-25\nSecurity\n¶\ngh-97616\n: Fix multiplying a list by an integer (\nlist\n*=\nint\n): detect\nthe integer overflow when the new allocated length is close to the maximum\nsize. Issue reported by Jordan Limor.  Patch by Victor Stinner.\ngh-97514\n: On Linux the\nmultiprocessing\nmodule returns to using\nfilesystem backed unix domain sockets for communication with the\nforkserver\nprocess instead of the Linux abstract socket namespace.  Only\ncode that chooses to use the\n“forkserver” start method\nis affected.\nAbstract sockets have no permissions and could allow any user on the\nsystem in the same\nnetwork namespace\n(often\nthe whole system) to inject code into the multiprocessing\nforkserver\nprocess. This was a potential privilege escalation. Filesystem based\nsocket permissions restrict this to the\nforkserver\nprocess user as was\nthe default in Python 3.8 and earlier.\nThis prevents Linux\nCVE 2022-42919\n.\ngh-87389\n:\nhttp.server\n: Fix an open redirection vulnerability in the\nHTTP server when an URI path starts with\n//\n.  Vulnerability\ndiscovered, and initial fix proposed, by Hamza Avvan.\ngh-79096\n: LWPCookieJar and MozillaCookieJar create files with file mode\n600 instead of 644 (Microsoft Windows is not affected)\ngh-92888\n: Fix\nmemoryview\nuse after free when accessing the backing\nbuffer in certain cases.\ngh-68966\n: The deprecated mailcap module now refuses to inject unsafe text\n(filenames, MIME types, parameters) into shell commands. Instead of using\nsuch text, it will warn and act as if a match was not found (or for test\ncommands, as if the test failed).\nCore and Builtins\n¶\ngh-98374\n: Suppress ImportError for invalid query for help() command. Patch\nby Donghee Na.\ngh-98461\n: Fix source location in bytecode for list, set and dict\ncomprehensions as well as generator expressions.\ngh-98354\n: Added unicode check for\nname\nattribute of\nspec\nargument\npassed in\n_imp.create_builtin()\nfunction.\ngh-98398\n: Fix source location of ‘assert’ bytecodes.\ngh-98390\n: Fix location of sub-expressions of boolean expressions, by\nreducing their scope to that of the sub-expression.\ngh-98254\n: Modules from the standard library are now potentially suggested\nas part of the error messages displayed by the interpreter when an\nNameError\nis raised to the top level. Patch by Pablo Galindo\ngh-97997\n: Add running column offset to the tokenizer state to avoid\ncalculating AST column information with pointer arithmetic.\ngh-97973\n: Modify the tokenizer to return all necessary information the\nparser needs to set location information in the AST nodes, so that the\nparser does not have to calculate those doing pointer arithmetic.\ngh-96078\n:\nos.sched_yield()\nnow release the GIL while calling\nsched_yield(2). Patch by Donghee Na.\ngh-97955\n: Migrate\nzoneinfo\nto Argument Clinic.\ngh-97912\n: The compiler now avoids quadratic behavior when finding which\ninstructions should use the\nLOAD_FAST_CHECK\nopcode.\ngh-97002\n: Fix an issue where several frame objects could be backed by the\nsame interpreter frame, possibly leading to corrupted memory and hard\ncrashes of the interpreter.\ngh-97943\n: Bugfix:\nPyFunction_GetAnnotations()\nshould return a\nborrowed reference. It was returning a new reference.\ngh-97922\n: The Garbage Collector now runs only on the eval breaker\nmechanism of the Python bytecode evaluation loop instead on object\nallocations. The GC can also run when\nPyErr_CheckSignals()\nis\ncalled so C extensions that need to run for a long time without executing\nany Python code also have a chance to execute the GC periodically.\ngh-65961\n: When\n__package__\nis different than\n__spec__.parent\n,\nraise a\nDeprecationWarning\ninstead of\nImportWarning\n.\nAlso remove\nimportlib.util.set_package()\nwhich was scheduled for\nremoval.\ngh-97850\n: Long deprecated,\nmodule_repr()\nshould now be completely\neradicated.\ngh-86298\n: In cases where\nwarnings.warn_explicit()\nconsults the\nmodule’s loader, an\nDeprecationWarning\nis issued when\nm.__loader__\ndiffers from\nm.__spec__.loader\n.\ngh-97779\n: Ensure that all Python frame objects are backed by “complete”\nframes.\ngh-91052\n: Add API for subscribing to modification events on selected\ndictionaries.\ngh-97752\n: Fix possible data corruption or crashes when accessing the\nf_back\nmember of newly-created generator or coroutine frames.\ngh-97591\n: Fixed a missing incref/decref pair in\nException.__setstate__()\n. Patch by Ofey Chan.\ngh-97670\n: Remove the\nsys.getdxp()\nfunction and the\nTools/scripts/analyze_dxp.py\nscript. DXP stands for “dynamic execution\npairs”. They were related to\nDYNAMIC_EXECUTION_PROFILE\nand\nDXPAIRS\nmacros which have been removed in Python 3.11. Python can now be built\nwith\n./configure\n--enable-pystats\nto gather\nstatistics on Python opcodes.  Patch by Victor Stinner.\ngh-94526\n: Fix the Python path configuration used to initialized\nsys.path\nat Python startup. Paths are no longer encoded to\nUTF-8/strict to avoid encoding errors if it contains surrogate characters\n(bytes paths are decoded with the surrogateescape error handler). Patch by\nVictor Stinner.\ngh-96670\n: The parser now raises\nSyntaxError\nwhen parsing source\ncode containing null bytes. Patch by Pablo Galindo\ngh-96975\n: Fix a crash occurring when\nPyEval_GetFrame()\nis called\nwhile the topmost Python frame is in a partially-initialized state.\ngh-96848\n: Fix command line parsing: reject\n-X\nint_max_str_digits\noption with no value (invalid) when the\nPYTHONINTMAXSTRDIGITS\nenvironment variable is set to a valid\nlimit. Patch by Victor Stinner.\ngh-95921\n: Fix overly-broad source position information for chained\ncomparisons used as branching conditions.\ngh-96821\n: Fix undefined behaviour in\naudioop.c\n.\ngh-96821\n: Fix undefined behaviour in\n_testcapimodule.c\n.\ngh-95778\n: When\nValueError\nis raised if an integer is larger than\nthe limit, mention the\nsys.set_int_max_str_digits()\nfunction in the\nerror message. Patch by Victor Stinner.\ngh-96387\n: At Python exit, sometimes a thread holding the GIL can wait\nforever for a thread (usually a daemon thread) which requested to drop the\nGIL, whereas the thread already exited. To fix the race condition, the\nthread which requested the GIL drop now resets its request before exiting.\nIssue discovered and analyzed by Mingliang ZHAO. Patch by Victor Stinner.\ngh-96864\n: Fix a possible assertion failure, fatal error, or\nSystemError\nif a line tracing event raises an exception while\nopcode tracing is enabled.\ngh-95778\n: The\nPyLong_FromString\nfunction was refactored to make it\nmore maintainable and extensible.\ngh-96678\n: Fix undefined behaviour in C code of null pointer arithmetic.\ngh-96754\n: Make sure that all frame objects created are created from valid\ninterpreter frames. Prevents the possibility of invalid frames in\nbacktraces and signal handlers.\ngh-90997\n: Improve the performance of reading and writing inline bytecode\ncaches on some platforms.\ngh-96751\n: Remove dead code from\nCALL_FUNCTION_EX\nopcode.\ngh-90751\n:\nmemoryview\nnow supports half-floats. Patch by Donghee\nNa and Antoine Pitrou.\ngh-96678\n: Fix case of undefined behavior in ceval.c\ngh-64373\n: Convert\n_functools\nto argument clinic.\ngh-96641\n: Do not expose\nKeyWrapper\nin\n_functools\n.\ngh-96636\n: Ensure that tracing,\nsys.setrace()\n, is turned on\nimmediately. In pre-release versions of 3.11, some tracing events might\nhave been lost when turning on tracing in a\n__del__\nmethod or\ninterrupt.\ngh-96572\n: Fix use after free in trace refs build mode. Patch by Kumar\nAditya.\ngh-96611\n: When loading a file with invalid UTF-8 inside a multi-line\nstring, a correct SyntaxError is emitted.\ngh-96612\n: Make sure that incomplete frames do not show up in tracemalloc\ntraces.\ngh-90230\n: Fix compiler warnings and test failures when building with\n--enable-pystats\n.\ngh-96587\n: Correctly raise\nSyntaxError\non exception groups (\nPEP 654\n)\non python versions prior to 3.11\ngh-96569\n: Remove two cases of undefined behavior, by adding NULL checks.\ngh-96582\n: Fix possible\nNULL\npointer dereference in\n_PyThread_CurrentFrames\n. Patch by Kumar Aditya.\ngh-91079\n: Separate Python recursion checking from C recursion checking\nwhich reduces the chance of C stack overflow and allows the recursion\nlimit to be increased safely.\ngh-93911\n: Fix an issue that could prevent\nLOAD_ATTR\nfrom\nspecializing properly when accessing properties.\ngh-96348\n: Emit a DeprecationWarning when\nthrow()\n,\nthrow()\nor\nathrow()\nare called with more than\none argument.\ngh-95196\n: Disable incorrect pickling of the C implemented classmethod\ndescriptors.\ngh-96364\n: Fix text signatures of\nlist.__getitem__\nand\ndict.__getitem__\n.\ngh-96352\n: Fix\nAttributeError\nmissing\nname\nand\nobj\nattributes in\nobject.__getattribute__()\n. Patch by Philip Georgi.\ngh-93554\n: Change the jump opcodes so that all conditional jumps are\nforward jumps. Backward jumps are converted by the assembler into a\nconditional forward jump whose target is the fallthrough block (and with a\nreversed condition), followed by an unconditional backward jump. For\nexample:\nPOP_JUMP_IF_TRUE\nBACKWARD_TARGET\nbecomes\nPOP_JUMP_IF_FALSE\nNEXT_BLOCK;\nJUMP\nBACKWARD_TARGET\n.\nAll the directed conditional jump opcodes were removed:\nPOP_JUMP_FORWARD_IF_TRUE\n,\nPOP_JUMP_BACKWARD_IF_TRUE\n,\nPOP_JUMP_FORWARD_IF_FALSE\n,\nPOP_JUMP_BACKWARD_IF_FALSE\n,\nPOP_JUMP_FORWARD_IF_NONE\n,\nPOP_JUMP_BACKWARD_IF_NONE\n,\nPOP_JUMP_FORWARD_IF_NOT_NONE\n,\nPOP_JUMP_BACKWARD_IF_NOT_NONE\n.\nThe corresponding opcodes without direction are no longer\npseudo-instructions, and they implement the forward conditional jumps.\ngh-96268\n: Loading a file with invalid UTF-8 will now report the broken\ncharacter at the correct location.\ngh-96237\n: The internal field\n_PyInterpreterFrame.f_func\nis renamed to\n_PyInterpreterFrame.f_funcobj\nand may be any object. The\nf_globals\nand\nf_builtin\nfields may hold junk values.\nIt is safest to treat the\n_PyInterpreterFrame\nstruct as opaque.\ngh-96187\n: Fixed a bug that caused\n_PyCode_GetExtra\nto return garbage\nfor negative indexes. Patch by Pablo Galindo\ngh-96143\n: Add a new\n-X\nperf\nPython command line option as well as\nsys.activate_stack_trampoline()\nand\nsys.deactivate_stack_trampoline()\nfunction in the\nsys\nmodule\nthat allows to set/unset the interpreter in a way that the Linux\nperf\nprofiler can detect Python calls. The new\nsys.is_stack_trampoline_active()\nfunction allows to query the state\nof the perf trampoline. Design by Pablo Galindo. Patch by Pablo Galindo\nand Christian Heimes with contributions from Gregory P. Smith [Google] and\nMark Shannon.\ngh-96071\n: Fix a deadlock in\nPyGILState_Ensure()\nwhen allocating\nnew thread state. Patch by Kumar Aditya.\ngh-96046\n:\nPyType_Ready()\nnow initializes\nht_cached_keys\nand\nperforms additional checks to ensure that type objects are properly\nconfigured. This avoids crashes in 3rd party packages that don’t use\nregular API to create new types.\ngh-96005\n: On WASI\nENOTCAPABLE\nis now mapped to\nPermissionError\n. The\nerrno\nmodules exposes the new error\nnumber.\ngetpath.py\nnow ignores\nPermissionError\nwhen it cannot\nopen landmark files\npybuilddir.txt\nand\npyenv.cfg\n.\ngh-93678\n: Added test a harness for direct unit tests of the compiler’s\noptimization stage. The\n_testinternalcapi.optimize_cfg()\nfunction runs\nthe optimiser on a sequence of instructions. The\nCfgOptimizationTestCase\nclass in\ntest.support\nhas utilities for\ninvoking the optimizer and checking the output.\ngh-95245\n: Reduces the size of a “simple” Python object from 8 to 6 words\nby moving the weakreflist pointer into the pre-header directly before the\nobject’s dict/values pointer.\ngh-90997\n: Compile virtual\ntry\n/\nexcept\nblocks to\nhandle exceptions raised during\nclose()\nor\nthrow()\ncalls through a suspended frame.\ngh-95977\n: Optimized calling\n__get__()\nwith vectorcall. Patch\nby Kumar Aditya.\ngh-91210\n: Improve error message when a parameter without a default value\nfollows one with a default value, and show the same message, even when the\nnon-default/default sequence is preceded by positional-only parameters.\ngh-95922\n: Fixed bug where the compiler’s\neliminate_empty_basic_blocks\nfunction ignores the last block of the code unit.\ngh-95818\n: Skip over incomplete frames in\nPyThreadState_GetFrame()\n.\ngh-95876\n: Fix format string in\n_PyPegen_raise_error_known_location\nthat can lead to memory corruption on some 64bit systems. The function was\nbuilding a tuple with\ni\n(int) instead of\nn\n(Py_ssize_t) for\nPy_ssize_t arguments.\ngh-95605\n: Fix misleading contents of error message when converting an\nall-whitespace string to\nfloat\n.\ngh-95150\n: Update code object hashing and equality to consider all\ndebugging and exception handling tables. This fixes an issue where certain\nnon-identical code objects could be “deduplicated” during compilation.\ngh-91146\n: Reduce allocation size of\nlist\nfrom\nstr.split()\nand\nstr.rsplit()\n. Patch by Donghee Na and Inada Naoki.\ngh-87092\n: Create a ‘jump target label’ abstraction in the compiler so that\nthe compiler’s codegen stage does not work directly with basic blocks.\nThis prepares the code for changes to the underlying CFG generation\nmechanism.\ngh-95355\n:\n_PyPegen_Parser_New\nnow properly detects token memory\nallocation errors. Patch by Honglin Zhu.\ngh-90081\n: Run Python code in tracer/profiler function at full speed. Fixes\nslowdown in earlier versions of 3.11.\ngh-95324\n: Emit a warning in debug mode if an object does not call\nPyObject_GC_UnTrack()\nbefore deallocation. Patch by Pablo Galindo.\ngh-95245\n: Merge managed dict and values pointer into a single tagged\npointer to save one word in the pre-header.\ngh-93678\n: Add cfg_builder struct and refactor the relevant code so that a\ncfg can be constructed without an instance of the compiler struct.\ngh-95185\n: Prevented crashes in the AST constructor when compiling some\nabsurdly long expressions like\n\"+0\"*1000000\n.\nRecursionError\nis\nnow raised instead. Patch by Pablo Galindo\ngh-93351\n:\nast.AST\nnode positions are now validated when provided\nto\ncompile()\nand other related functions. If invalid positions are\ndetected, a\nValueError\nwill be raised.\ngh-94438\n: Fix an issue that caused extended opcode arguments and some\nconditional pops to be ignored when calculating valid jump targets for\nassignments to the\nf_lineno\nattribute of frame objects. In some cases,\nthis could cause inconsistent internal state, resulting in a hard crash of\nthe interpreter.\ngh-95060\n: Undocumented\nPyCode_Addr2Location\nfunction now properly\nreturns when\naddrq\nargument is less than zero.\ngh-95113\n: Replace all\nEXTENDED_ARG_QUICK\ninstructions with basic\nEXTENDED_ARG\ninstructions in unquickened code. Consumers of\nnon-adaptive bytecode should be able to handle extended arguments the same\nway they were handled in CPython 3.10 and older.\ngh-91409\n: Fix incorrect source location info caused by certain\noptimizations in the bytecode compiler.\ngh-95023\n: Implement\nos.setns()\nand\nos.unshare()\nfor Linux.\nPatch by Noam Cohen.\ngh-94036\n: Fix incorrect source location info for some multi-line attribute\naccesses and method calls.\ngh-94938\n: Fix error detection in some builtin functions when keyword\nargument name is an instance of a str subclass with overloaded\n__eq__\nand\n__hash__\n. Previously it could cause SystemError or other undesired\nbehavior.\ngh-94996\n:\nast.parse()\nwill no longer parse function definitions with\npositional-only params when passed\nfeature_version\nless than\n(3,\n8)\n. Patch by Shantanu Jain.\ngh-94739\n: Allow jumping within, out of, and across exception handlers in\nthe debugger.\ngh-94949\n:\nast.parse()\nwill no longer parse parenthesized context\nmanagers when passed\nfeature_version\nless than\n(3,\n9)\n. Patch by\nShantanu Jain.\ngh-94947\n:\nast.parse()\nwill no longer parse assignment expressions\nwhen passed\nfeature_version\nless than\n(3,\n8)\n. Patch by Shantanu\nJain.\ngh-91256\n: Ensures the program name is known for help text during\ninterpreter startup.\ngh-94869\n: Fix the column offsets for some expressions in multi-line\nf-strings\nast\nnodes. Patch by Pablo Galindo.\ngh-94893\n: Fix an issue where frame object manipulations could corrupt\ninline bytecode caches.\ngh-94822\n: Fix an issue where lookups of metaclass descriptors may be\nignored when an identically-named attribute also exists on the class\nitself.\ngh-91153\n: Fix an issue where a\nbytearray\nitem assignment could\ncrash if it’s resized by the new value’s\n__index__()\nmethod.\ngh-90699\n: Fix reference counting bug in\nbool.__repr__()\n. Patch by\nKumar Aditya.\ngh-94694\n: Fix an issue that could cause code with multi-line method\nlookups to have misleading or incorrect column offset information. In some\ncases (when compiling a hand-built AST) this could have resulted in a hard\ncrash of the interpreter.\ngh-93252\n: Fix an issue that caused internal frames to outlive failed\nPython function calls, possibly resulting in memory leaks or hard\ninterpreter crashes.\ngh-94215\n: Fix an issue where exceptions raised by line-tracing events\nwould cause frames to be left in an invalid state, possibly resulting in a\nhard crash of the interpreter.\ngh-92228\n: Disable the compiler’s inline-small-exit-blocks optimization for\nexit blocks that are associated with source code lines. This fixes a bug\nwhere the debugger cannot tell where an exception handler ends and the\nfollowing code block begins.\ngh-94485\n: Line number of a module’s\nRESUME\ninstruction is set to 0 as\nspecified in\nPEP 626\n.\ngh-94438\n: Account for instructions that can push NULL to the stack when\nsetting line number in a frame. Prevents some (unlikely) crashes.\ngh-91719\n: Reload\nopcode\nwhen raising\nunknown\nopcode\nerror\nin the\ninterpreter main loop, for C compilers to generate dispatching code\nindependently.\ngh-94329\n: Compile and run code with unpacking of extremely large sequences\n(1000s of elements). Such code failed to compile. It now compiles and runs\ncorrectly.\ngh-94360\n: Fixed a tokenizer crash when reading encoded files with syntax\nerrors from\nstdin\nwith non utf-8 encoded text. Patch by Pablo Galindo\ngh-88116\n: Fix an issue when reading line numbers from code objects if the\nencoded line numbers are close to\nINT_MIN\n. Patch by Pablo Galindo\ngh-94262\n: Don’t create frame objects for incomplete frames. Prevents the\ncreation of generators and closures from being observable to Python and C\nextensions, restoring the behavior of 3.10 and earlier.\ngh-94192\n: Fix error for dictionary literals with invalid expression as\nvalue.\ngh-87995\n:\ntypes.MappingProxyType\ninstances are now hashable if\nthe underlying mapping is hashable.\ngh-93883\n: Revise the display strategy of traceback enhanced error\nlocations.  The indicators are only shown when the location doesn’t span\nthe whole line.\ngh-94163\n: Add\nBINARY_SLICE\nand\nSTORE_SLICE\ninstructions for more efficient handling and better specialization of\nslicing operations, where the slice is explicit in the source code.\ngh-94021\n: Fix unreachable code warning in\nPython/specialize.c\n.\ngh-93911\n: Specialize\nLOAD_ATTR\nfor objects with custom\n__getattribute__\n.\ngh-93955\n: Improve performance of attribute lookups on objects with custom\n__getattribute__\nand\n__getattr__\n. Patch by Ken Jin.\ngh-93911\n: Specialize\nLOAD_ATTR\nfor\nproperty()\nattributes.\ngh-93678\n: Refactor compiler optimisation code so that it no longer needs\nthe\nstruct\nassembler\nand\nstruct\ncompiler\npassed around. Instead,\neach function takes the CFG and other data that it actually needs. This\nwill make it possible to test this code directly.\ngh-93841\n: When built with\n-enable-pystats\n,\nsys._stats_on()\n,\nsys._stats_off()\n,\nsys._stats_clear()\nand\nsys._stats_dump()\nfunctions have been added to enable gathering stats for parts of programs.\ngh-93516\n: Store offset of first traceable instruction in code object to\navoid having to recompute it for each instruction when tracing.\ngh-93516\n: Lazily create a table mapping bytecode offsets to line numbers\nto speed up calculation of line numbers when tracing.\ngh-89828\n:\ntypes.GenericAlias\nno longer relays the\n__class__\nattribute. For example,\nisinstance(list[int],\ntype)\nno longer returns\nTrue\n.\ngh-93678\n: Refactor the compiler to reduce boilerplate and repetition.\ngh-93671\n: Fix some exponential backtrace case happening with deeply nested\nsequence patterns in match statements. Patch by Pablo Galindo\ngh-93662\n: Make sure that the end column offsets are correct in multi-line\nmethod calls. Previously, the end column could precede the column offset.\ngh-93461\n:\nimportlib.invalidate_caches()\nnow drops entries from\nsys.path_importer_cache\nwith a relative path as name. This solves\na caching issue when a process changes its current working directory.\nFileFinder\nno longer inserts a dot in the path, e.g.\n/egg/./spam\nis now\n/egg/spam\n.\ngh-93621\n: Change order of bytecode instructions emitted for\nwith\nand\nasync\nwith\nto reduce the number of entries\nin the exception table.\ngh-93533\n: Reduce the size of the inline cache for\nLOAD_METHOD\nby 2\nbytes.\ngh-93444\n: Removed redundant fields from the compiler’s basicblock struct:\nb_nofallthrough\n,\nb_exit\n,\nb_return\n. They can be easily\ncalculated from the opcode of the last instruction of the block.\ngh-93429\n:\nLOAD_METHOD\ninstruction has been removed. It was merged back\ninto\nLOAD_ATTR\n.\ngh-93418\n: Fixed an assert where an f-string has an equal sign ‘=’\nfollowing an expression, but there’s no trailing brace. For example,\nf”{i=”.\ngh-93382\n: Cache the result of\nPyCode_GetCode()\nfunction to restore\nthe\nO\n(1) lookup of the\nco_code\nattribute.\ngh-93359\n: Ensure that custom\nast\nnodes without explicit end\npositions can be compiled. Patch by Pablo Galindo.\ngh-93356\n: Code for exception handlers is emitted at the end of the code\nunit’s bytecode. This avoids one jump when no exception is raised.\ngh-93354\n: Use exponential backoff for specialization counters in the\ninterpreter. Can reduce the number of failed specializations significantly\nand avoid slowdown for those parts of a program that are not suitable for\nspecialization.\ngh-93283\n: Improve error message for invalid syntax of conversion character\nin f-string expressions.\ngh-93345\n: Fix a crash in substitution of a\nTypeVar\nin nested generic\nalias after\nTypeVarTuple\n.\ngh-93223\n: When a bytecode instruction jumps to an unconditional jump\ninstruction, the first instruction can often be optimized to target the\nunconditional jump’s target directly. For tracing reasons, this would\npreviously only occur if both instructions have the same line number. This\nalso now occurs if the unconditional jump is artificial, i.e., if it has\nno associated line number.\ngh-84694\n: The\n--experimental-isolated-subinterpreters\nconfigure option\nand\nEXPERIMENTAL_ISOLATED_SUBINTERPRETERS\nmacro have been removed.\ngh-91924\n: Fix\n__lltrace__\ndebug feature if the stdout encoding is not\nUTF-8. Patch by Victor Stinner.\ngh-93040\n: Wraps unused parameters in\nObjects/obmalloc.c\nwith\nPy_UNUSED\n.\ngh-93143\n: Avoid\nNULL\nchecks for uninitialized local variables by\ndetermining at compile time which variables must be initialized.\ngh-93061\n: Backward jumps after\nasync\nfor\nloops are no longer given\ndubious line numbers.\ngh-93065\n: Fix contextvars HAMT implementation to handle iteration over\ndeep trees.\nThe bug was discovered and fixed by Eli Libman. See\nMagicStack/immutables#84\nfor more details.\ngh-93012\n: Added the new function\nPyType_FromMetaclass()\n, which\ngeneralizes the existing\nPyType_FromModuleAndSpec()\nusing an\nadditional metaclass argument. This is useful for language binding tools,\nwhere it can be used to intercept type-related operations like subclassing\nor static attribute access by specifying a metaclass with custom slots.\nImportantly,\nPyType_FromMetaclass()\nis available in the Limited\nAPI, which provides a path towards migrating more binding tools onto the\nStable ABI.\ngh-93021\n: Fix the\n__text_signature__\nfor\n__get__()\nmethods\nimplemented in C. Patch by Jelle Zijlstra.\ngh-89914\n: The operand of the\nYIELD_VALUE\ninstruction is set to the\nstack depth. This is done to help frame handling on\nyield\nand may\nassist debuggers.\ngh-92955\n: Fix memory leak in code object’s lines and positions iterators\nas they were not finalized at exit. Patch by Kumar Aditya.\ngh-92930\n: Fixed a crash in\n_pickle.c\nfrom mutating collections during\n__reduce__\nor\npersistent_id\n.\ngh-90690\n: The PRECALL instruction has been removed. It offered only a\nsmall advantage for specialization and is not needed in the vast majority\nof cases.\ngh-92914\n: Always round the allocated size for lists up to the nearest even\nnumber.\ngh-92858\n: Improve error message for some suites with syntax error before\n‘:’\ngh-90473\n: Decrease default recursion limit on WASI to address limited call\nstack size.\ngh-92804\n: Fix memory leak in\nmemoryview\niterator as it was not\nfinalized at exit. Patch by Kumar Aditya.\ngh-92777\n: Specialize\nLOAD_METHOD\nfor objects with lazy dictionaries.\nPatch by Ken Jin.\ngh-92658\n: Add support for connecting and binding to Hyper-V sockets on\nWindows Hyper-V hosts and guests.\ngh-92236\n: Remove spurious “LINE” event when starting a generator or\ncoroutine, visible tracing functions implemented in C.\ngh-91102\n:\n_warnings.warn_explicit()\nis ported to Argument Clinic.\ngh-92619\n: Make the compiler duplicate an exit block only if none of its\ninstructions have a lineno (previously only the first instruction in the\nblock was checked, leading to unnecessarily duplicated blocks).\ngh-88750\n: The deprecated debug build only\nPYTHONTHREADDEBUG\nenvironment variable no longer does anything.\ngh-92261\n: Fix hang when trying to iterate over a\ntyping.Union\n.\ngh-91432\n: Specialized the\nFOR_ITER\nopcode using the PEP 659\nmachinery\ngh-91399\n: Removed duplicate ‘{0, 0, 0, 0, 0, 0}’ entry in\n‘Objects/unicodetype_db.h’.\ngh-91578\n: Updates the error message for abstract class.\nbpo-47091\n: Improve performance of repetition of\nlist\nand\ntuple\nby using\nmemcpy\nto copy data and performing the\nreference increments in one step.\nbpo-46142\n: Make\n--help\noutput shorter by moving some info to the new\n--help-env\nand\n--help-xoptions\ncommand-line options. Also add\n--help-all\noption to print complete usage.\nbpo-42316\n: Document some places where an assignment expression needs\nparentheses.\nLibrary\n¶\ngh-89237\n: Fix hang on Windows in\nsubprocess.wait_closed()\nin\nasyncio\nwith\nProactorEventLoop\n. Patch by Kumar\nAditya.\ngh-97928\n:\ntkinter.Text.count()\nraises now an exception for options\nstarting with “-” instead of silently ignoring them.\ngh-98393\n: The\nos\nmodule no longer accepts bytes-like paths, like\nbytearray\nand\nmemoryview\ntypes: only the exact\nbytes\ntype is accepted for bytes strings. Patch by Victor\nStinner.\ngh-98363\n: Added itertools.batched() to batch data into lists of a given\nlength with the last list possibly being shorter than the others.\ngh-98331\n: Update the bundled copies of pip and setuptools to versions 22.3\nand 65.5.0 respectively.\ngh-98307\n: A\ncreateSocket()\nmethod\nwas added to\nSysLogHandler\n.\ngh-96035\n: Fix bug in\nurllib.parse.urlparse()\nthat causes certain\nport numbers containing whitespace, underscores, plus and minus signs, or\nnon-ASCII digits to be incorrectly accepted.\ngh-98257\n: Make\nsys.setprofile()\nand\nsys.settrace()\nfunctions\nreentrant. They can no long fail with:\nRuntimeError(\"Cannot\ninstall\na\ntrace\nfunction\nwhile\nanother\ntrace\nfunction\nis\nbeing\ninstalled\")\n. Patch\nby Victor Stinner.\ngh-98251\n: Allow\nvenv\nto pass along\nPYTHON*\nvariables to\nensurepip\nand\npip\nwhen they do not impact path resolution\ngh-94597\n: Deprecated\nasyncio.AbstractEventLoopPolicy.get_child_watcher()\nand\nasyncio.AbstractEventLoopPolicy.set_child_watcher()\nmethods to be\nremoved in Python 3.14. Patch by Kumar Aditya.\ngh-98178\n: On macOS, fix a crash in\nsyslog.syslog()\nin multi-threaded\napplications. On macOS, the libc\nsyslog()\nfunction is not thread-safe,\nso\nsyslog.syslog()\nno longer releases the GIL to call it. Patch by\nVictor Stinner.\ngh-44098\n: Release the GIL when creating\nmmap.mmap\nobjects on\nUnix.\ngh-87730\n: Wrap network errors consistently in urllib FTP support, so the\ntest suite doesn’t fail when a network is available but the public\ninternet is not reachable.\ngh-94597\n: The child watcher classes\nMultiLoopChildWatcher\n,\nFastChildWatcher\nand\nSafeChildWatcher\nare deprecated and will be removed in Python 3.14. Patch by Kumar Aditya.\ngh-98023\n: Change default child watcher to\nPidfdChildWatcher\non Linux systems which supports it.\nPatch by Kumar Aditya.\ngh-90985\n: Earlier in 3.11 we deprecated\nasyncio.Task.cancel(\"message\")\n. We realized we were too harsh, and\nhave undeprecated it.\ngh-65961\n: Do not rely solely on\n__cached__\non modules; code will also\nsupport\n__spec__.cached\n.\ngh-97646\n: Replace deprecated\napplication/javascript\nwith\ntext/javascript\nin\nmimetypes\n. See\nRFC 9239\n. Patch by Noam\nCohen.\ngh-97930\n: Apply changes from importlib_resources 5.8 and 5.9:\nTraversable.joinpath\nprovides a concrete implementation.\nas_file\nnow supports directories of resources.\ngh-97850\n: Remove deprecated\nimportlib.util.set_loader()\nand\nimportlib.util.module_for_loader()\nfrom\nimportlib.util\n.\ngh-97837\n: Change deprecate warning message in\nunittest\nfrom\nIt\nis\ndeprecated\nto\nreturn\na\nvalue!=None\nto\nIt\nis\ndeprecated\nto\nreturn\na\nvalue\nthat\nis\nnot\nNone\nfrom\na\ntest\ncase\ngh-97825\n: Fixes\nAttributeError\nwhen\nsubprocess.check_output()\nis used with argument\ninput=None\nand either of the arguments\nencoding\nor\nerrors\nare used.\ngh-97008\n:\nNameError\nand\nAttributeError\nspelling suggestions\nprovided since\ngh-82711\nare now also emitted by the pure Python\ntraceback\nmodule. Tests for those suggestions now exercise both\nimplementations to ensure they are equivalent. Patch by Carl Friedrich\nBolz-Tereick and Łukasz Langa.\ngh-97799\n:\ndataclass\nnow uses\ninspect.get_annotations()\nto\nexamine the annotations on class objects.\ngh-97781\n: Removed deprecated interfaces in\nimportlib.metadata\n(entry\npoints accessed as dictionary, implicit dictionary construction of\nsequence of\nEntryPoint\nobjects, mutablility of\nEntryPoints\nresult,\naccess of entry point by index).\nentry_points\nnow has a simpler, more\nstraightforward API (returning\nEntryPoints\n).\ngh-96827\n: Avoid spurious tracebacks from\nasyncio\nwhen default\nexecutor cleanup is delayed until after the event loop is closed (e.g. as\nthe result of a keyboard interrupt).\ngh-95534\n:\ngzip.GzipFile.read()\nreads 10% faster.\ngh-97592\n: Avoid a crash in the C version of\nasyncio.Future.remove_done_callback()\nwhen an evil argument is\npassed.\ngh-97639\n: Remove\ntokenize.NL\ncheck from\ntabnanny\n.\ngh-97545\n: Make Semaphore run faster.\ngh-73588\n: Fix generation of the default name of\ntkinter.Checkbutton\n. Previously, checkbuttons in different parent\nwidgets could have the same short name and share the same state if\narguments “name” and “variable” are not specified. Now they are globally\nunique.\ngh-96865\n: fix Flag to use boundary CONFORM\nThis restores previous Flag behavior of allowing flags with non-sequential\nvalues to be combined; e.g.\nclass Skip(Flag):         TWO = 2         EIGHT = 8\nSkip.TWO | Skip.EIGHT -> <Skip.TWO|EIGHT: 10>\ngh-97005\n: Update bundled libexpat to 2.4.9\ngh-85760\n: Fix race condition in\nasyncio\nwhere\nprocess_exited()\ncalled before the\npipe_data_received()\nleading to\ninconsistent output. Patch by Kumar Aditya.\ngh-96704\n: Pass the correct\ncontextvars.Context\nwhen a\nasyncio\nexception handler is called on behalf of a task or callback handle. This\nadds a new\nTask\nmethod,\nget_context\n, and also a new\nHandle\nmethod with the same name. If this method is not found on a task object\n(perhaps because it is a third-party library that does not yet provide\nthis method), the context prevailing at the time the exception handler is\ncalled is used.\ngh-96819\n: Fixed check in\nmultiprocessing.resource_tracker\nthat\nguarantees that the length of a write to a pipe is not greater than\nPIPE_BUF\n.\ngh-95865\n: Reduce\nurllib.parse.quote_from_bytes()\nmemory use on large\nvalues.\nContributed by Dennis Sweeney.\ngh-96741\n: Corrected type annotation for dataclass attribute\npstats.FunctionProfile.ncalls\nto be\nstr\n.\ngh-96734\n: Update\nunicodedata\ndatabase to Unicode 15.0.0.\ngh-96735\n: Fix undefined behaviour in\nstruct.unpack()\n.\ngh-46412\n: Improve performance of\nbool(db)\nfor large ndb/gdb databases.\nPreviously this would call\nlen(db)\nwhich would iterate over all keys\n– the answer (empty or not) is known after the first key.\ngh-96652\n: Fix the faulthandler implementation of\nfaulthandler.register(signal,\nchain=True)\nif the\nsigaction()\nfunction is not available: don’t call the previous signal handler if it’s\nNULL. Patch by Victor Stinner.\ngh-68163\n: Correct conversion of\nnumbers.Rational\n’s to\nfloat\n.\ngh-96538\n: Speed up\nbisect.bisect()\nfunctions by taking advantage of\ntype-stability.\ngh-96465\n: Fraction hashes are now cached.\ngh-96079\n: In\ntyping\n, fix missing field\nname\nand incorrect\n__module__\nin _AnnotatedAlias.\ngh-96415\n: Remove\ntypes._cell_factory\nfrom module namespace.\ngh-95987\n: Fix\nrepr\nof\nAny\nsubclasses.\ngh-96388\n: Work around missing socket functions in\nsocket\n’s\n__repr__\n.\ngh-96385\n: Fix\nTypeVarTuple.__typing_prepare_subst__\n.\nTypeError\nwas\nnot raised when using more than one\nTypeVarTuple\n, like\n[*T,\n*V]\nin\ntype alias substitutions.\ngh-96142\n: Add\nmatch_args\n,\nkw_only\n,\nslots\n, and\nweakref_slot\nto\n_DataclassParams\n.\ngh-96073\n: In\ninspect\n, fix overeager replacement of “\ntyping.\n” in\nformatting annotations.\ngh-89258\n: Added a\ngetChildren()\nmethod to\nlogging.Logger\n, to get the immediate child loggers of a logger.\ngh-96346\n: Use double caching for compiled RE patterns.\ngh-96349\n: Fixed a minor performance regression in\nthreading.Event.__init__()\ngh-90467\n: Fix\nasyncio.streams.StreamReaderProtocol\nto keep a\nstrong reference to the created task, so that it’s not garbage collected\ngh-96172\n: Fix a bug in\nunicodedata\n:\neast_asian_width\nused to\nreturn the wrong value for unassigned characters; and for yet unassigned,\nbut reserved characters.\ngh-96159\n: Fix a performance regression in logging\nTimedRotatingFileHandler. Only check for special files when the rollover\ntime has passed.\ngh-96175\n: Fix unused\nlocalName\nparameter in the\nAttr\nclass in\nxml.dom.minidom\n.\ngh-96145\n: Add AttrDict to JSON module for use with object_hook.\ngh-96052\n: Fix handling compiler warnings (SyntaxWarning and\nDeprecationWarning) in\ncodeop.compile_command()\nwhen checking for\nincomplete input. Previously it emitted warnings and raised a SyntaxError.\nNow it always returns\nNone\nfor incomplete input without emitting any\nwarnings.\ngh-96125\n: Fix incorrect condition that causes\nsys.thread_info.name\nto\nbe wrong on pthread platforms.\ngh-96019\n: Fix a bug in the\nmakeunicodedata.py\nscript leading to about\n13 KiB of space saving in the\nunicodedata\nmodule, specifically the\ncharacter decomposition data.\ngh-95463\n: Remove an incompatible change from\nbpo-28080\nthat caused a\nregression that ignored the utf8 in\nZipInfo.flag_bits\n. Patch by Pablo\nGalindo.\ngh-69142\n: Add\n%:z\nstrftime format code (generates tzoffset with colons\nas separator), see\nstrftime() and strptime() Behavior\n.\ngh-95899\n: Fix\nasyncio.Runner\nto call\nasyncio.set_event_loop()\nonly once to avoid calling\nattach_loop()\nmultiple times on child\nwatchers. Patch by Kumar Aditya.\ngh-95736\n: Fix\nunittest.IsolatedAsyncioTestCase\nto set event loop\nbefore calling setup functions. Patch by Kumar Aditya.\ngh-95865\n: Speed up\nurllib.parse.quote_from_bytes()\nby replacing a\nlist comprehension with\nmap()\n.\ngh-95861\n: Add support for computing Spearman’s correlation coefficient to\nthe existing statistics.correlation() function.\ngh-95804\n: Fix\nlogging\nshutdown handler so it respects\nMemoryHandler.flushOnClose\n.\ngh-95704\n: When a task catches\nasyncio.CancelledError\nand raises\nsome other error, the other error should generally not silently be\nsuppressed.\ngh-95149\n: The\nHTTPStatus\nenum offers a couple\nof properties to indicate the HTTP status category e.g.\nHTTPStatus.OK.is_success\n.\ngh-95609\n: Update bundled pip to 22.2.2.\ngh-95289\n: Fix\nasyncio.TaskGroup\nto propagate exception when\nasyncio.CancelledError\nwas replaced with another exception by a\ncontext manager. Patch by Kumar Aditya and Guido van Rossum.\ngh-94909\n: Fix incorrect joining of relative Windows paths with drives in\npathlib.PurePath\ninitializer.\ngh-95385\n: Faster\njson.dumps()\nwhen sorting of keys is not requested\n(default).\ngh-83901\n: Improve\nSignature.bind\nerror\nmessage for missing keyword-only arguments.\ngh-95339\n: Update bundled pip to 22.2.1.\ngh-95045\n: Fix GC crash when deallocating\n_lsprof.Profiler\nby\nuntracking it before calling any callbacks. Patch by Kumar Aditya.\ngh-95231\n: Fail gracefully if\nEPERM\nor\nENOSYS\nis raised when loading\ncrypt\nmethods. This\nmay happen when trying to load\nMD5\non a Linux kernel with\nFIPS\nenabled.\ngh-95097\n: Fix\nasyncio.run()\nfor\nasyncio.Task\nimplementations without\nuncancel()\nmethod. Patch by\nKumar Aditya.\ngh-95087\n: Fix IndexError in parsing invalid date in the\nemail\nmodule.\ngh-95199\n: Upgrade bundled setuptools to 63.2.0.\ngh-95194\n: Upgrade bundled pip to 22.2.\ngh-93899\n: Fix check for existence of\nos.EFD_CLOEXEC\n,\nos.EFD_NONBLOCK\nand\nos.EFD_SEMAPHORE\nflags on older\nkernel versions where these flags are not present. Patch by Kumar Aditya.\ngh-95166\n: Fix\nconcurrent.futures.Executor.map()\nto cancel the\ncurrently waiting on future on an error - e.g. TimeoutError or\nKeyboardInterrupt.\ngh-95132\n: Fix a\nsqlite3\nregression where\n*args\nand\n**kwds\nwere incorrectly relayed from\nconnect()\nto the\nConnection\nfactory. The regression was introduced in\n3.11a1 with PR 24421 (\ngh-85128\n). Patch by Erlend E. Aasland.\ngh-93157\n: Fix\nfileinput\nmodule didn’t support\nerrors\noption\nwhen\ninplace\nis true.\ngh-91212\n: Fixed flickering of the turtle window when the tracer is turned\noff. Patch by Shin-myoung-serp.\ngh-95077\n: Add deprecation warning for enum\nmember.member\naccess (e.g.\nColor.RED.BLUE\n). Remove\nEnumMeta.__getattr__\n.\ngh-95109\n: Ensure that timeouts scheduled with\nasyncio.Timeout\nthat have already expired are delivered promptly.\ngh-95105\n:\nwsgiref.types.InputStream.__iter__()\nshould return\nIterator[bytes]\n, not\nIterable[bytes]\n. Patch by Shantanu Jain.\ngh-95066\n: Replaced assert with exception in\nast.parse()\n, when\nfeature_version\nhas an invalid major version. Patch by Shantanu Jain.\ngh-77617\n: Add\nsqlite3\ncommand-line interface\n.\nPatch by Erlend Aasland.\ngh-95005\n: Replace\n_PyAccu\nwith\n_PyUnicodeWriter\nin\nJSON encoder and StringIO and remove the\n_PyAccu\nimplementation.\ngh-90085\n: Remove\n-c/--clock\nand\n-t/--time\nCLI options of\ntimeit\n. The options had been deprecated since Python 3.3 and the\nfunctionality was removed in Python 3.7. Patch by Shantanu Jain.\ngh-94857\n: Fix refleak in\n_io.TextIOWrapper.reconfigure\n. Patch by Kumar\nAditya.\ngh-94821\n: Fix binding of unix socket to empty address on Linux to use an\navailable address from the abstract namespace, instead of “0”.\ngh-94736\n: Fix crash when deallocating an instance of a subclass of\n_multiprocessing.SemLock\n. Patch by Kumar Aditya.\ngh-81620\n: Add random.binomialvariate().\ngh-74116\n: Allow\nasyncio.StreamWriter.drain()\nto be awaited\nconcurrently by multiple tasks. Patch by Kumar Aditya.\ngh-87822\n: When called with\ncapture_locals=True\n, the\ntraceback\nmodule functions swallow exceptions raised from calls to\nrepr()\non\nlocal variables of frames. This is in order to prioritize the original\nexception over rendering errors.  An indication of the failure is printed\nin place of the missing value.  (Patch by Simon-Martin Schroeder).\ngh-88050\n: Fix\nasyncio\nsubprocess transport to kill process cleanly\nwhen process is blocked and avoid\nRuntimeError\nwhen loop is closed.\nPatch by Kumar Aditya.\ngh-94637\n:\nSSLContext.set_default_verify_paths()\nnow releases the GIL\naround\nSSL_CTX_set_default_verify_paths\ncall. The function call\nperforms I/O and CPU intensive work.\ngh-94309\n: Deprecate aliases\ntyping.Hashable\nand\ntyping.Sized\ngh-92546\n: An undocumented\npython\n-m\npprint\nbenchmark is moved into\npprint\nsuite of pyperformance. Patch by Oleg Iarygin.\ngh-94607\n: Fix subclassing complex generics with type variables in\ntyping\n. Previously an error message saying\nSome\ntype\nvariables\n...\nare\nnot\nlisted\nin\nGeneric[...]\nwas shown.\ntyping\nno longer\npopulates\n__parameters__\nwith the\n__parameters__\nof a Python\nclass.\ngh-94619\n: Remove the long-deprecated\nmodule_repr()\nfrom\nimportlib\n.\ngh-93910\n: The ability to access the other values of an enum on an enum\n(e.g.\nColor.RED.BLUE\n) has been restored in order to fix a performance\nregression.\ngh-93896\n: Fix\nasyncio.run()\nand\nunittest.IsolatedAsyncioTestCase\nto always the set event loop as\nit was done in Python 3.10 and earlier. Patch by Kumar Aditya.\ngh-94343\n: Allow setting the attributes of\nreprlib.Repr\nduring object\ninitialization\ngh-94382\n: Port static types of\n_multiprocessing\nmodule to heap types.\nPatch by Kumar Aditya.\ngh-78724\n: Fix crash in\nstruct.Struct\nwhen it was not completely\ninitialized by initializing it in\n__new__()\n.  Patch by Kumar\nAditya.\ngh-94510\n: Re-entrant calls to\nsys.setprofile()\nand\nsys.settrace()\nnow raise\nRuntimeError\n. Patch by Pablo\nGalindo.\ngh-92336\n: Fix bug where\nlinecache.getline()\nfails on bad files with\nUnicodeDecodeError\nor\nSyntaxError\n. It now returns an empty\nstring as per the documentation.\ngh-94398\n: Once a\nasyncio.TaskGroup\nhas started shutting down\n(i.e., at least one task has failed and the task group has started\ncancelling the remaining tasks), it should not be possible to add new\ntasks to the task group.\ngh-94383\n:\nxml.etree\n: Remove the\nElementTree.Element.copy()\nmethod of the pure Python implementation, deprecated in Python 3.10, use\nthe\ncopy.copy()\nfunction instead. The C implementation of\nxml.etree\nhas no\ncopy()\nmethod, only a\n__copy__()\nmethod.\nPatch by Victor Stinner.\ngh-94379\n:\nzipimport\n: Remove\nfind_loader()\nand\nfind_module()\nmethods, deprecated in Python 3.10: use the\nfind_spec()\nmethod\ninstead. See\nPEP 451\nfor the rationale. Patch by Victor Stinner.\ngh-94352\n:\nshlex.split()\n: Passing\nNone\nfor\ns\nargument now\nraises an exception, rather than reading\nsys.stdin\n. The feature\nwas deprecated in Python 3.9. Patch by Victor Stinner.\ngh-94318\n: Strip trailing spaces in\npydoc\ntext output.\ngh-89988\n: Fix memory leak in\npickle.Pickler\nwhen looking up\ndispatch_table\n. Patch by Kumar Aditya.\ngh-90016\n: Deprecate\nsqlite3\ndefault adapters and converters\n. Patch by Erlend E. Aasland.\ngh-94254\n: Fixed types of\nstruct\nmodule to be immutable. Patch by\nKumar Aditya.\ngh-93259\n: Now raise\nValueError\nwhen\nNone\nor an empty string are\npassed to\nDistribution.from_name\n(and other callers).\ngh-74696\n:\nshutil.make_archive()\nnow passes the\nroot_dir\nargument\nto custom archivers which support it.\ngh-94216\n: The\ndis\nmodule now has the opcodes for pseudo\ninstructions (those which are used by the compiler during code generation\nbut then removed or replaced by real opcodes before the final bytecode is\nemitted).\ngh-93096\n: Removed undocumented\npython\n-m\ncodecs\n. Use\npython\n-m\nunittest\ntest.test_codecs.EncodedFileTest\ninstead.\ngh-94207\n: Made\n_struct.Struct\nGC-tracked in order to fix a\nreference leak in the\n_struct\nmodule.\ngh-93096\n: Removed undocumented\n-t\nargument of\npython\n-m\nbase64\n.\nUse\npython\n-m\nunittest\ntest.test_base64.LegacyBase64TestCase.test_encodebytes\ninstead.\ngh-94226\n: Remove the\nlocale.format()\nfunction, deprecated in Python\n3.7: use\nlocale.format_string()\ninstead. Patch by Victor Stinner.\ngh-94199\n: Remove the\nssl.match_hostname()\nfunction. The\nssl.match_hostname()\nwas deprecated in Python 3.7. OpenSSL performs\nhostname matching since Python 3.7, Python no longer uses the\nssl.match_hostname()\nfunction. Patch by Victor Stinner.\ngh-94214\n: Document the\ncontext\nobject used in the\nvenv.EnvBuilder\nclass, and add the new environment’s library path to it.\ngh-94199\n: Remove the\nssl.wrap_socket()\nfunction, deprecated in\nPython 3.7: instead, create a\nssl.SSLContext\nobject and call its\nssl.SSLContext.wrap_socket\nmethod. Any package that still uses\nssl.wrap_socket()\nis broken and insecure. The function neither sends\na SNI TLS extension nor validates server hostname. Code is subject to\nCWE 295\nImproper Certificate Validation. Patch by Victor Stinner.\ngh-94199\n: Remove the\nssl.RAND_pseudo_bytes()\nfunction, deprecated in\nPython 3.6: use\nos.urandom()\nor\nssl.RAND_bytes()\ninstead.\nPatch by Victor Stinner.\ngh-94199\n:\nhashlib\n: Remove the pure Python implementation of\nhashlib.pbkdf2_hmac()\n, deprecated in Python 3.10. Python 3.10 and\nnewer requires OpenSSL 1.1.1 (\nPEP 644\n): this OpenSSL version provides a\nC implementation of\npbkdf2_hmac()\nwhich is faster. Patch by\nVictor Stinner.\ngh-94196\n:\ngzip\n: Remove the\nfilename\nattribute of\ngzip.GzipFile\n, deprecated since Python 2.6, use the\nname\nattribute instead. In write mode, the\nfilename\nattribute added\n'.gz'\nfile extension if it was not\npresent. Patch by Victor Stinner.\ngh-94182\n: run the\nasyncio.PidfdChildWatcher\non the running loop,\nthis allows event loops to run subprocesses when there is no default event\nloop running on the main thread\ngh-94169\n: Remove\nio.OpenWrapper\nand\n_pyio.OpenWrapper\n, deprecated\nin Python 3.10: just use\nopen()\ninstead. The\nopen()\n(\nio.open()\n) function is a built-in function. Since Python 3.10,\n_pyio.open()\nis also a static method. Patch by Victor Stinner.\ngh-91742\n: Fix\npdb\ncrash after jump caused by a null pointer\ndereference. Patch by Kumar Aditya.\ngh-94101\n: Manual instantiation of\nssl.SSLSession\nobjects is no\nlonger allowed as it lead to misconfigured instances that crashed the\ninterpreter when attributes where accessed on them.\ngh-84753\n:\ninspect.iscoroutinefunction()\n,\ninspect.isgeneratorfunction()\n, and\ninspect.isasyncgenfunction()\nnow properly return\nTrue\nfor\nduck-typed function-like objects like instances of\nunittest.mock.AsyncMock\n.\nThis makes\ninspect.iscoroutinefunction()\nconsistent with the\nbehavior of\nasyncio.iscoroutinefunction()\n.  Patch by Mehdi ABAAKOUK.\ngh-94028\n: Fix a regression in the\nsqlite3\nwhere statement objects\nwere not properly cleared and reset after use in cursor iters. The\nregression was introduced by PR 27884 in Python 3.11a1. Patch by Erlend E.\nAasland.\ngh-93973\n: Add keyword argument\nall_errors\nto\nasyncio.create_connection\nso that multiple connection errors can be\nraised as an\nExceptionGroup\n.\ngh-93963\n: Officially deprecate from\nimportlib.abc\nclasses moved to\nimportlib.resources.abc\n.\ngh-93858\n: Prevent error when activating venv in nested fish instances.\ngh-93820\n: Pickle\nenum.Flag\nby name.\ngh-93847\n: Fix repr of enum of generic aliases.\ngh-91404\n: Revert the\nre\nmemory leak when a match is terminated by a\nsignal or memory allocation failure as the implemented fix caused a major\nperformance regression.\ngh-83499\n: Fix double closing of file description in\ntempfile\n.\ngh-93820\n: Fixed a regression when\ncopy.copy()\n-ing\nenum.Flag\nwith multiple flag members.\ngh-79512\n: Fixed names and\n__module__\nvalue of\nweakref\nclasses\nReferenceType\n,\nProxyType\n,\nCallableProxyType\n. It makes them pickleable.\ngh-91389\n: Fix an issue where\ndis\nutilities could report missing or\nincorrect position information in the presence of\nCACHE\nentries.\ngh-93626\n: Set\n__future__.annotations\nto have a\nNone\nmandatoryRelease to indicate that it is currently ‘TBD’.\ngh-90473\n: Emscripten and WASI have no home directory and cannot provide\nPEP 370\nuser site directory.\ngh-90494\n:\ncopy.copy()\nand\ncopy.deepcopy()\nnow always raise a\nTypeError if\n__reduce__()\nreturns a tuple with length 6 instead of\nsilently ignore the 6th item or produce incorrect result.\ngh-90549\n: Fix a multiprocessing bug where a global named resource (such as\na semaphore) could leak when a child process is spawned (as opposed to\nforked).\ngh-93521\n: Fixed a case where dataclasses would try to add\n__weakref__\ninto the\n__slots__\nfor a dataclass that specified\nweakref_slot=True\nwhen it was already defined in one of its bases.\nThis resulted in a\nTypeError\nupon the new class being created.\ngh-79579\n:\nsqlite3\nnow correctly detects DML queries with leading\ncomments. Patch by Erlend E. Aasland.\ngh-93421\n: Update\nsqlite3.Cursor.rowcount\nwhen a DML statement has\nrun to completion. This fixes the row count for SQL queries like\nUPDATE\n...\nRETURNING\n. Patch by Erlend E. Aasland.\ngh-93475\n: Expose\nFICLONE\nand\nFICLONERANGE\nconstants in\nfcntl\n. Patch by Illia Volochii.\ngh-93370\n: Deprecate\nsqlite3.version\nand\nsqlite3.version_info\n.\ngh-91810\n: Suppress writing an XML declaration in open files in\nElementTree.write()\nwith\nencoding='unicode'\nand\nxml_declaration=None\n.\ngh-91162\n: Support splitting of unpacked arbitrary-length tuple over\nTypeVar\nand\nTypeVarTuple\nparameters. For example:\nA[T,\n*Ts][*tuple[int,\n...]]\n->\nA[int,\n*tuple[int,\n...]]\nA[*Ts,\nT][*tuple[int,\n...]]\n->\nA[*tuple[int,\n...],\nint]\ngh-93353\n: Fix the\nimportlib.resources.as_file()\ncontext manager to\nremove the temporary file if destroyed late during Python finalization:\nkeep a local reference to the\nos.remove()\nfunction. Patch by Victor\nStinner.\ngh-83658\n: Make\nmultiprocessing.Pool\nraise an exception if\nmaxtasksperchild\nis not\nNone\nor a positive int.\ngh-93312\n: Add\nos.PIDFD_NONBLOCK\nflag to open a file descriptor\nfor a process with\nos.pidfd_open()\nin non-blocking mode. Patch by\nKumar Aditya.\ngh-88123\n: Implement\nEnum.__contains__\nthat returns\nTrue\nor\nFalse\nto replace the deprecated behaviour that would sometimes raise a\nTypeError\n.\ngh-93297\n: Make asyncio task groups prevent child tasks from being GCed\ngh-85308\n: Changed\nargparse.ArgumentParser\nto use\nfilesystem encoding and error handler\ninstead of default text\nencoding to read arguments from file (e.g.\nfromfile_prefix_chars\noption). This change affects Windows; argument file should be encoded with\nUTF-8 instead of ANSI Codepage.\ngh-93156\n: Accessing the\npathlib.PurePath.parents\nsequence of an\nabsolute path using negative index values produced incorrect results.\ngh-93162\n: Add the ability for\nlogging.config.dictConfig()\nto\nusefully configure\nQueueHandler\nand\nQueueListener\nas a pair, and add\nlogging.getHandlerByName()\nand\nlogging.getHandlerNames()\nAPIs\nto allow access to handlers by name.\ngh-93243\n: The\nsmtpd\nmodule was removed per the schedule in\nPEP 594\n.\ngh-92886\n: Replace\nassert\nstatements with\nraise\nAssertionError()\nin\nBaseHandler\nso that the tested behaviour is maintained\nrunning with optimizations\n(-O)\n.\ngh-90155\n: Fix broken\nasyncio.Semaphore\nwhen acquire is cancelled.\ngh-90817\n: The\nlocale.resetlocale()\nfunction is deprecated and will\nbe removed in Python 3.13. Use\nlocale.setlocale(locale.LC_ALL,\n\"\")\ninstead. Patch by Victor Stinner.\ngh-91513\n: Added\ntaskName\nattribute to\nlogging\nmodule for use\nwith\nasyncio\ntasks.\ngh-74696\n:\nshutil.make_archive()\nno longer temporarily changes the\ncurrent working directory during creation of standard\n.zip\nor tar\narchives.\ngh-92728\n: The\nre.template()\nfunction and the corresponding\nre.TEMPLATE\nand\nre.T\nflags are restored after they were\nremoved in 3.11.0b1, but they are now deprecated, so they might be removed\nfrom Python 3.13.\ngh-93033\n: Search in some strings (platform dependent i.e [U+0xFFFF,\nU+0x0100] on Windows or [U+0xFFFFFFFF, U+0x00010000] on Linux 64-bit) are\nnow up to 10 times faster.\ngh-89973\n: Fix\nre.error\nraised in\nfnmatch\nif the pattern\ncontains a character range with upper bound lower than lower bound (e.g.\n[c-a]\n). Now such ranges are interpreted as empty ranges.\ngh-93044\n: No longer convert the database argument of\nsqlite3.connect()\nto bytes before passing it to the factory.\ngh-93010\n: In a very special case, the email package tried to append the\nnonexistent\nInvalidHeaderError\nto the defect list. It should have been\nInvalidHeaderDefect\n.\ngh-92986\n: Fix\nast.unparse()\nwhen\nImportFrom.level\nis\nNone\ngh-92932\n: Now\ndis()\nand\nget_instructions()\nhandle\noperand values for instructions prefixed by\nEXTENDED_ARG_QUICK\n. Patch\nby Sam Gross and Donghee Na.\ngh-92675\n: Fix\nvenv.ensure_directories()\nto accept\npathlib.Path\narguments in addition to\nstr\npaths. Patch\nby David Foster.\ngh-87901\n: Removed the\nencoding\nargument from\nos.popen()\nthat was\nadded in 3.11b1.\ngh-91922\n: Fix function\nsqlite.connect()\nand the\nsqlite.Connection\nconstructor on non-UTF-8 locales. Also, they\nnow support bytes paths non-decodable with the current FS encoding.\ngh-92869\n: Added\nc_time_t\nto\nctypes\n, which has the\nsame size as the\ntime_t\ntype in C.\ngh-92839\n: Fixed crash resulting from calling bisect.insort() or\nbisect.insort_left() with the key argument not equal to\nNone\n.\ngh-90473\n:\nsubprocess\nnow fails early on Emscripten and WASI\nplatforms to work around missing\nos.pipe()\non WASI.\ngh-89325\n: Removed many old deprecated\nunittest\nfeatures:\nTestCase\nmethod aliases, undocumented and broken\nTestCase\nmethod\nassertDictContainsSubset\n,\nundocumented\nTestLoader.loadTestsFromModule\nparameter\nuse_load_tests\n, and\nan underscored alias of the\nTextTestResult\nclass.\ngh-92734\n: Allow multi-element reprs emitted by\nreprlib\nto be\npretty-printed using configurable indentation.\ngh-92671\n: Fixed\nast.unparse()\nfor empty tuples in the assignment\ntarget context.\ngh-91581\n:\nutcfromtimestamp()\nno longer attempts\nto resolve\nfold\nin the pure Python implementation, since the fold is\nnever 1 in UTC. In addition to being slightly faster in the common case,\nthis also prevents some errors when the timestamp is close to\ndatetime.min\n.  Patch by Paul Ganssle.\ngh-86388\n: Removed randrange() functionality deprecated since Python 3.10.\nFormerly, randrange(10.0) losslessly converted to randrange(10). Now, it\nraises a TypeError. Also, the exception raised for non-integral values\nsuch as randrange(10.5) or randrange(‘10’) has been changed from\nValueError to TypeError.\ngh-90385\n: Add\npathlib.Path.walk()\nas an alternative to\nos.walk()\n.\ngh-92550\n: Fix\npathlib.Path.rglob()\nfor empty pattern.\ngh-92591\n: Allow\nlogging\nfilters to return a\nlogging.LogRecord\ninstance so that filters attached to\nlogging.Handler\ns can enrich records without side effects on\nother handlers.\ngh-92445\n: Fix a bug in\nargparse\nwhere\nnargs=\"*\"\nwould raise an\nerror instead of returning an empty list when 0 arguments were supplied if\nchoice was also defined in\nparser.add_argument\n.\ngh-92547\n: Remove undocumented\nsqlite3\nfeatures deprecated in Python\n3.10:\nsqlite3.enable_shared_cache()\nsqlite3.OptimizedUnicode\nPatch by Erlend E. Aasland.\ngh-92530\n: Fix an issue that occurred after interrupting\nthreading.Condition.notify()\n.\ngh-92531\n: The statistics.median_grouped() function now always return a\nfloat. Formerly, it did not convert the input type when for sequences of\nlength one.\ngh-84131\n: The\npathlib.Path\ndeprecated method\nlink_to\nhas been\nremoved. Use 3.10’s\nhardlink_to()\nmethod instead as\nits semantics are consistent with that of\nsymlink_to()\n.\ngh-89336\n: Removed\nconfigparser\nmodule APIs: the\nSafeConfigParser\nclass alias, the\nParsingError.filename\nproperty\nand parameter, and the\nConfigParser.readfp\nmethod, all of which were\ndeprecated since Python 3.2.\ngh-92391\n: Add\n__class_getitem__()\nto\ncsv.DictReader\nand\ncsv.DictWriter\n, allowing them to be\nparameterized at runtime. Patch by Marc Mueller.\ngh-91968\n: Add\nSO_RTABLE\nand\nSO_USER_COOKIE\nconstants to\nsocket\n.\ngh-91810\n:\nElementTree\nmethod\nwrite()\nand function\ntostring()\nnow use the text file’s encoding\n(“UTF-8” if not available) instead of locale encoding in XML declaration\nwhen\nencoding=\"unicode\"\nis specified.\ngh-81790\n:\nos.path.splitdrive()\nnow understands DOS device paths with\nUNC links (beginning\n\\\\?\\UNC\\\n). Contributed by Barney Gale.\ngh-91760\n: Apply more strict rules for numerical group references and group\nnames in regular expressions. Only sequence of ASCII digits is now\naccepted as a numerical reference. The group name in bytes patterns and\nreplacement strings can now only contain ASCII letters and digits and\nunderscore.\ngh-90622\n: Worker processes for\nconcurrent.futures.ProcessPoolExecutor\nare no longer spawned on\ndemand (a feature added in 3.9) when the multiprocessing context start\nmethod is\n\"fork\"\nas that can lead to deadlocks in the child processes\ndue to a fork happening while threads are running.\ngh-91577\n: Move imports in\nSharedMemory\nmethods\nto module level so that they can be executed late in python finalization.\ngh-91581\n: Remove an unhandled error case in the C implementation of calls\nto\ndatetime.fromtimestamp\nwith\nno time zone (i.e. getting a local time from an epoch timestamp). This\nshould have no user-facing effect other than giving a possibly more\naccurate error message when called with timestamps that fall on\n10000-01-01 in the local time. Patch by Paul Ganssle.\ngh-91539\n: Improve performance of\nurllib.request.getproxies_environment\nwhen there are many environment variables\ngh-91524\n: Speed up the regular expression substitution (functions\nre.sub()\nand\nre.subn()\nand corresponding\nre.Pattern\nmethods) for replacement strings containing group references by 2–3\ntimes.\ngh-91447\n: Fix findtext in the xml module to only give an empty string when\nthe text attribute is set to\nNone\n.\ngh-91456\n: Deprecate current default auto() behavior:  In 3.13 the default\nwill be for for auto() to always return the largest member value\nincremented by 1, and to raise if incompatible value types are used.\nbpo-47231\n: Fixed an issue with inconsistent trailing slashes in tarfile\nlongname directories.\nbpo-39064\n:\nzipfile.ZipFile\nnow raises\nzipfile.BadZipFile\ninstead of\nValueError\nwhen reading a corrupt zip file in which the\ncentral directory offset is negative.\nbpo-41287\n: Fix handling of the\ndoc\nargument in subclasses of\nproperty()\n.\ngh-90005\n:\nctypes\ndependency\nlibffi\nis now detected with\npkg-config\n.\nbpo-32547\n: The constructors for\nDictWriter\nand\nDictReader\nnow coerce the\nfieldnames\nargument to a\nlist\nif it is an iterator.\nbpo-35540\n: Fix\ndataclasses.asdict()\ncrash when\ncollections.defaultdict\nis present in the attributes.\nbpo-47063\n: Add an index_pages parameter to support using non-default index\npage names.\nbpo-47025\n: Drop support for\nbytes\non\nsys.path\n.\nbpo-46951\n: Order the contents of zipapp archives, to make builds more\nreproducible.\nbpo-42777\n: Implement\npathlib.Path.is_mount()\nfor Windows paths.\nbpo-46755\n: In\nQueueHandler\n, clear\nstack_info\nfrom\nLogRecord\nto prevent stack trace from being written twice.\nbpo-45393\n: Fix the formatting for\nawait\nx\nand\nnot\nx\nin the\noperator precedence table when using the\nhelp()\nsystem.\nbpo-46642\n: Improve error message when trying to subclass an instance of\ntyping.TypeVar\n,\ntyping.ParamSpec\n,\ntyping.TypeVarTuple\n, etc. Based on patch by Gregory Beauregard.\nbpo-46364\n: Restrict use of sockets instead of pipes for stdin of\nsubprocesses created by\nasyncio\nto AIX platform only.\nbpo-28249\n: Set\ndoctest.DocTest.lineno\nto\nNone\nwhen an object\ndoes not have\n__doc__\n.\nbpo-46197\n: Fix\nensurepip\nenvironment isolation for subprocess\nrunning\npip\n.\nbpo-45924\n: Fix\nasyncio\nincorrect traceback when future’s exception\nis raised multiple times. Patch by Kumar Aditya.\nbpo-45046\n: Add support of context managers in\nunittest\n: methods\nenterContext()\nand\nenterClassContext()\nof class\nTestCase\n, method\nenterAsyncContext()\nof class\nIsolatedAsyncioTestCase\nand function\nunittest.enterModuleContext()\n.\nbpo-44173\n: Enable fast seeking of uncompressed unencrypted\nzipfile.ZipExtFile\nbpo-42627\n: Fix incorrect parsing of Windows registry proxy settings\nbpo-42047\n: Add\nthreading.get_native_id()\nsupport for DragonFly BSD.\nPatch by David Carlier.\nbpo-14243\n: The\ntempfile.NamedTemporaryFile\nfunction has a new\noptional parameter\ndelete_on_close\nbpo-41246\n: Give the same callback function for when the overlapped\noperation is done to the functions\nrecv\n,\nrecv_into\n,\nrecvfrom\n,\nsendto\n,\nsend\nand\nsendfile\ninside\nIocpProactor\n.\nbpo-39264\n: Fixed\ncollections.UserDict.get()\nto not call\n__missing__()\nwhen a value is not found. This matches the behavior\nof\ndict\n. Patch by Bar Harel.\nbpo-38693\n:\nimportlib\nnow uses f-strings internally instead of\nstr.format\n.\nbpo-38267\n: Add\ntimeout\nparameter to\nasyncio.loop.shutdown_default_executor()\n. The default value is\nNone\n, which means the executor will be given an unlimited amount of\ntime. When called from\nasyncio.Runner\nor\nasyncio.run()\n, the\ndefault timeout is 5 minutes.\nbpo-34828\n:\nsqlite3.Connection.iterdump()\nnow handles databases that\nuse\nAUTOINCREMENT\nin one or more tables.\nbpo-32990\n: Support reading wave files with the\nWAVE_FORMAT_EXTENSIBLE\nformat in the\nwave\nmodule.\nbpo-26253\n: Allow adjustable compression level for tarfile streams in\ntarfile.open()\n.\nDocumentation\n¶\ngh-85525\n: Remove extra row\ngh-86404\n: Deprecated tools\nmake\nsuspicious\nand\nrstlint.py\nare now\nremoved. They have been replaced by\nsphinx-lint\n.\ngh-97741\n: Fix\n!\nin c domain ref target syntax via a\nconf.py\npatch,\nso it works as intended to disable ref target resolution.\ngh-96432\n: Fraction literals now support whitespace around the forward\nslash,\nFraction('2\n/\n3')\n.\ngh-96098\n: Improve discoverability of the higher level concurrent.futures\nmodule by providing clearer links from the lower level threading and\nmultiprocessing modules.\ngh-95957\n: What’s New 3.11 now has instructions for how to provide compiler\nand linker flags for Tcl/Tk and OpenSSL on RHEL 7 and CentOS 7.\ngh-95588\n: Clarified the conflicting advice given in the\nast\ndocumentation about\nast.literal_eval()\nbeing “safe” for use on\nuntrusted input while at the same time warning that it can crash the\nprocess. The latter statement is true and is deemed unfixable without a\nlarge amount of work unsuitable for a bugfix. So we keep the warning and\nno longer claim that\nliteral_eval\nis safe.\ngh-91207\n: Fix stylesheet not working in Windows CHM htmlhelp docs and add\nwarning that they are deprecated. Contributed by C.A.M. Gerlach.\ngh-95454\n: Replaced incorrectly written true/false values in documentation.\nPatch by Robert O’Shea\ngh-95451\n: Update library documentation with\navailability information\non WebAssembly platforms\nwasm32-emscripten\nand\nwasm32-wasi\n.\ngh-95415\n: Use consistent syntax for platform availability. The directive\nnow supports a content body and emits a warning when it encounters an\nunknown platform.\ngh-94321\n: Document the\nPEP 246\nstyle protocol type\nsqlite3.PrepareProtocol\n.\ngh-86128\n: Document a limitation in ThreadPoolExecutor where its exit\nhandler is executed before any handlers in atexit.\ngh-61162\n: Clarify\nsqlite3\nbehavior when\nHow to use the connection context manager\n.\ngh-87260\n: Align\nsqlite3\nargument specs with the actual\nimplementation.\ngh-86986\n: The minimum Sphinx version required to build the documentation\nis now 3.2.\ngh-88831\n: Augmented documentation of asyncio.create_task(). Clarified the\nneed to keep strong references to tasks and added a code snippet detailing\nhow to do this.\ngh-86438\n: Clarify that\n-W\nand\nPYTHONWARNINGS\nare\nmatched literally and case-insensitively, rather than as regular\nexpressions, in\nwarnings\n.\ngh-93031\n: Update tutorial introduction output to use 3.10+ SyntaxError\ninvalid range.\ngh-92240\n: Added release dates for “What’s New in Python 3.X” for 3.0, 3.1,\n3.2, 3.8 and 3.10\nbpo-47161\n: Document that\npathlib.PurePath\ndoes not collapse\ninitial double slashes because they denote UNC paths.\nbpo-40838\n: Document that\ninspect.getdoc()\n,\ninspect.getmodule()\n, and\ninspect.getsourcefile()\nmight return\nNone\n.\nbpo-43689\n: The\nDiffer\ndocumentation now also mentions other whitespace\ncharacters, which make it harder to understand the diff output.\nbpo-38056\n: Overhaul the\nError Handlers\ndocumentation in\ncodecs\n.\nbpo-13553\n: Document tkinter.Tk args.\nTests\n¶\ngh-95027\n: On Windows, when the Python test suite is run with the\n-jN\noption, the ANSI code page is now used as the encoding for the stdout\ntemporary file, rather than using UTF-8 which can lead to decoding errors.\nPatch by Victor Stinner.\ngh-96624\n: Fixed the failure of repeated runs of\ntest.test_unittest\ncaused by side effects in\ntest_dotted_but_module_not_loaded\n.\ngh-95243\n: Mitigate the inherent race condition from using\nfind_unused_port() in testSockName() by trying to find an unused port a\nfew times before failing. Patch by Ross Burton.\ngh-95573\n:\nLib/test/test_asyncio/test_ssl.py\nexposed a bug in the\nmacOS kernel where intense concurrent load on non-blocking sockets\noccasionally causes\nerrno.ENOBUFS\n(“No buffer space available”)\nto be emitted. FB11063974 filed with Apple, in the mean time as a\nworkaround buffer size used in tests on macOS is decreased to avoid\nintermittent failures.  Patch by Fantix King.\ngh-95280\n: Fix problem with\ntest_ssl\ntest_get_ciphers\non systems\nthat require perfect forward secrecy (PFS) ciphers.\ngh-95212\n: Make multiprocessing test case\ntest_shared_memory_recreate\nparallel-safe.\ngh-95218\n: Move tests for importlib.resources into\ntest_importlib.resources.\ngh-93963\n: Updated tests to use preferred location for\nimportlib.resources\nABCs.\ngh-94675\n: Add a regression test for\nre\nexponentional slowdown when\nusing rjsmin.\ngh-91330\n: Added more tests for\ndataclasses\nto cover behavior with\ndata descriptor-based fields.\ngh-94208\n:\ntest_ssl\nis now checking for supported TLS version and\nprotocols in more tests.\ngh-94315\n: Tests now check for DAC override capability instead of relying\non\nos.geteuid()\n.\ngh-54781\n: Rename test_tk to test_tkinter, and rename test_ttk_guionly to\ntest_ttk. Patch by Victor Stinner.\ngh-93839\n: Move\nLib/ctypes/test/\nto\nLib/test/test_ctypes/\n. Patch by\nVictor Stinner.\ngh-93951\n: In test_bdb.StateTestCase.test_skip, avoid including auxiliary\nimporters.\ngh-93957\n: Provide nicer error reporting from subprocesses in\ntest_venv.EnsurePipTest.test_with_pip.\ngh-93884\n: Add test cases for\nPyNumber_ToBase()\nthat take a large\nnumber or a non-int object as parameter.\ngh-93852\n: test_asyncio, test_logging, test_socket and test_socketserver\nnow create AF_UNIX domains in the current directory to no longer fail with\nOSError(\"AF_UNIX\npath\ntoo\nlong\")\nif the temporary directory (the\nTMPDIR\nenvironment variable) is too long. Patch by Victor\nStinner.\ngh-93353\n: regrtest now checks if a test leaks temporary files or\ndirectories if run with -jN option. Patch by Victor Stinner.\ngh-84461\n:\nrun_tests.py\nnow handles cross compiling env vars correctly\nand pass\nHOSTRUNNER\nto regression tests.\ngh-93616\n:\ntest_modulefinder\nnow creates a temporary directory in\nModuleFinderTest.setUp()\ninstead of module scope.\ngh-93575\n: Fix issue with test_unicode test_raiseMemError. The test case\nnow use\ntest.support.calcobjsize\nto calculate size of PyUnicode\nstructs.\nsys.getsizeof()\nmay return different size when string has\nUTF-8 memory.\ngh-90473\n: WASI does not have a\nchmod(2)\nsyscall.\nos.chmod()\nis\nnow a dummy function on WASI. Skip all tests that depend on working\nos.chmod()\n.\ngh-90473\n: Skip tests on WASI that require symlinks with absolute paths.\ngh-57539\n: Increase calendar test coverage for\ncalendar.LocaleTextCalendar.formatweekday()\n.\ngh-90473\n: Skip symlink tests on WASI. wasmtime uses\nopenat2(2)\nwith\nRESOLVE_BENEATH\nflag, which prevents symlinks with absolute paths.\ngh-89858\n: Fix\ntest_embed\nfor out-of-tree builds. Patch by Kumar\nAditya.\ngh-92886\n: Fixing tests that fail when running with optimizations (\n-O\n)\nin\ntest_imaplib.py\n.\ngh-92886\n: Fixing tests that fail when running with optimizations (\n-O\n)\nin\ntest_zipimport.py\ngh-92886\n: Fixing tests that fail when running with optimizations (\n-O\n)\nin\ntest_py_compile.py\ngh-92886\n: Fixing tests that fail when running with optimizations (\n-O\n)\nin\ntest_sys_settrace.py\n.\ngh-92886\n: Fixing tests that fail when running with optimizations (\n-O\n)\nin\n_test_multiprocessing.py\ngh-92670\n: Skip\ntest_shutil.TestCopy.test_copyfile_nonexistent_dir\ntest\non AIX as the test uses a trailing slash to force the OS consider the path\nas a directory, but on AIX the trailing slash has no effect and is\nconsidered as a file.\ngh-92514\n: Remove unused\ntest.support.BasicTestRunner\n. Patch by Jelle\nZijlstra.\nbpo-47016\n: Create a GitHub Actions workflow for verifying bundled pip and\nsetuptools. Patch by Illia Volochii and Adam Turner.\nBuild\n¶\ngh-96761\n: Fix the build process of clang compiler for\n_bootstrap_python\nif LTO optimization is applied. Patch by\nMatthias Görgens and Donghee Na.\ngh-96883\n:\nwasm32-emscripten\nbuilds for browsers now include\nconcurrent.futures\nfor\nasyncio\nand\nunittest.mock\n.\ngh-85936\n: CPython now uses the ThinLTO option as the default policy if the\nClang compiler accepts the flag. Patch by Donghee Na.\ngh-96729\n: Ensure that Windows releases built with\nTools\\msi\\buildrelease.bat\nare upgradable to and from official Python\nreleases.\ngh-96269\n: Shared module targets now depend on new\nMODULE_DEPS\nvariable, which includes\nEXPORTSYMS\n. This fixes a build order issue on\nunsupported AIX platform.\ngh-84461\n:\nwasm32-emscripten\nplatform no longer builds\nresource\nmodule,\ngetresuid()\n,\ngetresgid()\n, and their setters.\nThe APIs are stubs and not functional.\ngh-95973\n: Add a new\n--with-dsymutil\nconfigure option to link debug\ninformation in macOS. Patch by Pablo Galindo.\ngh-90536\n: Use the BOLT post-link optimizer to improve performance,\nparticularly on medium-to-large applications.\ngh-93744\n: Remove the\nconfigure\n--with-cxx-main\nbuild option: it didn’t\nwork for many years. Remove the\nMAINCC\nvariable from\nconfigure\nand\nMakefile\n. Patch by Victor Stinner.\ngh-94801\n: Fix a regression in\nconfigure\nscript that caused some header\nchecks to ignore custom\nCPPFLAGS\n. The regression was introduced in\ngh-94802\n.\ngh-95145\n: wasm32-wasi builds no longer depend on WASIX’s pthread stubs.\nPython now has its own stubbed pthread API.\ngh-95174\n: Python now detects missing\ndup\nfunction in WASI and works\naround some missing\nerrno\n,\nselect\n, and\nsocket\nconstants.\ngh-95174\n: Python now skips missing\nsocket\nfunctions and methods on\nWASI. WASI can only create sockets from existing fd / accept and has no\nnetdb.\ngh-95085\n: Platforms\nwasm32-unknown-emscripten\nand\nwasm32-unknown-wasi\nhave been promoted to\nPEP 11\ntier 3 platform\nsupport.\ngh-94847\n: Fixed\n_decimal\nmodule build issue on GCC when compiling with\nLTO and pydebug. Debug builds no longer force inlining of functions.\ngh-94841\n: Fix the possible performance regression of\nPyObject_Free()\ncompiled with MSVC version 1932.\ngh-94801\n:\nconfigure\nnow uses custom flags like\nZLIB_CFLAGS\nand\nZLIB_LIBS\nwhen searching for headers and libraries.\ngh-94773\n:\ndeepfreeze.py\nnow supports code object with frozensets that\ncontain incompatible, unsortable types.\ngh-94682\n: Build and test with OpenSSL 1.1.1q\ngh-90005\n: Dependencies of\nreadline\nand\ncurses\nmodule are now\ndetected in\nconfigure\nscript with\npkg-config\n. Only\nncurses\n/\nncursesw\nare detected automatically. The old\ncurses\nlibrary is not\nconfigured automatically. Workaround for missing\ntermcap\nor\ntinfo\nlibrary has been removed.\ngh-90005\n: Fix building\n_ctypes\nextension without\npkg-config\n.\ngh-90005\n:\n_dbm\nmodule dependencies are now detected by configure.\ngh-94404\n:\nmakesetup\nnow works around an issue with sed on macOS and\nuses correct CFLAGS for object files that end up in a shared extension.\nModule CFLAGS are used before PY_STDMODULE_CFLAGS to avoid clashes with\nsystem headers.\ngh-93939\n: C extension modules are now built by\nconfigure\nand\nmake\ninstead of\ndistutils\nand\nsetup.py\n.\ngh-93939\n: The\n2to3\n,\nidle\n, and\npydoc\nscripts are now generated\nand installed by\nMakefile\ninstead of\nsetup.py\n.\ngh-94280\n: Updated pegen regeneration script on Windows to find and use\nPython 3.9 or higher.  Prior to this, pegen regeneration already required\n3.9 or higher, but the script may have used lower versions of Python.\ngh-93584\n: Address race condition in\nMakefile\nwhen installing a PGO\nbuild. All\ntest\nand\ninstall\ntargets now depend on\nall\ntarget.\ngh-93491\n:\nconfigure\nnow detects and reports\nPEP 11\nsupport tiers.\ngh-69093\n: Fix\nModules/Setup.stdlib.in\nrule for\n_sqlite3\nextension.\ngh-93207\n:\nva_start()\nwith two parameters, like\nva_start(args,\nformat),\nis now required to build Python.\nva_start()\nis no longer\ncalled with a single parameter. Patch by Kumar Aditya.\ngh-93202\n: Python now always use the\n%zu\nand\n%zd\nprintf formats to\nformat a\nsize_t\nor\nPy_ssize_t\nnumber. Building Python 3.12\nrequires a C11 compiler, so these printf formats are now always supported.\nPatch by Victor Stinner.\ngh-90473\n: Disable pymalloc and increase stack size on\nwasm32-wasi\n.\nbpo-34449\n: Drop invalid compiler switch\n-fPIC\nfor HP aCC on HP-UX.\nPatch by Michael Osipov.\nWindows\n¶\ngh-98360\n: Fixes\nmultiprocessing\nspawning child processes on Windows\nfrom a virtual environment to ensure that child processes that also use\nmultiprocessing\nto spawn more children will recognize that they are\nin a virtual environment.\ngh-98414\n: Fix\npy.exe\nlauncher handling of\n-V:\n<company>\n/\noption when default preferences have been set in environment variables or\nconfiguration files.\ngh-97728\n: Fix possible crashes caused by the use of uninitialized\nvariables when pass invalid arguments in\nos.system()\non Windows and\nin Windows-specific modules (like\nwinreg\n).\ngh-90989\n: Made\nPython Launcher for Windows\ninstall per-user by default (unless an all\nusers install already exists), and clarify some text in the installer.\ngh-97649\n: The\nTools\ndirectory is no longer installed on Windows\ngh-96965\n: Update libffi to 3.4.3\ngh-96577\n: Fixes a potential buffer overrun in\nmsilib\n.\ngh-96559\n: Fixes the Windows launcher not using the compatible\ninterpretation of default tags found in configuration files when no tag\nwas passed to the command.\ngh-94781\n: Fix\npcbuild.proj\nto clean previous instances of output\nfiles in\nPython\\deepfreeze\nand\nPython\\frozen_modules\ndirectories\non Windows. Patch by Charlie Zhao.\ngh-89545\n: Updates\nplatform\ncode getting the Windows version to use\nnative Windows Management Instrumentation (WMI) queries to determine OS\nversion, type, and architecture.\ngh-95733\n: Make certain requirements of the Windows Store package optional\nto allow installing on earlier updates of Windows.\ngh-95656\n: Enable the\nenable_load_extension()\nsqlite3\nAPI.\ngh-95587\n: Fixes some issues where the Windows installer would incorrectly\ndetect certain features of an existing install when upgrading.\ngh-94399\n: Restores the behaviour of\nPython Launcher for Windows\nfor\n/usr/bin/env\nshebang lines, which will now search\nPATH\nfor an executable\nmatching the given command. If none is found, the usual search process is\nused.\ngh-95445\n: Fixes the unsuccessful removal of the HTML document directory\nwhen uninstalling with Windows msi.\ngh-95359\n: Fix\nPython Launcher for Windows\nhandling of\npy.ini\ncommands (it was\nincorrectly expecting a\npy_\nprefix on keys) and crashes when reading\nper-user configuration file.\ngh-95285\n: Fix\nPython Launcher for Windows\nhandling of command lines where it is only\npassed a short executable name.\ngh-90844\n: Allow virtual environments to correctly launch when they have\nspaces in the path.\ngh-94772\n: Fix incorrect handling of shebang lines in py.exe launcher\ngh-94018\n:\nzipfile\nwill now remove trailing spaces from path\ncomponents when extracting files on Windows.\ngh-93824\n: Drag and drop of files onto Python files in Windows Explorer has\nbeen enabled for Windows ARM64.\ngh-43414\n:\nos.get_terminal_size()\nnow attempts to read the size from\nany provided handle, rather than only supporting file descriptors 0, 1 and\n2.\ngh-92817\n: Ensures that\npy.exe\nwill prefer an active virtual\nenvironment over default tags specified with environment variables or\nthrough a\npy.ini\nfile.\ngh-92984\n: Explicitly disable incremental linking for non-Debug builds\ngh-92841\n:\nasyncio\nno longer throws\nRuntimeError:\nEvent\nloop\nis\nclosed\non interpreter exit after asynchronous socket activity. Patch by\nOleg Iarygin.\nbpo-46907\n: Update Windows installer to use SQLite 3.38.4.\ngh-91061\n: Accept os.PathLike for the argument to winsound.PlaySound\nbpo-42658\n: Support native Windows case-insensitive path comparisons by\nusing\nLCMapStringEx\ninstead of\nstr.lower()\nin\nntpath.normcase()\n. Add\nLCMapStringEx\nto the\n_winapi\nmodule.\nbpo-38704\n: Prevent installation on unsupported Windows versions.\nmacOS\n¶\ngh-97897\n: The macOS 13 SDK includes support for the\nmkfifoat\nand\nmknodat\nsystem calls. Using the\ndir_fd\noption with either\nos.mkfifo()\nor\nos.mknod()\ncould result in a segfault if\ncpython is built with the macOS 13 SDK but run on an earlier version of\nmacOS. Prevent this by adding runtime support for detection of these\nsystem calls (“weaklinking”) as is done for other newer syscalls on macOS.\nIDLE\n¶\ngh-97527\n: Fix a bug in the previous bugfix that caused IDLE to not start\nwhen run with 3.10.8, 3.12.0a1, and at least Microsoft Python 3.10.2288.0\ninstalled without the Lib/test package.  3.11.0 was never affected.\ngh-65802\n: Document handling of extensions in Save As dialogs.\ngh-95191\n: Include prompts when saving Shell (interactive input and\noutput).\ngh-95511\n: Fix the Shell context menu copy-with-prompts bug of copying an\nextra line when one selects whole lines.\ngh-95471\n: In the Edit menu, move\nSelect\nAll\nand add a new separator.\ngh-95411\n: Enable using IDLE’s module browser with .pyw files.\ngh-89610\n: Add .pyi as a recognized extension for IDLE on macOS.    This\nallows opening stub files by double clicking on them in the Finder.\nTools/Demos\n¶\ngh-68686\n: Remove ptags and eptags scripts.\ngh-97681\n: Remove the\nTools/demo/\ndirectory which contained old demo\nscripts. A copy can be found in the\nold-demos project\n.  Patch by Victor Stinner.\ngh-97669\n: Remove outdated example scripts of the\nTools/scripts/\ndirectory. A copy can be found in the\nold-demos project\n. Patch by Victor Stinner.\ngh-95853\n: The\nwasm_build.py\nscript now pre-builds Emscripten ports,\nchecks for broken EMSDK versions, and warns about pkg-config env vars.\ngh-95853\n: The new tool\nTools/wasm/wasm_builder.py\nautomates configure,\ncompile, and test steps for building CPython on WebAssembly platforms.\ngh-95731\n: Fix handling of module docstrings in\nTools/i18n/pygettext.py\n.\ngh-93939\n: Add script\nTools/scripts/check_modules.py\nto check and\nvalidate builtin and shared extension modules. The script also handles\nModules/Setup\nand will eventually replace\nsetup.py\n.\ngh-94538\n: Fix Argument Clinic output to custom file destinations. Patch by\nErlend E. Aasland.\ngh-94430\n: Allow parameters named\nmodule\nand\nself\nwith custom C\nnames in Argument Clinic. Patch by Erlend E. Aasland\ngh-86087\n: The\nTools/scripts/parseentities.py\nscript used to parse\nHTML4 entities has been removed.\nC API\n¶\ngh-98393\n: The\nPyUnicode_FSDecoder()\nfunction no longer accepts\nbytes-like paths, like\nbytearray\nand\nmemoryview\ntypes:\nonly the exact\nbytes\ntype is accepted for bytes strings. Patch by\nVictor Stinner.\ngh-91051\n: Add\nPyType_Watch()\nand related APIs to allow callbacks\non\nPyType_Modified()\n.\ngh-95756\n: Lazily create and cache\nco_\nattributes for better\nperformance for code getters.\ngh-96512\n: Configuration for the\ninteger string conversion length\nlimitation\nnow lives in the PyConfig C API struct.\ngh-95589\n: Extensions classes that set\ntp_dictoffset\nand\ntp_weaklistoffset\nlose the support for multiple inheritance, but are\nnow safe. Extension classes should use\nPy_TPFLAGS_MANAGED_DICT\nand\nPy_TPFLAGS_MANAGED_WEAKREF\ninstead.\ngh-95781\n: An unrecognized format character in\nPyUnicode_FromFormat()\nand\nPyUnicode_FromFormatV()\nnow\nsets a\nSystemError\n. In previous versions it caused all the rest of\nthe format string to be copied as-is to the result string, and any extra\narguments discarded.\ngh-92678\n: Restore the 3.10 behavior for multiple inheritance of C\nextension classes that store their dictionary at the end of the struct.\ngh-92678\n: Support C extensions using managed dictionaries by setting the\nPy_TPFLAGS_MANAGED_DICT\nflag.\ngh-93274\n: API for implementing vectorcall\n(\nPy_TPFLAGS_HAVE_VECTORCALL\n,\nPyVectorcall_NARGS()\nand\nPyVectorcall_Call()\n) was added to the limited API and stable ABI.\ngh-95504\n: Fix sign placement when specifying width or precision in\nPyUnicode_FromFormat()\nand\nPyUnicode_FromFormatV()\n. Patch\nby Philip Georgi.\ngh-93012\n: The\nPy_TPFLAGS_HAVE_VECTORCALL\nflag is now removed\nfrom a class when the class’s\n__call__()\nmethod is\nreassigned. This makes vectorcall safe to use with mutable types (i.e.\nheap types without the\nimmutable\nflag). Mutable types that do not override\ntp_call\nnow inherit the\nPy_TPFLAGS_HAVE_VECTORCALL\nflag.\ngh-95388\n: Creating\nimmutable\ntypes\nwith mutable bases is deprecated and is planned to be disabled in Python\n3.14.\ngh-92678\n: Adds unstable C-API functions\n_PyObject_VisitManagedDict\nand\n_PyObject_ClearManagedDict\nto allow C extensions to allow the VM to\nmanage their object’s dictionaries.\ngh-94936\n: Added\nPyCode_GetVarnames()\n,\nPyCode_GetCellvars()\nand\nPyCode_GetFreevars()\nfor accessing\nco_varnames\n,\nco_cellvars\nand\nco_freevars\nrespectively via the C API.\ngh-94930\n: Fix\nSystemError\nraised when\nPyArg_ParseTupleAndKeywords()\nis used with\n#\nin\n(...)\nbut\nwithout\nPY_SSIZE_T_CLEAN\ndefined.\ngh-94731\n: Python again uses C-style casts for most casting operations when\ncompiled with C++. This may trigger compiler warnings, if they are enabled\nwith e.g.\n-Wold-style-cast\nor\n-Wzero-as-null-pointer-constant\noptions for\ng++\n.\ngh-93937\n: The following frame functions and type are now directly\navailable with\n#include\n<Python.h>\n, it’s no longer needed to add\n#include\n<frameobject.h>\n:\nPyFrame_Check()\nPyFrame_GetBack()\nPyFrame_GetBuiltins()\nPyFrame_GetGenerator()\nPyFrame_GetGlobals()\nPyFrame_GetLasti()\nPyFrame_GetLocals()\nPyFrame_Type\nPatch by Victor Stinner.\ngh-91321\n: Fix the compatibility of the Python C API with C++ older than\nC++11. Patch by Victor Stinner.\ngh-91731\n: Avoid defining the\nstatic_assert\nwhen compiling with C++ 11,\nwhere this is a keyword and redefining it can lead to undefined behavior.\nPatch by Pablo Galindo\ngh-89546\n:\nPyType_FromMetaclass()\n(and other\nPyType_From*\nfunctions) now check that offsets and the base class’s\ntp_basicsize\nfit in the new class’s\ntp_basicsize\n.\ngh-93503\n: Add two new public functions to the public C-API,\nPyEval_SetProfileAllThreads()\nand\nPyEval_SetTraceAllThreads()\n, that allow to set tracing and\nprofiling functions in all running threads in addition to the calling one.\nAlso, two analogous functions to the\nthreading\nmodule\n(\nthreading.setprofile_all_threads()\nand\nthreading.settrace_all_threads()\n) that allow to do the same from\nPython. Patch by Pablo Galindo\ngh-93442\n: Add C++ overloads for _Py_CAST_impl() to handle 0/NULL.  This\nwill allow C++ extensions that pass 0 or NULL to macros using _Py_CAST()\nto continue to compile.\ngh-93466\n: Slot IDs in PyType_Spec may not be repeated. The documentation\nwas updated to mention this. For some cases of repeated slots,\nPyType_FromSpec and related functions will now raise an exception.\ngh-92898\n: Fix C++ compiler warnings when casting function arguments to\nPyObject*\n. Patch by Serge Guelton.\ngh-93103\n: Deprecate global configuration variables, like\nPy_IgnoreEnvironmentFlag\n, in the documentation: the\nPy_InitializeFromConfig()\nAPI should be instead. Patch by Victor\nStinner.\ngh-77782\n: Deprecate global configuration variable like\nPy_IgnoreEnvironmentFlag\n: the\nPy_InitializeFromConfig()\nAPI should be instead. Patch by Victor Stinner.\ngh-92913\n: Ensures changes to\nPyConfig.module_search_paths\nare\nignored unless\nPyConfig.module_search_paths_set\nis set\ngh-92781\n: Avoid mixing declarations and code in the C API to fix the\ncompiler warning: “ISO C90 forbids mixed declarations and code”\n[-Werror=declaration-after-statement]. Patch by Victor Stinner.\ngh-92651\n: Remove the\ntoken.h\nheader file. There was never any public\ntokenizer C API. The\ntoken.h\nheader file was only designed to be used\nby Python internals. Patch by Victor Stinner.\ngh-92536\n: Remove legacy Unicode APIs based on\nPy_UNICODE*\n.\ngh-85858\n: Remove the\nPyUnicode_InternImmortal()\nfunction and the\nSSTATE_INTERNED_IMMORTAL\nmacro. Patch by Victor Stinner.\ngh-92193\n: Add new function\nPyFunction_SetVectorcall()\nto the C API\nwhich sets the vectorcall field of a given\nPyFunctionObject\n.\nWarning: extensions using this API must preserve the behavior of the\nunaltered function!\ngh-59121\n: Fixed an assert that prevented\nPyRun_InteractiveOne\nfrom\nproviding tracebacks when parsing from the provided FD.\nbpo-45383\n: The\nPyType_FromSpec()\nAPI will now find and use a\nmetaclass based on the provided bases. An error will be raised if there is\na metaclass conflict.\nPython 3.11.0 beta 1\n¶\nRelease date: 2022-05-06\nSecurity\n¶\ngh-57684\n: Add the\n-P\ncommand line option and the\nPYTHONSAFEPATH\nenvironment variable to not prepend a potentially\nunsafe path to\nsys.path\n. Patch by Victor Stinner.\nCore and Builtins\n¶\ngh-89519\n: Chaining classmethod descriptors (introduced in\nbpo-19072\n) is\ndeprecated. It can no longer be used to wrap other descriptors such as\nproperty().  The core design of this feature was flawed, and it caused a\nnumber of downstream problems.\ngh-92345\n:\npymain_run_python()\nnow imports\nreadline\nand\nrlcompleter\nbefore sys.path is extended to include the current working\ndirectory of an interactive interpreter. Non-interactive interpreters are\nnot affected.\nbpo-43857\n: Improve the\nAttributeError\nmessage when deleting a\nmissing attribute. Patch by Géry Ogam.\ngh-92245\n: Make sure that PEP 523 is respected in all cases. In 3.11a7,\nspecialization may have prevented Python-to-Python calls respecting PEP\n523.\ngh-92203\n: Add a closure keyword-only parameter to\nexec()\n. It can\nonly be specified when exec-ing a code object that uses free variables.\nWhen specified, it must be a tuple, with exactly the number of cell\nvariables referenced by the code object. closure has a default value of\nNone\n, and it must be\nNone\nif the code object doesn’t refer to any\nfree variables.\ngh-91173\n: Disable frozen modules in debug builds. Patch by Kumar Aditya.\ngh-92114\n: Improve error message when subscript a type with\n__class_getitem__\nset to\nNone\n.\ngh-92112\n: Fix crash triggered by an evil custom\nmro()\non a metaclass.\ngh-92063\n: The\nPRECALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS\ninstruction\nnow ensures methods are called only on objects of the correct type.\ngh-92031\n: Deoptimize statically allocated code objects during\nPy_FINALIZE()\nso that future\n_PyCode_Quicken\ncalls always start\nwith unquickened code.\ngh-92036\n: Fix a crash in subinterpreters related to the garbage collector.\nWhen a subinterpreter is deleted, untrack all objects tracked by its GC.\nTo prevent a crash in deallocator functions expecting objects to be\ntracked by the GC, leak a strong reference to these objects on purpose, so\nthey are never deleted and their deallocator functions are not called.\nPatch by Victor Stinner.\ngh-92032\n: The interpreter can now autocomplete soft keywords, as of now\nmatch\n,\ncase\n, and\n_\n(wildcard pattern) from\nPEP 634\n.\ngh-87999\n: The warning emitted by the Python parser for a numeric literal\nimmediately followed by keyword has been changed from deprecation warning\nto syntax warning.\ngh-91869\n: Fix an issue where specialized opcodes with extended arguments\ncould produce incorrect tracing output or lead to assertion failures.\ngh-91603\n: Speed up\ntypes.UnionType\ninstantiation. Based on patch\nprovided by Yurii Karabas.\ngh-89373\n: If Python is built in debug mode, Python now ensures that\ndeallocator functions leave the current exception unchanged. Patch by\nVictor Stinner.\ngh-91632\n: Fix a minor memory leak at exit: release the memory of the\ngeneric_alias_iterator\ntype. Patch by Donghee Na.\ngh-81548\n: Octal escapes with value larger than\n0o377\nnow produce a\nDeprecationWarning\n. In a future Python version they will be a\nSyntaxWarning\nand eventually a\nSyntaxError\n.\nbpo-43950\n: Use a single compact table for line starts, ends and column\noffsets. Reduces memory consumption for location info by half\ngh-91102\n: Use Argument Clinic for\nEncodingMap\n.  Patch by Oleg\nIarygin.\ngh-91636\n: Fixed a crash in a garbage-collection edge-case, in which a\nPyFunction_Type.tp_clear\nfunction could leave a python function object\nin an inconsistent state.\ngh-91603\n: Speed up\nisinstance()\nand\nissubclass()\nchecks for\ntypes.UnionType\n. Patch by Yurii Karabas.\ngh-91625\n: Fixed a bug in which adaptive opcodes ignored any preceding\nEXTENDED_ARG\ns on specialization failure.\ngh-78607\n: The LLTRACE special build now looks for the name\n__lltrace__\ndefined in module globals, rather than the name\n__ltrace__\n, which had\nbeen introduced as a typo.\ngh-91576\n: Speed up iteration of ascii strings by 50%. Patch by Kumar\nAditya.\ngh-89279\n: Improve interpreter performance on Windows by inlining a few\nspecific macros.\ngh-91502\n: Add a new\n_PyFrame_IsEntryFrame()\nAPI function, to\ncheck if a\nPyFrameObject\nis an entry frame. Patch by Pablo\nGalindo.\ngh-91266\n: Refactor the\nbytearray\nstrip methods\nstrip\n,\nlstrip\nand\nrstrip\nto use a common implementation.\ngh-91479\n: Replaced the\n__note__\nfield of\nBaseException\n(added\nin an earlier version of 3.11) with the final design of\nPEP 678\n.\nNamely,\nBaseException\ngets an\nadd_note()\nmethod, and its\n__notes__\nfield is created when necessary.\ngh-46055\n: Speed up right shift of negative integers, by removing\nunnecessary creation of temporaries. Original patch by Xinhang Xu,\nreworked by Mark Dickinson.\ngh-91462\n: Make the interpreter’s low-level tracing (lltrace) feature\noutput more readable by displaying opcode names (rather than just\nnumbers), and by displaying stack contents before each opcode.\ngh-89455\n: Fixed an uninitialized bool value in the traceback printing code\npath that was introduced by the initial\nbpo-45292\nexception groups work.\ngh-91421\n: Fix a potential integer overflow in _Py_DecodeUTF8Ex.\ngh-91428\n: Add\nstatic\nconst\nchar\n*const\n_PyOpcode_OpName[256]\n=\n{...};\nto\nopcode.h\nfor debug builds to assist in debugging the Python\ninterpreter. It is now more convenient to make various forms of debugging\noutput more human-readable by including opcode names rather than just the\ncorresponding decimal digits.\nbpo-47120\n: Make\nPOP_JUMP_IF_TRUE\n,\nPOP_JUMP_IF_FALSE\n,\nPOP_JUMP_IF_NONE\nand\nPOP_JUMP_IF_NOT_NONE\nvirtual,\nmapping to new relative jump opcodes.\nbpo-45317\n: Add internal documentation explaining design of new (for 3.11)\nframe stack.\nbpo-47197\n: ctypes used to mishandle\nvoid\nreturn types, so that for\ninstance a function declared like\nctypes.CFUNCTYPE(None,\nctypes.c_int)\nwould be called with signature\nint\nf(int)\ninstead of\nvoid\nf(int)\n.\nWasm targets require function pointers to be called with the correct\nsignatures so this led to crashes. The problem is now fixed.\nbpo-47120\n: Make opcodes\nJUMP_IF_TRUE_OR_POP\nand\nJUMP_IF_FALSE_OR_POP\nrelative rather than absolute.\nbpo-47177\n: Replace the\nf_lasti\nmember of the internal\n_PyInterpreterFrame\nstructure with a\nprev_instr\npointer, which\nreduces overhead in the main interpreter loop. The\nf_lasti\nattribute\nof Python-layer frame objects is preserved for backward-compatibility.\nbpo-46961\n: Integer mod/remainder operations, including the three-argument\nform of\npow()\n, now consistently return ints from the global small\ninteger cache when applicable.\nbpo-46962\n: Classes and functions that unconditionally declared their\ndocstrings ignoring the\n--without-doc-strings\ncompilation flag no\nlonger do so.\nThe classes affected are\nctypes.UnionType\n,\npickle.PickleBuffer\n,\ntestcapi.RecursingInfinitelyError\n,\nand\ntypes.GenericAlias\n.\nThe functions affected are 24 methods in\nctypes\n.\nPatch by Oleg Iarygin.\nbpo-46942\n: Use Argument Clinic for the\ntypes.MethodType\nconstructor.  Patch by Oleg Iarygin.\nbpo-46764\n: Fix wrapping bound methods with @classmethod\nbpo-43464\n: Optimize\nset.intersection()\nfor non-set arguments.\nbpo-46721\n: Optimize\nset.issuperset()\nfor non-set argument.\nbpo-46509\n: Add type-specialized versions of the\nPy_DECREF()\n, and use\nthem for\nfloat\n,\nint\n,\nstr\n,\nbool\n, and\nNone\nto avoid\npointer-chasing at runtime where types are known at C compile time.\nbpo-46045\n: Do not use POSIX semaphores on NetBSD\nbpo-36819\n: Fix crashes in built-in encoders with error handlers that\nreturn position less or equal than the starting position of non-encodable\ncharacters.\nbpo-34093\n:\nmarshal.dumps()\nuses\nFLAG_REF\nfor all interned strings.\nThis makes output more deterministic and helps reproducible build.\nbpo-26579\n: Added\nobject.__getstate__\nwhich provides the default\nimplementation of the\n__getstate__()\nmethod.\nCopying and pickling instances of subclasses of builtin types bytearray,\nset, frozenset, collections.OrderedDict, collections.deque,\nweakref.WeakSet, and datetime.tzinfo now copies and pickles instance\nattributes implemented as slots.\nLibrary\n¶\ngh-87901\n: Add the\nencoding\nparameter to\nos.popen()\n.\ngh-90997\n: Fix an issue where\ndis\nutilities may interpret populated\ninline cache entries as valid instructions.\ngh-92332\n: Deprecate\ntyping.Text\n(removal of the class is\ncurrently not planned). Patch by Alex Waygood.\ngh-78157\n: Deprecate nested classes in enum definitions becoming members –\nin 3.13 they will be normal classes; add\nmember\nand\nnonmember\nfunctions to allow control over results now.\ngh-92356\n: Fixed a performance regression in ctypes function calls.\ngh-90997\n: Show the actual named values stored in inline caches when\nshow_caches=True\nis passed to\ndis\nutilities.\ngh-92301\n: Prefer\nclose_range()\nto iterating over procfs for file\ndescriptor closing in\nsubprocess\nfor better performance.\ngh-67248\n: Sort the miscellaneous topics in Cmd.do_help()\ngh-92210\n: Port\nsocket.__init__\nto Argument Clinic. Patch by Cinder.\ngh-80010\n: Add support for generalized ISO 8601 parsing to\ndatetime.datetime.fromisoformat()\n,\ndatetime.date.fromisoformat()\nand\ndatetime.time.fromisoformat()\n. Patch by Paul Ganssle.\ngh-92118\n: Fix a 3.11 regression in\ncontextmanager()\n,\nwhich caused it to propagate exceptions with incorrect tracebacks.\ngh-90887\n: Adding\nCOPYFILE_STAT\n,\nCOPYFILE_ACL\nand\nCOPYFILE_XATTR\nconstants for\nos.fcopyfile()\navailable in macOs.\ngh-91215\n: For\n@dataclass\n, add\nweakref_slot\n. The new parameter defaults to\nFalse\n. If true, and if\nslots=True\n, add a slot named\n\"__weakref__\"\n, which will allow\ninstances to be weakref’d. Contributed by Eric V. Smith\ngh-85984\n: New function os.login_tty() for Unix.\ngh-92128\n: Add\n__class_getitem__()\nto\nlogging.LoggerAdapter\nand\nlogging.StreamHandler\n,\nallowing them to be parameterized at runtime. Patch by Alex Waygood.\ngh-92049\n: Forbid pickling constants\nre._constants.SUCCESS\netc.\nPreviously, pickling did not fail, but the result could not be unpickled.\ngh-92062\n:\ninspect.Parameter\nnow raises\nValueError\nif\nname\nis a keyword, in addition to the existing check that it is an\nidentifier.\ngh-87390\n: Add an\n__unpacked__\nattribute to\ntypes.GenericAlias\n. Patch by Jelle Zijlstra.\ngh-88089\n: Add support for generic\ntyping.NamedTuple\n.\ngh-91996\n: New http.HTTPMethod enum to represent all the available HTTP\nrequest methods in a convenient way\ngh-91984\n: Modified test strings in test_argparse.py to not contain\ntrailing spaces before end of line.\ngh-91952\n: Add\nencoding=\"locale\"\nsupport to\nTextIOWrapper.reconfigure()\n.\ngh-91954\n: Add\nencoding\nand\nerrors\narguments to\nsubprocess.getoutput()\nand\nsubprocess.getstatusoutput()\n.\nbpo-47029\n: Always close the read end of the pipe used by\nmultiprocessing.Queue\nafter\nthe last write of buffered data to\nthe write end of the pipe to avoid\nBrokenPipeError\nat garbage\ncollection and at\nmultiprocessing.Queue.close()\ncalls. Patch by Géry\nOgam.\ngh-91928\n: Add\ndatetime.UTC\nalias for\ndatetime.timezone.utc\n.\nPatch by Kabir Kwatra.\ngh-68966\n: The\nmailcap\nmodule is now deprecated and will be removed\nin Python 3.13. See\nPEP 594\nfor the rationale and the\nmimetypes\nmodule for an alternative. Patch by Victor Stinner.\ngh-91401\n: Provide a way to disable\nsubprocess\nuse of\nvfork()\njust in case it is ever needed and document the existing mechanism for\nposix_spawn()\n.\ngh-64783\n: Fix\nsignal.NSIG\nvalue on FreeBSD to accept signal\nnumbers greater than 32, like\nsignal.SIGRTMIN\nand\nsignal.SIGRTMAX\n. Patch by Victor Stinner.\ngh-91910\n: Add missing f prefix to f-strings in error messages from the\nmultiprocessing\nand\nasyncio\nmodules.\ngh-91860\n: Add\ntyping.dataclass_transform()\n, implementing\nPEP 681\n.\nPatch by Jelle Zijlstra.\ngh-91832\n: Add\nrequired\nattribute to\nargparse.Action\nrepr\noutput.\ngh-91827\n: In the\ntkinter\nmodule add method\ninfo_patchlevel()\nwhich returns the exact version of the Tcl library as a named tuple\nsimilar to\nsys.version_info\n.\ngh-84461\n: Add\n--enable-wasm-pthreads\nto enable pthreads support\nfor WASM builds.\nEmscripten/node\nno longer has threading enabled by\ndefault. Include additional file systems.\ngh-91821\n: Fix unstable\ntest_from_tuple\ntest in\ntest_decimal.py\n.\ngh-91217\n: Deprecate the xdrlib module.\ngh-91217\n: Deprecate the uu module.\ngh-91760\n: More strict rules will be applied for numerical group references\nand group names in regular expressions. For now, a deprecation warning is\nemitted for group references and group names which will be errors in\nfuture Python versions.\ngh-84461\n: Add provisional\nsys._emscripten_info\nnamed tuple with\nbuild-time and run-time information about Emscripten platform.\ngh-90623\n:\nsignal.raise_signal()\nand\nos.kill()\nnow check\nimmediately for pending signals. Patch by Victor Stinner.\ngh-91734\n: Fix OSS audio support on Solaris.\ngh-90633\n: Include the passed value in the exception thrown by\ntyping.assert_never()\n. Patch by Jelle Zijlstra.\ngh-91700\n: Compilation of regular expression containing a conditional\nexpression\n(?(group)...)\nnow raises an appropriate\nre.error\nif\nthe group number refers to not defined group. Previously an internal\nRuntimeError was raised.\ngh-91231\n: Add an optional keyword\nshutdown_timeout\nparameter to the\nmultiprocessing.BaseManager\nconstructor. Kill the process if\nterminate() takes longer than the timeout. Patch by Victor Stinner.\ngh-91621\n: Fix\ntyping.get_type_hints()\nfor\ncollections.abc.Callable\n. Patch by Shantanu Jain.\ngh-90568\n: Parsing\n\\N\nescapes of Unicode Named Character Sequences in a\nregular\nexpression\nraises now\nre.error\ninstead of\nTypeError\n.\ngh-91670\n: Remove deprecated\nSO\nconfig variable in\nsysconfig\n.\ngh-91217\n: Deprecate the telnetlib module.\ngh-91217\n: Deprecate the sunau module.\ngh-91217\n: Deprecate the spwd module.\ngh-91217\n: Deprecate the sndhdr module, as well as inline needed\nfunctionality for\nemail.mime.MIMEAudio\n.\ngh-91616\n:\nre\nmodule, fix\nfullmatch()\nmismatch\nwhen using Atomic Grouping or Possessive Quantifiers.\ngh-91217\n: Deprecate the ‘pipes’ module.\ngh-91217\n: Deprecate the ossaudiodev module.\nbpo-47256\n:\nre\nmodule, limit the maximum capturing group to\n1,073,741,823 in 64-bit build, this increases the depth of backtracking.\ngh-91217\n: Deprecate the nis module.\ngh-91595\n: Fix the comparison of character and integer inside\nTools.gdb.libpython.write_repr()\n. Patch by Yu Liu.\ngh-74166\n: Add option to raise all errors from\ncreate_connection()\nin an\nExceptionGroup\nwhen it\nfails to create a connection. The default remains to raise only the last\nerror that had occurred when multiple addresses were tried.\ngh-91487\n: Optimize asyncio UDP speed, over 100 times faster when\ntransferring a large file.\ngh-91575\n: Update case-insensitive matching in the\nre\nmodule to the\nlatest Unicode version.\ngh-90622\n: In\nconcurrent.futures.process.ProcessPoolExecutor\ndisallow\nthe “fork” multiprocessing start method when the new\nmax_tasks_per_child\nfeature is used as the mix of threads+fork can\nhang the child processes. Default to using the safe “spawn” start method\nin that circumstance if no\nmp_context\nwas supplied.\ngh-89022\n: In\nsqlite3\n,\nSQLITE_MISUSE\nresult codes are now mapped\nto\nInterfaceError\ninstead of\nProgrammingError\n. Also, more accurate exceptions are\nraised when binding parameters fail. Patch by Erlend E. Aasland.\ngh-91526\n: Stop calling\nos.device_encoding(file.fileno())\nin\nTextIOWrapper\n. It was complex, never documented, and didn’t work\nfor most cases. (Patch by Inada Naoki.)\ngh-88116\n: Change the frame-related functions in the\ninspect\nmodule\nto return a regular object (that is backwards compatible with the old\ntuple-like interface) that include the extended\nPEP 657\nposition\ninformation (end line number, column and end column). The affected\nfunctions are:\ninspect.getframeinfo()\n,\ninspect.getouterframes()\n,\ninspect.getinnerframes()\n,\ninspect.stack()\nand\ninspect.trace()\n. Patch by Pablo Galindo.\ngh-69093\n: Add indexing and slicing support to\nsqlite3.Blob\n. Patch\nby Aviv Palivoda and Erlend E. Aasland.\ngh-69093\n: Add\ncontext manager\nsupport to\nsqlite3.Blob\n.\nPatch by Aviv Palivoda and Erlend E. Aasland.\ngh-91217\n: Deprecate nntplib.\ngh-91217\n: Deprecate msilib.\ngh-91404\n: Improve the performance of\nre\nmatching by using computed\ngotos (or “threaded code”) on supported platforms and removing expensive\npointer indirections.\ngh-91217\n: Deprecate the imghdr module.\ngh-91217\n: Deprecate the crypt module.\ngh-91276\n: Make space for longer opcodes in\ndis\noutput.\nbpo-47000\n: Make\nTextIOWrapper\nuses locale encoding when\nencoding=\"locale\"\nis specified even in UTF-8 mode.\ngh-91230\n:\nwarnings.catch_warnings()\nnow accepts arguments for\nwarnings.simplefilter()\n, providing a more concise way to locally\nignore warnings or convert them to errors.\ngh-91217\n: Deprecate the chunk module.\ngh-91498\n: Add the\nTCP_CONNECTION_INFO\noption (available on macOS) to\nsocket\n.\nbpo-47260\n: Fix\nos.closerange()\npotentially being a no-op in a Linux\nseccomp sandbox.\nbpo-47087\n: Implement\ntyping.Required\nand\ntyping.NotRequired\n(\nPEP 655\n). Patch by David Foster and Jelle Zijlstra.\nbpo-47061\n: Deprecate cgi and cgitb.\nbpo-47061\n: Deprecate audioop.\nbpo-47000\n: Add\nlocale.getencoding()\nto get the current locale\nencoding. It is similar to\nlocale.getpreferredencoding(False)\nbut\nignores the\nPython UTF-8 Mode\n.\nbpo-42012\n: Add\nwsgiref.types\n, containing WSGI-specific types for\nstatic type checking.\nbpo-47227\n: Suppress expression chaining for more\nre\nparsing errors.\nbpo-47211\n: Remove undocumented and never working function\nre.template()\nand flag\nre.TEMPLATE\n. This was later reverted in\n3.11.0b2 and deprecated instead.\nbpo-47135\n:\ndecimal.localcontext()\nnow accepts context attributes via\nkeyword arguments\nbpo-43323\n: Fix errors in the\nemail\nmodule if the charset itself\ncontains undecodable/unencodable characters.\nbpo-46841\n: Disassembly of quickened code.\nbpo-46681\n: Forward gzip.compress() compresslevel to zlib.\nbpo-45100\n: Add\ntyping.get_overloads()\nand\ntyping.clear_overloads()\n. Patch by Jelle Zijlstra.\nbpo-44807\n:\ntyping.Protocol\nno longer silently replaces\n__init__()\nmethods defined on subclasses. Patch by Adrian Garcia\nBadaracco.\nbpo-46787\n: Fix\nconcurrent.futures.ProcessPoolExecutor\nexception\nmemory leak\nbpo-46720\n: Add support for path-like objects to\nmultiprocessing.set_executable()\nfor Windows to be on a par with\nUnix-like systems. Patch by Géry Ogam.\nbpo-46696\n: Add\nSO_INCOMING_CPU\nconstant to\nsocket\n.\nbpo-46053\n: Fix OSS audio support on NetBSD.\nbpo-45639\n:\nimage/avif\nand\nimage/webp\nwere added to\nmimetypes\n.\nbpo-46285\n: Add command-line option\n-p\n/\n--protocol\nto module\nhttp.server\nwhich specifies the HTTP version to which the server is\nconformant (HTTP/1.1 conformant servers can now be run from the\ncommand-line interface of module\nhttp.server\n). Patch by Géry Ogam.\nbpo-44791\n: Accept ellipsis as the last argument of\ntyping.Concatenate\n.\nbpo-46547\n: Remove variables leaking into\npydoc.Helper\nclass namespace.\nbpo-46415\n: Fix ipaddress.ip_{address,interface,network} raising TypeError\ninstead of ValueError if given invalid tuple as address parameter.\nbpo-46075\n:\nCookieJar\nwith\nDefaultCookiePolicy\nnow can process\ncookies from localhost with domain=localhost explicitly specified in\nSet-Cookie header.\nbpo-45995\n: Add a “z” option to the string formatting specification that\ncoerces negative zero floating-point values to positive zero after\nrounding to the format precision.  Contributed by John Belmonte.\nbpo-26175\n: Fully implement the\nio.BufferedIOBase\nor\nio.TextIOBase\ninterface for\ntempfile.SpooledTemporaryFile\nobjects. This lets them work\ncorrectly with higher-level layers (like compression modules). Patch by\nCarey Metcalfe.\nbpo-45138\n: Fix a regression in the\nsqlite3\ntrace callback where\nbound parameters were not expanded in the passed statement string. The\nregression was introduced in Python 3.10 by\nbpo-40318\n. Patch by\nErlend E. Aasland.\nbpo-44863\n: Allow\nTypedDict\nsubclasses to also include\nGeneric\nas a base class in class based syntax. Thereby\nallowing the user to define a generic\nTypedDict\n, just like a\nuser-defined generic but with\nTypedDict\nsemantics.\nbpo-44587\n: Fix BooleanOptionalAction to not automatically add a default\nstring.  If a default string is desired, use a formatter to add it.\nbpo-43827\n: All positional-or-keyword parameters to\nABCMeta.__new__\nare\nnow positional-only to avoid conflicts with keyword arguments to be passed\nto\n__init_subclass__()\n.\nbpo-43218\n: Prevent creation of a venv whose path contains the PATH\nseparator. This could affect the usage of the activate script. Patch by\nDustin Rodrigues.\nbpo-38435\n: Add a\nprocess_group\nparameter to\nsubprocess.Popen\nto help move more things off of the unsafe\npreexec_fn\nparameter.\nbpo-42066\n: Fix cookies getting sorted in\nCookieJar.__iter__()\nwhich\nis an extra behavior and not mentioned in RFC 2965 or Netscape cookie\nprotocol. Now the cookies in\nCookieJar\nfollows the order of the\nSet-Cookie\nheader. Patch by Iman Kermani.\nbpo-40617\n: Add\ncreate_window_function()\nto\nsqlite3.Connection\nfor creating aggregate window functions. Patch\nby Erlend E. Aasland.\nbpo-40676\n: Convert\ncsv\nto use Argument Clinic for\ncsv.field_size_limit()\n,\ncsv.get_dialect()\n,\ncsv.unregister_dialect()\nand\ncsv.list_dialects()\n.\nbpo-39716\n: Raise an\nArgumentError\nwhen the same subparser name is\nadded twice to an\nargparse.ArgumentParser\n.  This is consistent with\nthe (default) behavior when the same option string is added twice to an\nArgumentParser\n.\nbpo-36073\n: Raise\nProgrammingError\ninstead of segfaulting\non recursive usage of cursors in\nsqlite3\nconverters. Patch by\nSergey Fedoseev.\nbpo-34975\n: Adds a\nstart_tls()\nmethod to\nStreamWriter\n, which upgrades the connection with\nTLS using the given\nSSLContext\n.\nbpo-22276\n:\nPath\nmethods\nglob()\nand\nrglob()\nreturn only directories if\npattern\nends with\na pathname components separator (\n/\nor\nsep\n). Patch by\nEisuke Kawashima.\nbpo-24905\n: Add\nblobopen()\nto\nsqlite3.Connection\n.\nsqlite3.Blob\nallows incremental I/O\noperations on blobs. Patch by Aviv Palivoda and Erlend E. Aasland.\nDocumentation\n¶\ngh-91888\n: Add a new\ngh\nrole to the documentation to link to GitHub\nissues.\ngh-91783\n: Document security issues concerning the use of the function\nshutil.unpack_archive()\ngh-91547\n: Remove “Undocumented modules” page.\ngh-91298\n: In\nimportlib.resources.abc\n, refined the documentation of the\nTraversable Protocol, applying changes from importlib_resources 5.7.1.\nbpo-44347\n: Clarify the meaning of\ndirs_exist_ok\n, a kwarg of\nshutil.copytree()\n.\nbpo-36329\n: Remove ‘make -C Doc serve’ in favour of ‘make -C Doc htmlview’\nbpo-47189\n: Add a What’s New in Python 3.11 entry for the Faster CPython\nproject. Documentation by Ken Jin and Kumar Aditya.\nbpo-38668\n: Update the introduction to documentation for\nos.path\nto\nremove warnings that became irrelevant after the implementations of\nPEP 383\nand\nPEP 529\n.\nbpo-47115\n: The documentation now lists which members of C structs are part\nof the\nLimited API/Stable ABI\n.\nbpo-46962\n: All docstrings in code snippets are now wrapped into\nPyDoc_STR\nto follow the guideline of\nPEP 7’s\nDocumentation Strings paragraph\n. Patch by\nOleg Iarygin.\nbpo-26792\n: Improve the docstrings of\nrunpy.run_module()\nand\nrunpy.run_path()\n. Original patch by Andrew Brezovsky.\nTests\n¶\ngh-92169\n: Use\nwarnings_helper.import_deprecated()\nto import deprecated\nmodules uniformly in tests. Patch by Hugo van Kemenade.\ngh-84461\n: When multiprocessing is enabled, libregrtest can now use a\nPython executable other than\nsys.executable\nvia the\n--python\nflag.\ngh-91904\n: Fix initialization of\nPYTHONREGRTEST_UNICODE_GUARD\nwhich prevented running regression tests on non-UTF-8 locale.\ngh-91752\n: Added @requires_zlib to test.test_tools.test_freeze.TestFreeze.\ngh-91607\n: Fix\ntest_concurrent_futures\nto test the correct\nmultiprocessing start method context in several cases where the test logic\nmixed this up.\nbpo-40280\n: Threading tests are now skipped on WASM targets without pthread\nsupport.\nbpo-47109\n: Test for\nctypes.macholib.dyld\n,\nctypes.macholib.dylib\n, and\nctypes.macholib.framework\nare\nbrought from manual pre-\nunittest\ntimes to\nctypes.test\nlocation and structure. Patch by Oleg Iarygin.\nbpo-29890\n: Add tests for\nipaddress.IPv4Interface\nand\nipaddress.IPv6Interface\nconstruction with tuple arguments.\nOriginal patch and tests by louisom.\nBuild\n¶\ngh-89452\n: gdbm-compat is now preferred over ndbm if both are available on\nthe system. This allows avoiding the problematic ndbm.h on macOS.\ngh-91731\n: Python is now built with\n-std=c11\ncompiler option, rather\nthan\n-std=c99\n. Patch by Victor Stinner.\nbpo-47152\n: Add script and make target for generating\nsre_constants.h\n.\nbpo-47103\n: Windows\nPGInstrument\nbuilds now copy a required DLL into\nthe output directory, making it easier to run the profile stage of a PGO\nbuild.\nWindows\n¶\nbpo-46907\n: Update Windows installer to use SQLite 3.38.3.\nbpo-47239\n: Fixed –list and –list-paths output for\nPython Launcher for Windows\nwhen\nused in an active virtual environment.\nbpo-46907\n: Update Windows installer to use SQLite 3.38.2.\nbpo-46785\n: Fix race condition between\nos.stat()\nand unlinking a file\non Windows, by using errors codes returned by\nFindFirstFileW()\nwhen\nappropriate in\nwin32_xstat_impl\n.\nbpo-40859\n: Update Windows build to use xz-5.2.5\nmacOS\n¶\nbpo-46907\n: Update macOS installer to SQLite 3.38.4.\nTools/Demos\n¶\ngh-91583\n: Fix regression in the code generated by Argument Clinic for\nfunctions with the\ndefining_class\nparameter.\ngh-91575\n: Add script\nTools/scripts/generate_re_casefix.py\nand the make\ntarget\nregen-re\nfor generating additional data for case-insensitive\nmatching according to the current Unicode version.\ngh-91551\n: Remove the ancient Pynche color editor.  It has moved to\nhttps://gitlab.com/warsaw/pynche\nC API\n¶\ngh-88279\n: Deprecate the C functions:\nPySys_SetArgv()\n,\nPySys_SetArgvEx()\n,\nPySys_SetPath()\n. Patch by Victor\nStinner.\ngh-92154\n: Added the\nPyCode_GetCode()\nfunction. This function does\nthe equivalent of the Python code\ngetattr(code_object,\n'co_code')\n.\ngh-92173\n: Fix the\nclosure\nargument to\nPyEval_EvalCodeEx()\n.\ngh-91320\n: Fix C++ compiler warnings about “old-style cast” (\ng++\n-Wold-style-cast\n) in the Python C API. Use C++\nreinterpret_cast<>\nand\nstatic_cast<>\ncasts when the Python C API is used in C++. Patch by\nVictor Stinner.\ngh-80527\n: Mark functions as deprecated by\nPEP 623\n:\nPyUnicode_AS_DATA()\n,\nPyUnicode_AS_UNICODE()\n,\nPyUnicode_GET_DATA_SIZE()\n,\nPyUnicode_GET_SIZE()\n. Patch\nby Victor Stinner.\ngh-91768\n:\nPy_REFCNT()\n,\nPy_TYPE()\n,\nPy_SIZE()\nand\nPy_IS_TYPE()\nfunctions argument type is now\nPyObject*\n, rather\nthan\nconst\nPyObject*\n. Patch by Victor Stinner.\ngh-91020\n: Add\nPyBytes_Type.tp_alloc\nto initialize\nPyBytesObject.ob_shash\nfor bytes subclasses.\nbpo-40421\n: Add\nPyFrame_GetLasti\nC-API function to access frame\nobject’s\nf_lasti\nattribute safely from C code.\nbpo-35134\n: Remove the\nInclude/code.h\nheader file. C extensions should\nonly include the main\n<Python.h>\nheader file. Patch by Victor Stinner.\nbpo-47169\n:\nPyOS_CheckStack()\nis now exported in the Stable ABI on\nWindows.\nbpo-47169\n:\nPyThread_get_thread_native_id()\nis excluded from the\nstable ABI on platforms where it doesn’t exist (like Solaris).\nbpo-46343\n: Added\nPyErr_GetHandledException()\nand\nPyErr_SetHandledException()\nas simpler alternatives to\nPyErr_GetExcInfo()\nand\nPyErr_SetExcInfo()\n.\nThey are included in the stable ABI.\nPython 3.11.0 alpha 7\n¶\nRelease date: 2022-04-05\nCore and Builtins\n¶\nbpo-47212\n: Raise\nIndentationError\ninstead of\nSyntaxError\nfor\na bare\nexcept\nwith no following indent. Improve\nSyntaxError\nlocations for an un-parenthesized generator used as arguments. Patch by\nMatthieu Dartiailh.\nbpo-47186\n: Replace\nJUMP_IF_NOT_EG_MATCH\nby\nCHECK_EG_MATCH\n+ jump.\nbpo-47176\n: Emscripten builds cannot handle signals in the usual way due to\nplatform limitations. Python can now handle signals. To use, set\nModule.Py_EmscriptenSignalBuffer to be a single byte SharedArrayBuffer and\nset Py_EMSCRIPTEN_SIGNAL_HANDLING to 1. Writing a number into the\nSharedArrayBuffer will cause the corresponding signal to be raised into\nthe Python thread.\nbpo-47186\n: Replace\nJUMP_IF_NOT_EXC_MATCH\nby\nCHECK_EXC_MATCH\n+ jump.\nbpo-47120\n: Replace the absolute jump opcode\nJUMP_NO_INTERRUPT\nby\nthe relative\nJUMP_BACKWARD_NO_INTERRUPT\n.\nbpo-46841\n: Avoid unnecessary allocations when comparing code objects.\nbpo-47182\n: Fix a crash when using a named unicode character like\n\"\\N{digit\nnine}\"\nafter the main interpreter has been initialized a\nsecond time.\nbpo-47162\n: WebAssembly cannot deal with bad function pointer casts\n(different count or types of arguments). Python can now use call\ntrampolines to mitigate the problem. Define\nPY_CALL_TRAMPOLINE\nto enable call trampolines.\nbpo-46775\n: Some Windows system error codes(>= 10000) are now mapped into\nthe correct errno and may now raise a subclass of\nOSError\n. Patch by\nDonghee Na.\nbpo-47129\n: Improve error messages in f-string syntax errors concerning\nempty expressions.\nbpo-47117\n: Fix a crash if we fail to decode characters in interactive mode\nif the tokenizer buffers are uninitialized. Patch by Pablo Galindo.\nbpo-47127\n: Speed up calls to c functions with keyword arguments by 25%\nwith specialization. Patch by Kumar Aditya.\nbpo-47120\n: Replaced\nJUMP_ABSOLUTE\nby the relative jump\nJUMP_BACKWARD\n.\nbpo-42197\n:\nPyFrame_FastToLocalsWithError()\nand\nPyFrame_LocalsToFast()\nare no longer called during profiling nor\ntracing. C code can access the\nf_locals\nattribute of\nPyFrameObject\nby calling\nPyFrame_GetLocals()\n.\nbpo-47070\n: Improve performance of\narray_inplace_repeat\nby reducing the\nnumber of invocations of\nmemcpy\n. Refactor the\nrepeat\nand inplace\nrepeat\nmethods of\narray\n,\nbytes\n,\nbytearray\nand\nunicodeobject\nto use the common\n_PyBytes_Repeat\n.\nbpo-47053\n: Reduce de-optimization in the specialized\nBINARY_OP_INPLACE_ADD_UNICODE\nopcode.\nbpo-47045\n: Remove the\nf_state\nfield from the _PyInterpreterFrame\nstruct. Add the\nowner\nfield to the _PyInterpreterFrame struct to make\nownership explicit to simplify clearing and deallocing frames and\ngenerators.\nbpo-46968\n: Check for the existence of the “sys/auxv.h” header in\nfaulthandler\nto avoid compilation problems in systems where this\nheader doesn’t exist. Patch by Pablo Galindo\nbpo-46329\n: Use low bit of\nLOAD_GLOBAL\nto indicate whether to push a\nNULL\nbefore the global. Helps streamline the call sequence a bit.\nbpo-46841\n: Quicken bytecode in-place by storing it as part of the\ncorresponding\nPyCodeObject\n.\nbpo-47012\n: Speed up iteration of\nbytes\nand\nbytearray\nby\n30%. Patch by Kumar Aditya.\nbpo-47009\n: Improved the performance of\nlist.append()\nand list\ncomprehensions by optimizing for the common case, where no resize is\nneeded. Patch by Dennis Sweeney.\nbpo-47005\n: Improve performance of\nbytearray_repeat\nand\nbytearray_irepeat\nby reducing the number of invocations of\nmemcpy\n.\nbpo-46829\n: Deprecate passing a message into\nasyncio.Future.cancel()\nand\nasyncio.Task.cancel()\nbpo-46993\n: Speed up\nbytearray\ncreation from\nlist\nand\ntuple\nby 40%. Patch by Kumar Aditya.\nbpo-39829\n: Removed the\n__len__()\ncall when initializing a list and\nmoved initializing to\nlist_extend\n. Patch by Jeremiah Pascual.\nbpo-46944\n: Speed up throwing exception in generator with\nMETH_FASTCALL\ncalling convention. Patch by Kumar Aditya.\nbpo-46841\n: Modify\nSTORE_SUBSCR\nto use an inline cache entry\n(rather than its oparg) as an adaptive counter.\nbpo-46841\n: Use inline caching for\nPRECALL\nand\nCALL\n,\nand remove the internal machinery for managing the (now unused) non-inline\ncaches.\nbpo-46881\n: Statically allocate and initialize the latin1 characters.\nbpo-46838\n: Improve syntax errors for incorrect function definitions. Patch\nby Pablo Galindo\nbpo-43721\n: Fix docstrings of\ngetter\n,\nsetter\n, and\ndeleter\nto clarify that\nthey create a new copy of the property.\nbpo-43224\n: Make grammar changes required for PEP 646.\nLibrary\n¶\nbpo-47208\n: Allow vendors to override\nCTYPES_MAX_ARGCOUNT\n.\nbpo-23689\n:\nre\nmodule: fix memory leak when a match is terminated by\na signal or memory allocation failure. Patch by Ma Lin.\nbpo-47167\n: Allow overriding a future compliance check in\nasyncio.Task\n.\nbpo-47151\n: When subprocess tries to use vfork, it now falls back to fork\nif vfork returns an error. This allows use in situations where vfork isn’t\nallowed by the OS kernel.\nbpo-47152\n: Convert the\nre\nmodule into a package. Deprecate modules\nsre_compile\n,\nsre_constants\nand\nsre_parse\n.\nbpo-4833\n: Add\nZipFile.mkdir()\nbpo-27929\n: Fix\nasyncio.loop.sock_connect()\nto only resolve names for\nsocket.AF_INET\nor\nsocket.AF_INET6\nfamilies. Resolution\nmay not make sense for other families, like\nsocket.AF_BLUETOOTH\nand\nsocket.AF_UNIX\n.\nbpo-14265\n: Adds the fully qualified test name to unittest output\nbpo-47061\n: Deprecate the aifc module.\nbpo-39622\n: Handle Ctrl+C in asyncio programs to interrupt the main task.\nbpo-47101\n:\nhashlib.algorithms_available\nnow lists only algorithms\nthat are provided by activated crypto providers on OpenSSL 3.0. Legacy\nalgorithms are not listed unless the legacy provider has been loaded into\nthe default OSSL context.\nbpo-47099\n: All\nURLError\nexception messages raised in\nurllib.request.URLopener\nnow contain a colon between\nftp\nerror\nand the rest of the message. Previously,\nopen_ftp()\nmissed the colon. Patch by Oleg\nIarygin.\nbpo-47099\n: Exception chaining is changed from\nException.with_traceback()\n/\nsys.exc_info()\nto\nPEP 3134\n.\nPatch by Oleg Iarygin.\nbpo-47095\n:\nhashlib\n’s internal\n_blake2\nmodule now prefers\nlibb2\nfrom\nhttps://www.blake2.net/\nover Python’s vendored copy of\nblake2.\nbpo-47098\n: The Keccak Code Package for\nhashlib\n’s internal\n_sha3\nmodule has been replaced with tiny_sha3. The module is used as fallback\nwhen Python is built without OpenSSL.\nbpo-47088\n: Implement\ntyping.LiteralString\n, part of\nPEP 675\n.\nPatch by Jelle Zijlstra.\nbpo-42885\n: Optimize\nre.search()\n,\nre.split()\n,\nre.findall()\n,\nre.finditer()\nand\nre.sub()\nfor regular\nexpressions starting with\n\\A\nor\n^\n.\nbpo-23691\n: Protect the\nre.finditer()\niterator from re-entering.\nbpo-47067\n: Optimize calling\nGenericAlias\nobjects by using\nPEP 590\nvectorcall\nand by replacing\nPyObject_SetAttrString\nwith\nPyObject_SetAttr\n.\nbpo-28080\n: Add the\nmetadata_encoding\nparameter in the\nzipfile.ZipFile\nconstructor and the\n--metadata-encoding\noption in the\nzipfile\nCLI to allow reading zipfiles using\nnon-standard codecs to encode the filenames within the archive.\nbpo-47000\n: Make\nio.text_encoding()\nreturns “utf-8” when UTF-8 mode\nis enabled.\nbpo-42369\n: Fix thread safety of\nzipfile._SharedFile.tell()\nto avoid\na “zipfile.BadZipFile: Bad CRC-32 for file” exception when reading a\nZipFile\nfrom multiple threads.\nbpo-38256\n: Fix\nbinascii.crc32()\nwhen it is compiled to use zlib’c\ncrc32 to work properly on inputs 4+GiB in length instead of returning the\nwrong result. The workaround prior to this was to always feed the function\ndata in increments smaller than 4GiB or to just call the zlib module\nfunction.\nWe also have\nbinascii.crc32()\nrelease the GIL when computing on\nlarger inputs as\nzlib.crc32()\nand\nhashlib\ndo.\nThis also boosts performance on Windows as it now uses the zlib crc32\nimplementation for\nbinascii.crc32()\nfor a 2-3x speedup.\nThat the stdlib has a crc32 API in two modules is a known historical\noddity. This moves us closer to a single implementation behind them.\nbpo-47066\n: Global inline flags (e.g.\n(?i)\n) can now only be used at the\nstart of the regular expressions.  Using them not at the start of\nexpression was deprecated since Python 3.6.\nbpo-39394\n: A warning about inline flags not at the start of the regular\nexpression now contains the position of the flag.\nbpo-433030\n: Add support of atomic grouping (\n(?>...)\n) and possessive\nquantifiers (\n*+\n,\n++\n,\n?+\n,\n{m,n}+\n) in\nregular\nexpressions\n.\nbpo-47062\n: Implement\nasyncio.Runner\ncontext manager.\nbpo-46382\n:\ndataclass()\nslots=True\nnow correctly\nomits slots already defined in base classes. Patch by Arie Bovenberg.\nbpo-47057\n: Use FASTCALL convention for\nFutureIter.throw()\nbpo-47061\n: Deprecate the various modules listed by\nPEP 594\n:\naifc, asynchat, asyncore, audioop, cgi, cgitb, chunk, crypt, imghdr,\nmsilib, nntplib, nis, ossaudiodev, pipes, smtpd, sndhdr, spwd, sunau,\ntelnetlib, uu, xdrlib\nbpo-34790\n: Remove passing coroutine objects to\nasyncio.wait()\n.\nbpo-47039\n: Normalize\nrepr()\nof asyncio future and task objects.\nbpo-2604\n: Fix bug where doctests using globals would fail when run\nmultiple times.\nbpo-45150\n: Add\nhashlib.file_digest()\nhelper for efficient hashing of\nfile object.\nbpo-34861\n: Made cumtime the default sorting key for cProfile\nbpo-45997\n: Fix\nasyncio.Semaphore\nre-aquiring FIFO order.\nbpo-47022\n: The\nasynchat\n,\nasyncore\nand\nsmtpd\nmodules have been deprecated since at least Python 3.6. Their\ndocumentation and deprecation warnings and have now been updated to note\nthey will removed in Python 3.12 (\nPEP 594\n).\nbpo-43253\n: Fix a crash when closing transports where the underlying socket\nhandle is already invalid on the Proactor event loop.\nbpo-40280\n:\nselect.select()\nnow passes\nNULL\nto\nselect\nfor\neach empty fdset.\nbpo-47004\n: Apply bugfixes from importlib_metadata 4.11.3, including bugfix\nfor EntryPoint.extras, which was returning match objects and not the\nextras strings.\nbpo-46998\n: Allow subclassing of\ntyping.Any\n. Patch by Shantanu\nJain.\nbpo-46995\n: Deprecate missing\nasyncio.Task.set_name()\nfor third-party\ntask implementations, schedule making it mandatory in Python 3.13.\nbpo-46994\n: Accept explicit contextvars.Context in\nasyncio.create_task()\nand\nasyncio.loop.create_task()\n.\nbpo-46981\n:\ntyping.get_args(typing.Tuple[()])\nnow returns\n()\ninstead of\n((),)\n.\nbpo-46968\n: Add\nos.sysconf_names['SC_MINSIGSTKSZ']\n.\nbpo-46985\n: Upgrade pip wheel bundled with ensurepip (pip 22.0.4)\nbpo-46968\n:\nfaulthandler\n: On Linux 5.14 and newer, dynamically\ndetermine size of signal handler stack size CPython allocates using\ngetauxval(AT_MINSIGSTKSZ)\n. This changes allows for Python extension’s\nrequest to Linux kernel to use AMX_TILE instruction set on Sapphire Rapids\nXeon processor to succeed, unblocking use of the ISA in frameworks.\nbpo-46917\n: The\nmath.nan\nvalue is now always available. Patch by\nVictor Stinner.\nbpo-46955\n: Expose\nasyncio.base_events.Server\nas\nasyncio.Server\n. Patch by Stefan Zabka.\nbpo-23325\n: The\nsignal\nmodule no longer assumes that\nSIG_IGN\nand\nSIG_DFL\nare small int\nsingletons.\nbpo-46932\n: Update bundled libexpat to 2.4.7\nbpo-46933\n: The\npwd\nmodule is now optional.\nos.path.expanduser()\nreturns the path when the\npwd\nmodule is\nnot available.\nbpo-40059\n:\nPEP 680\n, the\ntomllib\nmodule. Adds support for parsing\nTOML.\nbpo-464471\n:\nasyncio.timeout()\nand\nasyncio.timeout_at()\ncontext\nmanagers added. Patch by Tin Tvrtković and Andrew Svetlov.\nbpo-46805\n: Added raw datagram socket functions for asyncio:\nsock_sendto()\n,\nsock_recvfrom()\nand\nsock_recvfrom_into()\n.\nbpo-46644\n: No longer require valid typeforms to be callable. This allows\ntyping.Annotated\nto wrap\ntyping.ParamSpecArgs\nand\ndataclasses.InitVar\n. Patch by Gregory Beauregard.\nbpo-46581\n: Brings\nParamSpec\npropagation for\nGenericAlias\nin line with\nConcatenate\n(and others).\nbpo-45413\n: Define\nposix_venv\nand\nnt_venv\nsysconfig installation\nschemes\nto be used for bootstrapping new virtual\nenvironments. Add\nvenv\nsysconfig installation scheme to get the\nappropriate one of the above. The schemes are identical to the\npre-existing\nposix_prefix\nand\nnt\ninstall schemes. The\nvenv\nmodule now uses the\nvenv\nscheme to create new virtual environments\ninstead of hardcoding the paths depending only on the platform. Downstream\nPython distributors customizing the\nposix_prefix\nor\nnt\ninstall scheme\nin a way that is not compatible with the install scheme used in virtual\nenvironments are encouraged not to customize the\nvenv\nschemes. When\nPython itself runs in a virtual environment,\nsysconfig.get_default_scheme()\nand\nsysconfig.get_preferred_scheme()\nwith\nkey=\"prefix\"\nreturns\nvenv\n.\nbpo-43224\n: Implement support for PEP 646 in typing.py.\nbpo-43224\n: Allow unpacking types.GenericAlias objects, e.g.\n*tuple[int,\nstr]\n.\nbpo-46557\n: Warnings captured by the logging module are now logged without\na format string to prevent systems that group logs by the msg argument\nfrom grouping captured warnings together.\nbpo-41370\n:\ntyping.get_type_hints()\nnow supports evaluating strings\nas forward references in\nPEP 585 generic aliases\n.\nbpo-46607\n: Add\nDeprecationWarning\nto\nLegacyInterpolation\n,\ndeprecated in the docstring since Python 3.2. Will be removed in Python\n3.13. Use\nBasicInterpolation\nor\nExtendedInterpolation\ninstead.\nbpo-26120\n:\npydoc\nnow excludes __future__ imports from the module’s\ndata items.\nbpo-46480\n: Add\ntyping.assert_type()\n. Patch by Jelle Zijlstra.\nbpo-46421\n: Fix a unittest issue where if the command was invoked as\npython\n-m\nunittest\nand the filename(s) began with a dot (.), a\nValueError\nis returned.\nbpo-46245\n: Add optional parameter\ndir_fd\nin\nshutil.rmtree()\n.\nbpo-22859\n:\nunittest.TestProgram.usageExit()\nis marked as\ndeprecated, to be removed in Python 3.13.\nbpo-46170\n: Improve the error message when you try to subclass an instance\nof\ntyping.NewType\n.\nbpo-40296\n: Fix supporting generic aliases in\npydoc\n.\nbpo-20392\n: Fix inconsistency with uppercase file extensions in\nMimeTypes.guess_type()\n. Patch by Kumar Aditya.\nbpo-46030\n: Add\nLOCAL_CREDS\n,\nLOCAL_CREDS_PERSISTENT\nand\nSCM_CREDS2\nFreeBSD constants to the socket module.\nbpo-44439\n: Fix\n.write()\nmethod of a member file in\nZipFile\n, when\nthe input data is an object that supports the buffer protocol, the file\nlength may be wrong.\nbpo-45171\n: Fix handling of the\nstacklevel\nargument to logging\nfunctions in the\nlogging\nmodule so that it is consistent across all\nlogging functions and, as advertised, similar to the\nstacklevel\nargument used in\nwarn()\n.\nbpo-24959\n: Fix bug where\nunittest\nsometimes drops frames from\ntracebacks of exceptions raised in tests.\nbpo-44859\n: Raise more accurate and\nPEP 249\ncompatible exceptions in\nsqlite3\n.\nRaise\nInterfaceError\ninstead of\nProgrammingError\nfor\nSQLITE_MISUSE\nerrors.\nDon’t overwrite\nBufferError\nwith\nValueError\nwhen conversion to\nBLOB fails.\nRaise\nProgrammingError\ninstead of\nWarning\nif\nuser tries to\nexecute()\nmore than one SQL statement.\nRaise\nProgrammingError\ninstead of\nValueError\nif an SQL\nquery contains null characters.\nbpo-44493\n: Add missing terminated NUL in sockaddr_un’s length\nThis was potentially observable when using non-abstract AF_UNIX datagram\nsockets to processes written in another programming language.\nbpo-41930\n: Add\nserialize()\nand\ndeserialize()\nsupport to\nsqlite3\n. Patch\nby Erlend E. Aasland.\nbpo-33178\n: Added\nctypes.BigEndianUnion\nand\nctypes.LittleEndianUnion\nclasses, as originally documented in the\nlibrary docs but not yet implemented.\nbpo-43352\n: Add an Barrier object in synchronization primitives of\nasyncio\nLib in order to be consistent with Barrier from\nthreading\nand\nmultiprocessing\nlibs*\nbpo-35859\n:\nre\nmodule, fix a few bugs about capturing group. In rare\ncases, capturing group gets an incorrect string. Patch by Ma Lin.\nDocumentation\n¶\nbpo-45099\n: Document internal\nasyncio\nAPI.\nbpo-47126\n: Update PEP URLs to\nPEP 676\n’s new canonical form.\nbpo-47040\n: Clarified the old Python versions compatibility note of\nbinascii.crc32()\n/\nzlib.adler32()\n/\nzlib.crc32()\nfunctions.\nbpo-46033\n: Clarify\nfor\nstatement execution in its doc.\nbpo-45790\n: Adjust inaccurate phrasing in\nDefining Extension Types: Tutorial\nabout the\nob_base\nfield and the\nmacros used to access its contents.\nbpo-42340\n: Document that in some circumstances\nKeyboardInterrupt\nmay cause the code to enter an inconsistent state. Provided a sample\nworkaround to avoid it if needed.\nbpo-41233\n: Link the errnos referenced in\nDoc/library/exceptions.rst\nto\ntheir respective section in\nDoc/library/errno.rst\n, and vice versa.\nPreviously this was only done for EINTR and InterruptedError. Patch by Yan\n“yyyyyyyan” Orestes.\nTests\n¶\nbpo-47205\n: Skip test for\nsched_getaffinity()\nand\nsched_setaffinity()\nerror case on FreeBSD.\nbpo-46126\n: Restore ‘descriptions’ when running tests internally.\nbpo-47104\n: Rewrite\nasyncio.to_thread()\ntests to use\nunittest.IsolatedAsyncioTestCase\n.\nbpo-40280\n: The test suite is now passing on the Emscripten platform. All\nfork, socket, and subprocess-based tests are skipped.\nbpo-47037\n: Skip\nstrftime(\"%4Y\")\nfeature test on Windows. It can cause\nan assertion error in debug builds.\nbpo-46587\n: Skip tests if platform’s\nstrftime\ndoes not support\nnon-portable glibc extensions.\nbpo-47015\n: A test case for\nos.sendfile()\nis converted from\ndeprecated\nasyncore\n(see\nPEP 594\n) to\nasyncio\n. Patch by\nOleg Iarygin.\nBuild\n¶\nbpo-40280\n: Add configure option\n--enable-wasm-dynamic-linking\nto\nenable\ndlopen\nand MAIN_MODULE / SIDE_MODULE on\nwasm32-emscripten\n.\nbpo-46023\n:\nmakesetup\nnow detects and skips all duplicated module\ndefinitions. The first entry wins.\nbpo-40280\n: Add SOABI\nwasm32-emscripten\nfor Emscripten and\nwasm32-wasi\nfor WASI on 32bit WASM as well as\nwasm64\ncounter\nparts.\nbpo-47032\n: Ensure Windows install builds fail correctly with a non-zero\nexit code when part of the build fails.\nbpo-47024\n: Update OpenSSL to 1.1.1n for macOS installers and all Windows\nbuilds.\nbpo-46996\n: The\ntkinter\npackage now requires Tcl/Tk version 8.5.12\nor newer.\nbpo-46973\n: Add\nregen-configure\nmake target to regenerate configure\nscript with Christian’s container image\nquay.io/tiran/cpython_autoconf:269\n.\nbpo-46917\n: Building Python now requires support of IEEE 754 floating-point\nnumbers. Patch by Victor Stinner.\nbpo-45774\n:\nconfigure\nnow verifies that all SQLite C APIs needed for\nthe\nsqlite3\nextension module are found.\nWindows\n¶\nbpo-47194\n: Update\nzlib\nto v1.2.12 to resolve\nCVE 2018-25032\n.\nbpo-47171\n: Enables installing the\npy.exe\nlauncher on Windows\nARM64.\nbpo-46566\n: Upgraded\nPython Launcher for Windows\nto support a new\n-V:company/tag\nargument for full\nPEP 514\nsupport and to detect ARM64 installs. The\n-64\nsuffix on arguments is deprecated, but still selects any\nnon-32-bit install. Setting\nPYLAUNCHER_ALLOW_INSTALL\nand\nspecifying a version that is not installed will attempt to install the\nrequested version from the Microsoft Store.\nbpo-47086\n: The installer for Windows now includes documentation as loose\nHTML files rather than a single compiled\n.chm\nfile.\nbpo-46907\n: Update Windows installer to use SQLite 3.38.1.\nbpo-44549\n: Update bzip2 to 1.0.8 in Windows builds to mitigate\nCVE 2016-3189\nand\nCVE 2019-12900\n.\nbpo-46948\n: Prevent\nCVE 2022-26488\nby ensuring the Add to PATH option in\nthe Windows installer uses the correct path when being repaired.\nmacOS\n¶\nbpo-46890\n: Fix a regression in the setting of\nsys._base_executable\nin\nframework builds, and thereby fix a regression in\nvenv\nvirtual\nenvironments with such builds.\nbpo-46907\n: Update macOS installer to SQLite 3.38.1.\nTools/Demos\n¶\nbpo-40280\n: Replace Emscripten’s limited shell with Katie Bell’s browser-ui\nREPL from python-wasm project.\nC API\n¶\nbpo-40421\n: Add\nPyFrame_GetBuiltins\n,\nPyFrame_GetGenerator\nand\nPyFrame_GetGlobals\nC-API functions to access frame object attributes\nsafely from C code.\nbpo-46850\n: Move the private\n_PyFrameEvalFunction\ntype, and private\n_PyInterpreterState_GetEvalFrameFunc()\nand\n_PyInterpreterState_SetEvalFrameFunc()\nfunctions to the internal C\nAPI. The\n_PyFrameEvalFunction\ncallback function type now uses the\n_PyInterpreterFrame\ntype which is part of the internal C API. Patch by\nVictor Stinner.\nbpo-46850\n: Move the private undocumented\n_PyEval_EvalFrameDefault()\nfunction to the internal C API. The function now uses the\n_PyInterpreterFrame\ntype which is part of the internal C API. Patch by\nVictor Stinner.\nbpo-46850\n: Remove the private undocumented function\n_PyEval_CallTracing()\nfrom the C API. Call the public\nsys.call_tracing()\nfunction instead. Patch by Victor Stinner.\nbpo-46850\n: Remove the private undocumented function\n_PyEval_GetCoroutineOriginTrackingDepth()\nfrom the C API. Call the\npublic\nsys.get_coroutine_origin_tracking_depth()\nfunction instead.\nPatch by Victor Stinner.\nbpo-46850\n: Remove the following private undocumented functions from the C\nAPI:\n_PyEval_GetAsyncGenFirstiter()\n_PyEval_GetAsyncGenFinalizer()\n_PyEval_SetAsyncGenFirstiter()\n_PyEval_SetAsyncGenFinalizer()\nCall the public\nsys.get_asyncgen_hooks()\nand\nsys.set_asyncgen_hooks()\nfunctions instead. Patch by Victor Stinner.\nbpo-46987\n: Remove private functions\n_PySys_GetObjectId()\nand\n_PySys_SetObjectId()\n. Patch by Donghee Na.\nbpo-46906\n: Add new functions to pack and unpack C double (serialize and\ndeserialize):\nPyFloat_Pack2()\n,\nPyFloat_Pack4()\n,\nPyFloat_Pack8()\n,\nPyFloat_Unpack2()\n,\nPyFloat_Unpack4()\nand\nPyFloat_Unpack8()\n. Patch by Victor\nStinner.\nPython 3.11.0 alpha 6\n¶\nRelease date: 2022-03-07\nCore and Builtins\n¶\nbpo-46940\n: Avoid overriding\nAttributeError\nmetadata information for\nnested attribute access calls. Patch by Pablo Galindo.\nbpo-46927\n: Include the type’s name in the error message for subscripting\nnon-generic types.\nbpo-46921\n: Support vectorcall for\nsuper()\n. Patch by Ken Jin.\nbpo-46841\n: Fix incorrect handling of inline cache entries when\nspecializing\nBINARY_OP\n.\nbpo-46841\n: Use an oparg to simplify the construction of helpful error\nmessages in\nGET_AWAITABLE\n.\nbpo-46903\n: Make sure that str subclasses can be used as attribute names\nfor instances with virtual dictionaries. Fixes regression in 3.11alpha\nbpo-46841\n: Add more detailed specialization failure stats for\nCOMPARE_OP\nfollowed by\nEXTENDED_ARG\n.\nbpo-46891\n: Fix bug introduced during 3.11alpha where subclasses of\ntypes.ModuleType\nwith\n__slots__\nwere not initialized correctly,\nresulting in an interpreter crash.\nbpo-46841\n: Use inline caching for\nLOAD_ATTR\n,\nLOAD_METHOD\n, and\nSTORE_ATTR\n.\nbpo-46841\n: Use inline cache for\nBINARY_SUBSCR\n.\nbpo-46841\n: Use inline caching for\nCOMPARE_OP\n.\nbpo-46864\n: Deprecate\nPyBytesObject.ob_shash\n. It will be removed in\nPython 3.13.\nbpo-46841\n: Use inline caching for\nUNPACK_SEQUENCE\n.\nbpo-46845\n: Reduces dict size by removing hash value from hash table when\nall inserted keys are Unicode. For example,\nsys.getsizeof(dict.fromkeys(\"abcdefg\"))\nbecomes 272 bytes from 352\nbytes on 64bit platform.\nbpo-46841\n: Use inline cache for\nLOAD_GLOBAL\n.\nbpo-46852\n: Rename the private undocumented\nfloat.__set_format__()\nmethod to\nfloat.__setformat__()\nto fix a typo introduced in Python\n3.7. The method is only used by test_float. Patch by Victor Stinner.\nbpo-46852\n: Remove the undocumented private\nfloat.__set_format__()\nmethod, previously known as\nfloat.__setformat__()\nin Python 3.7. Its\ndocstring said: “You probably don’t want to use this function. It exists\nmainly to be used in Python’s test suite.” Patch by Victor Stinner.\nbpo-40116\n: Fix regression that dict.update(other) may don’t respect\niterate order of other when other is key sharing dict.\nbpo-46712\n: Share global string identifiers in deep-frozen modules.\nbpo-46430\n: Fix memory leak in interned strings of deep-frozen modules.\nbpo-46841\n: Store\nBINARY_OP\ncaches inline using a new\nCACHE\ninstruction.\nbpo-45107\n: Specialize\nLOAD_METHOD\nfor instances with a dict.\nbpo-44337\n: Reduce the memory usage of specialized\nLOAD_ATTR\nand\nSTORE_ATTR\ninstructions.\nbpo-46729\n: Add number of sub-exceptions to\nBaseException.__str__()\n.\nbpo-45885\n: Don’t un-adapt\nCOMPARE_OP\nwhen collecting\nspecialization stats.\nbpo-46329\n: Fix specialization stats gathering for\nPRECALL\ninstructions.\nbpo-46794\n: Bump up the libexpat version into 2.4.6\nbpo-46823\n: Implement a specialized combined opcode\nLOAD_FAST__LOAD_ATTR_INSTANCE_VALUE\n.  Patch by Dennis Sweeney.\nbpo-46820\n: Fix parsing a numeric literal immediately (without spaces)\nfollowed by “not in” keywords, like in\n1not\nin\nx\n. Now the parser only\nemits a warning, not a syntax error.\nbpo-46329\n: Move\nKW_NAMES\nbefore\nPRECALL\ninstruction in call\nsequence. Change\noperand\nof\nCALL\nto match\nPRECALL\nfor easier\nspecialization.\nbpo-46808\n: Remove the\nNEXT_BLOCK\nmacro from compile.c, and make the\ncompiler automatically generate implicit blocks when they are needed.\nbpo-46329\n: Add\nPUSH_NULL\ninstruction. This is used as a prefix when\nevaluating a callable, so that the stack has the same shape for methods\nand other calls.\nPRECALL_FUNCTION\nand\nPRECALL_METHOD\nare merged\ninto a single\nPRECALL\ninstruction.\nThere is no change in semantics.\nbpo-46762\n: Fix an assert failure in debug builds when a ‘<’, ‘>’, or ‘=’\nis the last character in an f-string that’s missing a closing right brace.\nbpo-46730\n: Message of AttributeError caused by getting, setting or\ndeleting a property without the corresponding function now mentions that\nthe attribute is in fact a property and also specifies type of the class\nthat it belongs to.\nbpo-46724\n: Make sure that all backwards jumps use the\nJUMP_ABSOLUTE\ninstruction, rather than\nJUMP_FORWARD\nwith an argument of\n(2**32)+offset\n.\nbpo-46732\n: Correct the docstring for the\n__bool__()\nmethod.\nPatch by Jelle Zijlstra.\nbpo-46072\n: Add more detailed specialization failure statistics for\nBINARY_OP\n.\nbpo-46707\n: Avoid potential exponential backtracking when producing some\nsyntax errors involving lots of brackets. Patch by Pablo Galindo.\nbpo-46323\n:\nctypes\nnow allocates memory on the stack instead of on\nthe heap to pass arguments while calling a Python callback function. Patch\nby Donghee Na.\nbpo-45923\n: Add a quickened form of\nRESUME\nthat skips quickening\nchecks.\nbpo-46702\n: Specialize\nUNPACK_SEQUENCE\nfor\ntuple\nand\nlist\nunpackings.\nbpo-46072\n: Opcode pair stats are now gathered with\n--enable-pystats\n.\nDefining\nDYNAMIC_EXECUTION_PROFILE\nor\nDXPAIRS\nno longer has any\neffect.\nbpo-46675\n: Allow more than 16 items in a split dict before it is combined.\nThe limit is now 254.\nbpo-40479\n: Add a missing call to\nva_end()\nin\nModules/_hashopenssl.c\n.\nbpo-46323\n: Use\nPyObject_Vectorcall()\nwhile calling ctypes callback\nfunction. Patch by Donghee Na.\nbpo-46615\n: When iterating over sets internally in\nsetobject.c\n, acquire\nstrong references to the resulting items from the set.  This prevents\ncrashes in corner-cases of various set operations where the set gets\nmutated.\nbpo-45828\n: The bytecode compiler now attempts to apply runtime stack\nmanipulations at compile-time (whenever it is feasible to do so).\nbpo-30496\n: Fixed a minor portability issue in the implementation of\nPyLong_FromLong()\n, and added a fast path for single-digit integers\nto\nPyLong_FromLongLong()\n.\nLibrary\n¶\nbpo-25707\n: Fixed a file leak in\nxml.etree.ElementTree.iterparse()\nwhen the iterator is not exhausted. Patch by Jacob Walls.\nbpo-46877\n: Export\nunittest.doModuleCleanups()\nin\nunittest\n.\nPatch by Kumar Aditya.\nbpo-46848\n: For performance, use the optimized string-searching\nimplementations from\nfind()\nand\nrfind()\nfor\nfind()\nand\nrfind()\n.\nbpo-46736\n:\nSimpleHTTPRequestHandler\nnow uses HTML5\ngrammar. Patch by Donghee Na.\nbpo-44886\n: Inherit asyncio proactor datagram transport from\nasyncio.DatagramTransport\n.\nbpo-46827\n: Support UDP sockets in\nasyncio.loop.sock_connect()\nfor\nselector-based event loops.  Patch by Thomas Grainger.\nbpo-46811\n: Make test suite support Expat >=2.4.5\nbpo-46252\n: Raise\nTypeError\nif\nssl.SSLSocket\nis passed to\ntransport-based APIs.\nbpo-46784\n: Fix libexpat symbols collisions with user dynamically loaded or\nstatically linked libexpat in embedded Python.\nbpo-46786\n: The HTML serialisation in xml.etree.ElementTree now writes\nembed\n,\nsource\n,\ntrack\nand\nwbr\nas empty tags, as defined in\nHTML 5.\nbpo-39327\n:\nshutil.rmtree()\ncan now work with VirtualBox shared\nfolders when running from the guest operating-system.\nbpo-45390\n: Propagate\nasyncio.CancelledError\nmessage from inner task\nto outer awaiter.\nbpo-46756\n: Fix a bug in\nurllib.request.HTTPPasswordMgr.find_user_password()\nand\nurllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated()\nwhich\nallowed to bypass authorization. For example, access to URI\nexample.org/foobar\nwas allowed if the user was authorized for URI\nexample.org/foo\n.\nbpo-46737\n:\nrandom.gauss()\nand\nrandom.normalvariate()\nnow have\ndefault arguments.\nbpo-46752\n: Add task groups to asyncio (structured concurrency, inspired by\nTrio’s nurseries). This also introduces a change to task cancellation,\nwhere a cancelled task can’t be cancelled again until it calls\n.uncancel().\nbpo-46724\n: Fix\ndis\nbehavior on negative jump offsets.\nbpo-46333\n: The\n__repr__()\nmethod of\ntyping.ForwardRef\nnow\nincludes the\nmodule\nparameter of\ntyping.ForwardRef\nwhen it is\nset.\nbpo-46643\n: In\ntyping.get_type_hints()\n, support evaluating\nstringified\nParamSpecArgs\nand\nParamSpecKwargs\nannotations. Patch\nby Gregory Beauregard.\nbpo-45863\n: When the\ntarfile\nmodule creates a pax format archive, it\nwill put an integer representation of timestamps in the ustar header (if\npossible) for the benefit of older unarchivers, in addition to the\nexisting full-precision timestamps in the pax extended header.\nbpo-46066\n: Deprecate kwargs-based syntax for\ntyping.TypedDict\ndefinitions. It had confusing semantics when specifying totality, and was\nlargely unused. Patch by Jingchen Ye.\nbpo-46676\n: Make\ntyping.ParamSpec\nargs and kwargs equal to\nthemselves. Patch by Gregory Beauregard.\nbpo-46323\n:\nctypes.CFUNCTYPE()\nand\nctypes.WINFUNCTYPE()\nnow fail to\ncreate the type if its\n_argtypes_\nmember contains too many arguments.\nPreviously, the error was only raised when calling a function. Patch by\nVictor Stinner.\nbpo-46672\n: Fix\nNameError\nin\nasyncio.gather()\nwhen initial type\ncheck fails.\nbpo-46659\n: The\ncalendar.LocaleTextCalendar\nand\ncalendar.LocaleHTMLCalendar\nclasses now use\nlocale.getlocale()\n, instead of using\nlocale.getdefaultlocale()\n, if no locale is specified. Patch by\nVictor Stinner.\nbpo-46659\n: The\nlocale.getdefaultlocale()\nfunction is deprecated and\nwill be removed in Python 3.13. Use\nlocale.setlocale()\n,\nlocale.getpreferredencoding(False)\nand\nlocale.getlocale()\nfunctions instead.  Patch by Victor Stinner.\nbpo-46655\n: In\ntyping.get_type_hints()\n, support evaluating bare\nstringified\nTypeAlias\nannotations. Patch by Gregory Beauregard.\nbpo-45948\n: Fixed a discrepancy in the C implementation of the\nxml.etree.ElementTree\nmodule. Now, instantiating an\nxml.etree.ElementTree.XMLParser\nwith a\ntarget=None\nkeyword\nprovides a default\nxml.etree.ElementTree.TreeBuilder\ntarget as\nthe Python implementation does.\nbpo-46626\n: Expose Linux’s\nIP_BIND_ADDRESS_NO_PORT\noption in\nsocket\n.\nbpo-46521\n: Fix a bug in the\ncodeop\nmodule that was incorrectly\nidentifying invalid code involving string quotes as valid code.\nbpo-46571\n: Improve\ntyping.no_type_check()\n.\nNow it does not modify external classes and functions. We also now\ncorrectly mark classmethods as not to be type checked.\nbpo-46400\n: expat: Update libexpat from 2.4.1 to 2.4.4\nbpo-46556\n: Deprecate undocumented support for using a\npathlib.Path\nobject as a context manager.\nbpo-46534\n: Implement\nPEP 673\ntyping.Self\n. Patch by James\nHilton-Balfe.\nbpo-46522\n: Make various module\n__getattr__\nAttributeErrors more\nclosely match a typical AttributeError\nbpo-46475\n: Add\ntyping.Never\nand\ntyping.assert_never()\n. Patch\nby Jelle Zijlstra.\nbpo-46333\n: The\n__eq__()\nand\n__hash__()\nmethods of\ntyping.ForwardRef\nnow honor the\nmodule\nparameter of\ntyping.ForwardRef\n. Forward references from different modules are\nnow differentiated.\nbpo-46246\n: Add missing\n__slots__\nto\nimportlib.metadata.DeprecatedList\n. Patch by Arie Bovenberg.\nbpo-46232\n: The\nssl\nmodule now handles certificates with bit strings\nin DN correctly.\nbpo-46195\n:\ntyping.get_type_hints()\nno longer adds\nOptional\nto\nparameters with\nNone\nas a default. This aligns to changes to PEP 484\nin\nhttps://github.com/python/peps/pull/689\nbpo-31369\n: Add\nRegexFlag\nto\nre.__all__\nand documented it.\nAdd\nNOFLAG\nto indicate no flags being set.\nbpo-45898\n:\nctypes\nno longer defines\nffi_type_*\nsymbols in\ncfield.c\n. The symbols have been provided by libffi for over a decade.\nbpo-44953\n: Calling\noperator.itemgetter\nobjects and\noperator.attrgetter\nobjects is now faster due to use of the vectorcall\ncalling convention.\nbpo-44289\n: Fix an issue with\nis_tarfile()\nmethod when using\nfileobj\nargument: position in the\nfileobj\nwas advanced forward which\nmade it unreadable with\ntarfile.TarFile.open()\n.\nbpo-44011\n: Reimplement SSL/TLS support in asyncio, borrow the\nimplementation from uvloop library.\nbpo-41086\n: Make the\nconfigparser.ConfigParser\nconstructor raise\nTypeError\nif the\ninterpolation\nparameter is not of type\nconfigparser.Interpolation\nbpo-29418\n: Implement\ninspect.ismethodwrapper()\nand fix\ninspect.isroutine()\nfor cases where methodwrapper is given. Patch by\nHakan Çelik.\nbpo-14156\n: argparse.FileType now supports an argument of ‘-’ in binary\nmode, returning the .buffer attribute of sys.stdin/sys.stdout as\nappropriate. Modes including ‘x’ and ‘a’ are treated equivalently to ‘w’\nwhen argument is ‘-’. Patch contributed by Josh Rosenberg\nDocumentation\n¶\nbpo-42238\n:\nDoc/tools/rstlint.py\nhas moved to its own repository and is\nnow packaged on PyPI as\nsphinx-lint\n.\nTests\n¶\nbpo-46913\n: Fix test_faulthandler.test_sigfpe() if Python is built with\nundefined behavior sanitizer (UBSAN): disable UBSAN on the\nfaulthandler_sigfpe() function. Patch by Victor Stinner.\nbpo-46760\n: Remove bytecode offsets from expected values in test.test_dis\nmodule. Reduces the obstacles to modifying the VM or compiler.\nbpo-46708\n: Prevent default asyncio event loop policy modification warning\nafter\ntest_asyncio\nexecution.\nbpo-46678\n: The function\nmake_legacy_pyc\nin\nLib/test/support/import_helper.py\nno longer fails when\nPYTHONPYCACHEPREFIX\nis set to a directory on a different device from\nwhere tempfiles are stored.\nbpo-46623\n: Skip test_pair() and test_speech128() of test_zlib on s390x\nsince they fail if zlib uses the s390x hardware accelerator. Patch by\nVictor Stinner.\nBuild\n¶\nbpo-46860\n: Respect\n--with-suffix\nwhen building on case-insensitive\nfile systems.\nbpo-46656\n: Building Python now requires a C11 compiler. Optional C11\nfeatures are not required. Patch by Victor Stinner.\nbpo-46656\n: Building Python now requires support for floating-point\nNot-a-Number (NaN): remove the\nPy_NO_NAN\nmacro. Patch by Victor\nStinner.\nbpo-46640\n: Building Python now requires a C99\n<math.h>\nheader file\nproviding a\nNAN\nconstant, or the\n__builtin_nan()\nbuilt-in\nfunction. Patch by Victor Stinner.\nbpo-46608\n: Exclude marshalled-frozen data if deep-freezing to save 300 KB\ndisk space. This includes adding a new\nis_package\nfield to\n_frozen\n. Patch by Kumar Aditya.\nbpo-40280\n: Fix wasm32-emscripten test failures and platform issues. -\nDisable syscalls that are not supported or don’t work, e.g.   wait,\ngetrusage, prlimit, mkfifo, mknod, setres[gu]id, setgroups. - Use fd_count\nto count open fds. - Add more checks for subprocess and fork. - Add\nworkarounds for missing _multiprocessing and failing socket.accept(). -\nEnable bzip2. - Disable large file support. - Disable signal.alarm.\nbpo-46430\n: Intern strings in deep-frozen modules. Patch by Kumar Aditya.\nWindows\n¶\nbpo-46744\n: The default all users install directory for ARM64 is now under\nthe native\nProgram\nFiles\nfolder, rather than\nProgram\nFiles\n(Arm)\nwhich is intended for ARM (32-bit) files.\nbpo-46567\n: Adds Tcl and Tk support for Windows ARM64. This also adds IDLE\nto the installation.\nbpo-46638\n: Ensures registry virtualization is consistently disabled. For\n3.10 and earlier, it remains enabled (some registry writes are protected),\nwhile for 3.11 and later it is disabled (registry modifications affect all\napplications).\nIDLE\n¶\nbpo-46630\n: Make query dialogs on Windows start with a cursor in the entry\nbox.\nbpo-45447\n: Apply IDLE syntax highlighting to\n.pyi\nfiles. Patch by Alex\nWaygood and Terry Jan Reedy.\nC API\n¶\nbpo-46748\n: Python’s public headers no longer import\n<stdbool.h>\n,\nleaving code that embeds/extends Python free to define\nbool\n,\ntrue\nand\nfalse\n.\nbpo-46836\n: Move the\nPyFrameObject\ntype definition (\nstruct\n_frame\n) to the internal C API\npycore_frame.h\nheader file. Patch by\nVictor Stinner.\nbpo-45459\n: Rename\nInclude/buffer.h\nheader file to\nInclude/pybuffer.h\nto avoid conflicts with projects having an existing\nbuffer.h\nheader file. Patch by Victor Stinner.\nbpo-45412\n: Remove the\nHAVE_PY_SET_53BIT_PRECISION\nmacro (moved to the\ninternal C API). Patch by Victor Stinner.\nbpo-46613\n: Added function\nPyType_GetModuleByDef()\n, which allows\naccess to module state when a method’s defining class is not available.\nPython 3.11.0 alpha 5\n¶\nRelease date: 2022-02-03\nCore and Builtins\n¶\nbpo-45773\n: Remove two invalid “peephole” optimizations from the bytecode\ncompiler.\nbpo-46564\n: Do not create frame objects when creating\nsuper\nobject. Patch by Kumar Aditya.\nbpo-45885\n: Added more fined-grained specialization failure stats regarding\nthe\nCOMPARE_OP\nbytecode.\nbpo-44977\n: The delegation of\nint()\nto\n__trunc__()\nis now\ndeprecated. Calling\nint(a)\nwhen\ntype(a)\nimplements\n__trunc__()\nbut not\n__int__()\nor\n__index__()\nnow raises\na\nDeprecationWarning\n.\nbpo-46458\n: Reorder code emitted by the compiler for a\ntry\n-\nexcept\nblock so that the\nelse\nblock’s\ncode immediately follows the\ntry\nbody (without a jump). This is\nmore optimal for the happy path.\nbpo-46527\n: Allow passing\niterable\nas a keyword argument to\nenumerate()\nagain. Patch by Jelle Zijlstra.\nbpo-46528\n: Replace several stack manipulation instructions (\nDUP_TOP\n,\nDUP_TOP_TWO\n,\nROT_TWO\n,\nROT_THREE\n,\nROT_FOUR\n, and\nROT_N\n)\nwith new\nCOPY\nand\nSWAP\ninstructions.\nbpo-46329\n: Use two or three bytecodes to implement most calls.\nCalls without named arguments are implemented as a sequence of two\ninstructions:\nPRECALL;\nCALL\n. Calls with named arguments are\nimplemented as a sequence of three instructions:\nPRECALL;\nKW_NAMES;\nCALL\n. There are two different\nPRECALL\ninstructions:\nPRECALL_FUNTION\nand\nPRECALL_METHOD\n. The latter pairs with\nLOAD_METHOD\n.\nThis partition into pre-call and call allows better specialization, and\nthus better performance ultimately.\nThere is no change in semantics.\nbpo-46503\n: Fix an assert when parsing some invalid N escape sequences in\nf-strings.\nbpo-46431\n: Improve error message on invalid calls to\nBaseExceptionGroup.__new__()\n.\nbpo-46476\n: Fix memory leak in code objects generated by deepfreeze. Patch\nby Kumar Aditya.\nbpo-46481\n: Speed up calls to\nweakref.ref.__call__()\nby using the\nPEP 590\nvectorcall\ncalling convention. Patch by Donghee Na.\nbpo-46417\n: Fix a race condition on setting a type\n__bases__\nattribute:\nthe internal function\nadd_subclass()\nnow gets the\nPyTypeObject.tp_subclasses\nmember after calling\nPyWeakref_NewRef()\nwhich can trigger a garbage collection which\ncan indirectly modify\nPyTypeObject.tp_subclasses\n. Patch by Victor\nStinner.\nbpo-46417\n:\npython\n-X\nshowrefcount\nnow shows the total reference count\nafter clearing and destroyed the main Python interpreter. Previously, it\nwas shown before. Patch by Victor Stinner.\nbpo-43683\n: Add ASYNC_GEN_WRAP opcode to wrap the value to be yielded in\nasync generators. Removes the need to special case async generators in the\nYIELD_VALUE\ninstruction.\nbpo-46407\n: Optimize some modulo operations in\nObjects/longobject.c\n.\nPatch by Jeremiah Vivian.\nbpo-46409\n: Add new\nRETURN_GENERATOR\nbytecode to make generators.\nSimplifies calling Python functions in the VM, as they no longer any need\nto special case generator functions.\nAlso add\nJUMP_NO_INTERRUPT\nbytecode that acts like\nJUMP_ABSOLUTE\n,\nbut does not check for interrupts.\nbpo-46406\n: The integer division\n//\nimplementation has been optimized\nto better let the compiler understand its constraints. It can be 20%\nfaster on the amd64 platform when dividing an int by a value smaller than\n2**30\n.\nbpo-46383\n: Fix invalid signature of\n_zoneinfo\n’s\nmodule_free\nfunction to resolve a crash on wasm32-emscripten platform.\nbpo-46361\n: Ensure that “small” integers created by\nint.from_bytes()\nand\ndecimal.Decimal\nare properly cached.\nbpo-46161\n: Fix the class building error when the arguments are constants\nand CALL_FUNCTION_EX is used.\nbpo-46028\n: Fixes calculation of\nsys._base_executable\nwhen inside a\nvirtual environment that uses symlinks with different binary names than\nthe base environment provides.\nbpo-46091\n: Correctly calculate indentation levels for lines with\nwhitespace character that are ended by line continuation characters. Patch\nby Pablo Galindo\nbpo-30512\n: Add CAN Socket support for NetBSD.\nbpo-46045\n: Do not use POSIX semaphores on NetBSD\nbpo-44024\n: Improve the\nTypeError\nmessage for non-string second\narguments passed to the built-in functions\ngetattr()\nand\nhasattr()\n. Patch by Géry Ogam.\nLibrary\n¶\nbpo-46624\n: Restore support for non-integer arguments of\nrandom.randrange()\nand\nrandom.randint()\n.\nbpo-46591\n: Make the IDLE doc URL on the About IDLE dialog clickable.\nbpo-46565\n: Remove loop variables that are leaking into modules’\nnamespaces.\nbpo-46553\n: In\ntyping.get_type_hints()\n, support evaluating bare\nstringified\nClassVar\nannotations. Patch by Gregory Beauregard.\nbpo-46544\n: Don’t leak\nx\n&\nuspace\nintermediate vars in\ntextwrap.TextWrapper\n.\nbpo-46487\n: Add the\nget_write_buffer_limits\nmethod to\nasyncio.transports.WriteTransport\nand to the SSL transport.\nbpo-45173\n: Note the configparser deprecations will be removed in Python\n3.12.\nbpo-45162\n: The deprecated\nunittest\nAPIs removed in 3.11a1 have been\ntemporarily restored to be removed in 3.12 while cleanups in external\nprojects go in.\nbpo-46539\n: In\ntyping.get_type_hints()\n, support evaluating\nstringified\nClassVar\nand\nFinal\nannotations inside\nAnnotated\n.\nPatch by Gregory Beauregard.\nbpo-46510\n: Add missing test for\ntypes.TracebackType\nand\ntypes.FrameType\n. Calculate them directly from the caught\nexception without calling\nsys.exc_info()\n.\nbpo-46491\n: Allow\ntyping.Annotated\nto wrap\ntyping.Final\nand\ntyping.ClassVar\n. Patch by Gregory Beauregard.\nbpo-46483\n: Remove\n__class_getitem__()\nfrom\npathlib.PurePath\nas this class was not supposed to be generic.\nbpo-46436\n: Fix command-line option\n-d\n/\n--directory\nin module\nhttp.server\nwhich is ignored when combined with command-line option\n--cgi\n. Patch by Géry Ogam.\nbpo-41403\n: Make\nmock.patch()\nraise a\nTypeError\nwith a\nrelevant error message on invalid arg. Previously it allowed a cryptic\nAttributeError\nto escape.\nbpo-46474\n: In\nimportlib.metadata.EntryPoint.pattern\n, avoid potential\nREDoS by limiting ambiguity in consecutive whitespace.\nbpo-46474\n: Removed private method from\nimportlib.metadata.Path\n. Sync\nwith importlib_metadata 4.10.0.\nbpo-46470\n: Remove unused branch from\ntyping._remove_dups_flatten\nbpo-46469\n:\nasyncio\ngeneric classes now return\ntypes.GenericAlias\nin\n__class_getitem__\ninstead of the same\nclass.\nbpo-41906\n: Support passing filter instances in the\nfilters\nvalues of\nhandlers\nand\nloggers\nin the dictionary passed to\nlogging.config.dictConfig()\n.\nbpo-46422\n: Use\ndis.Positions\nin\ndis.Instruction\ninstead of a\nregular\ntuple\n.\nbpo-46434\n:\npdb\nnow gracefully handles\nhelp\nwhen\n__doc__\nis missing, for example when run with pregenerated\noptimized\n.pyc\nfiles.\nbpo-43869\n: Python uses the same time Epoch on all platforms. Add an\nexplicit unit test to ensure that it’s the case. Patch by Victor Stinner.\nbpo-46414\n: Add\ntyping.reveal_type()\n. Patch by Jelle Zijlstra.\nbpo-40280\n:\nsubprocess\nnow imports Windows-specific imports when\nmsvcrt\nmodule is available, and POSIX-specific imports on all other\nplatforms. This gives a clean exception when\n_posixsubprocess\nis not\navailable (e.g. Emscripten browser target).\nbpo-40066\n:\nIntEnum\n,\nIntFlag\n, and\nStrEnum\nuse the mixed-in type\nfor their\nstr()\nand\nformat()\noutput.\nbpo-46316\n: Optimize\npathlib.Path.iterdir()\nby removing an\nunnecessary check for special entries.\nbpo-29688\n: Document\npathlib.Path.absolute()\n(which has always\nexisted).\nbpo-43012\n: The pathlib module’s obsolete and internal\n_Accessor\nclass\nhas been removed to prepare the terrain for upcoming enhancements to the\nmodule.\nbpo-46258\n: Speed up\nmath.isqrt()\nfor small positive integers by\nreplacing two division steps with a lookup table.\nbpo-46242\n: Improve error message when creating a new\nenum.Enum\ntype subclassing an existing\nEnum\nwith\n_member_names_\nusing\nenum.Enum.__call__()\n.\nbpo-43118\n: Fix a bug in\ninspect.signature()\nthat was causing it to\nfail on some subclasses of classes with a\n__text_signature__\nreferencing module globals. Patch by Weipeng Hong.\nbpo-26552\n: Fixed case where failing\nasyncio.ensure_future()\ndid not\nclose the coroutine. Patch by Kumar Aditya.\nbpo-21987\n: Fix an issue with\ntarfile.TarFile.getmember()\ngetting a\ndirectory name with a trailing slash.\nbpo-46124\n: Update\nzoneinfo\nto rely on importlib.resources\ntraversable API.\nbpo-46103\n: Now\ninspect.getmembers()\nonly gets\n__bases__\nattribute from class type. Patch by Weipeng Hong.\nbpo-46080\n: Fix exception in argparse help text generation if a\nargparse.BooleanOptionalAction\nargument’s default is\nargparse.SUPPRESS\nand it has\nhelp\nspecified.  Patch by Felix\nFontein.\nbpo-44791\n: Fix substitution of\nParamSpec\nin\nConcatenate\nwith different parameter expressions.\nSubstitution with a list of types returns now a tuple of types.\nSubstitution with\nConcatenate\nreturns now a\nConcatenate\nwith\nconcatenated lists of arguments.\nDocumentation\n¶\nbpo-46463\n: Fixes\nescape4chm.py\nscript used when building the CHM\ndocumentation file\nTests\n¶\nbpo-43478\n: Mocks can no longer be provided as the specs for other Mocks.\nAs a result, an already-mocked object cannot be passed to\nmock.Mock()\n.\nThis can uncover bugs in tests since these Mock-derived Mocks will always\npass certain tests (e.g. isinstance) and builtin assert functions (e.g.\nassert_called_once_with) will unconditionally pass.\nbpo-46616\n: Ensures\ntest_importlib.test_windows\ncleans up registry keys\nafter completion.\nbpo-44359\n: test_ftplib now silently ignores socket errors to prevent\nlogging unhandled threading exceptions. Patch by Victor Stinner.\nbpo-46600\n: Fix test_gdb.test_pycfunction() for Python built with\nclang\n-Og\n. Tolerate inlined functions in the gdb traceback. Patch by Victor\nStinner.\nbpo-46542\n: Fix a Python crash in test_lib2to3 when using Python built in\ndebug mode: limit the recursion limit. Patch by Victor Stinner.\nbpo-46576\n: test_peg_generator now disables compiler optimization when\ntesting compilation of its own C extensions to significantly speed up the\ntesting on non-debug builds of CPython.\nbpo-46542\n: Fix\ntest_json\ntests checking for\nRecursionError\n:\nmodify these tests to use\nsupport.infinite_recursion()\n. Patch by\nVictor Stinner.\nbpo-13886\n: Skip test_builtin PTY tests on non-ASCII characters if the\nreadline module is loaded. The readline module changes input() behavior,\nbut test_builtin is not intended to test the readline module. Patch by\nVictor Stinner.\nbpo-40280\n: Add\ntest.support.requires_fork()\ndecorators to mark tests\nthat require a working\nos.fork()\n.\nbpo-40280\n: Add\ntest.support.requires_subprocess()\ndecorator to mark\ntests which require working\nsubprocess\nmodule or\nos.spawn*\n. The\nwasm32-emscripten platform has no support for processes.\nbpo-46126\n: Disable ‘descriptions’ when running tests internally.\nBuild\n¶\nbpo-46602\n: Tidied up configure.ac so that conftest.c is truncated rather\nthan appended. This assists in the case where the ‘rm’ of conftest.c fails\nto happen between tests.  Downstream issues such as a clobbered SOABI can\nresult.\nbpo-46600\n: Fix the test checking if the C compiler supports\n-Og\noption\nin the\n./configure\nscript to also use\n-Og\non clang which supports\nit. Patch by Victor Stinner.\nbpo-38472\n: Fix GCC detection in setup.py when cross-compiling. The C\ncompiler is now run with LC_ALL=C. Previously, the detection failed with a\nGerman locale.\nbpo-46513\n:\nconfigure\nno longer uses\nAC_C_CHAR_UNSIGNED\nmacro and\npyconfig.h\nno longer defines reserved symbol\n__CHAR_UNSIGNED__\n.\nbpo-46471\n: Use global singletons for single byte bytes objects in\ndeepfreeze.\nbpo-46443\n: Deepfreeze now uses cached small integers as it saves some\nspace for common small integers.\nbpo-46429\n: Merge all deep-frozen files into one for space savings. Patch\nby Kumar Aditya.\nbpo-45569\n: The build now defaults to using 30-bit digits for Python\nintegers. Previously either 15-bit or 30-bit digits would be selected,\ndepending on the platform. 15-bit digits may still be selected using the\n--enable-big-digits=15\noption to the\nconfigure\nscript, or by\ndefining\nPYLONG_BITS_IN_DIGIT\nin\npyconfig.h\n.\nbpo-45925\n: Update Windows installer to use SQLite 3.37.2.\nbpo-43112\n: Detect musl libc as a separate SOABI (tagged as\nlinux-musl\n).\nWindows\n¶\nbpo-33125\n: The traditional EXE/MSI based installer for Windows is now\navailable for ARM64\nbpo-46362\n: os.path.abspath(“C:CON”) is now fixed to return “\\.CON”, not\nthe same path. The regression was true of all legacy DOS devices such as\nCOM1, LPT1, or NUL.\nbpo-44934\n: The installer now offers a command-line only option to add the\ninstallation directory to the end of\nPATH\ninstead of at the\nstart.\nmacOS\n¶\nbpo-45925\n: Update macOS installer to SQLite 3.37.2.\nIDLE\n¶\nbpo-45296\n: Clarify close, quit, and exit in IDLE.  In the File menu,\n‘Close’ and ‘Exit’ are now ‘Close Window’ (the current one) and ‘Exit’ is\nnow ‘Exit IDLE’ (by closing all windows).  In Shell, ‘quit()’ and ‘exit()’\nmean ‘close Shell’. If there are no other windows, this also exits IDLE.\nC API\n¶\nbpo-40170\n: Remove the\nPyHeapType_GET_MEMBERS()\nmacro. It was exposed\nin the public C API by mistake, it must only be used by Python internally.\nUse the\nPyTypeObject.tp_members\nmember instead. Patch by Victor\nStinner.\nbpo-40170\n: Move _Py_GetAllocatedBlocks() and _PyObject_DebugMallocStats()\nprivate functions to the internal C API. Patch by Victor Stinner.\nbpo-46433\n: The internal function _PyType_GetModuleByDef now correctly\nhandles inheritance patterns involving static types.\nbpo-45459\n:\nPy_buffer\nand various\nPy_buffer\nrelated functions\nare now part of the limited API and stable ABI.\nbpo-14916\n: Fixed bug in the tokenizer that prevented\nPyRun_InteractiveOne\nfrom parsing from the provided FD.\nPython 3.11.0 alpha 4\n¶\nRelease date: 2022-01-13\nCore and Builtins\n¶\nbpo-46070\n:\nPy_EndInterpreter()\nnow explicitly untracks all objects\ncurrently tracked by the GC. Previously, if an object was used later by\nanother interpreter, calling\nPyObject_GC_UnTrack()\non the object\ncrashed if the previous or the next object of the\nPyGC_Head\nstructure became a dangling pointer. Patch by Victor Stinner.\nbpo-46347\n: Fix memory leak in PyEval_EvalCodeEx.\nbpo-46339\n: Fix a crash in the parser when retrieving the error text for\nmulti-line f-strings expressions that do not start in the first line of\nthe string. Patch by Pablo Galindo\nbpo-46331\n: Do not set line number of instruction storing doc-string. Fixes\nregression introduced in 3.11 alpha.\nbpo-46314\n: Remove spurious “call” event when creating a lambda function\nthat was accidentally introduced in 3.11a4.\nbpo-46289\n: ASDL declaration of\nFormattedValue\nhas changed to reflect\nconversion\nfield is not optional.\nbpo-46297\n: Fixed an interpreter crash on bootup with multiple PythonPaths\nset in the Windows registry. Patch by Derzsi Dániel.\nbpo-46237\n: Fix the line number of tokenizer errors inside f-strings. Patch\nby Pablo Galindo.\nbpo-46263\n: We always expect the “use_frozen_modules” config to be set, now\nthat getpath.c was rewritten in pure Python and the logic improved.\nbpo-46006\n: Fix a regression when a type method like\n__init__()\nis\nmodified in a subinterpreter. Fix a regression in\n_PyUnicode_EqualToASCIIId()\nand type\nupdate_slot()\n. Revert the\nchange which made the Unicode dictionary of interned strings compatible\nwith subinterpreters: the internal interned dictionary is shared again by\nall interpreters. Patch by Victor Stinner.\nbpo-45923\n: Add RESUME opcode. This is a logical no-op. It is emitted by\nthe compiler anywhere a Python function can be entered. It is used by the\ninterpreter to perform tracing and optimizer checks.\nbpo-46208\n: Fix the regression of os.path.normpath(“A/../../B”) not\nreturning expected “../B” but “B”.\nbpo-46240\n: Correct the error message for unclosed parentheses when the\ntokenizer doesn’t reach the end of the source when the error is reported.\nPatch by Pablo Galindo\nbpo-46009\n: Remove the\nGEN_START\nopcode.\nbpo-46235\n: Certain sequence multiplication operations like\n[0]\n*\n1_000\nare now faster due to reference-counting optimizations. Patch by Dennis\nSweeney.\nbpo-46221\n:\nPREP_RERAISE_STAR\nno longer pushes\nlasti\nto the\nstack.\nbpo-46202\n: Remove\nPOP_EXCEPT_AND_RERAISE\nand replace it by an\nequivalent sequence of other opcodes.\nbpo-46085\n: Fix iterator cache mechanism of\nOrderedDict\n.\nbpo-46055\n: Speed up shifting operation involving integers less than\nPyLong_BASE\n. Patch by Xinhang Xu.\nbpo-46110\n: Add a maximum recursion check to the PEG parser to avoid stack\noverflow. Patch by Pablo Galindo\nbpo-46107\n: Fix bug where\nExceptionGroup.split()\nand\nExceptionGroup.subgroup()\ndid not copy the exception group’s\n__note__\nfield to the parts.\nbpo-45711\n: The interpreter state’s representation of handled exceptions\n(a.k.a exc_info, or _PyErr_StackItem) now has only the\nexc_value\nfield,\nexc_type\nand\nexc_traceback\nhave been removed as their\nvalues can be derived from\nexc_value\n.\nbpo-44525\n: Replace the four call bytecode instructions which one pre-call\ninstruction and two call instructions.\nRemoves\nCALL_FUNCTION\n,\nCALL_FUNCTION_KW\n,\nCALL_METHOD\nand\nCALL_METHOD_KW\n.\nAdds\nCALL_NO_KW\nand\nCALL_KW\ncall instructions, and\nPRECALL_METHOD\nprefix for pairing with\nLOAD_METHOD\n.\nbpo-46039\n: Remove the\nYIELD_FROM\ninstruction and replace it with the\nSEND\ninstruction which performs the same operation, but without the\nloop.\nbpo-45635\n: The code called from\n_PyErr_Display()\nwas refactored\nto improve error handling. It now exits immediately upon an unrecoverable\nerror.\nbpo-46054\n: Fix parser error when parsing non-utf8 characters in source\nfiles. Patch by Pablo Galindo.\nbpo-46042\n: Improve the location of the caret in\nSyntaxError\nexceptions emitted by the symbol table. Patch by Pablo Galindo.\nbpo-46049\n: Ensure\n._pth\nfiles work as intended on platforms other\nthan Windows.\nbpo-46048\n: Fixes parsing of\n._pth\nfiles on startup so that\nsingle-character paths are correctly read.\nbpo-37971\n: Fix a bug where the line numbers given in a traceback when a\ndecorator application raised an exception were wrong.\nbpo-46031\n: Add\nPOP_JUMP_IF_NOT_NONE\nand\nPOP_JUMP_IF_NONE\nopcodes to speed up conditional jumps.\nbpo-45654\n: Deepfreeze\nrunpy\n, patch by Kumar Aditya.\nbpo-46025\n: Fix a crash in the\natexit\nmodule involving functions\nthat unregister themselves before raising exceptions. Patch by Pablo\nGalindo.\nbpo-46000\n: Improve compatibility of the\ncurses\nmodule with NetBSD\ncurses.\nbpo-44525\n: Specialize the CALL_FUNCTION instruction for calls to builtin\ntypes with a single argument. Speeds up\nrange(x)\n,\nlist(x)\n, and\nspecifically\ntype(obj)\n.\nbpo-42918\n: Fix bug where the built-in\ncompile()\nfunction did not\nalways raise a\nSyntaxError\nwhen passed multiple statements in\n‘single’ mode. Patch by Weipeng Hong.\nbpo-45953\n: The main interpreter in _PyRuntimeState.interpreters is now\nstatically allocated (as part of _PyRuntime).  Likewise for the initial\nthread state of each interpreter.  This means less allocation during\nruntime init, as well as better memory locality for these key state\nobjects.\nbpo-45292\n: Complete the\nPEP 654\nimplementation: add\nexcept*\n.\nbpo-43413\n: Revert changes in\nset.__init__\n. Subclass of\nset\nneeds to define a\n__init__()\nmethod if it defines a\n__new__()\nmethod with additional keyword parameters.\nbpo-43931\n: Added the\nPy_Version\nconstant which bears the same\nvalue as\nPY_VERSION_HEX\n. Patch by Gabriele N. Tornetta.\nLibrary\n¶\nbpo-46342\n: The\n@typing.final\ndecorator now sets the\n__final__\nattribute on the decorated object to allow runtime introspection. Patch by\nJelle Zijlstra.\nbpo-46328\n: Added the\nsys.exception()\nmethod which returns the active\nexception instance.\nbpo-46307\n: Add\nstring.Template.is_valid()\nand\nstring.Template.get_identifiers()\nmethods.\nbpo-46306\n: Assume that\ntypes.CodeType\nalways has\ntypes.CodeType.co_firstlineno\nin\ndoctest\n.\nbpo-40479\n: Fix\nhashlib\nusedforsecurity\noption to work correctly\nwith OpenSSL 3.0.0 in FIPS mode.\nbpo-46070\n: Fix possible segfault when importing the\nasyncio\nmodule\nfrom different sub-interpreters in parallel. Patch by Erlend E. Aasland.\nbpo-46244\n: Removed\n__slots__\nfrom\ntyping.ParamSpec\nand\ntyping.TypeVar\n. They served no purpose. Patch by Arie Bovenberg.\nbpo-46278\n: Reflect\ncontext\nargument in\nAbstractEventLoop.call_*()\nmethods. Loop implementations already support it.\nbpo-46269\n: Remove special-casing of\n__new__\nin\nenum.Enum.__dir__()\n.\nbpo-46266\n: Improve day constants in\ncalendar\n.\nNow all constants (\nMONDAY\n…\nSUNDAY\n) are documented, tested, and\nadded to\n__all__\n.\nbpo-46257\n: Optimized the mean, variance, and stdev functions in the\nstatistics module. If the input is an iterator, it is consumed in a single\npass rather than eating memory by conversion to a list.  The single pass\nalgorithm is about twice as fast as the previous two pass code.\nbpo-41011\n: Added two new variables to\npyvenv.cfg\nwhich is generated by\nvenv\nmodule:\nexecutable\nfor the executable and\ncommand\nfor the\ncommand line used to create the environment.\nbpo-46239\n: Improve error message when importing\nasyncio.windows_events\non non-Windows.\nbpo-46238\n: Reuse\n_winapi\nconstants in\nasyncio.windows_events\n.\nbpo-46222\n: Adding\nSF_NOCACHE\nsendfile constant for FreeBSD for the\nposixmodule.\nbpo-37295\n: Add fast path for\n0\n<=\nk\n<=\nn\n<=\n67\nfor\nmath.comb()\n.\nbpo-46176\n: Adding the\nMAP_STACK\nconstant for the mmap module.\nbpo-43424\n: Deprecate\nwebbrowser.MacOSXOSAScript._name\nand use\nname\ninstead.\nbpo-45321\n: Added missing error codes to module\nxml.parsers.expat.errors\n.\nbpo-46125\n: Refactor tests to test traversable API directly. Includes\nchanges from importlib 5.4.0.\nbpo-46118\n: Moved importlib.resources and its related functionality to a\npackage.\nbpo-37578\n: Add\ninclude_hidden\nparameter to\nglob()\nand\niglob()\nto match hidden files and directories when using\nspecial characters like\n*\n,\n**\n,\n?\nand\n[]\n.\nbpo-20369\n:\nconcurrent.futures.wait()\nno longer blocks forever when\ngiven duplicate Futures. Patch by Kumar Aditya.\nbpo-46105\n: Honor spec when generating requirement specs with urls and\nextras (importlib_metadata 4.8.3).\nbpo-44893\n: EntryPoint objects are no longer tuples. Recommended means to\naccess is by attribute (‘.name’, ‘.group’) or accessor (‘.load()’). Access\nby index is deprecated and will raise deprecation warning.\nbpo-22815\n: Print unexpected successes together with failures and errors in\nsummary in\nunittest.TextTestResult\n.\nbpo-22047\n: Calling\nadd_argument_group()\non an argument group is\ndeprecated. Calling\nadd_argument_group()\nor\nadd_mutually_exclusive_group()\non a mutually exclusive group is\ndeprecated.\nThese features were never supported and do not always work correctly. The\nfunctions exist on the API by accident through inheritance and will be\nremoved in the future.\nbpo-26952\n:\nargparse\nraises\nValueError\nwith clear message\nwhen trying to render usage for an empty mutually exclusive group.\nPreviously it raised a cryptic\nIndexError\n.\nbpo-45615\n: Functions in the\ntraceback\nmodule raise\nTypeError\nrather than\nAttributeError\nwhen an exception argument is not of\ntype\nBaseException\n.\nbpo-16594\n: Add allow allow_reuse_port flag in socketserver.\nbpo-27718\n: Fix help for the\nsignal\nmodule. Some functions (e.g.\nsignal()\nand\ngetsignal()\n) were omitted.\nbpo-46032\n: The\nregistry()\nmethod of\nfunctools.singledispatch()\nfunctions checks now the first argument or the first parameter annotation\nand raises a TypeError if it is not supported. Previously unsupported\n“types” were ignored (e.g.\ntyping.List[int]\n) or caused an error at\ncalling time (e.g.\nlist[int]\n).\nbpo-46014\n: Add ability to use\ntyping.Union\nand\ntypes.UnionType\nas\ndispatch argument to\nfunctools.singledispatch\n. Patch provided by Yurii\nKarabas.\nbpo-27062\n: Add\n__all__\nto\ninspect\n, patch by Kumar Aditya.\nbpo-46018\n: Ensure that\nmath.expm1()\ndoes not raise on underflow.\nbpo-46016\n: Adding\nF_DUP2FD\nand\nF_DUP2FD_CLOEXEC\nconstants from FreeBSD into the\nfcntl\nmodule.\nbpo-45755\n:\ntyping\ngeneric aliases now reveal the class attributes\nof the original generic class when passed to\ndir()\n. This was the\nbehavior up to Python 3.6, but was changed in 3.7-3.9.\nbpo-45874\n: The empty query string, consisting of no query arguments, is\nnow handled correctly in\nurllib.parse.parse_qsl\n. This caused problems\nbefore when strict parsing was enabled.\nbpo-44674\n: Change how dataclasses disallows mutable default values.  It\nused to use a list of known types (list, dict, set).  Now it disallows\nunhashable objects to be defaults.  It’s using unhashability as a proxy\nfor mutability.  Patch by Eric V. Smith, idea by Raymond Hettinger.\nbpo-23882\n: Remove namespace package (PEP 420) support from unittest\ndiscovery. It was introduced in Python 3.4 but has been broken since\nPython 3.7.\nbpo-25066\n: Added a\n__repr__()\nmethod to\nmultiprocessing.Event\nobjects, patch by Kumar Aditya.\nbpo-45643\n: Added\nsignal.SIGSTKFLT\non platforms where this signal\nis defined.\nbpo-44092\n: Fetch across rollback no longer raises\nInterfaceError\n. Instead we leave it to the SQLite library\nto handle these cases. Patch by Erlend E. Aasland.\nbpo-42413\n: Replace\nconcurrent.futures.TimeoutError\nand\nasyncio.TimeoutError\nwith builtin\nTimeoutError\n, keep these\nnames as deprecated aliases.\nDocumentation\n¶\nbpo-46196\n: Document method\ncmd.Cmd.columnize()\n.\nbpo-46120\n: State that\n|\nis preferred for readability over\nUnion\nin\nthe\ntyping\ndocs.\nbpo-46109\n: Extracted\nimportlib.resources\nand\nimportlib.resources.abc\ndocumentation into separate files.\nbpo-19737\n: Update the documentation for the\nglobals()\nfunction.\nTests\n¶\nbpo-46296\n: Add a test case for\nenum\nwith\n_use_args_\n==\nTrue\nand\n_member_type_\n==\nobject\n.\nbpo-46205\n: Fix hang in runtest_mp due to race condition\nbpo-46263\n: Fix test_capi on FreeBSD 14-dev: instruct jemalloc to not fill\nfreed memory with junk byte.\nbpo-46262\n: Cover\nValueError\npath in tests for\nenum.Flag._missing_()\n.\nbpo-46150\n: Now\nfakename\nin\ntest_pathlib.PosixPathTest.test_expanduser\nis checked to be\nnon-existent.\nbpo-46129\n: Rewrite\nasyncio.locks\ntests with\nunittest.IsolatedAsyncioTestCase\nusage.\nbpo-23819\n: Fixed\nasyncio\ntests in python optimized mode. Patch by\nKumar Aditya.\nbpo-46114\n: Fix test case for OpenSSL 3.0.1 version. OpenSSL 3.0 uses\n0xMNN00PP0L\n.\nBuild\n¶\nbpo-44133\n: When Python is configured with\n--without-static-libpython\n, the Python static library\n(libpython.a) is no longer built. Patch by Victor Stinner.\nbpo-44133\n: When Python is built without\n--enable-shared\n, the\npython\nprogram is now linked to object files, rather than being linked\nto the Python static library (libpython.a), to make sure that all symbols\nare exported. Previously, the linker omitted some symbols like the\nPy_FrozenMain()\nfunction. Patch by Victor Stinner.\nbpo-40280\n: The\nconfigure\nscript has a new option\n--with-emscripten-target\nto select browser or node as Emscripten build\ntarget.\nbpo-46315\n: Added and fixed\n#ifdef\nHAVE_FEATURE\nchecks for\nfunctionality that is not available on WASI platform.\nbpo-45723\n: Fixed a regression in\nconfigure\ncheck for\nselect.epoll()\n.\nbpo-46263\n:\nconfigure\nno longer sets\nMULTIARCH\non FreeBSD\nplatforms.\nbpo-46106\n: Updated OpenSSL to 1.1.1m in Windows builds, macOS installer\nbuilds, and CI. Patch by Kumar Aditya.\nbpo-46088\n: Automatically detect or install bootstrap Python runtime when\nbuilding from Visual Studio.\nbpo-46072\n: Add a –with-pystats configure option to turn on internal\nstatistics gathering.\nbpo-40280\n: A new directory\nTools/wasm\ncontains WebAssembly-related\nhelpers like\nconfig.site\noverride for wasm32-emscripten, wasm assets\ngenerator to bundle the stdlib, and a README.\nbpo-46023\n:\nmakesetup\nno longer builds extensions that have been\nmarked as\ndisabled\n. This allows users to disable modules in\nModules/Setup.local\n.\nbpo-45949\n: Use pure Python\nfreeze_module\nfor all but importlib\nbootstrap files.\n--with-freeze-module\nconfigure\noption is\nno longer needed for cross builds.\nWindows\n¶\nbpo-46217\n: Removed parameter that is unsupported on Windows 8.1 and early\nWindows 10 and may have caused build or runtime failures.\nmacOS\n¶\nbpo-40477\n: The Python Launcher app for macOS now properly launches scripts\nand, if necessary, the Terminal app when running on recent macOS releases.\nC API\n¶\nbpo-46236\n: Fix a bug in\nPyFunction_GetAnnotations()\nthat caused it\nto return a\ntuple\ninstead of a\ndict\n.\nbpo-46140\n:\nPyBuffer_GetPointer()\n,\nPyBuffer_FromContiguous()\n,\nPyBuffer_ToContiguous()\nand\nPyMemoryView_FromBuffer()\nnow take buffer info by\nconst\nPy_buffer\n*\ninstead of\nPy_buffer\n*\n, as they do not need mutability.\nPyBuffer_FromContiguous()\nalso now takes the source buffer as\nconst\nvoid\n*\n, and similarly\nPyBuffer_GetPointer()\ntakes the\nstrides as\nconst\nPy_ssize_t\n*\n.\nbpo-45855\n: Document that the\nno_block\nargument to\nPyCapsule_Import()\nis a no-op now.\nbpo-45855\n: Replaced deprecated usage of\nPyImport_ImportModuleNoBlock()\nwith\nPyImport_ImportModule()\nin stdlib modules. Patch by Kumar Aditya.\nbpo-46007\n: The\nPyUnicode_CHECK_INTERNED()\nmacro has been excluded\nfrom the limited C API. It was never usable there, because it used\ninternal structures which are not available in the limited C API. Patch by\nVictor Stinner.\nPython 3.11.0 alpha 3\n¶\nRelease date: 2021-12-08\nCore and Builtins\n¶\nbpo-46009\n: Restore behavior from 3.9 and earlier when sending non-None to\nnewly started generator. In 3.9 this did not affect the state of the\ngenerator. In 3.10.0 and 3.10.1\ngen_func().send(0)\nis equivalent to\ngen_func().throw(TypeError(...)\nwhich exhausts the generator. In\n3.10.2 onward, the behavior has been reverted to that of 3.9.\nbpo-46004\n: Fix the\nSyntaxError\nlocation for errors involving for\nloops with invalid targets. Patch by Pablo Galindo\nbpo-45711\n:\n_PyErr_ChainStackItem()\nno longer normalizes\nexc_info\n(including setting the traceback on the exception instance)\nbecause\nexc_info\nis always normalized.\nbpo-45607\n: The\n__note__\nfield was added to\nBaseException\n. It is\nNone\nby default but can be set to a string which is added to the\nexception’s traceback.\nbpo-45947\n: Place pointers to dict and values immediately before GC header.\nThis reduces number of dependent memory loads to access either dict or\nvalues from 3 to 1.\nbpo-45915\n:\nis_valid_fd\nnow uses faster\nfcntl(fd,\nF_GETFD)\non\nLinux, macOS, and Windows.\nbpo-44530\n: Reverts a change to the\ncode.__new__\naudit event\nfrom an earlier prerelease.\nbpo-42268\n: Fail the configure step if the selected compiler doesn’t\nsupport memory sanitizer. Patch by Pablo Galindo\nbpo-45711\n: The three values of\nexc_info\nare now always consistent with\neach other. In particular, the\ntype\nand\ntraceback\nfields are now\nderived from the exception instance. This impacts the return values of\nsys.exc_info()\nand\nPyErr_GetExcInfo()\nif the exception\ninstance is modified while the exception is handled, as well as\nPyErr_SetExcInfo()\n, which now ignores the\ntype\nand\ntraceback\narguments provided to it.\nbpo-45727\n: Refine the custom syntax error that suggests that a comma may\nbe missing to trigger only when the expressions are detected between\nparentheses or brackets. Patch by Pablo Galindo\nbpo-45885\n: Specialized the\nCOMPARE_OP\nopcode using the PEP 659\nmachinery.\nbpo-45786\n: Allocate space for the interpreter frame in the frame object,\nto avoid an additional allocation when the frame object outlives the frame\nactivation.\nbpo-45614\n: Fix\ntraceback\ndisplay for exceptions with invalid module\nname.\nbpo-45813\n: Fix crash when calling coro.cr_frame.clear() after coroutine\nhas been freed.\nbpo-45811\n: Improve the tokenizer errors when encountering invisible\ncontrol characters in the parser. Patch by Pablo Galindo\nbpo-45848\n: Allow the parser to obtain error lines directly from encoded\nfiles. Patch by Pablo Galindo\nbpo-45709\n: Restore behavior from 3.10 when tracing an exception raised\nwithin a with statement.\nbpo-44525\n: Adds new\nCOPY_FREE_VARS\nopcode, to make copying of\nfree variables from function to frame explicit. Helps optimization of\ncalls to Python function.\nbpo-45829\n: Specialize\nBINARY_SUBSCR\nfor classes with a\n__getitem__\nmethod implemented in Python\nbpo-45826\n: Fixed a crash when calling\n.with_traceback(None)\non\nNameError\n. This occurs internally in\nunittest.TestCase.assertRaises()\n.\nbpo-45822\n: Fixed a bug in the parser that was causing it to not respect\nPEP 263\ncoding cookies when no flags are provided. Patch by Pablo\nGalindo\nbpo-45820\n: Fix a segfault when the parser fails without reading any input.\nPatch by Pablo Galindo\nbpo-45636\n: Simplify the implementation of\nBINARY_OP\nby indexing\ninto an array of function pointers (rather than switching on the oparg).\nbpo-42540\n: Fix crash when\nos.fork()\nis called with an active\nnon-default memory allocator.\nbpo-45738\n: Fix computation of error location for invalid continuation\ncharacters in the parser. Patch by Pablo Galindo.\nbpo-45636\n: Remove an existing “fast path” for old-style string formatting,\nsince it no longer appears to have any measurable impact.\nbpo-45753\n: Make recursion checks a bit more efficient by tracking amount\nof calls left before overflow.\nbpo-45773\n: Fix a compiler hang when attempting to optimize certain jump\npatterns.\nbpo-45764\n: The parser now gives a better error message when leaving out\nthe opening parenthesis\n(\nafter a\ndef\n-statement:\n>>>\ndef\nf\n:\nFile\n\"<stdin>\"\n, line\n1\ndef\nf\n:\n^\nSyntaxError\n:\nexpected '('\nbpo-45609\n: Specialized the\nSTORE_SUBSCR\nopcode using the PEP 659\nmachinery.\nbpo-45636\n: Replace all numeric\nBINARY_*\nand\nINPLACE_*\ninstructions\nwith a single\nBINARY_OP\nimplementation.\nbpo-45582\n: Path calculation (known as\ngetpath\n) has been reimplemented\nas a frozen Python module. This should have no visible impact, but may\naffect calculation of all paths referenced in\nsys\nand\nsysconfig\n.\nbpo-45450\n: Improve the syntax error message for parenthesized arguments.\nPatch by Pablo Galindo.\nLibrary\n¶\nbpo-27946\n: Fix possible crash when getting an attribute of\nxml.etree.ElementTree.Element\nsimultaneously with replacing the\nattrib\ndict.\nbpo-45711\n: Make\nasyncio\nnormalize exceptions as soon as they are\ncaptured with\nPyErr_Fetch()\n, and before they are stored as an\nexc_info triplet. This brings\nasyncio\nin line with the rest of the\ncodebase, where an exc_info triplet is always normalized.\nbpo-23819\n: Replaced asserts with exceptions in asyncio, patch by Kumar\nAditya.\nbpo-13236\n:\nunittest.TextTestResult\nand\nunittest.TextTestRunner\nflush now the output stream more often.\nbpo-45917\n: Added\nmath.exp2()\n:, which returns 2 raised to the power\nof x.\nbpo-37658\n: Fix issue when on certain conditions\nasyncio.wait_for()\nmay\nallow a coroutine to complete successfully, but fail to return the result,\npotentially causing memory leaks or other issues.\nbpo-45876\n: Improve the accuracy of stdev() and pstdev() in the statistics\nmodule.  When the inputs are floats or fractions, the output is a\ncorrectly rounded float\nbpo-44649\n: Handle dataclass(slots=True) with a field that has default a\ndefault value, but for which init=False.\nbpo-45803\n: Added missing kw_only parameter to\ndataclasses.make_dataclass().\nbpo-45837\n: The\nturtle.RawTurtle.settiltangle()\nis deprecated since\nPython 3.1, it now emits a deprecation warning and will be removed in\nPython 3.13.\nUse\nturtle.RawTurtle.tiltangle()\ninstead.\nturtle.RawTurtle.tiltangle()\nwas earlier incorrectly marked as\ndeprecated, its docstring has been corrected.\nPatch by Hugo van Kemenade.\nbpo-45831\n:\nfaulthandler\ncan now write ASCII-only strings (like\nfilenames and function names) with a single write() syscall when dumping a\ntraceback. It reduces the risk of getting an unreadable dump when two\nthreads or two processes dump a traceback to the same file (like stderr)\nat the same time. Patch by Victor Stinner.\nbpo-45828\n:\nsqlite\nC callbacks now use unraisable exceptions if\ncallback tracebacks are enabled. Patch by Erlend E. Aasland.\nbpo-41735\n: Fix thread lock in\nzlib.Decompress.flush()\nmethod before\nPyObject_GetBuffer\n.\nbpo-45235\n: Reverted an argparse bugfix that caused regression in the\nhandling of default arguments for subparsers.  This prevented leaf level\narguments from taking precedence over root level arguments.\nbpo-45754\n: Fix a regression in Python 3.11a1 and 3.11a2 where\nsqlite3\nincorrectly would use\nSQLITE_LIMIT_LENGTH\nwhen checking\nSQL statement lengths. Now,\nSQLITE_LIMIT_SQL_LENGTH\nis used. Patch by\nErlend E. Aasland.\nbpo-45766\n: Added\nproportional\noption to\nstatistics.linear_regression()\n.\nbpo-45765\n: In importlib.metadata, fix distribution discovery for an empty\npath.\nbpo-45757\n: Fix bug where\ndis\nproduced an incorrect oparg when\nEXTENDED_ARG\nis followed by an opcode that does not use its\nargument.\nbpo-45644\n: In-place JSON file formatting using\npython3\n-m\njson.tool\ninfile\ninfile\nnow works correctly, previously it left the file empty.\nPatch by Chris Wesseling.\nbpo-45703\n: When a namespace package is imported before another module from\nthe same namespace is created/installed in a different\nsys.path\nlocation while the program is running, calling the\nimportlib.invalidate_caches()\nfunction will now also guarantee the\nnew module is noticed.\nbpo-45535\n: Improve output of\ndir()\nwith Enums.\nbpo-45664\n: Fix\ntypes.resolve_bases()\nand\ntypes.new_class()\nfor\ntypes.GenericAlias\ninstance as a base.\nbpo-45663\n: Fix\ndataclasses.is_dataclass()\nfor dataclasses which are\nsubclasses of\ntypes.GenericAlias\n.\nbpo-45662\n: Fix the repr of\ndataclasses.InitVar\nwith a type alias\nto the built-in class, e.g.\nInitVar[list[int]]\n.\nbpo-43137\n: Launch GNOME web browsers via gio tool instead of obsolete\ngvfs-open\nbpo-45429\n: On Windows,\ntime.sleep()\nnow uses a waitable timer which\nsupports high-resolution timers. Patch by Donghee Na and Eryk Sun.\nbpo-37295\n: Optimize\nmath.comb()\nand\nmath.perm()\n.\nbpo-45514\n: Deprecated legacy functions in\nimportlib.resources\n.\nbpo-45507\n: Add tests for truncated/missing trailers in gzip.decompress\nimplementation.\nbpo-45359\n: Implement\nPEP 585\nfor\ngraphlib.TopologicalSorter\n.\nbpo-44733\n: Add\nmax_tasks_per_child\nto\nconcurrent.futures.ProcessPoolExecutor\n. This allows users to\nspecify the maximum number of tasks a single process should execute before\nthe process needs to be restarted.\nbpo-28806\n: Improve netrc library. netrc file no longer needs to contain\nall tokens. And if the login name is anonymous, security check is no\nlonger need.\nbpo-43498\n: Avoid a possible\n“RuntimeError: dictionary changed size during\niteration”\nwhen adjusting the process count of\nProcessPoolExecutor\n.\nbpo-42158\n: Add MIME types for N-quads, N-triples, Notation3 and TriG to\nmimetypes\n.\nbpo-30533\n: Add\ninspect.getmembers_static()\n, it return all members\nwithout triggering dynamic lookup via the descriptor protocol. Patch by\nWeipeng Hong.\nDocumentation\n¶\nbpo-42238\n:\nmake\n-C\nDoc\nsuspicious\nwill be removed soon in favor of\nmake\n-C\nDoc\ncheck\n, mark it as deprecated.\nbpo-45840\n: Improve cross-references in the documentation for the data\nmodel.\nbpo-45640\n: Properly marked-up grammar tokens in the documentation are now\nclickable and take you to the definition of a given piece of grammar.\nPatch by Arthur Milchior.\nbpo-45788\n: Link doc for sys.prefix to sysconfig doc on installation paths.\nbpo-45772\n:\nsocket.socket\ndocumentation is corrected to a class from a\nfunction.\nbpo-45392\n: Update the docstring of the\ntype\nbuilt-in to remove a\nredundant line and to mention keyword arguments for the constructor.\nbpo-45250\n: Update the documentation to note that CPython does not\nconsistently require iterators to define\n__iter__\n.\nbpo-25381\n: In the extending chapter of the extending doc, update a\nparagraph about the global variables containing exception information.\nbpo-43905\n: Expanded\nastuple()\nand\nasdict()\ndocs, warning about deepcopy being applied and\nproviding a workaround.\nTests\n¶\nbpo-45695\n: Out-of-tree builds with a read-only source directory are now\ntested by CI.\nbpo-19460\n: Add new Test for\nLib/email/mime/nonmultipart.py::MIMENonMultipart\n.\nbpo-45835\n: Fix race condition in test_queue tests with multiple “feeder”\nthreads.\nbpo-45783\n: The test for the freeze tool now handles file moves and\ndeletions.\nbpo-45745\n: Remove the\n--findleaks\ncommand line option of regrtest: use\nthe\n--fail-env-changed\noption instead. Since Python 3.7, it was a\ndeprecated alias to the\n--fail-env-changed\noption.\nbpo-45701\n: Add tests with\ntuple\ntype with\nfunctools.lru_cache()\nto\ntest_functools\n.\nBuild\n¶\nbpo-44035\n: CI now verifies that autoconf files have been regenerated with\na current and unpatched autoconf package.\nbpo-45950\n: The build system now uses a\n_bootstrap_python\ninterpreter for freezing and deepfreezing again. To speed up build process\nthe build tools\n_bootstrap_python\nand\n_freeze_module\nare no longer build with LTO.\nbpo-45881\n: The\nconfigure\nscript now accepts\n--with-build-python\nand\n--with-freeze-module\noptions to make cross\ncompiling easier.\nbpo-40280\n: Emscripten platform now uses\n.wasm\nsuffix by default.\nbpo-40280\n: Disable unusable core extension modules on WASM/Emscripten\ntargets.\nbpo-40280\n:\nconfigure\nnow checks for socket\nshutdown\nfunction. The\ncheck makes it possible to disable\nSYS_shutdown\nwith\nac_cv_func_shutdown=no\nin CONFIG_SITE.\nbpo-40280\n:\nconfigure\nnow checks for functions\nfork1,\ngetegid,\ngeteuid,\ngetgid,\ngetppid,\ngetuid,\nopendir,\npipe,\nsystem,\nwait,\nttyname\n.\nbpo-33393\n: Update\nconfig.guess\nto 2021-06-03 and\nconfig.sub\nto\n2021-08-14.\nMakefile\nnow has an\nupdate-config\ntarget to make\nupdating more convenient.\nbpo-45866\n:\nmake\nregen-all\nnow produces the same output when run from a\ndirectory other than the source tree: when building Python out of the\nsource tree. pegen now strips directory of the “generated by pygen from\n<FILENAME>” header Patch by Victor Stinner.\nbpo-40280\n:\nconfigure\nnow accepts machine\nwasm32\nor\nwasm64\nand\nOS\nwasi\nor\nemscripten\nfor cross building, e.g.\nwasm32-unknown-emscripten\n,\nwasm32-wasi\n, or\nwasm32-unknown-wasi\n.\nbpo-41498\n: Python now compiles on platforms without\nsigset_t\n. Several\nfunctions in\nsignal\nare not available when\nsigset_t\nis missing.\nBased on patch by Roman Yurchak for pyodide.\nbpo-45881\n:\nsetup.py\nnow uses\nCC\nfrom environment first to discover\nmultiarch and cross compile paths.\nbpo-45886\n: The\n_freeze_module\nprogram path can now be overridden on\nthe command line, e.g.\nmake\nFREEZE_MODULE=../x86_64/Program/_freeze_module\n.\nbpo-45873\n: Get rid of the\n_bootstrap_python\nbuild step. The\ndeepfreeze.py script is now run using\n$(PYTHON_FOR_REGEN)\nwhich can be\nPython 3.7 or newer (on Windows, 3.8 or newer).\nbpo-45847\n: Port builtin hashlib extensions to\nPY_STDLIB_MOD\nmacro and\naddext()\n.\nbpo-45723\n: Add\nautoconf\nhelpers for saving and restoring environment\nvariables:\nSAVE_ENV\n: Save\n$CFLAGS\n,\n$LDFLAGS\n,\n$LIBS\n, and\n$CPPFLAGS\n.\nRESTORE_ENV\n: Restore\n$CFLAGS\n,\n$LDFLAGS\n,\n$LIBS\n, and\n$CPPFLAGS\n.\nWITH_SAVE_ENV([SCRIPT])\n: Run\nSCRIPT\nwrapped with\nSAVE_ENV\nand\nRESTORE_ENV\n.\nPatch by Erlend E. Aasland.\nbpo-45573\n: Mandatory core modules, that are required to bootstrap Python,\nare now in\nModules/Setup.bootstrap\n.\nbpo-45573\n:\nconfigure\nnow creates\nModules/Setup.stdlib\nwith\nconditionally enabled/disabled extension module lines. The file is not\nused, yet.\nbpo-45573\n:\nconfigure\nnow uses a unified format to set state, compiler\nflags, and linker flags in Makefile. The new macro\nPY_STDLIB_MOD\nsets\nthree variables that are consumed by\nModules/Setup\nand\nsetup.py\n.\nbpo-45816\n: Python now supports building with Visual Studio 2022 (MSVC\nv143, VS Version 17.0). Patch by Jeremiah Vivian.\nbpo-45800\n: Settings for\npyexpat\nC extension are now detected by\nconfigure\n. The bundled\nexpat\nlibrary is built in\nMakefile\n.\nbpo-45798\n: Settings for\ndecimal\ninternal C extension are now\ndetected by\nconfigure\n. The bundled\nlibmpdec\nlibrary is built in\nMakefile\n.\nbpo-45723\n:\nconfigure\nhas a new option\n--with-pkg-config\nto\ndisable or require pkg-config.\nbpo-45774\n: The build dependencies for\nsqlite3\nare now detected by\nconfigure\nand\npkg-config\n. Patch by Erlend E. Aasland.\nbpo-45763\n: The build dependencies for\nzlib\n,\nbz2\n, and\nlzma\nare now detected by\nconfigure\n.\nbpo-45747\n: gdbm and dbm build dependencies are now detected by\nconfigure\n.\nbpo-45743\n: On macOS, the build system no longer passes\nsearch_paths_first\nto the linker. The flag has been the default since\nXcode 4 / macOS 10.6.\nbpo-45723\n:\nconfigure.ac\nis now compatible with autoconf 2.71.\nDeprecated checks\nSTDC_HEADERS\nand\nAC_HEADER_TIME\nhave been\nremoved.\nbpo-45723\n:\nconfigure\nnow prints a warning when pkg-config is missing.\nbpo-45731\n:\nconfigure\n--enable-loadable-sqlite-extensions\nis now\nhandled by new\nPY_SQLITE_ENABLE_LOAD_EXTENSION\nmacro instead of logic\nin setup.py.\nbpo-45723\n: configure.ac now uses custom helper macros and\nAC_CACHE_CHECK\nto simplify and speed up configure runs.\nbpo-45696\n: Skip the marshal step for frozen modules by generating C code\nthat produces a set of ready-to-use code objects. This speeds up startup\ntime by another 10% or more.\nbpo-45561\n: Run smelly.py tool from $(srcdir).\nWindows\n¶\nbpo-46105\n: Fixed calculation of\nsys.path\nin a venv on Windows.\nbpo-45901\n: When installed through the Microsoft Store and set as the\ndefault app for\n*.py\nfiles, command line arguments will now be\npassed to Python when invoking a script without explicitly launching\nPython (that is,\nscript.py\nargs\nrather than\npython\nscript.py\nargs\n).\nbpo-45616\n: Fix Python Launcher’s ability to distinguish between versions\n3.1 and 3.10 when either one is explicitly requested.  Previously, 3.1\nwould be used if 3.10 was requested but not installed, and 3.10 would be\nused if 3.1 was requested but 3.10 was installed.\nbpo-45850\n: Implement changes to build with deep-frozen modules on Windows.\nNote that we now require Python 3.10 as the “bootstrap” or “host” Python.\nbpo-45732\n: Updates bundled Tcl/Tk to 8.6.12.\nbpo-45720\n: Internal reference to\nshlwapi.dll\nwas dropped to help\nimprove startup time. This DLL will no longer be loaded at the start of\nevery Python process.\nmacOS\n¶\nbpo-45732\n: Update python.org macOS installer to use Tcl/Tk 8.6.12.\nC API\n¶\nbpo-39026\n: Fix Python.h to build C extensions with Xcode: remove a\nrelative include from\nInclude/cpython/pystate.h\n.\nPython 3.11.0 alpha 2\n¶\nRelease date: 2021-11-05\nCore and Builtins\n¶\nbpo-45716\n: Improve the\nSyntaxError\nmessage when using\nTrue\n,\nNone\nor\nFalse\nas keywords in a function call. Patch by Pablo\nGalindo.\nbpo-45688\n:\nsys.stdlib_module_names\nnow contains the macOS-specific\nmodule\n_scproxy\n.\nbpo-45379\n: Clarify\nImportError\nmessage when we try to explicitly\nimport a frozen module but frozen modules are disabled.\nbpo-44525\n: Specialize simple calls to Python functions (no starargs,\nkeyword dict, or closure)\nbpo-45530\n: Cases of sorting using tuples as keys may now be significantly\nfaster in some cases. Patch by Tim Peters.\nThe order of the result may differ from earlier releases if the tuple\nelements don’t define a total ordering (see\nValue comparisons\nfor information on total ordering).\nIt’s generally true that the result of sorting simply isn’t well-defined\nin the absence of a total ordering on list elements.\nbpo-45526\n: In obmalloc, set ADDRESS_BITS to not ignore any bits (ignored\n16 before). That is safer in the case that the kernel gives user-space\nvirtual addresses that span a range greater than 48 bits.\nbpo-30570\n: Fixed a crash in\nissubclass()\nfrom infinite recursion when\nsearching pathological\n__bases__\ntuples.\nbpo-45521\n: Fix a bug in the obmalloc radix tree code.  On 64-bit machines,\nthe bug causes the tree to hold 46-bits of virtual addresses, rather than\nthe intended 48-bits.\nbpo-45494\n: Fix parser crash when reporting errors involving invalid\ncontinuation characters. Patch by Pablo Galindo.\nbpo-45445\n: Python now fails to initialize if it finds an invalid\n-X\noption in the command line. Patch by Pablo Galindo.\nbpo-45340\n: Object attributes are held in an array instead of a dictionary.\nAn object’s dictionary are created lazily, only when needed. Reduces the\nmemory consumption of a typical Python object by about 30%. Patch by Mark\nShannon.\nbpo-45408\n: Fix a crash in the parser when reporting tokenizer errors that\noccur at the same time unclosed parentheses are detected. Patch by Pablo\nGalindo.\nbpo-29410\n: Add SipHash13 for string hash algorithm and use it by default.\nbpo-45385\n: Fix reference leak from descr_check. Patch by Donghee Na.\nbpo-45367\n: Specialized the\nBINARY_MULTIPLY\nopcode to\nBINARY_MULTIPLY_INT\nand\nBINARY_MULTIPLY_FLOAT\nusing the PEP 659\nmachinery.\nbpo-21736\n: Frozen stdlib modules now have\n__file__\nto the .py file\nthey would otherwise be loaded from, if possible.  For packages,\n__path__\nnow has the correct entry instead of being an empty list,\nwhich allows unfrozen submodules to be imported.  These are set only if\nthe stdlib directory is known when the runtime is initialized.  Note that\nthe file at\n__file__\nis not guaranteed to exist.  None of this affects\nnon-stdlib frozen modules nor, for now, frozen modules imported using\nPyImport_ImportFrozenModule()\n.  Also, at the moment\nco_filename\nis\nnot updated for the module.\nbpo-45020\n: For frozen stdlib modules, record the original module name as\nmodule.__spec__.loader_state.origname\n.  If the value is different than\nmodule.__spec__.name\nthen the module was defined as an alias in\nTools/scripts/freeze_modules.py.  If it is\nNone\nthen the module comes\nfrom a source file outside the stdlib.\nbpo-45324\n: In FrozenImporter.find_spec(), we now preserve the information\nneeded in exec_module() to load the module.  This change mostly impacts\ninternal details, rather than changing the importer’s behavior.\nbpo-45292\n: Implement\nPEP 654\n. Add\nExceptionGroup\nand\nBaseExceptionGroup\n. Update traceback display code.\nbpo-40116\n: Change to the implementation of split dictionaries. Classes\nwhere the instances differ either in the exact set of attributes, or in\nthe order in which those attributes are set, can still share keys. This\nshould have no observable effect on users of Python or the C-API. Patch by\nMark Shannon.\nbpo-44050\n: Extensions that indicate they use global state (by setting\nm_size\nto -1) can again be used in multiple interpreters. This reverts\nto behavior of Python 3.8.\nbpo-44525\n: Setup initial specialization infrastructure for the\nCALL_FUNCTION\nopcode. Implemented initial specializations for C\nfunction calls:\nCALL_FUNCTION_BUILTIN_O\nfor\nMETH_O\nflag.\nCALL_FUNCTION_BUILTIN_FAST\nfor\nMETH_FASTCALL\nflag without keywords.\nCALL_FUNCTION_LEN\nfor\nlen(o)\n.\nCALL_FUNCTION_ISINSTANCE\nfor\nisinstance(o,\nt)\n.\nbpo-44511\n: Improve the generated bytecode for class and mapping patterns.\nbpo-43706\n: Speed up calls to\nenumerate()\nby using the\nPEP 590\nvectorcall\ncalling convention. Patch by Donghee Na.\nLibrary\n¶\nbpo-45679\n: Fix caching of multi-value\ntyping.Literal\n.\nLiteral[True,\n2]\nis no longer equal to\nLiteral[1,\n2]\n.\nbpo-42064\n: Convert\nsqlite3\nto multi-phase initialisation (PEP 489).\nPatches by Erlend E. Aasland.\nbpo-45438\n: Fix typing.Signature string representation for generic builtin\ntypes.\nbpo-45613\n:\nsqlite3\nnow sets\nsqlite3.threadsafety\nbased on\nthe default threading mode the underlying SQLite library has been compiled\nwith. Patch by Erlend E. Aasland.\nbpo-45574\n: Fix warning about\nprint_escape\nbeing unused.\nbpo-45581\n:\nsqlite3.connect()\nnow correctly raises\nMemoryError\nif the underlying SQLite API signals memory error. Patch by Erlend E.\nAasland.\nbpo-45557\n:\npprint.pprint()\nnow handles\nunderscore_numbers\ncorrectly. Previously it was always setting it to\nFalse\n.\nbpo-44019\n: Add\noperator.call()\nto\noperator.__all__\n. Patch by\nKreusada.\nbpo-42174\n:\nshutil.get_terminal_size()\nnow falls back to sane values\nif the column or line count are 0.\nbpo-35673\n: Improve the introspectability of the\n__loader__\nattribute\nfor namespace packages.\nimportlib.machinery.NamespaceLoader\nis\nnow public, and implements the\nimportlib.abc.InspectLoader\ninterface.\n_NamespaceLoader\nis kept for backward compatibility.\nbpo-45515\n: Add references to\nzoneinfo\nin the\ndatetime\ndocumentation, mostly replacing outdated references to\ndateutil.tz\n.\nChange by Paul Ganssle.\nbpo-45475\n: Reverted optimization of iterating\ngzip.GzipFile\n,\nbz2.BZ2File\n, and\nlzma.LZMAFile\n(see\nbpo-43787\n) because\nit caused regression when user iterate them without having reference of\nthem. Patch by Inada Naoki.\nbpo-45489\n: Update\nForwardRef\nto support\n|\noperator.\nPatch by Donghee Na.\nbpo-42222\n: Removed deprecated support for float arguments in\nrandrange()\n.\nbpo-45428\n: Fix a regression in py_compile when reading filenames from\nstandard input.\nbpo-45467\n: Fix incremental decoder and stream reader in the\n“raw-unicode-escape” codec. Previously they failed if the escape sequence\nwas split.\nbpo-45461\n: Fix incremental decoder and stream reader in the\n“unicode-escape” codec. Previously they failed if the escape sequence was\nsplit.\nbpo-45239\n: Fixed\nemail.utils.parsedate_tz()\ncrashing with\nUnboundLocalError\non certain invalid input instead of returning\nNone\n. Patch by Ben Hoyt.\nbpo-45417\n: Fix quadratic behaviour in the enum module: Creation of enum\nclasses with a lot of entries was quadratic.\nbpo-45249\n: Fix the behaviour of\ntraceback.print_exc()\nwhen\ndisplaying the caret when the\nend_offset\nin the exception is set to 0.\nPatch by Pablo Galindo\nbpo-45416\n: Fix use of\nasyncio.Condition\nwith explicit\nasyncio.Lock\nobjects, which was a regression due to removal of\nexplicit loop arguments. Patch by Joongi Kim.\nbpo-20028\n: Empty escapechar/quotechar is not allowed when initializing\ncsv.Dialect\n. Patch by Vajrasky Kok and Donghee Na.\nbpo-44904\n: Fix bug in the\ndoctest\nmodule that caused it to fail if\na docstring included an example with a\nclassmethod\nproperty\n. Patch\nby Alex Waygood.\nbpo-45406\n: Make\ninspect.getmodule()\ncatch\nFileNotFoundError\nraised by\ninspect.getabsfile()\n, and return\nNone\nto indicate that\nthe module could not be determined.\nbpo-45411\n: Add extensions for files containing subtitles - .srt & .vtt -\nto the mimetypes.py module.\nbpo-10716\n: Migrated pydoc to HTML5 (without changing the look of it). Side\neffect is to update xmlrpc’s\nServerHTMLDoc\nwhich now uses the CSS too.\ncgitb now relies less on pydoc (as it can’t use the CSS file).\nbpo-27580\n: Add support of null characters in\ncsv\n.\nbpo-45262\n: Prevent use-after-free in asyncio. Make sure the cached running\nloop holder gets cleared on dealloc to prevent use-after-free in\nget_running_loop\nbpo-45386\n: Make\nxmlrpc.client\nmore robust to C runtimes where the\nunderlying C\nstrftime\nfunction results in a\nValueError\nwhen\ntesting for year formatting options.\nbpo-20028\n: Improve error message of\ncsv.Dialect\nwhen\ninitializing. Patch by Vajrasky Kok and Donghee Na.\nbpo-45343\n: Update bundled pip to 21.2.4 and setuptools to 58.1.0\nbpo-45328\n: Fixed\nhttp.client.HTTPConnection\nto work properly in\nOSs that don’t support the\nTCP_NODELAY\nsocket option.\nbpo-45243\n: Add\nsetlimit()\nand\ngetlimit()\nto\nsqlite3.Connection\nfor\nsetting and getting SQLite limits by connection basis. Patch by Erlend E.\nAasland.\nbpo-45320\n: Removed from the\ninspect\nmodule:\nthe\ngetargspec\nfunction, deprecated since Python 3.0;\nuse\ninspect.signature()\nor\ninspect.getfullargspec()\ninstead.\nthe\nformatargspec\nfunction, deprecated since Python 3.5;\nuse the\ninspect.signature()\nfunction and\nSignature\nobject\ndirectly.\nthe undocumented\nSignature.from_builtin\nand\nSignature.from_function\nfunctions, deprecated since Python 3.5; use the\nSignature.from_callable()\nmethod\ninstead.\nPatch by Hugo van Kemenade.\nbpo-45192\n: Fix the\ntempfile._infer_return_type\nfunction so that the\ndir\nargument of the\ntempfile\nfunctions accepts an object\nimplementing the\nos.PathLike\nprotocol.\nPatch by Kyungmin Lee.\nbpo-45160\n: When tracing a tkinter variable used by a ttk OptionMenu,\ncallbacks are no longer made twice.\nbpo-25625\n: Added non parallel-safe\nchdir()\ncontext\nmanager to change the current working directory and then restore it on\nexit. Simple wrapper around\nchdir()\n.\nbpo-24139\n: Add support for SQLite extended result codes in\nsqlite3.Error\n. Patch by Erlend E. Aasland.\nbpo-24444\n: Fixed an error raised in\nargparse\nhelp display when help\nfor an option is set to 1+ blank spaces or when\nchoices\narg is an empty\ncontainer.\nbpo-44547\n: Implement\nFraction.__int__\n, so that a\nfractions.Fraction\ninstance\nf\npasses an\nisinstance(f,\ntyping.SupportsInt)\ncheck.\nbpo-40321\n: Adds support for HTTP 308 redirects to\nurllib\n. See\nRFC 7538\nfor details. Patch by Jochem Schulenklopper.\nbpo-41374\n: Ensure that\nsocket.TCP_*\nconstants are exposed on Cygwin\n3.1.6 and greater.\nbpo-35970\n: Add help flag to the base64 module’s command line interface.\nPatch contributed by Robert Kuska.\nDocumentation\n¶\nbpo-45726\n: Improve documentation for\nfunctools.singledispatch()\nand\nfunctools.singledispatchmethod\n.\nbpo-45680\n: Amend the docs on\nGenericAlias\nobjects to clarify that\nnon-container classes can also implement\n__class_getitem__\n. Patch\ncontributed by Alex Waygood.\nbpo-45618\n: Update Sphinx version used to build the documentation to 4.2.0.\nPatch by Maciej Olko.\nbpo-45655\n: Add a new “relevant PEPs” section to the top of the\ndocumentation for the\ntyping\nmodule. Patch by Alex Waygood.\nbpo-45604\n: Add\nlevel\nargument to\nmultiprocessing.log_to_stderr\nfunction docs.\nbpo-45516\n: Add protocol description to the\nimportlib.abc.TraversableResources\ndocumentation.\nbpo-45464\n: Mention in the documentation of\nBuilt-in Exceptions\nthat inheriting from multiple exception types in a\nsingle subclass is not recommended due to possible memory layout\nincompatibility.\nbpo-45449\n: Add note about\nPEP 585\nin\ncollections.abc\n.\nbpo-45516\n: Add protocol description to the\nimportlib.abc.Traversable\ndocumentation.\nbpo-20692\n: Add Programming FAQ entry explaining that int literal attribute\naccess requires either a space after or parentheses around the literal.\nTests\n¶\nbpo-45678\n: Add tests for scenarios in which\nfunctools.singledispatchmethod\nis stacked on top of a method that\nhas already been wrapped by two other decorators. Patch by Alex Waygood.\nbpo-45578\n: Add tests for\ndis.distb()\nbpo-45678\n: Add tests to ensure that\nfunctools.singledispatchmethod\ncorrectly wraps the attributes of the target function.\nbpo-45668\n: PGO tests now pass when Python is built without test extension\nmodules.\nbpo-45577\n: Add subtests for all\npickle\nprotocols in\ntest_zoneinfo\n.\nbpo-45566\n: Fix\ntest_frozen_pickle\nin\ntest_dataclasses\nto check all\npickle\nversions.\nbpo-43592\n:\ntest.libregrtest\nnow raises the soft resource limit for\nthe maximum number of file descriptors when the default is too low for our\ntest suite as was often the case on macOS.\nbpo-39679\n: Add more test cases for\n@functools.singledispatchmethod\nwhen combined with\n@classmethod\nor\n@staticmethod\n.\nbpo-45410\n: When libregrtest spawns a worker process, stderr is now written\ninto stdout to keep messages order. Use a single pipe for stdout and\nstderr, rather than two pipes. Previously, messages were out of order\nwhich made analysis of buildbot logs harder Patch by Victor Stinner.\nbpo-45402\n: Fix test_tools.test_sundry() when Python is built out of tree:\nfix how the freeze_modules.py tool locates the _freeze_module program.\nPatch by Victor Stinner.\nbpo-45403\n: Fix test_sys.test_stdlib_dir() when Python is built outside the\nsource tree: compare normalized paths. Patch by Victor Stinner.\nbpo-45400\n: Fix\ntest_name_error_suggestions_do_not_trigger_for_too_many_locals() of\ntest_exceptions if a directory name contains “a1” (like\n“Python-3.11.0a1”): use a stricter regular expression. Patch by Victor\nStinner.\nbpo-10572\n: Rename\nsqlite3\ntests from\ntest_sqlite\nto\ntest_sqlite3\n, and relocate them to\nLib/test/test_sqlite3\n. Patch by\nErlend E. Aasland.\nBuild\n¶\nbpo-43158\n:\nsetup.py\nnow uses values from configure script to build the\n_uuid\nextension module. Configure now detects util-linux’s\nlibuuid\n, too.\nbpo-45666\n: Fix warning of\nswprintf\nand\n%s\nusage in\n_testembed.c\nbpo-45548\n:\nModules/Setup\nand\nModules/makesetup\nhave been improved.\nThe\nSetup\nfile now contains working rules for all extensions. Outdated\ncomments have been removed. Rules defined by\nmakesetup\ntrack\ndependencies correctly.\nbpo-45548\n: The\nmath\nand\ncmath\nimplementation now require a\nC99 compatible\nlibm\nand no longer ship with workarounds for missing\nacosh, asinh, atanh, expm1, and log1p functions.\nbpo-45595\n:\nsetup.py\nand\nmakesetup\nnow track build dependencies on\nall Python header files and module specific header files.\nbpo-45571\n:\nModules/Setup\nnow use\nPY_CFLAGS_NODIST\ninstead of\nPY_CFLAGS\nto compile shared modules.\nbpo-45570\n:\npyexpat\nand\n_elementtree\nno longer define\nobsolete macros\nHAVE_EXPAT_CONFIG_H\nand\nUSE_PYEXPAT_CAPI\n.\nXML_POOR_ENTROPY\nis now defined in\nexpat_config.h\n.\nbpo-43974\n:\nsetup.py\nno longer defines\nPy_BUILD_CORE_MODULE\n.\nInstead every module, that uses the internal API, defines the macro.\nbpo-45548\n: Fill in missing entries in Modules/Setup.\nbpo-45532\n: Update\nsys.version\nto use\nmain\nas fallback\ninformation. Patch by Jeong YunWon.\nbpo-45536\n: The\nconfigure\nscript now checks whether OpenSSL headers and\nlibraries provide required APIs. Most common APIs are verified. The check\ndetects outdated or missing OpenSSL. Failures do not stop configure.\nbpo-45221\n: Fixed regression in handling of\nLDFLAGS\nand\nCPPFLAGS\noptions where\nargparse.parse_known_args()\ncould interpret an option\nas one of the built-in command line argument, for example\n-h\nfor help.\nbpo-45440\n: Building Python now requires a C99\n<math.h>\nheader file\nproviding the following functions:\ncopysign()\n,\nhypot()\n,\nisfinite()\n,\nisinf()\n,\nisnan()\n,\nround()\n. Patch by Victor\nStinner.\nbpo-45405\n: Prevent\ninternal\nconfigure\nerror\nwhen running\nconfigure\nwith recent versions of non-Apple clang.  Patch by David Bohman.\nbpo-45433\n: Avoid linking libpython with libcrypt.\nWindows\n¶\nbpo-43652\n: Update Tcl/Tk to 8.6.11, actually this time. The previous\nupdate incorrectly included 8.6.10.\nbpo-45337\n: venv now warns when the created environment may need to be\naccessed at a different path, due to redirections, links or junctions. It\nalso now correctly installs or upgrades components when the alternate path\nis required.\nbpo-43851\n: Build SQLite\nSQLITE_OMIT_AUTOINIT\non Windows. Patch by\nErlend E. Aasland.\nmacOS\n¶\nbpo-44828\n: Avoid tkinter file dialog failure on macOS 12 Monterey when\nusing the Tk 8.6.11 provided by python.org macOS installers. Patch by Marc\nCuller of the Tk project.\nIDLE\n¶\nbpo-45495\n: Add context keywords ‘case’ and ‘match’ to completions list.\nC API\n¶\nbpo-29103\n:\nPyType_FromSpec*\nnow\ncopies the class name from the spec to a buffer owned by the class, so the\noriginal can be safely deallocated. Patch by Petr Viktorin.\nbpo-45522\n: The internal freelists for frame, float, list, dict, async\ngenerators, and context objects can now be disabled.\nbpo-35134\n: Exclude\nPyWeakref_GET_OBJECT()\nfrom the limited C API.\nIt never worked since the\nPyWeakReference\nstructure is opaque\nin the limited C API.\nbpo-35081\n: Move the\ninterpreteridobject.h\nheader file from\nInclude/\nto\nInclude/internal/\n. It only provides private functions.\nPatch by Victor Stinner.\nbpo-35134\n: The non-limited API files\ncellobject.h\n,\nclassobject.h\n,\ncontext.h\n,\nfuncobject.h\n,\ngenobject.h\nand\nlongintrepr.h\nhave been moved to the\nInclude/cpython\ndirectory. Moreover, the\neval.h\nheader file was removed. These files must not be included\ndirectly, as they are already included in\nPython.h\n:\nInclude\nFiles\n. If they have been included directly, consider\nincluding\nPython.h\ninstead. Patch by Victor Stinner.\nbpo-45474\n: The following items are no longer available when\nPy_LIMITED_API\nis defined:\nPyMarshal_WriteLongToFile()\nPyMarshal_WriteObjectToFile()\nPyMarshal_ReadObjectFromString()\nPyMarshal_WriteObjectToString()\nthe\nPy_MARSHAL_VERSION\nmacro\nThese are not part of the\nlimited API\n.\nPatch by Victor Stinner.\nbpo-45434\n: Remove the\npystrhex.h\nheader file. It only contains private\nfunctions. C extensions should only include the main\n<Python.h>\nheader\nfile. Patch by Victor Stinner.\nbpo-45440\n: Remove the\nPy_FORCE_DOUBLE()\nmacro. It was used by the\nPy_IS_INFINITY()\nmacro. Patch by Victor Stinner.\nbpo-45434\n:\n<Python.h>\nno longer includes the header files\n<stdlib.h>\n,\n<stdio.h>\n,\n<errno.h>\nand\n<string.h>\nwhen the\nPy_LIMITED_API\nmacro is set to\n0x030b0000\n(Python 3.11) or higher.\nC extensions should explicitly include the header files after\n#include\n<Python.h>\n. Patch by Victor Stinner.\nbpo-41123\n: Remove\nPy_UNICODE_COPY()\nand\nPy_UNICODE_FILL()\nmacros,\ndeprecated since Python 3.3. Use\nPyUnicode_CopyCharacters()\nor\nmemcpy()\n(\nwchar_t*\nstring), and\nPyUnicode_Fill()\nfunctions\ninstead. Patch by Victor Stinner.\nbpo-45412\n: Remove the following math macros using the\nerrno\nvariable:\nPy_ADJUST_ERANGE1()\nPy_ADJUST_ERANGE2()\nPy_OVERFLOWED()\nPy_SET_ERANGE_IF_OVERFLOW()\nPy_SET_ERRNO_ON_MATH_ERROR()\nPatch by Victor Stinner.\nbpo-45395\n: Custom frozen modules (the array set to\nPyImport_FrozenModules\n) are now treated as additions, rather than\nreplacing all the default frozen modules. Frozen stdlib modules can still\nbe disabled by setting the “code” field of the custom array entry to NULL.\nbpo-43760\n: Add new\nPyThreadState_EnterTracing()\n, and\nPyThreadState_LeaveTracing()\nfunctions to the limited C API to\nsuspend and resume tracing and profiling. Patch by Victor Stinner.\nbpo-44220\n:\nPyStructSequence_UnnamedField\nis added to the Stable\nABI.\nPython 3.11.0 alpha 1\n¶\nRelease date: 2021-10-05\nSecurity\n¶\nbpo-42278\n: Replaced usage of\ntempfile.mktemp()\nwith\nTemporaryDirectory\nto avoid a potential race condition.\nbpo-44600\n: Fix incorrect line numbers while tracing some failed patterns\nin\nmatch\nstatements. Patch by Charles Burkland.\nbpo-41180\n: Add auditing events to the\nmarshal\nmodule, and stop\nraising\ncode.__init__\nevents for every unmarshalled code object.\nDirectly instantiated code objects will continue to raise an event, and\naudit event handlers should inspect or collect the raw marshal data. This\nreduces a significant performance overhead when loading from\n.pyc\nfiles.\nbpo-44394\n: Update the vendored copy of libexpat to 2.4.1 (from 2.2.8) to\nget the fix for the\nCVE 2013-0340\n“Billion Laughs” vulnerability. This\ncopy is most used on Windows and macOS.\nbpo-43124\n: Made the internal\nputcmd\nfunction in\nsmtplib\nsanitize input for presence of\n\\r\nand\n\\n\ncharacters to avoid\n(unlikely) command injection.\nbpo-44022\n:\nhttp.client\nnow avoids infinitely reading potential HTTP\nheaders after a\n100\nContinue\nstatus response from the server.\nCore and Builtins\n¶\nbpo-43760\n: The number of hardware branches per instruction dispatch is\nreduced from two to one by adding a special instruction for tracing. Patch\nby Mark Shannon.\nbpo-45061\n: Add a deallocator to the bool type to detect refcount bugs in C\nextensions which call Py_DECREF(Py_True) or Py_DECREF(Py_False) by\nmistake. Detect also refcount bugs when the empty tuple singleton or the\nUnicode empty string singleton is destroyed by mistake. Patch by Victor\nStinner.\nbpo-24076\n: sum() was further optimised for summing up single digit\nintegers.\nbpo-45190\n: Update Unicode databases to Unicode 14.0.0.\nbpo-45167\n: Fix deepcopying of\ntypes.GenericAlias\nobjects.\nbpo-45155\n:\nint.to_bytes()\nand\nint.from_bytes()\nnow take a\ndefault value of\n\"big\"\nfor the\nbyteorder\nargument.\nint.to_bytes()\nalso takes a default value of\n1\nfor the\nlength\nargument.\nbpo-44219\n: Release the GIL while performing\nisatty\nsystem calls on\narbitrary file descriptors. In particular, this affects\nos.isatty()\n,\nos.device_encoding()\nand\nio.TextIOWrapper\n. By extension,\nio.open()\nin text mode is also affected. This change solves a\ndeadlock in\nos.isatty()\n. Patch by Vincent Michel in\nbpo-44219\n.\nbpo-44959\n: Added fallback to extension modules with ‘.sl’ suffix on HP-UX\nbpo-45121\n: Fix issue where\nProtocol.__init__\nraises\nRecursionError\nwhen it’s called directly or via\nsuper()\n. Patch provided by Yurii\nKarabas.\nbpo-44348\n: The deallocator function of the\nBaseException\ntype now\nuses the trashcan mechanism to prevent stack overflow. For example, when a\nRecursionError\ninstance is raised, it can be linked to another\nRecursionError through the\n__context__\nattribute or the\n__traceback__\nattribute, and then a chain of exceptions is created.\nWhen the chain is destroyed, nested deallocator function calls can crash\nwith a stack overflow if the chain is too long compared to the available\nstack memory. Patch by Victor Stinner.\nbpo-45123\n: Fix PyAiter_Check to only check for the __anext__ presence (not\nfor __aiter__). Rename PyAiter_Check to PyAIter_Check, PyObject_GetAiter\n-> PyObject_GetAIter.\nbpo-1514420\n: Interpreter no longer attempts to open files with names in\nangle brackets (like “<string>” or “<stdin>”) when formatting an\nexception.\nbpo-41031\n: Match C and Python code formatting of unprintable exceptions\nand exceptions in the\n__main__\nmodule.\nbpo-37330\n:\nopen()\n,\nio.open()\n,\ncodecs.open()\nand\nfileinput.FileInput\nno longer accept\n'U'\n(“universal\nnewline”) in the file mode. This flag was deprecated since Python 3.3.\nPatch by Victor Stinner.\nbpo-45083\n: When the interpreter renders an exception, its name now has a\ncomplete qualname. Previously only the class name was concatenated to the\nmodule name, which sometimes resulted in an incorrect full name being\ndisplayed.\n(This issue impacted only the C code exception rendering, the\ntraceback\nmodule was using qualname already).\nbpo-34561\n: List sorting now uses the merge-ordering strategy from Munro\nand Wild’s\npowersort()\n. Unlike the former strategy, this is provably\nnear-optimal in the entropy of the distribution of run lengths. Most uses\nof\nlist.sort()\nprobably won’t see a significant time difference, but\nmay see significant improvements in cases where the former strategy was\nexceptionally poor. However, as these are all fast linear-time\napproximations to a problem that’s inherently at best quadratic-time to\nsolve truly optimally, it’s also possible to contrive cases where the\nformer strategy did better.\nbpo-45056\n: Compiler now removes trailing unused constants from co_consts.\nbpo-45020\n: Add a new command line option, “-X frozen_modules=[on|off]” to\nopt out of (or into) using optional frozen modules.  This defaults to “on”\n(or “off” if it’s running out of the source tree).\nbpo-45012\n: In\nposix\n, release GIL during\nstat()\n,\nlstat()\n,\nand\nfstatat()\nsyscalls made by\nos.DirEntry.stat()\n. Patch by\nStanisław Skonieczny.\nbpo-45018\n: Fixed pickling of range iterators that iterated for over\n2**32\ntimes.\nbpo-45000\n: A\nSyntaxError\nis now raised when trying to delete\n__debug__\n. Patch by Donghee Na.\nbpo-44963\n: Implement\nsend()\nand\nthrow()\nmethods for\nanext_awaitable\nobjects. Patch by Pablo Galindo.\nbpo-44962\n: Fix a race in WeakKeyDictionary, WeakValueDictionary and\nWeakSet when two threads attempt to commit the last pending removal. This\nfixes asyncio.create_task and fixes a data loss in asyncio.run where\nshutdown_asyncgens is not run\nbpo-24234\n: Implement the\n__bytes__()\nspecial method on the\nbytes\ntype, so a bytes object\nb\npasses an\nisinstance(b,\ntyping.SupportsBytes)\ncheck.\nbpo-24234\n: Implement the\n__complex__()\nspecial method on the\ncomplex\ntype, so a complex number\nz\npasses an\nisinstance(z,\ntyping.SupportsComplex)\ncheck.\nbpo-44954\n: Fixed a corner case bug where the result of\nfloat.fromhex('0x.8p-1074')\nwas rounded the wrong way.\nbpo-44947\n: Refine the syntax error for trailing commas in import\nstatements. Patch by Pablo Galindo.\nbpo-44945\n: Specialize the BINARY_ADD instruction using the PEP 659\nmachinery. Adds five new instructions:\nBINARY_ADD_ADAPTIVE\nBINARY_ADD_FLOAT\nBINARY_ADD_INT\nBINARY_ADD_UNICODE\nBINARY_ADD_UNICODE_INPLACE_FAST\nbpo-44929\n: Fix some edge cases of\nenum.Flag\nstring representation in\nthe REPL. Patch by Pablo Galindo.\nbpo-44914\n: Class version tags are no longer recycled.\nThis means that a version tag serves as a unique identifier for the state\nof a class. We rely on this for effective specialization of the LOAD_ATTR\nand other instructions.\nbpo-44698\n: Restore behaviour of complex exponentiation with integer-valued\nexponent of type\nfloat\nor\ncomplex\n.\nbpo-44895\n: A debug variable\nPYTHONDUMPREFSFILE\nis added for\ncreating a dump file which is generated by\n--with-trace-refs\n.\nPatch by Donghee Na.\nbpo-44900\n: Add five superinstructions for PEP 659 quickening:\nLOAD_FAST LOAD_FAST\nSTORE_FAST LOAD_FAST\nLOAD_FAST LOAD_CONST\nLOAD_CONST LOAD_FAST\nSTORE_FAST STORE_FAST\nbpo-44889\n: Initial implementation of adaptive specialization of\nLOAD_METHOD\n. The following specialized forms were added:\nLOAD_METHOD_CACHED\nLOAD_METHOD_MODULE\nLOAD_METHOD_CLASS\nbpo-44890\n: Specialization stats are always collected in debug builds.\nbpo-44885\n: Correct the ast locations of f-strings with format specs and\nrepeated expressions. Patch by Pablo Galindo\nbpo-44878\n: Remove the loop from the bytecode interpreter. All instructions\nend with a DISPATCH macro, so the loop is now redundant.\nbpo-44878\n: Remove switch statement for interpreter loop when using\ncomputed gotos. This makes sure that we only have one dispatch table in\nthe interpreter.\nbpo-44874\n: Deprecate the old trashcan macros\n(\nPy_TRASHCAN_SAFE_BEGIN\n/\nPy_TRASHCAN_SAFE_END\n). They should be\nreplaced by the new macros\nPy_TRASHCAN_BEGIN\nand\nPy_TRASHCAN_END\n.\nbpo-44872\n: Use new trashcan macros (Py_TRASHCAN_BEGIN/END) in\nframeobject.c instead of the old ones (Py_TRASHCAN_SAFE_BEGIN/END).\nbpo-33930\n: Fix segmentation fault with deep recursion when cleaning method\nobjects. Patch by Augusto Goulart and Pablo Galindo.\nbpo-25782\n: Fix bug where\nPyErr_SetObject\nhangs when the current\nexception has a cycle in its context chain.\nbpo-44856\n: Fix reference leaks in the error paths of\nupdate_bases()\nand\n__build_class__\n. Patch by Pablo Galindo.\nbpo-44826\n: Initial implementation of adaptive specialization of STORE_ATTR\nThree specialized forms of STORE_ATTR are added:\nSTORE_ATTR_SLOT\nSTORE_ATTR_SPLIT_KEYS\nSTORE_ATTR_WITH_HINT\nbpo-44838\n: Fixed a bug that was causing the parser to raise an incorrect\ncustom\nSyntaxError\nfor invalid ‘if’ expressions. Patch by Pablo\nGalindo.\nbpo-44821\n: Create instance dictionaries (__dict__) eagerly, to improve\nregularity of object layout and assist specialization.\nbpo-44792\n: Improve syntax errors for if expressions. Patch by Miguel Brito\nbpo-34013\n: Generalize the invalid legacy statement custom error message\n(like the one generated when “print” is called without parentheses) to\ninclude more generic expressions. Patch by Pablo Galindo\nbpo-44732\n: Rename\ntypes.Union\nto\ntypes.UnionType\n.\nbpo-44725\n: Expose specialization stats in python via\n_opcode.get_specialization_stats()\n.\nbpo-44717\n: Improve AttributeError on circular imports of submodules.\nbpo-44698\n: Fix undefined behaviour in complex object exponentiation.\nbpo-44653\n: Support\ntyping\ntypes in parameter substitution in the\nunion type.\nbpo-44676\n: Add ability to serialise\ntypes.Union\nobjects. Patch\nprovided by Yurii Karabas.\nbpo-44633\n: Parameter substitution of the union type with wrong types now\nraises\nTypeError\ninstead of returning\nNotImplemented\n.\nbpo-44661\n: Update\nproperty_descr_set\nto use vectorcall if possible.\nPatch by Donghee Na.\nbpo-44662\n: Add\n__module__\nto\ntypes.Union\n. This also fixes\ntypes.Union\nissues with\ntyping.Annotated\n. Patch provided by Yurii\nKarabas.\nbpo-44655\n: Include the name of the type in unset __slots__ attribute\nerrors. Patch by Pablo Galindo\nbpo-44655\n: Don’t include a missing attribute with the same name as the\nfailing one when offering suggestions for missing attributes. Patch by\nPablo Galindo\nbpo-44646\n: Fix the hash of the union type: it no longer depends on the\norder of arguments.\nbpo-44636\n: Collapse union of equal types. E.g. the result of\nint\n|\nint\nis now\nint\n. Fix comparison of the union type with non-hashable\nobjects. E.g.\nint\n|\nstr\n==\n{}\nno longer raises a TypeError.\nbpo-44611\n: On Windows,\nos.urandom()\n: uses BCryptGenRandom API\ninstead of CryptGenRandom API which is deprecated from Microsoft Windows\nAPI. Patch by Donghee Na.\nbpo-44635\n: Convert\nNone\nto\ntype(None)\nin the union type\nconstructor.\nbpo-26280\n: Implement adaptive specialization for BINARY_SUBSCR\nThree specialized forms of BINARY_SUBSCR are added:\nBINARY_SUBSCR_LIST_INT\nBINARY_SUBSCR_TUPLE_INT\nBINARY_SUBSCR_DICT\nbpo-44589\n: Mapping patterns in\nmatch\nstatements with two or more equal\nliteral keys will now raise a\nSyntaxError\nat compile-time.\nbpo-44606\n: Fix\n__instancecheck__\nand\n__subclasscheck__\nfor the\nunion type.\nbpo-42073\n: The\n@classmethod\ndecorator can now wrap other\nclassmethod-like descriptors.\nbpo-41972\n: Tuned the string-searching algorithm of fastsearch.h to have a\nshorter inner loop for most cases.\nbpo-44590\n: All necessary data for executing a Python function (local\nvariables, stack, etc) is now kept in a per-thread stack. Frame objects\nare lazily allocated on demand. This increases performance by about 7% on\nthe standard benchmark suite. Introspection and debugging are unaffected\nas frame objects are always available when needed. Patch by Mark Shannon.\nbpo-44584\n: The threading debug (\nPYTHONTHREADDEBUG\nenvironment\nvariable) is deprecated in Python 3.10 and will be removed in Python 3.12.\nThis feature requires a debug build of Python. Patch by Victor Stinner.\nbpo-43895\n: An obsolete internal cache of shared object file handles added\nin 1995 that attempted, but did not guarantee, that a .so would not be\ndlopen’ed twice to work around flaws in mid-1990s posix-ish operating\nsystems has been removed from dynload_shlib.c.\nbpo-44490\n:\ntyping\nnow searches for type parameters in\ntypes.Union\nobjects.\nget_type_hints\nwill also properly resolve\nannotations with nested\ntypes.Union\nobjects. Patch provided by Yurii\nKarabas.\nbpo-43950\n: Code objects can now provide the column information for\ninstructions when available. This is levaraged during traceback printing\nto show the expressions responsible for errors.\nContributed by Pablo Galindo, Batuhan Taskaya and Ammar Askar as part of\nPEP 657\n.\nbpo-44562\n: Remove uses of\nPyObject_GC_Del()\nin error path when\ninitializing\ntypes.GenericAlias\n.\nbpo-41486\n: Fix a memory consumption and copying performance regression in\nearlier 3.10 beta releases if someone used an output buffer larger than\n4GiB with zlib.decompress on input data that expands that large.\nbpo-43908\n: Heap types with the\nPy_TPFLAGS_IMMUTABLETYPE\nflag\ncan now inherit the\nPEP 590\nvectorcall protocol.  Previously, this was\nonly possible for\nstatic types\n.  Patch by Erlend E.\nAasland.\nbpo-44553\n: Implement GC methods for\ntypes.Union\nto break reference\ncycles and prevent memory leaks.\nbpo-44490\n: Add\n__parameters__\nattribute and\n__getitem__\noperator\nto\ntypes.Union\n. Patch provided by Yurii Karabas.\nbpo-44523\n: Remove the pass-through for\nhash()\nof\nweakref.proxy\nobjects to prevent unintended consequences when the\noriginal referred object dies while the proxy is part of a hashable\nobject. Patch by Pablo Galindo.\nbpo-44483\n: Fix a crash in\ntypes.Union\nobjects when creating a union of\nan object with bad\n__module__\nfield.\nbpo-44486\n: Modules will always have a dictionary, even when created by\ntypes.ModuleType.__new__()\nbpo-44472\n: Fix ltrace functionality when exceptions are raised. Patch by\nPablo Galindo\nbpo-12022\n: A\nTypeError\nis now raised instead of an\nAttributeError\nin\nwith\nand\nasync\nwith\nstatements for objects which do not support the\ncontext manager\nor\nasynchronous context manager\nprotocols correspondingly.\nbpo-44297\n: Make sure that the line number is set when entering a\ncomprehension scope. This ensures that backtraces including generator\nexpressions show the correct line number.\nbpo-44456\n: Improve the syntax error when mixing positional and keyword\npatterns. Patch by Pablo Galindo.\nbpo-44409\n: Fix error location information for tokenizer errors raised on\ninitialization of the tokenizer. Patch by Pablo Galindo.\nbpo-44396\n: Fix a possible crash in the tokenizer when raising syntax\nerrors for unclosed strings. Patch by Pablo Galindo.\nbpo-44376\n: Exact integer exponentiation (like\ni**2\nor\npow(i,\n2)\n)\nwith a small exponent is much faster, due to reducing overhead in such\ncases.\nbpo-44313\n: Directly imported objects and modules (through import and from\nimport statements) don’t generate\nLOAD_METHOD\n/\nCALL_METHOD\nfor\ndirectly accessed objects on their namespace. They now use the regular\nLOAD_ATTR\n/\nCALL_FUNCTION\n.\nbpo-44338\n: Implement adaptive specialization for LOAD_GLOBAL\nTwo specialized forms of LOAD_GLOBAL are added:\nLOAD_GLOBAL_MODULE\nLOAD_GLOBAL_BUILTIN\nbpo-44368\n: Improve syntax errors for invalid “as” targets. Patch by Pablo\nGalindo\nbpo-44349\n: Fix an edge case when displaying text from files with encoding\nin syntax errors. Patch by Pablo Galindo.\nbpo-44337\n: Initial implementation of adaptive specialization of LOAD_ATTR\nFour specialized forms of LOAD_ATTR are added:\nLOAD_ATTR_SLOT\nLOAD_ATTR_SPLIT_KEYS\nLOAD_ATTR_WITH_HINT\nLOAD_ATTR_MODULE\nbpo-44335\n: Fix a regression when identifying incorrect characters in\nsyntax errors. Patch by Pablo Galindo\nbpo-43693\n: Computation of the offsets of cell variables is done in the\ncompiler instead of at runtime. This reduces the overhead of handling cell\nand free variables, especially in the case where a variable is both an\nargument and cell variable.\nbpo-44317\n: Improve tokenizer error with improved locations. Patch by Pablo\nGalindo.\nbpo-44304\n: Fix a crash in the\nsqlite3\nmodule that happened when the\ngarbage collector clears\nsqlite.Statement\nobjects. Patch by Pablo\nGalindo\nbpo-44305\n: Improve error message for\ntry\nblocks without\nexcept\nor\nfinally\nblocks. Patch by Pablo Galindo.\nbpo-43413\n: Constructors of subclasses of some builtin classes (e.g.\ntuple\n,\nlist\n,\nfrozenset\n) no longer accept\narbitrary keyword arguments. [reverted in 3.11a4] Subclass of\nset\ncan now define a\n__new__()\nmethod with additional keyword parameters\nwithout overriding also\n__init__()\n.\nbpo-43667\n: Improve Unicode support in non-UTF locales on Oracle Solaris.\nThis issue does not affect other Solaris systems.\nbpo-43693\n: A new opcode MAKE_CELL has been added that effectively moves\nsome of the work done on function entry into the compiler and into the\neval loop.  In addition to creating the required cell objects, the new\nopcode converts relevant arguments (and other locals) to cell variables on\nfunction entry.\nbpo-44232\n: Fix a regression in\ntype()\nwhen a metaclass raises an\nexception. The C function\ntype_new()\nmust properly report the\nexception when a metaclass constructor raises an exception and the winner\nclass is not the metaclass. Patch by Victor Stinner.\nbpo-44201\n: Avoid side effects of checking for specialized syntax errors in\nthe REPL that was causing it to ask for extra tokens after a syntax error\nhad been detected. Patch by Pablo Galindo\nbpo-43693\n:\nPyCodeObject\ngained\nco_fastlocalnames\nand\nco_fastlocalkinds\nas the authoritative source of fast locals info.\nMarshaled code objects have changed accordingly.\nbpo-44184\n: Fix a crash at Python exit when a deallocator function removes\nthe last strong reference to a heap type. Patch by Victor Stinner.\nbpo-44187\n: Implement quickening in the interpreter. This offers no\nadvantages as yet, but is an enabler of future optimizations. See PEP 659\nfor full explanation.\nbpo-44180\n: The parser doesn’t report generic syntax errors that happen in\na position further away that the one it reached in the first pass. Patch\nby Pablo Galindo\nbpo-44168\n: Fix error message in the parser involving keyword arguments\nwith invalid expressions. Patch by Pablo Galindo\nbpo-44156\n: String caches in\ncompile.c\nare now subinterpreter\ncompatible.\nbpo-44143\n: Fixed a crash in the parser that manifest when raising\ntokenizer errors when an existing exception was present. Patch by Pablo\nGalindo.\nbpo-44032\n: Move ‘fast’ locals and other variables from the frame object to\na per-thread datastack.\nbpo-44114\n: Fix incorrect dictkeys_reversed and dictitems_reversed function\nsignatures in C code, which broke webassembly builds.\nbpo-44110\n: Improve\nstr.__getitem__()\nerror message\nbpo-26110\n: Add\nCALL_METHOD_KW\nopcode to speed up method calls with\nkeyword arguments.  Idea originated from PyPy.  A side effect is executing\nCALL_METHOD\nis now branchless in the evaluation loop.\nbpo-28307\n: Compiler now optimizes simple C-style formatting with literal\nformat containing only format codes %s, %r and %a by converting them to\nf-string expressions.\nbpo-43149\n: Correct the syntax error message regarding multiple exception\ntypes to not refer to “exception groups”. Patch by Pablo Galindo\nbpo-43822\n: The parser will prioritize tokenizer errors over custom syntax\nerrors when raising exceptions. Patch by Pablo Galindo.\nbpo-40222\n: “Zero cost” exception handling.\nUses a lookup table to determine how to handle exceptions.\nRemoves SETUP_FINALLY and POP_TOP block instructions, eliminating the runtime overhead of try statements.\nReduces the size of the frame object by about 60%.\nPatch by Mark Shannon\nbpo-43918\n: Document the signature and\ndefault\nargument in the\ndocstring of the new\nanext\nbuiltin.\nbpo-43833\n: Emit a deprecation warning if the numeric literal is\nimmediately followed by one of keywords: and, else, for, if, in, is, or.\nRaise a syntax error with more informative message if it is immediately\nfollowed by other keyword or identifier.\nbpo-43879\n: Add native_thread_id to PyThreadState. Patch by Gabriele N.\nTornetta.\nbpo-43693\n: Compute cell offsets relative to locals in compiler. Allows the\ninterpreter to treats locals and cells a single array, which is slightly\nmore efficient. Also make the LOAD_CLOSURE opcode an alias for LOAD_FAST.\nPreserving LOAD_CLOSURE helps keep bytecode a bit more readable.\nbpo-17792\n: More accurate error messages for access of unbound locals or\nfree vars.\nbpo-28146\n: Fix a confusing error message in\nstr.format()\n.\nbpo-11105\n: When compiling\nast.AST\nobjects with recursive\nreferences through\ncompile()\n, the interpreter doesn’t crash anymore\ninstead it raises a\nRecursionError\n.\nbpo-39091\n: Fix crash when using passing a non-exception to a generator’s\nthrow()\nmethod. Patch by Noah Oxer\nbpo-33346\n: Asynchronous comprehensions are now allowed inside\ncomprehensions in asynchronous functions.  Outer comprehensions implicitly\nbecome asynchronous.\nLibrary\n¶\nbpo-45371\n: Fix clang rpath issue in\ndistutils\n. The UnixCCompiler now\nuses correct clang option to add a runtime library directory (rpath) to a\nshared library.\nbpo-45329\n: Fix freed memory access in\npyexpat.xmlparser\nwhen\nbuilding it with an installed expat library <= 2.2.0.\nbpo-41710\n: On Unix, if the\nsem_clockwait()\nfunction is available in\nthe C library (glibc 2.30 and newer), the\nthreading.Lock.acquire()\nmethod now uses the monotonic clock (\ntime.CLOCK_MONOTONIC\n) for\nthe timeout, rather than using the system clock\n(\ntime.CLOCK_REALTIME\n), to not be affected by system clock\nchanges. Patch by Victor Stinner.\nbpo-1596321\n: Fix the\nthreading._shutdown()\nfunction when the\nthreading\nmodule was imported first from a thread different than\nthe main thread: no longer log an error at Python exit.\nbpo-45274\n: Fix a race condition in the\nThread.join()\nmethod of the\nthreading\nmodule. If the\nfunction is interrupted by a signal and the signal handler raises an\nexception, make sure that the thread remains in a consistent state to\nprevent a deadlock. Patch by Victor Stinner.\nbpo-21302\n: In Unix operating systems,\ntime.sleep()\nnow uses the\nnanosleep()\nfunction, if\nclock_nanosleep()\nis not available but\nnanosleep()\nis available.\nnanosleep()\nallows to sleep with\nnanosecond precision.\nbpo-21302\n: On Windows,\ntime.sleep()\nnow uses a waitable timer which\nhas a resolution of 100 nanoseconds (10\n-7\nseconds). Previously,\nit had a resolution of 1 millisecond (10\n-3\nseconds). Patch by\nBenjamin Szőke and Victor Stinner.\nbpo-45238\n: Fix\nunittest.IsolatedAsyncioTestCase.debug()\n: it runs now\nasynchronous methods and callbacks.\nbpo-36674\n:\nunittest.TestCase.debug()\nraises now a\nunittest.SkipTest\nif the class or the test method are decorated\nwith the skipping decorator.\nbpo-45235\n: Fix an issue where argparse would not preserve values in a\nprovided namespace when using a subparser with defaults.\nbpo-45183\n: Have zipimport.zipimporter.find_spec() not raise an exception\nwhen the underlying zip file has been deleted and the internal cache has\nbeen reset via invalidate_cache().\nbpo-45234\n: Fixed a regression in\ncopyfile()\n,\ncopy()\n,\ncopy2()\nraising\nFileNotFoundError\nwhen source is a directory, which should raise\nIsADirectoryError\nbpo-45228\n: Fix stack buffer overflow in parsing J1939 network address.\nbpo-45225\n: use map function instead of genexpr in capwords.\nbpo-42135\n: Fix typo:\nimportlib.find_loader\nis really slated for\nremoval in Python 3.12 not 3.10, like the others in PR 25169.\nPatch by Hugo van Kemenade.\nbpo-20524\n: Improves error messages on\n.format()\noperation for\nstr\n,\nfloat\n,\nint\n, and\ncomplex\n. New format now shows the problematic\npattern and the object type.\nbpo-45168\n: Change\ndis.dis()\noutput to omit op arg values that cannot\nbe resolved due to\nco_consts\n,\nco_names\netc not being provided.\nPreviously the oparg itself was repeated in the value field, which is not\nuseful and can be confusing.\nbpo-21302\n: In Unix operating systems,\ntime.sleep()\nnow uses the\nclock_nanosleep()\nfunction, if available, which allows to sleep for an\ninterval specified with nanosecond precision.\nbpo-45173\n: Remove from the\nconfigparser\nmodule: the\nSafeConfigParser\nclass, the\nfilename\nproperty of the\nParsingError\nclass, the\nreadfp()\nmethod of\nthe\nConfigParser\nclass, deprecated since Python\n3.2.\nPatch by Hugo van Kemenade.\nbpo-44987\n: Pure ASCII strings are now normalized in constant time by\nunicodedata.normalize()\n. Patch by Donghee Na.\nbpo-35474\n: Calling\nmimetypes.guess_all_extensions()\nwith\nstrict=False\nno longer affects the result of the following call with\nstrict=True\n. Also, mutating the returned list no longer affects the\nglobal state.\nbpo-45166\n:\ntyping.get_type_hints()\nnow works with\nFinal\nwrapped in\nForwardRef\n.\nbpo-45162\n: Remove many old deprecated\nunittest\nfeatures:\n“\nfail*\n” and “\nassert*\n” aliases of\nTestCase\nmethods.\nBroken from start\nTestCase\nmethod\nassertDictContainsSubset()\n.\nIgnored\n<unittest.TestLoader.loadTestsFromModule>\nTestLoader.loadTestsFromModule()\nparameter\nuse_load_tests\n.\nOld alias\n_TextTestResult\nof\nTextTestResult\n.\nbpo-38371\n: Remove the deprecated\nsplit()\nmethod of\n_tkinter.TkappType\n. Patch by Erlend E. Aasland.\nbpo-20499\n: Improve the speed and accuracy of statistics.pvariance().\nbpo-45132\n: Remove\n__getitem__()\nmethods of\nxml.dom.pulldom.DOMEventStream\n,\nwsgiref.util.FileWrapper\nand\nfileinput.FileInput\n, deprecated since Python 3.9.\nPatch by Hugo van Kemenade.\nbpo-45129\n: Due to significant security concerns, the\nreuse_address\nparameter of\nasyncio.loop.create_datagram_endpoint()\n, disabled in\nPython 3.9, is now entirely removed. This is because of the behavior of\nthe socket option\nSO_REUSEADDR\nin UDP.\nPatch by Hugo van Kemenade.\nbpo-45124\n: The\nbdist_msi\ncommand, deprecated in Python 3.9, is now\nremoved.\nUse\nbdist_wheel\n(wheel packages) instead.\nPatch by Hugo van Kemenade.\nbpo-30856\n:\nunittest.TestResult\nmethods\naddFailure()\n,\naddError()\n,\naddSkip()\nand\naddSubTest()\nare now called immediately after\nraising an exception in test or finishing a subtest. Previously they were\ncalled only after finishing the test clean up.\nbpo-45034\n: Changes how error is formatted for\nstruct.pack\nwith\n'H'\nand\n'h'\nmodes and too large / small numbers. Now it shows the actual\nnumeric limits, while previously it was showing arithmetic expressions.\nbpo-25894\n:\nunittest\nnow always reports skipped and failed subtests\nseparately: separate characters in default mode and separate lines in\nverbose mode. Also the test description is now output for errors in test\nmethod, class and module cleanups.\nbpo-45081\n: Fix issue when dataclasses that inherit from\ntyping.Protocol\nsubclasses have wrong\n__init__\n. Patch provided by\nYurii Karabas.\nbpo-45085\n: The\nbinhex\nmodule, deprecated in Python 3.9, is now\nremoved. The following\nbinascii\nfunctions, deprecated in Python\n3.9, are now also removed:\na2b_hqx()\n,\nb2a_hqx()\n;\nrlecode_hqx()\n,\nrledecode_hqx()\n.\nThe\nbinascii.crc_hqx()\nfunction remains available.\nPatch by Victor Stinner.\nbpo-40360\n: The\nlib2to3\npackage is now deprecated and may not be\nable to parse Python 3.10 or newer. See the\nPEP 617\n(New PEG parser for\nCPython). Patch by Victor Stinner.\nbpo-45075\n: Rename\ntraceback.StackSummary.format_frame()\nto\ntraceback.StackSummary.format_frame_summary()\n. This method was added\nfor 3.11 so it was not released yet.\nUpdated code and docs to better distinguish frame and FrameSummary.\nbpo-31299\n: Add option to completely drop frames from a traceback by\nreturning\nNone\nfrom a\nformat_frame()\noverride.\nbpo-41620\n:\nrun()\nnow always return a\nTestResult\ninstance. Previously it returned\nNone\nif\nthe test class or method was decorated with a skipping decorator.\nbpo-45021\n: Fix a potential deadlock at shutdown of forked children when\nusing\nconcurrent.futures\nmodule\nbpo-43913\n: Fix bugs in cleaning up classes and modules in\nunittest\n:\nFunctions registered with\naddModuleCleanup()\nwere not called unless the user defines\ntearDownModule()\nin their test module.\nFunctions registered with\naddClassCleanup()\nwere not called if\ntearDownClass\nis set to\nNone\n.\nBuffering in\nTestResult\ndid not work with functions registered with\naddClassCleanup()\nand\naddModuleCleanup()\n.\nErrors in functions registered with\naddClassCleanup()\nand\naddModuleCleanup()\nwere not handled correctly in buffered and debug modes.\nErrors in\nsetUpModule()\nand functions registered with\naddModuleCleanup()\nwere reported in wrong order.\nAnd several lesser bugs.\nbpo-45030\n: Fix integer overflow in pickling and copying the range\niterator.\nbpo-45001\n: Made email date parsing more robust against malformed input,\nnamely a whitespace-only\nDate:\nheader. Patch by Wouter Bolsterlee.\nbpo-45010\n: Remove support of special method\n__div__\nin\nunittest.mock\n. It is not used in Python 3.\nbpo-39218\n: Improve accuracy of variance calculations by using\nx*x\ninstead of\nx**2\n.\nbpo-43613\n: Improve the speed of\ngzip.compress()\nand\ngzip.decompress()\nby compressing and decompressing at once in memory\ninstead of in a streamed fashion.\nbpo-37596\n: Ensure that\nset\nand\nfrozenset\nobjects are\nalways\nmarshalled\nreproducibly.\nbpo-44019\n: A new function\noperator.call\nhas been added, such that\noperator.call(obj,\n*args,\n**kwargs)\n==\nobj(*args,\n**kwargs)\n.\nbpo-42255\n:\nwebbrowser.MacOSX\nis deprecated and will be removed\nin Python 3.13. It is untested and undocumented and also not used by\nwebbrowser\nitself. Patch by Donghee Na.\nbpo-44955\n: Method\nstopTestRun()\nis now always\ncalled in pair with method\nstartTestRun()\nfor\nTestResult\nobjects implicitly created in\nrun()\n. Previously it was not called for test\nmethods and classes decorated with a skipping decorator.\nbpo-39039\n: tarfile.open raises\nReadError\nwhen a zlib error\noccurs during file extraction.\nbpo-44935\n:\nsubprocess\non Solaris now also uses\nos.posix_spawn()\nfor better performance.\nbpo-44911\n:\nIsolatedAsyncioTestCase\nwill no longer throw\nan exception while cancelling leaked tasks. Patch by Bar Harel.\nbpo-41322\n: Added\nDeprecationWarning\nfor tests and async tests that\nreturn a value!=None (as this may indicate an improperly written test, for\nexample a test written as a generator function).\nbpo-44524\n: Make exception message more useful when subclass from typing\nspecial form alias. Patch provided by Yurii Karabas.\nbpo-38956\n:\nargparse.BooleanOptionalAction\n’s default value is no\nlonger printed twice when used with\nargparse.ArgumentDefaultsHelpFormatter\n.\nbpo-44860\n: Fix the\nposix_user\nscheme in\nsysconfig\nto not depend\non\nsys.platlibdir\n.\nbpo-44859\n: Improve error handling in\nsqlite3\nand raise more\naccurate exceptions.\nMemoryError\nis now raised instead of\nsqlite3.Warning\nwhen memory is not enough for encoding a statement to UTF-8 in\nConnection.__call__()\nand\nCursor.execute()\n.\nUnicodEncodeError\nis now raised instead of\nsqlite3.Warning\nwhen the statement contains surrogate characters in\nConnection.__call__()\nand\nCursor.execute()\n.\nTypeError\nis now raised instead of\nValueError\nfor non-string script argument in\nCursor.executescript()\n.\nValueError\nis now raised for script containing the null character instead of truncating it in\nCursor.executescript()\n.\nCorrectly handle exceptions raised when getting boolean value of the result of the progress handler.\nAdd many tests covering different corner cases.\nbpo-44581\n: Upgrade bundled pip to 21.2.3 and setuptools to 57.4.0\nbpo-44849\n: Fix the\nos.set_inheritable()\nfunction on FreeBSD 14 for\nfile descriptor opened with the\nO_PATH\nflag: ignore the\nEBADF\nerror on\nioctl()\n, fallback on the\nfcntl()\nimplementation. Patch by Victor Stinner.\nbpo-44605\n: The @functools.total_ordering() decorator now works with\nmetaclasses.\nbpo-44524\n: Fixed an issue wherein the\n__name__\nand\n__qualname__\nattributes of subscribed specialforms could be\nNone\n.\nbpo-44839\n:\nMemoryError\nraised in user-defined functions will now\nproduce a\nMemoryError\nin\nsqlite3\n.\nOverflowError\nwill\nnow be converted to\nDataError\n. Previously\nOperationalError\nwas produced in these cases.\nbpo-44822\n:\nsqlite3\nuser-defined functions and aggregators returning\nstrings\nwith embedded NUL characters are no longer\ntruncated. Patch by Erlend E. Aasland.\nbpo-44801\n: Ensure that the\nParamSpec\nvariable in Callable\ncan only be substituted with a parameters expression (a list of types, an\nellipsis, ParamSpec or Concatenate).\nbpo-44806\n: Non-protocol subclasses of\ntyping.Protocol\nignore now\nthe\n__init__\nmethod inherited from protocol base classes.\nbpo-27275\n:\ncollections.OrderedDict.popitem()\nand\ncollections.OrderedDict.pop()\nno longer call\n__getitem__\nand\n__delitem__\nmethods of the OrderedDict subclasses.\nbpo-44793\n: Fix checking the number of arguments when subscribe a generic\ntype with\nParamSpec\nparameter.\nbpo-44784\n: In importlib.metadata tests, override warnings behavior under\nexpected DeprecationWarnings (importlib_metadata 4.6.3).\nbpo-44667\n: The\ntokenize.tokenize()\ndoesn’t incorrectly generate a\nNEWLINE\ntoken if the source doesn’t end with a new line character but\nthe last line is a comment, as the function is already generating a\nNL\ntoken. Patch by Pablo Galindo\nbpo-44771\n: Added\nimportlib.simple\nmodule implementing adapters from a\nlow-level resources reader interface to a\nTraversableResources\ninterface. Legacy API (\npath\n,\ncontents\n, …) is now supported\nentirely by the\n.files()\nAPI with a compatibility shim supplied for\nresource loaders without that functionality. Feature parity with\nimportlib_resources\n5.2.\nbpo-44752\n:\nrcompleter\ndoes not call\ngetattr()\non\nproperty\nobjects to avoid the side-effect of  evaluating the\ncorresponding method.\nbpo-44747\n: Refactor usage of\nsys._getframe\nin\ntyping\nmodule. Patch\nprovided by Yurii Karabas.\nbpo-42378\n: Fixes the issue with log file being overwritten when\nlogging.FileHandler\nis used in\natexit\nwith\nfilemode\nset\nto\n'w'\n. Note this will cause the message in\natexit\nnot being logged\nif the log stream is already closed due to shutdown of logging.\nbpo-44720\n:\nweakref.proxy\nobjects referencing non-iterators now raise\nTypeError\nrather than dereferencing the null\ntp_iternext\nslot and\ncrashing.\nbpo-44704\n: The implementation of\ncollections.abc.Set._hash()\nnow\nmatches that of\nfrozenset.__hash__()\n.\nbpo-44666\n: Fixed issue in\ncompileall.compile_file()\nwhen\nsys.stdout\nis redirected. Patch by Stefan Hölzl.\nbpo-44688\n:\nsqlite3.Connection.create_collation()\nnow accepts\nnon-ASCII collation names. Patch by Erlend E. Aasland.\nbpo-44690\n: Adopt\nbinacii.a2b_base64\n’s strict mode in\nbase64.b64decode\n.\nbpo-42854\n: Fixed a bug in the\n_ssl\nmodule that was throwing\nOverflowError\nwhen using\n_ssl._SSLSocket.write()\nand\n_ssl._SSLSocket.read()\nfor a big value of the\nlen\nparameter.\nPatch by Pablo Galindo.\nbpo-44686\n: Replace\nunittest.mock._importer\nwith\npkgutil.resolve_name\n.\nbpo-44353\n: Make\nNewType.__call__\nfaster by implementing it in C. Patch\nprovided by Yurii Karabas.\nbpo-44682\n: Change the\npdb\ncommands\ndirective to disallow setting\ncommands for an invalid breakpoint and to display an appropriate error.\nbpo-44353\n: Refactor\ntyping.NewType\nfrom function into callable class.\nPatch provided by Yurii Karabas.\nbpo-44678\n: Added a separate error message for discontinuous padding in\nbinascii.a2b_base64\nstrict mode.\nbpo-44524\n: Add missing\n__name__\nand\n__qualname__\nattributes to\ntyping\nmodule classes. Patch provided by Yurii Karabas.\nbpo-40897\n: Give priority to using the current class constructor in\ninspect.signature()\n. Patch by Weipeng Hong.\nbpo-44638\n: Add a reference to the zipp project and hint as to how to use\nit.\nbpo-44648\n: Fixed wrong error being thrown by\ninspect.getsource()\nwhen examining a class in the interactive session. Instead of\nTypeError\n, it should be\nOSError\nwith appropriate error\nmessage.\nbpo-44608\n: Fix memory leak in\n_tkinter._flatten()\nif it is called\nwith a sequence or set, but not list or tuple.\nbpo-44594\n: Fix an edge case of\nExitStack\nand\nAsyncExitStack\nexception chaining.  They will now match\nwith\nblock behavior when\n__context__\nis explicitly set to\nNone\nwhen the\nexception is in flight.\nbpo-42799\n: In\nfnmatch\n, the cache size for compiled regex patterns\n(\nfunctools.lru_cache()\n) was bumped up from 256 to 32768, affecting\nfunctions:\nfnmatch.fnmatch()\n,\nfnmatch.fnmatchcase()\n,\nfnmatch.filter()\n.\nbpo-41928\n: Update\nshutil.copyfile()\nto raise\nFileNotFoundError\ninstead of confusing\nIsADirectoryError\nwhen a path ending with a\nos.path.sep\ndoes not exist;\nshutil.copy()\nand\nshutil.copy2()\nare also affected.\nbpo-44569\n: Added the\nStackSummary.format_frame()\nfunction in\ntraceback\n. This allows users to customize the way individual lines\nare formatted in tracebacks without re-implementing logic to handle\nrecursive tracebacks.\nbpo-44566\n: handle StopIteration subclass raised from\n@contextlib.contextmanager generator\nbpo-44558\n: Make the implementation consistency of\nindexOf()\nbetween C and Python versions. Patch by Donghee\nNa.\nbpo-41249\n: Fixes\nTypedDict\nto work with\ntyping.get_type_hints()\nand postponed evaluation of annotations across modules.\nbpo-44554\n: Refactor argument processing in\npdb.main()\nto simplify\ndetection of errors in input loading and clarify behavior around module or\nscript invocation.\nbpo-34798\n: Break up paragraph about\npprint.PrettyPrinter\nconstruction parameters to make it easier to read.\nbpo-44539\n: Added support for recognizing JPEG files without JFIF or Exif\nmarkers.\nbpo-44461\n: Fix bug with\npdb\n’s handling of import error due to a\npackage which does not have a\n__main__\nmodule\nbpo-43625\n: Fix a bug in the detection of CSV file headers by\ncsv.Sniffer.has_header()\nand improve documentation of same.\nbpo-44516\n: Update vendored pip to 21.1.3\nbpo-42892\n: Fixed an exception thrown while parsing a malformed multipart\nemail by\nemail.message.EmailMessage\n.\nbpo-44468\n:\ntyping.get_type_hints()\nnow finds annotations in classes\nand base classes with unexpected\n__module__\n. Previously, it skipped\nthose MRO elements.\nbpo-44491\n: Allow clearing the\nsqlite3\nauthorizer callback by\npassing\nNone\nto\nset_authorizer()\n. Patch\nby Erlend E. Aasland.\nbpo-43977\n: Set the proper\nPy_TPFLAGS_MAPPING\nand\nPy_TPFLAGS_SEQUENCE\nflags for subclasses created before a\nparent has been registered as a\ncollections.abc.Mapping\nor\ncollections.abc.Sequence\n.\nbpo-44482\n: Fix very unlikely resource leak in\nglob\nin alternate\nPython implementations.\nbpo-44466\n: The\nfaulthandler\nmodule now detects if a fatal error\noccurs during a garbage collector collection. Patch by Victor Stinner.\nbpo-44471\n: A\nTypeError\nis now raised instead of an\nAttributeError\nin\ncontextlib.ExitStack.enter_context()\nand\ncontextlib.AsyncExitStack.enter_async_context()\nfor objects which do\nnot support the\ncontext manager\nor\nasynchronous context\nmanager\nprotocols correspondingly.\nbpo-44404\n:\ntkinter\n’s\nafter()\nmethod now supports callables\nwithout the\n__name__\nattribute.\nbpo-41546\n: Make\npprint\n(like the builtin\nprint\n) not attempt to\nwrite to\nstdout\nwhen it is\nNone\n.\nbpo-44458\n:\nBUFFER_BLOCK_SIZE\nis now declared static, to avoid linking\ncollisions when bz2, lmza or zlib are statically linked.\nbpo-44464\n: Remove exception for flake8 in deprecated importlib.metadata\ninterfaces. Sync with importlib_metadata 4.6.\nbpo-44446\n: Take into account that\nlineno\nmight be\nNone\nin\ntraceback.FrameSummary\n.\nbpo-44439\n: Fix in\nbz2.BZ2File.write()\n/\nlzma.LZMAFile.write()\nmethods, when the input data is an object that supports the buffer\nprotocol, the file length may be wrong.\nbpo-44434\n: _thread.start_new_thread() no longer calls\nPyThread_exit_thread() explicitly at the thread exit, the call was\nredundant. On Linux with the glibc, pthread_exit() aborts the whole\nprocess if dlopen() fails to open libgcc_s.so file (ex: EMFILE error).\nPatch by Victor Stinner.\nbpo-42972\n: The _thread.RLock type now fully implement the GC protocol: add\na traverse function and the\nPy_TPFLAGS_HAVE_GC\nflag. Patch by\nVictor Stinner.\nbpo-44422\n: The\nthreading.enumerate()\nfunction now uses a reentrant\nlock to prevent a hang on reentrant call. Patch by Victor Stinner.\nbpo-38291\n: Importing typing.io or typing.re now prints a\nDeprecationWarning\n.\nbpo-37880\n: argparse actions store_const and append_const each receive a\ndefault value of\nNone\nwhen the\nconst\nkwarg is not provided.\nPreviously, this raised a\nTypeError\n.\nbpo-44389\n: Fix deprecation of\nssl.OP_NO_TLSv1_3\nbpo-27827\n:\npathlib.PureWindowsPath.is_reserved()\nnow identifies a\ngreater range of reserved filenames, including those with trailing spaces\nor colons.\nbpo-44395\n: Fix\nas_string()\nto pass unixfrom\nproperly. Patch by Donghee Na.\nbpo-34266\n: Handle exceptions from parsing the arg of\npdb\n’s\nrun/restart command.\nbpo-44362\n: Improve\nssl\nmodule’s deprecation messages, error\nreporting, and documentation for deprecations.\nbpo-44342\n: [Enum] Change pickling from by-value to by-name.\nbpo-44356\n: [Enum] Allow multiple data-type mixins if they are all the\nsame.\nbpo-44351\n: Restore back\nparse_makefile()\nin\ndistutils.sysconfig\nbecause it behaves differently than the similar implementation in\nsysconfig\n.\nbpo-35800\n:\nsmtpd.MailmanProxy\nis now removed as it is unusable\nwithout an external module,\nmailman\n. Patch by Donghee Na.\nbpo-44357\n: Added a function that returns cube root of the given number\nmath.cbrt()\nbpo-44339\n: Change\nmath.pow(±0.0,\n-math.inf)\nto return\ninf\ninstead\nof raising\nValueError\n. This brings the special-case handling of\nmath.pow\ninto compliance with the IEEE 754 standard.\nbpo-44242\n: Remove missing flag check from Enum creation and move into a\nverify\ndecorator.\nbpo-44246\n: In\nimportlib.metadata\n, restore compatibility in the result\nfrom\nDistribution.entry_points\n(\nEntryPoints\n) to honor expectations\nin older implementations and issuing deprecation warnings for these cases:\nA.\nEntryPoints\nobjects are once again mutable, allowing   for\nsort()\nand other list-based mutation operations.   Avoid deprecation\nwarnings by casting to a   mutable sequence (e.g.\nlist(dist.entry_points).sort()\n). B.\nEntryPoints\nresults once again\nallow   for access by index. To avoid deprecation warnings,   cast the\nresult to a Sequence first   (e.g.\ntuple(dist.entry_points)[0]\n).\nbpo-44246\n: In importlib.metadata.entry_points, de-duplication of\ndistributions no longer requires loading the full metadata for\nPathDistribution objects, improving entry point loading performance by\n~10x.\nbpo-43858\n: Added a function that returns a copy of a dict of logging\nlevels:\nlogging.getLevelNamesMapping()\nbpo-44260\n: The\nrandom.Random\nconstructor no longer reads system\nentropy without need.\nbpo-44254\n: On Mac, give turtledemo button text a color that works on both\nlight or dark background.  Programmers cannot control the latter.\nbpo-44258\n: Support PEP 515 for Fraction’s initialization from string.\nbpo-44235\n: Remove deprecated functions in the\ngettext\n. Patch by\nDonghee Na.\nbpo-38693\n: Prefer f-strings to\n.format\nin importlib.resources.\nbpo-33693\n: Importlib.metadata now prefers f-strings to .format.\nbpo-44241\n: Incorporate minor tweaks from importlib_metadata 4.1:\nSimplePath protocol, support for Metadata 2.2.\nbpo-43216\n: Remove the\n@asyncio.coroutine\ndecorator\nenabling legacy generator-based coroutines to be\ncompatible with async/await code; remove\nasyncio.coroutines.CoroWrapper\nused for wrapping legacy coroutine\nobjects in the debug mode. The decorator has been deprecated since Python\n3.8 and the removal was initially scheduled for Python 3.10. Patch by\nIllia Volochii.\nbpo-44210\n: Make importlib.metadata._meta.PackageMetadata public.\nbpo-43643\n: Declare readers.MultiplexedPath.name as a property per the\nspec.\nbpo-27334\n: The\nsqlite3\ncontext manager now performs a rollback\n(thus releasing the database lock) if commit failed.  Patch by Luca Citi\nand Erlend E. Aasland.\nbpo-4928\n: Documented existing behavior on POSIX: NamedTemporaryFiles are\nnot deleted when creating process is killed with SIGKILL\nbpo-44154\n: Optimize\nfractions.Fraction\npickling for large\ncomponents.\nbpo-33433\n: For IPv4 mapped IPv6 addresses (\nRFC 4291\nSection 2.5.5.2),\nthe\nipaddress.IPv6Address.is_private\ncheck is deferred to the\nmapped IPv4 address. This solves a bug where public mapped IPv4 addresses\nwere considered private by the IPv6 check.\nbpo-44150\n: Add optional\nweights\nargument to statistics.fmean().\nbpo-44142\n:\nast.unparse()\nwill now drop the redundant parentheses\nwhen tuples used as assignment targets (e.g in for loops).\nbpo-44145\n:\nhmac\ncomputations were not releasing the GIL while\ncalling the OpenSSL\nHMAC_Update\nC API (a new feature in 3.9).  This\nunintentionally prevented parallel computation as other\nhashlib\nalgorithms support.\nbpo-44095\n:\nzipfile.Path\nnow supports\nzipfile.Path.stem\n,\nzipfile.Path.suffixes\n, and\nzipfile.Path.suffix\nattributes.\nbpo-44077\n: It’s now possible to receive the type of service (ToS), a.k.a.\ndifferentiated services (DS), a.k.a. differentiated services code point\n(DSCP) and explicit congestion notification (ECN) IP header fields with\nsocket.IP_RECVTOS\n.\nbpo-37788\n: Fix a reference leak when a Thread object is never joined.\nbpo-38908\n: Subclasses of\ntyping.Protocol\nwhich only have data\nvariables declared will now raise a\nTypeError\nwhen checked with\nisinstance\nunless they are decorated with\nruntime_checkable()\n.\nPreviously, these checks passed silently. Patch provided by Yurii Karabas.\nbpo-44098\n:\ntyping.ParamSpec\nwill no longer be found in the\n__parameters__\nof most\ntyping\ngenerics except in valid use\nlocations specified by\nPEP 612\n. This prevents incorrect usage like\ntyping.List[P][int]\n. This change means incorrect usage which may have\npassed silently in 3.10 beta 1 and earlier will now error.\nbpo-44089\n: Allow subclassing\ncsv.Error\nin 3.10 (it was allowed in 3.9\nand earlier but was disallowed in early versions of 3.10).\nbpo-44081\n:\nast.unparse()\nnow doesn’t use redundant spaces to\nseparate\nlambda\nand the\n:\nif there are no parameters.\nbpo-44061\n: Fix regression in previous release when calling\npkgutil.iter_modules()\nwith a list of\npathlib.Path\nobjects\nbpo-44059\n: Register the SerenityOS Browser in the\nwebbrowser\nmodule.\nbpo-36515\n: The\nhashlib\nmodule no longer does unaligned memory\naccesses when compiled for ARM platforms.\nbpo-40465\n: Remove random module features deprecated in Python 3.9.\nbpo-44018\n: random.seed() no longer mutates bytearray inputs.\nbpo-38352\n: Add\nIO\n,\nBinaryIO\n,\nTextIO\n,\nMatch\n, and\nPattern\nto\ntyping.__all__\n. Patch by Jelle Zijlstra.\nbpo-44002\n:\nurllib.parse\nnow uses\nfunctool.lru_cache()\nfor its\ninternal URL splitting and quoting caches instead of rolling its own like\nits the ’90s.\nThe undocumented internal\nurllib.parse\nQuoted\nclass API is now\ndeprecated, for removal in 3.14.\nbpo-43972\n: When\nhttp.server.SimpleHTTPRequestHandler\nsends a\n301\n(Moved\nPermanently)\nfor a directory path not ending with\n/\n,\nadd a\nContent-Length:\n0\nheader. This improves the behavior for certain\nclients.\nbpo-28528\n: Fix a bug in\npdb\nwhere\ncheckline()\nraises\nAttributeError\nif it is called after\nreset()\n.\nbpo-43853\n: Improved string handling for\nsqlite3\nuser-defined\nfunctions and aggregates:\nIt is now possible to pass strings with embedded null characters to UDFs\nConversion failures now correctly raise\nMemoryError\nPatch by Erlend E. Aasland.\nbpo-43666\n: AIX:\nLib/_aix_support.get_platform()\nmay fail in an AIX\nWPAR. The fileset bos.rte appears to have a builddate in both LPAR and\nWPAR so this fileset is queried rather than bos.mp64. To prevent a similar\nsituation (no builddate in ODM) a value (9988) sufficient for completing a\nbuild is provided. Patch by M Felt.\nbpo-43650\n: Fix\nMemoryError\nin\nshutil.unpack_archive()\nwhich\nfails inside\nshutil._unpack_zipfile()\non large files. Patch by Igor\nBolshakov.\nbpo-43612\n:\nzlib.compress()\nnow accepts a wbits parameter which\nallows users to compress data as a raw deflate block without zlib headers\nand trailers in one go. Previously this required instantiating a\nzlib.compressobj\n. It also provides a faster alternative to\ngzip.compress\nwhen wbits=31 is used.\nbpo-43392\n:\nimportlib._bootstrap._find_and_load()\nnow implements a\ntwo-step check to avoid locking when modules have been already imported\nand are ready. This improves performance of repeated calls to\nimportlib.import_module()\nand\nimportlib.__import__()\n.\nbpo-43318\n: Fix a bug where\npdb\ndoes not always echo cleared\nbreakpoints.\nbpo-43234\n: Prohibit passing\nnon-\nconcurrent.futures.ThreadPoolExecutor\nexecutors to\nloop.set_default_executor()\nfollowing a deprecation in Python 3.8.\nPatch by Illia Volochii.\nbpo-43232\n: Prohibit previously deprecated potentially disruptive\noperations on\nasyncio.trsock.TransportSocket\n. Patch by Illia\nVolochii.\nbpo-30077\n: Added support for Apple’s aifc/sowt pseudo-compression\nbpo-42971\n: Add definition of\nerrno.EQFULL\nfor platforms that define\nthis constant (such as macOS).\nbpo-43086\n: Added a new optional\nstrict_mode\nparameter to\nbinascii.a2b_base64\n. When\nscrict_mode\nis set to\nTrue\n,\nthe\na2b_base64\nfunction will accept only valid base64 content. More\ndetails about what “valid base64 content” is, can be found in the\nfunction’s documentation.\nbpo-43024\n: Improve the help signature of\ntraceback.print_exception()\n,\ntraceback.format_exception()\nand\ntraceback.format_exception_only()\n.\nbpo-33809\n: Add the\ntraceback.TracebackException.print()\nmethod which\nprints the formatted exception information.\nbpo-42862\n:\nsqlite3\nnow utilizes\nfunctools.lru_cache()\nto\nimplement the connection statement cache. As a small optimisation, the\ndefault statement cache size has been increased from 100 to 128. Patch by\nErlend E. Aasland.\nbpo-41818\n: Soumendra Ganguly: add termios.tcgetwinsize(),\ntermios.tcsetwinsize().\nbpo-40497\n:\nsubprocess.check_output()\nnow raises\nValueError\nwhen the invalid keyword argument\ncheck\nis passed by user code.\nPreviously such use would fail later with a\nTypeError\n. Patch by\nRémi Lapeyre.\nbpo-37449\n:\nensurepip\nnow uses\nimportlib.resources.files()\ntraversable APIs\nbpo-40956\n: Use Argument Clinic in\nsqlite3\n.  Patches by Erlend E.\nAasland.\nbpo-41730\n:\nDeprecationWarning\nis now raised when importing\ntkinter.tix\n, which has been deprecated in documentation since\nPython 3.6.\nbpo-20684\n: Remove unused\n_signature_get_bound_param\nfunction from\ninspect\n- by Anthony Sottile.\nbpo-41402\n: Fix\nemail.message.EmailMessage.set_content()\nwhen called\nwith binary data and\n7bit\ncontent transfer encoding.\nbpo-32695\n: The\ncompresslevel\nand\npreset\nkeyword arguments of\ntarfile.open()\nare now both documented and tested.\nbpo-41137\n: Use utf-8 encoding while reading .pdbrc files. Patch by\nSrinivas Reddy Thatiparthy\nbpo-24391\n: Improved reprs of\nthreading\nsynchronization objects:\nSemaphore\n,\nBoundedSemaphore\n,\nEvent\nand\nBarrier\n.\nbpo-5846\n: Deprecated the following\nunittest\nfunctions, scheduled\nfor removal in Python 3.13:\nfindTestCases()\nmakeSuite()\ngetTestCaseNames()\nUse\nTestLoader\nmethods instead:\nunittest.TestLoader.loadTestsFromModule()\nunittest.TestLoader.loadTestsFromTestCase()\nunittest.TestLoader.getTestCaseNames()\nPatch by Erlend E. Aasland.\nbpo-40563\n: Support pathlike objects on dbm/shelve. Patch by Hakan Çelik\nand Henry-Joseph Audéoud.\nbpo-34990\n: Fixed a Y2k38 bug in the compileall module where it would fail\nto compile files with a modification time after the year 2038.\nbpo-39549\n: Whereas the code for reprlib.Repr had previously used a\nhardcoded string value of ‘…’, this PR updates it to use of a\n“fillvalue” attribute, whose value defaults to ‘…’ and can be reset in\neither individual reprlib.Repr instances or in subclasses thereof.\nbpo-37022\n:\npdb\nnow displays exceptions from\nrepr()\nwith its\np\nand\npp\ncommands.\nbpo-38840\n: Fix\ntest___all__\non platforms lacking a shared memory\nimplementation.\nbpo-39359\n: Add one missing check that the password is a bytes object for\nan encrypted zipfile.\nbpo-38741\n:\nconfigparser\n: using ‘]’ inside a section header will no\nlonger cut the section name short at the ‘]’\nbpo-38415\n: Added missing behavior to\ncontextlib.asynccontextmanager()\nto match\ncontextlib.contextmanager()\nso decorated functions can themselves be\ndecorators.\nbpo-30256\n: Pass multiprocessing BaseProxy argument\nmanager_owned\nthrough AutoProxy.\nbpo-27513\n:\nemail.utils.getaddresses()\nnow accepts\nemail.header.Header\nobjects along with string values. Patch by\nZackery Spytz.\nbpo-16379\n: Add SQLite error code and name to\nsqlite3\nexceptions.\nPatch by Aviv Palivoda, Daniel Shahaf, and Erlend E. Aasland.\nbpo-26228\n: pty.spawn no longer hangs on FreeBSD, macOS, and Solaris.\nbpo-33349\n: lib2to3 now recognizes async generators everywhere.\nbpo-29298\n: Fix\nTypeError\nwhen required subparsers without\ndest\ndo\nnot receive arguments. Patch by Anthony Sottile.\nDocumentation\n¶\nbpo-45216\n: Remove extra documentation listing methods in\ndifflib\n. It\nwas rendering twice in pydoc and was outdated in some places.\nbpo-45024\n:\ncollections.abc\ndocumentation has been expanded to\nexplicitly cover how instance and subclass checks work, with additional\ndoctest examples and an exhaustive list of ABCs which test membership\npurely by presence of the right\nspecial method\ns. Patch by Raymond\nHettinger.\nbpo-44957\n: Promote PEP 604 union syntax by using it where possible. Also,\nmention\nX\n|\nY\nmore prominently in section about\nUnion\nand mention\nX\n|\nNone\nat all in section about\nOptional\n.\nbpo-16580\n: Added code equivalents for the\nint.to_bytes()\nand\nint.from_bytes()\nmethods, as well as tests ensuring that these code\nequivalents are valid.\nbpo-44903\n: Removed the\nothergui.rst\nfile, any references to it, and\nthe list of GUI frameworks in the FAQ. In their place I’ve added links to\nthe Python Wiki\npage on GUI frameworks\n.\nbpo-33479\n: Tkinter documentation has been greatly expanded with new\n“Architecture” and “Threading model” sections.\nbpo-36700\n:\nbase64\nRFC references were updated to point to\nRFC 4648\n; a section was added to point users to the new “security\nconsiderations” section of the RFC.\nbpo-44740\n: Replaced occurrences of uppercase “Web” and “Internet” with\nlowercase versions per the 2016 revised Associated Press Style Book.\nbpo-44693\n: Update the definition of __future__ in the glossary by\nreplacing the confusing word “pseudo-module” with a more accurate\ndescription.\nbpo-35183\n: Add typical examples to os.path.splitext docs\nbpo-30511\n: Clarify that\nshutil.make_archive()\nis not thread-safe due\nto reliance on changing the current working directory.\nbpo-44561\n: Update of three expired hyperlinks in\nDoc/distributing/index.rst: “Project structure”, “Building and packaging\nthe project”, and “Uploading the project to the Python Packaging Index”.\nbpo-44651\n: Delete entry “coercion” in Doc/glossary.rst for its outdated\ndefinition.\nbpo-42958\n: Updated the docstring and docs of\nfilecmp.cmp()\nto be\nmore accurate and less confusing especially in respect to\nshallow\narg.\nbpo-44631\n: Refactored the\nrepr()\ncode of the\n_Environ\n(os module).\nbpo-44613\n: importlib.metadata is no longer provisional.\nbpo-44558\n: Match the docstring and python implementation of\ncountOf()\nto the behavior of its c implementation.\nbpo-44544\n: List all kwargs for\ntextwrap.wrap()\n,\ntextwrap.fill()\n, and\ntextwrap.shorten()\n. Now, there are nav\nlinks to attributes of\nTextWrap\n, which makes navigation much\neasier while minimizing duplication in the documentation.\nbpo-38062\n: Clarify that atexit uses equality comparisons internally.\nbpo-40620\n: Convert examples in tutorial controlflow.rst section 4.3 to be\ninterpreter-demo style.\nbpo-43066\n: Added a warning to\nzipfile\ndocs: filename arg with a\nleading slash may cause archive to be un-openable on Windows systems.\nbpo-39452\n: Rewrote\nDoc/library/__main__.rst\n. Broadened scope of the\ndocument to explicitly discuss and differentiate between\n__main__.py\nin packages versus the\n__name__\n==\n'__main__'\nexpression (and the\nidioms that surround it).\nbpo-13814\n: In the Design FAQ, answer “Why don’t generators support the\nwith statement?”\nbpo-27752\n: Documentation of csv.Dialect is more descriptive.\nbpo-44453\n: Fix documentation for the return type of\nsysconfig.get_path()\n.\nbpo-44392\n: Added a new section in the C API documentation for types used\nin type hinting.  Documented\nPy_GenericAlias\nand\nPy_GenericAliasType\n.\nbpo-38291\n: Mark\ntyping.io\nand\ntyping.re\nas deprecated since Python\n3.8 in the documentation. They were never properly supported by type\ncheckers.\nbpo-44322\n: Document that SyntaxError args have a details tuple and that\ndetails are adjusted for errors in f-string field replacement expressions.\nbpo-42392\n: Document the deprecation and removal of the\nloop\nparameter\nfor many functions and classes in\nasyncio\n.\nbpo-44195\n: Corrected references to\nTraversableResources\nin docs. There\nis no\nTraversableReader\n.\nbpo-41963\n: Document that\nConfigParser\nstrips off comments when reading\nconfiguration files.\nbpo-44072\n: Correct where in the numeric ABC hierarchy\n**\nsupport is\nadded, i.e., in numbers.Complex, not numbers.Integral.\nbpo-43558\n: Add the remark to\ndataclasses\ndocumentation that the\n__init__()\nof any base class has to be called in\n__post_init__()\n, along with a code example.\nbpo-44025\n: Clarify when ‘_’ in match statements is a keyword, and when\nnot.\nbpo-41706\n: Fix docs about how methods like\n__add__\nare invoked when\nevaluating operator expressions.\nbpo-41621\n: Document that\ncollections.defaultdict\nparameter\ndefault_factory\ndefaults to\nNone\nand is positional-only.\nbpo-41576\n: document BaseException in favor of bare except\nbpo-21760\n: The description for __file__ fixed. Patch by Furkan Onder\nbpo-39498\n: Add a “Security Considerations” index which links to standard\nlibrary modules that have explicitly documented security considerations.\nbpo-33479\n: Remove the unqualified claim that tkinter is threadsafe. It has\nnot been true for several years and likely never was. An explanation of\nwhat is true may be added later, after more discussion, and possibly after\npatching _tkinter.c,\nTests\n¶\nbpo-40173\n: Fix\ntest.support.import_helper.import_fresh_module()\n.\nbpo-45280\n: Add a test case for empty\ntyping.NamedTuple\n.\nbpo-45269\n: Cover case when invalid\nmarkers\ntype is supplied to\nc_make_encoder\n.\nbpo-45128\n: Fix\ntest_multiprocessing_fork\nfailure due to\ntest_logging\nand\nsys.modules\nmanipulation.\nbpo-45209\n: Fix\nUserWarning:\nresource_tracker\nwarning in\n_test_multiprocessing._TestSharedMemory.test_shared_memory_cleaned_after_process_termination\nbpo-45185\n: Enables\nTestEnumerations\ntest cases in\ntest_ssl\nsuite.\nbpo-45195\n: Fix test_readline.test_nonascii(): sometimes, the newline\ncharacter is not written at the end, so don’t expect it in the output.\nPatch by Victor Stinner.\nbpo-45156\n: Fixes infinite loop on\nunittest.mock.seal()\nof mocks\ncreated by\ncreate_autospec()\n.\nbpo-45125\n: Improves pickling tests and docs of\nSharedMemory\nand\nSharableList\nobjects.\nbpo-44860\n: Update\ntest_sysconfig.test_user_similar()\nfor the\nposix_user scheme:\nplatlib\ndoesn’t use\nsys.platlibdir\n. Patch\nby Victor Stinner.\nbpo-45052\n:\nWithProcessesTestSharedMemory.test_shared_memory_basics\ntest was ignored, because\nself.assertEqual(sms.size,\nsms2.size)\nline\nwas failing. It is now removed and test is unskipped.\nThe main motivation for this line to be removed from the test is that the\nsize\nof\nSharedMemory\nis not ever guaranteed to be the same. It is\ndecided by the platform.\nbpo-44895\n: libregrtest now clears the type cache later to reduce the risk\nof false alarm when checking for reference leaks. Previously, the type\ncache was cleared too early and libregrtest raised a false alarm about\nreference leaks under very specific conditions. Patch by Irit Katriel and\nVictor Stinner.\nbpo-45042\n: Fixes that test classes decorated with\n@hashlib_helper.requires_hashdigest\nwere skipped all the time.\nbpo-25130\n: Add calls of\ngc.collect()\nin tests to support PyPy.\nbpo-45011\n: Made tests relying on the\n_asyncio\nC extension module\noptional to allow running on alternative Python implementations. Patch by\nSerhiy Storchaka.\nbpo-44949\n: Fix auto history tests of test_readline: sometimes, the newline\ncharacter is not written at the end, so don’t expect it in the output.\nbpo-44891\n: Tests were added to clarify\nid()\nis preserved when\nobj\n*\n1\nis used on\nstr\nand\nbytes\nobjects. Patch by Nikita\nSobolev.\nbpo-44852\n: Add ability to wholesale silence DeprecationWarnings while\nrunning the regression test suite.\nbpo-40928\n: Notify users running test_decimal regression tests on macOS of\npotential harmless “malloc can’t allocate region” messages spewed by\ntest_decimal.\nbpo-44734\n: Fixed floating-point precision issue in turtle tests.\nbpo-44708\n: Regression tests, when run with -w, are now re-running only the\naffected test methods instead of re-running the entire test file.\nbpo-42095\n: Added interop tests for Apple plists: generate plist files with\nPython plistlib and parse with Apple plutil; and the other way round.\nbpo-44647\n: Added a permanent Unicode-valued environment variable to\nregression tests to ensure they handle this use case in the future. If\nyour test environment breaks because of that, report a bug to us, and\ntemporarily set PYTHONREGRTEST_UNICODE_GUARD=0 in your test environment.\nbpo-44515\n: Adjust recently added contextlib tests to avoid assuming the\nuse of a refcounted GC\nbpo-44287\n: Fix asyncio test_popen() of test_windows_utils by using a\nlonger timeout. Use military grade battle-tested\ntest.support.SHORT_TIMEOUT\ntimeout rather than a hardcoded timeout\nof 10 seconds: it’s 30 seconds by default, but it is made longer on slow\nbuildbots. Patch by Victor Stinner.\nbpo-44451\n: Reset\nDeprecationWarning\nfilters in\ntest.test_importlib.test_metadata_api.APITests.test_entry_points_by_index\nto avoid\nStopIteration\nerror if\nDeprecationWarnings\nare ignored.\nbpo-44363\n: Account for address sanitizer in test_capi. test_capi now\npasses when run GCC address sanitizer.\nbpo-44364\n: Add non integral tests for\nmath.sqrt()\nfunction.\nbpo-43921\n: Fix test_ssl.test_wrong_cert_tls13(): use\nsuppress_ragged_eofs=False\n, since\nread()\ncan raise\nssl.SSLEOFError\non Windows. Patch by Victor Stinner.\nbpo-43921\n: Fix test_pha_required_nocert() of test_ssl: catch two more EOF\ncases (when the\nrecv()\nmethod returns an empty string). Patch by\nVictor Stinner.\nbpo-44131\n: Add test_frozenmain to test_embed to test the\nPy_FrozenMain()\nC function. Patch by Victor Stinner.\nbpo-31904\n: Ignore error string case in test_file_not_exists().\nbpo-42083\n: Add test to check that\nPyStructSequence_NewType\naccepts a\nPyStructSequence_Desc\nwith\ndoc\nfield set to\nNULL\n.\nbpo-35753\n: Fix crash in doctest when doctest parses modules that include\nunwrappable functions by skipping those functions.\nbpo-30256\n: Add test for nested queues when using\nmultiprocessing\nshared objects\nAutoProxy[Queue]\ninside\nListProxy\nand\nDictProxy\nBuild\n¶\nbpo-45220\n: Avoid building with the Windows 11 SDK previews automatically.\nThis may be overridden by setting the\nDefaultWindowsSDKVersion\nenvironment variable before building.\nbpo-45020\n: Freeze stdlib modules that are imported during startup.  This\nprovides significant performance improvements to startup.  If necessary,\nuse the previously added “-X frozen_modules=off” commandline option to\nforce importing the source modules.\nbpo-45188\n: Windows builds now regenerate frozen modules as the first part\nof the build. Previously the regeneration was later in the build, which\nwould require it to be restarted if any modules had changed.\nbpo-45163\n: Fixes Haiku platform build.\nbpo-45067\n: The ncurses function extended_color_content was introduced in\n2017\n(\nhttps://invisible-island.net/ncurses/NEWS.html#index-t20170401\n).  The\nncurses-devel package in CentOS 7 had a older version ncurses resulted in\ncompilation error.  For compiling ncurses with extended color support, we\nverify the version of the ncurses library >= 20170401.\nbpo-45019\n: Generate lines in relevant files for frozen modules.  Up until\nnow each of the files had to be edited manually.  This change makes it\neasier to add to and modify the frozen modules.\nbpo-44340\n: Add support for building with clang thin lto via\n–with-lto=thin/full. Patch by Donghee Na and Brett Holman.\nbpo-44535\n: Enable building using a Visual Studio 2022 install on Windows.\nbpo-43298\n: Improved error message when building without a Windows SDK\ninstalled.\nbpo-44381\n: The Windows build now accepts\nEnableControlFlowGuard\nset to\nguard\nto enable CFG.\nbpo-41282\n: Fix broken\nmake\ninstall\nthat caused standard library\nextension modules to be unnecessarily and incorrectly rebuilt during the\ninstall phase of cpython.\nWindows\n¶\nbpo-45375\n: Fixes an assertion failure due to searching for the standard\nlibrary in unnormalised paths.\nbpo-45022\n: Update Windows release to include libffi 3.4.2\nbpo-45007\n: Update to OpenSSL 1.1.1l in Windows build\nbpo-44848\n: Upgrade Windows installer to use SQLite 3.36.0.\nbpo-44572\n: Avoid consuming standard input in the\nplatform\nmodule\nbpo-44582\n: Accelerate speed of\nmimetypes\ninitialization using a\nnative implementation of the registry scan.\nbpo-41299\n: Fix 16 milliseconds jitter when using timeouts in\nthreading\n, such as with\nthreading.Lock.acquire()\nor\nthreading.Condition.wait()\n.\nbpo-42686\n: Build\nsqlite3\nwith math functions enabled. Patch by\nErlend E. Aasland.\nbpo-40263\n: This is a follow-on bug from\nhttps://bugs.python.org/issue26903\n. Once that is applied we run into an\noff-by-one assertion problem. The assert was not correct.\nmacOS\n¶\nbpo-45007\n: Update macOS installer builds to use OpenSSL 1.1.1l.\nbpo-34602\n: When building CPython on macOS with\n./configure\n--with-undefined-behavior-sanitizer\n--with-pydebug\n, the stack size is\nnow quadrupled to allow for the entire test suite to pass.\nbpo-44848\n: Update macOS installer to use SQLite 3.36.0.\nbpo-44689\n:\nctypes.util.find_library()\nnow works correctly on macOS\n11 Big Sur even if Python is built on an older version of macOS.\nPreviously, when built on older macOS systems,\nfind_library\nwas not\nable to find  macOS system libraries when running on Big Sur due to\nchanges in  how system libraries are stored.\nbpo-41972\n: The framework build’s user header path in sysconfig is changed\nto add a ‘pythonX.Y’ component to match distutils’s behavior.\nbpo-43109\n: Allow –with-lto configure option to work with Apple-supplied\nXcode or Command Line Tools.\nbpo-34932\n: Add socket.TCP_KEEPALIVE support for macOS. Patch by Shane\nHarvey.\nIDLE\n¶\nbpo-45296\n: On Windows, change exit/quit message to suggest Ctrl-D, which\nworks, instead of <Ctrl-Z Return>, which does not work in IDLE.\nbpo-45193\n: Make completion boxes appear on Ubuntu again.\nbpo-40128\n: Mostly fix completions on macOS when not using tcl/tk 8.6.11\n(as with 3.9). The added update_idletask call should be harmless and\npossibly helpful otherwise.\nbpo-33962\n: Move the indent space setting from the Font tab to the new\nWindows tab. Patch by Mark Roseman and Terry Jan Reedy.\nbpo-40468\n: Split the settings dialog General tab into Windows and Shell/ED\ntabs. Move help sources, which extend the Help menu, to the Extensions\ntab. Make space for new options and shorten the dialog. The latter makes\nthe dialog better fit small screens.\nbpo-41611\n: Avoid uncaught exceptions in\nAutoCompleteWindow.winconfig_event()\n.\nbpo-41611\n: Fix IDLE sometimes freezing upon tab-completion on macOS.\nbpo-44010\n: Highlight the new\nmatch\nstatement’s\nsoft\nkeywords\n:\nmatch\n,\ncase\n, and\n_\n. However, this highlighting is not\nperfect and will be incorrect in some rare cases, including some\n_\n-s\nin\ncase\npatterns.\nbpo-44026\n: Include interpreter’s typo fix suggestions in message line for\nNameErrors and AttributeErrors.  Patch by E. Paine.\nTools/Demos\n¶\nbpo-44786\n: Fix a warning in regular expression in the c-analyzer script.\nbpo-44967\n: pydoc now returns a non-zero status code when a module cannot\nbe found.\nbpo-44978\n: Allow the Argument Clinic tool to handle\n__complex__\nspecial methods.\nbpo-43425\n: Removed the ‘test2to3’ demo project that demonstrated using\nlib2to3 to support Python 2.x and Python 3.x from a single source in a\ndistutils package. Patch by Donghee Na\nbpo-44074\n: Make patchcheck automatically detect the correct base branch\nname (previously it was hardcoded to ‘master’)\nbpo-20291\n: Added support for variadic positional parameters in Argument\nClinic.\nC API\n¶\nbpo-41710\n: The PyThread_acquire_lock_timed() function now clamps the\ntimeout if it is too large, rather than aborting the process. Patch by\nVictor Stinner.\nbpo-44687\n:\nBufferedReader.peek()\nno longer raises\nValueError\nwhen the entire file has already been buffered.\nbpo-45116\n: Add the\nPy_ALWAYS_INLINE\nmacro to ask the compiler\nto always inline a static inline function. The compiler can ignore it and\ndecides to not inline the function. Patch by Victor Stinner.\nbpo-45094\n: Add the\nPy_NO_INLINE\nmacro to disable inlining on a\nfunction. Patch by Victor Stinner.\nbpo-45061\n: Add a deallocator to the\nbool\ntype to detect refcount\nbugs in C extensions which call\nPy_DECREF(Py_True);\nor\nPy_DECREF(Py_False);\nby mistake. Patch by Victor Stinner.\nbpo-42035\n: Add a new\nPyType_GetQualName()\nfunction to get type’s\nqualified name.\nbpo-41103\n: Reverts removal of the old buffer protocol because they are\npart of stable ABI.\nbpo-44751\n: Remove\ncrypt.h\ninclude from the public\nPython.h\nheader.\nbpo-42747\n: The\nPy_TPFLAGS_HAVE_VERSION_TAG\ntype flag now does nothing.\nThe\nPy_TPFLAGS_HAVE_AM_SEND\nflag (which was added in 3.10) is removed.\nBoth were unnecessary because it is not possible to have type objects with\nthe relevant fields missing.\nbpo-44530\n: Added the\nco_qualname\nto the\nPyCodeObject\nstructure to\npropagate the qualified name from the compiler to code objects.\nPatch by Gabriele N. Tornetta\nbpo-44441\n:\nPy_RunMain()\nnow resets\nPyImport_Inittab\nto\nits initial value at exit. It must be possible to call\nPyImport_AppendInittab()\nor\nPyImport_ExtendInittab()\nat\neach Python initialization. Patch by Victor Stinner.\nbpo-39947\n: Remove 4 private trashcan C API functions which were only kept\nfor the backward compatibility of the stable ABI with Python 3.8 and\nolder, since the trashcan API was not usable with the limited C API on\nPython 3.8 and older. The trashcan API was excluded from the limited C API\nin Python 3.9.\nRemoved functions:\n_PyTrash_deposit_object()\n_PyTrash_destroy_chain()\n_PyTrash_thread_deposit_object()\n_PyTrash_thread_destroy_chain()\nThe trashcan C API was never usable with the limited C API, since old\ntrashcan macros accessed directly\nPyThreadState\nmembers like\n_tstate->trash_delete_nesting\n, whereas the\nPyThreadState\nstructure is opaque in the limited C API.\nExclude also the\nPyTrash_UNWIND_LEVEL\nconstant from the C API.\nPatch by Victor Stinner.\nbpo-40939\n: Removed documentation for the removed\nPyParser_*\nC API.\nbpo-43795\n: The list in\nContents of Limited API\nnow shows the public name\nPyFrameObject\nrather than\n_frame\n. The non-existing entry\n_node\nno longer appears in the list.\nbpo-44378\n:\nPy_IS_TYPE()\nno longer uses\nPy_TYPE()\nto avoid\na compiler warning: no longer cast\nconst\nPyObject*\nto\nPyObject*\n.\nPatch by Victor Stinner.\nbpo-39573\n: Convert the\nPy_TYPE()\nand\nPy_SIZE()\nmacros to\nstatic inline functions. The\nPy_SET_TYPE()\nand\nPy_SET_SIZE()\nfunctions must now be used to set an object type and\nsize. Patch by Victor Stinner.\nbpo-44263\n: The\nPyType_Ready()\nfunction now raises an error if a\ntype is defined with the\nPy_TPFLAGS_HAVE_GC\nflag set but has no\ntraverse function (\nPyTypeObject.tp_traverse\n). Patch by Victor\nStinner.\nbpo-43795\n: The undocumented function\nPy_FrozenMain()\nis removed\nfrom the Limited API.\nbpo-44113\n: Deprecate the following functions to configure the Python\ninitialization:\nPySys_AddWarnOptionUnicode()\nPySys_AddWarnOption()\nPySys_AddXOption()\nPySys_HasWarnOptions()\nPy_SetPath()\nPy_SetProgramName()\nPy_SetPythonHome()\nPy_SetStandardStreamEncoding()\n_Py_SetProgramFullPath()\nUse the new\nPyConfig\nAPI of the\nPython Initialization\nConfiguration\ninstead (\nPEP 587\n).\nbpo-44094\n: Remove\nPyErr_SetFromErrnoWithUnicodeFilename()\n,\nPyErr_SetFromWindowsErrWithUnicodeFilename()\n, and\nPyErr_SetExcFromWindowsErrWithUnicodeFilename()\n. They are not\ndocumented and have been deprecated since Python 3.3.\nbpo-43795\n:\nPyCodec_Unregister()\nis now properly exported as a\nfunction in the Windows Stable ABI DLL.\nbpo-44029\n: Remove deprecated\nPy_UNICODE\nAPIs:\nPyUnicode_Encode\n,\nPyUnicode_EncodeUTF7\n,\nPyUnicode_EncodeUTF8\n,\nPyUnicode_EncodeUTF16\n,\nPyUnicode_EncodeUTF32\n,\nPyUnicode_EncodeLatin1\n,\nPyUnicode_EncodeMBCS\n,\nPyUnicode_EncodeDecimal\n,\nPyUnicode_EncodeRawUnicodeEscape\n,\nPyUnicode_EncodeCharmap\n,\nPyUnicode_EncodeUnicodeEscape\n,\nPyUnicode_TransformDecimalToASCII\n,\nPyUnicode_TranslateCharmap\n,\nPyUnicodeEncodeError_Create\n,\nPyUnicodeTranslateError_Create\n. See\nPEP 393\nand\nPEP 624\nfor reference.\nbpo-42035\n: Add a new\nPyType_GetName()\nfunction to get type’s short\nname.\nPython 3.10.0 beta 1\n¶\nRelease date: 2021-05-03\nSecurity\n¶\nbpo-43434\n: Creating\nsqlite3.Connection\nobjects now also produces\nsqlite3.connect\nand\nsqlite3.connect/handle\nauditing events\n. Previously these events were only produced by\nsqlite3.connect()\ncalls. Patch by Erlend E. Aasland.\nbpo-43998\n: The\nssl\nmodule sets more secure cipher suites defaults.\nCiphers without forward secrecy and with SHA-1 MAC are disabled by\ndefault. Security level 2 prohibits weak RSA, DH, and ECC keys with less\nthan 112 bits of security.\nSSLContext\ndefaults to minimum\nprotocol version TLS 1.2. Settings are based on Hynek Schlawack’s\nresearch.\nbpo-43882\n: The presence of newline or tab characters in parts of a URL\ncould allow some forms of attacks.\nFollowing the controlling specification for URLs defined by WHATWG\nurllib.parse()\nnow removes ASCII newlines and tabs from URLs,\npreventing such attacks.\nbpo-43472\n: Ensures interpreter-level audit hooks receive the\ncpython.PyInterpreterState_New\nevent when called through the\n_xxsubinterpreters\nmodule.\nbpo-43362\n: Fix invalid free in _sha3 module. The issue was introduced in\n3.10.0a1. Python 3.9 and earlier are not affected.\nbpo-43762\n: Add audit events for\nsqlite3.connect/handle()\n,\nsqlite3.Connection.enable_load_extension()\n, and\nsqlite3.Connection.load_extension()\n. Patch by Erlend E. Aasland.\nbpo-43756\n: Add new audit event\nglob.glob/2\nto incorporate the new\nroot_dir\nand\ndir_fd\narguments added to\nglob.glob()\nand\nglob.iglob()\n.\nbpo-36384\n:\nipaddress\nmodule no longer accepts any leading zeros in\nIPv4 address strings. Leading zeros are ambiguous and interpreted as octal\nnotation by some libraries. For example the legacy function\nsocket.inet_aton()\ntreats leading zeros as octal notation. glibc\nimplementation of modern\ninet_pton()\ndoes not accept any\nleading zeros. For a while the\nipaddress\nmodule used to accept\nambiguous leading zeros.\nbpo-43075\n: Fix Regular Expression Denial of Service (ReDoS) vulnerability\nin\nurllib.request.AbstractBasicAuthHandler\n.  The ReDoS-vulnerable\nregex has quadratic worst-case complexity and it allows cause a denial of\nservice when identifying crafted invalid RFCs. This ReDoS issue is on the\nclient side and needs remote attackers to control the HTTP server.\nbpo-42800\n: Audit hooks are now fired for frame.f_code, traceback.tb_frame,\nand generator code/frame attribute access.\nbpo-37363\n: Add audit events to the\nhttp.client\nmodule.\nCore and Builtins\n¶\nbpo-43977\n: Prevent classes being both a sequence and a mapping when\npattern matching.\nbpo-43977\n: Use\ntp_flags\non the class object to\ndetermine if the subject is a sequence or mapping when pattern matching.\nAvoids the need to import\ncollections.abc\nwhen pattern matching.\nbpo-43892\n: Restore proper validation of complex literal value patterns\nwhen parsing\nmatch\nblocks.\nbpo-43933\n: Set frame.f_lineno to the line number of the ‘with’ kweyword\nwhen executing the call to\n__exit__\n.\nbpo-43933\n: If the current position in a frame has no line number then set\nthe f_lineno attribute to None, instead of -1, to conform to PEP 626. This\nshould not normally be possible, but might occur in some unusual\ncircumstances.\nbpo-43963\n: Importing the\n_signal\nmodule in a subinterpreter has no\nlonger side effects.\nbpo-42739\n: The internal representation of line number tables is changed to\nnot use sentinels, and an explicit length parameter is added to the out of\nprocess API function\nPyLineTable_InitAddressRange\n. This makes the\nhandling of line number tables more robust in some circumstances.\nbpo-43908\n: Make\nre\ntypes immutable. Patch by Erlend E. Aasland.\nbpo-43908\n: Make the\narray.array\ntype immutable. Patch by Erlend\nE. Aasland.\nbpo-43901\n: Change class and module objects to lazy-create empty\nannotations dicts on demand.  The annotations dicts are stored in the\nobject’s __dict__ for backwards compatibility.\nbpo-43892\n: Match patterns now use new dedicated AST nodes (\nMatchValue\n,\nMatchSingleton\n,\nMatchSequence\n,\nMatchStar\n,\nMatchMapping\n,\nMatchClass\n) rather than reusing expression AST nodes.\nMatchAs\nand\nMatchOr\nare now defined as pattern nodes rather than as expression\nnodes. Patch by Nick Coghlan.\nbpo-42725\n: Usage of\nawait\n/\nyield\n/\nyield\nfrom\nand named\nexpressions within an annotation is now forbidden when PEP 563 is\nactivated.\nbpo-43754\n: When performing structural pattern matching (\nPEP 634\n),\ncaptured names are now left unbound until the\nentire\npattern has matched\nsuccessfully.\nbpo-42737\n: Annotations for complex targets (everything beside simple\nnames) no longer cause any runtime effects with\nfrom\n__future__\nimport\nannotations\n.\nbpo-43914\n:\nSyntaxError\nexceptions raised by the interpreter will\nhighlight the full error range of the expression that constitutes the\nsyntax error itself, instead of just where the problem is detected. Patch\nby Pablo Galindo.\nbpo-38605\n: Revert making\nfrom\n__future__\nimport\nannotations\nthe\ndefault. This follows the Steering Council decision to postpone PEP 563\nchanges to at least Python 3.11. See the original email for more\ninformation regarding the decision:\nhttps://mail.python.org/archives/list/python-dev@python.org/thread/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/\n.\nPatch by Pablo Galindo.\nbpo-43475\n: Hashes of NaN values now depend on object identity.  Formerly,\nthey always hashed to 0 even though NaN values are not equal to one\nanother.  Having the same hash for unequal values caused pile-ups in hash\ntables.\nbpo-43859\n: Improve the error message for\nIndentationError\nexceptions. Patch by Pablo Galindo\nbpo-41323\n: Constant tuple folding in bytecode optimizer now reuses tuple\nin constant table.\nbpo-43846\n: Data stack usage is much reduced for large literal and call\nexpressions.\nbpo-38530\n: When printing\nNameError\nraised by the interpreter,\nPyErr_Display()\nwill offer suggestions of similar variable names\nin the function that the exception was raised from. Patch by Pablo Galindo\nbpo-43823\n: Improve syntax errors for invalid dictionary literals. Patch by\nPablo Galindo.\nbpo-43822\n: Improve syntax errors in the parser for missing commas between\nexpressions. Patch by Pablo Galindo.\nbpo-43798\n:\nast.alias\nnodes now include source location metadata\nattributes e.g. lineno, col_offset.\nbpo-43797\n: Improve\nSyntaxError\nerror messages for invalid comparisons.\nPatch by Pablo Galindo.\nbpo-43760\n: Move the flag for checking whether tracing is enabled to the C\nstack, from the heap. Should speed up dispatch in the interpreter.\nbpo-43682\n: Static methods (\n@staticmethod\n) and class\nmethods (\n@classmethod\n) now inherit the method\nattributes (\n__module__\n,\n__name__\n,\n__qualname__\n,\n__doc__\n,\n__annotations__\n) and have a new\n__wrapped__\nattribute. Patch by\nVictor Stinner.\nbpo-43751\n: Fixed a bug where\nanext(ait,\ndefault)\nwould erroneously\nreturn None.\nbpo-42128\n:\n__match_args__\nis no longer allowed to be a\nlist.\nbpo-43683\n: Add GEN_START opcode. Marks start of generator, including\nasync, or coroutine and handles sending values to a newly created\ngenerator or coroutine.\nbpo-43105\n: Importlib now resolves relative paths when creating module spec\nobjects from file locations.\nbpo-43682\n: Static methods (\n@staticmethod\n) are now\ncallable as regular functions. Patch by Victor Stinner.\nbpo-42609\n: Prevented crashes in the AST validator and optimizer when\ncompiling some absurdly long expressions like\n\"+0\"*1000000\n.\nRecursionError\nis now raised instead.\nbpo-38530\n: When printing\nAttributeError\n,\nPyErr_Display()\nwill offer suggestions of similar attribute names in the object that the\nexception was raised from. Patch by Pablo Galindo\nLibrary\n¶\nbpo-44015\n: In @dataclass(), raise a TypeError if KW_ONLY is specified more\nthan once.\nbpo-25478\n: Added a\ntotal()\nmethod to collections.Counter() to compute\nthe sum of the counts.\nbpo-43733\n: Change\nnetrc.netrc\nto use UTF-8 encoding before using\nlocale encoding.\nbpo-43979\n: Removed an unnecessary list comprehension before looping from\nurllib.parse.parse_qsl()\n.  Patch by Christoph Zwerschke and Donghee\nNa.\nbpo-43993\n: Update bundled pip to 21.1.1.\nbpo-43957\n: [Enum] Deprecate\nTypeError\nwhen non-member is used in a\ncontainment check; In 3.12\nTrue\nor\nFalse\nwill be returned instead,\nand containment will return\nTrue\nif the value is either a member of\nthat enum or one of its members’ value.\nbpo-42904\n: For backwards compatibility with previous minor versions of\nPython, if\ntyping.get_type_hints()\nreceives no namespace dictionary\narguments,\ntyping.get_type_hints()\nwill search through the global\nthen local namespaces during evaluation of stringized type annotations\n(string forward references) inside a class.\nbpo-43945\n: [Enum] Deprecate non-standard mixin format() behavior: in 3.12\nthe enum member, not the member’s value, will be used for format() calls.\nbpo-41139\n: Deprecate undocumented\ncgi.log()\nAPI.\nbpo-43937\n: Fixed the\nturtle\nmodule working with non-default root\nwindow.\nbpo-43930\n: Update bundled pip to 21.1 and setuptools to 56.0.0\nbpo-43907\n: Fix a bug in the pure-Python pickle implementation when using\nprotocol 5, where bytearray instances that occur several time in the\npickled object graph would incorrectly unpickle into repeated copies of\nthe bytearray object.\nbpo-43926\n: In\nimportlib.metadata\n, provide a uniform interface to\nDescription\n, allow for any field to be encoded with multiline values,\nremove continuation lines from multiline values, and add a\n.json\nproperty for easy access to the PEP 566 JSON-compatible form. Sync with\nimportlib_metadata\n4.0\n.\nbpo-43920\n: OpenSSL 3.0.0:\nload_verify_locations()\nnow returns a consistent error message when cadata contains no valid\ncertificate.\nbpo-43607\n:\nurllib\ncan now convert Windows paths with\n\\\\?\\\nprefixes into URL paths.\nbpo-43817\n: Add\ninspect.get_annotations()\n, which safely computes the\nannotations defined on an object.  It works around the quirks of accessing\nthe annotations from various types of objects, and makes very few\nassumptions about the object passed in.\ninspect.get_annotations()\ncan also correctly un-stringize stringized annotations.\ninspect.signature()\n,\ninspect.from_callable()\n, and\ninspect.from_function()\nnow call\ninspect.get_annotations()\nto\nretrieve annotations.  This means\ninspect.signature()\nand\ninspect.from_callable()\ncan now un-stringize stringized annotations,\ntoo.\nbpo-43284\n: platform.win32_ver derives the windows version from\nsys.getwindowsversion().platform_version which in turn derives the version\nfrom kernel32.dll (which can be of a different version than Windows\nitself). Therefore change the platform.win32_ver to determine the version\nusing the platform module’s _syscmd_ver private function to return an\naccurate version.\nbpo-42854\n: The\nssl\nmodule now uses\nSSL_read_ex\nand\nSSL_write_ex\ninternally. The functions support reading and writing of\ndata larger than 2 GB. Writing zero-length data no longer fails with a\nprotocol violation error.\nbpo-42333\n: Port\n_ssl\nextension module to multiphase initialization.\nbpo-43880\n:\nssl\nnow raises DeprecationWarning for OP_NO_SSL/TLS*\noptions, old TLS versions, old protocols, and other features that have\nbeen deprecated since Python 3.6, 3.7, or OpenSSL 1.1.0.\nbpo-41559\n:\nPEP 612\nis now implemented purely in Python; builtin\ntypes.GenericAlias\nobjects no longer include\ntyping.ParamSpec\nin\n__parameters__\n(with the exception of\ncollections.abc.Callable\n‘s\nGenericAlias\n). This means previously invalid uses of\nParamSpec\n(such as\nlist[P]\n) which worked in earlier versions of Python 3.10\nalpha, will now raise\nTypeError\nduring substitution.\nbpo-43867\n: The\nmultiprocessing\nServer\nclass now explicitly\ncatches\nSystemExit\nand closes the client connection in this case.\nIt happens when the\nServer.serve_client()\nmethod reaches the end of\nfile (EOF).\nbpo-40443\n: Remove unused imports: pyclbr no longer uses copy, and typing\nno longer uses ast. Patch by Victor Stinner.\nbpo-43820\n: Remove an unneeded copy of the namespace passed to\ndataclasses.make_dataclass().\nbpo-43787\n: Add\n__iter__()\nmethod to\nbz2.BZ2File\n,\ngzip.GzipFile\n, and\nlzma.LZMAFile\n. It makes iterating\nthem about 2x faster. Patch by Inada Naoki.\nbpo-43680\n: Deprecate io.OpenWrapper and _pyio.OpenWrapper: use io.open and\n_pyio.open instead. Until Python 3.9, _pyio.open was not a static method\nand builtins.open was set to OpenWrapper to not become a bound method when\nset to a class variable. _io.open is a built-in function whereas\n_pyio.open is a Python function. In Python 3.10, _pyio.open() is now a\nstatic method, and builtins.open() is now io.open().\nbpo-43680\n: The Python\n_pyio.open()\nfunction becomes a static method\nto behave as\nio.open()\nbuilt-in function: don’t become a bound\nmethod when stored as a class variable. It becomes possible since static\nmethods are now callable in Python 3.10. Moreover,\n_pyio.OpenWrapper()\nbecomes a simple alias to\n_pyio.open()\n.\nPatch by Victor Stinner.\nbpo-41515\n: Fix\nKeyError\nraised in\ntyping.get_type_hints()\ndue\nto synthetic modules that don’t appear in\nsys.modules\n.\nbpo-43776\n: When\nsubprocess.Popen\nargs are provided as a string or\nas\npathlib.Path\n, the Popen instance repr now shows the right\nthing.\nbpo-42248\n: [Enum] ensure exceptions raised in\n_missing__\nare released\nbpo-43744\n: fix issue with enum member name matching the start of a private\nvariable name\nbpo-43772\n: Fixed the return value of\nTypeVar.__ror__\n. Patch by Jelle\nZijlstra.\nbpo-43764\n: Add match_args parameter to @dataclass decorator to allow\nsuppression of __match_args__ generation.\nbpo-43799\n: OpenSSL 3.0.0: define\nOPENSSL_API_COMPAT\n1.1.1 to suppress\ndeprecation warnings. Python requires OpenSSL 1.1.1 APIs.\nbpo-43478\n: Mocks can no longer be used as the specs for other Mocks. As a\nresult, an already-mocked object cannot have an attribute mocked using\nautospec=True\nor be the subject of a\ncreate_autospec(...)\ncall.\nThis can uncover bugs in tests since these Mock-derived Mocks will always\npass certain tests (e.g.\nisinstance()\n) and builtin assert functions\n(e.g. assert_called_once_with) will unconditionally pass.\nbpo-43794\n: Add\nssl.OP_IGNORE_UNEXPECTED_EOF\nconstants (OpenSSL\n3.0.0)\nbpo-43785\n: Improve\nbz2.BZ2File\nperformance by removing the RLock from\nBZ2File. This makes BZ2File thread unsafe in the face of multiple\nsimultaneous readers or writers, just like its equivalent classes in\ngzip\nand\nlzma\nhave always been.  Patch by Inada Naoki.\nbpo-43789\n: OpenSSL 3.0.0: Don’t call the password callback function a\nsecond time when first call has signaled an error condition.\nbpo-43788\n: The header files for\nssl\nerror codes are now OpenSSL\nversion-specific. Exceptions will now show correct reason and library\ncodes. The\nmake_ssl_data.py\nscript has been rewritten to use OpenSSL’s\ntext file with error codes.\nbpo-43766\n: Implement\nPEP 647\nin the\ntyping\nmodule by adding\nTypeGuard\n.\nbpo-25264\n:\nos.path.realpath()\nnow accepts a\nstrict\nkeyword-only\nargument. When set to\nTrue\n,\nOSError\nis raised if a path doesn’t\nexist or a symlink loop is encountered.\nbpo-43780\n: In\nimportlib.metadata\n, incorporate changes from\nimportlib_metadata 3.10: Add mtime-based caching during distribution\ndiscovery. Flagged use of dict result from\nentry_points()\nas\ndeprecated.\ngh-47383\n: The\nP.args\nand\nP.kwargs\nattributes of\ntyping.ParamSpec\nare now instances of the new classes\ntyping.ParamSpecArgs\nand\ntyping.ParamSpecKwargs\n, which\nenables a more useful\nrepr()\n. Patch by Jelle Zijlstra.\nbpo-43731\n: Add an\nencoding\nparameter\nlogging.fileConfig()\n.\nbpo-43712\n: Add\nencoding\nand\nerrors\nparameters to\nfileinput.input()\nand\nfileinput.FileInput\n.\nbpo-38659\n: A\nsimple_enum\ndecorator is added to the\nenum\nmodule to\nconvert a normal class into an Enum.\ntest_simple_enum\nadded to test\nsimple enums against a corresponding normal Enum.  Standard library\nmodules updated to use\nsimple_enum\n.\nbpo-43764\n: Fix an issue where\n__match_args__\ngeneration\ncould fail for some\ndataclasses\n.\nbpo-43752\n: Fix\nsqlite3\nregression for zero-sized blobs with\nconverters, where\nb\"\"\nwas returned instead of\nNone\n. The regression\nwas introduced by PR 24723. Patch by Erlend E. Aasland.\nbpo-43655\n:\ntkinter\ndialog windows are now recognized as dialogs by\nwindow managers on macOS and X Window.\nbpo-43723\n: The following\nthreading\nmethods are now deprecated and\nshould be replaced:\ncurrentThread\n=>\nthreading.current_thread()\nactiveCount\n=>\nthreading.active_count()\nCondition.notifyAll\n=>\nthreading.Condition.notify_all()\nEvent.isSet\n=>\nthreading.Event.is_set()\nThread.setName\n=>\nthreading.Thread.name\nthread.getName\n=>\nthreading.Thread.name\nThread.isDaemon\n=>\nthreading.Thread.daemon\nThread.setDaemon\n=>\nthreading.Thread.daemon\nPatch by Jelle Zijlstra.\nbpo-2135\n: Deprecate find_module() and find_loader() implementations in\nimportlib and zipimport.\nbpo-43534\n:\nturtle.textinput()\nand\nturtle.numinput()\ncreate now\na transient window working on behalf of the canvas window.\nbpo-43532\n: Add the ability to specify keyword-only fields to dataclasses.\nThese fields will become keyword-only arguments to the generated __init__.\nbpo-43522\n: Fix problem with\nhostname_checks_common_name\n. OpenSSL does not copy\nhostflags from\nstruct SSL_CTX\nto\nstruct SSL\n.\nbpo-8978\n: Improve error message for\ntarfile.open()\nwhen\nlzma\n/\nbz2\nare unavailable.  Patch by Anthony Sottile.\nbpo-42967\n: Allow\nbytes\nseparator\nargument in\nurllib.parse.parse_qs\nand\nurllib.parse.parse_qsl\nwhen parsing\nstr\nquery strings. Previously, this raised a\nTypeError\n.\nbpo-43296\n: Improve\nsqlite3\nerror handling:\nsqlite3_value_blob()\nerrors that set\nSQLITE_NOMEM\nnow raise\nMemoryError\n. Patch by\nErlend E. Aasland.\nbpo-43312\n: New functions\nsysconfig.get_preferred_scheme()\nand\nsysconfig.get_default_scheme()\nare added to query a platform for its\npreferred “user”, “home”, and “prefix” (default) scheme names.\nbpo-43265\n: Improve\nsqlite3.Connection.backup()\nerror handling. The\nerror message for non-existent target database names is now\nunknown\ndatabase\n<database\nname>\ninstead of\nSQL\nlogic\nerror\n. Patch by Erlend\nE. Aasland.\nbpo-41282\n: Install schemes in\ndistutils.command.install\nare now loaded\nfrom\nsysconfig\n.\nbpo-41282\n:\ndistutils.sysconfig\nhas been merged to\nsysconfig\n.\nbpo-43176\n: Fixed processing of a dataclass that inherits from a frozen\ndataclass with no fields.  It is now correctly detected as an error.\nbpo-43080\n:\npprint\nnow has support for\ndataclasses.dataclass\n. Patch by Lewis Gaul.\nbpo-39950\n: Add\npathlib.Path.hardlink_to()\nmethod that supersedes\nlink_to()\n. The new method has the same argument order as\nsymlink_to()\n.\nbpo-42904\n:\ntyping.get_type_hints()\nnow checks the local namespace of\na class when evaluating\nPEP 563\nannotations inside said class.\nbpo-42269\n: Add\nslots\nparameter to\ndataclasses.dataclass\ndecorator\nto automatically generate\n__slots__\nfor class. Patch provided by Yurii\nKarabas.\nbpo-39529\n: Deprecated use of\nasyncio.get_event_loop()\nwithout\nrunning event loop. Emit deprecation warning for\nasyncio\nfunctions\nwhich implicitly create a\nFuture\nor\nTask\nobjects if there is no running event loop and no\nexplicit\nloop\nargument is passed:\nensure_future()\n,\nwrap_future()\n,\ngather()\n,\nshield()\n,\nas_completed()\nand constructors of\nFuture\n,\nTask\n,\nStreamReader\n,\nStreamReaderProtocol\n.\nbpo-18369\n: Certificate and PrivateKey classes were added to the ssl\nmodule. Certificates and keys can now be loaded from memory buffer, too.\nbpo-41486\n: Use a new output buffer management code for\nbz2\n/\nlzma\n/\nzlib\nmodules, and add\n.readall()\nfunction to\n_compression.DecompressReader\nclass. These bring some performance\nimprovements. Patch by Ma Lin.\nbpo-31870\n: The\nssl.get_server_certificate()\nfunction now has a\ntimeout\nparameter.\nbpo-41735\n: Fix thread locks in zlib module may go wrong in rare case.\nPatch by Ma Lin.\nbpo-36470\n: Fix dataclasses with\nInitVar\ns and\nreplace()\n. Patch by Claudiu Popa.\nbpo-40849\n: Expose X509_V_FLAG_PARTIAL_CHAIN ssl flag\nbpo-35114\n:\nssl.RAND_status()\nnow returns a boolean value (as\ndocumented) instead of\n1\nor\n0\n.\nbpo-39906\n:\npathlib.Path.stat()\nand\nchmod()\nnow\naccept a\nfollow_symlinks\nkeyword-only argument for consistency with\ncorresponding functions in the\nos\nmodule.\nbpo-39899\n:\nos.path.expanduser()\nnow refuses to guess Windows home\ndirectories if the basename of current user’s home directory does not\nmatch their username.\npathlib.Path.expanduser()\nand\nhome()\nnow\nconsistently raise\nRuntimeError\nexception when a home directory\ncannot be resolved. Previously a\nKeyError\nexception could be raised\non Windows when the\n\"USERNAME\"\nenvironment variable was unset.\nbpo-36076\n: Added SNI support to\nssl.get_server_certificate()\n.\nbpo-38490\n: Covariance, Pearson’s correlation, and simple linear regression\nfunctionality was added to statistics module. Patch by Tymoteusz Wołodźko.\nbpo-33731\n: Provide a locale.localize() function, which converts a\nnormalized number string into a locale format.\nbpo-32745\n: Fix a regression in the handling of ctypes’\nctypes.c_wchar_p\ntype: embedded null characters would cause a\nValueError\nto be raised. Patch by Zackery Spytz.\nDocumentation\n¶\nbpo-43987\n: Add “Annotations Best Practices” document as a new HOWTO.\nbpo-43977\n: Document the new\nPy_TPFLAGS_MAPPING\nand\nPy_TPFLAGS_SEQUENCE\ntype flags.\nbpo-43959\n: The documentation on the PyContextVar C-API was clarified.\nbpo-43938\n: Update dataclasses documentation to express that\nFrozenInstanceError is derived from AttributeError.\nbpo-43778\n: Fix the Sphinx glossary_search extension: create the _static/\nsub-directory if it doesn’t exist.\nbpo-43755\n: Update documentation to reflect that unparenthesized lambda\nexpressions can no longer be the expression part in an\nif\nclause in\ncomprehensions and generator expressions since Python 3.9.\nbpo-43739\n: Fixing the example code in Doc/extending/extending.rst to\ndeclare and initialize the pmodule variable to be of the right type.\nTests\n¶\nbpo-43961\n: Fix test_logging.test_namer_rotator_inheritance() on Windows:\nuse\nos.replace()\nrather than\nos.rename()\n. Patch by Victor\nStinner.\nbpo-43842\n: Fix a race condition in the SMTP test of test_logging. Don’t\nclose a file descriptor (socket) from a different thread while\nasyncore.loop() is polling the file descriptor. Patch by Victor Stinner.\nbpo-43843\n:\ntest.libregrtest\nnow marks a test as ENV_CHANGED\n(altered the execution environment) if a thread raises an exception but\ndoes not catch it. It sets a hook on\nthreading.excepthook()\n. Use\n--fail-env-changed\noption to mark the test as failed. Patch by Victor\nStinner.\nbpo-43811\n: Tests multiple OpenSSL versions on GitHub Actions. Use ccache\nto speed up testing.\nbpo-43791\n: OpenSSL 3.0.0: Disable testing of legacy protocols TLS 1.0 and\n1.1. Tests are failing with TLSV1_ALERT_INTERNAL_ERROR.\nBuild\n¶\nbpo-43567\n: Improved generated code refresh (AST/tokens/opcodes/keywords)\non Windows.\nbpo-43669\n: Implement\nPEP 644\n. Python now requires OpenSSL 1.1.1 or\nnewer.\nWindows\n¶\nbpo-35306\n: Adds additional arguments to\nos.startfile()\nfunction.\nbpo-43538\n: Avoid raising errors from\npathlib.Path.exists()\nwhen\npassed an invalid filename.\nbpo-38822\n: Fixed\nos.stat()\nfailing on inaccessible directories with\na trailing slash, rather than falling back to the parent directory’s\nmetadata. This implicitly affected\nos.path.exists()\nand\nos.path.isdir()\n.\nbpo-26227\n: Fixed decoding of host names in\nsocket.gethostbyaddr()\nand\nsocket.gethostbyname_ex()\n.\nbpo-40432\n: Updated pegen regeneration script on Windows to find and use\nPython 3.8 or higher.  Prior to this, pegen regeneration already required\n3.8 or higher, but the script may have used lower versions of Python.\nbpo-43745\n: Actually updates Windows release to OpenSSL 1.1.1k. Earlier\nreleases were mislabelled and actually included 1.1.1i again.\nbpo-43652\n: Update Tcl and Tk to 8.6.11 in Windows installer.\nbpo-43492\n: Upgrade Windows installer to use SQLite 3.35.5.\nbpo-30555\n: Fix\nWindowsConsoleIO\nerrors in the presence of fd\nredirection. Patch by Segev Finer.\nmacOS\n¶\nbpo-42119\n: Fix check for macOS SDK paths when building Python. Narrow\nsearch to match contents of SDKs, namely only files in\n/System/Library\n,\n/System/IOSSupport\n, and\n/usr\nother than\n/usr/local\n. Previously, anything under\n/System\nwas assumed to be\nin an SDK which causes problems with the new file system layout in 10.15+\nwhere user file systems may appear to be mounted under\n/System\n.  Paths\nin\n/Library\nwere also incorrectly treated as SDK locations.\nbpo-43568\n: Drop support for MACOSX_DEPLOYMENT_TARGET < 10.3\nbpo-44009\n: Provide “python3.x-intel64” executable to allow reliably\nforcing macOS universal2 framework builds to run under Rosetta 2 Intel-64\nemulation on Apple Silicon Macs.  This can be useful for testing or when\nuniversal2 wheels are not yet available.\nbpo-43851\n: Build SQLite with\nSQLITE_OMIT_AUTOINIT\non macOS. Patch by\nErlend E. Aasland.\nbpo-43492\n: Update macOS installer to use SQLite 3.35.4.\nbpo-42235\n:\nMac/BuildScript/build-installer.py\nwill now use\n“–enable-optimizations” and\n--with-lto\nwhen building on macOS 10.15\nor later.\nIDLE\n¶\nbpo-37903\n: Add mouse actions to the shell sidebar.  Left click and\noptional drag selects one or more lines, as with the editor line number\nsidebar.  Right click after selecting raises a context menu with ‘copy\nwith prompts’.  This zips together prompts from the sidebar with lines\nfrom the selected text.\nbpo-43981\n: Fix reference leak in test_sidebar and test_squeezer. Patches\nby Terry Jan Reedy and Pablo Galindo\nbpo-37892\n: Indent IDLE Shell input with spaces instead of tabs\nbpo-43655\n: IDLE dialog windows are now recognized as dialogs by window\nmanagers on macOS and X Window.\nbpo-37903\n: IDLE’s shell now shows prompts in a separate side-bar.\nC API\n¶\nbpo-43916\n: Add a new\nPy_TPFLAGS_DISALLOW_INSTANTIATION\ntype\nflag to disallow creating type instances. Patch by Victor Stinner.\nbpo-43774\n: Remove the now unused\nPYMALLOC_DEBUG\nmacro. Debug hooks on\nmemory allocators are now installed by default if Python is built in debug\nmode (if\nPy_DEBUG\nmacro is defined). Moreover, they can now be used on\nPython build in release mode (ex: using\nPYTHONMALLOC=debug\nenvironment\nvariable).\nbpo-43962\n: _PyInterpreterState_IDIncref() now calls\n_PyInterpreterState_IDInitref() and always increments id_refcount.\nPreviously, calling _xxsubinterpreters.get_current() could create an\nid_refcount inconsistency when a _xxsubinterpreters.InterpreterID object\nwas deallocated. Patch by Victor Stinner.\nbpo-28254\n: Add new C-API functions to control the state of the garbage\ncollector:\nPyGC_Enable()\n,\nPyGC_Disable()\n,\nPyGC_IsEnabled()\n, corresponding to the functions in the\ngc\nmodule.\nbpo-43908\n: Introduce\nPy_TPFLAGS_IMMUTABLETYPE\nflag for\nimmutable type objects, and modify\nPyType_Ready()\nto set it for\nstatic types. Patch by Erlend E. Aasland.\nbpo-43795\n:\nPyMem_Calloc()\nis now available in the limited C API\n(\nPy_LIMITED_API\n).\nbpo-43868\n:\nPyOS_ReadlineFunctionPointer()\nis no longer exported by\nlimited C API headers and by\npython3.dll\non Windows. Like any function\nthat takes\nFILE*\n, it is not part of the stable ABI.\nbpo-43795\n: Stable ABI and limited API definitions are generated from a\ncentral manifest (\nPEP 652\n).\nbpo-43753\n: Add the\nPy_Is(x,\ny)\nfunction to test if the\nx\nobject is the\ny\nobject, the same as\nx\nis\ny\nin Python. Add also\nthe\nPy_IsNone()\n,\nPy_IsTrue()\n,\nPy_IsFalse()\nfunctions to test if an object is, respectively, the\nNone\nsingleton,\nthe\nTrue\nsingleton or the\nFalse\nsingleton. Patch by Victor\nStinner.\nPython 3.10.0 alpha 7\n¶\nRelease date: 2021-04-05\nSecurity\n¶\nbpo-42988\n:\nCVE 2021-3426\n: Remove the\ngetfile\nfeature of the\npydoc\nmodule which could be abused to read arbitrary files on the\ndisk (directory traversal vulnerability). Moreover, even source code of\nPython modules can contain sensitive data like passwords. Vulnerability\nreported by David Schwörer.\nbpo-43285\n:\nftplib\nno longer trusts the IP address value returned\nfrom the server in response to the PASV command by default.  This prevents\na malicious FTP server from using the response to probe IPv4 address and\nport combinations on the client network.\nCode that requires the former vulnerable behavior may set a\ntrust_server_pasv_ipv4_address\nattribute on their\nftplib.FTP\ninstances to\nTrue\nto re-enable it.\nbpo-43439\n: Add audit hooks for\ngc.get_objects()\n,\ngc.get_referrers()\nand\ngc.get_referents()\n. Patch by Pablo\nGalindo.\nCore and Builtins\n¶\nbpo-27129\n: Update CPython bytecode magic number.\nbpo-43672\n: Raise ImportWarning when calling find_loader().\nbpo-43660\n: Fix crash that happens when replacing\nsys.stderr\nwith a\ncallable that can remove the object while an exception is being printed.\nPatch by Pablo Galindo.\nbpo-27129\n: The bytecode interpreter uses instruction, rather byte, offsets\ninternally. This reduces the number of EXTENDED_ARG instructions needed\nand streamlines instruction dispatch a bit.\nbpo-40645\n: Fix reference leak in the\n_hashopenssl\nextension. Patch\nby Pablo Galindo.\nbpo-42134\n: Calls to find_module() by the import system now raise\nImportWarning.\nbpo-41064\n: Improve the syntax error for invalid usage of double starred\nelements (‘**’) in f-strings. Patch by Pablo Galindo.\nbpo-43575\n: Speed up calls to\nmap()\nby using the\nPEP 590\nvectorcall\ncalling convention. Patch by Donghee Na.\nbpo-42137\n: The import system now prefers using\n__spec__\nfor\nModuleType.__repr__\nover\nmodule_repr()\n.\nbpo-43452\n: Added micro-optimizations to\n_PyType_Lookup()\nto improve\ncache lookup performance in the common case of cache hits.\nbpo-43555\n: Report the column offset for\nSyntaxError\nfor invalid\nline continuation characters. Patch by Pablo Galindo.\nbpo-43517\n: Fix misdetection of circular imports when using\nfrom\npkg.mod\nimport\nattr\n, which caused false positives in non-trivial multi-threaded\ncode.\nbpo-43497\n: Emit SyntaxWarnings for assertions with tuple constants, this\nis a regression introduced in python3.7\nbpo-39316\n: Tracing now has correct line numbers for attribute accesses\nwhen the attribute is on a different line from the object. Improves\ndebugging and profiling for multi-line method chains.\nbpo-35883\n: Python no longer fails at startup with a fatal error if a\ncommand line argument contains an invalid Unicode character. The\nPy_DecodeLocale()\nfunction now escapes byte sequences which would\nbe decoded as Unicode characters outside the [U+0000; U+10ffff] range.\nbpo-43410\n: Fix a bug that was causing the parser to crash when emitting\nsyntax errors when reading input from stdin. Patch by Pablo Galindo\nbpo-43406\n: Fix a possible race condition where\nPyErr_CheckSignals\ntries to execute a non-Python signal handler.\nbpo-42128\n: Add\n__match_args__\nto\nstruct sequence objects\n. Patch by Pablo Galindo.\nbpo-43390\n: CPython now sets the\nSA_ONSTACK\nflag in\nPyOS_setsig\nfor\nthe VM’s default signal handlers.  This is friendlier to other in-process\ncode that an extension module or embedding use could pull in (such as\nGolang’s cgo) where tiny thread stacks are the norm and\nsigaltstack()\nhas been used to provide for signal handlers.  This is a no-op change for\nthe vast majority of processes that don’t use sigaltstack.\nbpo-43287\n: Speed up calls to\nfilter()\nby using the\nPEP 590\nvectorcall\ncalling convention. Patch by Donghee Na.\nbpo-37448\n: Add a radix tree based memory map to track in-use obmalloc\narenas. Use to replace the old implementation of address_in_range(). The\nradix tree approach makes it easy to increase pool sizes beyond the OS\npage size. Boosting the pool and arena size allows obmalloc to handle a\nsignificantly higher percentage of requests from its ultra-fast paths.\nIt also has the advantage of eliminating the memory unsanitary behavior of\nthe previous address_in_range(). The old address_in_range() was marked\nwith the annotations _Py_NO_SANITIZE_ADDRESS, _Py_NO_SANITIZE_THREAD, and\n_Py_NO_SANITIZE_MEMORY. Those annotations are no longer needed.\nTo disable the radix tree map, set a preprocessor flag as follows:\n-DWITH_PYMALLOC_RADIX_TREE=0\n.\nCo-authored-by: Tim Peters <\ntim\n.\npeters\n@\ngmail\n.\ncom\n>\nbpo-29988\n: Only handle asynchronous exceptions and requests to drop the\nGIL when returning from a call or on the back edges of loops. Makes sure\nthat\n__exit__()\nis always called in with statements, even\nfor interrupts.\nLibrary\n¶\nbpo-43720\n: Document various stdlib deprecations in imp, pkgutil, and\nimportlib.util for removal in Python 3.12.\nbpo-43433\n:\nxmlrpc.client.ServerProxy\nno longer ignores query and\nfragment in the URL of the server.\nbpo-31956\n: The\nindex()\nmethod of\narray.array\nnow has optional\nstart\nand\nstop\nparameters.\nbpo-40066\n: Enum: adjust\nrepr()\nto show only enum and member name (not\nvalue, nor angle brackets) and\nstr()\nto show only member name.  Update\nand improve documentation to match.\nbpo-42136\n: Deprecate all module_repr() methods found in importlib as their\nuse is being phased out by Python 3.12.\nbpo-35930\n: Raising an exception raised in a “future” instance will create\nreference cycles.\nbpo-41369\n: Finish updating the vendored libmpdec to version 2.5.1.  Patch\nby Stefan Krah.\nbpo-43422\n: Revert the _decimal C API which was added in\nbpo-41324\n.\nbpo-43577\n: Fix deadlock when using\nssl.SSLContext\ndebug callback\nwith\nssl.SSLContext.sni_callback()\n.\nbpo-43571\n: It’s now possible to create MPTCP sockets with IPPROTO_MPTCP\nbpo-43542\n:\nimage/heic\nand\nimage/heif\nwere added to\nmimetypes\n.\nbpo-40645\n: The\nhmac\nmodule now uses OpenSSL’s HMAC implementation\nwhen digestmod argument is a hash name or builtin hash function.\nbpo-43510\n: Implement\nPEP 597\n: Add\nEncodingWarning\nwarning,\n-X\nwarn_default_encoding\noption,\nPYTHONWARNDEFAULTENCODING\nenvironment variable and\nencoding=\"locale\"\nargument value.\nbpo-43521\n:\nast.unparse\ncan now render NaNs and empty sets.\nbpo-42914\n:\npprint.pprint()\ngains a new boolean\nunderscore_numbers\noptional argument to emit integers with thousands\nseparated by an underscore character for improved readability (for example\n1_000_000\ninstead of\n1000000\n).\nbpo-41361\n:\nrotate()\ncalls are now slightly faster\ndue to faster argument parsing.\nbpo-43423\n:\nsubprocess.communicate()\nno longer raises an IndexError\nwhen there is an empty stdout or stderr IO buffer during a timeout on\nWindows.\nbpo-27820\n: Fixed long-standing bug of smtplib.SMTP where doing AUTH LOGIN\nwith initial_response_ok=False will fail.\nThe cause is that SMTP.auth_login _always_ returns a password if provided\nwith a challenge string, thus non-compliant with the standard for AUTH\nLOGIN.\nAlso fixes bug with the test for smtpd.\nbpo-43445\n: Add frozen modules to\nsys.stdlib_module_names\n. For\nexample, add\n\"_frozen_importlib\"\nand\n\"_frozen_importlib_external\"\nnames.\nbpo-43245\n: Add keyword arguments support to\nChainMap.new_child()\n.\nbpo-29982\n: Add optional parameter\nignore_cleanup_errors\nto\ntempfile.TemporaryDirectory()\nand allow multiple\ncleanup()\nattempts. Contributed by C.A.M. Gerlach.\nbpo-43428\n: Include changes from\nimportlib_metadata 3.7\n:\nPerformance enhancements to distribution discovery.\nentry_points\nonly returns unique distributions.\nIntroduces new\nEntryPoints\nobject for containing a set of entry points\nwith convenience methods for selecting entry points by group or name.\nentry_points\nnow returns this object if selection parameters are\nsupplied but continues to return a dict object for compatibility. Users\nare encouraged to rely on the selection interface. The dict object result\nis likely to be deprecated in the future.\nAdded packages_distributions function to return a mapping of packages to\nthe distributions that provide them.\nbpo-43332\n: Improves the networking efficiency of\nhttp.client\nwhen\nusing a proxy via\nset_tunnel()\n.  Fewer small send\ncalls are made during connection setup.\nbpo-43420\n: Improve performance of\nfractions.Fraction\narithmetics\nfor large components.  Contributed by Sergey B. Kirpichev.\nbpo-43356\n: Allow passing a signal number to\n_thread.interrupt_main()\n.\nbpo-43399\n: Fix\nElementTree.extend\nnot working on iterators when using\nthe Python implementation\nbpo-43369\n: Improve\nsqlite3\nerror handling: If\nsqlite3_column_text()\nand\nsqlite3_column_blob()\nset\nSQLITE_NOMEM\n,\nMemoryError\nis now raised. Patch by Erlend E.\nAasland.\nbpo-43368\n: Fix a regression introduced in PR 24562, where an empty\nbytestring was fetched as\nNone\ninstead of\nb''\nin\nsqlite3\n.\nPatch by Mariusz Felisiak.\nbpo-41282\n: Fixed stacklevel of\nDeprecationWarning\nemitted from\nimport\ndistutils\n.\nbpo-42129\n:\nimportlib.resources\nnow honors namespace packages, merging\nresources from each location in the namespace as introduced in\nimportlib_resources\n3.2 and including incidental changes through\n5.0.3.\nbpo-43295\n:\ndatetime.datetime.strptime()\nnow raises\nValueError\ninstead of\nIndexError\nwhen matching\n'z'\nwith the\n%z\nformat\nspecifier.\nbpo-43125\n: Return empty string if base64mime.body_encode receive empty\nbytes\nbpo-43084\n:\ncurses.window.enclose()\nreturns now\nTrue\nor\nFalse\n(as was documented) instead of\n1\nor\n0\n.\nbpo-42994\n: Add MIME types for opus, AAC, 3gpp and 3gpp2\nbpo-14678\n: Add an invalidate_caches() method to the zipimport.zipimporter\nclass to support importlib.invalidate_caches(). Patch by Desmond Cheong.\nbpo-42782\n: Fail fast in\nshutil.move()\nto avoid creating destination\ndirectories on failure.\nbpo-40066\n: Enum’s\nrepr()\nand\nstr()\nhave changed:\nrepr()\nis now\nEnumClass.MemberName\nand\nstr()\nis\nMemberName\n.  Additionally,\nstdlib Enum’s whose contents are available as module attributes, such as\nRegexFlag.IGNORECASE\n, have their\nrepr()\nas\nmodule.name\n, e.g.\nre.IGNORECASE\n.\nbpo-26053\n: Fixed bug where the\npdb\ninteractive run command echoed\nthe args from the shell command line, even if those have been overridden\nat the pdb prompt.\nbpo-24160\n: Fixed bug where breakpoints did not persist across multiple\ndebugger sessions in\npdb\n’s interactive mode.\nbpo-40701\n: When the\ntempfile.tempdir\nglobal variable is set to a\nvalue of type bytes, it is now handled consistently.  Previously\nexceptions could be raised from some tempfile APIs when the directory did\nnot already exist in this situation.  Also ensures that the\ntempfile.gettempdir()\nand\ntempfile.gettempdirb()\nfunctions\nalways\nreturn\nstr\nand\nbytes\nrespectively.\nbpo-39342\n: Expose\nX509_V_FLAG_ALLOW_PROXY_CERTS\nas\nVERIFY_ALLOW_PROXY_CERTS\nto allow proxy certificate\nvalidation as explained in\nhttps://docs.openssl.org/1.1.1/man7/proxy-certificates/\n.\nbpo-31861\n: Add builtins.aiter and builtins.anext. Patch by Joshua Bronson\n(@jab), Daniel Pope (@lordmauve), and Justin Wang (@justin39).\nDocumentation\n¶\nbpo-43199\n: Answer “Why is there no goto?” in the Design and History FAQ.\nbpo-43407\n: Clarified that a result from\ntime.monotonic()\n,\ntime.perf_counter()\n,\ntime.process_time()\n, or\ntime.thread_time()\ncan be compared with the result from any\nfollowing call to the same function - not just the next immediate call.\nbpo-43354\n: Fix type documentation for\nFault.faultCode\n; the type has to\nbe\nint\ninstead of\nstr\n.\nbpo-41933\n: Clarified wording of s * n in the Common Sequence Operations\nTests\n¶\nbpo-37945\n: Fix test_getsetlocale_issue1813() of test_locale: skip the test\nif\nsetlocale()\nfails. Patch by Victor Stinner.\nbpo-41561\n: Add workaround for Ubuntu’s custom OpenSSL security level\npolicy.\nBuild\n¶\nbpo-43179\n: Introduce and correctly use ALIGNOF_X in place of SIZEOF_X for\nalignment-related code in optimized string routines. Patch by Jessica\nClarke.\nbpo-43631\n: Update macOS, Windows, and CI to OpenSSL 1.1.1k.\nbpo-43617\n: Improve configure.ac: Check for presence of autoconf-archive\npackage and remove our copies of M4 macros.\nbpo-43466\n: The\nconfigure\nscript now supports\n--with-openssl-rpath\noption.\nbpo-43372\n: Use\n_freeze_importlib\nto generate code for the\n__hello__\nmodule. This approach ensures the code matches the\ninterpreter version.  Previously, PYTHON_FOR_REGEN was used to generate\nthe code, which might be wrong.  The marshal format for code objects has\nchanged with\nbpo-42246\n, commit 877df851. Update the code and the expected\ncode sizes in ctypes test_frozentable.\nWindows\n¶\nbpo-43440\n: Build\nsqlite3\nwith the\nR*Tree\nmodule enabled. Patch\nby Erlend E. Aasland.\nIDLE\n¶\nbpo-42225\n: Document that IDLE can fail on Unix either from misconfigured\nIP masquerade rules or failure displaying complex colored (non-ascii)\ncharacters.\nC API\n¶\nbpo-43688\n: The limited C API is now supported if Python is built in debug\nmode (if the\nPy_DEBUG\nmacro is defined). In the limited C API, the\nPy_INCREF()\nand\nPy_DECREF()\nfunctions are now implemented\nas opaque function calls, rather than accessing directly the\nPyObject.ob_refcnt\nmember, if Python is built in debug mode\nand the\nPy_LIMITED_API\nmacro targets Python 3.10 or newer. It became\npossible to support the limited C API in debug mode because the\nPyObject\nstructure is the same in release and debug mode since\nPython 3.8 (see\nbpo-36465\n).\nThe limited C API is still not supported in the\n--with-trace-refs\nspecial build (\nPy_TRACE_REFS\nmacro).\nPatch by Victor Stinner.\nbpo-43244\n: Remove the\npyarena.h\nheader file with functions:\nPyArena_New()\nPyArena_Free()\nPyArena_Malloc()\nPyArena_AddPyObject()\nThese functions were undocumented, excluded from the limited C API, and\nwere only used internally by the compiler. Patch by Victor Stinner.\nbpo-43244\n: Remove the compiler and parser functions using\nstruct\n_mod\ntype, because the public AST C API was removed:\nPyAST_Compile()\nPyAST_CompileEx()\nPyAST_CompileObject()\nPyFuture_FromAST()\nPyFuture_FromASTObject()\nPyParser_ASTFromFile()\nPyParser_ASTFromFileObject()\nPyParser_ASTFromFilename()\nPyParser_ASTFromString()\nPyParser_ASTFromStringObject()\nThese functions were undocumented and excluded from the limited C API.\nPatch by Victor Stinner.\nbpo-43244\n: Remove\nast.h\n,\nasdl.h\n, and\nPython-ast.h\nheader\nfiles. These functions were undocumented and excluded from the limited C\nAPI. Most names defined by these header files were not prefixed by\nPy\nand so could create names conflicts. For example,\nPython-ast.h\ndefined\na\nYield\nmacro which was conflict with the\nYield\nname used by the\nWindows\n<winbase.h>\nheader. Use the Python\nast\nmodule instead.\nPatch by Victor Stinner.\nbpo-43541\n: Fix a\nPyEval_EvalCodeEx()\nregression: fix reference\ncounting on builtins. Patch by Victor Stinner.\nbpo-43244\n: Remove the\nsymtable.h\nheader file and the undocumented\nfunctions:\nPyST_GetScope()\nPySymtable_Build()\nPySymtable_BuildObject()\nPySymtable_Free()\nPy_SymtableString()\nPy_SymtableStringObject()\nThe\nPy_SymtableString()\nfunction was part the stable ABI by mistake\nbut it could not be used, because the\nsymtable.h\nheader file was\nexcluded from the limited C API.\nThe Python\nsymtable\nmodule remains available and is unchanged.\nPatch by Victor Stinner.\nbpo-43244\n: Remove the\nPyAST_Validate()\nfunction. It is no longer\npossible to build a AST object (\nmod_ty\ntype) with the public C API.\nThe function was already excluded from the limited C API (\nPEP 384\n).\nPatch by Victor Stinner.\nPython 3.10.0 alpha 6\n¶\nRelease date: 2021-03-01\nSecurity\n¶\nbpo-42967\n: Fix web cache poisoning vulnerability by defaulting the query\nargs separator to\n&\n, and allowing the user to choose a custom\nseparator.\nCore and Builtins\n¶\nbpo-43321\n: Fix\nSystemError\nraised when\nPyArg_Parse*()\nis used with\n#\nbut without\nPY_SSIZE_T_CLEAN\ndefined.\nbpo-36346\n:\nPyArg_Parse*()\nfunctions now emits\nDeprecationWarning\nwhen\nu\nor\nZ\nformat is used. See\nPEP 623\nfor detail.\nbpo-43277\n: Add a new\nPySet_CheckExact()\nfunction to the C-API to\ncheck if an object is an instance of\nset\nbut not an instance of a\nsubtype. Patch by Pablo Galindo.\nbpo-42990\n: The\ntypes.FunctionType\nconstructor now inherits the\ncurrent builtins if the\nglobals\ndictionary has no\n\"__builtins__\"\nkey, rather than using\n{\"None\":\nNone}\nas builtins: same behavior as\neval()\nand\nexec()\nfunctions. Defining a function with\ndef\nfunction(...):\n...\nin Python is not affected, globals cannot be\noverridden with this syntax: it also inherits the current builtins. Patch\nby Victor Stinner.\nbpo-42990\n: Functions have a new\n__builtins__\nattribute which is used\nto look for builtin symbols when a function is executed, instead of\nlooking into\n__globals__['__builtins__']\n. Patch by Mark Shannon and\nVictor Stinner.\nbpo-43149\n: Improve the error message in the parser for exception groups\nwithout parentheses. Patch by Pablo Galindo.\nbpo-43121\n: Fixed an incorrect\nSyntaxError\nmessage for missing comma\nin literals. Patch by Pablo Galindo.\nbpo-42819\n:\nreadline\n: Explicitly disable bracketed paste in the\ninteractive interpreter, even if it’s set in the inputrc, is enabled by\ndefault (eg GNU Readline 8.1), or a user calls\nreadline.read_init_file()\n. The Python REPL has not implemented\nbracketed paste support. Also, bracketed mode writes the\n\"\\x1b[?2004h\"\nescape sequence into stdout which causes test failures in applications\nthat don’t support it. It can still be explicitly enabled by calling\nreadline.parse_and_bind(\"set\nenable-bracketed-paste\non\")\n. Patch by\nDustin Rodrigues.\nbpo-42808\n: Simple calls to\ntype(object)\nare now faster due to the\nvectorcall\ncalling convention. Patch by Dennis Sweeney.\nbpo-42217\n: Make the compiler merges same co_code and co_linetable objects\nin a module like already did for co_consts.\nbpo-41972\n: Substring search functions such as\nstr1\nin\nstr2\nand\nstr2.find(str1)\nnow sometimes use the “Two-Way” string comparison\nalgorithm to avoid quadratic behavior on long strings.\nbpo-42128\n: Implement\nPEP 634\n(structural pattern matching). Patch by\nBrandt Bucher.\nbpo-40692\n: In the\nconcurrent.futures.ProcessPoolExecutor\n,\nvalidate that\nmultiprocess.synchronize()\nis available on a given\nplatform and rely on that check in the\nconcurrent.futures\ntest\nsuite so we can run tests that are unrelated to\nProcessPoolExecutor\non those platforms.\nbpo-38302\n: If\nobject.__ipow__()\nreturns\nNotImplemented\n, the\noperator will correctly fall back to\nobject.__pow__()\nand\nobject.__rpow__()\nas expected.\nLibrary\n¶\nbpo-43316\n: The\npython\n-m\ngzip\ncommand line application now properly\nfails when detecting an unsupported extension. It exits with a non-zero\nexit code and prints an error message to stderr.\nbpo-43317\n: Set the chunk size for the\ngzip\nmodule main function to\nio.DEFAULT_BUFFER_SIZE. This is slightly faster than the 1024 bytes\nconstant that was used previously.\nbpo-43146\n: Handle None in single-arg versions of\nprint_exception()\nand\nformat_exception()\n.\nbpo-43260\n: Fix TextIOWrapper can not flush internal buffer forever after\nvery large text is written.\nbpo-43258\n: Prevent needless allocation of\nsqlite3\naggregate\nfunction context when no rows match an aggregate query. Patch by Erlend E.\nAasland.\nbpo-43251\n: Improve\nsqlite3\nerror handling:\nsqlite3_column_name()\nfailures now result in\nMemoryError\n. Patch\nby Erlend E. Aasland.\nbpo-40956\n: Fix segfault in\nsqlite3.Connection.backup()\nif no\nargument was provided. The regression was introduced by PR 23838. Patch by\nErlend E. Aasland.\nbpo-43172\n: The readline module now passes its tests when built directly\nagainst libedit. Existing irreconcilable API differences remain in\nreadline.get_begidx()\nand\nreadline.get_endidx()\nbehavior based\non libreadline vs libedit use.\nbpo-43163\n: Fix a bug in\ncodeop\nthat was causing it to not ask for\nmore input when multi-line snippets have unclosed parentheses. Patch by\nPablo Galindo\nbpo-43162\n: deprecate unsupported ability to access enum members as\nattributes of other enum members\nbpo-43146\n: Fix recent regression in None argument handling in\ntraceback\nmodule functions.\nbpo-43102\n: The namedtuple __new__ method had its __builtins__ set to None\ninstead of an actual dictionary.  This created problems for introspection\ntools.\nbpo-43106\n: Added\nO_EVTONLY\n,\nO_FSYNC\n,\nO_SYMLINK\nand\nO_NOFOLLOW_ANY\nfor macOS. Patch by\nDonghee Na.\nbpo-42960\n: Adds\nresource.RLIMIT_KQUEUES\nconstant from FreeBSD to\nthe\nresource\nmodule.\nbpo-42151\n: Make the pure Python implementation of\nxml.etree.ElementTree\nbehave the same as the C implementation\n(\n_elementree\n) regarding default attribute values (by not setting\nspecified_attributes=1\n).\nbpo-29753\n: In ctypes, now packed bitfields are calculated properly and the\nfirst item of packed bitfields is now shrank correctly.\nDocumentation\n¶\nbpo-27646\n: Clarify that ‘yield from <expr>’ works with any iterable, not\njust iterators.\nbpo-36346\n: Update some deprecated unicode APIs which are documented as\n“will be removed in 4.0” to “3.12”. See\nPEP 623\nfor detail.\nTests\n¶\nbpo-43288\n: Fix test_importlib to correctly skip Unicode file tests if the\nfilesystem does not support them.\nBuild\n¶\nbpo-43174\n: Windows build now uses\n/utf-8\ncompiler option.\nbpo-43103\n: Add a new configure\n--without-static-libpython\noption to\nnot build the\nlibpythonMAJOR.MINOR.a\nstatic library and not install\nthe\npython.o\nobject file.\nbpo-13501\n: The configure script can now use\nlibedit\ninstead of\nreadline\nwith the command line option\n--with-readline=editline\n.\nbpo-42603\n: Make configure script use pkg-config to detect the location of\nTcl/Tk headers and libraries, used to build tkinter.\nOn macOS, a Tcl/Tk configuration provided by pkg-config will be preferred\nover Tcl/Tk frameworks installed in\n/{System/,}Library/Frameworks\n. If\nboth exist and the latter is preferred, the appropriate\n--with-tcltk-*\nconfiguration options need to be explicitly set.\nbpo-39448\n: Add the “regen-frozen” makefile target that regenerates the\ncode for the frozen\n__hello__\nmodule.\nWindows\n¶\nbpo-43155\n:\nPyCMethod_New()\nis now present in\npython3.lib\n.\nmacOS\n¶\nbpo-41837\n: Update macOS installer build to use OpenSSL 1.1.1j.\nIDLE\n¶\nbpo-43283\n: Document why printing to IDLE’s Shell is often slower than\nprinting to a system terminal and that it can be made faster by\npre-formatting a single string before printing.\nC API\n¶\nbpo-43278\n: Always put compiler and system information on the first line of\nthe REPL welcome message.\nbpo-43270\n: Remove the private\n_PyErr_OCCURRED()\nmacro: use the public\nPyErr_Occurred()\nfunction instead.\nbpo-35134\n: Move odictobject.h, parser_interface.h, picklebufobject.h,\npydebug.h, and pyfpe.h into the cpython/ directory. They must not be\nincluded directly, as they are already included by Python.h:\nInclude\nFiles\n.\nbpo-35134\n: Move pyarena.h, pyctype.h, and pytime.h into the cpython/\ndirectory. They must not be included directly, as they are already\nincluded by Python.h:\nInclude Files\n.\nbpo-40170\n:\nPyExceptionClass_Name()\nis now always declared as a\nfunction, in order to hide implementation details. The macro accessed\nPyTypeObject.tp_name\ndirectly.  Patch by Erlend E. Aasland.\nbpo-43239\n: The\nPyCFunction_New()\nfunction is now exported in the\nABI when compiled with\n-fvisibility=hidden\n.\nbpo-40170\n:\nPyIter_Check()\nis now always declared as a function, in\norder to hide implementation details. The macro accessed\nPyTypeObject.tp_iternext\ndirectly. Patch by Erlend E. Aasland.\nbpo-40170\n: Convert\nPyDescr_IsData()\nmacro to a function to hide\nimplementation details: The macro accessed\nPyTypeObject.tp_descr_set\ndirectly. Patch by Erlend E.\nAasland.\nbpo-43181\n: Convert\nPyObject_TypeCheck()\nmacro to a static inline\nfunction. Patch by Erlend E. Aasland.\nPython 3.10.0 alpha 5\n¶\nRelease date: 2021-02-02\nSecurity\n¶\nbpo-42938\n: Avoid static buffers when computing the repr of\nctypes.c_double\nand\nctypes.c_longdouble\nvalues.\nCore and Builtins\n¶\nbpo-42990\n: Refactor the\nPyEval_\nfamily of functions.\nAn new function\n_PyEval_Vector\nis added to simplify calls to Python from C.\n_PyEval_EvalCodeWithName\nis removed\nPyEval_EvalCodeEx\nis retained as part of the API, but is not used internally\nbpo-38631\n: Replace\nPy_FatalError()\ncalls in the compiler with\nregular\nSystemError\nexceptions. Patch by Victor Stinner.\nbpo-42997\n: Improve error message for missing “:” before blocks. Patch by\nPablo Galindo.\nbpo-43017\n: Improve error message in the parser when using un-parenthesised\ntuples in comprehensions. Patch by Pablo Galindo.\nbpo-42986\n: Fix parser crash when reporting syntax errors in f-string with\nnewlines. Patch by Pablo Galindo.\nbpo-40176\n: Syntax errors for unterminated string literals now point to the\nstart of the string instead of reporting EOF/EOL.\nbpo-42927\n: The inline cache for\nLOAD_ATTR\nnow also optimizes access to\nattributes defined by\n__slots__\n. This makes reading such attribute up\nto 30% faster.\nbpo-42864\n: Improve error messages in the parser when parentheses are not\nclosed. Patch by Pablo Galindo.\nbpo-42924\n: Fix\nbytearray\nrepetition incorrectly copying data from the\nstart of the buffer, even if the data is offset within the buffer (e.g.\nafter reassigning a slice at the start of the\nbytearray\nto a shorter\nbyte string).\nbpo-42882\n: Fix the\n_PyUnicode_FromId()\nfunction\n(_Py_IDENTIFIER(var) API) when\nPy_Initialize()\n/\nPy_Finalize()\nis called multiple times: preserve\n_PyRuntime.unicode_ids.next_index\nvalue.\nbpo-42827\n: Fix a crash when working out the error line of a\nSyntaxError\nin some multi-line expressions.\nbpo-42823\n: frame.f_lineno is correct even if frame.f_trace is set to True\nbpo-37324\n: Remove deprecated aliases to\nCollections Abstract Base Classes\nfrom the\ncollections\nmodule.\nbpo-41994\n: Fixed possible leak in\nimport\nwhen\nsys.modules\nis not a\ndict\n.\nbpo-27772\n: In string formatting, preceding the\nwidth\nfield by\n'0'\nno\nlonger affects the default alignment for strings.\nLibrary\n¶\nbpo-43108\n: Fixed a reference leak in the\ncurses\nmodule. Patch by\nPablo Galindo\nbpo-43077\n: Update the bundled pip to 21.0.1 and setuptools to 52.0.0.\nbpo-41282\n: Deprecate\ndistutils\nin documentation and add warning on\nimport.\nbpo-43014\n: Improve performance of\ntokenize\nby 20-30%.  Patch by\nAnthony Sottile.\nbpo-42323\n: Fix\nmath.nextafter()\nfor NaN on AIX.\nbpo-42955\n: Add\nsys.stdlib_module_names\n, containing the list of the\nstandard library module names. Patch by Victor Stinner.\nbpo-42944\n: Fix\nrandom.Random.sample\nwhen\ncounts\nargument is not\nNone\n.\nbpo-42934\n: Use\nTracebackException\n’s new\ncompact\nparam in\nTestResult\nto reduce time and memory consumed\nby traceback formatting.\nbpo-42931\n: Add\nrandbytes()\nto\nrandom.__all__\n.\nbpo-38250\n: [Enum] Flags consisting of a single bit are now considered\ncanonical, and will be the only flags returned from listing and iterating\nover a Flag class or a Flag member.  Multi-bit flags are considered\naliases; they will be returned from lookups and operations that result in\ntheir value. Iteration for both Flag and Flag members is in definition\norder.\nbpo-42877\n: Added the\ncompact\nparameter to the constructor of\ntraceback.TracebackException\nto reduce time and memory for use\ncases that only need to call\nTracebackException.format()\nand\nTracebackException.format_exception_only()\n.\nbpo-42923\n: The\nPy_FatalError()\nfunction and the\nfaulthandler\nmodule now dump the list of extension modules on a\nfatal error.\nbpo-42848\n: Removed recursion from\nTracebackException\nto allow it to handle long exception chains.\nbpo-42901\n: [Enum] move member creation from\nEnumMeta.__new__\nto\n_proto_member.__set_name__\n, allowing members to be created and visible\nin\n__init_subclass__\n.\nbpo-42780\n: Fix os.set_inheritable() for O_PATH file descriptors on Linux.\nbpo-42866\n: Fix a reference leak in the\ngetcodec()\nfunction of CJK\ncodecs. Patch by Victor Stinner.\nbpo-42846\n: Convert the 6 CJK codec extension modules (_codecs_cn,\n_codecs_hk, _codecs_iso2022, _codecs_jp, _codecs_kr and _codecs_tw) to the\nmultiphase initialization API (\nPEP 489\n). Patch by Victor Stinner.\nbpo-42851\n: remove __init_subclass__ support for Enum members\nbpo-42834\n: Make internal caches of the\n_json\nmodule compatible with\nsubinterpreters.\nbpo-41748\n: Fix HTMLParser parsing rules for element attributes containing\ncommas with spaces. Patch by Karl Dubost.\nbpo-40810\n: Require SQLite 3.7.15 or newer. Patch by Erlend E. Aasland.\nbpo-1635741\n: Convert the _multibytecodec extension module (CJK codecs) to\nmulti-phase initialization (\nPEP 489\n).  Patch by Erlend E. Aasland.\nbpo-42802\n: The distutils\nbdist_wininst\ncommand deprecated in Python\n3.8 has been removed. The distutils\nbdist_wheel\ncommand is now\nrecommended to distribute binary packages on Windows.\nbpo-24464\n: The undocumented built-in function\nsqlite3.enable_shared_cache\nis now deprecated, scheduled for removal\nin Python 3.12.  Its use is strongly discouraged by the SQLite3\ndocumentation.  Patch by Erlend E. Aasland.\nbpo-42384\n: Make pdb populate sys.path[0] exactly the same as regular\npython execution.\nbpo-42383\n: Fix pdb: previously pdb would fail to restart the debugging\ntarget if it was specified using a relative path and the current directory\nchanged.\nbpo-42005\n: Fix CLI of\ncProfile\nand\nprofile\nto catch\nBrokenPipeError\n.\nbpo-41604\n: Don’t decrement the reference count of the previous user_ptr\nwhen set_panel_userptr fails.\nbpo-41149\n: Allow executing callables that have a boolean value of\nFalse\nwhen passed to\nThreading.thread\nas the target. Patch\ncontributed by Barney Stratford.\nbpo-38307\n: Add an ‘end_lineno’ attribute to the Class and Function objects\nthat appear in the tree returned by pyclbr functions.  This and the\nexisting ‘lineno’ attribute define the extent of class and def statements.\nPatch by Aviral Srivastava.\nbpo-39273\n: The\nBUTTON5_*\nconstants are now exposed in the\ncurses\nmodule if available.\nbpo-33289\n: Correct call to\ntkinter.colorchooser\nto return RGB\ntriplet of ints instead of floats.  Patch by Cheryl Sabella.\nDocumentation\n¶\nbpo-40304\n: Fix doc for type(name, bases, dict).  Patch by Boris\nVerkhovskiy and Éric Araujo.\nbpo-42811\n: Updated importlib.util.resolve_name() doc to use\n__spec__.parent instead of __package__. (Thanks Yair Frid.)\nTests\n¶\nbpo-40823\n: Use\nunittest.TestLoader().loadTestsFromTestCase()\ninstead\nof\nunittest.makeSuite()\nin\nsqlite3\ntests. Patch by Erlend E.\nAasland.\nbpo-40810\n: In\nsqlite3\n, fix\nCheckTraceCallbackContent\nfor SQLite\npre 3.7.15.\nBuild\n¶\nbpo-43031\n: Pass\n--timeout=$(TESTTIMEOUT)\noption to the default profile\ntask\n./python\n-m\ntest\n--pgo\ncommand.\nbpo-36143\n:\nmake\nregen-all\nnow also runs\nregen-keyword\n. Patch by\nVictor Stinner.\nbpo-42874\n: Removed the grep -q and -E flags in the tzpath validation\nsection of the configure script to better accommodate users of some\nplatforms (specifically Solaris 10).\nbpo-31904\n: Add library search path by wr-cc in add_cross_compiling_paths()\nfor VxWorks.\nbpo-42856\n: Add\n--with-wheel-pkg-dir=PATH\noption to the\n./configure\nscript. If specified, the\nensurepip\nmodule looks for\nsetuptools\nand\npip\nwheel packages in this directory: if both are present, these\nwheel packages are used instead of ensurepip bundled wheel packages.\nSome Linux distribution packaging policies recommend against bundling\ndependencies. For example, Fedora installs wheel packages in the\n/usr/share/python-wheels/\ndirectory and don’t install the\nensurepip._bundled\npackage.\nWindows\n¶\nbpo-41837\n: Updated Windows installer to include OpenSSL 1.1.1i\nbpo-42584\n: Upgrade Windows installer to use SQLite 3.34.0.\nmacOS\n¶\nbpo-42504\n: Ensure that the value of\nsysconfig.get_config_var(‘MACOSX_DEPLOYMENT_TARGET’) is always a string,\neven in when the value is parsable as an integer.\nIDLE\n¶\nbpo-43008\n: Make IDLE invoke\nsys.excepthook()\nin normal, 2-process\nmode. Patch by Ken Hilton.\nbpo-33065\n: Fix problem debugging user classes with __repr__ method.\nbpo-23544\n: Disable Debug=>Stack Viewer when user code is running or\nDebugger is active, to prevent hang or crash.  Patch by Zackery Spytz.\nbpo-32631\n: Finish zzdummy example extension module: make menu entries\nwork; add docstrings and tests with 100% coverage.\nC API\n¶\nbpo-42979\n: When Python is built in debug mode (with C assertions), calling\na type slot like\nsq_length\n(\n__len__()\nin Python) now fails with a\nfatal error if the slot succeeded with an exception set, or failed with no\nexception set. The error message contains the slot, the type name, and the\ncurrent exception (if an exception is set). Patch by Victor Stinner.\nbpo-43030\n: Fixed a compiler warning in\nPy_UNICODE_ISSPACE()\non\nplatforms with signed\nwchar_t\n.\nPython 3.10.0 alpha 4\n¶\nRelease date: 2021-01-04\nCore and Builtins\n¶\nbpo-42814\n: Fix undefined behavior in\nObjects/genericaliasobject.c\n.\nbpo-42806\n: Fix the column offsets for f-strings\nast\nnodes\nsurrounded by parentheses and for nodes that spawn multiple lines. Patch\nby Pablo Galindo.\nbpo-40631\n: Fix regression where a single parenthesized starred expression\nwas a valid assignment target.\nbpo-27794\n: Improve the error message for failed writes/deletes to property\nobjects. When possible, the attribute name is now shown. Patch provided by\nYurii Karabas.\nbpo-42745\n: Make the type attribute lookup cache per-interpreter. Patch by\nVictor Stinner.\nbpo-42246\n: Jumps to jumps are not eliminated when it would break PEP 626.\nbpo-42246\n: Make sure that the\nf_lasti\nand\nf_lineno\nattributes of a\nframe are set correctly when an exception is raised or re-raised. Required\nfor PEP 626.\nbpo-32381\n: The coding cookie (ex:\n#\ncoding:\nlatin1\n) is now ignored in\nthe command passed to the\n-c\ncommand line option. Patch by\nVictor Stinner.\nbpo-30858\n: Improve error location in expressions that contain assignments.\nPatch by Pablo Galindo and Lysandros Nikolaou.\nbpo-42615\n: Remove jump commands made redundant by the deletion of\nunreachable bytecode blocks\nbpo-42639\n: Make the\natexit\nmodule state per-interpreter. It is now\nsafe have more than one\natexit\nmodule instance. Patch by Donghee Na\nand Victor Stinner.\nbpo-32381\n: Fix encoding name when running a\n.pyc\nfile on Windows:\nPyRun_SimpleFileExFlags()\nnow uses the correct encoding to\ndecode the filename.\nbpo-42195\n: The\n__args__\nof the parameterized generics for\ntyping.Callable\nand\ncollections.abc.Callable\nare now\nconsistent.  The\n__args__\nfor\ncollections.abc.Callable\nare\nnow flattened while\ntyping.Callable\n’s have not changed.  To allow\nthis change,\ntypes.GenericAlias\ncan now be subclassed and\ncollections.abc.Callable\n’s\n__class_getitem__\nwill now return a\nsubclass of\ntypes.GenericAlias\n.  Tests for typing were also updated to\nnot subclass things like\nCallable[...,\nT]\nas that is not a valid base\nclass.  Finally, both\nCallable\ns no longer validate their\nargtypes\n, in\nCallable[[argtypes],\nresulttype]\nto prepare for\nPEP 612\n.  Patch by Ken Jin.\nbpo-40137\n: Convert functools module to use\nPyType_FromModuleAndSpec()\n.\nbpo-40077\n: Convert\narray\nto use heap types, and establish module\nstate for these.\nbpo-42008\n: Fix _random.Random() seeding.\nbpo-1635741\n: Port the\npyexpat\nextension module to multi-phase\ninitialization (\nPEP 489\n).\nbpo-40521\n: Make the Unicode dictionary of interned strings compatible with\nsubinterpreters. Patch by Victor Stinner.\nbpo-39465\n: Make\n_PyUnicode_FromId()\nfunction compatible with\nsubinterpreters. Each interpreter now has an array of identifier objects\n(interned strings decoded from UTF-8). Patch by Victor Stinner.\nLibrary\n¶\nbpo-42257\n: Handle empty string in variable executable in\nplatform.libc_ver()\nbpo-42772\n: randrange() now raises a TypeError when step is specified\nwithout a stop argument.  Formerly, it silently ignored the step argument.\nbpo-42759\n: Fixed equality comparison of\ntkinter.Variable\nand\ntkinter.font.Font\n. Objects which belong to different Tcl\ninterpreters are now always different, even if they have the same name.\nbpo-42756\n: Configure LMTP Unix-domain socket to use socket global default\ntimeout when a timeout is not explicitly provided.\nbpo-23328\n: Allow / character in username, password fields on _PROXY\nenvars.\nbpo-42740\n:\ntyping.get_args()\nand\ntyping.get_origin()\nnow\nsupport\nPEP 604\nunion types and\nPEP 612\nadditions to\nCallable\n.\nbpo-42655\n:\nsubprocess\nextra_groups\nis now correctly passed into\nsetgroups() system call.\nbpo-42727\n:\nEnumMeta.__prepare__\nnow accepts\n**kwds\nto properly\nsupport\n__init_subclass__\nbpo-38308\n: Add optional\nweights\nto\nstatistics.harmonic_mean()\n.\nbpo-42721\n: When simple query dialogs (\ntkinter.simpledialog\n),\nmessage boxes (\ntkinter.messagebox\n) or color choose dialog\n(\ntkinter.colorchooser\n) are created without arguments\nmaster\nand\nparent\n, and the default root window is not yet created, and\nNoDefaultRoot()\nwas not called, a new temporal hidden root\nwindow will be created automatically. It will not be set as the default\nroot window and will be destroyed right after closing the dialog window.\nIt will help to use these simple dialog windows in programs which do not\nneed other GUI.\nbpo-25246\n: Optimized\ncollections.deque.remove()\n.\nbpo-35728\n: Added a root parameter to\ntkinter.font.nametofont()\n.\nbpo-15303\n:\ntkinter\nsupports now widgets with boolean value False.\nbpo-42681\n: Fixed range checks for color and pair numbers in\ncurses\n.\nbpo-42685\n: Improved placing of simple query windows in Tkinter (such as\ntkinter.simpledialog.askinteger()\n). They are now centered at the\ncenter of the parent window if it is specified and shown, otherwise at the\ncenter of the screen.\nbpo-9694\n: Argparse help no longer uses the confusing phrase, “optional\narguments”. It uses “options” instead.\nbpo-1635741\n: Port the\n_thread\nextension module to the multiphase\ninitialization API (\nPEP 489\n) and convert its static types to heap\ntypes.\nbpo-37961\n: Fix crash in\ntracemalloc.Traceback.__repr__()\n(regressed\nin Python 3.9).\nbpo-42630\n:\ntkinter\nfunctions and constructors which need a default\nroot window raise now\nRuntimeError\nwith descriptive message instead\nof obscure\nAttributeError\nor\nNameError\nif it is not created\nyet or cannot be created automatically.\nbpo-42639\n:\natexit._run_exitfuncs()\nnow logs callback exceptions\nusing\nsys.unraisablehook\n, rather than logging them directly into\nsys.stderr\nand raise the last exception.\nbpo-42644\n:\nlogging.disable\nwill now validate the types and value of\nits parameter. It also now accepts strings representing the levels (as\ndoes\nlogging.setLevel\n) instead of only the numerical values.\nbpo-42639\n: At Python exit, if a callback registered with\natexit.register()\nfails, its exception is now logged. Previously,\nonly some exceptions were logged, and the last exception was always\nsilently ignored.\nbpo-36541\n: Fixed lib2to3.pgen2 to be able to parse PEP-570 positional only\nargument syntax.\nbpo-42382\n: In\nimportlib.metadata\n: -\nEntryPoint\nobjects now expose\na\n.dist\nobject referencing the\nDistribution\nwhen constructed from\na\nDistribution\n. - Add support for package discovery under package\nnormalization rules. - The object returned by\nmetadata()\nnow has a\nformally defined protocol called\nPackageMetadata\nwith declared support\nfor the\n.get_all()\nmethod. - Synced with importlib_metadata 3.3.\nbpo-41877\n: A check is added against misspellings of autospect, auto_spec\nand set_spec being passed as arguments to patch, patch.object and\ncreate_autospec.\nbpo-39717\n: [tarfile] update nested exception raising to use\nfrom\nNone\nor\nfrom\ne\nbpo-41877\n: AttributeError for suspected misspellings of assertions on\nmocks are now pointing out that the cause are misspelled assertions and\nalso what to do if the misspelling is actually an intended attribute name.\nThe unittest.mock document is also updated to reflect the current set of\nrecognised misspellings.\nbpo-41559\n: Implemented\nPEP 612\n: added\nParamSpec\nand\nConcatenate\nto\ntyping\n.  Patch by Ken Jin.\nbpo-42385\n: StrEnum: fix _generate_next_value_ to return a str\nbpo-31904\n: Define THREAD_STACK_SIZE for VxWorks.\nbpo-34750\n: [Enum]\n_EnumDict.update()\nis now supported.\nbpo-42517\n: Enum: private names do not become members / do not generate\nerrors – they remain normal attributes\nbpo-42678\n:\nEnum\n: call\n__init_subclass__\nafter members have been\nadded\nbpo-28964\n:\nast.literal_eval()\nadds line number information (if\navailable) in error message for malformed nodes.\nbpo-42470\n:\nrandom.sample()\nno longer warns on a sequence which is\nalso a set.\nbpo-31904\n:\nposixpath.expanduser()\nreturns the input\npath\nunchanged\nif user home directory is None on VxWorks.\nbpo-42388\n: Fix subprocess.check_output(…, input=None) behavior when\ntext=True to be consistent with that of the documentation and\nuniversal_newlines=True.\nbpo-34463\n: Fixed discrepancy between\ntraceback\nand the interpreter\nin formatting of SyntaxError with lineno not set (\ntraceback\nwas\nchanged to match interpreter).\nbpo-42393\n: Raise\nOverflowError\ninstead of silent truncation in\nsocket.ntohs()\nand\nsocket.htons()\n.  Silent truncation was\ndeprecated in Python 3.7. Patch by Erlend E. Aasland\nbpo-42222\n: Harmonized\nrandom.randrange()\nargument handling to match\nrange()\n.\nThe integer test and conversion in\nrandrange()\nnow uses\noperator.index()\n.\nNon-integer arguments to\nrandrange()\nare deprecated.\nThe\nValueError\nis deprecated in favor of a\nTypeError\n.\nIt now runs a little faster than before.\n(Contributed by Raymond Hettinger and Serhiy Storchaka.)\nbpo-42163\n: Restore compatibility for\nuname_result\naround deepcopy and\n_replace.\nbpo-42090\n:\nzipfile.Path.joinpath\nnow accepts arbitrary arguments, same\nas\npathlib.Path.joinpath\n.\nbpo-1635741\n: Port the _csv module to the multi-phase initialization API\n(\nPEP 489\n).\nbpo-42059\n:\ntyping.TypedDict\ntypes created using the alternative\ncall-style syntax now correctly respect the\ntotal\nkeyword argument\nwhen setting their\n__required_keys__\nand\n__optional_keys__\nclass\nattributes.\nbpo-41960\n: Add\nglobalns\nand\nlocalns\nparameters to the\ninspect.signature()\nand\ninspect.Signature.from_callable()\n.\nbpo-41907\n: fix\nformat()\nbehavior for\nIntFlag\nbpo-41891\n: Ensure asyncio.wait_for waits for task completion\nbpo-24792\n: Fixed bug where\nzipimporter\nsometimes reports an\nincorrect cause of import errors.\nbpo-31904\n: Fix site and sysconfig modules for VxWorks RTOS which has no\nhome directories.\nbpo-41462\n: Add\nos.set_blocking()\nsupport for VxWorks RTOS.\nbpo-40219\n: Lowered\ntkinter.ttk.LabeledScale\ndummy widget to\nprevent hiding part of the content label.\nbpo-37193\n: Fixed memory leak in\nsocketserver.ThreadingMixIn\nintroduced\nin Python 3.7.\nbpo-39068\n: Fix initialization race condition in\na85encode()\nand\nb85encode()\nin\nbase64\n. Patch by Brandon Stansbury.\nDocumentation\n¶\nbpo-17140\n: Add documentation for the\nmultiprocessing.pool.ThreadPool\nclass.\nbpo-34398\n: Prominently feature listings from the glossary in documentation\nsearch results. Patch by Ammar Askar.\nTests\n¶\nbpo-42794\n: Update test_nntplib to use official group name of news.aioe.org\nfor testing. Patch by Donghee Na.\nbpo-31904\n: Skip some asyncio tests on VxWorks.\nbpo-42641\n: Enhance\ntest_select.test_select()\n: it now takes 500\nmilliseconds rather than 10 seconds. Use Python rather than a shell to\nmake the test more portable.\nbpo-31904\n: Skip some tests in _test_all_chown_common() on VxWorks.\nbpo-42199\n: Fix bytecode helper assertNotInBytecode.\nbpo-41443\n: Add more attribute checking in test_posix.py\nbpo-31904\n: Disable os.popen and impacted tests on VxWorks\nbpo-41439\n: Port test_ssl and test_uuid to VxWorks RTOS.\nBuild\n¶\nbpo-42692\n: Fix __builtin_available check on older compilers. Patch by\nJoshua Root.\nbpo-27640\n: Added\n--disable-test-modules\noption to the\nconfigure\nscript: don’t build nor install test modules. Patch by Xavier de Gaye,\nThomas Petazzoni and Peixing Xin.\nbpo-42604\n: Now all platforms use a value for the “EXT_SUFFIX” build\nvariable derived from SOABI (for instance in freeBSD, “EXT_SUFFIX” is now\n“.cpython-310d.so” instead of “.so”). Previously only Linux, Mac and\nVxWorks were using a value for “EXT_SUFFIX” that included “SOABI”.\nbpo-42598\n: Fix implicit function declarations in configure which could\nhave resulted in incorrect configuration checks.  Patch contributed by\nJoshua Root.\nbpo-31904\n: Enable libpython3.so for VxWorks.\nbpo-29076\n: Add fish shell support to macOS installer.\nmacOS\n¶\nbpo-42361\n: Update macOS installer build to use Tcl/Tk 8.6.11 (rc2,\nexpected to be final release).\nbpo-41837\n: Update macOS installer build to use OpenSSL 1.1.1i.\nbpo-42584\n: Update macOS installer to use SQLite 3.34.0.\nTools/Demos\n¶\nbpo-42726\n: Fixed Python 3 compatibility issue with gdb/libpython.py\nhandling of attribute dictionaries.\nbpo-42613\n: Fix\nfreeze.py\ntool to use the prope config and library\ndirectories. Patch by Victor Stinner.\nC API\n¶\nbpo-42591\n: Export the\nPy_FrozenMain()\nfunction: fix a Python 3.9.0\nregression. Python 3.9 uses\n-fvisibility=hidden\nand the function was\nnot exported explicitly and so not exported.\nbpo-32381\n: Remove the private\n_Py_fopen()\nfunction which is no\nlonger needed. Use\n_Py_wfopen()\nor\n_Py_fopen_obj()\ninstead. Patch by Victor Stinner.\nbpo-1635741\n: Port\nresource\nextension module to module state\nbpo-42111\n: Update the\nxxlimited\nmodule to be a better example of how\nto use the limited C API.\nbpo-40052\n: Fix an alignment build warning/error in function\nPyVectorcall_Function()\n. Patch by Andreas Schneider, Antoine Pitrou\nand Petr Viktorin.\nPython 3.10.0 alpha 3\n¶\nRelease date: 2020-12-07\nSecurity\n¶\nbpo-40791\n: Add\nvolatile\nto the accumulator variable in\nhmac.compare_digest\n, making constant-time-defeating optimizations less\nlikely.\nCore and Builtins\n¶\nbpo-42576\n:\ntypes.GenericAlias\nwill now raise a\nTypeError\nwhen\nattempting to initialize with a keyword argument.  Previously, this would\ncause the interpreter to crash if the interpreter was compiled with debug\nsymbols. This does not affect interpreters compiled for release.  Patch by\nKen Jin.\nbpo-42536\n: Several built-in and standard library types now ensure that\ntheir internal result tuples are always tracked by the\ngarbage\ncollector\n:\ncollections.OrderedDict.items()\ndict.items()\nenumerate()\nfunctools.reduce()\nitertools.combinations()\nitertools.combinations_with_replacement()\nitertools.permutations()\nitertools.product()\nitertools.zip_longest()\nzip()\nPreviously, they could have become untracked by a prior garbage\ncollection. Patch by Brandt Bucher.\nbpo-42500\n: Improve handling of exceptions near recursion limit. Converts a\nnumber of Fatal Errors in RecursionErrors.\nbpo-42246\n: PEP 626: After a return, the f_lineno attribute of a frame is\nalways the last line executed.\nbpo-42435\n: Speed up comparison of bytes objects with non-bytes objects\nwhen option\n-b\nis specified. Speed up comparison of bytarray\nobjects with non-buffer object.\nbpo-1635741\n: Port the\n_warnings\nextension module to the multi-phase\ninitialization API (\nPEP 489\n). Patch by Victor Stinner.\nbpo-41686\n: On Windows, the\nSIGINT\nevent,\n_PyOS_SigintEvent()\n, is\nnow created even if Python is configured to not install signal handlers\n(if\nPyConfig.install_signal_handlers\nequals to 0, or\nPy_InitializeEx(0)\n).\nbpo-42381\n: Allow assignment expressions in set literals and set\ncomprehensions as per PEP 572. Patch by Pablo Galindo.\nbpo-42202\n: Change function parameters annotations internal representation\nto tuple of strings. Patch provided by Yurii Karabas.\nbpo-42374\n: Fix a regression introduced by the new parser, where an\nunparenthesized walrus operator was not allowed within generator\nexpressions.\nbpo-42316\n: Allow an unparenthesized walrus in subscript indexes.\nbpo-42349\n: Make sure that the compiler front-end produces a well-formed\ncontrol flow graph. Be more aggressive in the compiler back-end, as it is\nnow safe to do so.\nbpo-42296\n: On Windows, fix a regression in signal handling which prevented\nto interrupt a program using CTRL+C. The signal handler can be run in a\nthread different than the Python thread, in which case the test deciding\nif the thread can handle signals is wrong.\nbpo-42332\n:\ntypes.GenericAlias\nobjects can now be the targets of\nweakrefs.\nbpo-42282\n: Optimise constant subexpressions that appear as part of named\nexpressions (previously the AST optimiser did not descend into named\nexpressions). Patch by Nick Coghlan.\nbpo-42266\n: Fixed a bug with the LOAD_ATTR opcode cache that was not\nrespecting monkey-patching a class-level attribute to make it a\ndescriptor. Patch by Pablo Galindo.\nbpo-40077\n: Convert\nqueue\nto use heap types.\nbpo-42246\n: Improved accuracy of line tracing events and f_lineno attribute\nof Frame objects. See PEP 626 for details.\nbpo-40077\n: Convert\nmmap\nto use heap types.\nbpo-42233\n: Allow\nGenericAlias\nobjects to use\nunion type\nexpressions\n. This allows expressions like\nlist[int]\n|\ndict[float,\nstr]\nwhere previously a\nTypeError\nwould have been\nthrown.  This also fixes union type expressions not de-duplicating\nGenericAlias\nobjects. (Contributed by Ken Jin in\nbpo-42233\n.)\nbpo-26131\n: The import system triggers a\nImportWarning\nwhen it falls\nback to using\nload_module()\n.\nLibrary\n¶\nbpo-5054\n: CGIHTTPRequestHandler.run_cgi() HTTP_ACCEPT improperly parsed.\nReplace the special purpose getallmatchingheaders with generic get_all\nmethod and add relevant tests.\nOriginal Patch by Martin Panter. Modified by Senthil Kumaran.\nbpo-42562\n: Fix issue when dis failed to parse function that has no line\nnumbers. Patch provided by Yurii Karabas.\nbpo-17735\n:\ninspect.findsource()\nnow raises\nOSError\ninstead of\nIndexError\nwhen\nco_lineno\nof a code object is greater than\nthe file length. This can happen, for example, when a file is edited after\nit was imported.  PR by Irit Katriel.\nbpo-42116\n: Fix handling of trailing comments by\ninspect.getsource()\n.\nbpo-42532\n: Remove unexpected call of\n__bool__\nwhen passing a\nspec_arg\nargument to a Mock.\nbpo-38200\n: Added itertools.pairwise()\nbpo-41818\n: Fix test_master_read() so that it succeeds on all platforms\nthat either raise OSError or return b”” upon reading from master.\nbpo-42487\n: ChainMap.__iter__ no longer calls __getitem__ on underlying\nmaps\nbpo-42482\n:\nTracebackException\nno longer holds a\nreference to the exception’s traceback object. Consequently, instances of\nTracebackException for equivalent but non-equal exceptions now compare as\nequal.\nbpo-41818\n: Make test_openpty() avoid unexpected success due to number of\nrows and/or number of columns being == 0.\nbpo-42392\n: Remove loop parameter from\nasyncio.subprocess\nand\nasyncio.tasks\nfunctions. Patch provided by Yurii Karabas.\nbpo-42392\n: Remove loop parameter from\nasyncio.open_connection\nand\nasyncio.start_server\nfunctions. Patch provided by Yurii Karabas.\nbpo-28468\n: Add\nplatform.freedesktop_os_release()\nfunction to parse\nfreedesktop.org\nos-release\nfiles.\nbpo-42299\n: Removed the\nformatter\nmodule, which was deprecated in\nPython 3.4. It is somewhat obsolete, little used, and not tested. It was\noriginally scheduled to be removed in Python 3.6, but such removals were\ndelayed until after Python 2.7 EOL. Existing users should copy whatever\nclasses they use into their code. Patch by Donghee Na and and Terry J.\nReedy.\nbpo-26131\n: Deprecate zipimport.zipimporter.load_module() in favour of\nexec_module().\nbpo-41818\n: Updated tests for the pty library. test_basic() has been\nchanged to test_openpty(); this additionally checks if slave termios and\nslave winsize are being set properly by pty.openpty(). In order to add\nsupport for FreeBSD, NetBSD, OpenBSD, and Darwin, this also adds\ntest_master_read(), which demonstrates that pty.spawn() should not depend\non an OSError to exit from its copy loop.\nbpo-42392\n: Remove loop parameter from\n__init__\nin all\nasyncio.locks\nand\nasyncio.Queue\nclasses. Patch provided by Yurii\nKarabas.\nbpo-15450\n: Make\nfilecmp.dircmp\nrespect subclassing. Now the\nfilecmp.dircmp.subdirs\nbehaves as expected when subclassing\ndircmp.\nbpo-42413\n: The exception\nsocket.timeout\nis now an alias of\nTimeoutError\n.\nbpo-31904\n: Support signal module on VxWorks.\nbpo-42406\n: We fixed an issue in\npickle.whichmodule\nin which importing\nmultiprocessing\ncould change the how pickle identifies which module an\nobject belongs to, potentially breaking the unpickling of those objects.\nbpo-42403\n: Simplify the\nimportlib\nexternal bootstrap code:\nimportlib._bootstrap_external\nnow uses regular imports to import\nbuiltin modules. When it is imported, the builtin\n__import__()\nfunction is already fully working and so can be used to import builtin\nmodules like\nsys\n. Patch by Victor Stinner.\nbpo-1635741\n: Convert _sre module types to heap types (PEP 384). Patch by\nErlend E. Aasland.\nbpo-42375\n: subprocess module update for DragonFlyBSD support.\nbpo-41713\n: Port the\n_signal\nextension module to the multi-phase\ninitialization API (\nPEP 489\n). Patch by Victor Stinner and Mohamed\nKoubaa.\nbpo-37205\n:\ntime.time()\n,\ntime.perf_counter()\nand\ntime.monotonic()\nfunctions can no longer fail with a Python fatal\nerror, instead raise a regular Python exception on failure.\nbpo-42328\n: Fixed\ntkinter.ttk.Style.map()\n. The function accepts now\nthe representation of the default state as empty sequence (as returned by\nStyle.map()\n). The structure of the result is now the same on all\nplatform and does not depend on the value of\nwantobjects\n.\nbpo-42345\n: Fix various issues with\ntyping.Literal\nparameter handling\n(flatten, deduplicate, use type to cache key). Patch provided by Yurii\nKarabas.\nbpo-37205\n:\ntime.perf_counter()\non Windows and\ntime.monotonic()\non macOS are now system-wide. Previously, they used an offset computed at\nstartup to reduce the precision loss caused by the float type. Use\ntime.perf_counter_ns()\nand\ntime.monotonic_ns()\nadded in Python\n3.7 to avoid this precision loss.\nbpo-42318\n: Fixed support of non-BMP characters in\ntkinter\non macOS.\nbpo-42350\n: Fix the\nthreading.Thread\nclass at fork: do nothing if\nthe thread is already stopped (ex: fork called at Python exit).\nPreviously, an error was logged in the child process.\nbpo-42333\n: Port _ssl extension module to heap types.\nbpo-42014\n: The\nonerror\ncallback from\nshutil.rmtree\nnow receives\ncorrect function when\nos.open\nfails.\nbpo-42237\n: Fix\nos.sendfile()\non illumos.\nbpo-42308\n: Add\nthreading.__excepthook__\nto allow retrieving the\noriginal value of\nthreading.excepthook()\nin case it is set to a\nbroken or a different value. Patch by Mario Corchero.\nbpo-42131\n: Implement PEP 451/spec methods on zipimport.zipimporter:\nfind_spec(), create_module(), and exec_module().\nThis also allows for the documented deprecation of find_loader(),\nfind_module(), and load_module().\nbpo-41877\n: Mock objects which are not unsafe will now raise an\nAttributeError if an attribute with the prefix asert, aseert, or assrt is\naccessed, in addition to this already happening for the prefixes assert or\nassret.\nbpo-42264\n:\nsqlite3.OptimizedUnicode\nhas been undocumented and obsolete\nsince Python 3.3, when it was made an alias to\nstr\n.  It is now\ndeprecated, scheduled for removal in Python 3.12.\nbpo-42251\n: Added\nthreading.gettrace()\nand\nthreading.getprofile()\nto retrieve the functions set by\nthreading.settrace()\nand\nthreading.setprofile()\nrespectively.\nPatch by Mario Corchero.\nbpo-42249\n: Fixed writing binary Plist files larger than 4 GiB.\nbpo-42236\n: On Unix, the\nos.device_encoding()\nfunction now returns\n'UTF-8'\nrather than the device encoding if the\nPython UTF-8 Mode\nis enabled.\nbpo-41754\n: webbrowser: Ignore\nNotADirectoryError\nwhen calling\nxdg-settings\n.\nbpo-42183\n: Fix a stack overflow error for asyncio Task or Future repr().\nThe overflow occurs under some circumstances when a Task or Future\nrecursively returns itself.\nbpo-42140\n: Improve asyncio.wait function to create the futures set just\none time.\nbpo-42133\n: Update various modules in the stdlib to fall back on\n__spec__.loader\nwhen\n__loader__\nisn’t defined on a module.\nbpo-26131\n: The\nload_module()\nmethods found in\nimportlib\nnow\ntrigger a\nDeprecationWarning\n.\nbpo-39825\n: Windows: Change\nsysconfig.get_config_var('EXT_SUFFIX')\nto\nthe expected full\nplatform_tag.extension\nformat. Previously it was\nhard-coded to\n.pyd\n, now it is compatible with\ndistutils.sysconfig\nand will result in something like\n.cp38-win_amd64.pyd\n. This brings\nwindows into conformance with the other platforms.\nbpo-26389\n: The\ntraceback.format_exception()\n,\ntraceback.format_exception_only()\n, and\ntraceback.print_exception()\nfunctions can now take an exception\nobject as a positional-only argument.\nbpo-41889\n: Enum: fix regression involving inheriting a multiply inherited\nenum\nbpo-41861\n: Convert\nsqlite3\nto use heap types (PEP 384). Patch by\nErlend E. Aasland.\nbpo-40624\n: Added support for the XPath\n!=\noperator in xml.etree\nbpo-28850\n: Fix\npprint.PrettyPrinter.format()\noverrides being ignored\nfor contents of small containers. The\npprint._safe_repr()\nfunction\nwas removed.\nbpo-41625\n: Expose the\nsplice()\nas\nos.splice()\nin the\nos\nmodule. Patch by Pablo Galindo\nbpo-34215\n: Clarify the error message for\nasyncio.IncompleteReadError\nwhen\nexpected\nis\nNone\n.\nbpo-41543\n: Add async context manager support for contextlib.nullcontext.\nbpo-21041\n:\npathlib.PurePath.parents\nnow supports negative\nindexing. Patch contributed by Yaroslav Pankovych.\nbpo-41332\n: Added missing connect_accepted_socket() method to\nasyncio.AbstractEventLoop\n.\nbpo-12800\n: Extracting a symlink from a tarball should succeed and\noverwrite the symlink if it already exists. The fix is to remove the\nexisting file or symlink before extraction. Based on patch by Chris AtLee,\nJeffrey Kintscher, and Senthil Kumaran.\nbpo-40968\n:\nurllib.request\nand\nhttp.client\nnow send\nhttp/1.1\nALPN extension during TLS handshake when no custom context is\nsupplied.\nbpo-41001\n: Add\nos.eventfd()\nto provide a low level interface for\nLinux’s event notification file descriptor.\nbpo-40816\n: Add AsyncContextDecorator to contextlib to support async\ncontext manager as a decorator.\nbpo-40550\n: Fix time-of-check/time-of-action issue in\nsubprocess.Popen.send_signal.\nbpo-39411\n: Add an\nis_async\nidentifier to\npyclbr\n’s\nFunction\nobjects. Patch by Batuhan Taskaya\nbpo-35498\n: Add slice support to\npathlib.PurePath.parents\n.\nDocumentation\n¶\nbpo-42238\n: Tentative to deprecate\nmake\nsuspicious\nby first removing it\nfrom the CI and documentation builds, but keeping it around for manual\nuses.\nbpo-42153\n: Fix the URL for the IMAP protocol documents.\nbpo-41028\n: Language and version switchers, previously maintained in every\ncpython branches, are now handled by docsbuild-script.\nTests\n¶\nbpo-41473\n: Re-enable test_gdb on gdb 9.2 and newer:\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1866884\nbug is fixed in gdb\n10.1.\nbpo-42553\n: Fix\ntest_asyncio.test_call_later()\nrace condition: don’t\nmeasure asyncio performance in the\ncall_later()\nunit test. The test\nfailed randomly on the CI.\nbpo-31904\n: Fix test_netrc on VxWorks: create temporary directories using\ntemp_cwd().\nbpo-31904\n: skip test_getaddrinfo_ipv6_scopeid_symbolic and\ntest_getnameinfo_ipv6_scopeid_symbolic on VxWorks\nbpo-31904\n: skip test_test of test_mailcap on VxWorks\nbpo-31904\n: add shell requirement for test_pipes\nbpo-31904\n: skip some tests related to fifo on VxWorks\nbpo-31904\n: Fix test_doctest.py failures for VxWorks.\nbpo-40754\n: Include\n_testinternalcapi\nmodule in Windows installer for\ntest suite\nbpo-41561\n: test_ssl: skip test_min_max_version_mismatch when TLS 1.0 is\nnot available\nbpo-31904\n: Fix os module failures for VxWorks RTOS.\nbpo-31904\n: Fix fifo test cases for VxWorks RTOS.\nBuild\n¶\nbpo-31904\n: remove libnet dependency from detect_socket() for VxWorks\nbpo-42398\n: Fix a race condition in “make regen-all” when make -jN option\nis used to run jobs in parallel. The clinic.py script now only use atomic\nwrite to write files. Moveover, generated files are now left unchanged if\nthe content does not change, to not change the file modification time.\nbpo-41617\n: Fix building\npycore_bitutils.h\ninternal header on old clang\nversion without\n__builtin_bswap16()\n(ex: Xcode 4.6.3 on Mac OS X\n10.7). Patch by Joshua Root and Victor Stinner.\nbpo-38823\n: It is no longer possible to build the\n_ctypes\nextension\nmodule without\nwchar_t\ntype: remove\nCTYPES_UNICODE\nmacro.\nAnyway, the\nwchar_t\ntype is required to build Python. Patch by\nVictor Stinner.\nbpo-42087\n: Support was removed for AIX 5.3 and below. See\nbpo-40680\n.\nbpo-40998\n: Addressed three compiler warnings found by undefined behavior\nsanitizer (ubsan).\nWindows\n¶\nbpo-42120\n: Remove macro definition of\ncopysign\n(to\n_copysign\n) in\nheaders.\nbpo-38506\n: The Windows launcher now properly handles Python 3.10 when\nlisting installed Python versions.\nmacOS\n¶\nbpo-42504\n: Fix build on macOS Big Sur when MACOSX_DEPLOYMENT_TARGET=11\nbpo-41116\n: Ensure distutils.unixxcompiler.find_library_file can find\nsystem provided libraries on macOS 11.\nbpo-41100\n: Add support for macOS 11 and Apple Silicon systems.\nIt is now possible to build “Universal 2” binaries using\n“–enable-universalsdk –with-universal-archs=universal2”.\nBinaries build on later macOS versions can be deployed back to older\nversions (tested up to macOS 10.9), when using the correct deployment\ntarget. This is tested using Xcode 11 and later.\nbpo-42232\n: Added Darwin specific madvise options to mmap module.\nbpo-38443\n: The\n--enable-universalsdk\nand\n--with-universal-archs\noptions for the configure script now check that the specified\narchitectures can be used.\nIDLE\n¶\nbpo-42508\n: Keep IDLE running on macOS.  Remove obsolete workaround that\nprevented running files with shortcuts when using new universal2\ninstallers built on macOS 11.\nbpo-42426\n: Fix reporting offset of the RE error in searchengine.\nbpo-42415\n: Get docstrings for IDLE calltips more often by using\ninspect.getdoc.\nTools/Demos\n¶\nbpo-42212\n: The smelly.py script now also checks the Python dynamic library\nand extension modules, not only the Python static library. Make also the\nscript more verbose: explain what it does.\nbpo-36310\n: Allow\nTools/i18n/pygettext.py\nto detect calls to\ngettext\nin f-strings.\nC API\n¶\nbpo-42423\n: The\nPyType_FromSpecWithBases()\nand\nPyType_FromModuleAndSpec()\nfunctions now accept a single class as\nthe\nbases\nargument.\nbpo-1635741\n: Port\nselect\nextension module to multiphase\ninitialization (\nPEP 489\n).\nbpo-1635741\n: Port _posixsubprocess extension module to multiphase\ninitialization (\nPEP 489\n).\nbpo-1635741\n: Port _posixshmem extension module to multiphase\ninitialization (\nPEP 489\n)\nbpo-1635741\n: Port _struct extension module to multiphase initialization\n(\nPEP 489\n)\nbpo-1635741\n: Port\nspwd\nextension module to multiphase\ninitialization (\nPEP 489\n)\nbpo-1635741\n: Port\ngc\nextension module to multiphase initialization\n(\nPEP 489\n)\nbpo-1635741\n: Port _queue extension module to multiphase initialization\n(\nPEP 489\n)\nbpo-39573\n: Convert\nPy_TYPE()\nand\nPy_SIZE()\nback to macros\nto allow using them as an l-value. Many third party C extension modules\nrely on the ability of using Py_TYPE() and Py_SIZE() to set an object type\nand size:\nPy_TYPE(obj)\n=\ntype;\nand\nPy_SIZE(obj)\n=\nsize;\n.\nbpo-1635741\n: Port\nsymtable\nextension module to multiphase\ninitialization (\nPEP 489\n)\nbpo-1635741\n: Port\ngrp\nand\npwd\nextension modules to\nmultiphase initialization (\nPEP 489\n)\nbpo-1635741\n: Port _random extension module to multiphase initialization\n(\nPEP 489\n)\nbpo-1635741\n: Port _hashlib extension module to multiphase initialization\n(\nPEP 489\n)\nbpo-41713\n: Removed the undocumented\nPyOS_InitInterrupts()\nfunction.\nInitializing Python already implicitly installs signal handlers: see\nPyConfig.install_signal_handlers\n. Patch by Victor Stinner.\nbpo-40170\n: The\nPy_TRASHCAN_BEGIN\nmacro no longer accesses PyTypeObject\nattributes, but now can get the condition by calling the new private\n_PyTrash_cond()\nfunction which hides implementation details.\nbpo-42260\n:\nPy_GetPath()\n,\nPy_GetPrefix()\n,\nPy_GetExecPrefix()\n,\nPy_GetProgramFullPath()\n,\nPy_GetPythonHome()\nand\nPy_GetProgramName()\nfunctions now\nreturn\nNULL\nif called before\nPy_Initialize()\n(before Python is\ninitialized). Use the new\nPython Initialization Configuration API\nto get the\nPython Path Configuration.\n. Patch by Victor Stinner.\nbpo-42260\n: The\nPyConfig_Read()\nfunction now only parses\nPyConfig.argv\narguments once:\nPyConfig.parse_argv\nis set to\n2\nafter arguments are parsed. Since Python arguments are\nstrippped from\nPyConfig.argv\n, parsing arguments twice would\nparse the application options as Python options.\nbpo-42262\n: Added\nPy_NewRef()\nand\nPy_XNewRef()\nfunctions to\nincrement the reference count of an object and return the object. Patch by\nVictor Stinner.\nbpo-42260\n: When\nPy_Initialize()\nis called twice, the second call\nnow updates more\nsys\nattributes for the configuration, rather than\nonly\nsys.argv\n. Patch by Victor Stinner.\nbpo-41832\n: The\nPyType_FromModuleAndSpec()\nfunction now accepts\nNULL\ntp_doc\nslot.\nbpo-1635741\n: Added\nPyModule_AddObjectRef()\nfunction: similar to\nPyModule_AddObject()\nbut don’t steal a reference to the value on\nsuccess. Patch by Victor Stinner.\nbpo-42171\n: The\nMETH_FASTCALL\ncalling convention is added to the\nlimited API. The functions\nPyModule_AddType()\n,\nPyType_FromModuleAndSpec()\n,\nPyType_GetModule()\nand\nPyType_GetModuleState()\nare added to the limited API on Windows.\nbpo-42085\n: Add dedicated entry to PyAsyncMethods for sending values\nbpo-41073\n:\nPyType_GetSlot()\ncan now accept static types.\nbpo-30459\n:\nPyList_SET_ITEM()\n,\nPyTuple_SET_ITEM()\nand\nPyCell_SET()\nmacros can no longer be used as l-value or r-value.\nFor example,\nx\n=\nPyList_SET_ITEM(a,\nb,\nc)\nand\nPyList_SET_ITEM(a,\nb,\nc)\n=\nx\nnow fail with a compiler error. It prevents bugs like\nif\n(PyList_SET_ITEM\n(a,\nb,\nc)\n<\n0)\n...\ntest. Patch by Zackery Spytz and\nVictor Stinner.\nPython 3.10.0 alpha 2\n¶\nRelease date: 2020-11-03\nSecurity\n¶\nbpo-42103\n: Prevented potential DoS attack via CPU and RAM exhaustion when\nprocessing malformed Apple Property List files in binary format.\nbpo-42051\n: The\nplistlib\nmodule no longer accepts entity\ndeclarations in XML plist files to avoid XML vulnerabilities. This should\nnot affect users as entity declarations are not used in regular plist\nfiles.\nCore and Builtins\n¶\nbpo-42236\n: If the\nnl_langinfo(CODESET)\nfunction returns an empty\nstring, Python now uses UTF-8 as the filesystem encoding. Patch by Victor\nStinner.\nbpo-42218\n: Fixed a bug in the PEG parser that was causing crashes in debug\nmode. Now errors are checked in left-recursive rules to avoid cases where\nsuch errors do not get handled in time and appear as long-distance crashes\nin other places.\nbpo-42214\n: Fixed a possible crash in the PEG parser when checking for the\n‘!=’ token in the\nbarry_as_flufl\nrule. Patch by Pablo Galindo.\nbpo-42206\n: Propagate and raise the errors caused by\nPyAST_Validate()\nin the parser.\nbpo-41796\n: The\nast\nmodule internal state is now per interpreter.\nPatch by Victor Stinner.\nbpo-42143\n: Fix handling of errors during creation of\nPyFunctionObject\n,\nwhich resulted in operations on uninitialized memory. Patch by Yonatan\nGoldschmidt.\nbpo-41659\n: Fix a bug in the parser, where a curly brace following a\nprimary\ndidn’t fail immediately. This led to invalid expressions like\na\n{b}\nto throw a\nSyntaxError\nwith a wrong offset, or invalid\nexpressions ending with a curly brace like\na\n{\nto not fail immediately\nin the REPL.\nbpo-42150\n: Fix possible buffer overflow in the new parser when checking\nfor continuation lines. Patch by Pablo Galindo.\nbpo-42123\n: Run the parser two times. On the first run, disable all the\nrules that only generate better error messages to gain performance. If\nthere’s a parse failure, run the parser a second time with those enabled.\nbpo-42093\n: The\nLOAD_ATTR\ninstruction now uses new “per opcode cache”\nmechanism and it is about 36% faster now. Patch by Pablo Galindo and Yury\nSelivanov.\nbpo-42030\n: Support for the legacy AIX-specific shared library loading\nsupport has been removed. All versions of AIX since 4.3 have supported and\ndefaulted to using the common Unix mechanism instead.\nbpo-41984\n: The garbage collector now tracks all user-defined classes.\nPatch by Brandt Bucher.\nbpo-41993\n: Fixed potential issues with removing not completely initialized\nmodule from\nsys.modules\nwhen import fails.\nbpo-41979\n: Star-unpacking is now allowed for with item’s targets in the\nPEG parser.\nbpo-41974\n: Removed special methods\n__int__\n,\n__float__\n,\n__floordiv__\n,\n__mod__\n,\n__divmod__\n,\n__rfloordiv__\n,\n__rmod__\nand\n__rdivmod__\nof the\ncomplex\nclass.  They\nalways raised a\nTypeError\n.\nbpo-41902\n: Micro optimization when compute\nsq_item\nand\nmp_subscript\nof\nrange\n. Patch by\nDonghee Na.\nbpo-41894\n: When loading a native module and a load failure occurs, prevent\na possible UnicodeDecodeError when not running in a UTF-8 locale by\ndecoding the load error message using the current locale’s encoding.\nbpo-41902\n: Micro optimization for range.index if step is 1. Patch by\nDonghee Na.\nbpo-41435\n: Add\nsys._current_exceptions()\nfunction to retrieve a\ndictionary mapping each thread’s identifier to the topmost exception\ncurrently active in that thread at the time the function is called.\nbpo-38605\n: Enable\nfrom\n__future__\nimport\nannotations\n(\nPEP 563\n) by\ndefault. The values found in\n__annotations__\ndicts are now\nstrings, for example\n{\"x\":\n\"int\"}\ninstead of\n{\"x\":\nint}\n.\nLibrary\n¶\nbpo-35455\n: On Solaris,\nthread_time()\nis now implemented with\ngethrvtime()\nbecause\nclock_gettime(CLOCK_THREAD_CPUTIME_ID)\nis not\nalways available. Patch by Jakub Kulik.\nbpo-42233\n: The\nrepr()\nof\ntyping\ntypes containing\nGeneric Alias Types\npreviously did not show\nthe parameterized types in the\nGenericAlias\n.  They have now been\nchanged to do so.\nbpo-29566\n:\nbinhex.binhex()\nconsistently writes macOS 9 line endings.\nbpo-26789\n: The\nlogging.FileHandler\nclass now keeps a reference to\nthe builtin\nopen()\nfunction to be able to open or reopen the file\nduring Python finalization. Fix errors like:\nNameError:\nname\n'open'\nis\nnot\ndefined\n. Patch by Victor Stinner.\nbpo-42157\n: Removed the\nunicodedata.ucnhash_CAPI\nattribute which was an\ninternal PyCapsule object. The related private\n_PyUnicode_Name_CAPI\nstructure was moved to the internal C API. Patch by Victor Stinner.\nbpo-42157\n: Convert the\nunicodedata\nextension module to the\nmultiphase initialization API (\nPEP 489\n) and convert the\nunicodedata.UCD\nstatic type to a heap type. Patch by Mohamed Koubaa\nand Victor Stinner.\nbpo-42146\n: Fix memory leak in\nsubprocess.Popen()\nin case an uid\n(gid) specified in\nuser\n(\ngroup\n,\nextra_groups\n) overflows\nuid_t\n(\ngid_t\n).\nbpo-42103\n:\nInvalidFileException\nand\nRecursionError\nare now the only errors caused by loading malformed binary Plist file\n(previously ValueError and TypeError could be raised in some specific\ncases).\nbpo-41490\n: In\nimportlib.resources\n,\n.path\nmethod is more aggressive\nabout releasing handles to zipfile objects early, enabling use-cases like\ncertifi to leave the context open but delete the underlying zip file.\nbpo-41052\n: Pickling heap types implemented in C with protocols 0 and 1\nraises now an error instead of producing incorrect data.\nbpo-42089\n: In\nimportlib.metadata.PackageNotFoundError\n, make reference\nto the package metadata being missing to improve the user experience.\nbpo-41491\n: plistlib: fix parsing XML plists with hexadecimal integer\nvalues\nbpo-42065\n: Fix an incorrectly formatted error from\n_codecs.charmap_decode()\nwhen called with a mapped value outside\nthe range of valid Unicode code points. PR by Max Bernstein.\nbpo-41966\n: Fix pickling pure Python\ndatetime.time\nsubclasses.\nPatch by Dean Inwood.\nbpo-19270\n:\nsched.scheduler.cancel()\nwill now cancel the correct\nevent, if two events with same priority are scheduled for the same time.\nPatch by Bar Harel.\nbpo-28660\n:\ntextwrap.wrap()\nnow attempts to break long words after\nhyphens when\nbreak_long_words=True\nand\nbreak_on_hyphens=True\n.\nbpo-35823\n: Use\nvfork()\ninstead of\nfork()\nfor\nsubprocess.Popen()\non Linux to improve performance in cases where it\nis deemed safe.\nbpo-42043\n: Add support for\nzipfile.Path\ninheritance.\nzipfile.Path.is_file()\nnow returns False for non-existent names.\nzipfile.Path\nobjects now expose a\n.filename\nattribute and rely on\nthat to resolve\n.name\nand\n.parent\nwhen the\nPath\nobject is at\nthe root of the zipfile.\nbpo-42021\n: Fix possible ref leaks in\nsqlite3\nmodule init.\nbpo-39101\n: Fixed tests using IsolatedAsyncioTestCase from hanging on\nBaseExceptions.\nbpo-41976\n: Fixed a bug that was causing\nctypes.util.find_library()\nto return\nNone\nwhen triying to locate a library in an environment when\ngcc>=9 is available and\nldconfig\nis not. Patch by Pablo Galindo\nbpo-41943\n: Fix bug where TestCase.assertLogs doesn’t correctly filter\nmessages by level.\nbpo-41923\n: Implement\nPEP 613\n, introducing\ntyping.TypeAlias\nannotation.\nbpo-41905\n: A new function in abc:\nupdate_abstractmethods\nto re-calculate\nan abstract class’s abstract status. In addition,\ndataclass\nhas been\nchanged to call this function.\nbpo-23706\n: Added\nnewline\nparameter to\npathlib.Path.write_text()\n.\nbpo-41876\n: Tkinter font class repr uses font name\nbpo-41831\n:\nstr()\nfor the\ntype\nattribute of the\ntkinter.Event\nobject always returns now the numeric code returned by Tk instead of the\nname of the event type.\nbpo-39337\n:\nencodings.normalize_encoding()\nnow ignores non-ASCII\ncharacters.\nbpo-41747\n: Ensure all methods that generated from\ndataclasses.dataclass()\nobjects now have the proper\n__qualname__\nattribute referring to the class they belong to. Patch by Batuhan Taskaya.\nbpo-30681\n: Handle exceptions caused by unparsable date headers when using\nemail “default” policy.  Patch by Tim Bell, Georges Toth\nbpo-41586\n: Add F_SETPIPE_SZ and F_GETPIPE_SZ to fcntl module. Allow\nsetting pipesize on subprocess.Popen.\nbpo-41229\n: Add\ncontextlib.aclosing\nfor deterministic cleanup of async\ngenerators which is analogous to\ncontextlib.closing\nfor non-async\ngenerators. Patch by Joongi Kim and John Belmonte.\nbpo-16396\n: Allow\nctypes.wintypes\nto be imported on non-Windows\nsystems.\nbpo-4356\n: Add a key function to the bisect module.\nbpo-40592\n:\nshutil.which()\nnow ignores empty entries in\nPATHEXT\ninstead of treating them as a match.\nbpo-40492\n: Fix\n--outfile\nfor\ncProfile\n/\nprofile\nnot\nwriting the output file in the original directory when the program being\nprofiled changes the working directory.  PR by Anthony Sottile.\nbpo-34204\n: The\nshelve\nmodule now uses\npickle.DEFAULT_PROTOCOL\nby default instead of\npickle\nprotocol\n3\n.\nbpo-27321\n: Fixed KeyError exception when flattening an email to a string\nattempts to replace a non-existent Content-Transfer-Encoding header.\nbpo-38976\n: The\nhttp.cookiejar\nmodule now supports the parsing of\ncookies in CURL-style cookiejar files through MozillaCookieJar on all\nplatforms. Previously, such cookie entries would be silently ignored when\nloading a cookiejar with such entries.\nAdditionally, the HTTP Only attribute is persisted in the object, and will\nbe correctly written to file if the MozillaCookieJar object is\nsubsequently dumped.\nDocumentation\n¶\nbpo-42061\n: Document __format__ functionality for IP addresses.\nbpo-41910\n: Document the default implementation of\nobject.__eq__\n.\nbpo-42010\n: Clarify that subscription expressions are also valid for\ncertain\nclasses\nand\ntypes\nin the standard\nlibrary, and for user-defined classes and types if the classmethod\n__class_getitem__()\nis provided.\nbpo-41805\n: Documented\ngeneric alias type\nand\ntypes.GenericAlias\n. Also added an entry in glossary for\ngeneric types\n.\nbpo-39693\n: Fix tarfile’s extractfile documentation\nbpo-39416\n: Document some restrictions on the default string\nrepresentations of numeric classes.\nTests\n¶\nbpo-41739\n: Fix test_logging.test_race_between_set_target_and_flush(): the\ntest now waits until all threads complete to avoid leaking running\nthreads.\nbpo-41970\n: Avoid a test failure in\ntest_lib2to3\nif the module has\nalready imported at the time the test executes. Patch by Pablo Galindo.\nbpo-41944\n: Tests for CJK codecs no longer call\neval()\non content\nreceived via HTTP.\nbpo-41306\n: Fixed a failure in\ntest_tk.test_widgets.ScaleTest\nhappening\nwhen executing the test with Tk 8.6.10.\nBuild\n¶\nbpo-38980\n: Add\n-fno-semantic-interposition\nto both the compile and\nlink line when building with\n--enable-optimizations\n. Patch by Victor\nStinner and Pablo Galindo.\nWindows\n¶\nbpo-38439\n: Updates the icons for IDLE in the Windows Store package.\nbpo-38252\n: Use 8-byte step to detect ASCII sequence in 64-bit Windows\nbuild.\nbpo-39107\n: Update Tcl and Tk to 8.6.10 in Windows installer.\nbpo-41557\n: Update Windows installer to use SQLite 3.33.0.\nbpo-38324\n: Avoid Unicode errors when accessing certain locale data on\nWindows.\nmacOS\n¶\nbpo-41471\n: Ignore invalid prefix lengths in system proxy excludes.\nIDLE\n¶\nbpo-33987\n: Mostly finish using ttk widgets, mainly for editor, settings,\nand searches. Some patches by Mark Roseman.\nbpo-40511\n: Typing opening and closing parentheses inside the parentheses\nof a function call will no longer cause unnecessary “flashing” off and on\nof an existing open call-tip, e.g. when typed in a string literal.\nbpo-38439\n: Add a 256×256 pixel IDLE icon to the Windows .ico file. Created\nby Andrew Clover. Remove the low-color gif variations from the .ico file.\nC API\n¶\nbpo-42157\n: The private\n_PyUnicode_Name_CAPI\nstructure of the PyCapsule\nAPI\nunicodedata.ucnhash_CAPI\nhas been moved to the internal C API.\nPatch by Victor Stinner.\nbpo-42015\n: Fix potential crash in deallocating method objects when\ndynamically allocated\nPyMethodDef\n’s lifetime is managed through\nthe\nself\nargument of a\nPyCFunction\n.\nbpo-40423\n: The\nsubprocess\nmodule and\nos.closerange\nwill now use\nthe\nclose_range(low,\nhigh,\nflags)\nsyscall when it is available for\nmore efficient closing of ranges of descriptors.\nbpo-41845\n:\nPyObject_GenericGetDict()\nis available again in the\nlimited API when targeting 3.10 or later.\nbpo-40422\n: Add\n_Py_closerange\nfunction to provide performant closing\nof a range of file descriptors.\nbpo-41986\n:\nPy_FileSystemDefaultEncodeErrors\nand\nPy_UTF8Mode\nare available again in limited API.\nbpo-41756\n: Add\nPyIter_Send\nfunction to allow sending value into\ngenerator/coroutine/iterator without raising StopIteration exception to\nsignal return.\nbpo-41784\n: Added\nPyUnicode_AsUTF8AndSize\nto the limited C API.\nPython 3.10.0 alpha 1\n¶\nRelease date: 2020-10-05\nSecurity\n¶\nbpo-41304\n: Fixes\npython3x._pth\nbeing ignored on Windows, caused by the\nfix for\nbpo-29778\n(\nCVE 2020-15801\n).\nbpo-41162\n: Audit hooks are now cleared later during finalization to avoid\nmissing events.\nbpo-29778\n: Ensure\npython3.dll\nis loaded from correct locations\nwhen Python is embedded (\nCVE 2020-15523\n).\nbpo-41004\n: The __hash__() methods of  ipaddress.IPv4Interface and\nipaddress.IPv6Interface incorrectly generated constant hash values of 32\nand 128 respectively. This resulted in always causing hash collisions. The\nfix uses hash() to generate hash values for the tuple of (address, mask\nlength, network address).\nbpo-39603\n: Prevent http header injection by rejecting control characters\nin http.client.putrequest(…).\nCore and Builtins\n¶\nbpo-41909\n: Fixed stack overflow in\nissubclass()\nand\nisinstance()\nwhen getting the\n__bases__\nattribute leads to\ninfinite recursion.\nbpo-41922\n: Speed up calls to\nreversed()\nby using the\nPEP 590\nvectorcall\ncalling convention. Patch by Donghee Na.\nbpo-41873\n: Calls to\nfloat()\nare now faster due to the\nvectorcall\ncalling convention. Patch by Dennis Sweeney.\nbpo-41870\n: Speed up calls to\nbool()\nby using the\nPEP 590\nvectorcall\ncalling convention. Patch by Donghee Na.\nbpo-1635741\n: Port the\n_bisect\nmodule to the multi-phase\ninitialization API (\nPEP 489\n).\nbpo-39934\n: Correctly count control blocks in ‘except’ in compiler. Ensures\nthat a syntax error, rather a fatal error, occurs for deeply nested, named\nexception handlers.\nbpo-41780\n: Fix\n__dir__()\nof\ntypes.GenericAlias\n. Patch by\nBatuhan Taskaya.\nbpo-1635741\n: Port the\n_lsprof\nextension module to multi-phase\ninitialization (\nPEP 489\n).\nbpo-1635741\n: Port the\ncmath\nextension module to multi-phase\ninitialization (\nPEP 489\n).\nbpo-1635741\n: Port the\n_scproxy\nextension module to multi-phase\ninitialization (\nPEP 489\n).\nbpo-1635741\n: Port the\ntermios\nextension module to multi-phase\ninitialization (\nPEP 489\n).\nbpo-1635741\n: Convert the\n_sha256\nextension module types to heap\ntypes.\nbpo-41690\n: Fix a possible stack overflow in the parser when parsing\nfunctions and classes with a huge amount of arguments. Patch by Pablo\nGalindo.\nbpo-1635741\n: Port the\n_overlapped\nextension module to multi-phase\ninitialization (\nPEP 489\n).\nbpo-1635741\n: Port the\n_curses_panel\nextension module to\nmulti-phase initialization (\nPEP 489\n).\nbpo-1635741\n: Port the\n_opcode\nextension module to multi-phase\ninitialization (\nPEP 489\n).\nbpo-41681\n: Fixes the wrong error description in the error raised by using\n2\n,\nin format string in f-string and\nstr.format()\n.\nbpo-41675\n: The implementation of\nsignal.siginterrupt()\nnow uses\nsigaction()\n(if it is available in the system) instead of the\ndeprecated\nsiginterrupt()\n. Patch by Pablo Galindo.\nbpo-41670\n: Prevent line trace being skipped on platforms not compiled with\nUSE_COMPUTED_GOTOS\n. Fixes issue where some lines nested within a\ntry-except block were not being traced on Windows.\nbpo-41654\n: Fix a crash that occurred when destroying subclasses of\nMemoryError\n. Patch by Pablo Galindo.\nbpo-1635741\n: Port the\nzlib\nextension module to multi-phase\ninitialization (\nPEP 489\n).\nbpo-41631\n: The\n_ast\nmodule uses again a global state. Using a module\nstate per module instance is causing subtle practical problems. For\nexample, the Mercurial project replaces the\n__import__()\nfunction to\nimplement lazy import, whereas Python expected that\nimport\n_ast\nalways\nreturn a fully initialized\n_ast\nmodule.\nbpo-40077\n: Convert\n_operator\nto use\nPyType_FromSpec()\n.\nbpo-1653741\n: Port\n_sha3\nto multi-phase init.  Convert static types\nto heap types.\nbpo-1635741\n: Port the\n_blake2\nextension module to the multi-phase\ninitialization API (\nPEP 489\n).\nbpo-41533\n: Free the stack allocated in\nva_build_stack\nif\ndo_mkstack\nfails and the stack is not a\nsmall_stack\n.\nbpo-41531\n: Fix a bug that was dropping keys when compiling dict literals\nwith more than 0xFFFF elements. Patch by Pablo Galindo.\nbpo-41525\n: The output of\npython\n--help\ncontains now only ASCII\ncharacters.\nbpo-1635741\n: Port the\n_sha1\n,\n_sha512\n, and\n_md5\nextension modules to multi-phase initialization API (\nPEP 489\n).\nbpo-41431\n: Optimize\ndict_merge()\nfor copying dict (e.g.\ndict(d)\nand\n{}.update(d)\n).\nbpo-41428\n: Implement PEP 604. This supports (int | str) etc. in place of\nUnion[str, int].\nbpo-41340\n: Removed fallback implementation for\nstrdup\n.\nbpo-38156\n: Handle interrupts that come after EOF correctly in\nPyOS_StdioReadline\n.\nbpo-41342\n:\nround()\nwith integer argument is now faster (9–60%).\nbpo-41334\n: Constructors\nstr()\n,\nbytes()\nand\nbytearray()\nare now faster (around 30–40% for small objects).\nbpo-41295\n: Resolve a regression in CPython 3.8.4 where defining\n“__setattr__” in a multi-inheritance setup and calling up the hierarchy\nchain could fail if builtins/extension types were involved in the base\ntypes.\nbpo-41323\n: Bytecode optimizations are performed directly on the control\nflow graph. This will result in slightly more compact code objects in some\ncircumstances.\nbpo-41247\n: Always cache the running loop holder when running\nasyncio.set_running_loop\n.\nbpo-41252\n: Fix incorrect refcounting in _ssl.c’s\n_servername_callback()\n.\nbpo-1635741\n: Port\nmultiprocessing\nto multi-phase initialization\nbpo-1635741\n: Port\nwinapi\nto multiphase initialization\nbpo-41215\n: Use non-NULL default values in the PEG parser keyword list to\novercome a bug that was preventing Python from being properly compiled\nwhen using the XLC compiler. Patch by Pablo Galindo.\nbpo-41218\n: Python 3.8.3 had a regression where compiling with\nast.PyCF_ALLOW_TOP_LEVEL_AWAIT would aggressively mark list comprehension\nwith CO_COROUTINE. Now only list comprehension making use of async/await\nwill tagged as so.\nbpo-1635741\n: Port\nfaulthandler\nto multiphase initialization.\nbpo-1635741\n: Port\nsha256\nto multiphase initialization\nbpo-41175\n: Guard against a NULL pointer dereference within bytearrayobject\ntriggered by the\nbytearray()\n+\nbytearray()\noperation.\nbpo-41100\n: add arm64 to the allowable Mac OS arches in mpdecimal.h\nbpo-41094\n: Fix decoding errors with audit when open files with non-ASCII\nnames on non-UTF-8 locale.\nbpo-39960\n: The “hackcheck” that prevents sneaking around a type’s\n__setattr__() by calling the superclass method was rewritten to allow C\nimplemented heap types.\nbpo-41084\n: Prefix the error message with ‘f-string: ‘, when parsing an\nf-string expression which throws a\nSyntaxError\n.\nbpo-40521\n: Empty frozensets are no longer singletons.\nbpo-41076\n: Pre-feed the parser with the location of the f-string\nexpression, not the f-string itself, which allows us to skip the shifting\nof the AST node locations after the parsing is completed.\nbpo-41056\n: Fixes a reference to deallocated stack space during startup\nwhen constructing sys.path involving a relative symlink when code was\nsupplied via -c.  (discovered via Coverity)\nbpo-41061\n: Fix incorrect expressions and asserts in hashtable code and\ntests.\nbpo-41052\n: Opt out serialization/deserialization for _random.Random\nbpo-40939\n: Rename\nPyPegen*\nfunctions to\nPyParser*\n, so that we can\nremove the old set of\nPyParser*\nfunctions that were using the old\nparser, but keep everything backwards-compatible.\nbpo-35975\n: Stefan Behnel reported that cf_feature_version is used even\nwhen PyCF_ONLY_AST is not set. This is against the intention and against\nthe documented behavior, so it’s been fixed.\nbpo-40939\n: Remove the remaining files from the old parser and the\nsymbol\nmodule.\nbpo-40077\n: Convert\n_bz2\nto use\nPyType_FromSpec()\n.\nbpo-41006\n: The\nencodings.latin_1\nmodule is no longer imported at\nstartup. Now it is only imported when it is the filesystem encoding or the\nstdio encoding.\nbpo-40636\n:\nzip()\nnow supports\nPEP 618\n’s\nstrict\nparameter,\nwhich raises a\nValueError\nif the arguments are exhausted at\ndifferent lengths. Patch by Brandt Bucher.\nbpo-1635741\n: Port\n_gdbm\nto multiphase initialization.\nbpo-40985\n: Fix a bug that caused the\nSyntaxError\ntext to be empty\nwhen a file ends with a line ending in a line continuation character (i.e.\nbackslash). The error text should contain the text of the last line.\nbpo-40958\n: Fix a possible buffer overflow in the PEG parser when gathering\ninformation for emitting syntax errors. Patch by Pablo Galindo.\nbpo-1635741\n: Port\n_dbm\nto multiphase initialization.\nbpo-40957\n: Fix refleak in _Py_fopen_obj() when PySys_Audit() fails\nbpo-40950\n: Add a state to the\nnis\nmodule (\nPEP 3121\n) and apply\nthe multiphase initialization. Patch by Donghee Na.\nbpo-40947\n: The Python\nPath Configuration\nnow\ntakes\nPyConfig.platlibdir\nin account.\nbpo-40939\n: Remove the old parser, the\nparser\nmodule and all\nassociated support code, command-line options and environment variables.\nPatch by Pablo Galindo.\nbpo-40847\n: Fix a bug where a line with only a line continuation character\nis not considered a blank line at tokenizer level. In such cases, more\nthan a single\nNEWLINE\ntoken was emitted. The old parser was working\naround the issue, but the new parser threw a\nSyntaxError\nfor valid\ninput due to this. For example, an empty line following a line\ncontinuation character was interpreted as a\nSyntaxError\n.\nbpo-40890\n: Each dictionary view now has a\nmapping\nattribute that\nprovides a\ntypes.MappingProxyType\nwrapping the original\ndictionary.  Patch contributed by Dennis Sweeney.\nbpo-40889\n: Improved the performance of symmetric difference operations on\ndictionary item views.  Patch by Dennis Sweeney.\nbpo-40904\n: Fix possible segfault in the new PEG parser when parsing\nf-string containing yield statements with no value (\nf\"{yield}\"\n).\nPatch by Pablo Galindo\nbpo-40903\n: Fixed a possible segfault in the new PEG parser when producing\nerror messages for invalid assignments of the form\np=p=\n. Patch by\nPablo Galindo\nbpo-40880\n: Fix invalid memory read in the new parser when checking\nnewlines in string literals. Patch by Pablo Galindo.\nbpo-40883\n: Fix memory leak in when parsing f-strings in the new parser.\nPatch by Pablo Galindo\nbpo-40870\n: Raise\nValueError\nwhen validating custom AST’s where the\nconstants\nTrue\n,\nFalse\nand\nNone\nare used within a\nast.Name\nnode.\nbpo-40854\n: Allow overriding\nsys.platlibdir\nvia a new\nPYTHONPLATLIBDIR\nenvironment variable.\nbpo-40826\n: Fix GIL usage in\nPyOS_Readline()\n: lock the GIL to set\nan exception and pass the Python thread state when checking if there is a\npending signal.\nbpo-1635741\n: Port\nfcntl\nto multiphase initialization.\nbpo-19468\n: Delete unnecessary instance check in importlib.reload(). Patch\nby Furkan Önder.\nbpo-40824\n: Unexpected errors in calling the\n__iter__\nmethod are no\nlonger masked by\nTypeError\nin the\nin\noperator and functions\ncontains()\n,\nindexOf()\nand\ncountOf()\nof the\noperator\nmodule.\nbpo-40792\n: Attributes\nstart\n,\nstop\nand\nstep\nof the\nrange\nobject now always has exact type\nint\n.  Previously,\nthey could have been an instance of a subclass of\nint\n.\nbpo-40780\n: Fix a corner case where g-style string formatting of a float\nfailed to remove trailing zeros.\nbpo-38964\n: When there’s a\nSyntaxError\nin the expression part of an\nfstring, the filename attribute of the\nSyntaxError\ngets correctly\nset to the name of the file the fstring resides in.\nbpo-40750\n: Support the “-d” debug flag in the new PEG parser. Patch by\nPablo Galindo\nbpo-40217\n: Instances of types created with\nPyType_FromSpecWithBases()\nwill no longer automatically visit\ntheir class object when traversing references in the garbage collector.\nThe user is expected to manually visit the object’s class. Patch by Pablo\nGalindo.\nbpo-39573\n:\nPy_TYPE()\nis changed to the inline static function.\nPatch by Donghee Na.\nbpo-40696\n: Fix a hang that can arise after\ngenerator.throw()\ndue to\na cycle in the exception context chain.\nbpo-40521\n: Each interpreter now its has own free lists, singletons and\ncaches:\nFree lists: float, tuple, list, dict, frame, context,\nasynchronous generator, MemoryError.\nSingletons: empty tuple, empty bytes string, empty Unicode string,\nsingle byte character, single Unicode (latin1) character.\nSlice cache.\nThey are no longer shared by all interpreters.\nbpo-40679\n: Certain\nTypeError\nmessages about missing or extra\narguments now include the function’s\nqualified name\n.  Patch by\nDennis Sweeney.\nbpo-29590\n: Make the stack trace correct after calling\ngenerator.throw()\non a generator that has yielded from a\nyield\nfrom\n.\nbpo-4022\n: Improve performance of generators by not raising internal\nStopIteration.\nbpo-1635741\n: Port\nmmap\nto multiphase initialization.\nbpo-1635741\n: Port\n_lzma\nto multiphase initialization.\nbpo-37999\n: Builtin and extension functions that take integer arguments no\nlonger accept\nDecimal\ns,\nFraction\ns and other objects that can be converted to integers only with a loss\n(e.g. that have the\n__int__()\nmethod but do not have the\n__index__()\nmethod).\nbpo-29882\n: Add\nint.bit_count()\n, counting the number of ones in the\nbinary representation of an integer. Patch by Niklas Fiekas.\nbpo-36982\n: Use ncurses extended color functions when available to support\nterminals with 256 colors, and add the new function\ncurses.has_extended_color_support()\nto indicate whether extended\ncolor support is provided by the underlying ncurses library.\nbpo-19569\n: Add the private macros\n_Py_COMP_DIAG_PUSH\n,\n_Py_COMP_DIAG_IGNORE_DEPR_DECLS\n, and\n_Py_COMP_DIAG_POP\n.\nbpo-26680\n: The int type now supports the x.is_integer() method for\ncompatibility with float.\nLibrary\n¶\nbpo-41900\n: C14N 2.0 serialisation in xml.etree.ElementTree failed for\nunprefixed attributes when a default namespace was defined.\nbpo-41887\n: Strip leading spaces and tabs on\nast.literal_eval()\n. Also\ndocument stripping of spaces and tabs for\neval()\n.\nbpo-41773\n: Note in documentation that\nrandom.choices()\ndoesn’t\nsupport non-finite weights, raise\nValueError\nwhen given non-finite\nweights.\nbpo-41840\n: Fix a bug in the\nsymtable\nmodule that was causing\nmodule-scope global variables to not be reported as both local and global.\nPatch by Pablo Galindo.\nbpo-41842\n: Add\ncodecs.unregister()\nfunction to unregister a codec\nsearch function.\nbpo-40564\n: In\nzipfile.Path\n, mutate the passed ZipFile object type\ninstead of making a copy. Prevents issues when both the local copy and the\ncaller’s copy attempt to close the same file handle.\nbpo-40670\n: More reliable validation of statements in\ntimeit.Timer\n. It now accepts “empty” statements (only whitespaces\nand comments) and rejects misindentent statements.\nbpo-41833\n: The\nthreading.Thread\nconstructor now uses the target\nname if the\ntarget\nargument is specified but the\nname\nargument is\nomitted.\nbpo-41817\n: fix\ntkinter.EventType\nEnum so all members are strings, and\nnone are tuples\nbpo-41810\n:\ntypes.EllipsisType\n,\ntypes.NotImplementedType\nand\ntypes.NoneType\nhave been reintroduced, providing a new set of\ntypes readily interpretable by static type checkers.\nbpo-41815\n: Fix SQLite3 segfault when backing up closed database. Patch\ncontributed by Peter David McCormick.\nbpo-41816\n: StrEnum added: it ensures that all members are already strings\nor string candidates\nbpo-41517\n: fix bug allowing Enums to be extended via multiple inheritance\nbpo-39587\n: use the correct mix-in data type when constructing Enums\nbpo-41792\n: Add is_typeddict function to typing.py to check if a type is a\nTypedDict class\nPreviously there was no way to check that without using private API. See\nthe\nrelevant issue in python/typing\n.\nbpo-41789\n: Honor\nobject\noverrides in\nEnum\nclass creation\n(specifically,\n__str__\n,\n__repr__\n,\n__format__\n, and\n__reduce_ex__\n).\nbpo-32218\n:\nenum.Flag\nand\nenum.IntFlag\nmembers are now iterable.\nbpo-39651\n: Fix a race condition in the\ncall_soon_threadsafe()\nmethod\nof\nasyncio.ProactorEventLoop\n: do nothing if the self-pipe socket has\nbeen closed.\nbpo-1635741\n: Port the\nmashal\nextension module to the multi-phase\ninitialization API (\nPEP 489\n).\nbpo-1635741\n: Port the\n_string\nextension module to the multi-phase\ninitialization API (\nPEP 489\n).\nbpo-41732\n: Added an\niterator\nto\nmemoryview\n.\nbpo-41720\n: Fixed\nturtle.Vec2D.__rmul__()\nfor arguments which are not\nint or float.\nbpo-41696\n: Fix handling of debug mode in\nasyncio.run()\n. This allows\nsetting\nPYTHONASYNCIODEBUG\nor\n-X\ndev\nto enable asyncio debug mode\nwhen using\nasyncio.run()\n.\nbpo-41687\n: Fix implementation of sendfile to be compatible with Solaris.\nbpo-41662\n: No longer override exceptions raised in\n__len__()\nof a\nsequence of parameters in\nsqlite3\nwith\nProgrammingError\n.\nbpo-39010\n: Restarting a\nProactorEventLoop\non Windows no longer logs\nspurious\nConnectionResetErrors\n.\nbpo-41638\n:\nProgrammingError\nmessage for absent parameter\nin\nsqlite3\ncontains now the name of the parameter instead of its\nindex when parameters are supplied as a dict.\nbpo-41662\n: Fixed crash when mutate list of parameters during iteration in\nsqlite3\n.\nbpo-41513\n: Improved the accuracy of math.hypot().  Internally, each step\nis computed with extra precision so that the result is now almost always\ncorrectly rounded.\nbpo-41609\n: The pdb whatis command correctly reports instance methods as\n‘Method’ rather than ‘Function’.\nbpo-39994\n: Fixed pprint’s handling of dict subclasses that override\n__repr__.\nbpo-32751\n: When cancelling the task due to a timeout,\nasyncio.wait_for()\nwill now wait until the cancellation is complete\nalso in the case when\ntimeout\nis <= 0, like it does with positive\ntimeouts.\nbpo-37658\n:\nasyncio.wait_for()\nnow properly handles races between\ncancellation of itself and the completion of the wrapped awaitable.\nbpo-40782\n: Change the method asyncio.AbstractEventLoop.run_in_executor to\nnot be a coroutine.\nbpo-41520\n: Fix\ncodeop\nregression that prevented turning compile\nwarnings into errors.\nbpo-41528\n: turtle uses math module functions to convert degrees to radians\nand vice versa and to calculate vector norm\nbpo-41513\n: Minor algorithmic improvement to math.hypot() and math.dist()\ngiving small gains in speed and accuracy.\nbpo-41503\n: Fixed a race between setTarget and flush in\nlogging.handlers.MemoryHandler.\nbpo-41497\n: Fix potential UnicodeDecodeError in dis module.\nbpo-41467\n: On Windows, fix asyncio\nrecv_into()\nreturn value when the\nsocket/pipe is closed (\nBrokenPipeError\n): return\n0\nrather than\nan empty byte string (\nb''\n).\nbpo-41425\n: Make tkinter doc example runnable.\nbpo-41421\n: Make an algebraic simplification to random.paretovariate().  It\nnow is slightly less subject to round-off error and is slightly faster.\nInputs that used to cause ZeroDivisionError now cause an OverflowError\ninstead.\nbpo-41440\n: Add\nos.cpu_count()\nsupport for VxWorks RTOS.\nbpo-41316\n: Fix the\ntarfile\nmodule to write only basename of TAR\nfile to GZIP compression header.\nbpo-41384\n: Raise TclError instead of TypeError when an unknown option is\npassed to tkinter.OptionMenu.\nbpo-41317\n: Use add_done_callback() in asyncio.loop.sock_accept() to\nunsubscribe reader early on cancellation.\nbpo-41364\n: Reduce import overhead of\nuuid\n.\nbpo-35328\n: Set the environment variable\nVIRTUAL_ENV_PROMPT\nat\nvenv\nactivation.\nbpo-41341\n: Recursive evaluation of\ntyping.ForwardRef\nin\nget_type_hints\n.\nbpo-41344\n: Prevent creating\nshared_memory.SharedMemory\nobjects\nwith\nsize=0\n.\nbpo-41333\n:\ncollections.OrderedDict.pop()\nis now 2 times faster.\nbpo-41288\n: Unpickling invalid NEWOBJ_EX opcode with the C implementation\nraises now UnpicklingError instead of crashing.\nbpo-39017\n: Avoid infinite loop when reading specially crafted TAR files\nusing the tarfile module (\nCVE 2019-20907\n).\nbpo-41273\n: Speed up any transport using\n_ProactorReadPipeTransport\nby\ncalling\nrecv_into\ninstead of\nrecv\n, thus not creating a new buffer\nfor each\nrecv\ncall in the transport’s read loop.\nbpo-41235\n: Fix the error handling in\nssl.SSLContext.load_dh_params()\n.\nbpo-41207\n: In distutils.spawn, restore expectation that DistutilsExecError\nis raised when the command is not found.\nbpo-29727\n: Register\narray.array\nas a\nMutableSequence\n. Patch by Pablo Galindo.\nbpo-39168\n: Remove the\n__new__\nmethod of\ntyping.Generic\n.\nbpo-41194\n: Fix a crash in the\n_ast\nmodule: it can no longer be loaded\nmore than once. It now uses a global state rather than a module state.\nbpo-41195\n: Add read-only ssl.SSLContext.security_level attribute to\nretrieve the context’s security level.\nbpo-41193\n: The\nwrite_history()\natexit function of the readline\ncompleter now ignores any\nOSError\nto ignore error if the filesystem\nis read-only, instead of only ignoring\nFileNotFoundError\nand\nPermissionError\n.\nbpo-41182\n: selector: use DefaultSelector based upon implementation\nbpo-41161\n: The decimal module now requires libmpdec-2.5.0. Users of\n–with-system-libmpdec should update their system library.\nbpo-40874\n: The decimal module now requires libmpdec-2.5.0.\nbpo-41138\n: Fixed the\ntrace\nmodule CLI for Python source files with\nnon-UTF-8 encoding.\nbpo-31082\n: Use the term “iterable” in the docstring for\nfunctools.reduce()\n.\nbpo-40521\n: Remove freelist from collections.deque().\nbpo-31938\n: Fix default-value signatures of several functions in the\nselect\nmodule - by Anthony Sottile.\nbpo-41068\n: Fixed reading files with non-ASCII names from ZIP archive\ndirectly after writing them.\nbpo-41058\n:\npdb.find_function()\nnow correctly determines the source\nfile encoding.\nbpo-41056\n: Invalid file descriptor values are now prevented from being\npassed to os.fpathconf. (discovered by Coverity)\nbpo-41056\n: Fix a NULL pointer dereference within the ssl module during a\nMemoryError in the keylog callback. (discovered by Coverity)\nbpo-41056\n: Fixed an instance where a MemoryError within the zoneinfo\nmodule might not be reported or not reported at its source. (found by\nCoverity)\nbpo-41048\n:\nmimetypes.read_mime_types()\nfunction reads the rule file\nusing UTF-8 encoding, not the locale encoding. Patch by Srinivas Reddy\nThatiparthy.\nbpo-41043\n: Fixed the use of\nglob()\nin the stdlib: literal part\nof the path is now always correctly escaped.\nbpo-41025\n: Fixed an issue preventing the C implementation of\nzoneinfo.ZoneInfo\nfrom being subclassed.\nbpo-35018\n: Add the\nxml.sax.handler.LexicalHandler\nclass that is\npresent in other SAX XML implementations.\nbpo-41002\n: Improve performance of HTTPResponse.read with a given amount.\nPatch by Bruce Merry.\nbpo-40448\n:\nensurepip\nnow disables the use of\npip\ncache when\ninstalling the bundled versions of\npip\nand\nsetuptools\n.  Patch by\nKrzysztof Konopko.\nbpo-40967\n: Removed\nasyncio.Task.current_task()\nand\nasyncio.Task.all_tasks()\n. Patch contributed by Rémi Lapeyre.\nbpo-40924\n: Ensure\nimportlib.resources.path\nreturns an extant path for\nthe SourceFileLoader’s resource reader. Avoids the regression identified\nin master while a long-term solution is devised.\nbpo-40955\n: Fix a minor memory leak in\nsubprocess\nmodule when\nextra_groups was specified.\nbpo-40855\n: The standard deviation and variance functions in the statistics\nmodule were ignoring their mu and xbar arguments.\nbpo-40939\n: Use the new PEG parser when generating the stdlib\nkeyword\nmodule.\nbpo-23427\n: Add\nsys.orig_argv\nattribute: the list of the original\ncommand line arguments passed to the Python executable.\nbpo-33689\n: Ignore empty or whitespace-only lines in .pth files. This\nmatches the documentated behavior. Before, empty lines caused the\nsite-packages dir to appear multiple times in sys.path. By Ido Michael,\ncontributors Malcolm Smith and Tal Einat.\nbpo-40884\n: Added a\ndefaults\nparameter to\nlogging.Formatter\n,\nto allow specifying default values for custom fields. Patch by Asaf Alon\nand Bar Harel.\nbpo-40876\n: Clarify error message in the\ncsv\nmodule.\nbpo-39791\n: Refresh importlib.metadata from importlib_metadata 1.6.1.\nbpo-40807\n: Stop codeop._maybe_compile, used by code.InteractiveInterpreter\n(and IDLE). from emitting each warning three times.\nbpo-32604\n: Fix reference leak in the\nselect\nmodule when the module\nis imported in a subinterpreter.\nbpo-39791\n: Built-in loaders (SourceFileLoader and ZipImporter) now supply\nTraversableResources\nimplementations for\nResourceReader\n, and the\nfallback function has been removed.\nbpo-39314\n:\nrlcompleter.Completer\nand the standard Python shell\nnow close the parenthesis for functions that take no arguments. Patch\ncontributed by Rémi Lapeyre.\nbpo-17005\n: The topological sort functionality that was introduced\ninitially in the\nfunctools\nmodule has been moved to a new\ngraphlib\nmodule to better accommodate the new tools and keep the\noriginal scope of the\nfunctools\nmodule. Patch by Pablo Galindo\nbpo-40834\n: Fix truncate when sending str object\nwith_xxsubinterpreters.channel_send.\nbpo-40755\n: Add rich comparisons to collections.Counter().\nbpo-26407\n: Unexpected errors in calling the\n__iter__\nmethod are no\nlonger masked by\nTypeError\nin\ncsv.reader()\n,\ncsv.writer.writerow()\nand\ncsv.writer.writerows()\n.\nbpo-39384\n: Fixed email.contentmanager to allow set_content() to set a null\nstring.\nbpo-40744\n: The\nsqlite3\nmodule uses SQLite API functions that\nrequire SQLite v3.7.3 or higher.  This patch removes support for older\nSQLite versions, and explicitly requires SQLite 3.7.3 both at build,\ncompile and runtime.  Patch by Sergey Fedoseev and Erlend E. Aasland.\nbpo-40777\n: Initialize PyDateTime_IsoCalendarDateType.tp_base at run-time\nto avoid errors on some compilers.\nbpo-38488\n: Update ensurepip to install pip 20.1.1 and setuptools 47.1.0.\nbpo-40792\n: The result of\noperator.index()\nnow always has exact type\nint\n. Previously, the result could have been an instance of a\nsubclass of\nint\n.\nbpo-40767\n:\nwebbrowser\nnow properly finds the default browser in\npure Wayland systems by checking the WAYLAND_DISPLAY environment variable.\nPatch contributed by Jérémy Attali.\nbpo-40791\n:\nhashlib.compare_digest()\nuses OpenSSL’s\nCRYPTO_memcmp()\nfunction when OpenSSL is available.\nbpo-40795\n:\nctypes\nmodule: If ctypes fails to convert the result of\na callback or if a ctypes callback function raises an exception,\nsys.unraisablehook is now called with an exception set. Previously, the\nerror was logged into stderr by\nPyErr_Print()\n.\nbpo-16995\n: Add\nbase64.b32hexencode()\nand\nbase64.b32hexdecode()\nto support the Base32 Encoding with Extended Hex Alphabet.\nbpo-30008\n: Fix\nssl\ncode to be compatible with OpenSSL 1.1.x builds\nthat use\nno-deprecated\nand\n--api=1.1.0\n.\nbpo-30064\n: Fix asyncio\nloop.sock_*\nrace condition issue\nbpo-40759\n: Deprecate the\nsymbol\nmodule.\nbpo-40756\n: The second argument (extra) of\nLoggerAdapter.__init__\nnow\ndefaults to None.\nbpo-37129\n: Add a new\nos.RWF_APPEND\nflag for\nos.pwritev()\n.\nbpo-40737\n: Fix possible reference leak for\nsqlite3\ninitialization.\nbpo-40726\n: Handle cases where the\nend_lineno\nis\nNone\non\nast.increment_lineno()\n.\nbpo-40698\n:\ndistutils\nupload creates SHA2-256 and Blake2b-256 digests.\nMD5 digests is skipped if platform blocks MD5.\nbpo-40695\n:\nhashlib\nno longer falls back to builtin hash\nimplementations when OpenSSL provides a hash digest and the algorithm is\nblocked by security policy.\nbpo-9216\n:\nhashlib.new()\npassed\nusedforsecurity\nto OpenSSL EVP\nconstructor\n_hashlib.new()\n. test_hashlib and test_smtplib handle\nstrict security policy better.\nbpo-40614\n:\nast.parse()\nwill not parse self documenting expressions\nin f-strings when passed\nfeature_version\nis less than\n(3,\n8)\n.\nbpo-40626\n: Add h5 file extension as MIME Type application/x-hdf5, as per\nHDF Group recommendation for HDF5 formatted data files. Patch contributed\nby Mark Schwab.\nbpo-25920\n: On macOS, when building Python for macOS 10.4 and older, which\nwasn’t the case for python.org macOS installer,\nsocket.getaddrinfo()\nno longer uses an internal lock to prevent race conditions when calling\ngetaddrinfo()\nwhich is thread-safe since macOS 10.5. Python 3.9\nrequires macOS 10.6 or newer. The internal lock caused random hang on fork\nwhen another thread was calling\nsocket.getaddrinfo()\n. The lock was\nalso used on FreeBSD older than 5.3, OpenBSD older than 201311 and NetBSD\nolder than 4.\nbpo-40671\n: Prepare\n_hashlib\nfor\nPEP 489\nand use\nPyModule_AddType()\n.\nbpo-32309\n: Added a new\ncoroutine\nasyncio.to_thread()\n. It is\nmainly used for running IO-bound functions in a separate thread to avoid\nblocking the event loop, and essentially works as a high-level version of\nrun_in_executor()\nthat can directly take keyword\narguments.\nbpo-36543\n: Restored the deprecated\nxml.etree.cElementTree\nmodule.\nbpo-40611\n:\nMAP_POPULATE\nconstant has now been added to the\nlist of exported\nmmap\nmodule flags.\nbpo-39881\n: PEP 554 for use in the test suite. (Patch By Joannah Nanjekye)\nbpo-13097\n:\nctypes\nnow raises an\nArgumentError\nwhen a callback is\ninvoked with more than 1024 arguments.\nbpo-39385\n: A new test assertion context-manager,\nunittest.assertNoLogs()\nwill ensure a given block of code emits no\nlog messages using the logging module. Contributed by Kit Yan Choi.\nbpo-23082\n: Updated the error message and docs of PurePath.relative_to() to\nbetter reflect the function behaviour.\nbpo-40318\n: Use SQLite3 trace v2 API, if it is available.\nbpo-40105\n: ZipFile truncates files to avoid corruption when a shorter\ncomment is provided in append (“a”) mode. Patch by Jan Mazur.\nbpo-40084\n: Fix\nEnum.__dir__\n: dir(Enum.member) now includes attributes\nas well as methods.\nbpo-31122\n: ssl.wrap_socket() now raises ssl.SSLEOFError rather than\nOSError when peer closes connection during TLS negotiation\nbpo-39728\n: fix default\n_missing_\nso a duplicate\nValueError\nis not\nset as the\n__context__\nof the original\nValueError\n.\nbpo-39244\n: Fixed\nmultiprocessing.context.get_all_start_methods\nto\nproperly return the default method first on macOS.\nbpo-39040\n: Fix parsing of invalid mime headers parameters by collapsing\nwhitespace between encoded words in a bare-quote-string.\nbpo-38731\n: Add\n--quiet\noption to command-line interface of\npy_compile\n. Patch by Gregory Schevchenko.\nbpo-35714\n:\nstruct.error\nis now raised if there is a null character\nin a\nstruct\nformat string.\nbpo-38144\n: Added the\nroot_dir\nand\ndir_fd\nparameters in\nglob.glob()\n.\nbpo-26543\n: Fix\nIMAP4.noop()\nwhen debug mode is enabled (ex:\nimaplib.Debug\n=\n3\n).\nbpo-12178\n:\ncsv.writer()\nnow correctly escapes\nescapechar\nwhen\ninput contains\nescapechar\n.  Patch by Catalin Iacob, Berker Peksag, and\nItay Elbirt.\nbpo-36290\n: AST nodes are now raising\nTypeError\non conflicting\nkeyword arguments. Patch contributed by Rémi Lapeyre.\nbpo-33944\n: Added site.py site-packages tracing in verbose mode.\nbpo-35078\n: Refactor formatweekday, formatmonthname methods in\nLocaleHTMLCalendar and LocaleTextCalendar classes in calendar module to\ncall the base class methods.This enables customizable CSS classes for\nLocaleHTMLCalendar. Patch by Srinivas Reddy Thatiparthy\nbpo-29620\n:\nassertWarns()\nno longer raises a\nRuntimeException\nwhen accessing a module’s\n__warningregistry__\ncauses importation of a new module, or when a new module is imported in\nanother thread. Patch by Kernc.\nbpo-31844\n: Remove\nParserBase.error()\nmethod from the private and\nundocumented\n_markupbase\nmodule.\nhtml.parser.HTMLParser\nis\nthe only subclass of\nParserBase\nand its\nerror()\nimplementation was\ndeprecated in Python 3.4 and removed in Python 3.5.\nbpo-34226\n: Fix\ncgi.parse_multipart\nwithout content_length. Patch by\nRoger Duran\nbpo-33660\n: Fix pathlib.PosixPath to resolve a relative path located on the\nroot directory properly.\nbpo-28557\n: Improve the error message for a misbehaving\nrawio.readinto\nbpo-26680\n: The d.is_integer() method is added to the Decimal type, for\ncompatibility with other number types.\nbpo-26680\n: The x.is_integer() method is incorporated into the abstract\ntypes of the numeric tower, Real, Rational and Integral, with appropriate\ndefault implementations.\nDocumentation\n¶\nbpo-41428\n: Add documentation for\nPEP 604\n(Allow writing union types as\nX\n|\nY\n).\nbpo-41774\n: In Programming FAQ “Sequences (Tuples/Lists)” section, add “How\ndo you remove multiple items from a list”.\nbpo-35293\n: Fix RemovedInSphinx40Warning when building the documentation.\nPatch by Donghee Na.\nbpo-37149\n: Change Shipman tkinter doc link from archive.org to TkDocs.\n(The doc has been removed from the NMT server.)  The new link responds\nmuch faster and includes a short explanatory note.\nbpo-41726\n: Update the refcounts info of\nPyType_FromModuleAndSpec\n.\nbpo-41624\n: Fix the signature of\ntyping.Coroutine\n.\nbpo-40204\n: Enable Sphinx 3.2\nc_allow_pre_v3\noption and disable\nc_warn_on_allowed_pre_v3\noption to make the documentation compatible\nwith Sphinx 2 and Sphinx 3.\nbpo-41045\n: Add documentation for debug feature of f-strings.\nbpo-41314\n: Changed the release when\nfrom\n__future__\nimport\nannotations\nbecomes the default from\n4.0\nto\n3.10\n(following a change in PEP\n563).\nbpo-40979\n: Refactored typing.rst, arranging more than 70 classes,\nfunctions, and decorators into new sub-sections.\nbpo-40552\n: Fix in tutorial section 4.2. Code snippet is now correct.\nbpo-39883\n: Make code, examples, and recipes in the Python documentation be\nlicensed under the more permissive BSD0 license in addition to the\nexisting Python 2.0 license.\nbpo-37703\n: Updated Documentation to comprehensively elaborate on the\nbehaviour of gather.cancel()\nTests\n¶\nbpo-41939\n: Fix test_site.test_license_exists_at_url(): call\nurllib.request.urlcleanup()\nto reset the global\nurllib.request._opener\n. Patch by Victor Stinner.\nbpo-41731\n: Make test_cmd_line_script pass with option ‘-vv’.\nbpo-41602\n: Add tests for SIGINT handling in the runpy module.\nbpo-41521\n:\ntest.support\n: Rename\nblacklist\nparameter of\ncheck__all__()\nto\nnot_exported\n.\nbpo-41477\n: Make ctypes optional in test_genericalias.\nbpo-41085\n: Fix integer overflow in the\narray.array.index()\nmethod on\n64-bit Windows for index larger than\n2**31\n.\nbpo-41069\n:\ntest.support.TESTFN\nand the current directory for tests\nwhen run via\ntest.regrtest\ncontain now non-ascii characters if\npossible.\nbpo-38377\n: On Linux, skip tests using multiprocessing if the current user\ncannot create a file in\n/dev/shm/\ndirectory. Add the\nskip_if_broken_multiprocessing_synchronize()\nfunction\nto the\ntest.support\nmodule.\nbpo-41009\n: Fix use of\nsupport.require_{linux|mac|freebsd}_version()\ndecorators as class decorator.\nbpo-41003\n: Fix\ntest_copyreg\nwhen\nnumpy\nis installed:\ntest.pickletester\nnow saves/restores warnings filters when importing\nnumpy\n, to ignore filters installed by\nnumpy\n.\nbpo-40964\n: Disable remote\nimaplib\ntests, host cyrus.andrew.cmu.edu\nis blocking incoming connections.\nbpo-40927\n: Fix test_binhex when run twice: it now uses\nimport_fresh_module() to ensure that it raises DeprecationWarning each\ntime.\nbpo-17258\n: Skip some\nmultiprocessing\ntests when MD5 hash digest is\nblocked.\nbpo-31904\n: Increase LOOPBACK_TIMEOUT to 10 for VxWorks RTOS.\nbpo-38169\n: Increase code coverage for SharedMemory and ShareableList\nbpo-34401\n: Make test_gdb properly run on HP-UX. Patch by Michael Osipov.\nBuild\n¶\nbpo-38249\n: Update\nPy_UNREACHABLE\nto use __builtin_unreachable()\nif only the compiler is able to use it. Patch by Donghee Na.\nbpo-41617\n: Fix\npycore_bitutils.h\nheader file to support old clang\nversions:\n__builtin_bswap16()\nis not available in LLVM clang 3.0.\nbpo-40204\n: Pin Sphinx version to 2.3.1 in\nDoc/Makefile\n.\nbpo-36020\n: The C99 functions\nsnprintf()\nand\nvsnprintf()\nare now required to build Python.\nbpo-40684\n:\nmake\ninstall\nnow uses the\nPLATLIBDIR\nvariable for the\ndestination\nlib-dynload/\ndirectory when\n./configure\n--with-platlibdir\nis used.\nbpo-40683\n: Fixed an issue where the\nzoneinfo\nmodule and its tests\nwere not included when Python is installed with\nmake\n.\nWindows\n¶\nbpo-41744\n: Fixes automatic import of props file when using the Nuget\npackage.\nbpo-41627\n: The user site directory for 32-bit now includes a\n-32\nsuffix to distinguish it from the 64-bit interpreter’s directory.\nbpo-41526\n: Fixed layout of final page of the installer by removing the\nspecial thanks to Mark Hammond (with his permission).\nbpo-41492\n: Fixes the description that appears in UAC prompts.\nbpo-40948\n: Improve post-install message to direct people to the “py”\ncommand.\nbpo-41412\n: The installer will now fail to install on Windows 7 and Windows\n8. Further, the UCRT dependency is now always downloaded on demand.\nbpo-40741\n: Update Windows release to include SQLite 3.32.3.\nbpo-41142\n:\nmsilib\nnow supports creating CAB files with non-ASCII\nfile path and adding files with non-ASCII file path to them.\nbpo-41074\n: Fixed support of non-ASCII names in functions\nmsilib.OpenDatabase()\nand\nmsilib.init_database()\nand\nnon-ASCII SQL in method\nmsilib.Database.OpenView()\n.\nbpo-41039\n: Stable ABI redirection DLL (python3.dll) now uses\n#pragma\ncomment(linker)\nfor re-exporting.\nbpo-40164\n: Updates Windows OpenSSL to 1.1.1g\nbpo-39631\n: Changes the registered MIME type for\n.py\nfiles on Windows\nto\ntext/x-python\ninstead of\ntext/plain\n.\nbpo-40677\n: Manually define IO_REPARSE_TAG_APPEXECLINK in case some old\nWindows SDK doesn’t have it.\nbpo-37556\n: Extend py.exe help to mention overrides via venv, shebang,\nenvironmental variables & ini files.\nmacOS\n¶\nbpo-41557\n: Update macOS installer to use SQLite 3.33.0.\nbpo-39580\n: Avoid opening Finder window if running installer from the\ncommand line. Patch contributed by Rick Heil.\nbpo-41100\n: Fix configure error when building on macOS 11. Note that the\ncurrent Python release was released shortly after the first developer\npreview of macOS 11 (Big Sur); there are other known issues with building\nand running on the developer preview. Big Sur is expected to be fully\nsupported in a future bugfix release of Python 3.8.x and with 3.9.0.\nbpo-40741\n: Update macOS installer to use SQLite 3.32.3.\nbpo-41005\n: fixed an XDG settings issue not allowing macos to open browser\nin webbrowser.py\nbpo-40741\n: Update macOS installer to use SQLite 3.32.2.\nIDLE\n¶\nbpo-41775\n: Use ‘IDLE Shell’ as shell title\nbpo-35764\n: Rewrite the Calltips doc section.\nbpo-40181\n: In calltips, stop reminding that ‘/’ marks the end of\npositional-only arguments.\nbpo-41468\n: Improve IDLE run crash error message (which users should never\nsee).\nbpo-41373\n: Save files loaded with no line ending, as when blank, or\ndifferent line endings, by setting its line ending to the system default.\nFix regression in 3.8.4 and 3.9.0b4.\nbpo-41300\n: Save files with non-ascii chars. Fix regression released in\n3.9.0b4 and 3.8.4.\nbpo-37765\n: Add keywords to module name completion list.  Rewrite\nCompletions section of IDLE doc.\nbpo-41152\n: The encoding of\nstdin\n,\nstdout\nand\nstderr\nin IDLE is\nnow always UTF-8.\nbpo-41144\n: Make Open Module open a special module such as os.path.\nbpo-39885\n: Make context menu Cut and Copy work again when right-clicking\nwithin a selection.\nbpo-40723\n: Make test_idle pass when run after import.\nC API\n¶\nbpo-41936\n: Removed undocumented macros\nPy_ALLOW_RECURSION\nand\nPy_END_ALLOW_RECURSION\nand the\nrecursion_critical\nfield of the\nPyInterpreterState\nstructure.\nbpo-41692\n: The\nPyUnicode_InternImmortal()\nfunction is now deprecated\nand will be removed in Python 3.12: use\nPyUnicode_InternInPlace()\ninstead. Patch by Victor Stinner.\nbpo-41842\n: Add\nPyCodec_Unregister()\nfunction to unregister a codec\nsearch function.\nbpo-41834\n: Remove the\n_Py_CheckRecursionLimit\nvariable: it has been\nreplaced by\nceval.recursion_limit\nof the\nPyInterpreterState\nstructure. Patch by Victor Stinner.\nbpo-41689\n: Types created with\nPyType_FromSpec()\nnow make any\nsignature in their\ntp_doc\nslot accessible from\n__text_signature__\n.\nbpo-41524\n: Fix bug in PyOS_mystrnicmp and PyOS_mystricmp that incremented\npointers beyond the end of a string.\nbpo-41324\n: Add a minimal decimal capsule API.  The API supports fast\nconversions between Decimals up to 38 digits and their triple\nrepresentation as a C struct.\nbpo-30155\n: Add\nPyDateTime_DATE_GET_TZINFO()\nand\nPyDateTime_TIME_GET_TZINFO()\nmacros for accessing the\ntzinfo\nattributes of\ndatetime.datetime\nand\ndatetime.time\nobjects.\nbpo-40170\n: Revert\nPyType_HasFeature()\nchange: it reads again\ndirectly the\nPyTypeObject.tp_flags\nmember when the limited C\nAPI is not used, rather than always calling\nPyType_GetFlags()\nwhich hides implementation details.\nbpo-41123\n: Remove\nPyUnicode_AsUnicodeCopy\n.\nbpo-41123\n: Removed\nPyLong_FromUnicode()\n.\nbpo-41123\n: Removed\nPyUnicode_GetMax()\n.\nbpo-41123\n: Removed\nPy_UNICODE_str*\nfunctions manipulating\nPy_UNICODE*\nstrings.\nbpo-41103\n:\nPyObject_AsCharBuffer()\n,\nPyObject_AsReadBuffer()\n,\nPyObject_CheckReadBuffer()\n, and\nPyObject_AsWriteBuffer()\nare\nremoved. Please migrate to new buffer protocol;\nPyObject_GetBuffer()\nand\nPyBuffer_Release()\n.\nbpo-36346\n: Raises DeprecationWarning for\nPyUnicode_FromUnicode(NULL,\nsize)\nand\nPyUnicode_FromStringAndSize(NULL,\nsize)\nwith\nsize\n>\n0\n.\nbpo-36346\n: Mark\nPy_UNICODE_COPY\n,\nPy_UNICODE_FILL\n,\nPyUnicode_WSTR_LENGTH\n,\nPyUnicode_FromUnicode\n,\nPyUnicode_AsUnicode\n, and\nPyUnicode_AsUnicodeAndSize\nas deprecated\nin C. Remove\nPy_UNICODE_MATCH\nwhich was deprecated and broken since\nPython 3.3.\nbpo-40989\n: The\nPyObject_INIT()\nand\nPyObject_INIT_VAR()\nmacros become aliases to, respectively,\nPyObject_Init()\nand\nPyObject_InitVar()\nfunctions.\nbpo-36020\n: On Windows,\n#include\n\"pyerrors.h\"\nno longer defines\nsnprintf\nand\nvsnprintf\nmacros.\nbpo-40943\n: The\nPY_SSIZE_T_CLEAN\nmacro must now be defined to use\nPyArg_ParseTuple()\nand\nPy_BuildValue()\nformats which use\n#\n:\nes#\n,\net#\n,\ns#\n,\nu#\n,\ny#\n,\nz#\n,\nU#\nand\nZ#\n. See\nParsing arguments and building values\nand\nthe\nPEP 353\n.\nbpo-40910\n: Export explicitly the\nPy_GetArgcArgv()\nfunction to the\nC API and document the function. Previously, it was exported implicitly\nwhich no longer works since Python is built with\n-fvisibility=hidden\n.\nbpo-40724\n: Allow defining buffer slots in type specs.\nbpo-40679\n: Fix a\n_PyEval_EvalCode()\ncrash if\nqualname\nargument is\nNULL.\nbpo-40839\n: Calling\nPyDict_GetItem()\nwithout\nGIL\nheld had\nbeen allowed for historical reason. It is no longer allowed.\nbpo-40826\n:\nPyOS_InterruptOccurred()\nnow fails with a fatal error\nif it is called with the GIL released.\nbpo-40792\n: The result of\nPyNumber_Index()\nnow always has exact\ntype\nint\n. Previously, the result could have been an instance of a\nsubclass of\nint\n.\nbpo-39573\n: Convert\nPy_REFCNT()\nand\nPy_SIZE()\nmacros to\nstatic inline functions. They cannot be used as l-value anymore: use\nPy_SET_REFCNT()\nand\nPy_SET_SIZE()\nto set an object\nreference count and size. This change is backward incompatible on purpose,\nto prepare the C API for an opaque\nPyObject\nstructure.\nbpo-40703\n: The PyType_FromSpec*() functions no longer overwrite the type’s\n“__module__” attribute if it is set via “Py_tp_members” or “Py_tp_getset”.\nbpo-39583\n: Remove superfluous “extern C” declarations from\nInclude/cpython/*.h\n.\nPython 3.9.0 beta 1\n¶\nRelease date: 2020-05-19\nSecurity\n¶\nbpo-40501\n:\nuuid\nno longer uses\nctypes\nto load\nlibuuid\nor\nrpcrt4.dll\nat runtime.\nCore and Builtins\n¶\nbpo-40663\n: Correctly generate annotations where parentheses are omitted\nbut required (e.g:\nType[(str,\nint,\n*other))]\n.\nbpo-40596\n: Fixed\nstr.isidentifier()\nfor non-canonicalized strings\ncontaining non-BMP characters on Windows.\nbpo-40593\n: Improved syntax errors for invalid characters in source code.\nbpo-40585\n: Fixed a bug when using\ncodeop.compile_command()\nthat was\ncausing exceptions to be swallowed with the new parser. Patch by Pablo\nGalindo\nbpo-40566\n: Apply\nPEP 573\nto\nabc\n.\nbpo-40502\n: Initialize\nn->n_col_offset\n. (Patch by Joannah Nanjekye)\nbpo-40527\n: Fix command line argument parsing: no longer write errors\nmultiple times into stderr.\nbpo-1635741\n: Port\nerrno\nto multiphase initialization (\nPEP 489\n).\nbpo-40523\n: Add pass-throughs for\nhash()\nand\nreversed()\nto\nweakref.proxy\nobjects. Patch by Pablo Galindo.\nbpo-1635741\n: Port\nsyslog\nto multiphase initialization (\nPEP 489\n).\nbpo-40246\n: Reporting a specialised error message for invalid string\nprefixes, which was introduced in\nbpo-40246\n, is being reverted due to\nbackwards compatibility concerns for strings that immediately follow a\nreserved keyword without whitespace between them. Constructs like\nbg=\"#d00\"\nif\nclear\nelse\"#fca\"\nwere failing to parse, which is not an\nacceptable breakage on such short notice.\nbpo-40417\n: Fix imp module deprecation warning when PyImport_ReloadModule\nis called. Patch by Robert Rouhani.\nbpo-40408\n: Fixed support of nested type variables in GenericAlias (e.g.\nlist[list[T]]\n).\nbpo-1635741\n: Port _stat module to multiphase initialization (\nPEP 489\n).\nbpo-29587\n: Enable implicit exception chaining when calling\ngenerator.throw()\n.\nbpo-40328\n: Add tools for generating mappings headers for CJKCodecs.\nbpo-40228\n: Setting frame.f_lineno is now robust w.r.t. changes in the\nsource-to-bytecode compiler\nbpo-38880\n: Added the ability to list interpreters associated with channel\nends in the internal subinterpreters module.\nbpo-37986\n: Improve performance of\nPyLong_FromDouble()\nfor values\nthat fit into\nlong\n.\nLibrary\n¶\nbpo-40662\n: Fixed\nast.get_source_segment()\nfor ast nodes that have\nincomplete location information. Patch by Irit Katriel.\nbpo-40665\n: Convert\nbisect\nto use Argument Clinic.\nbpo-40536\n: Added the\navailable_timezones()\nfunction to the\nzoneinfo\nmodule. Patch by Paul Ganssle.\nbpo-40645\n: The\nhmac.HMAC\nexposes internal implementation details.\nThe attributes\ndigest_cons\n,\ninner\n, and\nouter\nare deprecated\nand will be removed in the future.\nbpo-40645\n: The internal module\n_hashlib\nwraps and exposes OpenSSL’s\nHMAC API. The new code will be used in Python 3.10 after the internal\nimplementation details of the pure Python HMAC module are no longer part\nof the public API.\nbpo-40637\n: Builtin hash modules can now be disabled or selectively enabled\nwith\nconfigure\n--with-builtin-hashlib-hashes=sha3,blake1\nor\n--without-builtin-hashlib-hashes\n.\nbpo-37630\n: The\nhashlib\nmodule can now use SHA3 hashes and SHAKE XOF\nfrom OpenSSL when available.\nbpo-40479\n: The\nhashlib\nnow compiles with OpenSSL 3.0.0-alpha2.\nbpo-40257\n: Revert changes to\ninspect.getdoc()\n.\nbpo-40607\n: When cancelling a task due to timeout,\nasyncio.wait_for()\nwill now propagate the exception if an error happens during cancellation.\nPatch by Roman Skurikhin.\nbpo-40612\n: Fix edge cases in SyntaxError formatting. If the offset is <=\n0, no caret is printed. If the offset is > line length, the caret is\nprinted pointing just after the last character.\nbpo-40597\n: If text content lines are longer than policy.max_line_length,\nalways use a content-encoding to make sure they are wrapped.\nbpo-40571\n: Added functools.cache() as a simpler, more discoverable way to\naccess the unbounded cache variant of lru_cache(maxsize=None).\nbpo-40503\n:\nPEP 615\n, the\nzoneinfo\nmodule. Adds support for the\nIANA time zone database.\nbpo-40397\n: Removed attributes\n__args__\nand\n__parameters__\nfrom\nspecial generic aliases like\ntyping.List\n(not subscripted).\nbpo-40549\n: Convert posixmodule.c (“posix” or “nt” module) to the\nmultiphase initialization (PEP 489).\nbpo-31033\n: Add a\nmsg\nargument to\nFuture.cancel()\nand\nTask.cancel()\n.\nbpo-40541\n: Added an optional\ncounts\nparameter to random.sample().\nbpo-40515\n: The\nssl\nand\nhashlib\nmodules now actively check\nthat OpenSSL is build with thread support. Python 3.7.0 made thread\nsupport mandatory and no longer works safely with a no-thread builds.\nbpo-31033\n: When a\nasyncio.Task\nis cancelled, the exception\ntraceback now chains all the way back to where the task was first\ninterrupted.\nbpo-40504\n:\nfunctools.lru_cache()\nobjects can now be the targets of\nweakrefs.\nbpo-40559\n: Fix possible memory leak in the C implementation of\nasyncio.Task\n.\nbpo-40480\n:\nfnmatch.fnmatch()\ncould take exponential time in the\npresence of multiple\n*\npattern characters.  This was repaired by\ngenerating more elaborate regular expressions to avoid futile\nbacktracking.\nbpo-40495\n:\ncompileall\nis now able to use hardlinks to prevent\nduplicates in a case when\n.pyc\nfiles for different optimization levels\nhave the same content.\nbpo-40457\n: The ssl module now support OpenSSL builds without TLS 1.0 and\n1.1 methods.\nbpo-40355\n: Improve error reporting in\nast.literal_eval()\nin the\npresence of malformed\nast.Dict\nnodes instead of silently ignoring\nany non-conforming elements. Patch by Curtis Bucher.\nbpo-40465\n: Deprecated the optional\nrandom\nargument to\nrandom.shuffle()\n.\nbpo-40459\n:\nplatform.win32_ver()\nnow produces correct\nptype\nstrings\ninstead of empty strings.\nbpo-39435\n: The first argument of\npickle.loads()\nis now\npositional-only.\nbpo-39305\n: Update\nnntplib\nto merge\nnntplib.NNTP\nand\nnntplib._NNTPBase\n. Patch by Donghee Na.\nbpo-32494\n: Update\ndbm.gnu\nto use gdbm_count if possible when\ncalling\nlen()\n. Patch by Donghee Na.\nbpo-40453\n: Add\nisolated=True\nkeyword-only parameter to\n_xxsubinterpreters.create()\n. An isolated subinterpreter cannot spawn\nthreads, spawn a child process or call\nos.fork()\n.\nbpo-40286\n: Remove\n_random.Random.randbytes()\n: the C implementation of\nrandbytes()\n. Implement the method in Python to ease subclassing:\nrandbytes()\nnow directly reuses\ngetrandbits()\n.\nbpo-40394\n: Added default arguments to\ndifflib.SequenceMatcher.find_longest_match()\n.\nbpo-39995\n: Fix a race condition in concurrent.futures._ThreadWakeup:\naccess to _ThreadWakeup is now protected with the shutdown lock.\nbpo-30966\n:\nProcess.shutdown(wait=True)\nof\nconcurrent.futures\nnow closes explicitly the result queue.\nbpo-30966\n: Add a new\nclose()\nmethod to\nthe\nSimpleQueue\nclass to explicitly close the\nqueue.\nbpo-39966\n: Revert\nbpo-25597\n.\nunittest.mock.MagicMock\nwith wraps’\nset uses default return values for magic methods.\nbpo-39791\n: Added\nfiles()\nfunction to importlib.resources with support\nfor subdirectories in package data, matching backport in\nimportlib_resources 1.5.\nbpo-40375\n:\nimaplib.IMAP4.unselect()\nis added. Patch by Donghee Na.\nbpo-40389\n:\nrepr()\nnow returns\ntyping.Optional[T]\nwhen called for\ntyping.Union\nof two types, one of which is\nNoneType\n.\nbpo-40291\n: Add support for CAN_J1939 sockets (available on Linux 5.4+)\nbpo-40273\n:\ntypes.MappingProxyType\nis now reversible.\nbpo-39075\n: The repr for\ntypes.SimpleNamespace\nis now insertion\nordered rather than alphabetical.\nbpo-40192\n: On AIX,\nthread_time()\nis now implemented with\nthread_cputime()\nwhich has nanosecond resolution, rather than\nclock_gettime(CLOCK_THREAD_CPUTIME_ID)\nwhich has a resolution of 10\nmilliseconds. Patch by Batuhan Taskaya.\nbpo-40025\n: Raise TypeError when _generate_next_value_ is defined after\nmembers. Patch by Ethan Onstott.\nbpo-39058\n: In the argparse module, the repr for Namespace() and other\nargument holders now displayed in the order attributes were added.\nFormerly, it displayed in alphabetical order even though argument order is\npreserved the user visible parts of the module.\nbpo-24416\n: The\nisocalendar()\nmethods of\ndatetime.date\nand\ndatetime.datetime\nnow return a\nnamed tuple\ninstead of a\ntuple\n.\nDocumentation\n¶\nbpo-34790\n: Add version of removal for explicit passing of coros to\nasyncio.wait()\n’s documentation\nbpo-40561\n: Provide docstrings for webbrowser open functions.\nbpo-40499\n: Mention that\nasyncio.wait()\nrequires a non-empty set of\nawaitables.\nbpo-39705\n: Tutorial example for sorted() in the Loop Techniques section is\ngiven a better explanation. Also a new example is included to explain\nsorted()’s basic behavior.\nbpo-39435\n: Fix an incorrect signature for\npickle.loads()\nin the docs\nTests\n¶\nbpo-40055\n: distutils.tests now saves/restores warnings filters to leave\nthem unchanged. Importing tests imports docutils which imports\npkg_resources which adds a warnings filter.\nbpo-40436\n: test_gdb and test.pythoninfo now check gdb command exit code.\nBuild\n¶\nbpo-40653\n: Move _dirnameW out of HAVE_SYMLINK to fix a potential compiling\nissue.\nbpo-40514\n: Add\n--with-experimental-isolated-subinterpreters\nbuild\noption to\nconfigure\n: better isolate subinterpreters, experimental\nbuild mode.\nWindows\n¶\nbpo-40650\n: Include winsock2.h in pytime.c for timeval.\nbpo-40458\n: Increase reserved stack space to prevent overflow crash on\nWindows.\nbpo-39148\n: Add IPv6 support to\nasyncio\ndatagram endpoints in\nProactorEventLoop. Change the raised exception for unknown address\nfamilies to ValueError as it’s not coming from Windows API.\nmacOS\n¶\nbpo-34956\n: When building Python on macOS from source,\n_tkinter\nnow\nlinks with non-system Tcl and Tk frameworks if they are installed in\n/Library/Frameworks\n, as had been the case on older releases of macOS.\nIf a macOS SDK is explicitly configured, by using\n--enable-universalsdk=\nor\n-isysroot\n, only the SDK itself is\nsearched. The default behavior can still be overridden with\n--with-tcltk-includes\nand\n--with-tcltk-libs\n.\nbpo-35569\n: Expose RFC 3542 IPv6 socket options.\nTools/Demos\n¶\nbpo-40479\n: Update multissltest helper to test with latest OpenSSL 1.0.2,\n1.1.0, 1.1.1, and 3.0.0-alpha.\nbpo-40431\n: Fix a syntax typo in\nturtledemo\nthat now raises a\nSyntaxError\n.\nbpo-40163\n: Fix multissltest tool. OpenSSL has changed download URL for old\nreleases. The multissltest tool now tries to download from current and old\ndownload URLs.\nC API\n¶\nbpo-39465\n: Remove the\n_PyUnicode_ClearStaticStrings()\nfunction from\nthe C API.\nbpo-38787\n: Add PyCFunction_CheckExact() macro for exact type checks now\nthat we allow subtypes of PyCFunction, as well as PyCMethod_CheckExact()\nand PyCMethod_Check() for the new PyCMethod subtype.\nbpo-40545\n: Declare\n_PyErr_GetTopmostException()\nwith\nPyAPI_FUNC()\nto properly export the function in the C API. The function remains private\n(\n_Py\n) prefix.\nbpo-40412\n: Nullify inittab_copy during finalization, preventing future\ninterpreter initializations in an embedded situation from crashing. Patch\nby Gregory Szorc.\nbpo-40429\n: The\nPyThreadState_GetFrame()\nfunction now returns a\nstrong reference to the frame.\nbpo-40428\n: Remove the following functions from the C API. Call\nPyGC_Collect()\nexplicitly to free all free lists.\nPyAsyncGen_ClearFreeLists()\nPyContext_ClearFreeList()\nPyDict_ClearFreeList()\nPyFloat_ClearFreeList()\nPyFrame_ClearFreeList()\nPyList_ClearFreeList()\nPySet_ClearFreeList()\nPyTuple_ClearFreeList()\nbpo-40421\n: New\nPyFrame_GetBack()\nfunction: get the frame next\nouter frame.\nbpo-40421\n: New\nPyFrame_GetCode()\nfunction: return a borrowed\nreference to the frame code.\nbpo-40217\n: Ensure that instances of types created with\nPyType_FromSpecWithBases()\nwill visit its class object when\ntraversing references in the garbage collector (implemented as an\nextension of the provided\ntp_traverse\n). Patch by\nPablo Galindo.\nbpo-38787\n: Module C state is now accessible from C-defined heap type\nmethods (\nPEP 573\n). Patch by Marcel Plch and Petr Viktorin.\nPython 3.9.0 alpha 6\n¶\nRelease date: 2020-04-27\nSecurity\n¶\nbpo-40121\n: Fixes audit events raised on creating a new socket.\nbpo-39073\n: Disallow CR or LF in email.headerregistry.Address arguments to\nguard against header injection attacks.\nbpo-39503\n:\nCVE 2020-8492\n: The\nAbstractBasicAuthHandler\nclass of the\nurllib.request\nmodule uses an inefficient regular expression which\ncan be exploited by an attacker to cause a denial of service. Fix the\nregex to prevent the catastrophic backtracking. Vulnerability reported by\nBen Caller and Matt Schwager.\nCore and Builtins\n¶\nbpo-40313\n: Improve the performance of bytes.hex().\nbpo-40334\n: Switch to a new parser, based on PEG.  For more details see PEP\n617. To temporarily switch back to the old parser, use\n-X\noldparser\nor\nPYTHONOLDPARSER=1\n.  In Python 3.10 we will remove the old parser\ncompletely, including the\nparser\nmodule (already deprecated) and\nanything that depends on it.\nbpo-40267\n: Fix the tokenizer to display the correct error message, when\nthere is a\nSyntaxError\non the last input character and no newline\nfollows. It used to be\nunexpected\nEOF\nwhile\nparsing\n, while it should\nbe\ninvalid\nsyntax\n.\nbpo-39522\n: Correctly unparse explicit\nu\nprefix for strings when\npostponed evaluation for annotations activated. Patch by Batuhan Taskaya.\nbpo-40246\n: Report a specialized error message,\ninvalid\nstring\nprefix\n,\nwhen the tokenizer encounters a string with an invalid prefix.\nbpo-40082\n: Fix the signal handler: it now always uses the main\ninterpreter, rather than trying to get the current Python thread state.\nbpo-37388\n: str.encode() and str.decode() no longer check the encoding and\nerrors in development mode or in debug mode during Python finalization.\nThe codecs machinery can no longer work on very late calls to str.encode()\nand str.decode().\nbpo-40077\n: Fix possible refleaks in\n_json\n, memo of PyScannerObject\nshould be traversed.\nbpo-37207\n: Speed up calls to\ndict()\nby using the\nPEP 590\nvectorcall\ncalling convention.\nbpo-40141\n: Add column and line information to\nast.keyword\nnodes. Patch\nby Pablo Galindo.\nbpo-1635741\n: Port\nresource\nto multiphase initialization\n(\nPEP 489\n).\nbpo-1635741\n: Port\nmath\nto multiphase initialization (\nPEP 489\n).\nbpo-1635741\n: Port _uuid module to multiphase initialization (\nPEP 489\n).\nbpo-40077\n: Convert json module to use\nPyType_FromSpec()\n.\nbpo-40067\n: Improve the error message for multiple star expressions in an\nassignment. Patch by Furkan Onder\nbpo-1635741\n: Port _functools module to multiphase initialization (PEP\n489). Patch by Paulo Henrique Silva.\nbpo-1635741\n: Port operator module to multiphase initialization (PEP 489).\nPatch by Paulo Henrique Silva.\nbpo-20526\n: Fix\nPyThreadState_Clear()\n.\nPyThreadState.frame\nis\na borrowed reference, not a strong reference:\nPyThreadState_Clear()\nmust not call\nPy_CLEAR(tstate->frame)\n.\nbpo-1635741\n: Port time module to multiphase initialization (\nPEP 489\n).\nPatch by Paulo Henrique Silva.\nbpo-1635741\n: Port _weakref extension module to multiphase initialization\n(\nPEP 489\n).\nbpo-40020\n: Fix a leak and subsequent crash in parsetok.c caused by realloc\nmisuse on a rare codepath.\nbpo-39939\n: Added str.removeprefix and str.removesuffix methods and\ncorresponding bytes, bytearray, and collections.UserString methods to\nremove affixes from a string if present. See\nPEP 616\nfor a full\ndescription. Patch by Dennis Sweeney.\nbpo-39481\n: Implement PEP 585. This supports list[int], tuple[str, …]\netc.\nbpo-32894\n: Support unparsing of infinity numbers in postponed annotations.\nPatch by Batuhan Taşkaya.\nbpo-37207\n: Speed up calls to\nlist()\nby using the\nPEP 590\nvectorcall\ncalling convention. Patch by Mark Shannon.\nLibrary\n¶\nbpo-40398\n:\ntyping.get_args()\nnow always returns an empty tuple for\nspecial generic aliases.\nbpo-40396\n: Functions\ntyping.get_origin()\n,\ntyping.get_args()\nand\ntyping.get_type_hints()\nsupport now generic aliases like\nlist[int]\n.\nbpo-38061\n: Optimize the\nsubprocess\nmodule on FreeBSD using\nclosefrom()\n. A single\nclose(fd)\nsyscall is cheap, but when\nsysconf(_SC_OPEN_MAX)\nis high, the loop calling\nclose(fd)\non each\nfile descriptor can take several milliseconds.\nThe workaround on FreeBSD to improve performance was to load and mount the\nfdescfs kernel module, but this is not enabled by default.\nInitial patch by Ed Maste (emaste), Conrad Meyer (cem), Kyle Evans\n(kevans) and Kubilay Kocak (koobs):\nhttps://bugs.freebsd.org/bugzilla/show_bug.cgi?id=242274\nbpo-38061\n: On FreeBSD,\nos.closerange(fd_low,\nfd_high)\nnow calls\nclosefrom(fd_low)\nif\nfd_high\nis greater than or equal to\nsysconf(_SC_OPEN_MAX)\n.\nInitial patch by Ed Maste (emaste), Conrad Meyer (cem), Kyle Evans\n(kevans) and Kubilay Kocak (koobs):\nhttps://bugs.freebsd.org/bugzilla/show_bug.cgi?id=242274\nbpo-40360\n: The\nlib2to3\nmodule is pending deprecation due to\nPEP 617\n.\nbpo-40138\n: Fix the Windows implementation of\nos.waitpid()\nfor exit\ncode larger than\nINT_MAX\n>>\n8\n. The exit status is now interpreted as\nan unsigned number.\nbpo-39942\n: Set “__main__” as the default module name when “__name__” is\nmissing in\ntyping.TypeVar\n. Patch by Weipeng Hong.\nbpo-40275\n: The\nlogging\npackage is now imported lazily in\nunittest\nonly when the\nassertLogs()\nassertion is used.\nbpo-40275\n: The\nasyncio\npackage is now imported lazily in\nunittest\nonly when the\nIsolatedAsyncioTestCase\nclass is used.\nbpo-40330\n: In\nShareableList.__setitem__()\n, check the size of a new\nstring item after encoding it to utf-8, not before.\nbpo-40148\n: Added\npathlib.Path.with_stem()\nto create a new Path with\nthe stem replaced.\nbpo-40325\n: Deprecated support for set objects in random.sample().\nbpo-40257\n: Improved help for the\ntyping\nmodule. Docstrings are now\nshown for all special forms and special generic aliases (like\nUnion\nand\nList\n). Using\nhelp()\nwith generic alias like\nList[int]\nwill\nshow the help for the correspondent concrete type (\nlist\nin this case).\nbpo-40257\n:\ninspect.getdoc()\nno longer returns docstring inherited\nfrom the type of the object or from parent class if it is a class if it is\nnot defined in the object itself. In\npydoc\nthe documentation string\nis now shown not only for class, function, method etc, but for any object\nthat has its own\n__doc__\nattribute.\nbpo-40287\n: Fixed\nSpooledTemporaryFile.seek()\nto return the position.\nbpo-40290\n: Added zscore() to statistics.NormalDist().\nbpo-40282\n: Allow\nrandom.getrandbits(0)\nto succeed and to return 0.\nbpo-40286\n: Add\nrandom.randbytes()\nfunction and\nrandom.Random.randbytes()\nmethod to generate random bytes.\nbpo-40277\n:\ncollections.namedtuple()\nnow provides a human-readable\nrepr for its field accessors.\nbpo-40270\n: The included copy of sqlite3 on Windows is now compiled with\nthe json extension. This allows the use of functions such as\njson_object\n.\nbpo-29255\n: Wait in\nKqueueSelector.select\nwhen no fds are registered\nbpo-40260\n: Ensure\nmodulefinder\nuses\nio.open_code()\nand\nrespects coding comments.\nbpo-40234\n: Allow again to spawn daemon threads in subinterpreters (revert\nchange which denied them).\nbpo-39207\n: Workers in\nProcessPoolExecutor\nare\nnow spawned on demand, only when there are no available idle workers to\nreuse. This optimizes startup overhead and reduces the amount of lost CPU\ntime to idle workers. Patch by Kyle Stanley.\nbpo-40091\n: Fix a hang at fork in the logging module: the new private\n_at_fork_reinit() method is now used to reinitialize locks at fork in the\nchild process.\nbpo-40149\n: Implement traverse and clear slots in _abc._abc_data type.\nbpo-40208\n: Remove deprecated\nsymtable.SymbolTable.has_exec()\n.\nbpo-40196\n: Fix a bug in the\nsymtable\nmodule that was causing\nincorrectly report global variables as local. Patch by Pablo Galindo.\nbpo-40190\n: Add support for\n_SC_AIX_REALMEM\nto\nposix.sysconf()\n.\nbpo-40182\n: Removed the\n_field_types\nattribute of the\ntyping.NamedTuple\nclass.\nbpo-36517\n: Multiple inheritance with\ntyping.NamedTuple\nnow raises\nan error instead of silently ignoring other types.\nbpo-40126\n: Fixed reverting multiple patches in unittest.mock. Patcher’s\n__exit__()\nis now never called if its\n__enter__()\nis failed.\nReturning true from\n__exit__()\nsilences now the exception.\nbpo-40094\n: CGIHTTPRequestHandler of http.server now logs the CGI script\nexit code, rather than the CGI script exit status of os.waitpid(). For\nexample, if the script is killed by signal 11, it now logs: “CGI script\nexit code -11.”\nbpo-40108\n: Improve the error message when triying to import a module using\nrunpy\nand incorrectly using the “.py” extension at the end of the\nmodule name. Patch by Pablo Galindo.\nbpo-40094\n: Add\nos.waitstatus_to_exitcode()\nfunction: convert a wait\nstatus to an exit code.\nbpo-40089\n: Fix threading._after_fork(): if fork was not called by a thread\nspawned by threading.Thread, threading._after_fork() now creates a\n_MainThread instance for _main_thread, instead of a _DummyThread instance.\nbpo-40089\n: Add a private\n_at_fork_reinit()\nmethod to\n_thread.Lock\n,\n_thread.RLock\n,\nthreading.RLock\nand\nthreading.Condition\nclasses: reinitialize the lock at fork in\nthe child process, reset the lock to the unlocked state. Rename also the\nprivate\n_reset_internal_locks()\nmethod of\nthreading.Event\nto\n_at_fork_reinit()\n.\nbpo-25780\n: Expose\nCAN_RAW_JOIN_FILTERS\nin the\nsocket\nmodule.\nbpo-39503\n:\nAbstractBasicAuthHandler\nof\nurllib.request\nnow parses all WWW-Authenticate HTTP headers and\naccepts multiple challenges per header: use the realm of the first Basic\nchallenge.\nbpo-39812\n: Removed daemon threads from\nconcurrent.futures\nby adding\nan internal\nthreading._register_atexit()\n, which calls registered\nfunctions prior to joining all non-daemon threads. This allows for\ncompatibility with subinterpreters, which don’t support daemon threads.\nbpo-40050\n: Fix\nimportlib._bootstrap_external\n: avoid creating a new\nwinreg\nbuiltin module if it’s already available in\nsys.modules\n, and remove redundant imports.\nbpo-40014\n: Fix\nos.getgrouplist()\n: if\ngetgrouplist()\nfunction fails\nbecause the group list is too small, retry with a larger group list. On\nfailure, the glibc implementation of\ngetgrouplist()\nsets\nngroups\nto the total number of groups. For other implementations, double the group\nlist size.\nbpo-40017\n: Add\ntime.CLOCK_TAI\nconstant if the operating system\nsupport it.\nbpo-40016\n: In re docstring, clarify the relationship between inline and\nargument compile flags.\nbpo-39953\n: Update internal table of OpenSSL error codes in the\nssl\nmodule.\nbpo-36144\n: Added\nPEP 584\noperators to\nweakref.WeakValueDictionary\n.\nbpo-36144\n: Added\nPEP 584\noperators to\nweakref.WeakKeyDictionary\n.\nbpo-38891\n: Fix linear runtime behaviour of the\n__getitem__\nand\n__setitem__\nmethods in\nmultiprocessing.shared_memory.ShareableList\n. This avoids\nquadratic performance when iterating a\nShareableList\n. Patch by Thomas\nKrennwallner.\nbpo-39682\n: Remove undocumented support for\nclosing\na\npathlib.Path\nobject via its context manager. The context manager magic methods remain,\nbut they are now a no-op, making\nPath\nobjects immutable.\nbpo-36144\n: Added\nPEP 584\noperators (\n|\nand\n|=\n) to\ncollections.ChainMap\n.\nbpo-39011\n: Normalization of line endings in ElementTree attributes was\nremoved, as line endings which were replaced by entity numbers should be\npreserved in original form.\nbpo-38410\n: Properly handle\nsys.audit()\nfailures in\nsys.set_asyncgen_hooks()\n.\nbpo-36541\n: lib2to3 now recognizes named assignment expressions (the walrus\noperator,\n:=\n)\nbpo-35967\n: In platform, delay the invocation of ‘uname -p’ until the\nprocessor attribute is requested.\nbpo-35113\n:\ninspect.getsource()\nnow returns correct source code for\ninner class with same name as module level class. Decorators are also\nreturned as part of source of the class. Patch by Karthikeyan\nSingaravelan.\nbpo-33262\n: Deprecate passing None as an argument for\nshlex.split()\n’s\ns\nparameter.  Patch by Zackery Spytz.\nbpo-31758\n: Prevent crashes when using an uninitialized\n_elementtree.XMLParser\nobject. Patch by Oren Milman.\nDocumentation\n¶\nbpo-27635\n: The pickle documentation incorrectly claimed that\n__new__\nisn’t called by default when unpickling.\nbpo-39879\n: Updated\nData model\ndocs to include\ndict()\ninsertion\norder preservation. Patch by Furkan Onder and Samy Lahfa.\nbpo-38387\n: Document\nPyDoc_STRVAR\nmacro in the C-API reference.\nbpo-13743\n: Some methods within xml.dom.minidom.Element class are now\nbetter documented.\nTests\n¶\nbpo-31904\n: Set expected default encoding in test_c_locale_coercion.py for\nVxWorks RTOS.\nbpo-40162\n: Update Travis CI configuration to OpenSSL 1.1.1f.\nbpo-40146\n: Update OpenSSL to 1.1.1f in Azure Pipelines.\nbpo-40094\n: Add\ntest.support.wait_process()\nfunction.\nbpo-40003\n:\ntest.bisect_cmd\nnow copies Python command line options like\n-O\nor\n-W\n. Moreover, emit a warning if\ntest.bisect_cmd\nis used\nwith\n-w\n/\n--verbose2\noption.\nbpo-39380\n: Add the encoding in\nftplib.FTP\nand\nftplib.FTP_TLS\nto the constructor as keyword-only and change the\ndefault from\nlatin-1\nto\nutf-8\nto follow\nRFC 2640\n.\nbpo-39793\n: Use the same domain when testing\nmake_msgid\n. Patch by\nBatuhan Taskaya.\nbpo-1812\n: Fix newline handling in doctest.testfile when loading from a\npackage whose loader has a get_data method. Patch by Peter Donis.\nBuild\n¶\nbpo-38360\n: Support single-argument form of macOS -isysroot flag.\nbpo-40158\n: Fix CPython MSBuild Properties in NuGet Package\n(build/native/python.props)\nbpo-38527\n: Fix configure check on Solaris for “float word ordering”:\nsometimes, the correct “grep” command was not being used. Patch by Arnon\nYaari.\nWindows\n¶\nbpo-40164\n: Updates Windows to OpenSSL 1.1.1f\nbpo-8901\n: Ignore the Windows registry when the\n-E\noption is used.\nmacOS\n¶\nbpo-38329\n: python.org macOS installers now update the Current version\nsymlink of /Library/Frameworks/Python.framework/Versions for 3.9 installs.\nPreviously, Current was only updated for Python 2.x installs. This should\nmake it easier to embed Python 3 into other macOS applications.\nbpo-40164\n: Update macOS installer builds to use OpenSSL 1.1.1g.\nIDLE\n¶\nbpo-38439\n: Add a 256×256 pixel IDLE icon to support more modern\nenvironments. Created by Andrew Clover. Delete the unused macOS idle.icns\nicon file.\nbpo-38689\n: IDLE will no longer freeze when inspect.signature fails when\nfetching a calltip.\nTools/Demos\n¶\nbpo-40385\n: Removed the checkpyc.py tool. Please see compileall without\nforce mode as a potential alternative.\nbpo-40179\n: Fixed translation of\n#elif\nin Argument Clinic.\nbpo-40094\n: Fix\nwhich.py\nscript exit code: it now uses\nos.waitstatus_to_exitcode()\nto convert\nos.system()\nexit status\ninto an exit code.\nC API\n¶\nbpo-40241\n: Move the\nPyGC_Head\nstructure to the internal C API.\nbpo-40170\n: Convert\nPyObject_IS_GC()\nmacro to a function to hide\nimplementation details.\nbpo-40241\n: Add the functions\nPyObject_GC_IsTracked()\nand\nPyObject_GC_IsFinalized()\nto the public API to allow to query if\nPython objects are being currently tracked or have been already finalized\nby the garbage collector respectively. Patch by Pablo Galindo.\nbpo-40170\n: The\nPyObject_NEW()\nmacro becomes an alias to the\nPyObject_New()\nmacro, and the\nPyObject_NEW_VAR()\nmacro\nbecomes an alias to the\nPyObject_NewVar()\nmacro, to hide\nimplementation details. They no longer access directly the\nPyTypeObject.tp_basicsize\nmember.\nbpo-40170\n:\nPyType_HasFeature()\nnow always calls\nPyType_GetFlags()\nto hide implementation details. Previously, it\naccessed directly the\nPyTypeObject.tp_flags\nmember when the\nlimited C API was not used.\nbpo-40170\n: Convert the\nPyObject_GET_WEAKREFS_LISTPTR()\nmacro to a\nfunction to hide implementation details: the macro accessed directly to\nthe\nPyTypeObject.tp_weaklistoffset\nmember.\nbpo-40170\n: Convert\nPyObject_CheckBuffer()\nmacro to a function to\nhide implementation details: the macro accessed directly the\nPyTypeObject.tp_as_buffer\nmember.\nbpo-40170\n: Always declare\nPyIndex_Check()\nas an opaque function to\nhide implementation details: remove\nPyIndex_Check()\nmacro. The macro\naccessed directly the\nPyTypeObject.tp_as_number\nmember.\nbpo-39947\n: Add\nPyThreadState_GetID()\nfunction: get the unique\nidentifier of a Python thread state.\nPython 3.9.0 alpha 5\n¶\nRelease date: 2020-03-23\nSecurity\n¶\nbpo-38576\n: Disallow control characters in hostnames in http.client,\naddressing\nCVE 2019-18348\n. Such potentially malicious header injection\nURLs now cause a InvalidURL to be raised.\nCore and Builtins\n¶\nbpo-40010\n: Optimize pending calls in multithreaded applications. If a\nthread different than the main thread schedules a pending call\n(\nPy_AddPendingCall()\n), the bytecode evaluation loop is no longer\ninterrupted at each bytecode instruction to check for pending calls which\ncannot be executed. Only the main thread can execute pending calls.\nPreviously, the bytecode evaluation loop was interrupted at each\ninstruction until the main thread executes pending calls.\nbpo-1635741\n: Port _weakref extension module to multiphase initialization\n(\nPEP 489\n).\nbpo-1635741\n: Port _collections module to multiphase initialization\n(\nPEP 489\n).\nbpo-40010\n: Optimize signal handling in multithreaded applications. If a\nthread different than the main thread gets a signal, the bytecode\nevaluation loop is no longer interrupted at each bytecode instruction to\ncheck for pending signals which cannot be handled. Only the main thread of\nthe main interpreter can handle signals.\nPreviously, the bytecode evaluation loop was interrupted at each\ninstruction until the main thread handles signals.\nbpo-39984\n: If\nPy_AddPendingCall()\nis called in a subinterpreter,\nthe function is now scheduled to be called from the subinterpreter, rather\nthan being called from the main interpreter. Each subinterpreter now has\nits own list of scheduled calls.\nbpo-1635741\n: Port _heapq module to multiphase initialization.\nbpo-1635741\n: Port itertools module to multiphase initialization\n(\nPEP 489\n).\nbpo-37207\n: Speed up calls to\nfrozenset()\nby using the\nPEP 590\nvectorcall\ncalling convention. Patch by Donghee Na.\nbpo-39984\n: subinterpreters: Move\n_PyRuntimeState.ceval.tracing_possible\nto\nPyInterpreterState.ceval.tracing_possible\n: each interpreter now has\nits own variable.\nbpo-37207\n: Speed up calls to\nset()\nby using the\nPEP 590\nvectorcall\ncalling convention. Patch by Donghee Na.\nbpo-1635741\n: Port _statistics module to multiphase initialization\n(\nPEP 489\n).\nbpo-39968\n: Use inline function to replace extension modules’\nget_module_state macros.\nbpo-39965\n: Correctly raise\nSyntaxError\nif\nawait\nis used inside\nnon-async functions and\nPyCF_ALLOW_TOP_LEVEL_AWAIT\nis set (like in the\nasyncio REPL). Patch by Pablo Galindo.\nbpo-39562\n: Allow executing asynchronous comprehensions on the top level\nwhen the\nPyCF_ALLOW_TOP_LEVEL_AWAIT\nflag is given. Patch by Batuhan\nTaskaya.\nbpo-37207\n: Speed up calls to\ntuple()\nby using the\nPEP 590\nvectorcall\ncalling convention. Patch by Donghee Na.\nbpo-38373\n: Changed list overallocation strategy. It no longer\noverallocates if the new size is closer to overallocated size than to the\nold size and adds padding.\nbpo-39926\n: Update Unicode database to Unicode version 13.0.0.\nbpo-19466\n: Clear the frames of daemon threads earlier during the Python\nshutdown to call objects destructors. So “unclosed file” resource warnings\nare now emitted for daemon threads in a more reliable way.\nbpo-38894\n: Fix a bug that was causing incomplete results when calling\npathlib.Path.glob\nin the presence of symlinks that point to files\nwhere the user does not have read access. Patch by Pablo Galindo and Matt\nWozniski.\nbpo-39877\n: Fix\nPyEval_RestoreThread()\nrandom crash at exit with\ndaemon threads. It now accesses the\n_PyRuntime\nvariable directly\ninstead of using\ntstate->interp->runtime\n, since\ntstate\ncan be a\ndangling pointer after\nPy_Finalize()\nhas been called. Moreover,\nthe daemon thread now exits before trying to take the GIL.\nbpo-39871\n: Fix a possible\nSystemError\nin\nmath.{atan2,copysign,remainder}()\nwhen the first argument cannot be\nconverted to a\nfloat\n. Patch by Zackery Spytz.\nbpo-39776\n: Fix race condition where threads created by PyGILState_Ensure()\ncould get a duplicate id.\nThis affects consumers of tstate->id like the contextvar caching\nmachinery, which could return invalid cached objects under heavy thread\nload (observed in embedded scenarios).\nbpo-39778\n: Fixed a crash due to incorrect handling of weak references in\ncollections.OrderedDict\nclasses. Patch by Pablo Galindo.\nbpo-1635741\n: Port audioop extension module to multiphase initialization\n(\nPEP 489\n).\nbpo-39702\n: Relax\ndecorator\ngrammar restrictions to allow any valid\nexpression (\nPEP 614\n).\nbpo-38091\n: Tweak import deadlock detection code to not deadlock itself.\nbpo-1635741\n: Port _locale extension module to multiphase initialization\n(\nPEP 489\n).\nbpo-39087\n: Optimize\nPyUnicode_AsUTF8()\nand\nPyUnicode_AsUTF8AndSize()\nslightly when they need to create\ninternal UTF-8 cache.\nbpo-39520\n: Fix unparsing of ext slices with no items (\nfoo[:,]\n). Patch\nby Batuhan Taskaya.\nbpo-39220\n: Do not optimize annotations if ‘from __future__ import\nannotations’ is used. Patch by Pablo Galindo.\nbpo-35712\n: Using\nNotImplemented\nin a boolean context has been\ndeprecated. Patch contributed by Josh Rosenberg.\nbpo-22490\n: Don’t leak environment variable\n__PYVENV_LAUNCHER__\ninto\nthe interpreter session on macOS.\nLibrary\n¶\nbpo-39830\n: Add\nzipfile.Path\nto\n__all__\nin the\nzipfile\nmodule.\nbpo-40000\n: Improved error messages for validation of\nast.Constant\nnodes. Patch by Batuhan Taskaya.\nbpo-39999\n:\n__module__\nof the AST node classes is now set to “ast”\ninstead of “_ast”. Added docstrings for dummy AST node classes and\ndeprecated attributes.\nbpo-39991\n:\nuuid.getnode()\nnow skips IPv6 addresses with the same\nstring length than a MAC address (17 characters): only use MAC addresses.\nbpo-39988\n: Deprecated\nast.AugLoad\nand\nast.AugStore\nnode classes\nbecause they are no longer used.\nbpo-39656\n: Ensure\nbin/python3.#\nis always present in virtual\nenvironments on POSIX platforms - by Anthony Sottile.\nbpo-39969\n: Deprecated\nast.Param\nnode class because it’s no longer\nused. Patch by Batuhan Taskaya.\nbpo-39360\n: Ensure all workers exit when finalizing a\nmultiprocessing.Pool\nimplicitly via the module finalization\nhandlers of multiprocessing. This fixes a deadlock situation that can be\nexperienced when the Pool is not properly finalized via the context\nmanager or a call to\nmultiprocessing.Pool.terminate\n. Patch by Batuhan\nTaskaya and Pablo Galindo.\nbpo-35370\n: sys.settrace(), sys.setprofile() and _lsprof.Profiler.enable()\nnow properly report\nPySys_Audit()\nerror if “sys.setprofile” or\n“sys.settrace” audit event is denied.\nbpo-39936\n: AIX: Fix _aix_support module when the subprocess is not\navailable, when building Python from scratch. It now uses new private\n_bootsubprocess module, rather than having two implementations depending\nif subprocess is available or not. So _aix_support.aix_platform() result\nis now the same if subprocess is available or not.\nbpo-36144\n:\ncollections.OrderedDict\nnow implements\n|\nand\n|=\n(\nPEP 584\n).\nbpo-39652\n: The column name found in\nsqlite3.Cursor.description\nis now\ntruncated on the first ‘[’ only if the PARSE_COLNAMES option is set.\nbpo-39915\n: Ensure\nunittest.mock.AsyncMock.await_args_list\nhas call\nobjects in the order of awaited arguments instead of using\nunittest.mock.Mock.call_args\nwhich has the last value of the call.\nPatch by Karthikeyan Singaravelan.\nbpo-36144\n: Updated\nos.environ\nand\nos.environb\nto support\nPEP 584\n’s merge (\n|\n) and update (\n|=\n) operators.\nbpo-38662\n: The\nensurepip\nmodule now invokes\npip\nvia the\nrunpy\nmodule. Hence it is no longer tightly coupled with the internal API of the\nbundled\npip\nversion, allowing easier updates to a newer\npip\nversion both internally and for distributors.\nbpo-38075\n: Fix the\nrandom.Random.seed()\nmethod when a\nbool\nis passed as the seed.\nbpo-39916\n: More reliable use of\nos.scandir()\nin\nPath.glob()\n. It no\nlonger emits a ResourceWarning when interrupted.\nbpo-39850\n:\nmultiprocessing\nnow supports abstract socket addresses\n(if abstract sockets are supported in the running platform). When creating\narbitrary addresses (like when default-constructing\nmultiprocessing.connection.Listener\nobjects) abstract sockets are\npreferred to avoid the case when the temporary-file-generated address is\ntoo large for an AF_UNIX socket address. Patch by Pablo Galindo.\nbpo-36287\n:\nast.dump()\nno longer outputs optional fields and\nattributes with default values. The default values for optional fields and\nattributes of AST nodes are now set as class attributes (e.g.\nConstant.kind\nis set to\nNone\n).\nbpo-39889\n: Fixed\nast.unparse()\nfor extended slices containing a\nsingle element (e.g.\na[i:j,]\n). Remove redundant tuples when index with\na tuple (e.g.\na[i,\nj]\n).\nbpo-39828\n: Fix\njson.tool\nto catch\nBrokenPipeError\n. Patch by\nDonghee Na.\nbpo-13487\n: Avoid a possible\n“RuntimeError: dictionary changed size during\niteration”\nfrom\ninspect.getmodule()\nwhen it tried to loop through\nsys.modules\n.\nbpo-39674\n: Revert “\nbpo-37330\n: open() no longer accept ‘U’ in file mode”.\nThe “U” mode of open() is kept in Python 3.9 to ease transition from\nPython 2.7, but will be removed in Python 3.10.\nbpo-28577\n: The hosts method on 32-bit prefix length IPv4Networks and\n128-bit prefix IPv6Networks now returns a list containing the single\nAddress instead of an empty list.\nbpo-39826\n: Add getConnection method to logging HTTPHandler to enable\ncustom connections.\nbpo-39763\n: Reimplement\ndistutils.spawn.spawn\nfunction with the\nsubprocess\nmodule.\nbpo-39794\n: Add –without-decimal-contextvar build option.  This enables a\nthread-local rather than a coroutine local context.\nbpo-36144\n:\ncollections.defaultdict\nnow implements\n|\n(\nPEP 584\n).\nbpo-39517\n: Fix runpy.run_path() when using pathlike objects\nbpo-39775\n: Change\ninspect.Signature.parameters\nback to\ncollections.OrderedDict\n. This was changed to\ndict\nin Python\n3.9.0a4.\nbpo-39678\n: Refactor queue_manager in\nconcurrent.futures.ProcessPoolExecutor\nto make it easier to\nmaintain.\nbpo-39764\n: Fix AttributeError when calling get_stack on a PyAsyncGenObject\nTask\nbpo-39769\n: The\ncompileall.compile_dir()\nfunction’s\nddir\nparameter\nand the compileall command line flag\n-d\nno longer write the wrong\npathname to the generated pyc file for submodules beneath the root of the\ndirectory tree being compiled.  This fixes a regression introduced with\nPython 3.5.\nbpo-36144\n:\ntypes.MappingProxyType\nobjects now support the merge\n(\n|\n) operator from\nPEP 584\n.\nbpo-38691\n: The\nimportlib\nmodule now ignores the\nPYTHONCASEOK\nenvironment variable when the\n-E\nor\n-I\ncommand line options are being used.\nbpo-39719\n: Remove\ntempfile.SpooledTemporaryFile.softspace()\nas files\nno longer have the\nsoftspace\nattribute in Python 3. Patch by Shantanu.\nbpo-39667\n: Improve pathlib.Path compatibility on zipfile.Path and correct\nperformance degradation as found in zipp 3.0.\nbpo-39638\n: Keep ASDL signatures in the docstrings for\nAST\nnodes. Patch\nby Batuhan Taskaya\nbpo-39639\n: Deprecated\nast.Suite\nnode class because it’s no longer\nused. Patch by Batuhan Taskaya.\nbpo-39609\n: Add thread_name_prefix to default asyncio executor\nbpo-39548\n: Fix handling of header in\nurllib.request.AbstractDigestAuthHandler\nwhen the optional\nqop\nparameter is not present.\nbpo-39509\n: HTTP status codes\n103\nEARLY_HINTS\nand\n425\nTOO_EARLY\nare\nadded to\nhttp.HTTPStatus\n. Patch by Donghee Na.\nbpo-39507\n: Adding HTTP status 418 “I’m a Teapot” to HTTPStatus in http\nlibrary. Patch by Ross Rhodes.\nbpo-39495\n: Remove default value from\nattrs\nparameter of\nxml.etree.ElementTree.TreeBuilder.start()\nfor consistency between\nPython and C implementations.\nbpo-38971\n: Open issue in the BPO indicated a desire to make the\nimplementation of codecs.open() at parity with io.open(), which implements\na try/except to assure file stream gets closed before an exception is\nraised.\nbpo-38641\n: Added starred expressions support to\nreturn\nand\nyield\nstatements for\nlib2to3\n. Patch by Vlad Emelianov.\nbpo-37534\n: When using minidom module to generate XML documents the ability\nto add Standalone Document Declaration is added. All the changes are made\nto generate a document in compliance with Extensible Markup Language (XML)\n1.0 (Fifth Edition) W3C Recommendation (available here:\nhttps://www.w3.org/TR/xml/#sec-prolog-dtd\n).\nbpo-34788\n: Add support for scoped IPv6 addresses to\nipaddress\n.\nPatch by Oleksandr Pavliuk.\nbpo-34822\n: Simplified AST for subscription. Simple indices are now\nrepresented by their value, extended slices are represented as tuples.\nast\nclasses\nIndex\nand\nExtSlice\nare considered deprecated\nand will be removed in future Python versions. In the meantime,\nIndex(value)\nnow returns a\nvalue\nitself,\nExtSlice(slices)\nreturns\nTuple(slices,\nLoad())\n.\nDocumentation\n¶\nbpo-39868\n: Updated the Language Reference for\nPEP 572\n.\nbpo-13790\n: Change ‘string’ to ‘specification’ in format doc.\nbpo-17422\n: The language reference no longer restricts default class\nnamespaces to dicts only.\nbpo-39530\n: Fix misleading documentation about mixed-type numeric\ncomparisons.\nbpo-39718\n: Update\ntoken\ndocumentation to reflect additions in\nPython 3.8\nbpo-39677\n: Changed operand name of\nMAKE_FUNCTION\nfrom\nargc\nto\nflags\nfor module\ndis\nTests\n¶\nbpo-40019\n: test_gdb now skips tests if it detects that gdb failed to read\ndebug information because the Python binary is optimized.\nbpo-27807\n:\ntest_site.test_startup_imports()\nis now skipped if a path\nof\nsys.path\ncontains a\n.pth\nfile.\nbpo-26067\n: Do not fail test_shutil test_chown test when uid or gid of user\ncannot be resolved to a name.\nbpo-39855\n: test_subprocess.test_user() now skips the test on an user name\nif the user name doesn’t exist. For example, skip the test if the user\n“nobody” doesn’t exist on Linux.\nBuild\n¶\nbpo-39761\n: Fix build with DTrace but without additional DFLAGS.\nbpo-39763\n: setup.py now uses a basic implementation of the\nsubprocess\nmodule if the\nsubprocess\nmodule is not available:\nbefore required C extension modules are built.\nbpo-1294959\n: Add\n--with-platlibdir\noption to the configure script:\nname of the platform-specific library directory, stored in the new\nsys.platlibdir\nattribute. It is used to build the path of\nplatform-specific extension modules and the path of the standard library.\nIt is equal to\n\"lib\"\non most platforms. On Fedora and SuSE, it is\nequal to\n\"lib64\"\non 64-bit platforms. Patch by Jan Matějek, Matěj\nCepl, Charalampos Stratakis and Victor Stinner.\nWindows\n¶\nbpo-39930\n: Ensures the required\nvcruntime140.dll\nis included in\ninstall packages.\nbpo-39847\n: Avoid hang when computer is hibernated whilst waiting for a\nmutex (for lock-related objects from\nthreading\n) around 49-day\nuptime.\nbpo-38597\n:\ndistutils\nwill no longer statically link\nvcruntime140.dll\nwhen a redistributable version is unavailable.\nAll future releases of CPython will include a copy of this DLL to ensure\ndistributed extensions can continue to load.\nbpo-38380\n: Update Windows builds to use SQLite 3.31.1\nbpo-39789\n: Update Windows release build machines to Visual Studio 2019\n(MSVC 14.2).\nbpo-34803\n: Package for nuget.org now includes repository reference and\nbundled icon image.\nmacOS\n¶\nbpo-38380\n: Update macOS builds to use SQLite 3.31.1\nIDLE\n¶\nbpo-27115\n: For ‘Go to Line’, use a Query box subclass with IDLE standard\nbehavior and improved error checking.\nbpo-39885\n: Since clicking to get an IDLE context menu moves the cursor,\nany text selection should be and now is cleared.\nbpo-39852\n: Edit “Go to line” now clears any selection, preventing\naccidental deletion. It also updates Ln and Col on the status bar.\nbpo-39781\n: Selecting code context lines no longer causes a jump.\nTools/Demos\n¶\nbpo-36184\n: Port python-gdb.py to FreeBSD. python-gdb.py now checks for\n“take_gil” function name to check if a frame tries to acquire the GIL,\ninstead of checking for “pthread_cond_timedwait” which is specific to\nLinux and can be a different condition than the GIL.\nbpo-38080\n: Added support to fix\ngetproxies\nin the\nlib2to3.fixes.fix_urllib\nmodule. Patch by José Roberto Meza\nCabrera.\nC API\n¶\nbpo-40024\n: Add\nPyModule_AddType()\nhelper function: add a type to a\nmodule. Patch by Donghee Na.\nbpo-39946\n: Remove\n_PyRuntime.getframe\nhook and remove\n_PyThreadState_GetFrame\nmacro which was an alias to\n_PyRuntime.getframe\n. They were only exposed by the internal C API.\nRemove also\nPyThreadFrameGetter\ntype.\nbpo-39947\n: Add\nPyThreadState_GetFrame()\nfunction: get the current\nframe of a Python thread state.\nbpo-37207\n: Add _PyArg_NoKwnames helper function. Patch by Donghee Na.\nbpo-39947\n: Add\nPyThreadState_GetInterpreter()\n: get the interpreter\nof a Python thread state.\nbpo-39947\n: Add\nPyInterpreterState_Get()\nfunction to the limited C\nAPI.\nbpo-35370\n: If\nPySys_Audit()\nfails in\nPyEval_SetProfile()\nor\nPyEval_SetTrace()\n, log the error as an unraisable exception.\nbpo-39947\n: Move the static inline function flavor of\nPy_EnterRecursiveCall() and Py_LeaveRecursiveCall() to the internal C API:\nthey access PyThreadState attributes. The limited C API provides regular\nfunctions which hide implementation details.\nbpo-39947\n: Py_TRASHCAN_BEGIN_CONDITION and Py_TRASHCAN_END macro no longer\naccess PyThreadState attributes, but call new private _PyTrash_begin() and\n_PyTrash_end() functions which hide implementation details.\nbpo-39884\n:\nPyDescr_NewMethod()\nand\nPyCFunction_NewEx()\nnow\ninclude the method name in the SystemError “bad call flags” error message\nto ease debug.\nbpo-39877\n: Deprecated\nPyEval_InitThreads()\nand\nPyEval_ThreadsInitialized()\n. Calling\nPyEval_InitThreads()\nnow does nothing.\nbpo-38249\n:\nPy_UNREACHABLE\nis now implemented with\n__builtin_unreachable()\nand analogs in release mode.\nbpo-38643\n:\nPyNumber_ToBase()\nnow raises a\nSystemError\ninstead of crashing when called with invalid base.\nbpo-39882\n: The\nPy_FatalError()\nfunction is replaced with a macro\nwhich logs automatically the name of the current function, unless the\nPy_LIMITED_API\nmacro is defined.\nbpo-39824\n: Extension modules:\nm_traverse\n,\nm_clear\nand\nm_free\nfunctions of\nPyModuleDef\nare no longer called if the module\nstate was requested but is not allocated yet. This is the case immediately\nafter the module is created and before the module is executed\n(\nPy_mod_exec\nfunction). More precisely, these functions are not\ncalled if\nm_size\nis greater than 0 and the module\nstate (as returned by\nPyModule_GetState()\n) is\nNULL\n.\nExtension modules without module state (\nm_size\n<=\n0\n) are not affected.\nbpo-38913\n: Fixed segfault in\nPy_BuildValue()\ncalled with a format\ncontaining “#” and undefined PY_SSIZE_T_CLEAN whwn an exception is set.\nbpo-38500\n: Add a private API to get and set the frame evaluation function:\nadd\n_PyInterpreterState_GetEvalFrameFunc()\nand\n_PyInterpreterState_SetEvalFrameFunc()\nC functions. The\n_PyFrameEvalFunction\nfunction type now takes a\ntstate\nparameter.\nPython 3.9.0 alpha 4\n¶\nRelease date: 2020-02-25\nSecurity\n¶\nbpo-39184\n: Add audit events to functions in\nfcntl\n,\nmsvcrt\n,\nos\n,\nresource\n,\nshutil\n,\nsignal\nand\nsyslog\n.\nbpo-39401\n: Avoid unsafe DLL load at startup on Windows 7 and earlier.\nbpo-39184\n: Add audit events to command execution functions in os and pty\nmodules.\nCore and Builtins\n¶\nbpo-39382\n: Fix a use-after-free in the single inheritance path of\nissubclass()\n, when the\n__bases__\nof an object has a single\nreference, and so does its first item. Patch by Yonatan Goldschmidt.\nbpo-39573\n: Update clinic tool to use\nPy_IS_TYPE()\n. Patch by\nDonghee Na.\nbpo-39619\n: Enable use of\nos.chroot()\non HP-UX systems.\nbpo-39573\n: Add\nPy_IS_TYPE()\nstatic inline function to check\nwhether the object\no\ntype is\ntype\n.\nbpo-39606\n: Fix regression caused by fix for\nbpo-39386\n, that prevented\ncalling\naclose\non an async generator that had already been closed or\nexhausted.\nbpo-39579\n: Change the ending column offset of\nAttribute\nnodes\nconstructed in\nast_for_dotted_name\nto point at the end of the current\nnode and not at the end of the last\nNAME\nnode.\nbpo-1635741\n: Port _crypt extension module to multiphase initialization\n(\nPEP 489\n).\nbpo-1635741\n: Port _contextvars extension module to multiphase\ninitialization (\nPEP 489\n).\nbpo-39510\n: Fix segfault in\nreadinto()\nmethod on closed BufferedReader.\nbpo-39502\n: Fix\ntime.localtime()\non 64-bit AIX  to support years\nbefore 1902 and after 2038. Patch by M Felt.\nbpo-39492\n: Fix a reference cycle in the C Pickler that was preventing the\ngarbage collection of deleted, pickled objects.\nbpo-39453\n: Fixed a possible crash in\nlist.__contains__()\nwhen a list\nis changed during comparing items. Patch by Donghee Na.\nbpo-39434\n:\nfloor division\nof float operation now has a better\nperformance. Also the message of\nZeroDivisionError\nfor this\noperation is updated. Patch by Donghee Na.\nbpo-1635741\n: Port _codecs extension module to multiphase initialization\n(\nPEP 489\n).\nbpo-1635741\n: Port _bz2 extension module to multiphase initialization\n(\nPEP 489\n).\nbpo-1635741\n: Port _abc extension module to multiphase initialization\n(\nPEP 489\n).\nbpo-39320\n: Replace two complex bytecodes for building dicts with two\nsimpler ones. The new bytecodes\nDICT_MERGE\nand\nDICT_UPDATE\nhave\nbeen added The old bytecodes\nBUILD_MAP_UNPACK\nand\nBUILD_MAP_UNPACK_WITH_CALL\nhave been removed.\nbpo-39219\n: Syntax errors raised in the tokenizer now always set correct\n“text” and “offset” attributes.\nbpo-36051\n: Drop the GIL during large\nbytes.join\noperations. Patch by\nBruce Merry.\nbpo-38960\n: Fix DTrace build issues on FreeBSD. Patch by David Carlier.\nbpo-37207\n: Speed up calls to\nrange()\nby about 30%, by using the PEP\n590\nvectorcall\ncalling convention. Patch by Mark Shannon.\nbpo-36144\n:\ndict\n(and\ncollections.UserDict\n) objects now\nsupport PEP 584’s merge (\n|\n) and update (\n|=\n) operators. Patch by\nBrandt Bucher.\nbpo-32856\n: Optimized the idiom for assignment a temporary variable in\ncomprehensions. Now\nfor\ny\nin\n[expr]\nin comprehensions is as fast as a\nsimple assignment\ny\n=\nexpr\n.\nLibrary\n¶\nbpo-30566\n: Fix\nIndexError\nwhen trying to decode an invalid string\nwith punycode codec.\nbpo-39649\n: Remove obsolete check for\n__args__\nin\nbdb.Bdb.format_stack_entry\n.\nbpo-39648\n: Expanded\nmath.gcd()\nand\nmath.lcm()\nto handle\nmultiple arguments.\nbpo-39681\n: Fix a regression where the C pickle module wouldn’t allow\nunpickling from a file-like object that doesn’t expose a readinto()\nmethod.\nbpo-35950\n: Raise\nio.UnsupportedOperation\nin\nio.BufferedReader.truncate()\nwhen it is called on a read-only\nio.BufferedReader\ninstance.\nbpo-39479\n: Add\nmath.lcm()\nfunction: least common multiple.\nbpo-39674\n: Revert “Do not expose abstract collection classes in the\ncollections module” change (\nbpo-25988\n). Aliases to ABC like\ncollections.Mapping are kept in Python 3.9 to ease transition from Python\n2.7, but will be removed in Python 3.10.\nbpo-39104\n: Fix hanging ProcessPoolExcutor on\nshutdown(wait=False)\nwhen\na task has failed pickling.\nbpo-39627\n: Fixed TypedDict totality check for inherited keys.\nbpo-39474\n: Fixed starting position of AST for expressions like\n(a)(b)\n,\n(a)[b]\nand\n(a).b\n.\nbpo-21016\n: The\npydoc\nand\ntrace\nmodules now use the\nsysconfig\nmodule to get the path to the Python standard library, to\nsupport uncommon installation path like\n/usr/lib64/python3.9/\non\nFedora. Patch by Jan Matějek.\nbpo-39590\n: Collections.deque now holds strong references during\ndeque.__contains__ and deque.count, fixing crashes.\nbpo-39586\n: The distutils\nbdist_msi\ncommand is deprecated in Python\n3.9, use\nbdist_wheel\n(wheel packages) instead.\nbpo-39595\n: Improved performance of zipfile.Path for files with a large\nnumber of entries. Also improved performance and fixed minor issue as\npublished with\nimportlib_metadata 1.5\n.\nbpo-39350\n: Fix regression in\nfractions.Fraction\nif the numerator\nand/or the denominator is an\nint\nsubclass. The\nmath.gcd()\nfunction is now used to normalize the\nnumerator\nand\ndenominator\n.\nmath.gcd()\nalways return a\nint\ntype. Previously, the GCD\ntype depended on\nnumerator\nand\ndenominator\n.\nbpo-39567\n: Added audit for\nos.walk()\n,\nos.fwalk()\n,\npathlib.Path.glob()\nand\npathlib.Path.rglob()\n.\nbpo-39559\n: Remove unused, undocumented argument\ngetters\nfrom\nuuid.getnode()\nbpo-38149\n:\nsys.audit()\nis now called only once per call of\nglob.glob()\nand\nglob.iglob()\n.\nbpo-39546\n: Fix a regression in\nArgumentParser\nwhere\nallow_abbrev=False\nwas ignored for long options that used a prefix\ncharacter other than “-“.\nbpo-39450\n: Striped whitespace from docstring before returning it from\nunittest.case.shortDescription()\n.\nbpo-12915\n: A new function\nresolve_name\nhas been added to the\npkgutil\nmodule. This resolves a string of the form\n'a.b.c.d'\nor\n'a.b:c.d'\nto an object. In the example,\na.b\nis a package/module\nand\nc.d\nis an object within that package/module reached via recursive\nattribute access.\nbpo-39353\n: The\nbinascii.crc_hqx()\nfunction is no longer deprecated.\nbpo-39493\n: Mark\ntyping.IO.closed\nas a property\nbpo-39491\n: Add\ntyping.Annotated\nand\ninclude_extras\nparameter\nto\ntyping.get_type_hints()\nas part of\nPEP 593\n. Patch by Till\nVaroquaux, documentation by Till Varoquaux and Konstantin Kashin.\nbpo-39485\n: Fix a bug in\nunittest.mock.create_autospec()\nthat would\ncomplain about the wrong number of arguments for custom descriptors\ndefined in an extension module returning functions.\nbpo-38932\n: Mock fully resets child objects on reset_mock(). Patch by\nVegard Stikbakke\nbpo-39082\n: Allow AsyncMock to correctly patch static/class methods\nbpo-39432\n: Implement PEP-489 algorithm for non-ascii “PyInit_…” symbol\nnames in distutils to make it export the correct init symbol also on\nWindows.\nbpo-18819\n: Omit\ndevmajor\nand\ndevminor\nfields for non-device files\nin\ntarfile\narchives, enabling bit-for-bit compatibility with GNU\ntar(1)\n.\nbpo-39349\n: Added a new\ncancel_futures\nparameter to\nconcurrent.futures.Executor.shutdown()\nthat cancels all pending\nfutures which have not started running, instead of waiting for them to\ncomplete before shutting down the executor.\nbpo-39274\n:\nbool(fraction.Fraction)\nnow returns a boolean even if\n(numerator != 0) does not return a boolean (ex: numpy number).\nbpo-34793\n: Remove support for\nwith\n(await\nasyncio.lock):\nand\nwith\n(yield\nfrom\nasyncio.lock):\n.  The same is correct for\nasyncio.Condition\nand\nasyncio.Semaphore\n.\nbpo-25597\n: Ensure, if\nwraps\nis supplied to\nunittest.mock.MagicMock\n, it is used to calculate return values\nfor the magic methods instead of using the default return values. Patch by\nKarthikeyan Singaravelan.\nbpo-36350\n:\ninspect.Signature.parameters\nand\ninspect.BoundArguments.arguments\nare now dicts instead of\nOrderedDicts. Patch contributed by Rémi Lapeyre.\nbpo-35727\n: Fix sys.exit() and sys.exit(None) exit code propagation when\nused in multiprocessing.Process.\nbpo-32173\n: * Add\nlazycache\nfunction to\n__all__\n. * Use\ndict.clear\nto clear the cache. * Refactoring\ngetline\nfunction and\ncheckcache\nfunction.\nDocumentation\n¶\nbpo-17422\n: The language reference now specifies restrictions on class\nnamespaces. Adapted from a patch by Ethan Furman.\nbpo-39572\n: Updated documentation of\ntotal\nflag of\nTypedDict\n.\nbpo-39654\n: In pyclbr doc, update ‘class’ to ‘module’ where appropriate and\nadd readmodule comment. Patch by Hakan Çelik.\nbpo-39153\n: Clarify refcounting semantics for the following functions: -\nPyObject_SetItem - PyMapping_SetItemString - PyDict_SetItem -\nPyDict_SetItemString\nbpo-39392\n: Explain that when filling with turtle, overlap regions may be\nleft unfilled.\nbpo-39369\n: Update mmap readline method description. The fact that the\nreadline method does update the file position should not be ignored since\nthis might give the impression for the programmer that it doesn’t update\nit.\nbpo-9056\n: Include subsection in TOC for PDF version of docs.\nTests\n¶\nbpo-38325\n: Skip tests on non-BMP characters of test_winconsoleio.\nbpo-39502\n: Skip test_zipfile.test_add_file_after_2107() if\ntime.localtime()\nfails with\nOverflowError\n. It is the case on\nAIX 6.1 for example.\nBuild\n¶\nbpo-39489\n: Remove\nCOUNT_ALLOCS\nspecial build.\nWindows\n¶\nbpo-39553\n: Delete unused code related to SxS manifests.\nbpo-39439\n: Honor the Python path when a virtualenv is active on Windows.\nbpo-39393\n: Improve the error message when attempting to load a DLL with\nunresolved dependencies.\nbpo-38883\n:\nhome()\nand\nexpanduser()\non Windows now prefer\nUSERPROFILE\nand no longer use\nHOME\n, which is not normally set for regular user accounts. This\nmakes them again behave like\nos.path.expanduser()\n, which was changed\nto ignore\nHOME\nin 3.8, see\nbpo-36264\n.\nbpo-39185\n: The build.bat script has additional options for very-quiet\noutput (-q) and very-verbose output (-vv)\nIDLE\n¶\nbpo-39663\n: Add tests for pyparse find_good_parse_start().\nbpo-39600\n: In the font configuration window, remove duplicated font names.\nbpo-30780\n: Add remaining configdialog tests for buttons and highlights and\nkeys tabs.\nbpo-39388\n: IDLE Settings Cancel button now cancels pending changes\nbpo-38792\n: Close an IDLE shell calltip if a\nKeyboardInterrupt\nor\nshell restart occurs.  Patch by Zackery Spytz.\nC API\n¶\nbpo-35081\n: Move the\nbytes_methods.h\nheader file to the internal C API\nas\npycore_bytes_methods.h\n: it only contains private symbols (prefixed\nby\n_Py\n), except of the\nPyDoc_STRVAR_shared()\nmacro.\nbpo-35081\n: Move the\ndtoa.h\nheader file to the internal C API as\npycore_dtoa.h\n: it only contains private functions (prefixed by\n_Py\n). The\nmath\nand\ncmath\nmodules must now be compiled\nwith the\nPy_BUILD_CORE\nmacro defined.\nbpo-39573\n: Add\nPy_SET_SIZE()\nfunction to set the size of an\nobject.\nbpo-39500\n:\nPyUnicode_IsIdentifier()\ndoes not call\nPy_FatalError()\nanymore if the string is not ready.\nbpo-39573\n: Add\nPy_SET_TYPE()\nfunction to set the type of an\nobject.\nbpo-39573\n: Add a\nPy_SET_REFCNT()\nfunction to set the reference\ncounter of an object.\nbpo-39542\n: Convert\nPyType_HasFeature()\n,\nPyType_Check()\nand\nPyType_CheckExact()\nmacros to static inline functions.\nbpo-39542\n: In the limited C API,\nPyObject_INIT()\nand\nPyObject_INIT_VAR()\nare now defined as aliases to\nPyObject_Init()\nand\nPyObject_InitVar()\nto make their\nimplementation opaque. It avoids to leak implementation details in the\nlimited C API. Exclude the following functions from the limited C API:\n_Py_NewReference()\n,\n_Py_ForgetReference()\n,\n_PyTraceMalloc_NewReference()\nand\n_Py_GetRefTotal()\n.\nbpo-39542\n: Exclude trashcan mechanism from the limited C API: it requires\naccess to PyTypeObject and PyThreadState structure fields, whereas these\nstructures are opaque in the limited C API.\nbpo-39511\n: The\nPyThreadState_Clear()\nfunction now calls the\nPyThreadState.on_delete\ncallback. Previously, that happened in\nPyThreadState_Delete()\n.\nbpo-38076\n: Fix to clear the interpreter state only after clearing module\nglobals to guarantee module state access from C Extensions during runtime\ndestruction\nbpo-39245\n: The Vectorcall API (PEP 590) was made public, adding the\nfunctions\nPyObject_Vectorcall\n,\nPyObject_VectorcallMethod\n,\nPyVectorcall_Function\n,\nPyObject_CallOneArg\n,\nPyObject_CallMethodNoArgs\n,\nPyObject_CallMethodOneArg\n,\nPyObject_FastCallDict\n, and the flag\nPy_TPFLAGS_HAVE_VECTORCALL\n.\nPython 3.9.0 alpha 3\n¶\nRelease date: 2020-01-24\nCore and Builtins\n¶\nbpo-39427\n: Document all possibilities for the\n-X\noptions in the\ncommand line help section. Patch by Pablo Galindo.\nbpo-39421\n: Fix possible crashes when operating with the functions in the\nheapq\nmodule and custom comparison operators.\nbpo-39386\n: Prevent double awaiting of async iterator.\nbpo-17005\n: Add\nfunctools.TopologicalSorter\nto the\nfunctools\nmodule to offers functionality to perform topological\nsorting of graphs. Patch by Pablo Galindo, Tim Peters and Larry Hastings.\nbpo-39320\n: Replace four complex bytecodes for building sequences with\nthree simpler ones.\nThe following four bytecodes have been removed:\nBUILD_LIST_UNPACK\nBUILD_TUPLE_UNPACK\nBUILD_SET_UNPACK\nBUILD_TUPLE_UNPACK_WITH_CALL\nThe following three bytecodes have been added:\nLIST_TO_TUPLE\nLIST_EXTEND\nSET_UPDATE\nbpo-39336\n: Import loaders which publish immutable module objects can now\npublish immutable packages in addition to individual modules.\nbpo-39322\n: Added a new function\ngc.is_finalized()\nto check if an\nobject has been finalized by the garbage collector. Patch by Pablo\nGalindo.\nbpo-39048\n: Improve the displayed error message when incorrect types are\npassed to\nasync\nwith\nstatements by looking up the\n__aenter__()\nspecial method before the\n__aexit__()\nspecial method when entering\nan asynchronous context manager. Patch by Géry Ogam.\nbpo-39235\n: Fix AST end location for lone generator expression in function\ncall, e.g. f(i for i in a).\nbpo-39209\n: Correctly handle multi-line tokens in interactive mode. Patch\nby Pablo Galindo.\nbpo-1635741\n: Port _json extension module to multiphase initialization\n(\nPEP 489\n).\nbpo-39216\n: Fix constant folding optimization for positional only arguments\n- by Anthony Sottile.\nbpo-39215\n: Fix\nSystemError\nwhen nested function has annotation on\npositional-only argument - by Anthony Sottile.\nbpo-39200\n: Correct the error message when calling the\nmin()\nor\nmax()\nwith no arguments. Patch by Donghee Na.\nbpo-39200\n: Correct the error message when trying to construct\nrange\nobjects with no arguments. Patch by Pablo Galindo.\nbpo-39166\n: Fix incorrect line execution reporting in trace functions when\ntracing the last iteration of asynchronous for loops. Patch by Pablo\nGalindo.\nbpo-39114\n: Fix incorrect line execution reporting in trace functions when\ntracing exception handlers with name binding. Patch by Pablo Galindo.\nbpo-39156\n: Split the COMPARE_OP bytecode instruction into four distinct\ninstructions.\nCOMPARE_OP for rich comparisons\nIS_OP for ‘is’ and ‘is not’ tests\nCONTAINS_OP for ‘in’ and ‘is not’ tests\nJUMP_IF_NOT_EXC_MATCH for checking exceptions in ‘try-except’ statements.\nThis improves the clarity of the interpreter and should provide a modest\nspeedup.\nbpo-38588\n: Fix possible crashes in dict and list when calling\nPyObject_RichCompareBool()\n.\nbpo-13601\n: By default,\nsys.stderr\nis line-buffered now, even if\nstderr\nis redirected to a file. You can still make\nsys.stderr\nunbuffered by passing the\n-u\ncommand-line option or setting the\nPYTHONUNBUFFERED\nenvironment variable.\n(Contributed by Jendrik Seipp in\nbpo-13601\n.)\nbpo-38610\n: Fix possible crashes in several list methods by holding strong\nreferences to list elements when calling\nPyObject_RichCompareBool()\n.\nbpo-32021\n: Include brotli .br encoding in mimetypes encodings_map\nLibrary\n¶\nbpo-39430\n: Fixed race condition in lazy imports in\ntarfile\n.\nbpo-39413\n: The\nos.unsetenv()\nfunction is now also available on\nWindows.\nbpo-39390\n: Fixed a regression with the\nignore\ncallback of\nshutil.copytree()\n. The argument types are now\nstr\nand\nList[str]\nagain.\nbpo-39395\n: The\nos.putenv()\nand\nos.unsetenv()\nfunctions are now\nalways available.\nbpo-39406\n: If\nsetenv()\nC function is available,\nos.putenv()\nis\nnow implemented with\nsetenv()\ninstead of\nputenv()\n, so Python\ndoesn’t have to handle the environment variable memory.\nbpo-39396\n: Fix\nmath.nextafter(-0.0,\n+0.0)\non AIX 7.1.\nbpo-29435\n: Allow\ntarfile.is_tarfile()\nto be used with file and\nfile-like objects, like\nzipfile.is_zipfile()\n. Patch by William\nWoodruff.\nbpo-39377\n: Removed\nencoding\noption from\njson.loads()\n.  It has\nbeen deprecated since Python 3.1.\nbpo-39389\n: Write accurate compression level metadata in\ngzip\narchives, rather than always signaling maximum compression.\nbpo-39366\n: The previously deprecated\nxpath()\nand\nxgtitle()\nmethods\nof\nnntplib.NNTP\nhave been removed.\nbpo-39357\n: Remove the\nbuffering\nparameter of\nbz2.BZ2File\n. Since\nPython 3.0, it was ignored and using it was emitting\nDeprecationWarning\n. Pass an open file object, to control how the\nfile is opened. The\ncompresslevel\nparameter becomes keyword-only.\nbpo-39353\n: Deprecate binhex4 and hexbin4 standards. Deprecate the\nbinhex\nmodule and the following\nbinascii\nfunctions:\nb2a_hqx()\n,\na2b_hqx()\n,\nrlecode_hqx()\n,\nrledecode_hqx()\n,\ncrc_hqx()\n.\nbpo-39351\n: Remove\nbase64.encodestring()\nand\nbase64.decodestring()\n,\naliases deprecated since Python 3.1: use\nbase64.encodebytes()\nand\nbase64.decodebytes()\ninstead.\nbpo-39350\n: Remove\nfractions.gcd()\nfunction, deprecated since Python\n3.5 (\nbpo-22486\n): use\nmath.gcd()\ninstead.\nbpo-39329\n:\nLMTP\nconstructor now has an optional\ntimeout\nparameter. Patch by Donghee Na.\nbpo-39313\n: Add a new\nexec_function\noption (\n–exec-function\nin the\nCLI) to\nRefactoringTool\nfor making\nexec\na function. Patch by\nBatuhan Taskaya.\nbpo-39259\n:\nFTP_TLS\nand\nFTP_TLS\nnow raise\na\nValueError\nif the given timeout for their constructor is zero\nto prevent the creation of a non-blocking socket. Patch by Donghee Na.\nbpo-39259\n:\nSMTP\nand\nSMTP_SSL\nnow raise\na\nValueError\nif the given timeout for their constructor is zero\nto prevent the creation of a non-blocking socket. Patch by Donghee Na.\nbpo-39310\n: Add\nmath.ulp()\n: return the value of the least significant\nbit of a float.\nbpo-39297\n: Improved performance of importlib.metadata distribution\ndiscovery and resilients to inaccessible sys.path entries\n(importlib_metadata v1.4.0).\nbpo-39259\n:\nNNTP\nand\nNNTP_SSL\nnow raise a\nValueError\nif the given timeout for their constructor is zero to\nprevent the creation of a non-blocking socket. Patch by Donghee Na.\nbpo-38901\n: When you specify prompt=’.’ or equivalently python -m venv\n–prompt . … the basename of the current directory is used to set the\ncreated venv’s prompt when it’s activated.\nbpo-39288\n: Add\nmath.nextafter()\n: return the next floating-point\nvalue after\nx\ntowards\ny\n.\nbpo-39259\n:\nPOP3\nand\nPOP3_SSL\nnow raise a\nValueError\nif the given timeout for their constructor is zero to\nprevent the creation of a non-blocking socket. Patch by Donghee Na.\nbpo-39242\n: Updated the Gmane domain from news.gmane.org to news.gmane.io\nwhich is used for examples of\nNNTP\nnews reader server and\nnntplib tests.\nbpo-35292\n: Proxy the\nSimpleHTTPRequestHandler.guess_type\nto\nmimetypes.guess_type\nso the\nmimetypes.init\nis called lazily to\navoid unnecessary costs when\nhttp.server\nmodule is imported.\nbpo-39239\n: The\nselect.epoll.unregister()\nmethod no longer ignores\nthe\nEBADF\nerror.\nbpo-38907\n: In http.server script, restore binding to IPv4 on Windows.\nbpo-39152\n: Fix ttk.Scale.configure([name]) to return configuration tuple\nfor name or all options.  Giovanni Lombardo contributed part of the patch.\nbpo-39198\n: If an exception were to be thrown in\nLogger.isEnabledFor\n(say, by asyncio timeouts or stopit) , the\nlogging\nglobal lock may not\nbe released appropriately, resulting in deadlock.  This change wraps that\nblock of code with\ntry...finally\nto ensure the lock is released.\nbpo-39191\n: Perform a check for running loop before starting a new task in\nloop.run_until_complete()\nto fail fast; it prevents the side effect of\nnew task spawning before exception raising.\nbpo-38871\n: Correctly parenthesize filter-based statements that contain\nlambda expressions in\nlib2to3\n. Patch by Donghee Na.\nbpo-39142\n: A change was made to logging.config.dictConfig to avoid\nconverting instances of named tuples to ConvertingTuple. It’s assumed that\nnamed tuples are too specialised to be treated like ordinary tuples; if a\nuser of named tuples requires ConvertingTuple functionality, they will\nhave to implement that themselves in their named tuple class.\nbpo-39158\n: ast.literal_eval() now supports empty sets.\nbpo-39129\n: Fix import path for\nasyncio.TimeoutError\nbpo-39057\n:\nurllib.request.proxy_bypass_environment()\nnow ignores\nleading dots and no longer ignores a trailing newline.\nbpo-39056\n: Fixed handling invalid warning category in the -W option.  No\nlonger import the re module if it is not needed.\nbpo-39055\n:\nbase64.b64decode()\nwith\nvalidate=True\nraises now a\nbinascii.Error if the input ends with a single\n\\n\n.\nbpo-21600\n: Fix\nmock.patch.stopall()\nto stop active patches that were\ncreated with\nmock.patch.dict()\n.\nbpo-39019\n: Implement dummy\n__class_getitem__\nfor\ntempfile.SpooledTemporaryFile\n.\nbpo-39019\n: Implement dummy\n__class_getitem__\nfor\nsubprocess.Popen\n,\nsubprocess.CompletedProcess\nbpo-38914\n: Adjusted the wording of the warning issued by distutils’\ncheck\ncommand when the\nauthor\nand\nmaintainer\nfields are\nsupplied but no corresponding e-mail field (\nauthor_email\nor\nmaintainer_email\n) is found. The wording now reflects the fact that\nthese fields are suggested, but not required. Patch by Juergen Gmach.\nbpo-38878\n: Fixed __subclasshook__ of\nos.PathLike\nto return a\ncorrect result upon inheritance. Patch by Bar Harel.\nbpo-38615\n:\nIMAP4\nand\nIMAP4_SSL\nnow\nhave an optional\ntimeout\nparameter for their constructors. Also, the\nopen()\nmethod now has an optional\ntimeout\nparameter\nwith this change. The overridden methods of\nIMAP4_SSL\nand\nIMAP4_stream\nwere applied to this change. Patch by\nDonghee Na.\nbpo-35182\n: Fixed\nPopen.communicate()\nsubsequent call crash when the\nchild process has already closed any piped standard stream, but still\ncontinues to be running. Patch by Andriy Maletsky.\nbpo-38630\n: On Unix,\nsubprocess.Popen.send_signal()\nnow polls the\nprocess status. Polling reduces the risk of sending a signal to the wrong\nprocess if the process completed, the\nsubprocess.Popen.returncode\nattribute is still\nNone\n, and the pid has been reassigned (recycled) to\na new different process.\nbpo-38536\n: Removes trailing space in formatted currency with\ninternational=True\nand a locale with symbol following value. E.g.\nlocale.currency(12.34,\ninternational=True)\nreturned\n'12,34\nEUR\n'\ninstead of\n'12,34\nEUR'\n.\nbpo-38473\n: Use signature from inner mock for autospecced methods attached\nwith\nunittest.mock.attach_mock()\n. Patch by Karthikeyan Singaravelan.\nbpo-38361\n: Fixed an issue where\nident\ncould include a leading path\nseparator when\nsyslog.openlog()\nwas called without arguments.\nbpo-38293\n: Add\ncopy.copy()\nand\ncopy.deepcopy()\nsupport to\nproperty()\nobjects.\nbpo-37958\n: Added the pstats.Stats.get_profile_dict() method to return the\nprofile data as a StatsProfile instance.\nbpo-28367\n: Termios magic constants for the following baud rates:   -\nB500000   - B576000   - B921600   - B1000000   - B1152000   - B1500000   -\nB2000000   - B2500000   - B3000000   - B3500000   - B4000000 Patch by\nAndrey Smirnov\nDocumentation\n¶\nbpo-39381\n: Mention in docs that\nasyncio.get_event_loop()\nimplicitly\ncreates new event loop only if called from the main thread.\nbpo-38918\n: Add an entry for\n__module__\nin the “function” & “method”\nsections of the\ninspect\ndocs’\nTypes and members\ntable.\nbpo-3530\n: In the\nast\nmodule documentation, fix a misleading\nNodeTransformer\nexample and add advice on when to use the\nfix_missing_locations\nfunction.\nBuild\n¶\nbpo-39395\n: On non-Windows platforms, the\nsetenv()\nand\nunsetenv()\nfunctions are now required to build Python.\nbpo-39160\n: Updated the documentation in\n./configure\n--help\nto show\ndefault values, reference documentation where required and add additional\nexplanation where needed.\nbpo-39144\n: The ctags and etags build targets both include Modules/_ctypes\nand Python standard library source files.\nIDLE\n¶\nbpo-39050\n: Make IDLE Settings dialog Help button work again.\nbpo-34118\n: Tag memoryview, range, and tuple as classes, the same as list,\netcetera, in the library manual built-in functions list.\nbpo-32989\n: Add tests for editor newline_and_indent_event method. Remove\ndead code from pyparse find_good_parse_start method.\nC API\n¶\nbpo-39372\n: Clean header files of interfaces defined but with no\nimplementation. The public API symbols being removed are:\n_PyBytes_InsertThousandsGroupingLocale\n,\n_PyBytes_InsertThousandsGrouping\n,\n_Py_InitializeFromArgs\n,\n_Py_InitializeFromWideArgs\n,\n_PyFloat_Repr\n,\n_PyFloat_Digits\n,\n_PyFloat_DigitsInit\n,\nPyFrame_ExtendStack\n,\n_PyAIterWrapper_Type\n,\nPyNullImporter_Type\n,\nPyCmpWrapper_Type\n,\nPySortWrapper_Type\n,\nPyNoArgsFunction\n.\nbpo-39164\n: Add a private\n_PyErr_GetExcInfo()\nfunction to retrieve\nexception information of the specified Python thread state.\nPython 3.9.0 alpha 2\n¶\nRelease date: 2019-12-18\nSecurity\n¶\nbpo-38945\n: Newline characters have been escaped when performing uu\nencoding to prevent them from overflowing into to content section of the\nencoded file. This prevents malicious or accidental modification of data\nduring the decoding process.\nbpo-37228\n: Due to significant security concerns, the\nreuse_address\nparameter of\nasyncio.loop.create_datagram_endpoint()\nis no longer\nsupported. This is because of the behavior of\nSO_REUSEADDR\nin UDP. For\nmore details, see the documentation for\nloop.create_datagram_endpoint()\n. (Contributed by Kyle Stanley, Antoine\nPitrou, and Yury Selivanov in\nbpo-37228\n.)\nbpo-38804\n: Fixes a ReDoS vulnerability in\nhttp.cookiejar\n. Patch by\nBen Caller.\nCore and Builtins\n¶\nbpo-39028\n: Slightly improve the speed of keyword argument parsing with\nmany kwargs by strengthening the assumption that kwargs are interned\nstrings.\nbpo-39080\n: Fix the value of\nend_col_offset\nfor Starred Expression AST\nnodes when they are among the elements in the\nargs\nattribute of Call AST\nnodes.\nbpo-39031\n: When parsing an “elif” node, lineno and col_offset of the node\nnow point to the “elif” keyword and not to its condition, making it\nconsistent with the “if” node. Patch by Lysandros Nikolaou.\nbpo-20443\n: In Python 3.9.0a1, sys.argv[0] was made an absolute path if a\nfilename was specified on the command line. Revert this change, since most\nusers expect sys.argv to be unmodified.\nbpo-39008\n:\nPySys_Audit()\nnow requires\nPy_ssize_t\nto be used\nfor size arguments in the format string, regardless of whether\nPY_SSIZE_T_CLEAN\nwas defined at include time.\nbpo-38673\n: In REPL mode, don’t switch to PS2 if the line starts with\ncomment or whitespace. Based on work by Batuhan Taşkaya.\nbpo-38922\n: Calling\nreplace\non a code object now raises the\ncode.__new__\naudit event.\nbpo-38920\n: Add audit hooks for when\nsys.excepthook()\nand\nsys.unraisablehook()\nare invoked.\nbpo-38892\n: Improve documentation for audit events table and functions.\nbpo-38852\n: Set the thread stack size to 8 Mb for debug builds on android\nplatforms.\nbpo-38858\n: Each Python subinterpreter now has its own “small integer\nsingletons”: numbers in [-5; 257] range. It is no longer possible to\nchange the number of small integers at build time by overriding\nNSMALLNEGINTS\nand\nNSMALLPOSINTS\nmacros: macros should now be\nmodified manually in\npycore_pystate.h\nheader file.\nbpo-36854\n: The garbage collector state becomes per interpreter\n(\nPyInterpreterState.gc\n), rather than being global\n(\n_PyRuntimeState.gc\n).\nbpo-38835\n: The\nPyFPE_START_PROTECT()\nand\nPyFPE_END_PROTECT()\nmacros are empty: they have been doing nothing for the last year, so stop\nusing them.\nbpo-38328\n: Sped up the creation time of constant\nlist\nand\nset\ndisplays. Patch by Brandt Bucher.\nbpo-38707\n:\nMainThread.native_id\nis now correctly reset in child\nprocesses spawned using\nmultiprocessing.Process\n, instead of\nretaining the parent’s value.\nbpo-38629\n: Added\n__floor__\nand\n__ceil__\nmethods to float object.\nPatch by Batuhan Taşkaya.\nbpo-27145\n: int + int and int - int operators can now return small integer\nsingletons. Patch by hongweipeng.\nbpo-38021\n: Provide a platform tag for AIX that is sufficient for PEP425\nbinary distribution identification. Patch by Michael Felt.\nbpo-35409\n: Ignore GeneratorExit exceptions when throwing an exception into\nthe aclose coroutine of an asynchronous generator.\nbpo-33387\n: Removed WITH_CLEANUP_START, WITH_CLEANUP_FINISH, BEGIN_FINALLY,\nEND_FINALLY, CALL_FINALLY and POP_FINALLY bytecodes. Replaced with RERAISE\nand WITH_EXCEPT_START bytecodes. The compiler now generates different code\nfor exceptional and non-exceptional branches for ‘with’ and ‘try-except’\nstatements. For ‘try-finally’ statements the ‘finally’ block is replicated\nfor each exit from the ‘try’ body.\nLibrary\n¶\nbpo-39033\n: Fix\nNameError\nin\nzipimport\n. Patch by Karthikeyan\nSingaravelan.\nbpo-39022\n: Update importlib.metadata to include improvements from\nimportlib_metadata 1.3 including better serialization of EntryPoints and\nimproved documentation for custom finders.\nbpo-39006\n: Fix asyncio when the ssl module is missing: only check for\nssl.SSLSocket instance if the ssl module is available.\nbpo-38708\n: Fix a potential IndexError in email parser when parsing an\nempty msg-id.\nbpo-38698\n: Add a new\nInvalidMessageID\ntoken to email parser to\nrepresent invalid Message-ID headers.  Also, add defects when there is\nremaining value after parsing the header.\nbpo-38994\n: Implement\n__class_getitem__\nfor\nos.PathLike\n,\npathlib.Path\n.\nbpo-38979\n: Return class from\nContextVar.__class_getitem__\nto simplify\nsubclassing.\nbpo-38978\n: Implement\n__class_getitem__\non asyncio objects (Future,\nTask, Queue). Patch by Batuhan Taskaya.\nbpo-38916\n:\narray.array\n: Remove\ntostring()\nand\nfromstring()\nmethods. They were aliases to\ntobytes()\nand\nfrombytes()\n, deprecated since Python 3.2.\nbpo-38986\n: Make repr of C accelerated TaskWakeupMethWrapper the same as of\npure Python version.\nbpo-38982\n: Fix asyncio\nPidfdChildWatcher\n: handle\nwaitpid()\nerror.\nIf\nwaitpid()\nis called elsewhere,\nwaitpid()\ncall fails with\nChildProcessError\n: use return code 255 in this case, and log a\nwarning. It ensures that the pidfd file descriptor is closed if this error\noccurs.\nbpo-38529\n: Drop too noisy asyncio warning about deletion of a stream\nwithout explicit\n.close()\ncall.\nbpo-27413\n: Added ability to pass through\nensure_ascii\noptions to\njson.dumps in the\njson.tool\ncommand-line interface.\nbpo-38634\n: The\nreadline\nmodule now detects if Python is linked to\nlibedit at runtime on all platforms.  Previously, the check was only done\non macOS.\nbpo-33684\n: Fix\njson.tool\nfailed to read a JSON file with non-ASCII\ncharacters when locale encoding is not UTF-8.\nbpo-38698\n: Prevent UnboundLocalError to pop up in parse_message_id.\nparse_message_id() was improperly using a token defined inside an\nexception handler, which was raising\nUnboundLocalError\non parsing an\ninvalid value. Patch by Claudiu Popa.\nbpo-38927\n: Use\npython\n-m\npip\ninstead of\npip\nto upgrade\ndependencies in venv.\nbpo-26730\n: Fix\nSpooledTemporaryFile.rollover()\nmight corrupt the file\nwhen it is in text mode. Patch by Serhiy Storchaka.\nbpo-38881\n: random.choices() now raises a ValueError when all the weights\nare zero.\nbpo-38876\n: Raise pickle.UnpicklingError when loading an item from memo for\ninvalid input.\nThe previous code was raising a\nKeyError\nfor both the Python and C\nimplementation. This was caused by the specified index of an invalid input\nwhich did not exist in the memo structure, where the pickle stores what\nobjects it has seen. The malformed input would have caused either a\nBINGET\nor\nLONG_BINGET\nload from the memo, leading to a\nKeyError\nas the determined index was bogus. Patch by Claudiu Popa.\nbpo-38688\n: Calling func:\nshutil.copytree\nto copy a directory tree from\none directory to another subdirectory resulted in an endless loop and a\nRecursionError. A fix was added to consume an iterator and create the list\nof the entries to be copied, avoiding the recursion for newly created\ndirectories. Patch by Bruno P. Kinoshita.\nbpo-38863\n: Improve\nis_cgi()\nfunction in\nhttp.server\n, which\nenables processing the case that cgi directory is a child of another\ndirectory other than root.\nbpo-37838\n:\ntyping.get_type_hints()\nproperly handles functions\ndecorated with\nfunctools.wraps()\n.\nbpo-38870\n: Expose\nast.unparse()\nas a function of the\nast\nmodule that can be used to unparse an\nast.AST\nobject and produce\na string with code that would produce an equivalent\nast.AST\nobject when parsed. Patch by Pablo Galindo and Batuhan Taskaya.\nbpo-38859\n: AsyncMock now returns StopAsyncIteration on the exhaustion of a\nside_effects iterable. Since PEP-479 its Impossible to raise a\nStopIteration exception from a coroutine.\nbpo-38857\n: AsyncMock fix for return values that are awaitable types.  This\nalso covers side_effect iterable values that happened to be awaitable, and\nwraps callables that return an awaitable type. Before these awaitables\nwere being awaited instead of being returned as is.\nbpo-38834\n:\ntyping.TypedDict\nsubclasses now track which keys are\noptional using the\n__required_keys__\nand\n__optional_keys__\nattributes, to enable runtime validation by downstream projects.  Patch by\nZac Hatfield-Dodds.\nbpo-38821\n: Fix unhandled exceptions in\nargparse\nwhen\ninternationalizing error messages for arguments with\nnargs\nset to\nspecial (non-integer) values. Patch by Federico Bond.\nbpo-38820\n: Make Python compatible with OpenSSL 3.0.0.\nssl.SSLSocket.getpeercert()\nno longer returns IPv6 addresses with a\ntrailing new line.\nbpo-38811\n: Fix an unhandled exception in\npathlib\nwhen\nos.link()\nis missing. Patch by Toke Høiland-Jørgensen.\nbpo-38686\n: Added support for multiple\nqop\nvalues in\nurllib.request.AbstractDigestAuthHandler\n.\nbpo-38712\n: Add the Linux-specific\nsignal.pidfd_send_signal()\nfunction, which allows sending a signal to a process identified by a file\ndescriptor rather than a pid.\nbpo-38348\n: Add\n-i\nand\n--indent\n(indentation level), and\n--no-type-comments\n(type comments) command line options to ast parsing\ntool.\nbpo-37523\n: Change\nzipfile.ZipExtFile\nto raise\nValueError\nwhen\ntrying to access the underlying file object after it has been closed. This\nnew behavior is consistent with how accessing closed files is handled in\nother parts of Python.\nbpo-38045\n: Improve the performance of\nenum._decompose()\nin\nenum\n. Patch by hongweipeng.\nbpo-36820\n: Break cycle generated when saving an exception in socket.py,\ncodeop.py and dyld.py as they keep alive not only the exception but user\nobjects through the\n__traceback__\nattribute. Patch by Mario Corchero.\nbpo-36406\n: Handle namespace packages in\ndoctest\n. Patch by\nKarthikeyan Singaravelan.\nbpo-34776\n: Fix dataclasses to support forward references in type\nannotations\nbpo-20928\n: ElementTree supports recursive XInclude processing.  Patch by\nStefan Behnel.\nbpo-29636\n: Add whitespace options for formatting JSON with the\njson.tool\nCLI. The following mutually exclusive options are now\nsupported:\n--indent\nfor setting the indent level in spaces;\n--tab\nfor indenting with tabs;\n--no-indent\nfor suppressing newlines; and\n--compact\nfor suppressing all whitespace. The default behavior remains\nthe same as\n--indent=4\n.\nDocumentation\n¶\nbpo-38928\n: Correct when venv’s\nupgrade_dependencies()\nand\n--upgrade-deps\nare added.\nbpo-38899\n: Update documentation to state that to activate virtual\nenvironments under fish one should use\nsource\n, not\n.\nas documented\nat\nhttps://fishshell.com/docs/current/cmds/source.html\n.\nbpo-22377\n: Improves documentation of the values that\ndatetime.datetime.strptime()\naccepts for\n%Z\n. Patch by Karl\nDubost.\nTests\n¶\nbpo-38546\n: Fix test_ressources_gced_in_workers() of\ntest_concurrent_futures: explicitly stop the manager to prevent leaking a\nchild process running in the background after the test completes.\nbpo-38546\n: Multiprocessing and concurrent.futures tests now stop the\nresource tracker process when tests complete.\nbpo-38614\n: Replace hardcoded timeout constants in tests with new\ntest.support\nconstants:\nLOOPBACK_TIMEOUT\n,\nINTERNET_TIMEOUT\n,\nSHORT_TIMEOUT\nand\nLONG_TIMEOUT\n. It becomes easier to adjust these four\ntimeout constants for all tests at once, rather than having to adjust\nevery single test file.\nbpo-38547\n: Fix test_pty: if the process is the session leader, closing the\nmaster file descriptor raises a SIGHUP signal: simply ignore SIGHUP when\nrunning the tests.\nbpo-38992\n: Fix a test for\nmath.fsum()\nthat was failing due to\nconstant folding.\nbpo-38991\n:\ntest.support\n:\nrun_python_until_end()\n,\nassert_python_ok()\nand\nassert_python_failure()\nfunctions no longer strip\nwhitespaces from stderr. Remove\ntest.support.strip_python_stderr()\nfunction.\nbpo-38965\n: Fix test_faulthandler on GCC 10. Use the “volatile” keyword in\nfaulthandler._stack_overflow()\nto prevent tail call optimization on\nany compiler, rather than relying on compiler specific pragma.\nbpo-38875\n: test_capi: trashcan tests now require the test “cpu” resource.\nbpo-38841\n: Skip asyncio test_create_datagram_endpoint_existing_sock_unix\non platforms lacking a functional bind() for named unix domain sockets.\nbpo-38692\n: Skip the test_posix.test_pidfd_open() test if\nos.pidfd_open()\nfails with a\nPermissionError\n. This situation\ncan happen in a Linux sandbox using a syscall whitelist which doesn’t\nallow the\npidfd_open()\nsyscall yet.\nbpo-38839\n: Fix some unused functions in tests. Patch by Adam Johnson.\nbpo-38669\n: Raise\nTypeError\nwhen passing target as a string with\nunittest.mock.patch.object()\n.\nbpo-37957\n: test.regrtest now can receive a list of test patterns to ignore\n(using the -i/–ignore argument) or a file with a list of patterns to\nignore (using the –ignore-file argument). Patch by Pablo Galindo.\nBuild\n¶\nbpo-37404\n:\nasyncio\nnow raises\nTypeError\nwhen calling\nincompatible methods with an\nssl.SSLSocket\nsocket.  Patch by Ido\nMichael.\nbpo-36500\n: Added an optional “regen” project to the Visual Studio solution\nthat will regenerate all grammar, tokens, and opcodes.\nWindows\n¶\nbpo-39007\n: Add auditing events to functions in\nwinreg\n.\nbpo-33125\n: Add support for building and releasing Windows ARM64 packages.\nmacOS\n¶\nbpo-37931\n: Fixed a crash on OSX dynamic builds that occurred when\nre-initializing the posix module after a Py_Finalize if the environment\nhad changed since the previous\nimport\nposix\n. Patch by Benoît Hudson.\nIDLE\n¶\nbpo-38944\n: Escape key now closes IDLE completion windows.  Patch by Johnny\nNajera.\nbpo-38943\n: Fix IDLE autocomplete windows not always appearing on some\nsystems. Patch by Johnny Najera.\nbpo-38862\n: ‘Strip Trailing Whitespace’ on the Format menu removes extra\nnewlines at the end of non-shell files.\nbpo-38636\n: Fix IDLE Format menu tab toggle and file indent width. These\nfunctions (default shortcuts Alt-T and Alt-U) were mistakenly disabled in\n3.7.5 and 3.8.0.\nC API\n¶\nbpo-38896\n: Remove\nPyUnicode_ClearFreeList()\nfunction: the Unicode free\nlist has been removed in Python 3.3.\nbpo-37340\n: Remove\nPyMethod_ClearFreeList()\nand\nPyCFunction_ClearFreeList()\nfunctions: the free lists of bound method\nobjects have been removed.\nbpo-38835\n: Exclude\nPyFPE_START_PROTECT()\nand\nPyFPE_END_PROTECT()\nmacros of\npyfpe.h\nfrom\nPy_LIMITED_API\n(stable API).\nPython 3.9.0 alpha 1\n¶\nRelease date: 2019-11-19\nSecurity\n¶\nbpo-38722\n:\nrunpy\nnow uses\nio.open_code()\nto open code files.\nPatch by Jason Killen.\nbpo-38622\n: Add additional audit events for the\nctypes\nmodule.\nbpo-38418\n: Fixes audit event for\nos.system()\nto be named\nos.system\n.\nbpo-38243\n: Escape the server title of\nxmlrpc.server.DocXMLRPCServer\nwhen rendering the document page as\nHTML. (Contributed by Donghee Na in\nbpo-38243\n.)\nbpo-38174\n: Update vendorized expat library version to 2.2.8, which\nresolves\nCVE 2019-15903\n.\nbpo-37764\n: Fixes email._header_value_parser.get_unstructured going into an\ninfinite loop for a specific case in which the email header does not have\ntrailing whitespace, and the case in which it contains an invalid encoded\nword. Patch by Ashwin Ramaswami.\nbpo-37461\n: Fix an infinite loop when parsing specially crafted email\nheaders. Patch by Abhilash Raj.\nbpo-37363\n: Adds audit events for the range of supported run commands (see\nCommand line and environment\n).\nbpo-37463\n: ssl.match_hostname() no longer accepts IPv4 addresses with\nadditional text after the address and only quad-dotted notation without\ntrailing whitespaces. Some inet_aton() implementations ignore whitespace\nand all data after whitespace, e.g. ‘127.0.0.1 whatever’.\nbpo-37363\n: Adds audit events for\nensurepip\n,\nftplib\n,\nglob\n,\nimaplib\n,\nnntplib\n,\npdb\n,\npoplib\n,\nshutil\n,\nsmtplib\n,\nsqlite3\n,\nsubprocess\n,\ntelnetlib\n,\ntempfile\nand\nwebbrowser\n, as well as\nos.listdir()\n,\nos.scandir()\nand\nbreakpoint()\n.\nbpo-37364\n:\nio.open_code()\nis now used when reading\n.pth\nfiles.\nbpo-34631\n: Updated OpenSSL to 1.1.1c in Windows installer\nbpo-34155\n: Fix parsing of invalid email addresses with more than one\n@\n(e.g. a@b@c.com.) to not return the part before 2nd\n@\nas valid email\naddress. Patch by maxking & jpic.\nCore and Builtins\n¶\nbpo-38631\n: Replace\nPy_FatalError()\ncall with a regular\nRuntimeError\nexception in\nfloat.__getformat__()\n.\nbpo-38639\n: Optimized\nmath.floor()\n,\nmath.ceil()\nand\nmath.trunc()\nfor floats.\nbpo-38640\n: Fixed a bug in the compiler that was causing to raise in the\npresence of break statements and continue statements inside always false\nwhile loops. Patch by Pablo Galindo.\nbpo-38613\n: Optimized some set operations (e.g.\n|\n,\n^\n, and\n-\n) of\ndict_keys\n.\nd.keys()\n|\nother\nwas slower than\nset(d)\n|\nother\nbut\nthey are almost same performance for now.\nbpo-28029\n:\n\"\".replace(\"\",\ns,\nn)\nnow returns\ns\ninstead of an empty\nstring for all non-zero\nn\n.  There are similar changes for\nbytes\nand\nbytearray\nobjects.\nbpo-38535\n: Fixed line numbers and column offsets for AST nodes for calls\nwithout arguments in decorators.\nbpo-38525\n: Fix a segmentation fault when using reverse iterators of empty\ndict\nobjects. Patch by Donghee Na and Inada Naoki.\nbpo-38465\n:\nbytearray\n,\narray\nand\nmmap\nobjects allow now to export more than\n2**31\nbuffers at a time.\nbpo-38469\n: Fixed a bug where the scope of named expressions was not being\nresolved correctly in the presence of the\nglobal\nkeyword. Patch by Pablo\nGalindo.\nbpo-38437\n: Activate the\nGC_DEBUG\nmacro for debug builds of the\ninterpreter (when\nPy_DEBUG\nis set). Patch by Pablo Galindo.\nbpo-38379\n: When the garbage collector makes a collection in which some\nobjects resurrect (they are reachable from outside the isolated cycles\nafter the finalizers have been executed), do not block the collection of\nall objects that are still unreachable. Patch by Pablo Galindo and Tim\nPeters.\nbpo-38379\n: When cyclic garbage collection (gc) runs finalizers that\nresurrect unreachable objects, the current gc run ends, without collecting\nany cyclic trash.  However, the statistics reported by\ncollect()\nand\nget_stats()\nclaimed that all cyclic trash found was collected, and\nthat the resurrected objects were collected.   Changed the stats to report\nthat none were collected.\nbpo-38392\n: In debug mode,\nPyObject_GC_Track()\nnow calls\ntp_traverse()\nof the object type to ensure that the object is valid:\ntest that objects visited by\ntp_traverse()\nare valid.\nbpo-38210\n: Remove unnecessary intersection and update set operation in\ndictview with empty set. (Contributed by Donghee Na in\nbpo-38210\n.)\nbpo-38402\n: Check the error from the system’s underlying\ncrypt\nor\ncrypt_r\n.\nbpo-37474\n: On FreeBSD, Python no longer calls\nfedisableexcept()\nat\nstartup to control the floating-point control mode. The call became\nuseless since FreeBSD 6: it became the default mode.\nbpo-38006\n: Fix a bug due to the interaction of weakrefs and the cyclic\ngarbage collector. We must clear any weakrefs in garbage in order to\nprevent their callbacks from executing and causing a crash.\nbpo-38317\n: Fix warnings options priority:\nPyConfig.warnoptions\nhas the\nhighest priority, as stated in the\nPEP 587\n.\nbpo-38310\n: Predict\nBUILD_MAP_UNPACK_WITH_CALL\n->\nCALL_FUNCTION_EX\nopcode pairs in the main interpreter loop. Patch by Brandt Bucher.\nbpo-36871\n: Improve error handling for the assert_has_calls and\nassert_has_awaits methods of mocks. Fixed a bug where any errors\nencountered while binding the expected calls to the mock’s spec were\nsilently swallowed, leading to misleading error output.\nbpo-11410\n: Better control over symbol visibility is provided through use\nof the visibility attributes available in gcc >= 4.0, provided in a\nuniform way across POSIX and Windows. The POSIX build files have been\nupdated to compile with -fvisibility=hidden, minimising exported symbols.\nbpo-38219\n: Optimized the\ndict\nconstructor and the\nupdate()\nmethod for the case when the argument is a dict.\nbpo-38236\n: Python now dumps path configuration if it fails to import the\nPython codecs of the filesystem and stdio encodings.\nbpo-38013\n: Allow to call\nasync_generator_athrow().throw(...)\neven for\nnon-started async generator helper. It fixes annoying warning at the end\nof\nasyncio.run()\ncall.\nbpo-38124\n: Fix an off-by-one error in PyState_AddModule that could cause\nout-of-bounds memory access.\nbpo-38116\n: The select module is now PEP-384 compliant and no longer has\nstatic state\nbpo-38113\n: ast module updated to PEP-384 and all statics removed\nbpo-38076\n: The struct module is now PEP-384 compatible\nbpo-38075\n: The random module is now PEP-384 compatible\nbpo-38074\n: zlib module made PEP-384 compatible\nbpo-38073\n: Make pwd extension module PEP-384 compatible\nbpo-38072\n: grp module made PEP-384 compatible\nbpo-38069\n: Make _posixsubprocess PEP-384 compatible\nbpo-38071\n: Make termios extension module PEP-384 compatible\nbpo-38005\n: Fixed comparing and creating of InterpreterID and ChannelID.\nbpo-36946\n: Fix possible signed integer overflow when handling slices.\nPatch by hongweipeng.\nbpo-37994\n: Fixed silencing arbitrary errors if an attribute lookup fails\nin several sites. Only AttributeError should be silenced.\nbpo-8425\n: Optimize set difference_update for the case when the other set\nis much larger than the base set.  (Suggested by Evgeny Kapun with code\ncontributed by Michele Orrù).\nbpo-37966\n: The implementation of\nis_normalized()\nhas\nbeen greatly sped up on strings that aren’t normalized, by implementing\nthe full normalization-quick-check algorithm from the Unicode standard.\nbpo-37947\n: Adjust correctly the recursion level in the symtable generation\nfor named expressions. Patch by Pablo Galindo.\nbpo-37812\n: The\nCHECK_SMALL_INT\nmacro used inside\nObject/longobject.c\nhas been replaced with an explicit\nreturn\nat each call site.\nbpo-37751\n: Fix\ncodecs.lookup()\nto normalize the encoding name the\nsame way than\nencodings.normalize_encoding()\n, except that\ncodecs.lookup()\nalso converts the name to lower case.\nbpo-37830\n: Fixed compilation of\nbreak\nand\ncontinue\nin the\nfinally\nblock when the corresponding\ntry\nblock contains\nreturn\nwith a non-constant value.\nbpo-20490\n: Improve import error message for partially initialized module\non circular\nfrom\nimports - by Anthony Sottile.\nbpo-37840\n: Fix handling of negative indices in\nsq_item\nof\nbytearray\n. Patch by\nSergey Fedoseev.\nbpo-37802\n: Slightly improve performance of\nPyLong_FromUnsignedLong()\n,\nPyLong_FromUnsignedLongLong()\nand\nPyLong_FromSize_t()\n. Patch by Sergey Fedoseev.\nbpo-37409\n: Ensure explicit relative imports from interactive sessions and\nscripts (having no parent package) always raise ImportError, rather than\ntreating the current module as the package. Patch by Ben Lewis.\nbpo-32912\n: Reverted\nbpo-32912\n: emitting\nSyntaxWarning\ninstead\nof\nDeprecationWarning\nfor invalid escape sequences in string and\nbytes literals.\nbpo-37757\n:\nPEP 572\n: As described in the PEP, assignment expressions now\nraise\nSyntaxError\nwhen their interaction with comprehension scoping\nresults in an ambiguous target scope.\nThe\nTargetScopeError\nsubclass originally proposed by the PEP has been\nremoved in favour of just raising regular syntax errors for the disallowed\ncases.\nbpo-36279\n: Fix potential use of uninitialized memory in\nos.wait3()\n.\nbpo-36311\n: Decoding bytes objects larger than 2GiB is faster and no longer\nfails when a multibyte characters spans a chunk boundary.\nbpo-34880\n: The\nassert\nstatement now works properly if the\nAssertionError\nexception is being shadowed. Patch by Zackery Spytz.\nbpo-37340\n: Removed object cache (\nfree_list\n) for bound method objects.\nTemporary bound method objects are less used than before thanks to the\nLOAD_METHOD\nopcode and the\n_PyObject_VectorcallMethod\nC API.\nbpo-37648\n: Fixed minor inconsistency in\nlist.__contains__()\n,\ntuple.__contains__()\nand a few other places. The collection’s item\nis now always at the left and the needle is on the right of\n==\n.\nbpo-37444\n: Update differing exception between\nbuiltins.__import__()\nand\nimportlib.__import__()\n.\nbpo-37619\n: When adding a wrapper descriptor from one class to a different\nclass (for example, setting\n__add__\n=\nstr.__add__\non an\nint\nsubclass), an exception is correctly raised when the operator is called.\nbpo-37593\n: Swap the positions of the\nposonlyargs\nand\nargs\nparameters\nin the constructor of\nast.parameters\nnodes.\nbpo-37543\n: Optimized pymalloc for non PGO build.\nbpo-37537\n: Compute allocated pymalloc blocks inside\n_Py_GetAllocatedBlocks().  This slows down _Py_GetAllocatedBlocks() but\ngives a small speedup to _PyObject_Malloc() and _PyObject_Free().\nbpo-37467\n: Fix\nsys.excepthook()\nand\nPyErr_Display()\nif a\nfilename is a bytes string. For example, for a SyntaxError exception where\nthe filename attribute is a bytes string.\nbpo-37433\n: Fix\nSyntaxError\nindicator printing too many spaces for\nmulti-line strings - by Anthony Sottile.\nbpo-37417\n:\nbytearray.extend()\nnow correctly handles errors that\narise during iteration. Patch by Brandt Bucher.\nbpo-37414\n: The undocumented\nsys.callstats()\nfunction has been removed.\nSince Python 3.7, it was deprecated and always returned\nNone\n. It\nrequired a special build option\nCALL_PROFILE\nwhich was already removed\nin Python 3.7.\nbpo-37392\n: Remove\nsys.getcheckinterval()\nand\nsys.setcheckinterval()\nfunctions. They were deprecated since Python\n3.2. Use\nsys.getswitchinterval()\nand\nsys.setswitchinterval()\ninstead. Remove also\ncheck_interval\nfield of the\nPyInterpreterState\nstructure.\nbpo-37388\n: In development mode and in debug build,\nencoding\nand\nerrors\narguments are now checked on string encoding and decoding operations.\nExamples:\nopen()\n,\nstr.encode()\nand\nbytes.decode()\n.\nBy default, for best performances, the\nerrors\nargument is only checked\nat the first encoding/decoding error, and the\nencoding\nargument is\nsometimes ignored for empty strings.\nbpo-37348\n: Optimized decoding short ASCII string with UTF-8 and ascii\ncodecs.\nb\"foo\".decode()\nis about 15% faster.  Patch by Inada Naoki.\nbpo-24214\n: Improved support of the surrogatepass error handler in the\nUTF-8 and UTF-16 incremental decoders.\nbpo-37330\n:\nopen()\n,\nio.open()\n,\ncodecs.open()\nand\nfileinput.FileInput\nno longer accept\n'U'\n(“universal\nnewline”) in the file mode. This flag was deprecated since Python 3.3.\nbpo-35224\n: Reverse evaluation order of key: value in dict comprehensions\nas proposed in PEP 572. I.e. in\n{k:\nv\nfor\n...}\n,\nk\nwill be\nevaluated before\nv\n.\nbpo-37316\n: Fix the\nPySys_Audit()\ncall in\nmmap.mmap\n.\nbpo-37300\n: Remove an unnecessary Py_XINCREF in classobject.c.\nbpo-37269\n: Fix a bug in the peephole optimizer that was not treating\ncorrectly constant conditions with binary operators. Patch by Pablo\nGalindo.\nbpo-20443\n: Python now gets the absolute path of the script filename\nspecified on the command line (ex: “python3 script.py”): the __file__\nattribute of the __main__ module and sys.path[0] become an absolute path,\nrather than a relative path.\nbpo-37257\n: Python’s small object allocator (\nobmalloc.c\n) now allows (no\nmore than) one empty arena to remain available for immediate reuse,\nwithout returning it to the OS.  This prevents thrashing in simple loops\nwhere an arena could be created and destroyed anew on each iteration.\nbpo-37231\n: The dispatching of type slots to special methods (for example\ncalling\n__mul__\nwhen doing\nx\n*\ny\n) has been made faster.\nbpo-36974\n: Implemented separate vectorcall functions for every calling\nconvention of builtin functions and methods. This improves performance for\ncalls.\nbpo-37213\n: Handle correctly negative line offsets in the peephole\noptimizer. Patch by Pablo Galindo.\nbpo-37219\n: Remove erroneous optimization for empty set differences.\nbpo-15913\n: Implement\nPyBuffer_SizeFromFormat()\nfunction\n(previously documented but not implemented): call\nstruct.calcsize()\n.\nPatch by Joannah Nanjekye.\nbpo-36922\n: Slot functions optimize any callable with\nPy_TPFLAGS_METHOD_DESCRIPTOR\ninstead of only instances of\nfunction\n.\nbpo-36974\n: The slot\ntp_vectorcall_offset\nis inherited unconditionally\nto support\nsuper().__call__()\nwhen the base class uses vectorcall.\nbpo-37160\n:\nthreading.get_native_id()\nnow also supports NetBSD.\nbpo-37077\n: Add\nthreading.get_native_id()\nsupport for AIX. Patch by\nM. Felt\nbpo-36781\n:\nsum()\nhas been optimized for boolean values.\nbpo-34556\n: Add\n--upgrade-deps\nto venv module. Patch by Cooper Ry Lees\nbpo-20523\n:\npdb.Pdb\nsupports ~/.pdbrc in Windows 7. Patch by Tim Hopper\nand Dan Lidral-Porter.\nbpo-35551\n: Updated encodings: - Removed the “tis260” encoding, which was\nan alias for the nonexistent “tactis” codec. - Added “mac_centeuro” as an\nalias for the mac_latin2 encoding.\nbpo-19072\n: The\nclassmethod\ndecorator can now wrap other\ndescriptors such as property objects.  Adapted from a patch written by\nGraham Dumpleton.\nbpo-27575\n: Improve speed of dictview intersection by directly using set\nintersection logic. Patch by David Su.\nbpo-30773\n: Prohibit parallel running of aclose() / asend() / athrow(). Fix\nag_running to reflect the actual running status of the AG.\nLibrary\n¶\nbpo-36589\n: The\ncurses.update_lines_cols()\nfunction now returns\nNone\ninstead of\n1\non success.\nbpo-38807\n: Update\nTypeError\nmessages for\nos.path.join()\nto\ninclude\nos.PathLike\nobjects as acceptable input types.\nbpo-38724\n: Add a repr for\nsubprocess.Popen\nobjects. Patch by Andrey\nDoroschenko.\nbpo-38786\n: pydoc now recognizes and parses HTTPS URLs. Patch by python273.\nbpo-38785\n: Prevent asyncio from crashing if parent\n__init__\nis not\ncalled from a constructor of object derived from\nasyncio.Future\n.\nbpo-38723\n:\npdb\nnow uses\nio.open_code()\nto trigger auditing\nevents.\nbpo-27805\n: Allow opening pipes and other non-seekable files in append mode\nwith\nopen()\n.\nbpo-38438\n: Simplify the\nargparse\nusage message for\nnargs=\"*\"\n.\nbpo-38761\n: WeakSet is now registered as a collections.abc.MutableSet.\nbpo-38716\n: logging: change RotatingHandler namer and rotator to\nclass-level attributes. This stops __init__ from setting them to None in\nthe case where a subclass defines them with eponymous methods.\nbpo-38713\n: Add\nos.P_PIDFD\nconstant, which may be passed to\nos.waitid()\nto wait on a Linux process file descriptor.\nbpo-38692\n: Add\nasyncio.PidfdChildWatcher\n, a Linux-specific child\nwatcher implementation that polls process file descriptors.\nbpo-38692\n: Expose the Linux\npidfd_open\nsyscall as\nos.pidfd_open()\n.\nbpo-38602\n: Added constants\nF_OFD_GETLK\n,\nF_OFD_SETLK\nand\nF_OFD_SETLKW\nto the\nfcntl\nmodule. Patch by Donghee Na.\nbpo-38334\n: Fixed seeking backward on an encrypted\nzipfile.ZipExtFile\n.\nbpo-38312\n: Add\ncurses.get_escdelay()\n,\ncurses.set_escdelay()\n,\ncurses.get_tabsize()\n, and\ncurses.set_tabsize()\nfunctions - by\nAnthony Sottile.\nbpo-38586\n: Now\nfileConfig()\ncorrectly sets the .name\nof handlers loaded.\nbpo-38565\n: Add new cache_parameters() method for functools.lru_cache() to\nbetter support pickling.\nbpo-34679\n: asynci.ProactorEventLoop.close() now only calls\nsignal.set_wakeup_fd() in the main thread.\nbpo-31202\n: The case the result of\npathlib.WindowsPath.glob()\nmatches\nnow the case of the pattern for literal parts.\nbpo-36321\n: Remove misspelled attribute.  The 3.8 changelog noted that this\nwould be removed in 3.9.\nbpo-38521\n: Fixed erroneous equality comparison in statistics.NormalDist().\nbpo-38493\n: Added\nCLD_KILLED\nand\nCLD_STOPPED\nfor\nsi_code\n. Patch by Donghee Na.\nbpo-38478\n: Fixed a bug in\ninspect.signature.bind()\nthat was causing\nit to fail when handling a keyword argument with same name as\npositional-only parameter. Patch by Pablo Galindo.\nbpo-33604\n: Fixed\nhmac.new\nand\nhmac.HMAC\nto raise TypeError instead\nof ValueError when the digestmod parameter, now required in 3.8, is\nomitted. Also clarified the hmac module documentation and docstrings.\nbpo-38378\n: Parameters\nout\nand\nin\nof\nos.sendfile()\nwas renamed to\nout_fd\nand\nin_fd\n.\nbpo-38417\n: Added support for setting the umask in the child process to the\nsubprocess module on POSIX systems.\nbpo-38449\n: Revert PR 15522, which introduces a regression in\nmimetypes.guess_type()\ndue to improper handling of filenames as\nurls.\nbpo-38431\n: Fix\n__repr__\nmethod for\ndataclasses.InitVar\nto\nsupport typing objects, patch by Samuel Colvin.\nbpo-38109\n: Add missing\nstat.S_IFDOOR\n,\nstat.S_IFPORT\n,\nstat.S_IFWHT\n,\nstat.S_ISDOOR()\n,\nstat.S_ISPORT()\n, and\nstat.S_ISWHT()\nvalues to the Python implementation of\nstat\n.\nbpo-38422\n: Clarify docstrings of pathlib suffix(es)\nbpo-38405\n: Nested subclasses of\ntyping.NamedTuple\nare now\npickleable.\nbpo-38332\n: Prevent\nKeyError\nthrown by\n_encoded_words.decode()\nwhen given an encoded-word with invalid\ncontent-type encoding from propagating all the way to\nemail.message.get()\n.\nbpo-38371\n: Deprecated the\nsplit()\nmethod in\n_tkinter.TkappType\nin favour of the\nsplitlist()\nmethod which\nhas more consistent and predictable behavior.\nbpo-38341\n: Add\nsmtplib.SMTPNotSupportedError\nto the\nsmtplib\nexported names.\nbpo-38319\n: sendfile() used in socket and shutil modules was raising\nOverflowError for files >= 2GiB on 32-bit architectures.  (patch by\nGiampaolo Rodola)\nbpo-38242\n: Revert the new asyncio Streams API\nbpo-13153\n: OS native encoding is now used for converting between Python\nstrings and Tcl objects.  This allows to display, copy and paste to\nclipboard emoji and other non-BMP characters.  Converting strings from Tcl\nto Python and back now never fails (except MemoryError).\nbpo-38019\n: Correctly handle pause/resume reading of closed asyncio unix\npipe.\nbpo-38163\n: Child mocks will now detect their type as either synchronous or\nasynchronous, asynchronous child mocks will be AsyncMocks and synchronous\nchild mocks will be either MagicMock or Mock (depending on their parent\ntype).\nbpo-38161\n: Removes _AwaitEvent from AsyncMock.\nbpo-38216\n: Allow the rare code that wants to send invalid http requests\nfrom the\nhttp.client\nlibrary a way to do so.  The fixes for\nbpo-30458\nled to breakage for some projects that were relying on this ability to\ntest their own behavior in the face of bad requests.\nbpo-28286\n: Deprecate opening\nGzipFile\nfor writing\nimplicitly.  Always specify the\nmode\nargument for writing.\nbpo-38108\n: Any synchronous magic methods on an AsyncMock now return a\nMagicMock. Any asynchronous magic methods on a MagicMock now return an\nAsyncMock.\nbpo-38265\n: Update the\nlength\nparameter of\nos.pread()\nto accept\nPy_ssize_t\ninstead of\nint\n.\nbpo-38112\n:\ncompileall\nhas a higher default recursion limit and new\ncommand-line arguments for path manipulation, symlinks handling, and\nmultiple optimization levels.\nbpo-38248\n: asyncio: Fix inconsistent immediate Task cancellation\nbpo-38237\n: The arguments for the builtin pow function are more\ndescriptive. They can now also be passed in as keywords.\nbpo-34002\n: Improve efficiency in parts of email package by changing\nwhile-pop to a for loop, using isdisjoint instead of set intersections.\nbpo-38191\n: Constructors of\nNamedTuple\nand\nTypedDict\ntypes now accept arbitrary keyword argument\nnames, including “cls”, “self”, “typename”, “_typename”, “fields” and\n“_fields”.\nbpo-38155\n: Add\n__all__\nto\ndatetime\n. Patch by Tahia Khan.\nbpo-38185\n: Fixed case-insensitive string comparison in\nsqlite3.Row\nindexing.\nbpo-38136\n: Changes AsyncMock call count and await count to be two\ndifferent counters. Now await count only counts when a coroutine has been\nawaited, not when it has been called, and vice-versa. Update the\ndocumentation around this.\nbpo-37828\n: Fix default mock name in\nunittest.mock.Mock.assert_called()\nexceptions. Patch by Abraham\nToriz Cruz.\nbpo-38175\n: Fix a memory leak in comparison of\nsqlite3.Row\nobjects.\nbpo-33936\n: _hashlib no longer calls obsolete OpenSSL initialization\nfunction with OpenSSL 1.1.0+.\nbpo-34706\n: Preserve subclassing in inspect.Signature.from_callable.\nbpo-38153\n: Names of hashing algorithms from OpenSSL are now normalized to\nfollow Python’s naming conventions. For example OpenSSL uses sha3-512\ninstead of sha3_512 or blake2b512 instead of blake2b.\nbpo-38115\n: Fix a bug in dis.findlinestarts() where it would return invalid\nbytecode offsets. Document that a code object’s co_lnotab can contain\ninvalid bytecode offsets.\nbpo-38148\n: Add slots to\nasyncio\ntransport classes, which can reduce\nmemory usage.\nbpo-38142\n: The _hashlib OpenSSL wrapper extension module is now PEP-384\ncompliant.\nbpo-9216\n: hashlib constructors now support usedforsecurity flag to signal\nthat a hashing algorithm is not used in a security context.\nbpo-36991\n: Fixes a potential incorrect AttributeError exception escaping\nZipFile.extract() in some unsupported input error situations.\nbpo-38134\n: Remove obsolete copy of PBKDF2_HMAC_fast. All supported OpenSSL\nversions contain a fast implementation.\nbpo-38132\n: The OpenSSL hashlib wrapper uses a simpler implementation.\nSeveral Macros and pointless caches are gone. The hash name now comes from\nOpenSSL’s EVP. The algorithm name stays the same, except it is now always\nlower case.\nbpo-38008\n: Fix parent class check in protocols to correctly identify the\nmodule that provides a builtin protocol, instead of assuming they all come\nfrom the\ncollections.abc\nmodule\nbpo-34037\n: For\nasyncio\n, add a new coroutine\nloop.shutdown_default_executor()\n. The new coroutine provides an API\nto schedule an executor shutdown that waits on the threadpool to finish\nclosing. Also,\nasyncio.run()\nhas been updated to utilize the new\ncoroutine. Patch by Kyle Stanley.\nbpo-37405\n: Fixed regression bug for socket.getsockname() for non-CAN_ISOTP\nAF_CAN address family sockets by returning a 1-tuple instead of string.\nbpo-38121\n: Update parameter names on functions in importlib.metadata\nmatching the changes in the 0.22 release of importlib_metadata.\nbpo-38110\n: The os.closewalk() implementation now uses the libc fdwalk()\nAPI on platforms where it is available.\nbpo-38093\n: Fixes AsyncMock so it doesn’t crash when used with\nAsyncContextManagers or AsyncIterators.\nbpo-37488\n: Add warning to\ndatetime.utctimetuple()\n,\ndatetime.utcnow()\nand\ndatetime.utcfromtimestamp()\n.\nbpo-35640\n: Allow passing a\npath-like object\nas\ndirectory\nargument to the\nhttp.server.SimpleHTTPRequestHandler\nclass. Patch\nby Géry Ogam.\nbpo-38086\n: Update importlib.metadata with changes from\nimportlib_metadata\n0.21\n.\nbpo-37251\n: Remove\n__code__\ncheck in AsyncMock that incorrectly\nevaluated function specs as async objects but failed to evaluate classes\nwith\n__await__\nbut no\n__code__\nattribute defined as async objects.\nbpo-38037\n: Fix reference counters in the\nsignal\nmodule.\nbpo-38066\n: Hide internal asyncio.Stream methods: feed_eof(), feed_data(),\nset_exception() and set_transport().\nbpo-38059\n: inspect.py now uses sys.exit() instead of exit()\nbpo-38049\n: Added command-line interface for the\nast\nmodule.\nbpo-37953\n: In\ntyping\n, improved the\n__hash__\nand\n__eq__\nmethods for\nForwardReferences\n.\nbpo-38026\n: Fixed\ninspect.getattr_static()\nused\nisinstance\nwhile\nit should avoid dynamic lookup.\nbpo-35923\n: Update\nimportlib.machinery.BuiltinImporter\nto use\nloader._ORIGIN\ninstead of a hardcoded value. Patch by Donghee Na.\nbpo-38010\n: In\nimportlib.metadata\nsync with\nimportlib_metadata\n0.20, clarifying behavior of\nfiles()\nand fixing issue where only one\nrequirement was returned for\nrequires()\non\ndist-info\npackages.\nbpo-38006\n: weakref.WeakValueDictionary defines a local remove() function\nused as callback for weak references. This function was created with a\nclosure. Modify the implementation to avoid the closure.\nbpo-37995\n: Added the\nindent\noption to\nast.dump()\nwhich allows it\nto produce a multiline indented output.\nbpo-34410\n: Fixed a crash in the\ntee()\niterator when re-enter it.\nRuntimeError is now raised in this case.\nbpo-37140\n: Fix a ctypes regression of Python 3.8. When a ctypes.Structure\nis passed by copy to a function, ctypes internals created a temporary\nobject which had the side effect of calling the structure finalizer\n(__del__) twice. The Python semantics requires a finalizer to be called\nexactly once. Fix ctypes internals to no longer call the finalizer twice.\nbpo-37587\n:\n_json.scanstring\nis now up to 3x faster when there are many\nbackslash escaped characters in the JSON string.\nbpo-37834\n: Prevent shutil.rmtree exception when built on non-Windows\nsystem without fd system call support, like older versions of macOS.\nbpo-10978\n: Semaphores and BoundedSemaphores can now release more than one\nwaiting thread at a time.\nbpo-37972\n: Subscripts to the\nunittest.mock.call\nobjects now receive\nthe same chaining mechanism as any other custom attributes, so that the\nfollowing usage no longer raises a\nTypeError\n:\ncall().foo().__getitem__('bar')\nPatch by blhsing\nbpo-37965\n: Fix C compiler warning caused by\ndistutils.ccompiler.CCompiler.has_function.\nbpo-37964\n: Add\nF_GETPATH\ncommand to\nfcntl\n.\nbpo-37960\n:\nrepr()\nof buffered and text streams now silences only\nexpected exceptions when get the value of “name” and “mode” attributes.\nbpo-37961\n: Add a\ntotal_nframe\nfield to the traces collected by the\ntracemalloc module. This field indicates the original number of frames\nbefore it was truncated.\nbpo-37951\n: Most features of the subprocess module now work again in\nsubinterpreters. Only\npreexec_fn\nis restricted in subinterpreters.\nbpo-36205\n: Fix the rusage implementation of time.process_time() to\ncorrectly report the sum of the system and user CPU time.\nbpo-37950\n: Fix\nast.dump()\nwhen call with incompletely initialized\nnode.\nbpo-34679\n: Restores instantiation of Windows IOCP event loops from the\nnon-main thread.\nbpo-36917\n: Add default implementation of the\nast.NodeVisitor.visit_Constant()\nmethod which emits a deprecation\nwarning and calls corresponding methods\nvisit_Num()\n,\nvisit_Str()\n,\netc.\nbpo-37798\n: Update test_statistics.py to verify that the statistics module\nworks well for both C and Python implementations. Patch by Donghee Na\nbpo-26589\n: Added a new status code to the http module: 451\nUNAVAILABLE_FOR_LEGAL_REASONS\nbpo-37915\n: Fix a segmentation fault that appeared when comparing instances\nof\ndatetime.timezone\nand\ndatetime.tzinfo\nobjects. Patch by Pablo\nGalindo.\nbpo-32554\n: Deprecate having random.seed() call hash on arbitrary types.\nbpo-9938\n: Add optional keyword argument\nexit_on_error\nfor\nArgumentParser\n.\nbpo-37851\n: The\nfaulthandler\nmodule no longer allocates its\nalternative stack at Python startup. Now the stack is only allocated at\nthe first faulthandler usage.\nbpo-32793\n: Fix a duplicated debug message when\nsmtplib.SMTP.connect()\nis called.\nbpo-37885\n: venv: Don’t generate unset variable warning on deactivate.\nbpo-37868\n: Fix dataclasses.is_dataclass when given an instance that never\nraises AttributeError in __getattr__.  That is, an object that returns\nsomething for __dataclass_fields__ even if it’s not a dataclass.\nbpo-37811\n: Fix\nsocket\nmodule’s\nsocket.connect(address)\nfunction\nbeing unable to establish connection in case of interrupted system call.\nThe problem was observed on all OSes which\npoll(2)\nsystem call can\ntake only non-negative integers and -1 as a timeout value.\nbpo-37863\n: Optimizations for Fraction.__hash__ suggested by Tim Peters.\nbpo-21131\n: Fix\nfaulthandler.register(chain=True)\nstack. faulthandler\nnow allocates a dedicated stack of\nSIGSTKSZ*2\nbytes, instead of just\nSIGSTKSZ\nbytes. Calling the previous signal handler in faulthandler\nsignal handler uses more than\nSIGSTKSZ\nbytes of stack memory on some\nplatforms.\nbpo-37798\n: Add C fastpath for statistics.NormalDist.inv_cdf() Patch by\nDonghee Na\nbpo-37804\n: Remove the deprecated method\nthreading.Thread.isAlive()\n.\nPatch by Donghee Na.\nbpo-37819\n: Add Fraction.as_integer_ratio() to match the corresponding\nmethods in bool, int, float, and decimal.\nbpo-14465\n: Add an xml.etree.ElementTree.indent() function for\npretty-printing XML trees. Contributed by Stefan Behnel.\nbpo-37810\n: Fix\ndifflib\n?\nhint in diff output when dealing with\ntabs.  Patch by Anthony Sottile.\nbpo-37772\n: In\nzipfile.Path\n, when adding implicit dirs, ensure that\nancestral directories are added and that duplicates are excluded.\nbpo-18578\n: Renamed and documented\ntest.bytecode_helper\nas\ntest.support.bytecode_helper\n. Patch by Joannah Nanjekye.\nbpo-37785\n: Fix xgettext warnings in\nargparse\n.\nbpo-34488\n:\nwritelines()\nmethod of\nio.BytesIO\nis now\nslightly faster when many small lines are passed. Patch by Sergey\nFedoseev.\nbpo-37449\n:\nensurepip\nnow uses\nimportlib.resources.read_binary()\nto\nread data instead of\npkgutil.get_data()\n. Patch by Joannah Nanjekye.\nbpo-28292\n: Mark calendar.py helper functions as being private.  The\nfollows PEP 8 guidance to maintain the style conventions in the module and\nit addresses a known case of user confusion.\nbpo-18049\n: Add definition of THREAD_STACK_SIZE for AIX in\nPython/thread_pthread.h The default thread stacksize caused crashes with\nthe default recursion limit Patch by M Felt\nbpo-37742\n: The logging.getLogger() API now returns the root logger when\npassed the name ‘root’, whereas previously it returned a non-root logger\nnamed ‘root’. This could affect cases where user code explicitly wants a\nnon-root logger named ‘root’, or instantiates a logger using\nlogging.getLogger(__name__) in some top-level module called ‘root.py’.\nbpo-37738\n: Fix the implementation of curses\naddch(str,\ncolor_pair)\n:\npass the color pair to\nsetcchar()\n, instead of always passing 0 as the\ncolor pair.\nbpo-37723\n: Fix performance regression on regular expression parsing with\nhuge character sets. Patch by Yann Vaginay.\nbpo-35943\n: The function\nPyImport_GetModule()\nnow ensures any\nmodule it returns is fully initialized. Patch by Joannah Nanjekye.\nbpo-32178\n: Fix IndexError in\nemail\npackage when trying to parse\ninvalid address fields starting with\n:\n.\nbpo-37268\n: The\nparser\nmodule is deprecated and will be removed in\nfuture versions of Python.\nbpo-11953\n: Completing WSA* error codes in\nsocket\n.\nbpo-37685\n: Fixed comparisons of\ndatetime.timedelta\nand\ndatetime.timezone\n.\nbpo-37697\n: Synchronize\nimportlib.metadata\nwith\nimportlib_metadata\n0.19\n,\nimproving handling of EGG-INFO files and fixing a crash when entry point\nnames contained colons.\nbpo-37695\n: Correct\ncurses.unget_wch()\nerror message.  Patch by\nAnthony Sottile.\nbpo-37689\n: Add\nis_relative_to()\nin\nPurePath\nto determine\nwhether or not one path is relative to another.\nbpo-29553\n: Fixed\nargparse.ArgumentParser.format_usage()\nfor mutually\nexclusive groups. Patch by Andrew Nester.\nbpo-37691\n: Let math.dist() accept coordinates as sequences (or iterables)\nrather than just tuples.\nbpo-37685\n: Fixed\n__eq__\n,\n__lt__\netc implementations in some\nclasses. They now return\nNotImplemented\nfor unsupported type of\nthe other operand. This allows the other operand to play role (for example\nthe equality comparison with\nANY\nwill return\nTrue\n).\nbpo-37354\n: Make Activate.ps1 Powershell script static to allow for signing\nit.\nbpo-37664\n: Update wheels bundled with ensurepip (pip 19.2.3 and setuptools\n41.2.0)\nbpo-37663\n: Bring consistency to venv shell activation scripts by always\nusing __VENV_PROMPT__.\nbpo-37642\n: Allowed the pure Python implementation of\ndatetime.timezone\nto represent sub-minute offsets close to\nminimum and maximum boundaries, specifically in the ranges (23:59, 24:00)\nand (-23:59, 24:00). Patch by Ngalim Siregar\nbpo-36161\n: In\nposix\n, use\nttyname_r\ninstead of\nttyname\nfor\nthread safety.\nbpo-36324\n: Make internal attributes for statistics.NormalDist() private.\nbpo-37555\n: Fix\nNonCallableMock._call_matcher\nreturning tuple instead\nof\n_Call\nobject when\nself._spec_signature\nexists. Patch by\nElizabeth Uselton\nbpo-29446\n: Make\nfrom\ntkinter\nimport\n*\nimport only the expected\nobjects.\nbpo-16970\n: Adding a value error when an invalid value in passed to nargs\nPatch by Robert Leenders\nbpo-34443\n: Exceptions from\nenum\nnow use the\n__qualname\nof the\nenum class in the exception message instead of the\n__name__\n.\nbpo-37491\n: Fix\nIndexError\nwhen parsing email headers with unexpectedly\nending bare-quoted string value. Patch by Abhilash Raj.\nbpo-37587\n: Make json.loads faster for long strings. (Patch by Marco\nPaolini)\nbpo-18378\n: Recognize “UTF-8” as a valid value for LC_CTYPE in\nlocale._parse_localename.\nbpo-37579\n: Return\nNotImplemented\nin Python implementation of\n__eq__\nfor\ntimedelta\nand\ntime\nwhen the other object being compared is not of the same type to match C\nimplementation. Patch by Karthikeyan Singaravelan.\nbpo-21478\n: Record calls to parent when autospecced object is attached to a\nmock using\nunittest.mock.attach_mock()\n. Patch by Karthikeyan\nSingaravelan.\nbpo-37531\n: “python3 -m test -jN –timeout=TIMEOUT” now kills a worker\nprocess if it runs longer than\nTIMEOUT\nseconds.\nbpo-37482\n: Fix serialization of display name in originator or destination\naddress fields with both encoded words and special chars.\nbpo-36993\n: Improve error reporting for corrupt zip files with bad zip64\nextra data. Patch by Daniel Hillier.\nbpo-37502\n: pickle.loads() no longer raises TypeError when the buffers\nargument is set to None\nbpo-37520\n: Correct behavior for zipfile.Path.parent when the path object\nidentifies a subdirectory.\nbpo-18374\n: Fix the\n.col_offset\nattribute of nested\nast.BinOp\ninstances which had a too large value in some situations.\nbpo-37424\n: Fixes a possible hang when using a timeout on\nsubprocess.run()\nwhile capturing output.  If the child process spawned\nits own children or otherwise connected its stdout or stderr handles with\nanother process, we could hang after the timeout was reached and our child\nwas killed when attempting to read final output from the pipes.\nbpo-37421\n: Fix\nmultiprocessing.util.get_temp_dir()\nfinalizer: clear\nalso the ‘tempdir’ configuration of the current process, so next call to\nget_temp_dir()\nwill create a new temporary directory, rather than\nreusing the removed temporary directory.\nbpo-37481\n: The distutils\nbdist_wininst\ncommand is deprecated in Python\n3.8, use\nbdist_wheel\n(wheel packages) instead.\nbpo-37479\n: When\nEnum.__str__\nis overridden in a derived class, the\noverride will be used by\nEnum.__format__\nregardless of whether mixin\nclasses are present.\nbpo-37440\n: http.client now enables TLS 1.3 post-handshake authentication\nfor default context or if a cert_file is passed to HTTPSConnection.\nbpo-37437\n: Update vendorized expat version to 2.2.7.\nbpo-37428\n: SSLContext.post_handshake_auth = True no longer sets\nSSL_VERIFY_POST_HANDSHAKE verify flag for client connections. Although the\noption is documented as ignored for clients, OpenSSL implicitly enables\ncert chain validation when the flag is set.\nbpo-37420\n:\nos.sched_setaffinity()\nnow correctly handles errors that\narise during iteration over its\nmask\nargument. Patch by Brandt Bucher.\nbpo-37412\n: The\nos.getcwdb()\nfunction now uses the UTF-8 encoding on\nWindows, rather than the ANSI code page: see\nPEP 529\nfor the rationale.\nThe function is no longer deprecated on Windows.\nbpo-37406\n: The sqlite3 module now raises TypeError, rather than\nValueError, if operation argument type is not str: execute(),\nexecutemany() and calling a connection.\nbpo-29412\n: Fix IndexError in parsing a header value ending unexpectedly.\nPatch by Abhilash Raj.\nbpo-36546\n: The\ndist\nargument for statistics.quantiles() is now\npositional only. The current name doesn’t reflect that the argument can be\neither a dataset or a distribution.  Marking the parameter as positional\navoids confusion and makes it possible to change the name later.\nbpo-37394\n: Fix a bug that was causing the\nqueue\nmodule to fail if\nthe accelerator module was not available. Patch by Pablo Galindo.\nbpo-37376\n:\npprint\nnow has support for\ntypes.SimpleNamespace\n. Patch by Carl Bordum Hansen.\nbpo-26967\n: An\nArgumentParser\nwith\nallow_abbrev=False\nno longer disables grouping of short flags, such as\n-vv\n, but only disables abbreviation of long flags as documented. Patch\nby Zac Hatfield-Dodds.\nbpo-37212\n:\nunittest.mock.call()\nnow preserves the order of keyword\narguments in repr output. Patch by Karthikeyan Singaravelan.\nbpo-37372\n: Fix error unpickling datetime.time objects from Python 2 with\nseconds>=24. Patch by Justin Blanchard.\nbpo-37345\n: Add formal support for UDPLITE sockets. Support was present\nbefore, but it is now easier to detect support with\nhasattr(socket,\n'IPPROTO_UDPLITE')\nand there are constants defined for each of the\nvalues needed:\nsocket.IPPROTO_UDPLITE\n,\nUDPLITE_SEND_CSCOV\n, and\nUDPLITE_RECV_CSCOV\n. Patch by Gabe Appleton.\nbpo-37358\n: Optimized\nfunctools.partial\nby using vectorcall.\nbpo-37347\n:\nsqlite3.Connection.create_aggregate()\n,\nsqlite3.Connection.create_function()\n,\nsqlite3.Connection.set_authorizer()\n,\nsqlite3.Connection.set_progress_handler()\nsqlite3.Connection.set_trace_callback()\nmethods lead to segfaults if\nsome of these methods are called twice with an equal object but not the\nsame. Now callbacks are stored more carefully. Patch by Aleksandr Balezin.\nbpo-37163\n: The\nobj\nargument of\ndataclasses.replace()\nis\npositional-only now.\nbpo-37085\n: Add the optional Linux SocketCAN Broadcast Manager constants,\nused as flags to configure the BCM behaviour, in the socket module.  Patch\nby Karl Ding.\nbpo-37328\n:\nHTMLParser.unescape\nis removed.  It was undocumented and\ndeprecated since Python 3.4.\nbpo-37305\n: Add .webmanifest -> application/manifest+json to list of\nrecognized file types and content type headers\nbpo-37320\n:\naifc.openfp()\nalias to\naifc.open()\n,\nsunau.openfp()\nalias to\nsunau.open()\n, and\nwave.openfp()\nalias to\nwave.open()\nhave been removed. They were deprecated since Python 3.7.\nbpo-37315\n: Deprecated accepting floats with integral value (like\n5.0\n)\nin\nmath.factorial()\n.\nbpo-37312\n:\n_dummy_thread\nand\ndummy_threading\nmodules have been\nremoved. These modules were deprecated since Python 3.7 which requires\nthreading support.\nbpo-33972\n: Email with single part but content-type set to\nmultipart/*\ndoesn’t raise AttributeError anymore.\nbpo-37280\n: Use threadpool for reading from file for sendfile fallback\nmode.\nbpo-37279\n: Fix asyncio sendfile support when sendfile sends extra data in\nfallback mode.\nbpo-19865\n:\nctypes.create_unicode_buffer()\nnow also supports non-BMP\ncharacters on platforms with 16-bit\nwchar_t\n(for example,\nWindows and AIX).\nbpo-37266\n: In a subinterpreter, spawning a daemon thread now raises an\nexception. Daemon threads were never supported in subinterpreters.\nPreviously, the subinterpreter finalization crashed with a Python fatal\nerror if a daemon thread was still running.\nbpo-37210\n: Allow pure Python implementation of\npickle\nto work even\nwhen the C\n_pickle\nmodule is unavailable.\nbpo-21872\n: Fix\nlzma\n: module decompresses data incompletely. When\ndecompressing a FORMAT_ALONE format file, and it doesn’t have the end\nmarker, sometimes the last one to dozens bytes can’t be output. Patch by\nMa Lin.\nbpo-35922\n: Fix\nRobotFileParser.crawl_delay()\nand\nRobotFileParser.request_rate()\nto return\nNone\nrather than raise\nAttributeError\nwhen no relevant rule is defined in the robots.txt\nfile.  Patch by Rémi Lapeyre.\nbpo-35766\n: Change the format of feature_version to be a (major, minor)\ntuple.\nbpo-36607\n: Eliminate\nRuntimeError\nraised by\nasyncio.all_tasks()\nif internal tasks weak set is changed by another\nthread during iteration.\nbpo-18748\n:\n_pyio.IOBase\ndestructor now does nothing if getting\nthe\nclosed\nattribute fails to better mimic\n_io.IOBase\nfinalizer.\nbpo-36402\n: Fix a race condition at Python shutdown when waiting for\nthreads. Wait until the Python thread state of all non-daemon threads get\ndeleted (join all non-daemon threads), rather than just wait until\nnon-daemon Python threads complete.\nbpo-37206\n: Default values which cannot be represented as Python objects no\nlonger improperly represented as\nNone\nin function signatures.\nbpo-37111\n: Added\nencoding\nand\nerrors\nkeyword parameters to\nlogging.basicConfig\n.\nbpo-12144\n: Ensure cookies with\nexpires\nattribute are handled in\nCookieJar.make_cookies()\n.\nbpo-34886\n: Fix an unintended ValueError from\nsubprocess.run()\nwhen\nchecking for conflicting\ninput\nand\nstdin\nor\ncapture_output\nand\nstdout\nor\nstderr\nargs when they were explicitly provided but with\nNone\nvalues within a passed in\n**kwargs\ndict rather than as passed\ndirectly by name. Patch contributed by Rémi Lapeyre.\nbpo-37173\n: The exception message for\ninspect.getfile()\nnow correctly\nreports the passed class rather than the builtins module.\nbpo-37178\n: Give math.perm() a one argument form that means the same as\nmath.factorial().\nbpo-37178\n: For math.perm(n, k), let k default to n, giving the same result\nas factorial.\nbpo-37165\n: Converted _collections._count_elements to use the Argument\nClinic.\nbpo-34767\n: Do not always create a\ncollections.deque\nin\nasyncio.Lock\n.\nbpo-37158\n: Speed-up statistics.fmean() by switching from a function to a\ngenerator.\nbpo-34282\n: Remove\nEnum._convert\nmethod, deprecated in 3.8.\nbpo-37150\n:\nargparse._ActionsContainer.add_argument\nnow throws error,\nif someone accidentally pass FileType class object instead of instance of\nFileType as\ntype\nargument.\nbpo-28724\n: The socket module now has the\nsocket.send_fds()\nand\nsocket.recv.fds()\nmethods. Contributed by Joannah Nanjekye, Shinya\nOkano and Victor Stinner.\nbpo-35621\n: Support running asyncio subprocesses when execution event loop\nin a thread on UNIX.\nbpo-36520\n: Lengthy email headers with UTF-8 characters are now properly\nencoded when they are folded. Patch by Jeffrey Kintscher.\nbpo-30835\n: Fixed a bug in email parsing where a message with invalid bytes\nin content-transfer-encoding of a multipart message can cause an\nAttributeError. Patch by Andrew Donnellan.\nbpo-31163\n: pathlib.Path instance’s rename and replace methods now return\nthe new Path instance.\nbpo-25068\n:\nurllib.request.ProxyHandler\nnow lowercases the keys of\nthe passed dictionary.\nbpo-26185\n: Fix\nrepr()\non empty\nZipInfo\nobject. Patch by\nMickaël Schoentgen.\nbpo-21315\n: Email headers containing RFC2047 encoded words are parsed\ndespite the missing whitespace, and a defect registered. Also missing\ntrailing whitespace after encoded words is now registered as a defect.\nbpo-31904\n: Port test_datetime to VxWorks: skip zoneinfo tests on VxWorks\nbpo-35805\n: Add parser for Message-ID header and add it to default\nHeaderRegistry. This should prevent folding of Message-ID using RFC 2048\nencoded words.\nbpo-36871\n: Ensure method signature is used instead of constructor\nsignature of a class while asserting mock object against method calls.\nPatch by Karthikeyan Singaravelan.\nbpo-35070\n: posix.getgrouplist() now works correctly when the user belongs\nto NGROUPS_MAX supplemental groups. Patch by Jeffrey Kintscher.\nbpo-31783\n: Fix race condition in ThreadPoolExecutor when worker threads\nare created during interpreter shutdown.\nbpo-36582\n: Fix\nUserString.encode()\nto correctly return\nbytes\nrather than a\nUserString\ninstance.\nbpo-32424\n: Deprecate xml.etree.ElementTree.Element.copy() in favor of\ncopy.copy().\nPatch by Gordon P. Hemsley\nbpo-36564\n: Fix infinite loop in email header folding logic that would be\ntriggered when an email policy’s max_line_length is not long enough to\ninclude the required markup and any values in the message. Patch by Paul\nGanssle\nbpo-36543\n: Removed methods Element.getchildren(), Element.getiterator()\nand ElementTree.getiterator() and the xml.etree.cElementTree module.\nbpo-36409\n: Remove the old plistlib API deprecated in Python 3.4\nbpo-36302\n: distutils sorts source file lists so that Extension .so files\nbuild more reproducibly by default\nbpo-36250\n: Ignore\nValueError\nfrom\nsignal\nwith\ninteraction\nin\nnon-main thread.\nbpo-36046\n: Added\nuser\n,\ngroup\nand\nextra_groups\nparameters to\nthe subprocess.Popen constructor. Patch by Patrick McLean.\nbpo-32627\n: Fix compile error when\n_uuid\nheaders conflicting included.\nbpo-35800\n: Deprecate\nsmtpd.MailmanProxy\nready for future removal.\nbpo-35168\n:\nshlex.shlex.punctuation_chars\nis now a read-only\nproperty.\nbpo-8538\n: Add support for boolean actions like\n--foo\nand\n--no-foo\nto argparse. Patch contributed by Rémi Lapeyre.\nbpo-20504\n: Fixes a bug in\ncgi\nmodule when a multipart/form-data\nrequest has no\nContent-Length\nheader.\nbpo-25988\n: The abstract base classes in\ncollections.abc\nno longer\nare exposed in the regular\ncollections\nmodule.\nbpo-11122\n: Distutils won’t check for rpmbuild in specified paths only.\nbpo-34775\n: Division handling of PurePath now returns NotImplemented\ninstead of raising a TypeError when passed something other than an\ninstance of str or PurePath. Patch by Roger Aiudi.\nbpo-34749\n:\nbinascii.a2b_base64()\nis now up to 2 times faster. Patch\nby Sergey Fedoseev.\nbpo-34519\n: Add additional aliases for HP Roman 8. Patch by Michael Osipov.\nbpo-28009\n: Fix uuid.getnode() on platforms with ‘.’ as MAC Addr delimiter\nas well fix for MAC Addr format that omits a leading 0 in MAC Addr values.\nCurrently, AIX is the only know platform with these settings. Patch by\nMichael Felt.\nbpo-30618\n: Add\nreadlink()\n. Patch by Girts Folkmanis.\nbpo-32498\n: Made\nurllib.parse.unquote()\naccept bytes in addition to\nstrings. Patch by Stein Karlsen.\nbpo-33348\n: lib2to3 now recognizes expressions after\n*\nand\n**\nlike\nin\nf(*[]\nor\n[])\n.\nbpo-32689\n: Update\nshutil.move()\nfunction to allow for Path objects\nto be used as source argument. Patch by Emily Morehouse and Maxwell\n“5.13b” McKinnon.\nbpo-32820\n: Added\n__format__\nto IPv4 and IPv6 classes.  Always outputs\na fully zero-padded string. Supports b/x/n modifiers (bin/hex/native\nformat). Native format for IPv4 is bin, native format for IPv6 is hex.\nAlso supports ‘#’ and ‘_’ modifiers.\nbpo-27657\n: Fix urllib.parse.urlparse() with numeric paths. A string like\n“path:80” is no longer parsed as a path but as a scheme (“path”) and a\npath (“80”).\nbpo-4963\n: Fixed non-deterministic behavior related to mimetypes extension\nmapping and module reinitialization.\nDocumentation\n¶\nbpo-21767\n: Explicitly mention abc support in functools.singledispatch\nbpo-38816\n: Provides more details about the interaction between\nfork()\nand CPython’s runtime, focusing just on the C-API.  This\nincludes cautions about where\nfork()\nshould and shouldn’t be\ncalled.\nbpo-38351\n: Modernize\nemail\nexamples from %-formatting to f-strings.\nbpo-38778\n: Document the fact that\nRuntimeError\nis raised if\nos.fork()\nis called in a subinterpreter.\nbpo-38592\n: Add Brazilian Portuguese to the language switcher at Python\nDocumentation website.\nbpo-38294\n: Add list of no-longer-escaped chars to re.escape documentation\nbpo-38053\n: Modernized the plistlib documentation\nbpo-26868\n: Fix example usage of\nPyModule_AddObject()\nto properly\nhandle errors.\nbpo-36797\n: Fix a dead link in the distutils API Reference.\nbpo-37977\n: Warn more strongly and clearly about pickle insecurity\nbpo-37979\n: Added a link to dateutil.parser.isoparse in the\ndatetime.fromisoformat documentation. Patch by Paul Ganssle\nbpo-12707\n: Deprecate info(), geturl(), getcode() methods in favor of the\nheaders, url, and status properties, respectively, for HTTPResponse and\naddinfourl. Also deprecate the code attribute of addinfourl in favor of\nthe status attribute. Patch by Ashwin Ramaswami\nbpo-37937\n: Mention\nframe.f_trace\nin\nsys.settrace()\ndocs.\nbpo-37878\n: Make\nPyThreadState_DeleteCurrent()\nInternal.\nbpo-37759\n: Beginning edits to Whatsnew 3.8\nbpo-37726\n: Stop recommending getopt in the tutorial for command line\nargument parsing and promote argparse.\nbpo-32910\n: Remove implementation-specific behaviour of how venv’s\nDeactivate works.\nbpo-37256\n: Fix wording of arguments for\nRequest\nin\nurllib.request\nbpo-37284\n: Add a brief note to indicate that any new\nsys.implementation\nrequired attributes must go through the PEP\nprocess.\nbpo-30088\n: Documented that\nmailbox.Maildir\nconstructor doesn’t\nattempt to verify the maildir folder layout correctness. Patch by\nSviatoslav Sydorenko.\nbpo-37521\n: Fix\nimportlib\nexamples to insert any newly created modules\nvia importlib.util.module_from_spec() immediately into sys.modules instead\nof after calling loader.exec_module().\nThanks to Benjamin Mintz for finding the bug.\nbpo-37456\n: Slash (‘/’) is now part of syntax.\nbpo-37487\n: Fix PyList_GetItem index description to include 0.\nbpo-37149\n: Replace the dead link to the Tkinter 8.5 reference by John\nShipman, New Mexico Tech, with a link to the archive.org copy.\nbpo-37478\n: Added possible exceptions to the description of os.chdir().\nbpo-34903\n: Documented that in\ndatetime.datetime.strptime()\n, the\nleading zero in some two-digit formats is optional. Patch by Mike Gleen.\nbpo-36260\n: Add decompression pitfalls to zipfile module documentation.\nbpo-37004\n: In the documentation for difflib, a note was added explicitly\nwarning that the results of SequenceMatcher’s ratio method may depend on\nthe order of the input strings.\nbpo-36960\n: Restructured the\ndatetime\ndocs in the interest of making\nthem more user-friendly and improving readability. Patch by Brad Solomon.\nbpo-36487\n: Make C-API docs clear about what the “main” interpreter is.\nbpo-23460\n: The documentation for decimal string formatting using the\n:g\nspecifier has been updated to reflect the correct exponential\nnotation cutoff point. Original patch contributed by Tuomas Suutari.\nbpo-35803\n: Document and test that\ntempfile\nfunctions may accept a\npath-like object\nfor the\ndir\nargument.  Patch by Anthony\nSottile.\nbpo-33944\n: Added a note about the intended use of code in .pth files.\nbpo-34293\n: Fix the Doc/Makefile regarding PAPER environment variable and\nPDF builds\nbpo-25237\n: Add documentation for tkinter modules\nTests\n¶\nbpo-38614\n: Fix test_communicate() of test_asyncio.test_subprocess: use\nsupport.LONG_TIMEOUT\n(5 minutes), instead of just 1 minute.\nbpo-38614\n: Add timeout constants to\ntest.support\n:\nLOOPBACK_TIMEOUT\n,\nINTERNET_TIMEOUT\n,\nSHORT_TIMEOUT\nand\nLONG_TIMEOUT\n.\nbpo-38502\n: test.regrtest now uses process groups in the multiprocessing\nmode (-jN command line option) if process groups are available: if\nos.setsid()\nand\nos.killpg()\nfunctions are available.\nbpo-35998\n: Fix a race condition in test_asyncio.test_start_tls_server_1().\nPreviously, there was a race condition between the test main() function\nwhich replaces the protocol and the test ServerProto protocol which sends\nANSWER once it gets HELLO. Now, only the test main() function is\nresponsible to send data, ServerProto no longer sends data.\nbpo-38470\n: Fix\ntest_compileall.test_compile_dir_maxlevels()\non Windows\nwithout long path support: only create 3 subdirectories instead of between\n20 and 100 subdirectories.\nbpo-37531\n: On timeout, regrtest no longer attempts to call\npopen.communicate()\nagain: it can hang until all child processes using\nstdout and stderr pipes completes. Kill the worker process and ignores its\noutput. Change also the faulthandler timeout of the main process from 1\nminute to 5 minutes, for Python slowest buildbots.\nbpo-38239\n: Fix test_gdb for Link Time Optimization (LTO) builds.\nbpo-38275\n: test_ssl now handles disabled TLS/SSL versions better.\nOpenSSL’s crypto policy and run-time settings are recognized and tests for\ndisabled versions are skipped. Tests also accept more TLS minimum_versions\nfor platforms that override OpenSSL’s default with strict settings.\nbpo-38271\n: The private keys for test_ssl were encrypted with 3DES in\ntraditional PKCS#5 format. 3DES and the digest algorithm of PKCS#5 are\nblocked by some strict crypto policies. Use PKCS#8 format with AES256\nencryption instead.\nbpo-38270\n: test.support now has a helper function to check for\navailability of a hash digest function. Several tests are refactored avoid\nMD5 and use SHA256 instead. Other tests are marked to use MD5 and skipped\nwhen MD5 is disabled.\nbpo-37123\n: Multiprocessing test test_mymanager() now also expects\n-SIGTERM, not only exitcode 0. BaseManager._finalize_manager() sends\nSIGTERM to the manager process if it takes longer than 1 second to stop,\nwhich happens on slow buildbots.\nbpo-38212\n: Multiprocessing tests: increase\ntest_queue_feeder_donot_stop_onexc() timeout from 1 to 60 seconds.\nbpo-38117\n: Test with OpenSSL 1.1.1d\nbpo-38018\n: Increase code coverage for multiprocessing.shared_memory.\nbpo-37805\n: Add tests for json.dump(…, skipkeys=True). Patch by Donghee\nNa.\nbpo-37531\n: Enhance regrtest multiprocess timeout: write a message when\nkilling a worker process, catch popen.kill() and popen.wait() exceptions,\nput a timeout on the second call to popen.communicate().\nbpo-37876\n: Add tests for ROT-13 codec.\nbpo-36833\n: Added tests for\nPyDateTime_\nxxx\n_GET_\nxxx\n()\nmacros of\nthe C API of the\ndatetime\nmodule. Patch by Joannah Nanjekye.\nbpo-37558\n: Fix test_shared_memory_cleaned_after_process_termination name\nhandling\nbpo-37526\n: Add\ntest.support.catch_threading_exception()\n: context\nmanager catching\nthreading.Thread\nexception using\nthreading.excepthook()\n.\nbpo-37421\n: test_concurrent_futures now explicitly stops the ForkServer\ninstance if it’s running.\nbpo-37421\n: multiprocessing tests now stop the ForkServer instance if it’s\nrunning: close the “alive” file descriptor to ask the server to stop and\nthen remove its UNIX address.\nbpo-37421\n: test_distutils.test_build_ext() is now able to remove the\ntemporary directory on Windows: don’t import the newly built C extension\n(“xx”) in the current process, but test it in a separated process.\nbpo-37421\n: test_concurrent_futures now cleans up multiprocessing to remove\nimmediately temporary directories created by\nmultiprocessing.util.get_temp_dir().\nbpo-37421\n: test_winconsoleio doesn’t leak a temporary file anymore: use\ntempfile.TemporaryFile() to remove it when the test completes.\nbpo-37421\n: multiprocessing tests now explicitly call\n_run_finalizers()\nto immediately remove temporary directories created by tests.\nbpo-37421\n: urllib.request tests now call\nurlcleanup()\nto remove temporary files created by\nurlretrieve()\ntests and to clear the\n_opener\nglobal variable set\nby\nurlopen()\nand functions calling indirectly\nurlopen()\n.\nbpo-37472\n: Remove\nLib/test/outstanding_bugs.py\n.\nbpo-37199\n: Fix test failures when IPv6 is unavailable or disabled.\nbpo-19696\n: Replace deprecated method “random.choose” with “random.choice”\nin “test_pkg_import.py”.\nbpo-37335\n: Remove no longer necessary code from c locale coercion tests\nbpo-37421\n: Fix test_shutil to no longer leak temporary files.\nbpo-37411\n: Fix test_wsgiref.testEnviron() to no longer depend on the\nenvironment variables (don’t fail if “X” variable is set).\nbpo-37400\n: Fix test_os.test_chown(): use os.getgroups() rather than\ngrp.getgrall() to get groups. Rename also the test to test_chown_gid().\nbpo-37359\n: Add –cleanup option to python3 -m test to remove\ntest_python_*\ndirectories of previous failed jobs. Add “make\ncleantest” to run\npython3\n-m\ntest\n--cleanup\n.\nbpo-37362\n: test_gdb no longer fails if it gets an “unexpected” message on\nstderr: it now ignores stderr. The purpose of test_gdb is to test that\npython-gdb.py commands work as expected, not to test gdb.\nbpo-35998\n: Avoid TimeoutError in test_asyncio: test_start_tls_server_1()\nbpo-37278\n: Fix test_asyncio ProactorLoopCtrlC: join the thread to prevent\nleaking a running thread and leaking a reference.\nbpo-37261\n: Fix\ntest.support.catch_unraisable_exception()\n: its\n__exit__() method now ignores unraisable exception raised when clearing\nits\nunraisable\nattribute.\nbpo-37069\n: regrtest now uses\nsys.unraisablehook()\nto mark a test as\n“environment altered” (ENV_CHANGED) if it emits an “unraisable exception”.\nMoreover, regrtest logs a warning in this case.\nUse\npython3\n-m\ntest\n--fail-env-changed\nto catch unraisable exceptions\nin tests.\nbpo-37252\n: Fix assertions in\ntest_close\nand\ntest_events_mask_overflow\ndevpoll tests.\nbpo-37169\n: Rewrite\n_PyObject_IsFreed()\nunit tests.\nbpo-37153\n:\ntest_venv.test_multiprocessing()\nnow explicitly calls\npool.terminate()\nto wait until the pool completes.\nbpo-34001\n: Make test_ssl pass with LibreSSL. LibreSSL handles minimum and\nmaximum TLS version differently than OpenSSL.\nbpo-36919\n: Make\ntest_source_encoding.test_issue2301\nimplementation\nindependent. The test will work now for both CPython and IronPython.\nbpo-30202\n: Update\ntest.test_importlib.test_abc\nto test\nfind_spec()\n.\nbpo-28009\n: Modify the test_uuid logic to test when a program is available\nAND can be used to obtain a MACADDR as basis for an UUID. Patch by M. Felt\nbpo-34596\n: Fallback to a default reason when\nunittest.skip()\nis\nuncalled. Patch by Naitree Zhu.\nBuild\n¶\nbpo-38809\n: On Windows, build scripts will now recognize and use python.exe\nfrom an active virtual env.\nbpo-38684\n: Fix _hashlib build when Blake2 is disabled, but OpenSSL\nsupports it.\nbpo-38468\n: Misc/python-config.in now uses\ngetvar()\nfor all still\nexisting\nsysconfig.get_config_var()\ncalls. Patch by Joannah Nanjekye.\nbpo-37415\n: Fix stdatomic.h header check for ICC compiler: the ICC\nimplementation lacks atomic_uintptr_t type which is needed by Python.\nbpo-38301\n: In Solaris family, we must be sure to use\n-D_REENTRANT\n.\nPatch by Jesús Cea Avión.\nbpo-36002\n: Locate\nllvm-profdata\nand\nllvm-ar\nbinaries using\nAC_PATH_TOOL\nrather than\nAC_PATH_TARGET_TOOL\n.\nbpo-37936\n: The\n.gitignore\nfile systematically keeps “rooted”, with\na non-trailing slash, all the rules that are meant to apply to files in a\nspecific place in the repo.  Previously, when the intended file to ignore\nhappened to be at the root of the repo, we’d most often accidentally also\nignore files and directories with the same name anywhere in the tree.\nbpo-37760\n: The\nTools/unicode/makeunicodedata.py\nscript, which is\nused for converting information from the Unicode Character Database into\ngenerated code and data used by the methods of\nstr\nand by the\nunicodedata\nmodule, now handles each character’s data as a\ndataclass\nwith named attributes, rather than a length-18 list of\ndifferent fields.\nbpo-37936\n: The\n.gitignore\nfile no longer applies to any files that\nare in fact tracked in the Git repository.  Patch by Greg Price.\nbpo-37725\n: Change “clean” makefile target to also clean the program guided\noptimization (PGO) data.  Previously you would have to use “make clean”\nand “make profile-removal”, or “make clobber”.\nbpo-37707\n: Mark some individual tests to skip when –pgo is used.  The\ntests marked increase the PGO task time significantly and likely don’t\nhelp improve optimization of the final executable.\nbpo-36044\n: Reduce the number of unit tests run for the PGO generation\ntask.  This speeds up the task by a factor of about 15x.  Running the full\nunit test suite is slow.  This change may result in a slightly less\noptimized build since not as many code branches will be executed.  If you\nare willing to wait for the much slower build, the old behavior can be\nrestored using ‘./configure [..] PROFILE_TASK=”-m test –pgo-extended”’.\nWe make no guarantees as to which PGO task set produces a faster build.\nUsers who care should run their own relevant benchmarks as results can\ndepend on the environment, workload, and compiler tool chain.\nbpo-37468\n:\nmake\ninstall\nno longer installs\nwininst-*.exe\nfiles\nused by distutils bdist_wininst: bdist_wininst only works on Windows.\nbpo-37189\n: Many\nPyRun_\nXXX\n()\nfunctions like\nPyRun_String()\nwere no longer exported in\nlibpython38.dll\nby\nmistake. Export them again to fix the ABI compatibility.\nbpo-25361\n: Enables use of SSE2 instructions in Windows 32-bit build.\nbpo-36210\n: Update optional extension module detection for AIX. ossaudiodev\nand spwd are not applicable for AIX, and are no longer reported as\nmissing. 3rd-party packaging of ncurses (with ASIS support) conflicts with\nofficially supported AIX curses library, so configure AIX to use\nlibcurses.a. However, skip trying to build _curses_panel.\npatch by M Felt\nWindows\n¶\nbpo-38589\n: Fixes HTML Help shortcut when Windows is not installed to C\ndrive\nbpo-38453\n: Ensure ntpath.realpath() correctly resolves relative paths.\nbpo-38519\n: Restores the internal C headers that were missing from the\nnuget.org and Microsoft Store packages.\nbpo-38492\n: Remove\npythonw.exe\ndependency on the Microsoft C++ runtime.\nbpo-38344\n: Fix error message in activate.bat\nbpo-38359\n: Ensures\npyw.exe\nlauncher reads correct registry key.\nbpo-38355\n: Fixes\nntpath.realpath\nfailing on\nsys.executable\n.\nbpo-38117\n: Update bundled OpenSSL to 1.1.1d\nbpo-38092\n: Reduce overhead when using multiprocessing in a Windows virtual\nenvironment.\nbpo-38133\n: Allow py.exe launcher to locate installations from the\nMicrosoft Store and improve display of active virtual environments.\nbpo-38114\n: The\npip.ini\nis no longer included in the Nuget package.\nbpo-32592\n: Set Windows 8 as the minimum required version for API support\nbpo-36634\n:\nos.cpu_count()\nnow returns active processors rather than\nmaximum processors.\nbpo-36634\n: venv activate.bat now works when the existing variables contain\ndouble quote characters.\nbpo-38081\n: Prevent error calling\nos.path.realpath()\non\n'NUL'\n.\nbpo-38087\n: Fix case sensitivity in test_pathlib and test_ntpath.\nbpo-38088\n: Fixes distutils not finding vcruntime140.dll with only the v142\ntoolset installed.\nbpo-37283\n: Ensure command-line and unattend.xml setting override\npreviously detected states in Windows installer.\nbpo-38030\n: Fixes\nos.stat()\nfailing for block devices on Windows\nbpo-38020\n: Fixes potential crash when calling\nos.readlink()\n(or\nindirectly through\nrealpath()\n) on a file that is not a\nsupported link.\nbpo-37705\n: Improve the implementation of\nwinerror_to_errno()\n.\nbpo-37549\n:\nos.dup()\nno longer fails for standard streams on Windows\n7.\nbpo-1311\n: The\nnul\nfile on Windows now returns True from\nexists()\nand a valid result from\nos.stat()\nwith\nS_IFCHR\nset.\nbpo-9949\n: Enable support for following symlinks in\nos.realpath()\n.\nbpo-37834\n: Treat all name surrogate reparse points on Windows in\nos.lstat()\nand other reparse points as regular files in\nos.stat()\n.\nbpo-36266\n: Add the module name in the formatted error message when DLL\nload fail happens during module import in\n_PyImport_FindSharedFuncptrWindows()\n. Patch by Srinivas Nyayapati.\nbpo-25172\n: Trying to import the\ncrypt\nmodule on Windows will\nresult in an\nImportError\nwith a message explaining that the module\nisn’t supported on Windows. On other platforms, if the underlying\n_crypt\nmodule is not available, the ImportError will include a message\nexplaining the problem.\nbpo-37778\n: Fixes the icons used for file associations to the Microsoft\nStore package.\nbpo-37734\n: Fix use of registry values to launch Python from Microsoft\nStore app.\nbpo-37702\n: Fix memory leak on Windows in creating an SSLContext object or\nrunning\nurllib.request.urlopen('https://...')\n.\nbpo-37672\n: Switch Windows Store package’s pip to use bundled\npip.ini\ninstead of\nPIP_USER\nvariable.\nbpo-10945\n: Officially drop support for creating bdist_wininst installers\non non-Windows systems.\nbpo-37445\n: Include the\nFORMAT_MESSAGE_IGNORE_INSERTS\nflag in\nFormatMessageW()\ncalls.\nbpo-37369\n: Fixes path for\nsys.executable\nwhen running from the\nMicrosoft Store.\nbpo-37380\n: Don’t collect unfinished processes with\nsubprocess._active\non Windows to cleanup later. Patch by Ruslan Kuprieiev.\nbpo-37351\n: Removes libpython38.a from standard Windows distribution.\nbpo-35360\n: Update Windows builds to use SQLite 3.28.0.\nbpo-37267\n: On Windows,\nos.dup()\nno longer creates an inheritable fd\nwhen handling a character file.\nbpo-36779\n: Ensure\ntime.tzname\nis correct on Windows when the active\ncode page is set to CP_UTF7 or CP_UTF8.\nbpo-32587\n: Make\nwinreg.REG_MULTI_SZ\nsupport zero-length strings.\nbpo-28269\n: Replace use of\nstrcasecmp()\nfor the system function\n_stricmp()\n. Patch by Minmin Gong.\nbpo-36590\n: Add native Bluetooth RFCOMM support to socket module.\nmacOS\n¶\nbpo-38117\n: Updated OpenSSL to 1.1.1d in macOS installer.\nbpo-38089\n: Move Azure Pipelines to latest VM versions and make macOS tests\noptional\nbpo-18049\n: Increase the default stack size of threads from 5MB to 16MB on\nmacOS, to match the stack size of the main thread. This avoids crashes on\ndeep recursion in threads.\nbpo-34602\n: Avoid test suite failures on macOS by no longer calling\nresource.setrlimit to increase the process stack size limit at runtime.\nThe runtime change is no longer needed since the interpreter is being\nbuilt with a larger default stack size.\nbpo-35360\n: Update macOS installer to use SQLite 3.28.0.\nbpo-34631\n: Updated OpenSSL to 1.1.1c in macOS installer.\nIDLE\n¶\nbpo-26353\n: Stop adding newline when saving an IDLE shell window.\nbpo-4630\n: Add an option to toggle IDLE’s cursor blink for shell, editor,\nand output windows.  See Settings, General, Window Preferences, Cursor\nBlink. Patch by Zackery Spytz.\nbpo-38598\n: Do not try to compile IDLE shell or output windows\nbpo-36698\n: IDLE no longer fails when write non-encodable characters to\nstderr.  It now escapes them with a backslash, as the regular Python\ninterpreter. Added the\nerrors\nfield to the standard streams.\nbpo-35379\n: When exiting IDLE, catch any AttributeError.  One happens when\nEditorWindow.close is called twice.  Printing a traceback, when IDLE is\nrun from a terminal, is useless and annoying.\nbpo-38183\n: To avoid problems, test_idle ignores the user config directory.\nIt no longer tries to create or access .idlerc or any files within. Users\nmust run IDLE to discover problems with saving settings.\nbpo-38077\n: IDLE no longer adds ‘argv’ to the user namespace when\ninitializing it.  This bug only affected 3.7.4 and 3.8.0b2 to 3.8.0b4.\nbpo-38041\n: Shell restart lines now fill the window width, always start\nwith ‘=’, and avoid wrapping unnecessarily. The line will still wrap if\nthe included file name is long relative to the width.\nbpo-35771\n: To avoid occasional spurious test_idle failures on slower\nmachines, increase the\nhover_delay\nin test_tooltip.\nbpo-37824\n: Properly handle user input warnings in IDLE shell. Cease\nturning SyntaxWarnings into SyntaxErrors.\nbpo-37929\n: IDLE Settings dialog now closes properly when there is no shell\nwindow.\nbpo-37902\n: Add mousewheel scrolling for IDLE module, path, and stack\nbrowsers. Patch by George Zhang.\nbpo-37849\n: Fixed completions list appearing too high or low when shown\nabove the current line.\nbpo-36419\n: Refactor IDLE autocomplete and improve testing.\nbpo-37748\n: Reorder the Run menu.  Put the most common choice, Run Module,\nat the top.\nbpo-37692\n: Improve highlight config sample with example shell interaction\nand better labels for shell elements.\nbpo-37628\n: Settings dialog no longer expands with font size.\nbpo-37627\n: Initialize the Customize Run dialog with the command line\narguments most recently entered before.  The user can optionally edit\nbefore submitting them.\nbpo-33610\n: Fix code context not showing the correct context when first\ntoggled on.\nbpo-37530\n: Optimize code context to reduce unneeded background activity.\nFont and highlight changes now occur along with text changes instead of\nafter a random delay.\nbpo-27452\n: Cleanup\nconfig.py\nby inlining\nRemoveFile\nand\nsimplifying the handling of\nfile\nin\nCreateConfigHandlers\n.\nbpo-37325\n: Fix tab focus traversal order for help source and custom run\ndialogs.\nbpo-37321\n: Both subprocess connection error messages now refer to the\n‘Startup failure’ section of the IDLE doc.\nbpo-17535\n: Add optional line numbers for IDLE editor windows.  Windows\nopen without line numbers unless set otherwise in the General tab of the\nconfiguration dialog.\nbpo-26806\n: To compensate for stack frames added by IDLE and avoid possible\nproblems with low recursion limits, add 30 to limits in the user code\nexecution process.  Subtract 30 when reporting recursion limits to make\nthis addition mostly transparent.\nbpo-37177\n: Properly ‘attach’ search dialogs to their main window so that\nthey behave like other dialogs and do not get hidden behind their main\nwindow.\nbpo-37039\n: Adjust “Zoom Height” to individual screens by momentarily\nmaximizing the window on first use with a particular screen.  Changing\nscreen settings may invalidate the saved height.  While a window is\nmaximized, “Zoom Height” has no effect.\nbpo-35763\n: Make calltip reminder about ‘/’ meaning positional-only less\nobtrusive by only adding it when there is room on the first line.\nbpo-5680\n: Add ‘Run… Customized’ to the Run menu to run a module with\ncustomized settings.  Any ‘command line arguments’ entered are added to\nsys.argv. One can suppress the normal Shell main module restart.\nbpo-36390\n: Gather Format menu functions into format.py.  Combine\nparagraph.py, rstrip.py, and format methods from editor.py.\nTools/Demos\n¶\nbpo-38118\n: Update Valgrind suppression file to ignore a false alarm in\nPyUnicode_Decode()\nwhen using GCC builtin strcmp().\nbpo-38347\n: pathfix.py: Assume all files that end on ‘.py’ are Python\nscripts when working recursively.\nbpo-37803\n: pdb’s\n--help\nand\n--version\nlong options now work.\nbpo-37942\n: Improve ArgumentClinic converter for floats.\nbpo-37704\n: Remove\nTools/scripts/h2py.py\n: use cffi to access a C API in\nPython.\nbpo-37675\n: 2to3 now works when run from a zipped standard library.\nbpo-37034\n: Argument Clinic now uses the argument name on errors with\nkeyword-only argument instead of their position. Patch contributed by Rémi\nLapeyre.\nbpo-37064\n: Add option -k to pathscript.py script: preserve shebang flags.\nAdd option -a to pathscript.py script: add flags.\nC API\n¶\nbpo-37633\n: Re-export some function compatibility wrappers for macros in\npythonrun.h\n.\nbpo-38644\n: Provide\nPy_EnterRecursiveCall()\nand\nPy_LeaveRecursiveCall()\nas regular functions for the limited API.\nPreviously, there were defined as macros, but these macros didn’t work\nwith the limited API which cannot access\nPyThreadState.recursion_depth\nfield. Remove\n_Py_CheckRecursionLimit\nfrom the stable ABI.\nbpo-38650\n: The global variable\nPyStructSequence_UnnamedField\nis\nnow a constant and refers to a constant string.\nbpo-38540\n: Fixed possible leak in\nPyArg_Parse()\nand similar\nfunctions for format units\n\"es#\"\nand\n\"et#\"\nwhen the macro\nPY_SSIZE_T_CLEAN\nis not defined.\nbpo-38395\n: Fix a crash in\nweakref.proxy\nobjects due to incorrect\nlifetime management when calling some associated methods that may delete\nthe last reference to object being referenced by the proxy. Patch by Pablo\nGalindo.\nbpo-36389\n: The\n_PyObject_CheckConsistency()\nfunction is now also\navailable in release mode. For example, it can be used to debug a crash in\nthe\nvisit_decref()\nfunction of the GC.\nbpo-38266\n: Revert the removal of PyThreadState_DeleteCurrent() with\ndocumentation.\nbpo-38303\n: Update audioop extension module to use the stable ABI\n(PEP-384). Patch by Tyler Kieft.\nbpo-38234\n:\nPy_SetPath()\nnow sets\nsys.executable\nto the\nprogram full path (\nPy_GetProgramFullPath()\n) rather than to the\nprogram name (\nPy_GetProgramName()\n).\nbpo-38234\n: Python ignored arguments passed to\nPy_SetPath()\n,\nPy_SetPythonHome()\nand\nPy_SetProgramName()\n: fix Python\ninitialization to use specified arguments.\nbpo-38205\n: The\nPy_UNREACHABLE()\nmacro now calls\nPy_FatalError()\n.\nbpo-38140\n: Make dict and weakref offsets opaque for C heap types by\npassing the offsets through PyMemberDef\nbpo-15088\n: The C function\nPyGen_NeedsFinalizing\nhas been removed. It\nwas not documented, tested or used anywhere within CPython after the\nimplementation of\nPEP 442\n. Patch by Joannah Nanjekye. (Patch by Joannah\nNanjekye)\nbpo-36763\n: Options added by\nPySys_AddXOption()\nare now handled the\nsame way than\nPyConfig.xoptions\nand command line\n-X\noptions.\nbpo-37926\n: Fix a crash in\nPySys_SetArgvEx(0,\nNULL,\n0)\n.\nbpo-37879\n: Fix subtype_dealloc to suppress the type decref when the base\ntype is a C heap type\nbpo-37645\n: Add\n_PyObject_FunctionStr()\nto get a user-friendly\nstring representation of a function-like object. Patch by Jeroen Demeyer.\nbpo-29548\n: The functions\nPyEval_CallObject\n,\nPyEval_CallFunction\n,\nPyEval_CallMethod\nand\nPyEval_CallObjectWithKeywords\nare\ndeprecated. Use\nPyObject_Call()\nand its variants instead.\nbpo-37151\n:\nPyCFunction_Call\nis now a deprecated alias of\nPyObject_Call()\n.\nbpo-37540\n: The vectorcall protocol now requires that the caller passes\nonly strings as keyword names.\nbpo-37207\n: The vectorcall protocol is now enabled for\ntype\nobjects:\nset\ntp_vectorcall\nto a vectorcall function to be used instead of\ntp_new\nand\ntp_init\nwhen calling the class itself.\nbpo-21120\n: Exclude Python-ast.h, ast.h and asdl.h from the limited API.\nbpo-37483\n: Add new function\n_PyObject_CallOneArg\nfor calling an object\nwith one positional argument.\nbpo-36763\n: Add\nPyConfig_SetWideStringList()\nfunction.\nbpo-37337\n: Add fast functions for calling methods:\n_PyObject_VectorcallMethod()\n,\n_PyObject_CallMethodNoArgs()\nand\n_PyObject_CallMethodOneArg()\n.\nbpo-28805\n: The\nMETH_FASTCALL\ncalling convention has been\ndocumented.\nbpo-37221\n: The new function\nPyCode_NewWithPosOnlyArgs()\nallows to\ncreate code objects like\nPyCode_New()\n, but with an extra\nposonlyargcount\nparameter for indicating the number of positonal-only\narguments.\nbpo-37215\n: Fix dtrace issue introduce by\nbpo-36842\nbpo-37194\n: Add a new public\nPyObject_CallNoArgs()\nfunction to the\nC API: call a callable Python object without any arguments. It is the most\nefficient way to call a callback without any argument. On x86-64, for\nexample,\nPyObject_CallFunctionObjArgs(func,\nNULL)\nallocates 960 bytes\non the stack per call, whereas\nPyObject_CallNoArgs(func)\nonly\nallocates 624 bytes per call.\nbpo-37170\n: Fix the cast on error in\nPyLong_AsUnsignedLongLongMask()\n.\nbpo-35381\n: Convert posixmodule.c statically allocated types\nDirEntryType\nand\nScandirIteratorType\nto heap-allocated types.\nbpo-34331\n: Use singular/plural noun in error message when instantiating an\nabstract class with non-overridden abstract method(s).\nPython 3.8.0 beta 1\n¶\nRelease date: 2019-06-04\nSecurity\n¶\nbpo-35907\n:\nCVE 2019-9948\n: Avoid file reading by disallowing\nlocal-file://\nand\nlocal_file://\nURL schemes in\nURLopener().open()\nand\nURLopener().retrieve()\nof\nurllib.request\n.\nbpo-33529\n: Prevent fold function used in email header encoding from\nentering infinite loop when there are too many non-ASCII characters in a\nheader.\nbpo-33164\n: Updated blake2 implementation which uses secure memset\nimplementation provided by platform.\nCore and Builtins\n¶\nbpo-35814\n: Allow unpacking in the right hand side of annotated\nassignments. In particular,\nt:\nTuple[int,\n...]\n=\nx,\ny,\n*z\nis now\nallowed.\nbpo-37126\n: All structseq objects are now tracked by the garbage collector.\nPatch by Pablo Galindo.\nbpo-37122\n: Make the\nco_argcount\nattribute of code objects represent the\ntotal number of positional arguments (including positional-only\narguments). The value of\nco_posonlyargcount\ncan be used to distinguish\nwhich arguments are positional only, and the difference (\nco_argcount\n-\nco_posonlyargcount\n) is the number of positional-or-keyword arguments.\nPatch by Pablo Galindo.\nbpo-20092\n: Constructors of\nint\n,\nfloat\nand\ncomplex\nwill now use the\n__index__()\nspecial\nmethod, if available and the corresponding method\n__int__()\n,\n__float__()\nor\n__complex__()\nis not available.\nbpo-37087\n: Add native thread ID (TID) support to OpenBSD.\nbpo-26219\n: Implemented per opcode cache mechanism and\nLOAD_GLOBAL\ninstruction use it.\nLOAD_GLOBAL\nis now about 40% faster. Contributed\nby Yury Selivanov, and Inada Naoki.\nbpo-37072\n: Fix crash in PyAST_FromNodeObject() when flags is NULL.\nbpo-37029\n: Freeing a great many small objects could take time quadratic in\nthe number of arenas, due to using linear search to keep\nobmalloc.c\n’s\nlist of usable arenas sorted by order of number of free memory pools.\nThis is accomplished without search now, leaving the worst-case time\nlinear in the number of arenas.  For programs where this quite visibly\nmatters (typically with more than 100 thousand small objects alive\nsimultaneously), this can greatly reduce the time needed to release their\nmemory.\nbpo-26423\n: Fix possible overflow in\nwrap_lenfunc()\nwhen\nsizeof(long)\n<\nsizeof(Py_ssize_t)\n(e.g., 64-bit Windows).\nbpo-37050\n: Improve the AST for “debug” f-strings, which use ‘=’ to print\nout the source of the expression being evaluated.  Delete expr_text from\nthe FormattedValue node, and instead use a Constant string node (possibly\nmerged with adjacent constant expressions inside the f-string).\nbpo-22385\n: The\nbytes.hex\n,\nbytearray.hex\n, and\nmemoryview.hex\nmethods as well as the\nbinascii.hexlify\nand\nb2a_hex\nfunctions now\nhave the ability to include an optional separator between hex bytes.  This\nfunctionality was inspired by MicroPython’s hexlify implementation.\nbpo-26836\n: Add\nos.memfd_create()\n.\nbpo-37032\n: Added new\nreplace()\nmethod to the code type\n(\ntypes.CodeType\n).\nbpo-37007\n: Implement\nsocket.if_nameindex()\n,\nsocket.if_nametoindex()\n, and\nsocket.if_indextoname()\non\nWindows.\nbpo-36829\n:\nPyErr_WriteUnraisable()\nnow creates a traceback object\nif there is no current traceback. Moreover, call\nPyErr_NormalizeException()\nand\nPyException_SetTraceback()\nto normalize the exception value. Ignore any error.\nbpo-36878\n: Only accept text after\n#\ntype:\nignore\nif the first\ncharacter is ASCII. This is to disallow things like\n#\ntype:\nignoreé\n.\nbpo-36878\n: Store text appearing after a\n#\ntype:\nignore\ncomment in the\nAST. For example a type ignore like\n#\ntype:\nignore[E1000]\nwill have\nthe string\n\"[E1000]\"\nstored in its AST node.\nbpo-2180\n: Treat line continuation at EOF as a\nSyntaxError\nby Anthony\nSottile.\nbpo-36907\n: Fix a crash when calling a C function with a keyword dict\n(\nf(**kwargs)\n) and changing the dict\nkwargs\nwhile that function is\nrunning.\nbpo-36946\n: Fix possible signed integer overflow when handling slices.\nbpo-36826\n: Add NamedExpression kind support to ast_unparse.c\nbpo-1875\n: A\nSyntaxError\nis now raised if a code blocks that will be\noptimized away (e.g. if conditions that are always false) contains syntax\nerrors. Patch by Pablo Galindo.\nbpo-36027\n: Allow computation of modular inverses via three-argument\npow\n: the second argument is now permitted to be negative in the case\nwhere the first and third arguments are relatively prime.\nbpo-36861\n: Update the Unicode database to version 12.1.0.\nbpo-28866\n: Avoid caching attributes of classes which type defines mro() to\navoid a hard cache invalidation problem.\nbpo-36851\n: The\nFrameType\nstack is now correctly cleaned up if the\nexecution ends with a return and the stack is not empty.\nbpo-34616\n: The\ncompile()\nbuiltin functions now support the\nast.PyCF_ALLOW_TOP_LEVEL_AWAIT\nflag,  which allow to compile sources\nthat  contains top-level\nawait\n,\nasync\nwith\nor\nasync\nfor\n. This\nis useful to evaluate async-code from with an already async functions; for\nexample in a custom REPL.\nbpo-36842\n: Implement PEP 578, adding sys.audit, io.open_code and related\nAPIs.\nbpo-27639\n: Correct return type for UserList slicing operations. Patch by\nMichael Blahay, Erick Cervantes, and vaultah\nbpo-36737\n: Move PyRuntimeState.warnings into per-interpreter state (via\n“module state”).\nbpo-36793\n: Removed\n__str__\nimplementations from builtin types\nbool\n,\nint\n,\nfloat\n,\ncomplex\nand few\nclasses from the standard library. They now inherit\n__str__()\nfrom\nobject\n.\nbpo-36817\n: Add a\n=\nfeature f-strings for debugging. This can precede\n!s\n,\n!r\n, or\n!a\n. It produces the text of the expression,\nfollowed by an equal sign, followed by the repr of the value of the\nexpression. So\nf'{3*9+15=}'\nwould be equal to the string\n'3*9+15=42'\n.  If\n=\nis specified, the default conversion is set to\n!r\n, unless a format spec is given, in which case the formatting\nbehavior is unchanged, and __format__ will be used.\nbpo-24048\n: Save the live exception during import.c’s\nremove_module()\n.\nbpo-27987\n: pymalloc returns memory blocks aligned by 16 bytes, instead of\n8 bytes, on 64-bit platforms to conform x86-64 ABI. Recent compilers\nassume this alignment more often. Patch by Inada Naoki.\nbpo-36601\n: A long-since-meaningless check for\ngetpid()\n==\nmain_pid\nwas\nremoved from Python’s internal C signal handler.\nbpo-36594\n: Fix incorrect use of\n%p\nin format strings. Patch by Zackery\nSpytz.\nbpo-36045\n:\nbuiltins.help()\nnow prefixes\nasync\nfor async functions.\nbpo-36084\n: Add native thread ID (TID) to threading.Thread objects\n(supported platforms: Windows, FreeBSD, Linux, macOS)\nbpo-36035\n: Added fix for broken symlinks in combination with pathlib\nbpo-35983\n: Added new trashcan macros to deal with a double deallocation\nthat could occur when the\ntp_dealloc\nof a subclass calls the\ntp_dealloc\nof a base class and that base class uses the trashcan\nmechanism. Patch by Jeroen Demeyer.\nbpo-20602\n: Do not clear\nsys.flags\nand\nsys.float_info\nduring shutdown. Patch by Zackery Spytz.\nbpo-26826\n: Expose\ncopy_file_range()\nas a low level API in the\nos\nmodule.\nbpo-32388\n: Remove cross-version binary compatibility requirement in\ntp_flags.\nbpo-31862\n: Port binascii to PEP 489 multiphase initialization. Patch by\nMarcel Plch.\nLibrary\n¶\nbpo-37128\n: Added\nmath.perm()\n.\nbpo-37120\n: Add SSLContext.num_tickets to control the number of TLSv1.3\nsession tickets.\nbpo-12202\n: Fix the error handling in\nmsilib.SummaryInformation.GetProperty()\n. Patch by Zackery Spytz.\nbpo-26835\n: The fcntl module now contains file sealing constants for\nsealing of memfds.\nbpo-29262\n: Add\nget_origin()\nand\nget_args()\nintrospection helpers\nto\ntyping\nmodule.\nbpo-12639\n:\nmsilib.Directory.start_component()\nno longer fails if\nkeyfile\nis not\nNone\n.\nbpo-36999\n: Add the\nasyncio.Task.get_coro()\nmethod to publicly expose\nthe tasks’s coroutine object.\nbpo-35246\n: Make\nasyncio.create_subprocess_exec()\naccept path-like\narguments.\nbpo-35279\n: Change default\nmax_workers\nof\nThreadPoolExecutor\nfrom\ncpu_count()\n*\n5\nto\nmin(32,\ncpu_count()\n+\n4)\n.  Previous value was\nunreasonably large on many cores machines.\nbpo-37076\n:\n_thread.start_new_thread()\nnow logs uncaught exception\nraised by the function using\nsys.unraisablehook()\n, rather than\nsys.excepthook()\n, so the hook gets access to the function which\nraised the exception.\nbpo-33725\n: On macOS, the\nmultiprocessing\nmodule now uses\nspawn\nstart method by default.\nbpo-37054\n: Fix destructor\n_pyio.BytesIO\nand\n_pyio.TextIOWrapper\n: initialize their\n_buffer\nattribute as\nsoon as possible (in the class body), because it’s used by\n__del__()\nwhich calls\nclose()\n.\nbpo-37058\n: PEP 544: Add\nProtocol\nand\n@runtime_checkable\nto the\ntyping\nmodule.\nbpo-36933\n: The functions\nsys.set_coroutine_wrapper\nand\nsys.get_coroutine_wrapper\nthat were deprecated and marked for removal\nin 3.8 have been removed.\nbpo-37047\n: Handle late binding and attribute access in\nunittest.mock.AsyncMock\nsetup for autospeccing. Document newly\nimplemented async methods in\nunittest.mock.MagicMock\n.\nbpo-37049\n: PEP 589: Add\nTypedDict\nto the\ntyping\nmodule.\nbpo-37046\n: PEP 586: Add\nLiteral\nto the\ntyping\nmodule.\nbpo-37045\n: PEP 591: Add\nFinal\nqualifier and\n@final\ndecorator to\nthe\ntyping\nmodule.\nbpo-37035\n: Don’t log OSError based exceptions if a fatal error has\noccurred in asyncio transport. Peer can generate almost any OSError, user\ncannot avoid these exceptions by fixing own code. Errors are still\npropagated to user code, it’s just logging them is pointless and pollute\nasyncio logs.\nbpo-37001\n:\nsymtable.symtable()\nnow accepts the same input types for\nsource code as the built-in\ncompile()\nfunction. Patch by Dino\nViehland.\nbpo-37028\n: Implement asyncio REPL\nbpo-37027\n: Return safe to use proxy socket object from\ntransport.get_extra_info(‘socket’)\nbpo-32528\n: Make asyncio.CancelledError a BaseException.\nThis will address the common mistake many asyncio users make: an “except\nException” clause breaking Tasks cancellation.\nIn addition to this change, we stop inheriting asyncio.TimeoutError and\nasyncio.InvalidStateError from their concurrent.futures.* counterparts.\nThere’s no point for these exceptions to share the inheritance chain.\nbpo-1230540\n: Add a new\nthreading.excepthook()\nfunction which handles\nuncaught\nthreading.Thread.run()\nexception. It can be overridden to\ncontrol how uncaught\nthreading.Thread.run()\nexceptions are handled.\nbpo-36996\n: Handle\nunittest.mock.patch()\nused as a decorator on async\nfunctions.\nbpo-37008\n: Add support for calling\nnext()\nwith the mock resulting\nfrom\nunittest.mock.mock_open()\nbpo-27737\n: Allow whitespace only header encoding in\nemail.header\n- by\nBatuhan Taskaya\nbpo-36969\n: PDB command\nargs\nnow  display positional only arguments.\nPatch contributed by Rémi Lapeyre.\nbpo-36969\n: PDB command\nargs\nnow  display keyword only arguments. Patch\ncontributed by Rémi Lapeyre.\nbpo-36983\n: Add missing names to\ntyping.__all__\n:\nChainMap\n,\nForwardRef\n,\nOrderedDict\n- by Anthony Sottile.\nbpo-36972\n: Add SupportsIndex protocol to the typing module to allow type\nchecking to detect classes that can be passed to\nhex()\n,\noct()\nand\nbin()\n.\nbpo-32972\n: Implement\nunittest.IsolatedAsyncioTestCase\nto help testing\nasyncio-based code.\nbpo-36952\n:\nfileinput.input()\nand\nfileinput.FileInput\nbufsize\nargument has been removed (was deprecated and ignored since\nPython 3.6), and as a result the\nmode\nand\nopenhook\narguments have\nbeen made keyword-only.\nbpo-36952\n: Starting with Python 3.3, importing ABCs from\ncollections\nis deprecated, and import should be done from\ncollections.abc\n. Still being able to import from\ncollections\nwas marked for removal in 3.8, but has been delayed to 3.9; documentation\nand\nDeprecationWarning\nclarified.\nbpo-36949\n: Implement __repr__ for WeakSet objects.\nbpo-36948\n: Fix\nNameError\nin\nurllib.request.URLopener.retrieve()\n. Patch by Karthikeyan\nSingaravelan.\nbpo-33524\n: Fix the folding of email header when the max_line_length is 0\nor None and the header contains non-ascii characters.  Contributed by\nLicht Takeuchi (@Licht-T).\nbpo-24564\n:\nshutil.copystat()\nnow ignores\nerrno.EINVAL\non\nos.setxattr()\nwhich may occur when copying files on filesystems\nwithout extended attributes support.\nOriginal patch by Giampaolo Rodola, updated by Ying Wang.\nbpo-36888\n: Python child processes can now access the status of their\nparent process using multiprocessing.process.parent_process\nbpo-36921\n: Deprecate\n@coroutine\nfor sake of\nasync\ndef\n.\nbpo-25652\n: Fix bug in\n__rmod__\nof\nUserString\n- by Batuhan Taskaya.\nbpo-36916\n: Remove a message about an unhandled exception in a task when\nwriter.write() is used without await and writer.drain() fails with an\nexception.\nbpo-36889\n: Introduce\nasyncio.Stream\nclass that merges\nasyncio.StreamReader\nand\nasyncio.StreamWriter\nfunctionality.\nasyncio.Stream\ncan work in readonly, writeonly and\nreadwrite modes. Provide\nasyncio.connect()\n,\nasyncio.connect_unix()\n,\nasyncio.connect_read_pipe()\nand\nasyncio.connect_write_pipe()\nfactories to open\nasyncio.Stream\nconnections. Provide\nasyncio.StreamServer\nand\nUnixStreamServer\nto serve servers with asyncio.Stream API.\nModify\nasyncio.create_subprocess_shell()\nand\nasyncio.create_subprocess_exec()\nto use\nasyncio.Stream\ninstead of deprecated\nStreamReader\nand\nStreamWriter\n.\nDeprecate\nasyncio.StreamReader\nand\nasyncio.StreamWriter\n.\nDeprecate usage of private classes, e.g.\nasyncio.FlowControlMixing\nand\nasyncio.StreamReaderProtocol\noutside of asyncio package.\nbpo-36845\n: Added validation of integer prefixes to the construction of IP\nnetworks and interfaces in the ipaddress module.\nbpo-23378\n: Add an extend action to argparser.\nbpo-36867\n: Fix a bug making a SharedMemoryManager instance and its parent\nprocess use two separate resource_tracker processes.\nbpo-23896\n: Adds a grammar to lib2to3.pygram that contains exec as a\nfunction not as statement.\nbpo-36895\n: The function\ntime.clock()\nwas deprecated in 3.3 in favor of\ntime.perf_counter()\nand marked for removal in 3.8, it has removed.\nbpo-35545\n: Fix asyncio discarding IPv6 scopes when ensuring hostname\nresolutions internally\nbpo-36887\n: Add new function\nmath.isqrt()\nto compute integer square\nroots.\nbpo-34632\n: Introduce the\nimportlib.metadata\nmodule with (provisional)\nsupport for reading metadata from third-party packages.\nbpo-36878\n: When using\ntype_comments=True\nin\nast.parse\n, treat\n#\ntype:\nignore\nfollowed by a non-alphanumeric character and then arbitrary\ntext as a type ignore, instead of requiring nothing but whitespace or\nanother comment. This is to permit formations such as\n#\ntype:\nignore[E1000]\n.\nbpo-36778\n:\ncp65001\nencoding (Windows code page 65001) becomes an alias\nto\nutf_8\nencoding.\nbpo-36867\n: The multiprocessing.resource_tracker replaces the\nmultiprocessing.semaphore_tracker module. Other than semaphores,\nresource_tracker also tracks shared_memory segments.\nbpo-30262\n: The\nCache\nand\nStatement\nobjects of the\nsqlite3\nmodule are not exposed to the user.  Patch by Aviv Palivoda.\nbpo-24538\n: In\nshutil.copystat()\n, first copy extended file attributes\nand then file permissions, since extended attributes can only be set on\nthe destination while it is still writeable.\nbpo-36829\n: Add new\nsys.unraisablehook()\nfunction which can be\noverridden to control how “unraisable exceptions” are handled. It is\ncalled when an exception has occurred but there is no way for Python to\nhandle it. For example, when a destructor raises an exception or during\ngarbage collection (\ngc.collect()\n).\nbpo-36832\n: Introducing\nzipfile.Path\n, a pathlib-compatible wrapper for\ntraversing zip files.\nbpo-36814\n: Fix an issue where os.posix_spawnp() would incorrectly raise a\nTypeError when file_actions is None.\nbpo-33110\n: Handle exceptions raised by functions added by\nconcurrent.futures add_done_callback correctly when the Future has already\ncompleted.\nbpo-26903\n: Limit\nmax_workers\nin\nProcessPoolExecutor\nto 61 to work\naround a WaitForMultipleObjects limitation.\nbpo-36813\n: Fix\nQueueListener\nto call\nqueue.task_done()\nupon stopping. Patch by Bar Harel.\nbpo-36806\n: Forbid creation of asyncio stream objects like StreamReader,\nStreamWriter, Process, and their protocols outside of asyncio package.\nbpo-36802\n: Provide both sync and async calls for StreamWriter.write() and\nStreamWriter.close()\nbpo-36801\n: Properly handle SSL connection closing in asyncio\nStreamWriter.drain() call.\nbpo-36785\n: Implement PEP 574 (pickle protocol 5 with out-of-band buffers).\nbpo-36772\n: functools.lru_cache() can now be used as a straight decorator\nin addition to its existing usage as a function that returns a decorator.\nbpo-6584\n: Add a\nBadGzipFile\nexception to the\ngzip\nmodule.\nbpo-36748\n: Optimized write buffering in C implementation of\nTextIOWrapper\n. Writing ASCII string to\nTextIOWrapper\nwith ascii,\nlatin1, or utf-8 encoding is about 20% faster.  Patch by Inada Naoki.\nbpo-8138\n: Don’t mark\nwsgiref.simple_server.SimpleServer\nas\nmulti-threaded since\nwsgiref.simple_server.WSGIServer\nis\nsingle-threaded.\nbpo-22640\n:\npy_compile.compile()\nnow supports silent mode. Patch by\nJoannah Nanjekye\nbpo-29183\n: Fix double exceptions in\nwsgiref.handlers.BaseHandler\nby calling its\nclose()\nmethod only\nwhen no exception is raised.\nbpo-36548\n: Improved the repr of regular expression flags.\nbpo-36542\n: The signature of Python functions can now be overridden by\nspecifying the\n__text_signature__\nattribute.\nbpo-36533\n: Reinitialize logging.Handler locks in forked child processes\ninstead of attempting to acquire them all in the parent before forking\nonly to be released in the child process.  The acquire/release pattern was\nleading to deadlocks in code that has implemented any form of chained\nlogging handlers that depend upon one another as the lock acquisition\norder cannot be guaranteed.\nbpo-35252\n: Throw a TypeError instead of an AssertionError when using an\ninvalid type annotation with singledispatch.\nbpo-35900\n: Allow reduction methods to return a 6-item tuple where the 6th\nitem specifies a custom state-setting method that’s called instead of the\nregular\n__setstate__\nmethod.\nbpo-35900\n: enable custom reduction callback registration for functions and\nclasses in _pickle.c, using the new Pickler’s attribute\nreducer_override\nbpo-36368\n: Fix a bug crashing SharedMemoryManager instances in interactive\nsessions after a ctrl-c (KeyboardInterrupt) was sent\nbpo-31904\n: Fix mmap fail for VxWorks\nbpo-27497\n:\ncsv.DictWriter.writeheader()\nnow returns the return value\nof the underlying\ncsv.Writer.writerow()\nmethod. Patch contributed by\nAshish Nitin Patil.\nbpo-36239\n: Parsing .mo files now ignores comments starting and ending with\n#-#-#-#-#.\nbpo-26707\n: Enable plistlib to read and write binary plist files that were\ncreated as a KeyedArchive file. Specifically, this allows the plistlib to\nprocess 0x80 tokens as UID objects.\nbpo-31904\n: Add posix module support for VxWorks.\nbpo-35125\n: Asyncio: Remove inner callback on outer cancellation in shield\nbpo-35721\n: Fix\nasyncio.SelectorEventLoop.subprocess_exec()\nleaks\nfile descriptors if\nPopen\nfails and called with\nstdin=subprocess.PIPE\n. Patch by Niklas Fiekas.\nbpo-31855\n:\nunittest.mock.mock_open()\nresults now respects the\nargument of read([size]). Patch contributed by Rémi Lapeyre.\nbpo-35431\n: Implement\nmath.comb()\nthat returns binomial coefficient,\nthat computes the number of ways to choose k items from n items without\nrepetition and without order. Patch by Yash Aggarwal and Keller Fuchs.\nbpo-26660\n: Fixed permission errors in\nTemporaryDirectory\nclean up. Previously\nTemporaryDirectory.cleanup()\nfailed when non-writeable or\nnon-searchable files or directories were created inside a temporary\ndirectory.\nbpo-34271\n: Add debugging helpers to ssl module. It’s now possible to dump\nkey material and to trace TLS protocol. The default and stdlib contexts\nalso support SSLKEYLOGFILE env var.\nbpo-26467\n: Added AsyncMock to support using unittest to mock asyncio\ncoroutines. Patch by Lisa Roach.\nbpo-33569\n: dataclasses.InitVar: Exposes the type used to create the init\nvar.\nbpo-34424\n: Fix serialization of messages containing encoded strings when\nthe policy.linesep is set to a multi-character string. Patch by Jens\nTroeger.\nbpo-34303\n: Performance of\nfunctools.reduce()\nis slightly improved.\nPatch by Sergey Fedoseev.\nbpo-33361\n: Fix a bug in\ncodecs.StreamRecoder\nwhere seeking might\nleave old data in a buffer and break subsequent read calls. Patch by Ammar\nAskar.\nbpo-22454\n: The\nshlex\nmodule now exposes\nshlex.join()\n, the\ninverse of\nshlex.split()\n. Patch by Bo Bayles.\nbpo-31922\n:\nasyncio.AbstractEventLoop.create_datagram_endpoint()\n: Do\nnot connect UDP socket when broadcast is allowed. This allows to receive\nreplies after a UDP broadcast.\nbpo-24882\n: Change ThreadPoolExecutor to use existing idle threads before\nspinning up new ones.\nbpo-31961\n: Added support for bytes and path-like objects in\nsubprocess.Popen()\non Windows.  The\nargs\nparameter now accepts a\npath-like object\nif\nshell\nis\nFalse\nand a sequence containing\nbytes and path-like objects. The\nexecutable\nparameter now accepts a\nbytes and\npath-like object\n. The\ncwd\nparameter now accepts a\nbytes object. Based on patch by Anders Lorentsen.\nbpo-33123\n:\npathlib.Path.unlink\nnow accepts a\nmissing_ok\nparameter to avoid a\nFileNotFoundError\nfrom being raised. Patch by\nRobert Buchholz.\nbpo-32941\n: Allow\nmmap.mmap\nobjects to access the madvise() system\ncall (through\nmmap.mmap.madvise()\n).\nbpo-22102\n: Added support for ZIP files with disks set to 0. Such files are\ncommonly created by builtin tools on Windows when use ZIP64 extension.\nPatch by Francisco Facioni.\nbpo-32515\n: trace.py can now run modules via python3 -m trace -t –module\nmodule_name\nbpo-32299\n: Changed\nunittest.mock.patch.dict()\nto return the patched\ndictionary when used as context manager. Patch by Vadim Tsander.\nbpo-27141\n: Added a\n__copy__()\nto\ncollections.UserList\nand\ncollections.UserDict\nin order to correctly implement shallow copying\nof the objects. Patch by Bar Harel.\nbpo-31829\n:\n\\r\n,\n\\0\nand\n\\x1a\n(end-of-file on Windows) are now\nescaped in protocol 0 pickles of Unicode strings. This allows to load them\nwithout loss from files open in text mode in Python 2.\nbpo-23395\n:\n_thread.interrupt_main()\nnow avoids setting the Python\nerror status if the\nSIGINT\nsignal is ignored or not handled by Python.\nDocumentation\n¶\nbpo-36896\n: Clarify that some types have unstable constructor signature\nbetween Python versions.\nbpo-36686\n: Improve documentation of the stdin, stdout, and stderr\narguments of the\nasyncio.subprocess_exec\nfunction to specify which\nvalues are supported. Also mention that decoding as text is not supported.\nAdd a few tests to verify that the various values passed to the std*\narguments actually work.\nbpo-36984\n: Improve version added references in\ntyping\nmodule - by\nAnthony Sottile.\nbpo-36868\n: What’s new now mentions SSLContext.hostname_checks_common_name\ninstead of SSLContext.host_flags.\nbpo-35924\n: Add a note to the\ncurses.addstr()\ndocumentation to warn\nthat multiline strings can cause segfaults because of an ncurses bug.\nbpo-36783\n: Added C API Documentation for Time_FromTimeAndFold and\nPyDateTime_FromDateAndTimeAndFold as per PEP 495. Patch by Edison\nAbahurire.\nbpo-36797\n: More of the legacy distutils documentation has been either\npruned, or else more clearly marked as being retained solely until the\nsetuptools documentation covers it independently.\nbpo-22865\n: Add detail to the documentation on the\npty.spawn\nfunction.\nbpo-35397\n: Remove deprecation and document urllib.parse.unwrap(). Patch\ncontributed by Rémi Lapeyre.\nbpo-32995\n: Added the context variable in glossary.\nbpo-33519\n: Clarify that\ncopy()\nis not part of the\nMutableSequence\nABC.\nbpo-33482\n: Make\ncodecs.StreamRecoder.writelines\ntake a list of bytes.\nbpo-25735\n: Added documentation for func factorial to indicate that returns\ninteger values\nbpo-20285\n: Expand object.__doc__ (docstring) to make it clearer. Modify\npydoc.py so that help(object) lists object methods (for other classes,\nhelp omits methods of the object base class.)\nTests\n¶\nbpo-37069\n: Modify test_coroutines, test_cprofile, test_generators,\ntest_raise, test_ssl and test_yield_from to use\ntest.support.catch_unraisable_exception()\nrather than\ntest.support.captured_stderr()\n.\nbpo-37098\n: Fix test_memfd_create on older Linux Kernels.\nbpo-37081\n: Test with OpenSSL 1.1.1c\nbpo-36829\n: Add\ntest.support.catch_unraisable_exception()\n: context\nmanager catching unraisable exception using\nsys.unraisablehook()\n.\nbpo-36915\n: The main regrtest process now always removes all temporary\ndirectories of worker processes even if they crash or if they are killed\non KeyboardInterrupt (CTRL+c).\nbpo-36719\n: “python3 -m test -jN …” now continues the execution of next\ntests when a worker process crash (CHILD_ERROR state). Previously, the\ntest suite stopped immediately. Use –failfast to stop at the first error.\nbpo-36816\n: Update Lib/test/selfsigned_pythontestdotnet.pem to match\nself-signed.pythontest.net’s new TLS certificate.\nbpo-35925\n: Skip httplib and nntplib networking tests when they would\notherwise fail due to a modern OS or distro with a default OpenSSL policy\nof rejecting connections to servers with weak certificates.\nbpo-36782\n: Add tests for several C API functions in the\ndatetime\nmodule. Patch by Edison Abahurire.\nbpo-36342\n: Fix test_multiprocessing in test_venv if platform lacks\nfunctioning sem_open.\nBuild\n¶\nbpo-36721\n: To embed Python into an application, a new\n--embed\noption\nmust be passed to\npython3-config\n--libs\n--embed\nto get\n-lpython3.8\n(link the application to libpython). To support both 3.8 and older, try\npython3-config\n--libs\n--embed\nfirst and fallback to\npython3-config\n--libs\n(without\n--embed\n) if the previous command fails.\nAdd a pkg-config\npython-3.8-embed\nmodule to embed Python into an\napplication:\npkg-config\npython-3.8-embed\n--libs\nincludes\n-lpython3.8\n. To support both 3.8 and older, try\npkg-config\npython-X.Y-embed\n--libs\nfirst and fallback to\npkg-config\npython-X.Y\n--libs\n(without\n--embed\n) if the previous command fails (replace\nX.Y\nwith the Python version).\nOn the other hand,\npkg-config\npython3.8\n--libs\nno longer contains\n-lpython3.8\n. C extensions must not be linked to libpython (except on\nAndroid, case handled by the script); this change is backward incompatible\non purpose.\nbpo-36786\n: “make install” now runs compileall in parallel.\nWindows\n¶\nbpo-36965\n: include of STATUS_CONTROL_C_EXIT without depending on MSC\ncompiler\nbpo-35926\n: Update to OpenSSL 1.1.1b for Windows.\nbpo-29883\n: Add Windows support for UDP transports for the Proactor Event\nLoop. Patch by Adam Meily.\nbpo-33407\n: The\nPy_DEPRECATED()\nmacro has been implemented for\nMSVC.\nmacOS\n¶\nbpo-36231\n: Support building Python on macOS without /usr/include\ninstalled. As of macOS 10.14, system header files are only available\nwithin an SDK provided by either the Command Line Tools or the Xcode app.\nIDLE\n¶\nbpo-35610\n: Replace now redundant .context_use_ps1 with .prompt_last_line.\nThis finishes change started in\nbpo-31858\n.\nbpo-37038\n: Make idlelib.run runnable; add test clause.\nbpo-36958\n: Print any argument other than None or int passed to SystemExit\nor sys.exit().\nbpo-36807\n: When saving a file, call os.fsync() so bits are flushed to e.g.\nUSB drive.\nbpo-32411\n: In browser.py, remove extraneous sorting by line number since\ndictionary was created in line number order.\nTools/Demos\n¶\nbpo-37053\n: Handle strings like u”bar” correctly in\nTools/parser/unparse.py. Patch by Chih-Hsuan Yen.\nC API\n¶\nbpo-36763\n: Implement the\nPEP 587\n“Python Initialization Configuration”.\nbpo-36379\n: Fix crashes when attempting to use the\nmodulo\nparameter when\n__ipow__\nis implemented in C.\nbpo-37107\n: Update\nPyObject_CallMethodObjArgs()\nand\n_PyObject_CallMethodIdObjArgs\nto use\n_PyObject_GetMethod\nto avoid\ncreating a bound method object in many cases. Patch by Michael J.\nSullivan.\nbpo-36974\n: Implement\nPEP 590\n: Vectorcall: a fast calling protocol for\nCPython. This is a new protocol to optimize calls of custom callable\nobjects.\nbpo-36763\n:\nPy_Main()\nnow returns the exitcode rather than calling\nPy_Exit(exitcode)\nwhen calling\nPyErr_Print()\nif the current\nexception type is\nSystemExit\n.\nbpo-36922\n: Add new type flag\nPy_TPFLAGS_METHOD_DESCRIPTOR\nfor objects\nbehaving like unbound methods. These are objects supporting the\noptimization given by the\nLOAD_METHOD\n/\nCALL_METHOD\nopcodes. See PEP\n590.\nbpo-36728\n: The\nPyEval_ReInitThreads()\nfunction has been removed\nfrom the C API. It should not be called explicitly: use\nPyOS_AfterFork_Child()\ninstead.\nPython 3.8.0 alpha 4\n¶\nRelease date: 2019-05-06\nSecurity\n¶\nbpo-36742\n: Fixes mishandling of pre-normalization characters in\nurlsplit().\nbpo-30458\n: Address\nCVE 2019-9740\nby disallowing URL paths with embedded\nwhitespace or control characters through into the underlying http client\nrequest.  Such potentially malicious header injection URLs now cause an\nhttp.client.InvalidURL exception to be raised.\nbpo-35755\n:\nshutil.which()\nnow uses\nos.confstr(\"CS_PATH\")\nif\navailable and if the\nPATH\nenvironment variable is not set.\nRemove also the current directory from\nposixpath.defpath\n. On Unix,\nshutil.which()\nand the\nsubprocess\nmodule no longer search the\nexecutable in the current directory if the\nPATH\nenvironment\nvariable is not set.\nCore and Builtins\n¶\nbpo-36722\n: In debug build, import now also looks for C extensions compiled\nin release mode and for C extensions compiled in the stable ABI.\nbpo-32849\n: Fix Python Initialization code on FreeBSD to detect properly\nwhen stdin file descriptor (fd 0) is invalid.\nbpo-36623\n: Remove parser headers and related function declarations that\nlack implementations after the removal of pgen.\nbpo-20180\n:\ndict.pop()\nis now up to 33% faster thanks to Argument\nClinic. Patch by Inada Naoki.\nbpo-36611\n: Debug memory allocators: disable serialno field by default from\ndebug hooks on Python memory allocators to reduce the memory footprint by\n5%. Enable\ntracemalloc\nto get the traceback where a memory block\nhas been allocated when a fatal memory error is logged to decide where to\nput a breakpoint. Compile Python with\nPYMEM_DEBUG_SERIALNO\ndefined to\nget back the field.\nbpo-36588\n: On AIX,\nsys.platform\ndoesn’t contain the major version\nanymore. Always return\n'aix'\n, instead of\n'aix3'\n..\n'aix7'\n.\nSince older Python versions include the version number, it is recommended\nto always use\nsys.platform.startswith('aix')\n. Contributed by M. Felt.\nbpo-36549\n: Change str.capitalize to use titlecase for the first character\ninstead of uppercase.\nbpo-36540\n: Implement\nPEP 570\n(Python positional-only parameters). Patch\nby Pablo Galindo.\nbpo-36475\n:\nPyEval_AcquireLock()\nand\nPyEval_AcquireThread()\nnow terminate the current thread if called\nwhile the interpreter is finalizing, making them consistent with\nPyEval_RestoreThread()\n,\nPy_END_ALLOW_THREADS()\n, and\nPyGILState_Ensure()\n.\nbpo-36504\n: Fix signed integer overflow in _ctypes.c’s\nPyCArrayType_new()\n.\nbpo-20844\n: Fix running script with encoding cookie and LF line ending may\nfail on Windows.\nbpo-24214\n: Fixed support of the surrogatepass error handler in the UTF-8\nincremental decoder.\nbpo-36452\n: Changing\ndict\nkeys during iteration of the dict itself,\nkeys()\n,\nvalues()\n, or\nitems()\nwill now be detected in certain\ncorner cases where keys are deleted/added so that the number of keys isn’t\nchanged. A\nRuntimeError\nwill be raised after\nlen(dict)\niterations.\nContributed by Thomas Perl.\nbpo-36459\n: Fix a possible double\nPyMem_FREE()\ndue to tokenizer.c’s\ntok_nextc()\n.\nbpo-36433\n: Fixed TypeError message in classmethoddescr_call.\nbpo-36430\n: Fix a possible reference leak in\nitertools.count()\n.\nbpo-36440\n: Include node names in\nParserError\nmessages, instead of\nnumeric IDs. Patch by A. Skrobov.\nbpo-36143\n: Regenerate\nkeyword\nfrom the Grammar and Tokens file\nusing pgen. Patch by Pablo Galindo.\nbpo-18372\n: Add missing\nPyObject_GC_Track()\ncalls in the\npickle\nmodule. Patch by Zackery Spytz.\nLibrary\n¶\nbpo-35952\n: Fix pythoninfo when the compiler is missing.\nbpo-28238\n: The\n.find*()\nmethods of xml.etree.ElementTree can now\nsearch for wildcards like\n{*}tag\nand\n{ns}*\nthat match a tag in any\nnamespace or all tags in a namespace.  Patch by Stefan Behnel.\nbpo-26978\n:\npathlib.path.link_to()\nis now implemented. It creates a\nhard link pointing to a path.\nbpo-1613500\n:\nfileinput.FileInput\nnow uses the input file mode to\ncorrectly set the output file mode (previously it was hardcoded to\n'w'\n)  when\ninplace=True\nis passed to its constructor.\nbpo-36734\n: Fix compilation of\nfaulthandler.c\non HP-UX. Initialize\nstack_t\ncurrent_stack\nto zero using\nmemset()\n.\nbpo-13611\n: The xml.etree.ElementTree packages gained support for C14N 2.0\nserialisation. Patch by Stefan Behnel.\nbpo-36669\n: Add missing matrix multiplication operator support to\nweakref.proxy.\nbpo-36676\n: The XMLParser() in xml.etree.ElementTree provides namespace\nprefix context to the parser target if it defines the callback methods\n“start_ns()” and/or “end_ns()”. Patch by Stefan Behnel.\nbpo-36673\n: The TreeBuilder and XMLPullParser in xml.etree.ElementTree\ngained support for parsing comments and processing instructions. Patch by\nStefan Behnel.\nbpo-36650\n: The C version of functools.lru_cache() was treating calls with\nan empty\n**kwargs\ndictionary as being distinct from calls with no\nkeywords at all. This did not result in an incorrect answer, but it did\ntrigger an unexpected cache miss.\nbpo-28552\n: Fix\ndistutils.sysconfig\nif\nsys.executable\nis\nNone\nor an empty string: use\nos.getcwd()\nto initialize\nproject_base\n.  Fix also the distutils build command: don’t use\nsys.executable\nif it is\nNone\nor an empty string.\nbpo-35755\n:\nshutil.which()\nand\ndistutils.spawn.find_executable\nnow use\nos.confstr(\"CS_PATH\")\nif available instead of\nos.defpath\n, if the\nPATH\nenvironment variable is not set.\nMoreover, don’t use\nos.confstr(\"CS_PATH\")\nnor\nos.defpath\nif\nthe\nPATH\nenvironment variable is set to an empty string.\nbpo-25430\n: improve performance of\nIPNetwork.__contains__()\nbpo-30485\n: Path expressions in xml.etree.ElementTree can now avoid\nexplicit namespace prefixes for tags (or the “{namespace}tag” notation) by\npassing a default namespace with an empty string prefix.\nbpo-36613\n: Fix\nasyncio\nwait() not removing callback if exception\nbpo-36598\n: Fix\nisinstance\ncheck for Mock objects with spec when the\ncode is executed under tracing. Patch by Karthikeyan Singaravelan.\nbpo-18748\n: In development mode (\n-X\ndev\n) and in debug build,\nthe\nio.IOBase\ndestructor now logs\nclose()\nexceptions. These\nexceptions are silent by default in release mode.\nbpo-36575\n: The\n_lsprof\nmodule now uses internal timer same to\ntime.perf_counter()\nby default.\ngettimeofday(2)\nwas used on Unix.\nNew timer has better resolution on most Unix platforms and timings are no\nlonger impacted by system clock updates since\nperf_counter()\nis\nmonotonic. Patch by Inada Naoki.\nbpo-33461\n:\njson.loads\nnow emits\nDeprecationWarning\nwhen\nencoding\noption is specified.  Patch by Matthias Bussonnier.\nbpo-36559\n: The random module now prefers the lean internal _sha512 module\nover hashlib for seed(version=2) to optimize import time.\nbpo-17561\n: Set backlog=None as the default for socket.create_server.\nbpo-34373\n: Fix\ntime.mktime()\nerror handling on AIX for year before\n1970.\nbpo-36232\n: Improve error message when trying to open existing DBM database\nthat actually doesn’t exist. Patch by Marco Rougeth.\nbpo-36546\n: Add statistics.quantiles()\nbpo-36050\n: Optimized\nhttp.client.HTTPResponse.read()\nfor large\nresponse. Patch by Inada Naoki.\nbpo-36522\n: If\ndebuglevel\nis set to >0 in\nhttp.client\n, print all\nvalues for headers with multiple values for the same header name. Patch by\nMatt Houglum.\nbpo-36492\n: Deprecated passing required arguments like\nfunc\nas keyword\narguments in functions which should accept arbitrary keyword arguments and\npass them to other function. Arbitrary keyword arguments (even with names\n“self” and “func”) can now be passed to these functions if the required\narguments are passed as positional arguments.\nbpo-27181\n: Add statistics.geometric_mean().\nbpo-30427\n:\nos.path.normcase()\nrelies on\nos.fspath()\nto check the\ntype of its argument. Redundant checks have been removed from its\nposixpath.normcase()\nand\nntpath.normcase()\nimplementations. Patch\nby Wolfgang Maier.\nbpo-36385\n: Stop rejecting IPv4 octets for being ambiguously octal. Leading\nzeros are ignored, and no longer are assumed to specify octal octets.\nOctets are always decimal numbers. Octets must still be no more than three\ndigits, including leading zeroes.\nbpo-36434\n: Errors during writing to a ZIP file no longer prevent to\nproperly close it.\nbpo-36407\n: Fixed wrong indentation writing for CDATA section in\nxml.dom.minidom. Patch by Vladimir Surjaninov.\nbpo-36326\n: inspect.getdoc() can now find docstrings for member objects\nwhen __slots__ is a dictionary.\nbpo-36366\n: Calling\nstop()\non an unstarted or stopped\nunittest.mock.patch()\nobject will now return\nNone\ninstead of\nraising\nRuntimeError\n, making the method idempotent. Patch by\nKarthikeyan Singaravelan.\nbpo-36348\n: The\nimap.IMAP4.logout()\nmethod no longer ignores silently\narbitrary exceptions.\nbpo-31904\n: Add time module support and fix test_time failures for VxWorks.\nbpo-36227\n: Added support for keyword arguments\ndefault_namespace\nand\nxml_declaration\nin functions\nElementTree.tostring()\nand\nElementTree.tostringlist()\n.\nbpo-36004\n: Added new alternate constructors\ndatetime.date.fromisocalendar()\nand\ndatetime.datetime.fromisocalendar()\n, which construct date objects\nfrom ISO year, week number and weekday; these are the inverse of each\nclass’s\nisocalendar\nmethod. Patch by Paul Ganssle.\nbpo-35936\n:\nmodulefinder\nno longer depends on the deprecated\nimp\nmodule, and the initializer for\nmodulefinder.ModuleFinder\nnow has immutable default arguments.\nPatch by Brandt Bucher.\nbpo-35376\n:\nmodulefinder\ncorrectly handles modules that have the\nsame name as a bad package. Patch by Brandt Bucher.\nbpo-17396\n:\nmodulefinder\nno longer crashes when encountering syntax\nerrors in followed imports. Patch by Brandt Bucher.\nbpo-35934\n: Added\ncreate_server()\nand\nhas_dualstack_ipv6()\nconvenience functions to automate the\nnecessary tasks usually involved when creating a server socket, including\naccepting both IPv4 and IPv6 connections on the same socket.  (Contributed\nby Giampaolo Rodola in\nbpo-17561\n.)\nbpo-23078\n: Add support for\nclassmethod()\nand\nstaticmethod()\nto\nunittest.mock.create_autospec()\n.  Initial patch by Felipe Ochoa.\nbpo-35416\n: Fix potential resource warnings in distutils. Patch by Mickaël\nSchoentgen.\nbpo-25451\n: Add transparency methods to\ntkinter.PhotoImage\n.  Patch\nby Zackery Spytz.\nbpo-35082\n: Don’t return deleted attributes when calling dir on a\nunittest.mock.Mock\n.\nbpo-34547\n:\nwsgiref.handlers.BaseHandler\nnow handles abrupt client\nconnection terminations gracefully. Patch by Petter Strandmark.\nbpo-31658\n:\nxml.sax.parse()\nnow supports\npath-like\n. Patch by Mickaël Schoentgen.\nbpo-34139\n: Remove stale unix datagram socket before binding\nbpo-33530\n: Implemented Happy Eyeballs in\nasyncio.create_connection()\n.\nAdded two new arguments,\nhappy_eyeballs_delay\nand\ninterleave\n, to\nspecify Happy Eyeballs behavior.\nbpo-33291\n: Do not raise AttributeError when calling the inspect functions\nisgeneratorfunction, iscoroutinefunction, isasyncgenfunction on a method\ncreated from an arbitrary callable. Instead, return False.\nbpo-31310\n: Fix the multiprocessing.semaphore_tracker so it is reused by\nchild processes\nbpo-31292\n: Fix\nsetup.py\ncheck\n--restructuredtext\nfor files containing\ninclude\ndirectives.\nDocumentation\n¶\nbpo-36625\n: Remove obsolete comments from docstrings in fractions.Fraction\nbpo-30840\n: Document relative imports\nbpo-36523\n: Add docstring for io.IOBase.writelines().\nbpo-36425\n: New documentation translation:\nSimplified Chinese\n.\nbpo-36345\n: Avoid the duplication of code from\nTools/scripts/serve.py\nin using the\nliteralinclude\ndirective for the basic\nwsgiref-based web server in the documentation of\nwsgiref\n.\nContributed by Stéphane Wirtel.\nbpo-36345\n: Using the code of the\nTools/scripts/serve.py\nscript as an\nexample in the\nwsgiref\ndocumentation.  Contributed by Stéphane\nWirtel.\nbpo-36157\n: Added documentation for PyInterpreterState_Main().\nbpo-33043\n: Updates the docs.python.org page with the addition of a\n‘Contributing to Docs’ link at the end of the page (between ‘Reporting\nBugs’ and ‘About Documentation’). Updates the ‘Found a Bug’ page with\nadditional links and information in the Documentation Bugs section.\nbpo-35581\n: @typing.type_check_only now allows type stubs to mark functions\nand classes not available during runtime.\nbpo-33832\n: Add glossary entry for ‘magic method’.\nbpo-32913\n: Added re.Match.groupdict example to regex HOWTO.\nTests\n¶\nbpo-36719\n: regrtest now always detects uncollectable objects. Previously,\nthe check was only enabled by\n--findleaks\n. The check now also works\nwith\n-jN/--multiprocess\nN\n.\n--findleaks\nbecomes a deprecated alias\nto\n--fail-env-changed\n.\nbpo-36725\n: When using multiprocessing mode (-jN), regrtest now better\nreports errors if a worker process fails, and it exits immediately on a\nworker thread failure or when interrupted.\nbpo-36454\n: Change test_time.test_monotonic() to test only the lower bound\nof elapsed time after a sleep command rather than the upper bound. This\nprevents unnecessary test failures on slow buildbots. Patch by Victor\nStinner.\nbpo-32424\n: Improve test coverage for xml.etree.ElementTree. Patch by\nGordon P. Hemsley.\nbpo-32424\n: Fix typo in test_cyclic_gc() test for xml.etree.ElementTree.\nPatch by Gordon P. Hemsley.\nbpo-36635\n: Add a new\n_testinternalcapi\nmodule to test the internal\nC API.\nbpo-36629\n: Fix\ntest_imap4_host_default_value()\nof\ntest_imaplib\n:\ncatch also\nerrno.ENETUNREACH\nerror.\nbpo-36611\n: Fix\ntest_sys.test_getallocatedblocks()\nwhen\ntracemalloc\nis enabled.\nbpo-36560\n: Fix reference leak hunting in regrtest: compute also deltas (of\nreference count, allocated memory blocks, file descriptor count) during\nwarmup, to ensure that everything is initialized before starting to hunt\nreference leaks.\nbpo-36565\n: Fix reference hunting (\npython3\n-m\ntest\n-R\n3:3\n) when Python\nhas no built-in abc module.\nbpo-31904\n: Port test_resource to VxWorks: skip tests cases setting\nRLIMIT_FSIZE and RLIMIT_CPU.\nbpo-31904\n: Fix test_tabnanny on VxWorks: adjust ENOENT error message.\nbpo-36436\n: Fix\n_testcapi.pymem_buffer_overflow()\n: handle memory\nallocation failure.\nbpo-31904\n: Fix test_utf8_mode on VxWorks: Python always use UTF-8 on\nVxWorks.\nbpo-36341\n: Fix tests that may fail with PermissionError upon calling\nbind() on AF_UNIX sockets.\nBuild\n¶\nbpo-36747\n: Remove the stale scriptsinstall Makefile target.\nbpo-21536\n: On Unix, C extensions are no longer linked to libpython except\non Android and Cygwin.\nIt is now possible for a statically linked Python to load a C extension\nbuilt using a shared library Python.\nWhen Python is embedded,\nlibpython\nmust not be loaded with\nRTLD_LOCAL\n, but\nRTLD_GLOBAL\ninstead. Previously, using\nRTLD_LOCAL\n, it was already not possible to load C extensions which\nwere not linked to\nlibpython\n, such as C extensions of the standard\nlibrary built by the\n*shared*\nsection of\nModules/Setup\n.\ndistutils, python-config and python-config.py have been modified.\nbpo-36707\n:\n./configure\n--with-pymalloc\nno longer adds the\nm\nflag\nto SOABI (sys.implementation.cache_tag). Enabling or disabling pymalloc\nhas no impact on the ABI.\nbpo-36635\n: Change\nPyAPI_FUNC(type)\n,\nPyAPI_DATA(type)\nand\nPyMODINIT_FUNC\nmacros of\npyport.h\nwhen\nPy_BUILD_CORE_MODULE\nis\ndefined. The\nPy_BUILD_CORE_MODULE\ndefine must be now be used to build\na C extension as a dynamic library accessing Python internals: export the\nPyInit_\nxxx\n()\nfunction in DLL exports on Windows.\nbpo-31904\n: Don’t build the\n_crypt\nextension on VxWorks.\nbpo-36618\n: Add\n-fmax-type-align=8\nto CFLAGS when clang compiler is\ndetected. The pymalloc memory allocator aligns memory on 8 bytes. On\nx86-64, clang expects alignment on 16 bytes by default and so uses MOVAPS\ninstruction which can lead to segmentation fault. Instruct clang that\nPython is limited to alignment on 8 bytes to use MOVUPS instruction\ninstead: slower but don’t trigger a SIGSEGV if the memory is not aligned\non 16 bytes. Sadly, the flag must be added to\nCFLAGS\nand not just\nCFLAGS_NODIST\n, since third party C extensions can have the same issue.\nbpo-36605\n:\nmake\ntags\nand\nmake\nTAGS\nnow also parse\nModules/_io/*.c\nand\nModules/_io/*.h\n.\nbpo-36465\n: Release builds and debug builds are now ABI compatible:\ndefining the\nPy_DEBUG\nmacro no longer implies the\nPy_TRACE_REFS\nmacro, which introduces the only ABI incompatibility. The\nPy_TRACE_REFS\nmacro, which adds the\nsys.getobjects()\nfunction\nand the\nPYTHONDUMPREFS\nenvironment variable, can be set using\nthe new\n./configure\n--with-trace-refs\nbuild option.\nbpo-36577\n: setup.py now correctly reports missing OpenSSL headers and\nlibraries again.\nbpo-36544\n: Fix regression introduced in\nbpo-36146\nrefactoring setup.py\nbpo-36508\n:\npython-config\n--ldflags\nno longer includes flags of the\nLINKFORSHARED\nvariable. The\nLINKFORSHARED\nvariable must only be\nused to build executables.\nbpo-36503\n: Remove references to “aix3” and “aix4”. Patch by M. Felt.\nWindows\n¶\nbpo-35920\n: Added platform.win32_edition() and platform.win32_is_iot().\nAdded support for cross-compiling packages for Windows ARM32. Skip tests\nthat are not expected to work on Windows IoT Core ARM32.\nbpo-36649\n: Remove trailing spaces for registry keys when installed via the\nStore.\nbpo-34144\n: Fixed activate.bat to correctly update codepage when chcp.com\nreturns dots in output. Patch by Lorenz Mende.\nbpo-36509\n: Added preset-iot layout for Windows IoT ARM containers. This\nlayout doesn’t contain UI components like tkinter or IDLE. It also doesn’t\ncontain files to support on-target builds since Windows ARM32 builds must\nbe cross-compiled when using MSVC.\nbpo-35941\n: enum_certificates function of the ssl module now returns\ncertificates from all available certificate stores inside windows in a\nquery instead of returning only certificates from the system wide\ncertificate store. This includes certificates from these certificate\nstores: local machine, local machine enterprise, local machine group\npolicy, current user, current user group policy, services, users.\nssl.enum_crls() function is changed in the same way to return all\ncertificate revocation lists inside the windows certificate revocation\nlist stores.\nbpo-36441\n: Fixes creating a venv when debug binaries are installed.\nbpo-36085\n: Enable better DLL resolution on Windows by using safe DLL\nsearch paths and adding\nos.add_dll_directory()\n.\nbpo-36010\n: Add the venv standard library module to the nuget distribution\nfor Windows.\nbpo-29515\n: Add the following socket module constants on Windows:\nIPPROTO_AH IPPROTO_CBT IPPROTO_DSTOPTS IPPROTO_EGP IPPROTO_ESP\nIPPROTO_FRAGMENT IPPROTO_GGP IPPROTO_HOPOPTS IPPROTO_ICLFXBM\nIPPROTO_ICMPV6 IPPROTO_IDP IPPROTO_IGMP IPPROTO_IGP IPPROTO_IPV4\nIPPROTO_IPV6 IPPROTO_L2TP IPPROTO_MAX IPPROTO_ND IPPROTO_NONE IPPROTO_PGM\nIPPROTO_PIM IPPROTO_PUP IPPROTO_RDP IPPROTO_ROUTING IPPROTO_SCTP\nIPPROTO_ST\nbpo-35947\n: Added current version of libffi to cpython-source-deps. Change\n_ctypes to use current version of libffi on Windows.\nbpo-34060\n: Report system load when running test suite on Windows. Patch by\nAmmar Askar. Based on prior work by Jeremy Kloth.\nbpo-31512\n: With the Windows 10 Creators Update, non-elevated users can now\ncreate symlinks as long as the computer has Developer Mode enabled.\nmacOS\n¶\nbpo-34602\n: Avoid failures setting macOS stack resource limit with\nresource.setrlimit. This reverts an earlier fix for\nbpo-18075\nwhich forced\na non-default stack size when building the interpreter executable on\nmacOS.\nIDLE\n¶\nbpo-36429\n: Fix starting IDLE with pyshell. Add idlelib.pyshell alias at\ntop; remove pyshell alias at bottom. Remove obsolete __name__==’__main__’\ncommand.\nTools/Demos\n¶\nbpo-14546\n: Fix the argument handling in Tools/scripts/lll.py.\nC API\n¶\nbpo-36763\n: Fix memory leak in\nPy_SetStandardStreamEncoding()\n:\nrelease memory if the function is called twice.\nbpo-36641\n:\nPyDoc_VAR\n(\nname\n)\nand\nPyDoc_STRVAR\n(\nname\n,\nstr\n)\nnow create\nstatic\nconst\nchar\nname[]\ninstead of\nstatic\nchar\nname[]\n.\nPatch by Inada Naoki.\nbpo-36389\n: Change the value of\nCLEANBYTE\n,\nDEADDYTE\nand\nFORBIDDENBYTE\ninternal constants used by debug hooks on Python memory\nallocators (\nPyMem_SetupDebugHooks()\nfunction). Byte patterns\n0xCB\n,\n0xDB\nand\n0xFB\nhave been replaced with\n0xCD\n,\n0xDD\nand\n0xFD\nto use the same values than Windows CRT debug\nmalloc()\nand\nfree()\n.\nbpo-36443\n: Since Python 3.7.0, calling\nPy_DecodeLocale()\nbefore\nPy_Initialize()\nproduces mojibake if the\nLC_CTYPE\nlocale is\ncoerced and/or if the UTF-8 Mode is enabled by the user configuration. The\nLC_CTYPE coercion and UTF-8 Mode are now disabled by default to fix the\nmojibake issue. They must now be enabled explicitly (opt-in) using the new\n_Py_PreInitialize()\nAPI with\n_PyPreConfig\n.\nbpo-36025\n: Fixed an accidental change to the datetime C API where the\narguments to the\nPyDate_FromTimestamp()\nfunction were incorrectly\ninterpreted as a single timestamp rather than an arguments tuple, which\ncauses existing code to start raising\nTypeError\n. The\nbackwards-incompatible change was only present in alpha releases of Python\n3.8. Patch by Paul Ganssle.\nbpo-35810\n: Modify\nPyObject_Init\nto correctly increase the refcount of\nheap-allocated Type objects. Also fix the refcounts of the heap-allocated\ntypes that were either doing this manually or not decreasing the type’s\nrefcount in tp_dealloc\nPython 3.8.0 alpha 3\n¶\nRelease date: 2019-03-25\nSecurity\n¶\nbpo-36216\n: Changes urlsplit() to raise ValueError when the URL contains\ncharacters that decompose under IDNA encoding (NFKC-normalization) into\ncharacters that affect how the URL is parsed.\nbpo-35121\n: Don’t send cookies of domain A without Domain attribute to\ndomain B when domain A is a suffix match of domain B while using a\ncookiejar with\nhttp.cookiejar.DefaultCookiePolicy\npolicy. Patch\nby Karthikeyan Singaravelan.\nCore and Builtins\n¶\nbpo-36421\n: Fix a possible double decref in _ctypes.c’s\nPyCArrayType_new()\n.\nbpo-36412\n: Fix a possible crash when creating a new dictionary.\nbpo-36398\n: Fix a possible crash in\nstructseq_repr()\n.\nbpo-36256\n: Fix bug in parsermodule when parsing a state in a DFA that has\ntwo or more arcs with labels of the same type. Patch by Pablo Galindo.\nbpo-36365\n: repr(structseq) is no longer limited to 512 bytes.\nbpo-36374\n: Fix a possible null pointer dereference in\nmerge_consts_recursive()\n. Patch by Zackery Spytz.\nbpo-36236\n: At Python initialization, the current directory is no longer\nprepended to\nsys.path\nif it has been removed.\nbpo-36352\n: Python initialization now fails with an error, rather than\nsilently truncating paths, if a path is too long.\nbpo-36301\n: Python initialization now fails if decoding\npybuilddir.txt\nconfiguration file fails at startup.\nbpo-36333\n: Fix leak in _PyRuntimeState_Fini. Contributed by Stéphane\nWirtel.\nbpo-36332\n: The builtin\ncompile()\ncan now handle AST objects that\ncontain assignment expressions. Patch by Pablo Galindo.\nbpo-36282\n: Improved error message for too much positional arguments in\nsome builtin functions.\nbpo-30040\n: New empty dict uses fewer memory for now.  It used more memory\nthan empty dict created by\ndict.clear()\n.  And empty dict creation and\ndeletion is about 2x faster.  Patch by Inada Naoki.\nbpo-36262\n: Fix an unlikely memory leak on conversion from string to float\nin the function\n_Py_dg_strtod()\nused by\nfloat(str)\n,\ncomplex(str)\n,\npickle.load()\n,\nmarshal.load()\n, etc.\nbpo-36252\n: Update Unicode databases to version 12.0.0.\nbpo-36218\n: Fix a segfault occurring when sorting a list of heterogeneous\nvalues. Patch contributed by Rémi Lapeyre and Elliot Gorokhovsky.\nbpo-36188\n: Cleaned up left-over vestiges of Python 2 unbound method\nhandling in method objects and documentation. Patch by Martijn Pieters\nbpo-36124\n: Add a new interpreter-specific dict and expose it in the C-API\nvia PyInterpreterState_GetDict().  This parallels PyThreadState_GetDict().\nHowever, extension modules should continue using PyModule_GetState() for\ntheir own internal per-interpreter state.\nbpo-35975\n: Add a\nfeature_version\nflag to\nast.parse()\n(documented)\nand\ncompile()\n(hidden) that allows tweaking the parser to support\nolder versions of the grammar. In particular, if\nfeature_version\nis 5\nor 6, the hacks for the\nasync\nand\nawait\nkeyword from PEP 492 are\nreinstated. (For 7 or higher, these are unconditionally treated as\nkeywords, but they are still special tokens rather than\nNAME\ntokens\nthat the parser driver recognizes.)\nbpo-31904\n: Use UTF-8 as the system encoding on VxWorks.\nbpo-36048\n: The\n__index__()\nspecial method will be used\ninstead of\n__int__()\nfor implicit conversion of Python\nnumbers to C integers.  Using the\n__int__()\nmethod in implicit\nconversions has been deprecated.\nbpo-35808\n: Retire pgen and use a modified version of pgen2 to generate the\nparser. Patch by Pablo Galindo.\nLibrary\n¶\nbpo-36401\n: The class documentation created by pydoc now has a separate\nsection for readonly properties.\nbpo-36320\n: The typing.NamedTuple() class has deprecated the _field_types\nattribute in favor of the __annotations__ attribute which carried the same\ninformation. Also, both attributes were converted from OrderedDict to a\nregular dict.\nbpo-34745\n: Fix\nasyncio\nssl memory issues caused by circular\nreferences\nbpo-36324\n: Add method to statistics.NormalDist for computing the inverse\ncumulative normal distribution.\nbpo-36321\n: collections.namedtuple() misspelled the name of an attribute.\nTo be consistent with typing.NamedTuple, the attribute name should have\nbeen “_field_defaults” instead of “_fields_defaults”.  For backwards\ncompatibility, both spellings are now created.  The misspelled version may\nbe removed in the future.\nbpo-36297\n: “unicode_internal” codec is removed.  It was deprecated since\nPython 3.3. Patch by Inada Naoki.\nbpo-36298\n: Raise ModuleNotFoundError in pyclbr when a module can’t be\nfound. Thanks to ‘mental’ for the bug report.\nbpo-36268\n: Switch the default format used for writing tars with\ntarfile\nto the modern POSIX.1-2001 pax standard, from the\nvendor-specific GNU. Contributed by C.A.M. Gerlach.\nbpo-36285\n: Fix integer overflows in the array module. Patch by Stephan\nHohe.\nbpo-31904\n: Add _signal module support for VxWorks.\nbpo-36272\n:\nlogging\ndoes not silently ignore RecursionError anymore.\nPatch contributed by Rémi Lapeyre.\nbpo-36280\n: Add a kind field to ast.Constant. It is ‘u’ if the literal has\na ‘u’ prefix (i.e. a Python 2 style unicode literal), else None.\nbpo-35931\n: The\npdb\ndebug\ncommand now gracefully handles all\nexceptions.\nbpo-36251\n: Fix format strings used for stderrprinter and re.Match reprs.\nPatch by Stephan Hohe.\nbpo-36235\n: Fix\nCFLAGS\nin\ncustomize_compiler()\nof\ndistutils.sysconfig\n: when the\nCFLAGS\nenvironment variable is\ndefined, don’t override\nCFLAGS\nvariable with the\nOPT\nvariable\nanymore. Initial patch written by David Malcolm.\nbpo-35807\n: Update ensurepip to install pip 19.0.3 and setuptools 40.8.0.\nbpo-36139\n: Release GIL when closing\nmmap\nobjects.\nbpo-36179\n: Fix two unlikely reference leaks in _hashopenssl. The leaks\nonly occur in out-of-memory cases.\nbpo-36169\n: Add overlap() method to statistics.NormalDist.  Computes the\noverlapping coefficient for two normal distributions.\nbpo-36103\n: Default buffer size used by\nshutil.copyfileobj()\nis changed\nfrom 16 KiB to 64 KiB on non-Windows platform to reduce system call\noverhead. Contributed by Inada Naoki.\nbpo-36130\n: Fix\npdb\nwith\nskip=...\nwhen stepping into a frame\nwithout a\n__name__\nglobal.  Patch by Anthony Sottile.\nbpo-35652\n: shutil.copytree(copy_function=…) erroneously pass DirEntry\ninstead of a path string.\nbpo-35178\n: Ensure custom\nwarnings.formatwarning()\nfunction can\nreceive\nline\nas positional argument. Based on patch by Tashrif Billah.\nbpo-36106\n: Resolve potential name clash with libm’s sinpi(). Patch by\nDmitrii Pasechnik.\nbpo-36091\n: Clean up reference to async generator in Lib/types. Patch by\nHenry Chen.\nbpo-36043\n:\nFileCookieJar\nsupports\npath-like object\n.\nContributed by Stéphane Wirtel\nbpo-35899\n: Enum has been fixed to correctly handle empty strings and\nstrings with non-Latin characters (ie. ‘α’, ‘א’) without crashing.\nOriginal patch contributed by Maxwell. Assisted by Stéphane Wirtel.\nbpo-21269\n: Add\nargs\nand\nkwargs\nproperties to mock call objects.\nContributed by Kumar Akshay.\nbpo-30670\n:\npprint.pp\nhas been added to pretty-print objects with\ndictionary keys being sorted with their insertion order by default.\nParameter\nsort_dicts\nhas been added to\npprint.pprint\n,\npprint.pformat\nand\npprint.PrettyPrinter\n. Contributed by Rémi\nLapeyre.\nbpo-35843\n: Implement\n__getitem__\nfor\n_NamespacePath\n.  Patch by\nAnthony Sottile.\nbpo-35802\n: Clean up code which checked presence of\nos.stat\n/\nos.lstat\n/\nos.chmod\nwhich are always present.  Patch by Anthony\nSottile.\nbpo-35715\n: Librates the return value of a ProcessPoolExecutor\n_process_worker after it’s no longer needed to free memory\nbpo-35493\n: Use\nmultiprocessing.connection.wait()\ninstead of polling\neach 0.2 seconds for worker updates in\nmultiprocessing.Pool\n.\nPatch by Pablo Galindo.\nbpo-35661\n: Store the venv prompt in pyvenv.cfg.\nbpo-35121\n: Don’t set cookie for a request when the request path is a\nprefix match of the cookie’s path attribute but doesn’t end with “/”.\nPatch by Karthikeyan Singaravelan.\nbpo-21478\n: Calls to a child function created with\nunittest.mock.create_autospec()\nshould propagate to the parent.\nPatch by Karthikeyan Singaravelan.\nbpo-35198\n: Fix C++ extension compilation on AIX\nDocumentation\n¶\nbpo-36329\n: Declare the path of the Python binary for the usage of\nTools/scripts/serve.py\nwhen executing\nmake\n-C\nDoc/\nserve\n.\nContributed by Stéphane Wirtel\nbpo-36138\n: Improve documentation about converting datetime.timedelta to\nscalars.\nbpo-21314\n: A new entry was added to the Core Language Section of the\nProgramming FAQ, which explaines the usage of slash(/) in the signature of\na function. Patch by Lysandros Nikolaou\nTests\n¶\nbpo-36234\n: test_posix.PosixUidGidTests: add tests for invalid uid/gid type\n(str). Initial patch written by David Malcolm.\nbpo-29571\n: Fix\ntest_re.test_locale_flag()\n:  use\nlocale.getpreferredencoding()\nrather than\nlocale.getlocale()\nto\nget the locale encoding. With some locales,\nlocale.getlocale()\nreturns\nthe wrong encoding.\nbpo-36123\n: Fix race condition in test_socket.\nBuild\n¶\nbpo-36356\n: Fix leaks that led to build failure when configured with\naddress sanitizer.\nbpo-36146\n: Add\nTEST_EXTENSIONS\nconstant to\nsetup.py\nto allow to\nnot build test extensions like\n_testcapi\n.\nbpo-36146\n: Fix setup.py on macOS: only add\n/usr/include/ffi\nto include\ndirectories of _ctypes, not for all extensions.\nbpo-31904\n: Enable build system to cross-build for VxWorks RTOS.\nWindows\n¶\nbpo-36312\n: Fixed decoders for the following code pages: 50220, 50221,\n50222, 50225, 50227, 50229, 57002 through 57011, 65000 and 42.\nbpo-36264\n: Don’t honor POSIX\nHOME\nin\nos.path.expanduser\non\nwindows.  Patch by Anthony Sottile.\nbpo-24643\n: Fix name collisions due to\n#define\ntimezone\n_timezone\nin\nPC/pyconfig.h.\nIDLE\n¶\nbpo-36405\n: Use dict unpacking in idlelib.\nbpo-36396\n: Remove fgBg param of idlelib.config.GetHighlight(). This param\nwas only used twice and changed the return type.\nbpo-36176\n: Fix IDLE autocomplete & calltip popup colors. Prevent conflicts\nwith Linux dark themes (and slightly darken calltip background).\nbpo-23205\n: For the grep module, add tests for findfiles, refactor\nfindfiles to be a module-level function, and refactor findfiles to use\nos.walk.\nbpo-23216\n: Add docstrings to IDLE search modules.\nbpo-36152\n: Remove colorizer.ColorDelegator.close_when_done and the\ncorresponding argument of .close().  In IDLE, both have always been None\nor False since 2007.\nbpo-32129\n: Avoid blurry IDLE application icon on macOS with Tk 8.6. Patch\nby Kevin Walzer.\nbpo-36096\n: Refactor class variables to instance variables in colorizer.\nbpo-30348\n: Increase test coverage of idlelib.autocomplete by 30%. Patch by\nLouie Lu\nTools/Demos\n¶\nbpo-35132\n: Fix py-list and py-bt commands of python-gdb.py on gdb7.\nbpo-32217\n: Fix freeze script on Windows.\nC API\n¶\nbpo-36381\n: Raise\nDeprecationWarning\nwhen ‘#’ formats are used for\nbuilding or parsing values without\nPY_SSIZE_T_CLEAN\n.\nbpo-36142\n: The whole coreconfig.h header is now excluded from\nPy_LIMITED_API. Move functions definitions into a new internal\npycore_coreconfig.h header.\nPython 3.8.0 alpha 2\n¶\nRelease date: 2019-02-25\nCore and Builtins\n¶\nbpo-36052\n: Raise a\nSyntaxError\nwhen assigning a value to\n__debug__\nwith the Assignment Operator. Contributed by Stéphane Wirtel\nand Pablo Galindo.\nbpo-36012\n: Doubled the speed of class variable writes.  When a non-dunder\nattribute was updated, there was an unnecessary call to update slots.\nbpo-35942\n: The error message emitted when returning invalid types from\n__fspath__\nin interfaces that allow passing\nPathLike\nobjects has been improved and now it does explain the origin of the error.\nbpo-36016\n:\ngc.get_objects\ncan now receive an optional parameter\nindicating a generation to get objects from. Patch by Pablo Galindo.\nbpo-1054041\n: When the main interpreter exits due to an uncaught\nKeyboardInterrupt, the process now exits in the appropriate manner for its\nparent process to detect that a SIGINT or ^C terminated the process.  This\nallows shells and batch scripts to understand that the user has asked them\nto stop.\nbpo-35992\n: Fix\n__class_getitem__()\nnot being called on a class with a\ncustom non-subscriptable metaclass.\nbpo-35993\n: Fix a crash on fork when using subinterpreters. Contributed by\nStéphane Wirtel\nbpo-35991\n: Fix a potential double free in Modules/_randommodule.c.\nbpo-35961\n: Fix a crash in slice_richcompare(): use strong references\nrather than stolen references for the two temporary internal tuples.\nbpo-35911\n: Enable the creation of cell objects by adding a\ncell.__new__\nmethod, and expose the type\ncell\nin\nLib/types.py\nunder the name CellType. Patch by Pierre Glaser.\nbpo-12822\n: Use monotonic clock for\npthread_cond_timedwait\nwhen\npthread_condattr_setclock\nand\nCLOCK_MONOTONIC\nare available.\nbpo-15248\n: The compiler emits now syntax warnings in the case when a comma\nis likely missed before tuple or list.\nbpo-35886\n: The implementation of PyInterpreterState has been moved into\nthe internal header files (guarded by Py_BUILD_CORE).\nbpo-31506\n: Clarify the errors reported when\nobject.__new__\nand\nobject.__init__\nreceive more than one argument. Contributed by Sanyam\nKhurana.\nbpo-35724\n: Signal-handling is now guaranteed to happen relative to the\nmain interpreter.\nbpo-33608\n: We added a new internal _Py_AddPendingCall() that operates\nrelative to the provided interpreter.  This allows us to use the existing\nimplementation to ask another interpreter to do work that cannot be done\nin the current interpreter, like decref an object the other interpreter\nowns.  The existing Py_AddPendingCall() only operates relative to the main\ninterpreter.\nbpo-33989\n: Fix a possible crash in\nlist.sort()\nwhen sorting objects\nwith\nob_type->tp_richcompare\n==\nNULL\n.  Patch by Zackery Spytz.\nLibrary\n¶\nbpo-35512\n:\nunittest.mock.patch.dict()\nused as a decorator with\nstring target resolves the target during function call instead of during\ndecorator construction. Patch by Karthikeyan Singaravelan.\nbpo-36018\n: Add statistics.NormalDist, a tool for creating and manipulating\nnormal distributions of random variable.  Features a composite class that\ntreats the mean and standard deviation of measurement data as single\nentity.\nbpo-35904\n: Added statistics.fmean() as a faster, floating-point variant of\nthe existing mean() function.\nbpo-35918\n: Removed broken\nhas_key\nmethod from\nmultiprocessing.managers.SyncManager.dict. Contributed by Rémi Lapeyre.\nbpo-18283\n: Add support for bytes to\nshutil.which()\n.\nbpo-35960\n: Fix\ndataclasses.field()\nthrowing away empty mapping\nobjects passed as metadata.\nbpo-35500\n: Write expected and actual call parameters on separate lines in\nunittest.mock.Mock.assert_called_with()\nassertion errors.\nContributed by Susan Su.\nbpo-35931\n: The\npdb\ndebug\ncommand now gracefully handles syntax\nerrors.\nbpo-24209\n: In http.server script, rely on getaddrinfo to bind to preferred\naddress based on the bind parameter. Now default bind or binding to a name\nmay bind to IPv6 or dual-stack, depending on the environment.\nbpo-35321\n: Set\n__spec__.origin\nof\n_frozen_importlib\nto frozen so\nthat it matches the behavior of\n_frozen_importlib_external\n.  Patch by\nNina Zakharenko.\nbpo-35378\n: Fix a reference issue inside\nmultiprocessing.Pool\nthat\ncaused the pool to remain alive if it was deleted without being closed or\nterminated explicitly. A new strong reference is added to the pool\niterators to link the lifetime of the pool to the lifetime of its\niterators so the pool does not get destroyed if a pool iterator is still\nalive.\nbpo-34294\n: re module, fix wrong capturing groups in rare cases.\nre.search()\n,\nre.findall()\n,\nre.sub()\nand other functions\nthat scan through string looking for a match, should reset capturing\ngroups between two match attempts. Patch by Ma Lin.\nbpo-35615\n:\nweakref\n: Fix a RuntimeError when copying a\nWeakKeyDictionary or a WeakValueDictionary, due to some keys or values\ndisappearing while iterating.\nbpo-35606\n: Implement\nmath.prod()\nas analogous function to\nsum()\nthat returns the product of a ‘start’ value (default: 1) times\nan iterable of numbers. Patch by Pablo Galindo.\nbpo-32417\n: Performing arithmetic between\ndatetime.datetime\nsubclasses and\ndatetime.timedelta\nnow returns an object of the\nsame type as the\ndatetime.datetime\nsubclass. As a result,\ndatetime.datetime.astimezone()\nand alternate constructors like\ndatetime.datetime.now()\nand\ndatetime.fromtimestamp()\ncalled\nwith a\ntz\nargument now\nalso\nretain their subclass.\nbpo-35153\n: Add\nheaders\noptional keyword-only parameter to\nxmlrpc.client.ServerProxy\n,\nxmlrpc.client.Transport\nand\nxmlrpc.client.SafeTransport\n.  Patch by Cédric Krier.\nbpo-34572\n: Fix C implementation of pickle.loads to use importlib’s locking\nmechanisms, and thereby avoid using partially loaded modules. Patch by Tim\nBurgess.\nDocumentation\n¶\nbpo-36083\n: Fix formatting of –check-hash-based-pycs options in the\nmanpage Synopsis.\nbpo-36007\n: Bump minimum sphinx version to 1.8.  Patch by Anthony Sottile.\nbpo-22062\n: Update documentation and docstrings for pathlib. Original patch\nby Mike Short.\nTests\n¶\nbpo-27313\n: Avoid test_ttk_guionly ComboboxTest failure with macOS Cocoa\nTk.\nbpo-36019\n: Add test.support.TEST_HTTP_URL and replace references of\nhttp://www.example.com\nby this new constant. Contributed by Stéphane\nWirtel.\nbpo-36037\n: Fix test_ssl for strict OpenSSL configuration like RHEL8 strict\ncrypto policy. Use older TLS version for minimum TLS version of the server\nSSL context if needed, to test TLS version older than default minimum TLS\nversion.\nbpo-35798\n: Added\ntest.support.check_syntax_warning()\n.\nbpo-35505\n: Make test_imap4_host_default_value independent on whether the\nlocal IMAP server is running.\nbpo-35917\n: multiprocessing: provide unit tests for SyncManager and\nSharedMemoryManager classes + all the shareable types which are supposed\nto be supported by them.  (patch by Giampaolo Rodola)\nbpo-35704\n: Skip\ntest_shutil.test_unpack_archive_xztar\nto prevent a\nMemoryError on 32-bit AIX when MAXDATA setting is less than 0x20000000.\nPatch by Michael Felt (aixtools)\nbpo-34720\n: Assert m_state != NULL to mimic GC traversal functions that do\nnot correctly handle module creation when the module state has not been\ncreated.\nWindows\n¶\nbpo-35976\n: Added ARM build support to Windows build files in PCBuild.\nbpo-35692\n:\npathlib\nno longer raises when checking file and directory\nexistence on drives that are not ready\nbpo-35872\n: Uses the base Python executable when invoking venv in a virtual\nenvironment\nbpo-35873\n: Prevents venv paths being inherited by child processes\nbpo-35299\n: Fix sysconfig detection of the source directory and distutils\nhandling of pyconfig.h during PGO profiling\nIDLE\n¶\nbpo-24310\n: IDLE – Document settings dialog font tab sample.\nbpo-35833\n: Revise IDLE doc for control codes sent to Shell. Add a code\nexample block.\nbpo-35689\n: Add docstrings and unittests for colorizer.py.\nPython 3.8.0 alpha 1\n¶\nRelease date: 2019-02-03\nSecurity\n¶\nbpo-35746\n:\nCVE 2019-5010\n: Fix a NULL pointer deref in ssl module. The\ncert parser did not handle CRL distribution points with empty DP or URI\ncorrectly. A malicious or buggy certificate can result into segfault.\nVulnerability (TALOS-2018-0758) reported by Colin Read and Nicolas Edet of\nCisco.\nbpo-34812\n: The\n-I\ncommand line option (run Python in isolated\nmode) is now also copied by the\nmultiprocessing\nand\ndistutils\nmodules when spawning child processes. Previously, only\n-E\nand\n-s\noptions (enabled by\n-I\n) were copied.\nbpo-34791\n: The xml.sax and xml.dom.domreg no longer use environment\nvariables to override parser implementations when\nsys.flags.ignore_environment is set by -E or -I arguments.\nbpo-17239\n: The xml.sax and xml.dom.minidom parsers no longer processes\nexternal entities by default. External DTD and ENTITY declarations no\nlonger load files or create network connections.\nbpo-34623\n:\nCVE 2018-14647\n: The C accelerated _elementtree module now\ninitializes hash randomization salt from _Py_HashSecret instead of\nlibexpat’s default CSPRNG.\nbpo-34405\n: Updated to OpenSSL 1.1.0i for Windows builds.\nbpo-33871\n: Fixed sending the part of the file in\nos.sendfile()\non\nmacOS.  Using the\ntrailers\nargument could cause sending more bytes from\nthe input file than was specified.\nbpo-32533\n: Fixed thread-safety of error handling in _ssl.\nbpo-33136\n: Harden ssl module against LibreSSL\nCVE 2018-8970\n.\nX509_VERIFY_PARAM_set1_host() is called with an explicit namelen. A new\ntest ensures that NULL bytes are not allowed.\nbpo-33001\n: Minimal fix to prevent buffer overrun in os.symlink on Windows\nbpo-32981\n: Regexes in difflib and poplib were vulnerable to catastrophic\nbacktracking. These regexes formed potential DOS vectors (REDOS). They\nhave been refactored. This resolves\nCVE 2018-1060\nand\nCVE 2018-1061\n.\nPatch by Jamie Davis.\nbpo-28414\n: The ssl module now allows users to perform their own IDN\nen/decoding when using SNI.\nCore and Builtins\n¶\nbpo-35877\n: Make parenthesis optional for named expressions in while\nstatement. Patch by Karthikeyan Singaravelan.\nbpo-35814\n: Allow same right hand side expressions in annotated assignments\nas in normal ones. In particular,\nx:\nTuple[int,\nint]\n=\n1,\n2\n(without\nparentheses on the right) is now allowed.\nbpo-35766\n: Add the option to parse PEP 484 type comments in the ast\nmodule. (Off by default.) This is merging the key functionality of the\nthird party fork thereof,\n[typed_ast](\nhttps://github.com/python/typed_ast\n).\nbpo-35713\n: Reorganize Python initialization to get working exceptions and\nsys.stderr earlier.\nbpo-33416\n: Add end line and end column position information to the Python\nAST nodes. This is a C-level backwards incompatible change.\nbpo-35720\n: Fixed a minor memory leak in pymain_parse_cmdline_impl function\nin Modules/main.c\nbpo-35634\n:\nfunc(**kwargs)\nwill now raise an error when\nkwargs\nis a\nmapping containing multiple entries with the same key. An error was\nalready raised when other keyword arguments are passed before\n**kwargs\nsince Python 3.6.\nbpo-35623\n: Fix a crash when sorting very long lists. Patch by Stephan\nHohe.\nbpo-35214\n: clang Memory Sanitizer build instrumentation was added to work\naround false positives from posix, socket, time, test_io, and\ntest_faulthandler.\nbpo-35560\n: Fix an assertion error in\nformat()\nin debug build for\nfloating-point formatting with “n” format, zero padding and small width.\nRelease build is not impacted. Patch by Karthikeyan Singaravelan.\nbpo-35552\n: Format characters\n%s\nand\n%V\nin\nPyUnicode_FromFormat()\nand\n%s\nin\nPyBytes_FromFormat()\nno longer read memory past the limit if\nprecision\nis specified.\nbpo-35504\n: Fix segfaults and\nSystemError\ns when deleting certain\nattributes. Patch by Zackery Spytz.\nbpo-35504\n: Fixed a SystemError when delete the characters_written\nattribute of an OSError.\nbpo-35494\n: Improved syntax error messages for unbalanced parentheses in\nf-string.\nbpo-35444\n: Fixed error handling in pickling methods when fail to look up\nbuiltin “getattr”. Sped up pickling iterators.\nbpo-35436\n: Fix various issues with memory allocation error handling.\nPatch by Zackery Spytz.\nbpo-35423\n: Separate the signal handling trigger in the eval loop from the\n“pending calls” machinery. There is no semantic change and the difference\nin performance is insignificant.\nbpo-35357\n: Internal attributes’ names of unittest.mock._Call and\nunittest.mock.MagicProxy (name, parent & from_kall) are now prefixed with\n_mock_ in order to prevent clashes with widely used object attributes.\nFixed minor typo in test function name.\nbpo-35372\n: Fixed the code page decoder for input longer than 2 GiB\ncontaining undecodable bytes.\nbpo-35336\n: Fix PYTHONCOERCECLOCALE=1 environment variable: only coerce the\nC locale if the LC_CTYPE locale is “C”.\nbpo-31241\n: The\nlineno\nand\ncol_offset\nattributes of AST nodes for list\ncomprehensions, generator expressions and tuples are now point to the\nopening parenthesis or square brace. For tuples without parenthesis they\npoint to the position of the first item.\nbpo-33954\n: For\nstr.format()\n,\nfloat.__format__()\nand\ncomplex.__format__()\nmethods for non-ASCII decimal point when using\nthe “n” formatter.\nbpo-35269\n: Fix a possible segfault involving a newly created coroutine.\nPatch by Zackery Spytz.\nbpo-35224\n: Implement\nPEP 572\n(assignment expressions). Patch by Emily\nMorehouse.\nbpo-32492\n: Speed up\nnamedtuple()\nattribute access by 1.6x using a C\nfast-path for the name descriptors. Patch by Pablo Galindo.\nbpo-35214\n: Fixed an out of bounds memory access when parsing a truncated\nunicode escape sequence at the end of a string such as\n'\\N'\n.  It would\nread one byte beyond the end of the memory allocation.\nbpo-35214\n: The interpreter and extension modules have had annotations\nadded so that they work properly under clang’s Memory Sanitizer.  A new\nconfigure flag –with-memory-sanitizer has been added to make test builds\nof this nature easier to perform.\nbpo-35193\n: Fix an off by one error in the bytecode peephole optimizer\nwhere it could read bytes beyond the end of bounds of an array when\nremoving unreachable code. This bug was present in every release of Python\n3.6 and 3.7 until now.\nbpo-35169\n: Improved error messages for forbidden assignments.\nbpo-34022\n: Fix handling of hash-based bytecode files in\nzipimport\n.\nPatch by Elvis Pranskevichus.\nbpo-28401\n: Debug builds will no longer to attempt to import extension\nmodules built for the ABI as they were never compatible to begin with.\nPatch by Stefano Rivera.\nbpo-29341\n: Clarify in the docstrings of\nos\nmethods that path-like\nobjects are also accepted as input parameters.\nbpo-35050\n:\nsocket\n: Fix off-by-one bug in length check for\nAF_ALG\nname and type.\nbpo-29743\n: Raise\nValueError\ninstead of\nOverflowError\nin case\nof a negative\n_length_\nin a\nctypes.Array\nsubclass.  Also\nraise\nTypeError\ninstead of\nAttributeError\nfor non-integer\n_length_\n. Original patch by Oren Milman.\nbpo-16806\n: Fix\nlineno\nand\ncol_offset\nfor multi-line string tokens.\nbpo-35029\n:\nSyntaxWarning\nraised as an exception at code generation\ntime will be now replaced with a\nSyntaxError\nfor better error\nreporting.\nbpo-34983\n: Expose\nsymtable.Symbol.is_nonlocal()\nin the symtable\nmodule. Patch by Pablo Galindo.\nbpo-34974\n:\nbytes\nand\nbytearray\nconstructors no longer\nconvert unexpected exceptions (e.g.\nMemoryError\nand\nKeyboardInterrupt\n) to\nTypeError\n.\nbpo-34939\n: Allow annotated names in module namespace that are declared\nglobal before the annotation happens. Patch by Pablo Galindo.\nbpo-34973\n: Fixed crash in\nbytes()\nwhen the\nlist\nargument is\nmutated while it is iterated.\nbpo-34876\n: The\nlineno\nand\ncol_offset\nattributes of the AST for\ndecorated function and class refer now to the position of the\ncorresponding\ndef\n,\nasync\ndef\nand\nclass\ninstead of the position\nof the first decorator. This leads to more correct line reporting in\ntracing. This is the only case when the position of child AST nodes can\nprecede the position of the parent AST node.\nbpo-34879\n: Fix a possible null pointer dereference in bytesobject.c.\nPatch by Zackery Spytz.\nbpo-34784\n: Fix the implementation of PyStructSequence_NewType in order to\ncreate heap allocated StructSequences.\nbpo-32912\n: A\nSyntaxWarning\nis now emitted instead of a\nDeprecationWarning\nfor invalid escape sequences in string and bytes\nliterals.\nbpo-34854\n: Fixed a crash in compiling string annotations containing a\nlambda with a keyword-only argument that doesn’t have a default value.\nbpo-34850\n: The compiler now produces a\nSyntaxWarning\nwhen identity\nchecks (\nis\nand\nis\nnot\n) are used with certain types of literals\n(e.g. strings, ints).  These can often work by accident in CPython, but\nare not guaranteed by the language spec.  The warning advises users to use\nequality tests (\n==\nand\n!=\n) instead.\nbpo-34824\n: Fix a possible null pointer dereference in Modules/_ssl.c.\nPatch by Zackery Spytz.\nbpo-30156\n: The C function\nproperty_descr_get()\nuses a “cached” tuple\nto optimize function calls. But this tuple can be discovered in debug mode\nwith\nsys.getobjects()\n. Remove the optimization, it’s not really\nworth it and it causes 3 different crashes last years.\nbpo-34762\n: Fix contextvars C API to use PyObject* pointer types.\nbpo-34751\n: The hash function for tuples is now based on xxHash which gives\nbetter collision results on (formerly) pathological cases. Additionally,\non 64-bit systems it improves tuple hashes in general. Patch by Jeroen\nDemeyer with substantial contributions by Tim Peters.\nbpo-34735\n: Fix a memory leak in Modules/timemodule.c.  Patch by Zackery\nSpytz.\nbpo-34683\n: Fixed a bug where some SyntaxError error pointed to locations\nthat were off-by-one.\nbpo-34651\n: Only allow the main interpreter to fork.  The avoids the\npossibility of affecting the main interpreter, which is critical to\noperation of the runtime.\nbpo-34653\n: Remove unused function PyParser_SimpleParseStringFilename.\nbpo-32236\n: Warn that line buffering is not supported if\nopen()\nis\ncalled with binary mode and\nbuffering=1\n.\nbpo-34641\n: Further restrict the syntax of the left-hand side of keyword\narguments in function calls. In particular,\nf((keyword)=arg)\nis now\ndisallowed.\nbpo-34637\n: Make the\nstart\nargument to\nsum()\nvisible as a keyword\nargument.\nbpo-1621\n: Do not assume signed integer overflow behavior (C undefined\nbehavior) when performing set hash table resizing.\nbpo-34588\n: Fix an off-by-one in the recursive call pruning feature of\ntraceback formatting.\nbpo-34485\n: On Windows, the LC_CTYPE is now set to the user preferred\nlocale at startup. Previously, the LC_CTYPE locale was “C” at startup, but\nchanged when calling setlocale(LC_CTYPE, “”) or setlocale(LC_ALL, “”).\nbpo-34485\n: Standard streams like sys.stdout now use the “surrogateescape”\nerror handler, instead of “strict”, on the POSIX locale (when the C locale\nis not coerced and the UTF-8 Mode is disabled).\nbpo-34485\n: Fix the error handler of standard streams like sys.stdout:\nPYTHONIOENCODING=”:” is now ignored instead of setting the error handler\nto “strict”.\nbpo-34485\n: Python now gets the locale encoding with C code to initialize\nthe encoding of standard streams like sys.stdout. Moreover, the encoding\nis now initialized to the Python codec name to get a normalized encoding\nname and to ensure that the codec is loaded. The change avoids importing\n_bootlocale and _locale modules at startup by default.\nbpo-34527\n: On FreeBSD, Py_DecodeLocale() and Py_EncodeLocale() now also\nforces the ASCII encoding if the LC_CTYPE locale is “POSIX”, not only if\nthe LC_CTYPE locale is “C”.\nbpo-34527\n: The UTF-8 Mode is now also enabled by the “POSIX” locale, not\nonly by the “C” locale.\nbpo-34403\n: On HP-UX with C or POSIX locale, sys.getfilesystemencoding()\nnow returns “ascii” instead of “roman8” (when the UTF-8 Mode is disabled\nand the C locale is not coerced).\nbpo-34523\n: The Python filesystem encoding is now read earlier during the\nPython initialization.\nbpo-12458\n: Tracebacks show now correct line number for subexpressions in\nmultiline expressions. Tracebacks show now the line number of the first\nline for multiline expressions instead of the line number of the last\nsubexpression.\nbpo-34408\n: Prevent a null pointer dereference and resource leakage in\nPyInterpreterState_New()\n.\nbpo-34400\n: Fix undefined behavior in parsetok.c.  Patch by Zackery Spytz.\nbpo-33073\n: Added as_integer_ratio to ints to make them more interoperable\nwith floats.\nbpo-34377\n: Update valgrind suppression list to use\n_PyObject_Free\n/\n_PyObject_Realloc\ninstead of\nPyObject_Free\n/\nPyObject_Realloc\n.\nbpo-34353\n: Added the “socket” option in the\nstat.filemode()\nPython\nimplementation to match the C implementation.\nbpo-34320\n: Fix\ndict(od)\ndidn’t copy iteration order of OrderedDict.\nbpo-34113\n: Fixed crash on debug builds when opcode stack was adjusted with\nnegative numbers. Patch by Constantin Petrisor.\nbpo-34100\n: Compiler now merges constants in tuples and frozensets\nrecursively. Code attributes like\nco_names\nare merged too.\nbpo-34151\n: Performance of list concatenation, repetition and slicing\noperations is slightly improved. Patch by Sergey Fedoseev.\nbpo-34170\n: -X dev: it is now possible to override the memory allocator\nusing PYTHONMALLOC even if the developer mode is enabled.\nbpo-33237\n: Improved\nAttributeError\nmessage for partially\ninitialized module.\nbpo-34149\n: Fix min and max functions to get default behavior when key is\nNone.\nbpo-34125\n: Profiling of unbound built-in methods now works when\n**kwargs\nis given.\nbpo-34141\n: Optimized pickling atomic types (None, bool, int, float, bytes,\nstr).\nbpo-34126\n: Fix crashes when profiling certain invalid calls of unbound\nmethods. Patch by Jeroen Demeyer.\nbpo-24618\n: Fixed reading invalid memory when create the code object with\ntoo small varnames tuple or too large argument counts.\nbpo-34068\n: In\nio.IOBase.close()\n, ensure that the\nclosed\nattribute is not set with a live exception.\nPatch by Zackery Spytz and Serhiy Storchaka.\nbpo-34087\n: Fix buffer overflow while converting unicode to numeric values.\nbpo-34080\n: Fixed a memory leak in the compiler when it raised some\nuncommon errors during tokenizing.\nbpo-34066\n: Disabled interruption by Ctrl-C between calling\nopen()\nand\nentering a\nwith\nblock in\nwith\nopen()\n.\nbpo-34042\n: Fix dict.copy() to maintain correct total refcount (as reported\nby sys.gettotalrefcount()).\nbpo-33418\n: Fix potential memory leak in function object when it creates\nreference cycle.\nbpo-33985\n: Implement contextvars.ContextVar.name attribute.\nbpo-33956\n: Update vendored Expat library copy to version 2.2.5.\nbpo-24596\n: Decref the module object in\nPyRun_SimpleFileExFlags()\nbefore calling\nPyErr_Print()\n.  Patch by Zackery Spytz.\nbpo-33451\n: Close directly executed pyc files before calling\nPyEval_EvalCode()\n.\nbpo-1617161\n: The hash of\nBuiltinMethodType\ninstances (methods of\nbuilt-in classes) now depends on the hash of the identity of\n__self__\ninstead of its value. The hash and equality of\nModuleType\nand\nMethodWrapperType\ninstances (methods of user-defined classes and\nsome methods of built-in classes like\nstr.__add__\n) now depend on the\nhash and equality of the identity of\n__self__\ninstead of its value.\nMethodWrapperType\ninstances no longer support ordering.\nbpo-33824\n: Fix “LC_ALL=C python3.7 -V”: reset properly the command line\nparser when the encoding changes after reading the Python configuration.\nbpo-33803\n: Fix a crash in hamt.c caused by enabling GC tracking for an\nobject that hadn’t all of its fields set to NULL.\nbpo-33738\n: Seven macro incompatibilities with the Limited API were fixed,\nand the macros\nPyIter_Check()\n,\nPyIndex_Check()\nand\nPyExceptionClass_Name()\nwere added as functions. A script for\nautomatic macro checks was added.\nbpo-33786\n: Fix asynchronous generators to handle GeneratorExit in athrow()\ncorrectly\nbpo-30167\n:\nPyRun_SimpleFileExFlags\nremoves\n__cached__\nfrom module\nin addition to\n__file__\n.\nbpo-33706\n: Fix a crash in Python initialization when parsing the command\nline options. Thanks Christoph Gohlke for the bug report and the fix!\nbpo-33597\n: Reduce\nPyGC_Head\nsize from 3 words to 2 words.\nbpo-30654\n: Fixed reset of the SIGINT handler to SIG_DFL on interpreter\nshutdown even when there was a custom handler set previously. Patch by\nPhilipp Kerling.\nbpo-33622\n: Fixed a leak when the garbage collector fails to add an object\nwith the\n__del__\nmethod or referenced by it into the\ngc.garbage\nlist.\nPyGC_Collect()\ncan now be called when an\nexception is set and preserves it.\nbpo-33462\n: Make dict and dict views reversible. Patch by Rémi Lapeyre.\nbpo-23722\n: A\nRuntimeError\nis now raised when the custom metaclass\ndoesn’t provide the\n__classcell__\nentry in the namespace passed to\ntype.__new__\n.  A\nDeprecationWarning\nwas emitted in Python\n3.6–3.7.\nbpo-33499\n: Add\nPYTHONPYCACHEPREFIX\nenvironment variable and\n-X\npycache_prefix\ncommand-line option to set an alternate\nroot directory for writing module bytecode cache files.\nbpo-25711\n: The\nzipimport\nmodule has been rewritten in pure Python.\nbpo-33509\n: Fix module_globals parameter of warnings.warn_explicit(): don’t\ncrash if module_globals is not a dict.\nbpo-31849\n: Fix signed/unsigned comparison warning in pyhash.c.\nbpo-33475\n: Fixed miscellaneous bugs in converting annotations to strings\nand optimized parentheses in the string representation.\nbpo-20104\n: Added support for the\nsetpgroup\n,\nresetids\n,\nsetsigmask\n,\nsetsigdef\nand\nscheduler\nparameters of\nposix_spawn\n. Patch by Pablo Galindo.\nbpo-33391\n: Fix a leak in set_symmetric_difference().\nbpo-33363\n: Raise a SyntaxError for\nasync\nwith\nand\nasync\nfor\nstatements outside of async functions.\nbpo-28055\n: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.\nbpo-33128\n: Fix a bug that causes PathFinder to appear twice on\nsys.meta_path. Patch by Pablo Galindo Salgado.\nbpo-33331\n: Modules imported last are now cleared first at interpreter\nshutdown.\nbpo-33312\n: Fixed clang ubsan (undefined behavior sanitizer) warnings in\ndictobject.c by adjusting how the internal struct _dictkeysobject shared\nkeys structure is declared.\nbpo-33305\n: Improved syntax error messages for invalid numerical literals.\nbpo-33306\n: Improved syntax error messages for unbalanced parentheses.\nbpo-33234\n: The list constructor will pre-size and not over-allocate when\nthe input length is known.\nbpo-33270\n: Intern the names for all anonymous code objects.  Patch by\nZackery Spytz.\nbpo-30455\n: The C and Python code and the documentation related to tokens\nare now generated from a single source file\nGrammar/Tokens\n.\nbpo-33176\n: Add a\ntoreadonly()\nmethod to memoryviews.\nbpo-33231\n: Fix potential memory leak in\nnormalizestring()\n.\nbpo-33205\n: Change dict growth function from\nround_up_to_power_2(used*2+hashtable_size/2)\nto\nround_up_to_power_2(used*3)\n.  Previously, dict is shrinked only when\nused\n==\n0\n. Now dict has more chance to be shrinked.\nbpo-29922\n: Improved error messages in ‘async with’ when\n__aenter__()\nor\n__aexit__()\nreturn non-awaitable object.\nbpo-33199\n: Fix\nma_version_tag\nin dict implementation is uninitialized\nwhen copying from key-sharing dict.\nbpo-33053\n: When using the -m switch, sys.path[0] is now explicitly\nexpanded as the\nstarting\nworking directory, rather than being left as\nthe empty path (which allows imports from the current working directory at\nthe time of the import)\nbpo-33138\n: Changed standard error message for non-pickleable and\nnon-copyable types. It now says “cannot pickle” instead of “can’t pickle”\nor “cannot serialize”.\nbpo-33018\n: Improve consistency of errors raised by\nissubclass()\nwhen\ncalled with a non-class and an abstract base class as the first and second\narguments, respectively. Patch by Josh Bronson.\nbpo-33083\n:\nmath.factorial\nno longer accepts arguments that are not\nint-like. Patch by Pablo Galindo.\nbpo-33041\n: Added new opcode\nEND_ASYNC_FOR\nand fixes the\nfollowing issues:\nSetting global\nStopAsyncIteration\nno longer breaks\nasync\nfor\nloops.\nJumping into an\nasync\nfor\nloop is now disabled.\nJumping out of an\nasync\nfor\nloop no longer corrupts the stack.\nbpo-25750\n: Fix rare Python crash due to bad refcounting in\ntype_getattro()\nif a descriptor deletes itself from the class. Patch\nby Jeroen Demeyer.\nbpo-33041\n: Fixed bytecode generation for “async for” with a complex\ntarget. A StopAsyncIteration raised on assigning or unpacking will be now\npropagated instead of stopping the iteration.\nbpo-33026\n: Fixed jumping out of “with” block by setting f_lineno.\nbpo-33005\n: Fix a crash on fork when using a custom memory allocator (ex:\nusing PYTHONMALLOC env var). _PyGILState_Reinit() and\n_PyInterpreterState_Enable() now use the default RAW memory allocator to\nallocate a new interpreters mutex on fork.\nbpo-32911\n: Due to unexpected compatibility issues discovered during\ndownstream beta testing, reverted\nbpo-29463\n.\ndocstring\nfield is\nremoved from Module, ClassDef, FunctionDef, and AsyncFunctionDef ast nodes\nwhich was added in 3.7a1.  Docstring expression is restored as a first\nstatement in their body. Based on patch by Inada Naoki.\nbpo-17288\n: Prevent jumps from ‘return’ and ‘exception’ trace events.\nbpo-32946\n: Importing names from already imported module with “from …\nimport …” is now 30% faster if the module is not a package.\nbpo-32932\n: Make error message more revealing when there are non-str\nobjects in\n__all__\n.\nbpo-32925\n: Optimized iterating and containing test for literal lists\nconsisting of non-constants:\nx\nin\n[a,\nb]\nand\nfor\nx\nin\n[a,\nb]\n. The\ncase of all constant elements already was optimized.\nbpo-32889\n: Update Valgrind suppression list to account for the rename of\nPy_ADDRESS_IN_RANG\nto\naddress_in_range\n.\nbpo-32836\n: Don’t use temporary variables in cases of list/dict/set\ncomprehensions\nbpo-31356\n: Remove the new API added in\nbpo-31356\n(gc.ensure_disabled()\ncontext manager).\nbpo-32305\n: For namespace packages, ensure that both\n__file__\nand\n__spec__.origin\nare set to None.\nbpo-32303\n: Make sure\n__spec__.loader\nmatches\n__loader__\nfor\nnamespace packages.\nbpo-32711\n: Fix the warning messages for Python/ast_unparse.c. Patch by\nStéphane Wirtel\nbpo-32583\n: Fix possible crashing in builtin Unicode decoders caused by\nwrite out-of-bound errors when using customized decode error handlers.\nbpo-32489\n: A\ncontinue\nstatement is now allowed in the\nfinally\nclause.\nbpo-17611\n: Simplified the interpreter loop by moving the logic of\nunrolling the stack of blocks into the compiler. The compiler emits now\nexplicit instructions for adjusting the stack of values and calling the\ncleaning up code for\nbreak\n,\ncontinue\nand\nreturn\n.\nRemoved opcodes\nBREAK_LOOP\n,\nCONTINUE_LOOP\n,\nSETUP_LOOP\nand\nSETUP_EXCEPT\n. Added new opcodes\nROT_FOUR\n,\nBEGIN_FINALLY\nand\nCALL_FINALLY\nand\nPOP_FINALLY\n. Changed the behavior of\nEND_FINALLY\nand\nWITH_CLEANUP_START\n.\nbpo-32285\n: New function unicodedata.is_normalized, which can check whether\na string is in a specific normal form.\nbpo-10544\n: Yield expressions are now disallowed in comprehensions and\ngenerator expressions except the expression for the outermost iterable.\nbpo-32117\n: Iterable unpacking is now allowed without parentheses in yield\nand return statements, e.g.\nyield\n1,\n2,\n3,\n*rest\n. Thanks to David\nCuthbert for the change and Jordan Chapman for added tests.\nbpo-31902\n: Fix the\ncol_offset\nattribute for ast nodes\nast.AsyncFor\n,\nast.AsyncFunctionDef\n, and\nast.AsyncWith\n.\nPreviously,\ncol_offset\npointed to the keyword after\nasync\n.\nbpo-25862\n: Fix assertion failures in the\ntell()\nmethod of\nio.TextIOWrapper\n. Patch by Zackery Spytz.\nbpo-21983\n: Fix a crash in\nctypes.cast()\nin case the type argument is a\nctypes structured data type. Patch by Eryk Sun and Oren Milman.\nbpo-31577\n: Fix a crash in\nos.utime()\nin case of a bad ns argument.\nPatch by Oren Milman.\nbpo-29832\n: Remove references to ‘getsockaddrarg’ from various socket error\nmessages. Patch by Oren Milman.\nLibrary\n¶\nbpo-35845\n: Add ‘order’ parameter to memoryview.tobytes().\nbpo-35864\n: The _asdict() method for collections.namedtuple now returns a\nregular dict instead of an OrderedDict.\nbpo-35537\n: An ExitStack is now used internally within subprocess.Popen to\nclean up pipe file handles. No behavior change in normal operation. But if\nclosing one handle were ever to cause an exception, the others will now be\nclosed instead of leaked.  (patch by Giampaolo Rodola)\nbpo-35847\n: RISC-V needed the CTYPES_PASS_BY_REF_HACK.  Fixes ctypes\nStructure test_pass_by_value.\nbpo-35813\n: Shared memory submodule added to multiprocessing to avoid need\nfor serialization between processes\nbpo-35780\n: Fix lru_cache() errors arising in recursive, reentrant, or\nmulti-threaded code. These errors could result in orphan links and in the\ncache being trapped in a state with fewer than the specified maximum\nnumber of links. Fix handling of negative maxsize which should have been\ntreated as zero. Fix errors in toggling the “full” status flag. Fix\nmisordering of links when errors are encountered.  Sync-up the C code and\npure Python code for the space saving path in functions with a single\npositional argument. In this common case, the space overhead of an lru\ncache entry is reduced by almost half.  Fix counting of cache misses. In\nerror cases, the miss count was out of sync with the actual number of\ntimes the underlying user function was called.\nbpo-35537\n:\nos.posix_spawn()\nand\nos.posix_spawnp()\nnow have a\nsetsid\nparameter.\nbpo-23846\n:\nasyncio.ProactorEventLoop\nnow catches and logs send\nerrors when the self-pipe is full.\nbpo-34323\n:\nasyncio\n: Enhance\nIocpProactor.close()\nlog: wait 1\nsecond before the first log, then log every second. Log also the number of\nseconds since\nclose()\nwas called.\nbpo-35674\n: Add a new\nos.posix_spawnp()\nfunction. Patch by Joannah\nNanjekye.\nbpo-35733\n:\nast.Constant(boolean)\nno longer an instance of\nast.Num\n.  Patch by Anthony Sottile.\nbpo-35726\n: QueueHandler.prepare() now makes a copy of the record before\nmodifying and enqueueing it, to avoid affecting other handlers in the\nchain.\nbpo-35719\n: Sped up multi-argument\nmath\nfunctions atan2(),\ncopysign(), remainder() and hypot() by 1.3–2.5 times.\nbpo-35717\n: Fix KeyError exception raised when using enums and compile.\nPatch contributed by Rémi Lapeyre.\nbpo-35699\n: Fixed detection of Visual Studio Build Tools 2017 in distutils\nbpo-32710\n: Fix memory leaks in asyncio ProactorEventLoop on overlapped\noperation failure.\nbpo-35702\n: The\ntime.CLOCK_UPTIME_RAW\nconstant is now available\nfor macOS 10.12.\nbpo-32710\n: Fix a memory leak in asyncio in the ProactorEventLoop when\nReadFile()\nor\nWSASend()\noverlapped operation fail immediately:\nrelease the internal buffer.\nbpo-35682\n: Fix\nasyncio.ProactorEventLoop.sendfile()\n: don’t attempt to\nset the result of an internal future if it’s already done.\nbpo-35283\n: Add a deprecated warning for the\nthreading.Thread.isAlive()\nmethod. Patch by Donghee Na.\nbpo-35664\n: Improve operator.itemgetter() performance by 33% with optimized\nargument handling and with adding a fast path for the common case of a\nsingle non-negative integer index into a tuple (which is the typical use\ncase in the standard library).\nbpo-35643\n: Fixed a SyntaxWarning: invalid escape sequence in\nModules/_sha3/cleanup.py. Patch by Mickaël Schoentgen.\nbpo-35619\n: Improved support of custom data descriptors in\nhelp()\nand\npydoc\n.\nbpo-28503\n: The\ncrypt\nmodule now internally uses the\ncrypt_r()\nlibrary function instead of\ncrypt()\nwhen available.\nbpo-35614\n: Fixed help() on metaclasses. Patch by Sanyam Khurana.\nbpo-35568\n: Expose\nraise(signum)\nas\nraise_signal\nbpo-35588\n: The floor division and modulo operations and the\ndivmod()\nfunction on\nfractions.Fraction\ntypes are 2–4x faster. Patch by\nStefan Behnel.\nbpo-35585\n: Speed-up building enums by value, e.g. http.HTTPStatus(200).\nbpo-30561\n: random.gammavariate(1.0, beta) now computes the same result as\nrandom.expovariate(1.0 / beta).  This synchronizes the two algorithms and\neliminates some idiosyncrasies in the old implementation.  It does however\nproduce a difference stream of random variables than it used to.\nbpo-35537\n: The\nsubprocess\nmodule can now use the\nos.posix_spawn()\nfunction in some cases for better performance.\nbpo-35526\n: Delaying the ‘joke’ of barry_as_FLUFL.mandatory to Python\nversion 4.0\nbpo-35523\n: Remove\nctypes\ncallback workaround: no longer create a\ncallback at startup. Avoid SELinux alert on\nimport\nctypes\nand\nimport\nuuid\n.\nbpo-31784\n:\nuuid.uuid1()\nnow calls\ntime.time_ns()\nrather than\nint(time.time()\n*\n1e9)\n.\nbpo-35513\n:\nTextTestRunner\nof\nunittest.runner\nnow uses\ntime.perf_counter()\nrather than\ntime.time()\nto measure the execution time of a test:\ntime.time()\ncan go backwards, whereas\ntime.perf_counter()\nis\nmonotonic.\nbpo-35502\n: Fixed reference leaks in\nxml.etree.ElementTree.TreeBuilder\nin case of unfinished building\nof the tree (in particular when an error was raised during parsing XML).\nbpo-35348\n: Make\nplatform.architecture()\nparsing of\nfile\ncommand\noutput more reliable: add the\n-b\noption to the\nfile\ncommand to\nomit the filename, force the usage of the C locale, and search also the\n“shared object” pattern.\nbpo-35491\n:\nmultiprocessing\n: Add\nPool.__repr__()\nand enhance\nBaseProcess.__repr__()\n(add pid and parent pid) to ease debugging.\nPool state constant values are now strings instead of integers, for\nexample\nRUN\nvalue becomes\n'RUN'\ninstead of\n0\n.\nbpo-35477\n:\nmultiprocessing.Pool.__enter__()\nnow fails if the pool is\nnot running:\nwith\npool:\nfails if used more than once.\nbpo-31446\n: Copy command line that was passed to CreateProcessW since this\nfunction can change the content of the input buffer.\nbpo-35471\n: Python 2.4 dropped MacOS 9 support. The macpath module was\ndeprecated in Python 3.7. The module is now removed.\nbpo-23057\n: Unblock Proactor event loop when keyboard interrupt is received\non Windows\nbpo-35052\n: Fix xml.dom.minidom cloneNode() on a document with an entity:\npass the correct arguments to the user data handler of an entity.\nbpo-20239\n: Allow repeated assignment deletion of\nunittest.mock.Mock\nattributes. Patch by Pablo Galindo.\nbpo-17185\n: Set\n__signature__\non mock for\ninspect\nto get\nsignature. Patch by Karthikeyan Singaravelan.\nbpo-35445\n: Memory errors during creating posix.environ no longer ignored.\nbpo-35415\n: Validate fileno= argument to socket.socket().\nbpo-35424\n:\nmultiprocessing.Pool\ndestructor now emits\nResourceWarning\nif the pool is still running.\nbpo-35330\n: When a\nMock\ninstance was used to wrap an object, if\nside_effect\nis used in one of the mocks of it methods, don’t call the\noriginal implementation and return the result of using the side effect the\nsame way that it is done with return_value.\nbpo-35346\n: Drop Mac OS 9 and Rhapsody support from the\nplatform\nmodule. Rhapsody last release was in 2000. Mac OS 9 last release was in\n2001.\nbpo-10496\n:\ncheck_environ()\nof\ndistutils.utils\nnow catches\nKeyError\non calling\npwd.getpwuid()\n: don’t create\nthe\nHOME\nenvironment variable in this case.\nbpo-10496\n:\nposixpath.expanduser()\nnow returns the input\npath\nunchanged if the\nHOME\nenvironment variable is not set and the current\nuser has no home directory (if the current user identifier doesn’t exist\nin the password database). This change fix the\nsite\nmodule if the\ncurrent user doesn’t exist in the password database (if the user has no\nhome directory).\nbpo-35389\n:\nplatform.libc_ver()\nnow uses\nos.confstr('CS_GNU_LIBC_VERSION')\nif available and the\nexecutable\nparameter is not set.\nbpo-35394\n: Add empty slots to asyncio abstract protocols.\nbpo-35310\n: Fix a bug in\nselect.select()\nwhere, in some cases, the\nfile descriptor sequences were returned unmodified after a signal\ninterruption, even though the file descriptors might not be ready yet.\nselect.select()\nwill now always return empty lists if a timeout has\noccurred.  Patch by Oran Avraham.\nbpo-35380\n: Enable TCP_NODELAY on Windows for proactor asyncio event loop.\nbpo-35341\n: Add generic version of\ncollections.OrderedDict\nto the\ntyping\nmodule. Patch by Ismo Toijala.\nbpo-35371\n: Fixed possible crash in\nos.utime()\non Windows when pass\nincorrect arguments.\nbpo-35346\n:\nplatform.uname()\nnow redirects\nstderr\nto\nos.devnull\nwhen running external programs like\ncmd\n/c\nver\n.\nbpo-35066\n: Previously, calling the strftime() method on a datetime object\nwith a trailing ‘%’ in the format string would result in an exception.\nHowever, this only occurred when the datetime C module was being used; the\npython implementation did not match this behavior. Datetime is now PEP-399\ncompliant, and will not throw an exception on a trailing ‘%’.\nbpo-35345\n: The function\nplatform.popen\nhas been removed, it was\ndeprecated since Python 3.3: use\nos.popen()\ninstead.\nbpo-35344\n: On macOS,\nplatform.platform()\nnow uses\nplatform.mac_ver()\n, if it returns a non-empty release string, to get\nthe macOS version rather than the darwin version.\nbpo-35312\n: Make\nlib2to3.pgen2.parse.ParseError\nround-trip pickle-able.\nPatch by Anthony Sottile.\nbpo-35308\n: Fix regression in\nwebbrowser\nwhere default browsers may be\npreferred over browsers in the\nBROWSER\nenvironment variable.\nbpo-24746\n: Avoid stripping trailing whitespace in doctest fancy diff.\nOriginal patch by R. David Murray & Jairo Trad. Enhanced by Sanyam\nKhurana.\nbpo-28604\n:\nlocale.localeconv()\nnow sets temporarily the\nLC_CTYPE\nlocale to the\nLC_MONETARY\nlocale if the two locales are different and\nmonetary strings are non-ASCII. This temporary change affects other\nthreads.\nbpo-35277\n: Update ensurepip to install pip 18.1 and setuptools 40.6.2.\nbpo-24209\n: Adds IPv6 support when invoking http.server directly.\nbpo-35226\n: Recursively check arguments when testing for equality of\nunittest.mock.call\nobjects and add note that tracking of\nparameters used to create ancestors of mocks in\nmock_calls\nis not\npossible.\nbpo-29564\n: The warnings module now suggests to enable tracemalloc if the\nsource is specified, the tracemalloc module is available, but tracemalloc\nis not tracing memory allocations.\nbpo-35189\n: Modify the following fnctl function to retry if interrupted by\na signal (EINTR): flock, lockf, fnctl\nbpo-30064\n: Use add_done_callback() in sock_* asyncio API to unsubscribe\nreader/writer early on calcellation.\nbpo-35186\n: Removed the “built with” comment added when\nsetup.py\nupload\nis used with either\nbdist_rpm\nor\nbdist_dumb\n.\nbpo-35152\n: Allow sending more than 2 GB at once on a multiprocessing\nconnection on non-Windows systems.\nbpo-35062\n: Fix incorrect parsing of\nio.IncrementalNewlineDecoder\n’s\ntranslate\nargument.\nbpo-35065\n: Remove\nStreamReaderProtocol._untrack_reader\n. The call to\n_untrack_reader\nis currently performed too soon, causing the protocol\nto forget about the reader before\nconnection_lost\ncan run and feed the\nEOF to the reader.\nbpo-34160\n: ElementTree and minidom now preserve the attribute order\nspecified by the user.\nbpo-35079\n: Improve difflib.SequenceManager.get_matching_blocks doc by\nadding ‘non-overlapping’ and changing ‘!=’ to ‘<’.\nbpo-33710\n: Deprecated\nl*gettext()\nfunctions and methods in the\ngettext\nmodule. They return encoded bytes instead of Unicode\nstrings and are artifacts from Python 2 times. Also deprecated functions\nand methods related to setting the charset for\nl*gettext()\nfunctions\nand methods.\nbpo-35017\n:\nsocketserver.BaseServer.serve_forever()\nnow exits\nimmediately if it’s\nshutdown()\nmethod is\ncalled while it is polling for new events.\nbpo-35024\n:\nimportlib\nno longer logs\nwrote\n<bytecode\npath>\nredundantly after\n(created|could\nnot\ncreate)\n<bytecode\npath>\nis\nalready logged. Patch by Quentin Agren.\nbpo-35047\n:\nunittest.mock\nnow includes mock calls in exception messages\nif\nassert_not_called\n,\nassert_called_once\n, or\nassert_called_once_with\nfails. Patch by Petter Strandmark.\nbpo-31047\n: Fix\nntpath.abspath\nregression where it didn’t remove a\ntrailing separator on Windows. Patch by Tim Graham.\nbpo-35053\n: tracemalloc now tries to update the traceback when an object is\nreused from a “free list” (optimization for faster object creation, used\nby the builtin list type for example).\nbpo-31553\n: Add the –json-lines option to json.tool. Patch by hongweipeng.\nbpo-34794\n: Fixed a leak in Tkinter when pass the Python wrapper around\nTcl_Obj back to Tcl/Tk.\nbpo-34909\n: Enum: fix grandchildren subclassing when parent mixed with\nconcrete data types.\nbpo-35022\n:\nunittest.mock.MagicMock\nnow supports the\n__fspath__\nmethod (from\nos.PathLike\n).\nbpo-35008\n: Fixed references leaks when call the\n__setstate__()\nmethod\nof\nxml.etree.ElementTree.Element\nin the C implementation for\nalready initialized element.\nbpo-23420\n: Verify the value for the parameter ‘-s’ of the cProfile CLI.\nPatch by Robert Kuska\nbpo-33947\n: dataclasses now handle recursive reprs without raising\nRecursionError.\nbpo-34890\n: Make\ninspect.iscoroutinefunction()\n,\ninspect.isgeneratorfunction()\nand\ninspect.isasyncgenfunction()\nwork with\nfunctools.partial()\n. Patch by Pablo Galindo.\nbpo-34521\n: Use\nsocket.CMSG_SPACE()\nto calculate ancillary data size\ninstead of\nsocket.CMSG_LEN()\nin\nmultiprocessing.reduction.recvfds()\nas\nRFC 3542\nrequires the use\nof the former for portable applications.\nbpo-31522\n: The\nmailbox.mbox.get_string\nfunction\nfrom_\nparameter can\nnow successfully be set to a non-default value.\nbpo-34970\n: Protect tasks weak set manipulation in\nasyncio.all_tasks()\nbpo-34969\n: gzip: Add –fast, –best on the gzip CLI, these parameters will\nbe used for the fast compression method (quick) or the best method\ncompress (slower, but smaller file). Also, change the default compression\nlevel to 6 (tradeoff).\nbpo-16965\n: The 2to3\nexecfile\nfixer now opens the file with mode\n'rb'\n.  Patch by Zackery Spytz.\nbpo-34966\n:\npydoc\nnow supports aliases not only to methods defined\nin the end class, but also to inherited methods.  The docstring is not\nduplicated for aliases.\nbpo-34926\n:\nmimetypes.MimeTypes.guess_type()\nnow accepts\npath-like object\nin addition to url strings. Patch by Mayank\nAsthana.\nbpo-23831\n: Add\nmoveto()\nmethod to the\ntkinter.Canvas\nwidget. Patch\nby Juliette Monsel.\nbpo-34941\n: Methods\nfind()\n,\nfindtext()\nand\nfindall()\nof the\nElement\nclass in the\nxml.etree.ElementTree\nmodule are now able\nto find children which are instances of\nElement\nsubclasses.\nbpo-32680\n:\nsmtplib.SMTP\nobjects now always have a\nsock\nattribute present\nbpo-34769\n: Fix for async generators not finalizing when event loop is in\ndebug mode and garbage collector runs in another thread.\nbpo-34936\n: Fix\nTclError\nin\ntkinter.Spinbox.selection_element()\n.\nPatch by Juliette Monsel.\nbpo-34829\n: Add methods\nselection_from\n,\nselection_range\n,\nselection_present\nand\nselection_to\nto the\ntkinter.Spinbox\nfor\nconsistency with the\ntkinter.Entry\nwidget. Patch by Juliette Monsel.\nbpo-34911\n: Added\nsecure_protocols\nargument to\nhttp.cookiejar.DefaultCookiePolicy\nto allow for tweaking of protocols\nand also to add support by default for\nwss\n, the secure websocket\nprotocol.\nbpo-34922\n: Fixed integer overflow in the\ndigest()\nand\nhexdigest()\nmethods for the SHAKE algorithm in the\nhashlib\nmodule.\nbpo-34925\n: 25% speedup in argument parsing for the functions in the bisect\nmodule.\nbpo-34900\n: Fixed\nunittest.TestCase.debug()\nwhen used to call test\nmethods with subtests.  Patch by Bruno Oliveira.\nbpo-34844\n: logging.Formatter enhancement - Ensure styles and fmt matches\nin logging.Formatter - Added validate method in each format style class:\nStrFormatStyle, PercentStyle, StringTemplateStyle. - This method is called\nin the constructor of logging.Formatter class - Also re-raise the KeyError\nin the format method of each style class, so it would a bit clear that\nit’s an error with the invalid format fields.\nbpo-34897\n: Adjust test.support.missing_compiler_executable check so that a\nnominal command name of “” is ignored. Patch by Michael Felt.\nbpo-34871\n: Fix inspect module polluted\nsys.modules\nwhen parsing\n__text_signature__\nof callable.\nbpo-34898\n: Add\nmtime\nargument to\ngzip.compress\nfor reproducible\noutput. Patch by Guo Ci Teo.\nbpo-28441\n: On Cygwin and MinGW, ensure that\nsys.executable\nalways\nincludes the full filename in the path, including the\n.exe\nsuffix\n(unless it is a symbolic link).\nbpo-34866\n: Adding\nmax_num_fields\nto\ncgi.FieldStorage\nto make DOS\nattacks harder by limiting the number of\nMiniFieldStorage\nobjects\ncreated by\nFieldStorage\n.\nbpo-34711\n: http.server ensures it reports HTTPStatus.NOT_FOUND when the\nlocal path ends with “/” and is not a directory, even if the underlying OS\n(e.g. AIX) accepts such paths as a valid file reference. Patch by Michael\nFelt.\nbpo-34872\n: Fix self-cancellation in C implementation of asyncio.Task\nbpo-34849\n: Don’t log waiting for\nselector.select\nin asyncio loop\niteration. The waiting is pretty normal for any asyncio program, logging\nits time just adds a noise to logs without any useful information\nprovided.\nbpo-34022\n: The\nSOURCE_DATE_EPOCH\nenvironment variable no longer\noverrides the value of the\ninvalidation_mode\nargument to\npy_compile.compile()\n, and determines its default value instead.\nbpo-34819\n: Use a monotonic clock to compute timeouts in\nExecutor.map()\nand\nas_completed()\n, in order to prevent\ntimeouts from deviating when the system clock is adjusted.\nbpo-34758\n: Add .wasm -> application/wasm to list of recognized file types\nand content type headers\nbpo-34789\n:\nxml.sax.make_parser()\nnow accepts any iterable as its\nparser_list\nargument.  Patch by Andrés Delfino.\nbpo-34334\n: In\nQueueHandler\n, clear\nexc_text\nfrom\nLogRecord\nto prevent traceback from being written twice.\nbpo-34687\n: On Windows, asyncio now uses ProactorEventLoop, instead of\nSelectorEventLoop, by default.\nbpo-5950\n: Support reading zip files with archive comments in\nzipimport\n.\nbpo-32892\n: The parser now represents all constants as\nast.Constant\ninstead of using specific constant AST types\n(\nNum\n,\nStr\n,\nBytes\n,\nNameConstant\nand\nEllipsis\n). These\nclasses are considered deprecated and will be removed in future Python\nversions.\nbpo-34728\n: Add deprecation warning when\nloop\nis used in methods:\nasyncio.sleep\n,\nasyncio.wait\nand\nasyncio.wait_for\n.\nbpo-34738\n: ZIP files created by\ndistutils\nwill now include entries for\ndirectories.\nbpo-34659\n: Add an optional\ninitial\nargument to itertools.accumulate().\nbpo-29577\n: Support multiple mixin classes when creating Enums.\nbpo-34670\n: Add SSLContext.post_handshake_auth and\nSSLSocket.verify_client_post_handshake for TLS 1.3’s post handshake\nauthentication feature.\nbpo-32718\n: The Activate.ps1 script from venv works with PowerShell Core\n6.1 and is now available under all operating systems.\nbpo-31177\n: Fix bug that prevented using\nreset_mock\non mock instances with deleted attributes\nbpo-34672\n: Add a workaround, so the\n'Z'\ntime.strftime()\nspecifier on the musl C library can work in some cases.\nbpo-34666\n: Implement\nasyncio.StreamWriter.awrite\nand\nasyncio.StreamWriter.aclose()\ncoroutines.  Methods are needed for\nproviding a consistent stream API with control flow switched on by\ndefault.\nbpo-6721\n: Acquire the logging module’s commonly used internal locks while\nfork()ing to avoid deadlocks in the child process.\nbpo-34658\n: Fix a rare interpreter unhandled exception state SystemError\nonly seen when using subprocess with a preexec_fn while an after_parent\nhandler has been registered with os.register_at_fork and the fork system\ncall fails.\nbpo-34652\n: Ensure\nos.lchmod()\nis never defined on Linux.\nbpo-34638\n: Store a weak reference to stream reader to break strong\nreferences loop between reader and protocol.  It allows to detect and\nclose the socket if the stream is deleted (garbage collected) without\nclose()\ncall.\nbpo-34536\n:\nEnum._missing_\n:  raise\nValueError\nif None returned and\nTypeError\nif non-member is returned.\nbpo-34636\n: Speed up re scanning of many non-matching characters for s w\nand d within bytes objects. (microoptimization)\nbpo-24412\n: Add\naddModuleCleanup()\nand\naddClassCleanup()\nto unittest to support cleanups\nfor\nsetUpModule()\nand\nsetUpClass()\n. Patch by Lisa Roach.\nbpo-34630\n: Don’t log SSL certificate errors in asyncio code (connection\nerror logging is skipped already).\nbpo-32490\n: Prevent filename duplication in\nsubprocess\nexception\nmessages.  Patch by Zackery Spytz.\nbpo-34363\n: dataclasses.asdict() and .astuple() now handle namedtuples\ncorrectly.\nbpo-34625\n: Update vendorized expat library version to 2.2.6.\nbpo-32270\n: The subprocess module no longer mistakenly closes redirected\nfds even when they were in pass_fds when outside of the default {0, 1, 2}\nset.\nbpo-34622\n: Create a dedicated\nasyncio.CancelledError\n,\nasyncio.InvalidStateError\nand\nasyncio.TimeoutError\nexception\nclasses.  Inherit them from corresponding exceptions from\nconcurrent.futures\npackage. Extract\nasyncio\nexceptions into a\nseparate file.\nbpo-34610\n: Fixed iterator of\nmultiprocessing.managers.DictProxy\n.\nbpo-34421\n: Fix distutils logging for non-ASCII strings.  This caused\ninstallation issues on Windows.\nbpo-34604\n: Fix possible mojibake in the error message of\npwd.getpwnam\nand\ngrp.getgrnam\nusing string representation because of invisible\ncharacters or trailing whitespaces. Patch by William Grzybowski.\nbpo-30977\n: Make uuid.UUID use\n__slots__\nto reduce its memory\nfootprint. Based on original patch by Wouter Bolsterlee.\nbpo-34574\n: OrderedDict iterators are not exhausted during pickling\nanymore. Patch by Sergey Fedoseev.\nbpo-8110\n: Refactored\nsubprocess\nto check for Windows-specific\nmodules rather than\nsys.platform\n==\n'win32'\n.\nbpo-34530\n:\ndistutils.spawn.find_executable()\nnow falls back on\nos.defpath\nif the\nPATH\nenvironment variable is not set.\nbpo-34563\n: On Windows, fix multiprocessing.Connection for very large read:\nfix _winapi.PeekNamedPipe() and _winapi.ReadFile() for read larger than\nINT_MAX (usually\n2**31-1\n).\nbpo-34558\n: Correct typo in Lib/ctypes/_aix.py\nbpo-34282\n: Move\nEnum._convert\nto\nEnumMeta._convert_\nand fix enum\nmembers getting shadowed by parent attributes.\nbpo-22872\n: When the queue is closed,\nValueError\nis now raised by\nmultiprocessing.Queue.put()\nand\nmultiprocessing.Queue.get()\ninstead of\nAssertionError\nand\nOSError\n, respectively. Patch\nby Zackery Spytz.\nbpo-34515\n: Fix parsing non-ASCII identifiers in\nlib2to3.pgen2.tokenize\n(\nPEP 3131\n).\nbpo-13312\n: Avoids a possible integer underflow (undefined behavior) in the\ntime module’s year handling code when passed a very low negative year\nvalue.\nbpo-34472\n: Improved compatibility for streamed files in\nzipfile\n.\nPreviously an optional signature was not being written and certain ZIP\napplications were not supported. Patch by Silas Sewell.\nbpo-34454\n: Fix the .fromisoformat() methods of datetime types crashing\nwhen given unicode with non-UTF-8-encodable code points.  Specifically,\ndatetime.fromisoformat() now accepts surrogate unicode code points used as\nthe separator. Report and tests by Alexey Izbyshev, patch by Paul Ganssle.\nbpo-6700\n: Fix inspect.getsourcelines for module level frames/tracebacks.\nPatch by Vladimir Matveev.\nbpo-34171\n: Running the\ntrace\nmodule no longer creates the\ntrace.cover\nfile.\nbpo-34441\n: Fix crash when an\nABC\n-derived class with invalid\n__subclasses__\nis passed as the second argument to\nissubclass()\n.\nPatch by Alexey Izbyshev.\nbpo-34427\n: Fix infinite loop in\na.extend(a)\nfor\nMutableSequence\nsubclasses.\nbpo-34412\n: Make\nsignal.strsignal()\nwork on HP-UX. Patch by Michael\nOsipov.\nbpo-20849\n: shutil.copytree now accepts a new\ndirs_exist_ok\nkeyword\nargument. Patch by Josh Bronson.\nbpo-31715\n: Associate\n.mjs\nfile extension with\napplication/javascript\nMIME Type.\nbpo-34384\n:\nos.readlink()\nnow accepts\npath-like\nand\nbytes\nobjects on Windows.\nbpo-22602\n: The UTF-7 decoder now raises\nUnicodeDecodeError\nfor\nill-formed sequences starting with “+” (as specified in RFC 2152).  Patch\nby Zackery Spytz.\nbpo-2122\n: The\nmmap.flush()\nmethod now returns\nNone\non success, raises an exception on error under all platforms.\nbpo-34341\n: Appending to the ZIP archive with the ZIP64 extension no longer\ngrows the size of extra fields of existing entries.\nbpo-34333\n: Fix %-formatting in\npathlib.PurePath.with_suffix()\nwhen\nformatting an error message.\nbpo-18540\n: The\nimaplib.IMAP4\nand\nimaplib.IMAP4_SSL\nclasses now resolve to the local host IP correctly when the default value\nof\nhost\nparameter (\n''\n) is used.\nbpo-26502\n: Implement\ntraceback.FrameSummary.__len__()\nmethod to\npreserve compatibility with the old tuple API.\nbpo-34318\n:\nassertRaises()\n,\nassertRaisesRegex()\n,\nassertWarns()\nand\nassertWarnsRegex()\nno longer success if the\npassed callable is None. They no longer ignore unknown keyword arguments\nin the context manager mode. A DeprecationWarning was raised in these\ncases since Python 3.5.\nbpo-9372\n: Deprecate\n__getitem__()\nmethods of\nxml.dom.pulldom.DOMEventStream\n,\nwsgiref.util.FileWrapper\nand\nfileinput.FileInput\n.\nbpo-33613\n: Fix a race condition in\nmultiprocessing.semaphore_tracker\nwhen the tracker receives SIGINT before it can register signal handlers\nfor ignoring it.\nbpo-34248\n: Report filename in the exception raised when the database file\ncannot be opened by\ndbm.gnu.open()\nand\ndbm.ndbm.open()\ndue to\nOS-related error. Patch by Zsolt Cserna.\nbpo-33089\n: Add math.dist() to compute the Euclidean distance between two\npoints.\nbpo-34246\n:\nsmtplib.SMTP.send_message()\nno longer modifies the\ncontent of the\nmail_options\nargument. Patch by Pablo S. Blum de Aguiar.\nbpo-31047\n: Fix\nntpath.abspath\nfor invalid paths on windows. Patch by\nFranz Woellert.\nbpo-32321\n: Add pure Python fallback for functools.reduce. Patch by Robert\nWright.\nbpo-34270\n: The default asyncio task class now always has a name which can\nbe get or set using two new methods (\nget_name()\nand\nset_name()\n) and is visible in the\nrepr()\noutput.\nAn initial name can also be set using the new\nname\nkeyword argument to\nasyncio.create_task()\nor the\ncreate_task()\nmethod of the event loop.\nIf no initial name is set, the default Task implementation generates a\nname like\nTask-1\nusing a monotonic counter.\nbpo-34263\n: asyncio’s event loop will not pass timeouts longer than one day\nto epoll/select etc.\nbpo-34035\n: Fix several AttributeError in zipfile seek() methods. Patch by\nMickaël Schoentgen.\nbpo-32215\n: Fix performance regression in\nsqlite3\nwhen a DML\nstatement appeared in a different line than the rest of the SQL query.\nbpo-34075\n: Deprecate passing non-ThreadPoolExecutor instances to\nAbstractEventLoop.set_default_executor()\n.\nbpo-34251\n: Restore\nmsilib.Win64\nto preserve backwards compatibility\nsince it’s already used by\ndistutils\n’\nbdist_msi\ncommand.\nbpo-19891\n: Ignore errors caused by missing / non-writable homedir while\nwriting history during exit of an interactive session.  Patch by Anthony\nSottile.\nbpo-33089\n: Enhanced math.hypot() to support more than two dimensions.\nbpo-34228\n: tracemalloc: PYTHONTRACEMALLOC=0 environment variable and -X\ntracemalloc=0 command line option are now allowed to disable explicitly\ntracemalloc at startup.\nbpo-13041\n: Use\nshutil.get_terminal_size()\nto calculate the terminal\nwidth correctly in the\nargparse.HelpFormatter\nclass.  Initial patch by\nZbyszek Jędrzejewski-Szmek.\nbpo-34213\n: Allow frozen dataclasses to have a field named “object”.\nPreviously this conflicted with an internal use of “object”.\nbpo-34052\n:\nsqlite3.Connection.create_aggregate()\n,\nsqlite3.Connection.create_function()\n,\nsqlite3.Connection.set_authorizer()\n,\nsqlite3.Connection.set_progress_handler()\nmethods raises TypeError\nwhen unhashable objects are passed as callable. These methods now don’t\npass such objects to SQLite API. Previous behavior could lead to\nsegfaults. Patch by Sergey Fedoseev.\nbpo-34197\n: Attributes\nskipinitialspace\n,\ndoublequote\nand\nstrict\nof\nthe\ndialect\nattribute of the\ncsv\nreader are now\nbool\ninstances instead of integers 0 or 1.\nbpo-32788\n: Errors other than\nTypeError\nraised in methods\n__adapt__()\nand\n__conform__()\nin the\nsqlite3\nmodule are now\npropagated to the user.\nbpo-21446\n: The\nreload\nfixer now uses\nimportlib.reload()\ninstead\nof deprecated\nimp.reload()\n.\nbpo-940286\n: pydoc’s\nHelper.showtopic()\nmethod now prints the cross\nreferences of a topic correctly.\nbpo-34164\n:\nbase64.b32decode()\ncould raise UnboundLocalError or\nOverflowError for incorrect padding.  Now it always raises\nbase64.Error\nin these cases.\nbpo-33729\n: Fixed issues with arguments parsing in\nhashlib\n.\nbpo-34097\n: ZipFile can zip files older than 1980-01-01 and newer than\n2107-12-31 using a new\nstrict_timestamps\nparameter at the cost of\nsetting the timestamp to the limit.\nbpo-34108\n: Remove extraneous CR in 2to3 refactor.\nbpo-34070\n: Make sure to only check if the handle is a tty, when opening a\nfile with\nbuffering=-1\n.\nbpo-27494\n: Reverted\nbpo-27494\n. 2to3 rejects now a trailing comma in\ngenerator expressions.\nbpo-33967\n: functools.singledispatch now raises TypeError instead of\nIndexError when no positional arguments are passed.\nbpo-34041\n: Add the parameter\ndeterministic\nto the\nsqlite3.Connection.create_function()\nmethod. Patch by Sergey\nFedoseev.\nbpo-34056\n: Ensure the loader shim created by\nimp.load_module\nalways\nreturns bytes from its\nget_data()\nfunction. This fixes using\nimp.load_module\nwith\nPEP 552\nhash-based pycs.\nbpo-34054\n: The multiprocessing module now uses the monotonic clock\ntime.monotonic()\ninstead of the system clock\ntime.time()\nto\nimplement timeout.\nbpo-34043\n: Optimize tarfile uncompress performance about 15% when gzip is\nused.\nbpo-34044\n:\nsubprocess.Popen\nnow copies the\nstartupinfo\nargument to\nleave it unchanged: it will modify the copy, so that the same\nSTARTUPINFO\nobject can be used multiple times.\nbpo-34010\n: Fixed a performance regression for reading streams with\ntarfile. The buffered read should use a list, instead of appending to a\nbytes object.\nbpo-34019\n: webbrowser: Correct the arguments passed to Opera Browser when\nopening a new URL using the\nwebbrowser\nmodule. Patch by Bumsik Kim.\nbpo-34003\n: csv.DictReader now creates dicts instead of OrderedDicts. Patch\nby Michael Selik.\nbpo-33978\n: Closed existing logging handlers before reconfiguration via\nfileConfig and dictConfig. Patch by Karthikeyan Singaravelan.\nbpo-14117\n: Make minor tweaks to turtledemo. The ‘wikipedia’ example is now\n‘rosette’, describing what it draws.  The ‘penrose’ print output is\nreduced. The’1024’ output of ‘tree’ is eliminated.\nbpo-33974\n: Fixed passing lists and tuples of strings containing special\ncharacters\n\"\n,\n\\\n,\n{\n,\n}\nand\n\\n\nas options to\nttk\nwidgets.\nbpo-27500\n: Fix getaddrinfo to resolve IPv6 addresses correctly.\nbpo-24567\n: Improve random.choices() to handle subnormal input weights that\ncould occasionally trigger an IndexError.\nbpo-33871\n: Fixed integer overflow in\nos.readv()\n,\nos.writev()\n,\nos.preadv()\nand\nos.pwritev()\nand in\nos.sendfile()\nwith\nheaders\nor\ntrailers\narguments (on BSD-based OSes and macOS).\nbpo-25007\n: Add\ncopy.copy()\nand\ncopy.deepcopy()\nsupport to zlib\ncompressors and decompressors.  Patch by Zackery Spytz.\nbpo-33929\n: multiprocessing: Fix a race condition in Popen of\nmultiprocessing.popen_spawn_win32. The child process now duplicates the\nread end of pipe instead of “stealing” it. Previously, the read end of\npipe was “stolen” by the child process, but it leaked a handle if the\nchild process had been terminated before it could steal the handle from\nthe parent process.\nbpo-33899\n: Tokenize module now implicitly emits a NEWLINE when provided\nwith input that does not have a trailing new line.  This behavior now\nmatches what the C tokenizer does internally.  Contributed by Ammar Askar.\nbpo-33897\n: Added a ‘force’ keyword argument to logging.basicConfig().\nbpo-33695\n:\nshutil.copytree()\nuses\nos.scandir()\nfunction and\nall copy functions depending from it use cached\nos.stat()\nvalues.\nThe speedup for copying a directory with 8000 files is around +9% on\nLinux, +20% on Windows and + 30% on a Windows SMB share. Also the number\nof\nos.stat()\nsyscalls is reduced by 38% making\nshutil.copytree()\nespecially faster on network filesystems.\n(Contributed by Giampaolo Rodola’ in\nbpo-33695\n.)\nbpo-33916\n: bz2 and lzma: When Decompressor.__init__() is called twice,\nfree the old lock to not leak memory.\nbpo-32568\n: Make select.epoll() and its documentation consistent regarding\nsizehint\nand\nflags\n.\nbpo-33833\n: Fixed bug in asyncio where ProactorSocketTransport logs\nAssertionError if force closed during write.\nbpo-33663\n: Convert content length to string before putting to header.\nbpo-33721\n:\nos.path\nfunctions that return a boolean result like\nexists()\n,\nlexists()\n,\nisdir()\n,\nisfile()\n,\nislink()\n, and\nismount()\n, and\npathlib.Path\nmethods that return a\nboolean result like\nexists()\n,\nis_dir()\n,\nis_file()\n,\nis_mount()\n,\nis_symlink()\n,\nis_block_device()\n,\nis_char_device()\n,\nis_fifo()\n,\nis_socket()\nnow return\nFalse\ninstead of raising\nValueError\nor its subclasses\nUnicodeEncodeError\nand\nUnicodeDecodeError\nfor paths that contain characters or bytes\nunrepresentable at the OS level.\nbpo-26544\n: Fixed implementation of\nplatform.libc_ver()\n. It almost\nalways returned version ‘2.9’ for glibc.\nbpo-33843\n: Remove deprecated\ncgi.escape\n,\ncgi.parse_qs\nand\ncgi.parse_qsl\n.\nbpo-33842\n: Remove\ntarfile.filemode\nwhich is deprecated since Python\n3.3.\nbpo-30167\n: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by\nSteve Weber.\nbpo-33805\n: Improve error message of dataclasses.replace() when an InitVar\nis not specified\nbpo-33687\n: Fix the call to\nos.chmod()\nfor\nuu.decode()\nif a mode is\ngiven or decoded. Patch by Timo Furrer.\nbpo-33812\n: Datetime instance d with non-None tzinfo, but with\nd.tzinfo.utcoffset(d) returning None is now treated as naive by the\nastimezone() method.\nbpo-32108\n: In configparser, don’t clear section when it is assigned to\nitself.\nbpo-27397\n: Make email module properly handle invalid-length base64\nstrings.\nbpo-33578\n: Implement multibyte encoder/decoder state methods\nbpo-30805\n: Avoid race condition with debug logging\nbpo-33476\n: Fix _header_value_parser.py when address group is missing final\n‘;’. Contributed by Enrique Perez-Terron\nbpo-33694\n: asyncio: Fix a race condition causing data loss on\npause_reading()/resume_reading() when using the ProactorEventLoop.\nbpo-32493\n: Correct test for\nuuid_enc_be\navailability in\nconfigure.ac\n. Patch by Michael Felt.\nbpo-33792\n: Add asyncio.WindowsSelectorEventLoopPolicy and\nasyncio.WindowsProactorEventLoopPolicy.\nbpo-33274\n: W3C DOM Level 1 specifies return value of\nElement.removeAttributeNode() as “The Attr node that was removed.”\nxml.dom.minidom now complies with this requirement.\nbpo-33778\n: Update\nunicodedata\n’s database to Unicode version 11.0.0.\nbpo-33165\n: Added a stacklevel parameter to logging calls to allow use of\nwrapper/helper functions for logging APIs.\nbpo-33770\n: improve base64 exception message for encoded inputs of invalid\nlength\nbpo-33769\n: asyncio/start_tls: Fix error message; cancel callbacks in case\nof an unhandled error; mark SSLTransport as closed if it is aborted.\nbpo-33767\n: The concatenation (\n+\n) and repetition (\n*\n) sequence\noperations now raise\nTypeError\ninstead of\nSystemError\nwhen\nperformed on\nmmap.mmap\nobjects.  Patch by Zackery Spytz.\nbpo-33734\n: asyncio/ssl: Fix AttributeError, increase default handshake\ntimeout\nbpo-31014\n: Fixed creating a controller for\nwebbrowser\nwhen a user\nspecifies a path to an entry in the BROWSER environment variable.  Based\non patch by John Still.\nbpo-2504\n: Add gettext.pgettext() and variants.\nbpo-33197\n: Add description property for _ParameterKind\nbpo-32751\n: When cancelling the task due to a timeout,\nasyncio.wait_for()\nwill now wait until the cancellation is complete.\nbpo-32684\n: Fix gather to propagate cancellation of itself even with\nreturn_exceptions.\nbpo-33654\n: Support protocol type switching in SSLTransport.set_protocol().\nbpo-33674\n: Pause the transport as early as possible to further reduce the\nrisk of data_received() being called before connection_made().\nbpo-33671\n:\nshutil.copyfile()\n,\nshutil.copy()\n,\nshutil.copy2()\n,\nshutil.copytree()\nand\nshutil.move()\nuse\nplatform-specific fast-copy syscalls on Linux and macOS in order to copy\nthe file more efficiently. On Windows\nshutil.copyfile()\nuses a\nbigger default buffer size (1 MiB instead of 16 KiB) and a\nmemoryview()\n-based variant of\nshutil.copyfileobj()\nis used.\nThe speedup for copying a 512MiB file is about +26% on Linux, +50% on\nmacOS and +40% on Windows. Also, much less CPU cycles are consumed.\n(Contributed by Giampaolo Rodola’ in\nbpo-25427\n.)\nbpo-33674\n: Fix a race condition in SSLProtocol.connection_made() of\nasyncio.sslproto: start immediately the handshake instead of using\ncall_soon(). Previously, data_received() could be called before the\nhandshake started, causing the handshake to hang or fail.\nbpo-31647\n: Fixed bug where calling write_eof() on a\n_SelectorSocketTransport after it’s already closed raises AttributeError.\nbpo-32610\n: Make asyncio.all_tasks() return only pending tasks.\nbpo-32410\n: Avoid blocking on file IO in sendfile fallback code\nbpo-33469\n: Fix RuntimeError after closing loop that used run_in_executor\nbpo-33672\n: Fix Task.__repr__ crash with Cython’s bogus coroutines\nbpo-33654\n: Fix transport.set_protocol() to support switching between\nasyncio.Protocol and asyncio.BufferedProtocol.  Fix loop.start_tls() to\nwork with asyncio.BufferedProtocols.\nbpo-33652\n: Pickles of type variables and subscripted generics are now\nfuture-proof and compatible with older Python versions.\nbpo-32493\n: Fixed\nuuid.uuid1()\non FreeBSD.\nbpo-33238\n: Add\nInvalidStateError\nto\nconcurrent.futures\n.\nFuture.set_result\nand\nFuture.set_exception\nnow raise\nInvalidStateError\nif the futures are not pending or running. Patch by\nJason Haydaman.\nbpo-33618\n: Finalize and document preliminary and experimental TLS 1.3\nsupport with OpenSSL 1.1.1\nbpo-33625\n: Release GIL on\ngrp.getgrnam\n,\ngrp.getgrgid\n,\npwd.getpwnam\nand\npwd.getpwuid\nif reentrant variants of these\nfunctions are available. Patch by William Grzybowski.\nbpo-33623\n: Fix possible SIGSGV when asyncio.Future is created in __del__\nbpo-11874\n: Use a better regex when breaking usage into wrappable parts.\nAvoids bogus assertion errors from custom metavar strings.\nbpo-30877\n: Fixed a bug in the Python implementation of the JSON decoder\nthat prevented the cache of parsed strings from clearing after finishing\nthe decoding. Based on patch by c-fos.\nbpo-33604\n: Remove HMAC default to md5 marked for removal in 3.8 (removal\noriginally planned in 3.6, bump to 3.8 in PR 7062).\nbpo-33582\n: Emit a deprecation warning for inspect.formatargspec\nbpo-21145\n: Add\nfunctools.cached_property\ndecorator, for computed\nproperties cached for the life of the instance.\nbpo-33570\n: Change TLS 1.3 cipher suite settings for compatibility with\nOpenSSL 1.1.1-pre6 and newer. OpenSSL 1.1.1 will have TLS 1.3 ciphers\nenabled by default.\nbpo-28556\n: Do not simplify arguments to\ntyping.Union\n. Now\nUnion[Manager,\nEmployee]\nis not simplified to\nEmployee\nat runtime.\nSuch simplification previously caused several bugs and limited\npossibilities for introspection.\nbpo-12486\n:\ntokenize.generate_tokens()\nis now documented as a public\nAPI to tokenize unicode strings. It was previously present but\nundocumented.\nbpo-33540\n: Add a new\nblock_on_close\nclass attribute to\nForkingMixIn\nand\nThreadingMixIn\nclasses of\nsocketserver\n.\nbpo-33548\n: tempfile._candidate_tempdir_list should consider common TEMP\nlocations\nbpo-33109\n: argparse subparsers are once again not required by default,\nreverting the change in behavior introduced by\nbpo-26510\nin 3.7.0a2.\nbpo-33541\n: Remove unused private method\n_strptime.LocaleTime.__pad\n(a.k.a.\n_LocaleTime__pad\n).\nbpo-33536\n: dataclasses.make_dataclass now checks for invalid field names\nand duplicate fields. Also, added a check for invalid field\nspecifications.\nbpo-33542\n: Prevent\nuuid.get_node\nfrom using a DUID instead of a MAC on\nWindows. Patch by Zvi Effron\nbpo-26819\n: Fix race condition with\nReadTransport.resume_reading\nin\nWindows proactor event loop.\nFix failure in\ntyping.get_type_hints()\nwhen ClassVar was provided as a\nstring forward reference.\nbpo-33516\n:\nunittest.mock.MagicMock\nnow supports the\n__round__\nmagic method.\nbpo-28612\n: Added support for Site Maps to urllib’s\nRobotFileParser\nas\nRobotFileParser.site_maps()\n. Patch by Lady Red, based\non patch by Peter Wirtz.\nbpo-28167\n: Remove platform.linux_distribution, which was deprecated since\n3.5.\nbpo-33504\n: Switch the default dictionary implementation for\nconfigparser\nfrom\ncollections.OrderedDict\nto the standard\ndict\ntype.\nbpo-33505\n: Optimize asyncio.ensure_future() by reordering if checks: 1.17x\nfaster.\nbpo-33497\n: Add errors param to cgi.parse_multipart and make an encoding in\nFieldStorage use the given errors (needed for Twisted).  Patch by Amber\nBrown.\nbpo-29235\n: The\ncProfile.Profile\nclass can now be used as a\ncontext manager. Patch by Scott Sanderson.\nbpo-33495\n: Change dataclasses.Fields repr to use the repr of each of its\nmembers, instead of str.  This makes it more clear what each field\nactually represents.  This is especially true for the ‘type’ member.\nbpo-26103\n: Correct\ninspect.isdatadescriptor\nto look for\n__set__\nor\n__delete__\n.  Patch by Aaron Hall.\nbpo-29209\n: Removed the\ndoctype()\nmethod and the\nhtml\nparameter of\nthe constructor of\nXMLParser\n.  The\ndoctype()\nmethod defined in a subclass will no longer be called.\nDeprecated methods\ngetchildren()\nand\ngetiterator()\nin the\nElementTree\nmodule emit now a\nDeprecationWarning\ninstead of\nPendingDeprecationWarning\n.\nbpo-33453\n: Fix dataclasses to work if using literal string type\nannotations or if using PEP 563 “Postponed Evaluation of Annotations”.\nOnly specific string prefixes are detected for both ClassVar (“ClassVar”\nand “typing.ClassVar”) and InitVar (“InitVar” and “dataclasses.InitVar”).\nbpo-28556\n: Minor fixes in typing module: add annotations to\nNamedTuple.__new__\n, pass\n*args\nand\n**kwds\nin\nGeneric.__new__\n.  Original PRs by Paulius Šarka and Chad Dombrova.\nbpo-33365\n: Print the header values besides the header keys instead just\nthe header keys if\ndebuglevel\nis set to >0 in\nhttp.client\n. Patch\nby Marco Strigl.\nbpo-20087\n: Updated alias mapping with glibc 2.27 supported locales.\nbpo-33422\n: Fix trailing quotation marks getting deleted when looking up\nbyte/string literals on pydoc. Patch by Andrés Delfino.\nbpo-28167\n: The function\nplatform.linux_distribution\nand\nplatform.dist\nnow trigger a\nDeprecationWarning\nand have been\nmarked for removal in Python 3.8\nbpo-33281\n: Fix ctypes.util.find_library regression on macOS.\nbpo-33311\n: Text and html output generated by cgitb does not display\nparentheses if the current call is done directly in the module. Patch by\nStéphane Blondon.\nbpo-27300\n: The file classes in\ntempfile\nnow accept an\nerrors\nparameter\nthat complements the already existing\nencoding\n.  Patch by Stephan Hohe.\nbpo-32933\n:\nunittest.mock.mock_open()\nnow supports iteration over the\nfile contents. Patch by Tony Flury.\nbpo-33217\n: Raise\nTypeError\nwhen looking up non-Enum objects in Enum\nclasses and Enum members.\nbpo-33197\n: Update error message when constructing invalid\ninspect.Parameters Patch by Donghee Na.\nbpo-33383\n: Fixed crash in the get() method of the\ndbm.ndbm\ndatabase\nobject when it is called with a single argument.\nbpo-33375\n: The warnings module now finds the Python file associated with a\nwarning from the code object, rather than the frame’s global namespace.\nThis is consistent with how tracebacks and pdb find filenames, and should\nwork better for dynamically executed code.\nbpo-33336\n:\nimaplib\nnow allows\nMOVE\ncommand in\nIMAP4.uid()\n(RFC\n6851: IMAP MOVE Extension) and potentially as a name of supported method\nof\nIMAP4\nobject.\nbpo-32455\n: Added\njump\nparameter to\ndis.stack_effect()\n.\nbpo-27485\n: Rename and deprecate undocumented functions in\nurllib.parse()\n.\nbpo-33332\n: Add\nsignal.valid_signals()\nto expose the POSIX sigfillset()\nfunctionality.\nbpo-33251\n:\nConfigParser.items()\nwas fixed so that key-value pairs\npassed in via\nvars()\nare not included in the resulting output.\nbpo-33329\n: Fix multiprocessing regression on newer glibcs\nbpo-33334\n:\ndis.stack_effect()\nnow supports all defined opcodes\nincluding NOP and EXTENDED_ARG.\nbpo-991266\n: Fix quoting of the\nComment\nattribute of\nhttp.cookies.SimpleCookie\n.\nbpo-33131\n: Upgrade bundled version of pip to 10.0.1.\nbpo-33308\n: Fixed a crash in the\nparser\nmodule when converting an ST\nobject to a tree of tuples or lists with\nline_info=False\nand\ncol_info=True\n.\nbpo-23403\n: lib2to3 now uses pickle protocol 4 for pre-computed grammars.\nbpo-33266\n: lib2to3 now recognizes\nrf'...'\nstrings.\nbpo-11594\n: Ensure line-endings are respected when using lib2to3.\nbpo-33254\n: Have\nimportlib.resources.contents()\nand\nimportlib.abc.ResourceReader.contents()\nreturn an\niterable\ninstead of an\niterator\n.\nbpo-33265\n:\ncontextlib.ExitStack\nand\ncontextlib.AsyncExitStack\nnow\nuse a method instead of a wrapper function for exit callbacks.\nbpo-33263\n: Fix FD leak in\n_SelectorSocketTransport\nPatch by Vlad\nStarostin.\nbpo-33256\n: Fix display of\n<module>\ncall in the html produced by\ncgitb.html()\n. Patch by Stéphane Blondon.\nbpo-33144\n:\nrandom.Random()\nand its subclassing mechanism got optimized\nto check only once at class/subclass instantiation time whether its\ngetrandbits()\nmethod can be relied on by other methods, including\nrandrange()\n, for the generation of arbitrarily large random integers.\nPatch by Wolfgang Maier.\nbpo-33185\n: Fixed regression when running pydoc with the\n-m\nswitch. (The regression was introduced in 3.7.0b3 by the resolution of\nbpo-33053\n)\nThis fix also changed pydoc to add\nos.getcwd()\nto\nsys.path\nwhen necessary, rather than adding\n\".\"\n.\nbpo-29613\n: Added support for the\nSameSite\ncookie flag to the\nhttp.cookies\nmodule.\nbpo-33169\n: Delete entries of\nNone\nin\nsys.path_importer_cache\nwhen\nimportlib.machinery.invalidate_caches()\nis called.\nbpo-33203\n:\nrandom.Random.choice()\nnow raises\nIndexError\nfor empty\nsequences consistently even when called from subclasses without a\ngetrandbits()\nimplementation.\nbpo-33224\n: Update difflib.mdiff() for\nPEP 479\n.  Convert an uncaught\nStopIteration in a generator into a return-statement.\nbpo-33209\n: End framing at the end of C implementation of\npickle.Pickler.dump()\n.\nbpo-32861\n: The urllib.robotparser’s\n__str__\nrepresentation now\nincludes wildcard entries and the “Crawl-delay” and “Request-rate” fields.\nAlso removes extra newlines that were being appended to the end of the\nstring. Patch by Michael Lazar.\nbpo-23403\n:\nDEFAULT_PROTOCOL\nin\npickle\nwas bumped to 4. Protocol\n4 is described in\nPEP 3154\nand available since Python 3.4. It offers\nbetter performance and smaller size compared to protocol 3 introduced in\nPython 3.0.\nbpo-20104\n: Improved error handling and fixed a reference leak in\nos.posix_spawn()\n.\nbpo-33106\n: Deleting a key from a read-only dbm database raises module\nspecific error instead of KeyError.\nbpo-33175\n: In dataclasses, Field.__set_name__ now looks up the\n__set_name__ special method on the class, not the instance, of the default\nvalue.\nbpo-32380\n: Create functools.singledispatchmethod to support generic single\ndispatch on descriptors and methods.\nbpo-33141\n: Have Field objects pass through __set_name__ to their default\nvalues, if they have their own __set_name__.\nbpo-33096\n: Allow ttk.Treeview.insert to insert iid that has a false\nboolean value. Note iid=0 and iid=False would be same. Patch by Garvit\nKhatri.\nbpo-32873\n: Treat type variables and special typing forms as immutable by\ncopy and pickle.  This fixes several minor issues and inconsistencies, and\nimproves backwards compatibility with Python 3.6.\nbpo-33134\n: When computing dataclass’s __hash__, use the lookup table to\ncontain the function which returns the __hash__ value.  This is an\nimprovement over looking up a string, and then testing that string to see\nwhat to do.\nbpo-33127\n: The ssl module now compiles with LibreSSL 2.7.1.\nbpo-32505\n: Raise TypeError if a member variable of a dataclass is of type\nField, but doesn’t have a type annotation.\nbpo-33078\n: Fix the failure on OSX caused by the tests relying on\nsem_getvalue\nbpo-33116\n: Add ‘Field’ to dataclasses.__all__.\nbpo-32896\n: Fix an error where subclassing a dataclass with a field that\nuses a default_factory would generate an incorrect class.\nbpo-33100\n: Dataclasses: If a field has a default value that’s a\nMemberDescriptorType, then it’s from that field being in __slots__, not an\nactual default value.\nbpo-32953\n: If a non-dataclass inherits from a frozen dataclass, allow\nattributes to be added to the derived class.  Only attributes from the\nfrozen dataclass cannot be assigned to.  Require all dataclasses in a\nhierarchy to be either all frozen or all non-frozen.\nbpo-33097\n: Raise RuntimeError when\nexecutor.submit\nis called during\ninterpreter shutdown.\nbpo-32968\n: Modulo and floor division involving Fraction and float should\nreturn float.\nbpo-33061\n: Add missing\nNoReturn\nto\n__all__\nin typing.py\nbpo-33078\n: Fix the size handling in multiprocessing.Queue when a pickling\nerror occurs.\nbpo-33064\n: lib2to3 now properly supports trailing commas after\n*args\nand\n**kwargs\nin function signatures.\nbpo-33056\n: FIX properly close leaking fds in\nconcurrent.futures.ProcessPoolExecutor.\nbpo-33021\n: Release the GIL during fstat() calls, avoiding hang of all\nthreads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch\nby Nir Soffer.\nbpo-31804\n: Avoid failing in multiprocessing.Process if the standard\nstreams are closed or None at exit.\nbpo-33034\n: Providing an explicit error message when casting the port\nproperty to anything that is not an integer value using\nurlparse()\nand\nurlsplit()\n. Patch by Matt Eaton.\nbpo-30249\n: Improve struct.unpack_from() exception messages for problems\nwith the buffer size and offset.\nbpo-33037\n: Skip sending/receiving data after SSL transport closing.\nbpo-27683\n: Fix a regression in\nipaddress\nthat result of\nhosts()\nis empty when the network is constructed by a tuple\ncontaining an integer mask and only 1 bit left for addresses.\nbpo-22674\n: Add the strsignal() function in the signal module that returns\nthe system description of the given signal, as returned by strsignal(3).\nbpo-32999\n: Fix C implementation of\nABC.__subclasscheck__(cls,\nsubclass)\ncrashed when\nsubclass\nis not a type object.\nbpo-33009\n: Fix inspect.signature() for single-parameter partialmethods.\nbpo-32969\n: Expose several missing constants in zlib and fix corresponding\ndocumentation.\nbpo-32056\n: Improved exceptions raised for invalid number of channels and\nsample width when read an audio file in modules\naifc\n,\nwave\nand\nsunau\n.\nbpo-32970\n: Improved disassembly of the MAKE_FUNCTION instruction.\nbpo-32844\n: Fix wrong redirection of a low descriptor (0 or 1) to stderr in\nsubprocess if another low descriptor is closed.\nbpo-32960\n: For dataclasses, disallow inheriting frozen from non-frozen\nclasses, and also disallow inheriting non-frozen from frozen classes. This\nrestriction will be relaxed at a future date.\nbpo-32713\n: Fixed tarfile.itn handling of out-of-bounds float values. Patch\nby Joffrey Fuhrer.\nbpo-32257\n: The ssl module now contains OP_NO_RENEGOTIATION constant,\navailable with OpenSSL 1.1.0h or 1.1.1.\nbpo-32951\n: Direct instantiation of SSLSocket and SSLObject objects is now\nprohibited. The constructors were never documented, tested, or designed as\npublic constructors. Users were suppose to use ssl.wrap_socket() or\nSSLContext.\nbpo-32929\n: Remove the tri-state parameter “hash”, and add the boolean\n“unsafe_hash”. If unsafe_hash is True, add a __hash__ function, but if a\n__hash__ exists, raise TypeError.  If unsafe_hash is False, add a __hash__\nbased on the values of eq= and frozen=.  The unsafe_hash=False behavior is\nthe same as the old hash=None behavior.  unsafe_hash=False is the default,\njust as hash=None used to be.\nbpo-32947\n: Add OP_ENABLE_MIDDLEBOX_COMPAT and test workaround for TLSv1.3\nfor future compatibility with OpenSSL 1.1.1.\nbpo-32146\n: Document the interaction between frozen executables and the\nspawn and forkserver start methods in multiprocessing.\nbpo-30622\n: The ssl module now detects missing NPN support in LibreSSL.\nbpo-32922\n: dbm.open() now encodes filename with the filesystem encoding\nrather than default encoding.\nbpo-32759\n: Free unused arenas in multiprocessing.heap.\nbpo-32859\n: In\nos.dup2\n, don’t check every call whether the\ndup3\nsyscall exists or not.\nbpo-32556\n: nt._getfinalpathname, nt._getvolumepathname and\nnt._getdiskusage now correctly convert from bytes.\nbpo-21060\n: Rewrite confusing message from setup.py upload from “No dist\nfile created in earlier command” to the more helpful “Must create and\nupload files in one command”.\nbpo-32857\n: In\ntkinter\n,\nafter_cancel(None)\nnow raises a\nValueError\ninstead of canceling the first scheduled function.\nPatch by Cheryl Sabella.\nbpo-32852\n: Make sure sys.argv remains as a list when running trace.\nbpo-31333\n:\n_abc\nmodule is added.  It is a speedup module with C\nimplementations for various functions and methods in\nabc\n.  Creating an\nABC subclass and calling\nisinstance\nor\nissubclass\nwith an ABC\nsubclass are up to 1.5x faster. In addition, this makes Python start-up up\nto 10% faster.\nNote that the new implementation hides internal registry and caches,\npreviously accessible via private attributes\n_abc_registry\n,\n_abc_cache\n, and\n_abc_negative_cache\n.  There are three debugging\nhelper methods that can be used instead\n_dump_registry\n,\n_abc_registry_clear\n, and\n_abc_caches_clear\n.\nbpo-32841\n: Fixed\nasyncio.Condition\nissue which silently ignored\ncancellation after notifying and cancelling a conditional lock. Patch by\nBar Harel.\nbpo-32819\n: ssl.match_hostname() has been simplified and no longer depends\non re and ipaddress module for wildcard and IP addresses. Error reporting\nfor invalid wildcards has been improved.\nbpo-19675\n:\nmultiprocessing.Pool\nno longer leaks processes if its\ninitialization fails.\nbpo-32394\n: socket: Remove\nTCP_FASTOPEN,TCP_KEEPCNT,TCP_KEEPIDLE,TCP_KEEPINTVL flags on older version\nWindows during run-time.\nbpo-31787\n: Fixed refleaks of\n__init__()\nmethods in various modules.\n(Contributed by Oren Milman)\nbpo-30157\n: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when\nonly the last field is quoted.  Patch by Jake Davis.\nbpo-30688\n: Added support of\n\\N{name}\nescapes in regular expressions.\nBased on patch by Jonathan Eunice.\nbpo-32792\n: collections.ChainMap() preserves the order of the underlying\nmappings.\nbpo-32775\n:\nfnmatch.translate()\nno longer produces patterns which\ncontain set operations. Sets starting with ‘[’ or containing ‘–’, ‘&&’,\n‘~~’ or ‘||’ will be interpreted differently in regular expressions in\nfuture versions. Currently they emit warnings. fnmatch.translate() now\navoids producing patterns containing such sets by accident.\nbpo-32622\n: Implement native fast sendfile for Windows proactor event loop.\nbpo-32777\n: Fix a rare but potential pre-exec child process deadlock in\nsubprocess on POSIX systems when marking file descriptors inheritable on\nexec in the child process.  This bug appears to have been introduced in\n3.4.\nbpo-32647\n: The ctypes module used to depend on indirect linking for\ndlopen. The shared extension is now explicitly linked against libdl on\nplatforms with dl.\nbpo-32749\n: A\ndbm.dumb\ndatabase opened with flags ‘r’ is now\nread-only.\ndbm.dumb.open()\nwith flags ‘r’ and ‘w’ no longer creates\na database if it does not exist.\nbpo-32741\n: Implement\nasyncio.TimerHandle.when()\nmethod.\nbpo-32691\n: Use mod_spec.parent when running modules with pdb\nbpo-32734\n: Fixed\nasyncio.Lock()\nsafety issue which allowed acquiring\nand locking the same lock multiple times, without it being free. Patch by\nBar Harel.\nbpo-32727\n: Do not include name field in SMTP envelope from address. Patch\nby Stéphane Wirtel\nbpo-31453\n: Add TLSVersion constants and SSLContext.maximum_version /\nminimum_version attributes. The new API wraps OpenSSL 1.1\nhttps://web.archive.org/web/20180309043602/https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_set_min_proto_version.html\nfeature.\nbpo-24334\n: Internal implementation details of ssl module were cleaned up.\nThe SSLSocket has one less layer of indirection. Owner and session\ninformation are now handled by the SSLSocket and SSLObject constructor.\nChannel binding implementation has been simplified.\nbpo-31848\n: Fix the error handling in Aifc_read.initfp() when the SSND\nchunk is not found. Patch by Zackery Spytz.\nbpo-32585\n: Add Ttk spinbox widget to\ntkinter.ttk\n.  Patch by Alan D\nMoore.\nbpo-32512\n:\nprofile\nCLI accepts\n-m\nmodule_name\nas an alternative\nto script path.\nbpo-8525\n: help() on a type now displays builtin subclasses. This is\nintended primarily to help with notification of more specific exception\nsubclasses.\nPatch by Sanyam Khurana.\nbpo-31639\n: http.server now exposes a ThreadingHTTPServer class and uses it\nwhen the module is run with\n-m\nto cope with web browsers pre-opening\nsockets.\nbpo-29877\n: compileall: import ProcessPoolExecutor only when needed,\npreventing hangs on low resource platforms\nbpo-32221\n: Various functions returning tuple containing IPv6 addresses now\nomit\n%scope\npart since the same information is already encoded in\nscopeid\ntuple item. Especially this speeds up\nsocket.recvfrom()\nwhen it receives multicast packet since useless resolving of network\ninterface name is omitted.\nbpo-32147\n:\nbinascii.unhexlify()\nis now up to 2 times faster. Patch\nby Sergey Fedoseev.\nbpo-30693\n: The TarFile class now recurses directories in a reproducible\nway.\nbpo-30693\n: The ZipFile class now recurses directories in a reproducible\nway.\nbpo-31680\n: Added\ncurses.ncurses_version\n.\nbpo-31908\n: Fix output of cover files for\ntrace\nmodule command-line\ntool. Previously emitted cover files only when\n--missing\noption was\nused. Patch by Michael Selik.\nbpo-31608\n: Raise a\nTypeError\ninstead of crashing if a\ncollections.deque\nsubclass returns a non-deque from\n__new__\n. Patch\nby Oren Milman.\nbpo-31425\n: Add support for sockets of the AF_QIPCRTR address family,\nsupported by the Linux kernel. This is used to communicate with services,\nsuch as GPS or radio, running on Qualcomm devices. Patch by Bjorn\nAndersson.\nbpo-22005\n: Implemented unpickling instances of\ndatetime\n,\ndate\nand\ntime\npickled by Python 2.\nencoding='latin1'\nshould\nbe used for successful decoding.\nbpo-27645\n:\nsqlite3.Connection\nnow exposes a\nbackup\nmethod, if the underlying SQLite\nlibrary is at version 3.6.11 or higher.  Patch by Lele Gaifax.\nbpo-16865\n: Support arrays >=2GiB in\nctypes\n.  Patch by Segev Finer.\nbpo-31508\n: Removed support of arguments in\ntkinter.ttk.Treeview.selection\n. It was deprecated in 3.6.  Use\nspecialized methods like\nselection_set\nfor changing the selection.\nbpo-29456\n: Fix bugs in hangul normalization: u1176, u11a7 and u11c3\nDocumentation\n¶\nbpo-21257\n: Document\nhttp.client.parse_headers()\n.\nbpo-34764\n: Improve example of iter() with 2nd sentinel argument.\nbpo-35564\n: Explicitly set master_doc variable in conf.py for compliance\nwith Sphinx 2.0\nbpo-35511\n: Specified that profile.Profile class doesn’t not support enable\nor disable methods. Also, elaborated that Profile object as a context\nmanager is only supported in cProfile module.\nbpo-10536\n: Enhance the gettext docs. Patch by Éric Araujo\nbpo-35089\n: Remove mention of\ntyping.io\nand\ntyping.re\n. Their types\nshould be imported from\ntyping\ndirectly.\nbpo-35038\n: Fix the documentation about an unexisting\nf_restricted\nattribute in the frame object. Patch by Stéphane Wirtel\nbpo-35042\n: Replace PEP XYZ by the pep role and allow to use the direct\nlinks to the PEPs.\nbpo-35044\n: Fix the documentation with the role\nexc\nfor the\nappropriated exception. Patch by Stéphane Wirtel\nbpo-35035\n: Rename documentation for\nemail.utils\nto\nemail.utils.rst\n.\nbpo-34967\n: Use app.add_object_type() instead of the deprecated Sphinx\nfunction app.description_unit()\nbpo-34913\n: Add documentation about the new command line interface of the\ngzip module.\nbpo-32174\n: chm document displays non-ASCII characters properly on some\nMBCS Windows systems.\nbpo-11233\n: Create availability directive for documentation.  Original\npatch by Georg Brandl.\nbpo-34790\n: Document how passing coroutines to asyncio.wait() can be\nconfusing.\nbpo-34552\n: Make clear that\n==\noperator sometimes is equivalent to\nis\n. The\n<\n,\n<=\n,\n>\nand\n>=\noperators are only defined\nwhere they make sense.\nbpo-28617\n: Fixed info in the stdtypes docs concerning the types that\nsupport membership tests.\nbpo-20177\n: Migrate datetime.date.fromtimestamp to Argument Clinic. Patch\nby Tim Hoffmann.\nbpo-34065\n: Fix wrongly written basicConfig documentation markup syntax\nbpo-33460\n: replaced ellipsis with correct error codes in tutorial chapter\n3.\nbpo-33847\n: Add ‘@’ operator entry to index.\nbpo-33409\n: Clarified the relationship between\nPEP 538\n’s\nPYTHONCOERCECLOCALE and PEP 540’s PYTHONUTF8 mode.\nbpo-33197\n: Add versionadded tag to the documentation of\nParameterKind.description\nbpo-17045\n: Improve the C-API doc for PyTypeObject.  This includes adding\nseveral quick-reference tables and a lot of missing slot/typedef entries.\nThe existing entries were also cleaned up with a slightly more consistent\nformat.\nbpo-33736\n: Improve the documentation of\nasyncio.open_connection()\n,\nasyncio.start_server()\nand their UNIX socket counterparts.\nbpo-23859\n: Document that\nasyncio.wait()\ndoes not cancel its futures on\ntimeout.\nbpo-32436\n: Document\nPEP 567\nchanges to asyncio.\nbpo-33604\n: Update HMAC md5 default to a DeprecationWarning, bump removal\nto 3.8.\nbpo-33594\n: Document\ngetargspec\n,\nfrom_function\nand\nfrom_builtin\nas deprecated in their respective docstring, and include version since\ndeprecation in DeprecationWarning message.\nbpo-33503\n: Fix broken pypi link\nbpo-33421\n: Add missing documentation for\ntyping.AsyncContextManager\n.\nbpo-33487\n: BZ2file now emit a DeprecationWarning when buffering=None is\npassed, the deprecation message and documentation also now explicitly\nstate it is deprecated since 3.0.\nbpo-33378\n: Add Korean language switcher for\nhttps://docs.python.org/3/\nbpo-33276\n: Clarify that the\n__path__\nattribute on modules cannot be\njust any value.\nbpo-33201\n: Modernize documentation for writing C extension types.\nbpo-33195\n: Deprecate\nPy_UNICODE\nusage in\nc-api/arg\ndocument.\nPy_UNICODE\nrelated APIs are deprecated since Python 3.3, but it is\nmissed in the document.\nbpo-33126\n: Document PyBuffer_ToContiguous().\nbpo-27212\n: Modify documentation for the\nislice()\nrecipe to consume\ninitial values up to the start index.\nbpo-28247\n: Update\nzipapp\ndocumentation to describe how to make\nstandalone applications.\nbpo-18802\n: Documentation changes for ipaddress.  Patch by Jon Foster and\nBerker Peksag.\nbpo-27428\n: Update documentation to clarify that\nWindowsRegistryFinder\nimplements\nMetaPathFinder\n. (Patch by Himanshu Lakhara)\nbpo-28124\n: The ssl module function ssl.wrap_socket() has been\nde-emphasized and deprecated in favor of the more secure and efficient\nSSLContext.wrap_socket() method.\nbpo-17232\n: Clarify docs for -O and -OO.  Patch by Terry Reedy.\nbpo-32436\n: Add documentation for the contextvars module (PEP 567).\nbpo-32800\n: Update link to w3c doc for xml default namespaces.\nbpo-11015\n: Update\ntest.support\ndocumentation.\nbpo-32613\n: Update the faq/windows.html to use the py command from PEP 397\ninstead of python.\nbpo-8722\n: Document\n__getattr__()\nbehavior when property\nget()\nmethod raises\nAttributeError\n.\nbpo-32614\n: Modify RE examples in documentation to use raw strings to\nprevent\nDeprecationWarning\nand add text to REGEX HOWTO to highlight\nthe deprecation.\nbpo-20709\n: Remove the paragraph where we explain that os.utime() does not\nsupport a directory as path under Windows. Patch by Jan-Philip Gehrcke\nbpo-32722\n: Remove the bad example in the tutorial of the Generator\nExpression. Patch by Stéphane Wirtel\nbpo-31972\n: Improve docstrings for\npathlib.PurePath\nsubclasses.\nbpo-30607\n: Use the externalized\npython-docs-theme\npackage when\nbuilding the documentation.\nbpo-8243\n: Add a note about curses.addch and curses.addstr exception\nbehavior when writing outside a window, or pad.\nbpo-32337\n: Update documentation related with\ndict\norder.\nbpo-25041\n: Document\nAF_PACKET\nin the\nsocket\nmodule.\nbpo-31432\n: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED\nflags for ssl.SSLContext.verify_mode.\nTests\n¶\nbpo-35772\n: Fix sparse file tests of test_tarfile on ppc64 with the tmpfs\nfilesystem. Fix the function testing if the filesystem supports sparse\nfiles: create a file which contains data and “holes”, instead of creating\na file which contains no data. tmpfs effective block size is a page size\n(tmpfs lives in the page cache). RHEL uses 64 KiB pages on aarch64, ppc64,\nppc64le, only s390x and x86_64 use 4 KiB pages, whereas the test punch\nholes of 4 KiB.\nbpo-35045\n: Make ssl tests less strict and also accept TLSv1 as system\ndefault. The changes unbreaks test_min_max_version on Fedora 29.\nbpo-32710\n:\ntest_asyncio/test_sendfile.py\nnow resets the event loop\npolicy using\ntearDownModule()\nas done in other tests, to prevent a\nwarning when running tests on Windows.\nbpo-33717\n: test.pythoninfo now logs information of all clocks, not only\ntime.time() and time.perf_counter().\nbpo-35488\n: Add a test to pathlib’s Path.match() to verify it does not\nsupport glob-style ** recursive pattern matching.\nbpo-31731\n: Fix a race condition in\ncheck_interrupted_write()\nof\ntest_io: create directly the thread with SIGALRM signal blocked, rather\nthan blocking the signal later from the thread. Previously, it was\npossible that the thread gets the signal before the signal is blocked.\nbpo-35424\n: Fix test_multiprocessing_main_handling: use\nmultiprocessing.Pool\nwith a context manager and then explicitly\njoin the pool.\nbpo-35519\n: Rename\ntest.bisect\nmodule to\ntest.bisect_cmd\nto\navoid conflict with\nbisect\nmodule when running directly a test like\n./python\nLib/test/test_xmlrpc.py\n.\nbpo-35513\n: Replace\ntime.time()\nwith\ntime.monotonic()\nin tests\nto measure time delta.\nbpo-34279\n:\ntest.support.run_unittest()\nno longer raise\nTestDidNotRun\nif the test result contains skipped tests. The\nexception is now only raised if no test have been run and no test have\nbeen skipped.\nbpo-35412\n: Add testcase to\ntest_future4\n: check unicode literal.\nbpo-26704\n: Added test demonstrating double-patching of an instance method.\nPatch by Anthony Sottile.\nbpo-33725\n: test_multiprocessing_fork may crash on recent versions of\nmacOS.  Until the issue is resolved, skip the test on macOS.\nbpo-35352\n: Modify test_asyncio to use the certificate set from the test\ndirectory.\nbpo-35317\n: Fix\nmktime()\noverflow error in\ntest_email\n: run\ntest_localtime_daylight_true_dst_true()\nand\ntest_localtime_daylight_false_dst_true()\nwith a specific timezone.\nbpo-21263\n: After several reports that test_gdb does not work properly on\nmacOS and since gdb is not shipped by default anymore, test_gdb is now\nskipped on macOS when LLVM Clang has been used to compile Python. Patch by\nLysandros Nikolaou\nbpo-34279\n: regrtest issue a warning when no tests have been executed in a\nparticular test file. Also, a new final result state is issued if no test\nhave been executed across all test files. Patch by Pablo Galindo.\nbpo-34962\n: make docstest in Doc now passes., and is enforced in CI\nbpo-23596\n: Use argparse for the command line of the gzip module. Patch by\nAntony Lee\nbpo-34537\n: Fix\ntest_gdb.test_strings()\nwhen\nLC_ALL=C\nand GDB was\ncompiled with Python 3.6 or earlier.\nbpo-34587\n: test_socket: Remove RDSTest.testCongestion(). The test tries to\nfill the receiver’s socket buffer and expects an error. But the RDS\nprotocol doesn’t require that. Moreover, the Linux implementation of RDS\nexpects that the producer of the messages reduces its rate, it’s not the\nrole of the receiver to trigger an error. The test fails on Fedora 28 by\ndesign, so just remove it.\nbpo-34661\n: Fix test_shutil if unzip doesn’t support -t.\nbpo-34200\n: Fixed non-deterministic flakiness of test_pkg by not using the\nscary test.support.module_cleanup() logic to save and restore sys.modules\ncontents between test cases.\nbpo-34569\n: The experimental PEP 554 data channels now correctly pass\nnegative PyLong objects between subinterpreters on 32-bit systems. Patch\nby Michael Felt.\nbpo-34594\n: Fix usage of hardcoded\nerrno\nvalues in the tests.\nbpo-34579\n: Fix test_embed for AIX Patch by Michael Felt\nbpo-34542\n: Use 3072 RSA keys and SHA-256 signature for test certs and\nkeys.\nbpo-11193\n: Remove special condition for AIX in\ntest_subprocess.test_undecodable_env\nbpo-34347\n: Fix\ntest_utf8_mode.test_cmd_line\nfor AIX\nbpo-34490\n: On AIX with AF_UNIX family sockets getsockname() does not\nprovide ‘sockname’, so skip calls to transport.get_extra_info(‘sockname’)\nbpo-34391\n: Fix ftplib test for TLS 1.3 by reading from data socket.\nbpo-11192\n: Fix\ntest_socket\non AIX 6.1 and later IPv6 zone id supports\nonly supported by\ninet_pton6_zone()\n. Switch to runtime-based\nplatform.system()\nto establish current platform rather than build-time\nbased\nsys.platform()\nbpo-34399\n: Update all RSA keys and DH params to use at least 2048 bits.\nbpo-34373\n: Fix\ntest_mktime\nand\ntest_pthread_getcpuclickid\ntests\nfor AIX Add range checking for\n_PyTime_localtime\nfor AIX Patch by\nMichael Felt\nbpo-11191\n: Skip the distutils test ‘test_search_cpp’ when using XLC as\ncompiler patch by aixtools (Michael Felt)\nImproved an error message when mock assert_has_calls fails.\nbpo-33746\n: Fix test_unittest when run in verbose mode.\nbpo-33901\n: Fix test_dbm_gnu on macOS with gdbm 1.15: add a larger value to\nmake sure that the file size changes.\nbpo-33873\n: Fix a bug in\nregrtest\nthat caused an extra test to run if\n–huntrleaks/-R was used. Exit with error in case that invalid parameters\nare specified to –huntrleaks/-R (at least one warmup run and one\nrepetition must be used).\nbpo-33562\n: Check that a global asyncio event loop policy is not left\nbehind by any tests.\nbpo-33655\n: Ignore test_posix_fallocate failures on BSD platforms that\nmight be due to running on ZFS.\nbpo-32962\n: Fixed test_gdb when Python is compiled with flags -mcet\n-fcf-protection -O0.\nbpo-33358\n: Fix\ntest_embed.test_pre_initialization_sys_options()\nwhen\nthe interpreter is built with\n--enable-shared\n.\nbpo-32872\n: Avoid regrtest compatibility issue with namespace packages.\nbpo-32517\n: Fix failing\ntest_asyncio\non macOS 10.12.2+ due to transport\nof\nKqueueSelector\nloop was not being closed.\nbpo-32663\n: Making sure the\nSMTPUTF8SimTests\nclass of tests gets run in\ntest_smtplib.py\n.\nbpo-27643\n: Test_C test case needs “signed short” bitfields, but the IBM\nXLC compiler (on AIX) does not support this Skip the code and test when\nAIX and XLC are used\nApplicable to Python2-2.7 and later\nbpo-19417\n: Add test_bdb.py.\nbpo-31809\n: Add tests to verify connection with secp ECDH curves.\nBuild\n¶\nbpo-34691\n: The _contextvars module is now built into the core Python\nlibrary on Windows.\nbpo-35683\n: Improved Azure Pipelines build steps and now verifying layouts\ncorrectly\nbpo-35642\n: Remove asynciomodule.c from pythoncore.vcxproj\nbpo-35550\n: Fix incorrect Solaris #ifdef checks to look for __sun && __SVR4\ninstead of sun when compiling.\nbpo-35499\n:\nmake\nprofile-opt\nno longer replaces\nCFLAGS_NODIST\nwith\nCFLAGS\n. It now adds profile-guided optimization (PGO) flags to\nCFLAGS_NODIST\n: existing\nCFLAGS_NODIST\nflags are kept.\nbpo-35257\n: Avoid leaking the linker flags from Link Time Optimizations\n(LTO) into distutils when compiling C extensions.\nbpo-35351\n: When building Python with clang and LTO, LTO flags are no\nlonger passed into CFLAGS to build third-party C extensions through\ndistutils.\nbpo-35139\n: Fix a compiler error when statically linking\npyexpat\nin\nModules/Setup\n.\nbpo-35059\n: PCbuild: Set InlineFunctionExpansion to OnlyExplicitInline\n(“/Ob1” option) in pyproject.props in Debug mode to expand functions\nmarked as inline. This change should make Python compiled in Debug mode a\nlittle bit faster on Windows.\nbpo-35011\n: Restores the use of pyexpatns.h to isolate our embedded copy of\nthe expat C library so that its symbols do not conflict at link or dynamic\nloading time with an embedding application or other extension modules with\ntheir own version of libexpat.\nbpo-28015\n: Have –with-lto works correctly with clang.\nbpo-34765\n: Update the outdated install-sh file to the latest revision from\nautomake v1.16.1\nbpo-34585\n: Check for floating-point byte order in configure.ac using\ncompilation tests instead of executing code, so that these checks work in\ncross-compiled builds.\nbpo-34710\n: Fixed SSL module build with OpenSSL & pedantic CFLAGS.\nbpo-34582\n: Add JUnit XML output for regression tests and update Azure\nDevOps builds.\nbpo-34081\n: Make Sphinx warnings as errors in the Docs Makefile.\nbpo-34555\n: Fix for case where it was not possible to have both\nHAVE_LINUX_VM_SOCKETS_H\nand\nHAVE_SOCKADDR_ALG\nbe undefined.\nbpo-33015\n: Fix an undefined behaviour in the pthread implementation of\nPyThread_start_new_thread()\n: add a function wrapper to always\nreturn\nNULL\n.\nbpo-34245\n: The Python shared library is now installed with write\npermission (mode 0755), which is the standard way of installing such\nlibraries.\nbpo-34121\n: Fix detection of C11 atomic support on clang.\nbpo-32430\n: Rename Modules/Setup.dist to Modules/Setup, and remove the\nnecessity to copy the former manually to the latter when updating the\nlocal source tree.\nbpo-30345\n: Add -g to LDFLAGS when compiling with LTO to get debug symbols.\nbpo-5755\n: Move\n-Wstrict-prototypes\noption to\nCFLAGS_NODIST\nfrom\nOPT\n. This option emitted annoying warnings when building extension\nmodules written in C++.\nbpo-33614\n: Ensures module definition files for the stable ABI on Windows\nare correctly regenerated.\nbpo-33648\n: The –with-c-locale-warning configuration flag has been\nremoved. It has had no effect for about a year.\nbpo-33522\n: Enable CI builds on Visual Studio Team Services at\nhttps://python.visualstudio.com/cpython\nbpo-33512\n: configure’s check for “long double” has been simplified\nbpo-33483\n: C compiler is now correctly detected from the standard\nenvironment variables. –without-gcc and –with-icc options have been\nremoved.\nbpo-33394\n: Enable the verbose build for extension modules, when GNU make\nis passed macros on the command line.\nbpo-33393\n: Update config.guess and config.sub files.\nbpo-33377\n: Add new triplets for mips r6 and riscv variants (used in\nextension suffixes).\nbpo-32232\n: By default, modules configured in\nModules/Setup\nare no\nlonger built with\n-DPy_BUILD_CORE\n. Instead, modules that specifically\nneed that preprocessor definition include it in their individual entries.\nbpo-33182\n: The embedding tests can once again be built with clang 6.0\nbpo-33163\n: Upgrade pip to 9.0.3 and setuptools to v39.0.1.\nbpo-33012\n: gcc 8 has added a new warning heuristic to detect invalid\nfunction casts and a stock python build seems to hit that warning quite\noften.  The most common is the cast of a METH_NOARGS function (that uses\njust one argument) to a PyCFunction. Fix this by adding a dummy argument\nto all functions that implement METH_NOARGS.\nbpo-32898\n: Fix the python debug build when using COUNT_ALLOCS.\nbpo-29442\n: Replace optparse with argparse in setup.py\nWindows\n¶\nbpo-35890\n: Fix API calling consistency of GetVersionEx and wcstok.\nbpo-32560\n: The\npy\nlauncher now forwards its\nSTARTUPINFO\nstructure\nto child processes.\nbpo-35854\n: Fix EnvBuilder and –symlinks in venv on Windows\nbpo-35811\n: Avoid propagating venv settings when launching via py.exe\nbpo-35797\n: Fix default executable used by the multiprocessing module\nbpo-35758\n: Allow building on ARM with MSVC.\nbpo-29734\n: Fix handle leaks in os.stat on Windows.\nbpo-35596\n: Use unchecked PYCs for the embeddable distro to avoid zipimport\nrestrictions.\nbpo-35596\n: Fix vcruntime140.dll being added to embeddable distro multiple\ntimes.\nbpo-35402\n: Update Windows build to use Tcl and Tk 8.6.9\nbpo-35401\n: Updates Windows build to OpenSSL 1.1.0j\nbpo-34977\n: venv on Windows will now use a python.exe redirector rather\nthan copying the actual binaries from the base environment.\nbpo-34977\n: Adds support for building a Windows App Store package\nbpo-35067\n: Remove _distutils_findvs module and use vswhere.exe instead.\nbpo-32557\n: Allow shutil.disk_usage to take a file path on Windows\nbpo-34770\n: Fix a possible null pointer dereference in pyshellext.cpp.\nbpo-34603\n: Fix returning structs from functions produced by MSVC\nbpo-34581\n: Guard MSVC-specific code in socketmodule.c with\n#ifdef\n_MSC_VER\n.\nbpo-34532\n: Fixes exit code of list version arguments for py.exe.\nbpo-34062\n: Fixed the ‘–list’ and ‘–list-paths’ arguments for the py.exe\nlauncher\nbpo-34225\n: Ensure INCLUDE and LIB directories do not end with a backslash.\nbpo-34011\n: A suite of code has been changed which copied across DLLs and\ninit.tcl from the running Python location into a venv being created. These\ncopies are needed only when running from a Python source build, and the\ncopying code is now only run when that is the case, rather than whenever a\nvenv is created.\nbpo-34006\n: Revert line length limit for Windows help docs. The line-length\nlimit is not needed because the pages appear in a separate app rather than\non a browser tab.  It can also interact badly with the DPI setting.\nbpo-31546\n: Restore running PyOS_InputHook while waiting for user input at\nthe prompt. The restores integration of interactive GUI windows (such as\nMatplotlib figures) with the prompt on Windows.\nbpo-30237\n: Output error when ReadConsole is canceled by\nCancelSynchronousIo instead of crashing.\nbpo-33895\n: GIL is released while calling functions that acquire Windows\nloader lock.\nbpo-33720\n: Reduces maximum marshal recursion depth on release builds.\nbpo-29097\n: Fix bug where\ndatetime.fromtimestamp()\nerroneously throws\nan\nOSError\non Windows for values between 0 and 86400. Patch by\nAmmar Askar.\nbpo-33316\n: PyThread_release_lock always fails\nbpo-33184\n: Update Windows installer to use OpenSSL 1.1.0h.\nbpo-32890\n: Fix usage of GetLastError() instead of errno in os.execve() and\nos.truncate().\nbpo-33016\n: Fix potential use of uninitialized memory in\nnt._getfinalpathname\nbpo-32903\n: Fix a memory leak in os.chdir() on Windows if the current\ndirectory is set to a UNC path.\nbpo-32901\n: Update Tcl and Tk versions to 8.6.8\nbpo-31966\n: Fixed WindowsConsoleIO.write() for writing empty data.\nbpo-32409\n: Ensures activate.bat can handle Unicode contents.\nbpo-32457\n: Improves handling of denormalized executable path when\nlaunching Python.\nbpo-32370\n: Use the correct encoding for ipconfig output in the uuid\nmodule. Patch by Segev Finer.\nbpo-29248\n: Fix\nos.readlink()\non Windows, which was mistakenly\ntreating the\nPrintNameOffset\nfield of the reparse data buffer as a\nnumber of characters instead of bytes. Patch by Craig Holmquist and SSE4.\nbpo-1104\n: Correctly handle string length in\nmsilib.SummaryInfo.GetProperty()\nto prevent it from truncating the\nlast character.\nmacOS\n¶\nbpo-35401\n: Update macOS installer to use OpenSSL 1.1.0j.\nbpo-35025\n: Properly guard the use of the\nCLOCK_GETTIME\net al. macros\nin\ntimemodule\non macOS.\nbpo-24658\n: On macOS, fix reading from and writing into a file with a size\nlarger than 2 GiB.\nbpo-34405\n: Update to OpenSSL 1.1.0i for macOS installer builds.\nbpo-33635\n: In macOS stat on some file descriptors (/dev/fd/3 f.e) will\nresult in bad file descriptor OSError. Guard against this exception was\nadded in is_dir, is_file and similar methods. DirEntry.is_dir can also\nthrow this exception so _RecursiveWildcardSelector._iterate_directories\nwas also extended with the same error ignoring pattern.\nbpo-13631\n: The .editrc file in user’s home directory is now processed\ncorrectly during the readline initialization through editline emulation on\nmacOS.\nbpo-33184\n: Update macOS installer build to use OpenSSL 1.1.0h.\nbpo-32726\n: Build and link with private copy of Tcl/Tk 8.6 for the macOS\n10.6+ installer. The 10.9+ installer variant already does this.  This\nmeans that the Python 3.7 provided by the python.org macOS installers no\nlonger need or use any external versions of Tcl/Tk, either system-provided\nor user-installed, such as ActiveTcl.\nbpo-32901\n: Update macOS 10.9+ installer to Tcl/Tk 8.6.8.\nbpo-31903\n: In\n_scproxy\n, drop the GIL when calling into\nSystemConfiguration\nto avoid deadlocks.\nIDLE\n¶\nbpo-35770\n: IDLE macosx deletes Options => Configure IDLE. It previously\ndeleted Window => Zoom Height by mistake. (Zoom Height is now on the\nOptions menu).  On Mac, the settings dialog is accessed via Preferences on\nthe IDLE menu.\nbpo-35769\n: Change IDLE’s new file name from ‘Untitled’ to ‘untitled’\nbpo-35660\n: Fix imports in idlelib.window.\nbpo-35641\n: Proper format\ncalltip\nwhen the function has no docstring.\nbpo-33987\n: Use ttk Frame for ttk widgets.\nbpo-34055\n: Fix erroneous ‘smart’ indents and newlines in IDLE Shell.\nbpo-35591\n: Find Selection now works when selection not found.\nbpo-35196\n: Speed up squeezer line counting.\nbpo-35598\n: Update config_key: use PEP 8 names and ttk widgets, make some\nobjects global, and add tests.\nbpo-28097\n: Add Previous/Next History entries to Shell menu.\nbpo-35208\n: Squeezer now properly counts wrapped lines before newlines.\nbpo-35555\n: Gray out Code Context menu entry when it’s not applicable.\nbpo-35521\n: Document the IDLE editor code context feature. Add some\ninternal references within the IDLE doc.\nbpo-22703\n: The Code Context menu label now toggles between Show/Hide Code\nContext. The Zoom Height menu now toggles between Zoom/Restore Height.\nZoom Height has moved from the Window menu to the Options menu.\nbpo-35213\n: Where appropriate, use ‘macOS’ in idlelib.\nbpo-34864\n: On macOS, warn if the system preference “Prefer tabs when\nopening documents” is set to “Always”.\nbpo-34864\n: Document two IDLE on MacOS issues. The System Preferences Dock\n“prefer tabs always” setting disables some IDLE features.  Menus are a bit\ndifferent than as described for Windows and Linux.\nbpo-35202\n: Remove unused imports from lib/idlelib\nbpo-33000\n: Document that IDLE’s shell has no line limit. A program that\nruns indefinitely can overfill memory.\nbpo-23220\n: Explain how IDLE’s Shell displays output.\nbpo-35099\n: Improve the doc about IDLE running user code.   The section is\nrenamed from “IDLE – console differences” is renamed “Running user code”.\nIt mostly covers the implications of using custom\nsys.std\nxxx\nobjects.\nbpo-35097\n: Add IDLE doc subsection explaining editor windows. Topics\ninclude opening, title and status bar, .py* extension, and running.\nbpo-35093\n: Document the IDLE document viewer in the IDLE doc. Add a\nparagraph in “Help and preferences”, “Help sources” subsection.\nbpo-35088\n: Update idlelib.help.copy_string docstring. We now use git and\nbackporting instead of hg and forward merging.\nbpo-35087\n: Update idlelib help files for the current doc build. The main\nchange is the elimination of chapter-section numbers.\nbpo-34548\n: Use configured color theme for read-only text views.\nbpo-1529353\n: Enable “squeezing” of long outputs in the shell, to avoid\nperformance degradation and to clean up the history without losing it.\nSqueezed outputs may be copied, viewed in a separate window, and\n“unsqueezed”.\nbpo-34047\n: Fixed mousewheel scrolling direction on macOS.\nbpo-34275\n: Make IDLE calltips always visible on Mac. Some MacOS-tk\ncombinations need .update_idletasks(). Patch by Kevin Walzer.\nbpo-34120\n: Fix unresponsiveness after closing certain windows and dialogs.\nbpo-33975\n: Avoid small type when running htests. Since part of the purpose\nof human-viewed tests is to determine that widgets look right, it is\nimportant that they look the same for testing as when running IDLE.\nbpo-33905\n: Add test for idlelib.stackview.StackBrowser.\nbpo-33924\n: Change mainmenu.menudefs key ‘windows’ to ‘window’. Every other\nmenudef key is lowercase version of main menu entry.\nbpo-33906\n: Rename idlelib.windows as window Match Window on the main menu\nand remove last plural module name.\nbpo-33917\n: Fix and document idlelib/idle_test/template.py. The revised\nfile compiles, runs, and tests OK.  idle_test/README.txt explains how to\nuse it to create new IDLE test files.\nbpo-33904\n: IDLE: In rstrip, rename class RstripExtension as Rstrip\nbpo-33907\n: For consistency and clarity, rename an IDLE module and classes.\nModule calltips and its class CallTips are now calltip and Calltip. In\nmodule calltip_w, class CallTip is now CalltipWindow.\nbpo-33856\n: Add “help” in the welcome message of IDLE\nbpo-33839\n: IDLE: refactor ToolTip and CallTip and add documentation and\ntests\nbpo-33855\n: Minimally test all IDLE modules. Add missing files, import\nmodule, instantiate classes, and check coverage. Check existing files.\nbpo-33656\n: On Windows, add API call saying that tk scales for DPI. On\nWindows 8.1+ or 10, with DPI compatibility properties of the Python binary\nunchanged, and a monitor resolution greater than 96 DPI, this should make\ntext and lines sharper.  It should otherwise have no effect.\nbpo-33768\n: Clicking on a context line moves that line to the top of the\neditor window.\nbpo-33763\n: IDLE: Use read-only text widget for code context instead of\nlabel widget.\nbpo-33664\n: Scroll IDLE editor text by lines. Previously, the mouse wheel\nand scrollbar slider moved text by a fixed number of pixels, resulting in\npartial lines at the top of the editor box.  The change also applies to\nthe shell and grep output windows, but not to read-only text views.\nbpo-33679\n: Enable theme-specific color configuration for Code Context. Use\nthe Highlights tab to see the setting for built-in themes or add settings\nto custom themes.\nbpo-33642\n: Display up to maxlines non-blank lines for Code Context. If\nthere is no current context, show a single blank line.\nbpo-33628\n: IDLE: Cleanup codecontext.py and its test.\nbpo-33564\n: IDLE’s code context now recognizes async as a block opener.\nbpo-21474\n: Update word/identifier definition from ascii to unicode. In\ntext and entry boxes, this affects selection by double-click, movement\nleft/right by control-left/right, and deletion left/right by\ncontrol-BACKSPACE/DEL.\nbpo-33204\n: IDLE: consistently color invalid string prefixes. A ‘u’ string\nprefix cannot be paired with either ‘r’ or ‘f’. Consistently color as much\nof the prefix, starting at the right, as is valid. Revise and extend\ncolorizer test.\nbpo-32984\n: Set\n__file__\nwhile running a startup file.  Like Python,\nIDLE optionally runs one startup file in the Shell window before\npresenting the first interactive input prompt.  For IDLE,\n-s\nruns a\nfile named in environmental variable\nIDLESTARTUP\nor\nPYTHONSTARTUP\n;\n-r\nfile\nruns\nfile\n.  Python sets\n__file__\nto the startup file name before running the file and unsets\nit before the first prompt.  IDLE now does the same when run normally,\nwithout the\n-n\noption.\nbpo-32940\n: Simplify and rename StringTranslatePseudoMapping in pyparse.\nbpo-32916\n: Change\nstr\nto\ncode\nin pyparse.\nbpo-32905\n: Remove unused code in pyparse module.\nbpo-32874\n: Add tests for pyparse.\nbpo-32837\n: Using the system and place-dependent default encoding for\nopen() is a bad idea for IDLE’s system and location-independent files.\nbpo-32826\n: Add “encoding=utf-8” to open() in IDLE’s test_help_about. GUI\ntest test_file_buttons() only looks at initial ascii-only lines, but\nfailed on systems where open() defaults to ‘ascii’ because readline()\ninternally reads and decodes far enough ahead to encounter a non-ascii\ncharacter in CREDITS.txt.\nbpo-32831\n: Add docstrings and tests for codecontext.\nbpo-32765\n: Update configdialog General tab docstring to add new widgets to\nthe widget list.\nTools/Demos\n¶\nbpo-35884\n: Add a benchmark script for timing various ways to access\nvariables:\nTools/scripts/var_access_benchmark.py\n.\nbpo-34989\n: python-gdb.py now handles errors on computing the line number\nof a Python frame.\nbpo-20260\n: Argument Clinic now has non-bitwise unsigned int converters.\nbpo-32962\n: python-gdb now catches\nUnicodeDecodeError\nexceptions when\ncalling\nstring()\n.\nbpo-32962\n: python-gdb now catches ValueError on read_var(): when Python\nhas no debug symbols for example.\nbpo-33189\n:\npygettext.py\nnow recognizes only literal strings as\ndocstrings and translatable strings, and rejects bytes literals and\nf-string expressions.\nbpo-31920\n: Fixed handling directories as arguments in the\npygettext\nscript. Based on patch by Oleg Krasnikov.\nbpo-29673\n: Fix pystackv and pystack gdbinit macros.\nbpo-25427\n: Remove the pyvenv script in favor of\npython3\n-m\nvenv\nin\norder to lower confusion as to what Python interpreter a virtual\nenvironment will be created for.\nbpo-32885\n: Add an\n-n\nflag for\nTools/scripts/pathfix.py\nto disable\nautomatic backup creation (files with\n~\nsuffix).\nbpo-32222\n: Fix pygettext not extracting docstrings for functions with type\nannotated arguments. Patch by Toby Harradine.\nbpo-31583\n: Fix 2to3 for using with –add-suffix option but without\n–output-dir option for relative path to files in current directory.\nC API\n¶\nbpo-35713\n: The\nPyByteArray_Init()\nand\nPyByteArray_Fini()\nfunctions have been removed. They did nothing since Python 2.7.4 and\nPython 3.2.0, were excluded from the limited API (stable ABI), and were\nnot documented.\nbpo-33817\n: Fixed\n_PyBytes_Resize()\nfor empty bytes objects.\nbpo-35322\n: Fix memory leak in\nPyUnicode_EncodeLocale()\nand\nPyUnicode_EncodeFSDefault()\non error handling.\nbpo-35059\n: The following C macros have been converted to static inline\nfunctions:\nPy_INCREF()\n,\nPy_DECREF()\n,\nPy_XINCREF()\n,\nPy_XDECREF()\n,\nPyObject_INIT()\n,\nPyObject_INIT_VAR()\n.\nbpo-35296\n:\nmake\ninstall\nnow also installs the internal API:\nInclude/internal/*.h\nheader files.\nbpo-35081\n: Internal APIs surrounded by\n#ifdef\nPy_BUILD_CORE\nhave been\nmoved from\nInclude/*.h\nheaders to new header files\nInclude/internal/pycore_*.h\n.\nbpo-35259\n: Conditionally declare\nPy_FinalizeEx()\n(new in 3.6)\nbased on Py_LIMITED_API. Patch by Arthur Neufeld.\nbpo-35081\n: The\n_PyObject_GC_TRACK()\nand\n_PyObject_GC_UNTRACK()\nmacros have been removed from the public C\nAPI.\nbpo-35134\n: Creation of a new\nInclude/cpython/\nsubdirectory.\nbpo-34725\n: Adds _Py_SetProgramFullPath so embedders may override\nsys.executable\nbpo-34910\n: Ensure that\nPyObject_Print()\nalways returns\n-1\non\nerror.  Patch by Zackery Spytz.\nbpo-34523\n: Py_DecodeLocale() and Py_EncodeLocale() now use the UTF-8\nencoding on Windows if Py_LegacyWindowsFSEncodingFlag is zero.\nbpo-34193\n: Fix pluralization in TypeError messages in getargs.c and\ntypeobject.c: ‘1 argument’ instead of ‘1 arguments’ and ‘1 element’\ninstead of ‘1 elements’.\nbpo-34127\n: Return grammatically correct error message based on argument\ncount. Patch by Karthikeyan Singaravelan.\nbpo-23927\n: Fixed\nSystemError\nin\nPyArg_ParseTupleAndKeywords()\nwhen the\nw*\nformat unit is used\nfor optional parameter.\nbpo-32455\n: Added\nPyCompile_OpcodeStackEffectWithJump()\n.\nbpo-34008\n: Py_Main() can again be called after Py_Initialize(), as in\nPython 3.6.\nbpo-32500\n: Fixed error messages for\nPySequence_Size()\n,\nPySequence_GetItem()\n,\nPySequence_SetItem()\nand\nPySequence_DelItem()\ncalled with a mapping and\nPyMapping_Size()\ncalled with a sequence.\nbpo-33818\n:\nPyExceptionClass_Name()\nwill now return\nconst\nchar\n*\ninstead of\nchar\n*\n.\nbpo-33042\n: Embedding applications may once again call\nPySys_ResetWarnOptions, PySys_AddWarnOption, and PySys_AddXOption prior to\ncalling Py_Initialize.\nbpo-32374\n: Document that m_traverse for multi-phase initialized modules\ncan be called with m_state=NULL, and add a sanity check\nbpo-30863\n:\nPyUnicode_AsWideChar()\nand\nPyUnicode_AsWideCharString()\nno longer cache the\nwchar_t*\nrepresentation of string objects.\nPython 3.7.0 final\n¶\nRelease date: 2018-06-27\nLibrary\n¶\nbpo-33851\n: Fix\nast.get_docstring()\nfor a node that lacks a\ndocstring.\nC API\n¶\nbpo-33932\n: Calling Py_Initialize() twice does nothing, instead of failing\nwith a fatal error: restore the Python 3.6 behaviour.\nPython 3.7.0 release candidate 1\n¶\nRelease date: 2018-06-12\nCore and Builtins\n¶\nbpo-33803\n: Fix a crash in hamt.c caused by enabling GC tracking for an\nobject that hadn’t all of its fields set to NULL.\nbpo-33706\n: Fix a crash in Python initialization when parsing the command\nline options. Thanks Christoph Gohlke for the bug report and the fix!\nbpo-30654\n: Fixed reset of the SIGINT handler to SIG_DFL on interpreter\nshutdown even when there was a custom handler set previously. Patch by\nPhilipp Kerling.\nbpo-31849\n: Fix signed/unsigned comparison warning in pyhash.c.\nLibrary\n¶\nbpo-30167\n: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by\nSteve Weber.\nbpo-33812\n: Datetime instance d with non-None tzinfo, but with\nd.tzinfo.utcoffset(d) returning None is now treated as naive by the\nastimezone() method.\nbpo-30805\n: Avoid race condition with debug logging\nbpo-33694\n: asyncio: Fix a race condition causing data loss on\npause_reading()/resume_reading() when using the ProactorEventLoop.\nbpo-32493\n: Correct test for\nuuid_enc_be\navailability in\nconfigure.ac\n. Patch by Michael Felt.\nbpo-33792\n: Add asyncio.WindowsSelectorEventLoopPolicy and\nasyncio.WindowsProactorEventLoopPolicy.\nbpo-33778\n: Update\nunicodedata\n’s database to Unicode version 11.0.0.\nbpo-33770\n: improve base64 exception message for encoded inputs of invalid\nlength\nbpo-33769\n: asyncio/start_tls: Fix error message; cancel callbacks in case\nof an unhandled error; mark SSLTransport as closed if it is aborted.\nbpo-33767\n: The concatenation (\n+\n) and repetition (\n*\n) sequence\noperations now raise\nTypeError\ninstead of\nSystemError\nwhen\nperformed on\nmmap.mmap\nobjects.  Patch by Zackery Spytz.\nbpo-33734\n: asyncio/ssl: Fix AttributeError, increase default handshake\ntimeout\nbpo-11874\n: Use a better regex when breaking usage into wrappable parts.\nAvoids bogus assertion errors from custom metavar strings.\nbpo-33582\n: Emit a deprecation warning for inspect.formatargspec\nDocumentation\n¶\nbpo-33409\n: Clarified the relationship between\nPEP 538\n’s\nPYTHONCOERCECLOCALE and PEP 540’s PYTHONUTF8 mode.\nbpo-33736\n: Improve the documentation of\nasyncio.open_connection()\n,\nasyncio.start_server()\nand their UNIX socket counterparts.\nbpo-31432\n: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED\nflags for ssl.SSLContext.verify_mode.\nBuild\n¶\nbpo-5755\n: Move\n-Wstrict-prototypes\noption to\nCFLAGS_NODIST\nfrom\nOPT\n. This option emitted annoying warnings when building extension\nmodules written in C++.\nWindows\n¶\nbpo-33720\n: Reduces maximum marshal recursion depth on release builds.\nIDLE\n¶\nbpo-33656\n: On Windows, add API call saying that tk scales for DPI. On\nWindows 8.1+ or 10, with DPI compatibility properties of the Python binary\nunchanged, and a monitor resolution greater than 96 DPI, this should make\ntext and lines sharper.  It should otherwise have no effect.\nbpo-33768\n: Clicking on a context line moves that line to the top of the\neditor window.\nbpo-33763\n: IDLE: Use read-only text widget for code context instead of\nlabel widget.\nbpo-33664\n: Scroll IDLE editor text by lines. Previously, the mouse wheel\nand scrollbar slider moved text by a fixed number of pixels, resulting in\npartial lines at the top of the editor box.  The change also applies to\nthe shell and grep output windows, but not to read-only text views.\nbpo-33679\n: Enable theme-specific color configuration for Code Context. Use\nthe Highlights tab to see the setting for built-in themes or add settings\nto custom themes.\nbpo-33642\n: Display up to maxlines non-blank lines for Code Context. If\nthere is no current context, show a single blank line.\nPython 3.7.0 beta 5\n¶\nRelease date: 2018-05-30\nCore and Builtins\n¶\nbpo-33622\n: Fixed a leak when the garbage collector fails to add an object\nwith the\n__del__\nmethod or referenced by it into the\ngc.garbage\nlist.\nPyGC_Collect()\ncan now be called when an\nexception is set and preserves it.\nbpo-33509\n: Fix module_globals parameter of warnings.warn_explicit(): don’t\ncrash if module_globals is not a dict.\nbpo-20104\n: The new\nos.posix_spawn\nadded in 3.7.0b1 was removed as we\nare still working on what the API should look like.  Expect this in 3.8\ninstead.\nbpo-33475\n: Fixed miscellaneous bugs in converting annotations to strings\nand optimized parentheses in the string representation.\nbpo-33391\n: Fix a leak in set_symmetric_difference().\nbpo-28055\n: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.\nbpo-32911\n: Due to unexpected compatibility issues discovered during\ndownstream beta testing, reverted\nbpo-29463\n.\ndocstring\nfield is\nremoved from Module, ClassDef, FunctionDef, and AsyncFunctionDef ast nodes\nwhich was added in 3.7a1.  Docstring expression is restored as a first\nstatement in their body. Based on patch by Inada Naoki.\nbpo-21983\n: Fix a crash in\nctypes.cast()\nin case the type argument is a\nctypes structured data type. Patch by Eryk Sun and Oren Milman.\nLibrary\n¶\nbpo-32751\n: When cancelling the task due to a timeout,\nasyncio.wait_for()\nwill now wait until the cancellation is complete.\nbpo-32684\n: Fix gather to propagate cancellation of itself even with\nreturn_exceptions.\nbpo-33654\n: Support protocol type switching in SSLTransport.set_protocol().\nbpo-33674\n: Pause the transport as early as possible to further reduce the\nrisk of data_received() being called before connection_made().\nbpo-33674\n: Fix a race condition in SSLProtocol.connection_made() of\nasyncio.sslproto: start immediately the handshake instead of using\ncall_soon(). Previously, data_received() could be called before the\nhandshake started, causing the handshake to hang or fail.\nbpo-31647\n: Fixed bug where calling write_eof() on a\n_SelectorSocketTransport after it’s already closed raises AttributeError.\nbpo-32610\n: Make asyncio.all_tasks() return only pending tasks.\nbpo-32410\n: Avoid blocking on file IO in sendfile fallback code\nbpo-33469\n: Fix RuntimeError after closing loop that used run_in_executor\nbpo-33672\n: Fix Task.__repr__ crash with Cython’s bogus coroutines\nbpo-33654\n: Fix transport.set_protocol() to support switching between\nasyncio.Protocol and asyncio.BufferedProtocol.  Fix loop.start_tls() to\nwork with asyncio.BufferedProtocols.\nbpo-33652\n: Pickles of type variables and subscripted generics are now\nfuture-proof and compatible with older Python versions.\nbpo-32493\n: Fixed\nuuid.uuid1()\non FreeBSD.\nbpo-33618\n: Finalize and document preliminary and experimental TLS 1.3\nsupport with OpenSSL 1.1.1\nbpo-33623\n: Fix possible SIGSGV when asyncio.Future is created in __del__\nbpo-30877\n: Fixed a bug in the Python implementation of the JSON decoder\nthat prevented the cache of parsed strings from clearing after finishing\nthe decoding. Based on patch by c-fos.\nbpo-33570\n: Change TLS 1.3 cipher suite settings for compatibility with\nOpenSSL 1.1.1-pre6 and newer. OpenSSL 1.1.1 will have TLS 1.3 ciphers\nenabled by default.\nbpo-28556\n: Do not simplify arguments to\ntyping.Union\n. Now\nUnion[Manager,\nEmployee]\nis not simplified to\nEmployee\nat runtime.\nSuch simplification previously caused several bugs and limited\npossibilities for introspection.\nbpo-33540\n: Add a new\nblock_on_close\nclass attribute to\nForkingMixIn\nand\nThreadingMixIn\nclasses of\nsocketserver\n.\nbpo-33548\n: tempfile._candidate_tempdir_list should consider common TEMP\nlocations\nbpo-33109\n: argparse subparsers are once again not required by default,\nreverting the change in behavior introduced by\nbpo-26510\nin 3.7.0a2.\nbpo-33536\n: dataclasses.make_dataclass now checks for invalid field names\nand duplicate fields. Also, added a check for invalid field\nspecifications.\nbpo-33542\n: Prevent\nuuid.get_node\nfrom using a DUID instead of a MAC on\nWindows. Patch by Zvi Effron\nbpo-26819\n: Fix race condition with\nReadTransport.resume_reading\nin\nWindows proactor event loop.\nFix failure in\ntyping.get_type_hints()\nwhen ClassVar was provided as a\nstring forward reference.\nbpo-33505\n: Optimize asyncio.ensure_future() by reordering if checks: 1.17x\nfaster.\nbpo-33497\n: Add errors param to cgi.parse_multipart and make an encoding in\nFieldStorage use the given errors (needed for Twisted).  Patch by Amber\nBrown.\nbpo-33495\n: Change dataclasses.Fields repr to use the repr of each of its\nmembers, instead of str.  This makes it more clear what each field\nactually represents.  This is especially true for the ‘type’ member.\nbpo-33453\n: Fix dataclasses to work if using literal string type\nannotations or if using PEP 563 “Postponed Evaluation of Annotations”.\nOnly specific string prefixes are detected for both ClassVar (“ClassVar”\nand “typing.ClassVar”) and InitVar (“InitVar” and “dataclasses.InitVar”).\nbpo-28556\n: Minor fixes in typing module: add annotations to\nNamedTuple.__new__\n, pass\n*args\nand\n**kwds\nin\nGeneric.__new__\n.  Original PRs by Paulius Šarka and Chad Dombrova.\nbpo-20087\n: Updated alias mapping with glibc 2.27 supported locales.\nbpo-33422\n: Fix trailing quotation marks getting deleted when looking up\nbyte/string literals on pydoc. Patch by Andrés Delfino.\nbpo-28167\n: The function\nplatform.linux_distribution\nand\nplatform.dist\nnow trigger a\nDeprecationWarning\nand have been\nmarked for removal in Python 3.8\nbpo-33197\n: Update error message when constructing invalid\ninspect.Parameters Patch by Donghee Na.\nbpo-33263\n: Fix FD leak in\n_SelectorSocketTransport\nPatch by Vlad\nStarostin.\nbpo-32861\n: The urllib.robotparser’s\n__str__\nrepresentation now\nincludes wildcard entries and the “Crawl-delay” and “Request-rate” fields.\nPatch by Michael Lazar.\nbpo-32257\n: The ssl module now contains OP_NO_RENEGOTIATION constant,\navailable with OpenSSL 1.1.0h or 1.1.1.\nbpo-16865\n: Support arrays >=2GiB in\nctypes\n.  Patch by Segev Finer.\nDocumentation\n¶\nbpo-23859\n: Document that\nasyncio.wait()\ndoes not cancel its futures on\ntimeout.\nbpo-32436\n: Document\nPEP 567\nchanges to asyncio.\nbpo-33604\n: Update HMAC md5 default to a DeprecationWarning, bump removal\nto 3.8.\nbpo-33503\n: Fix broken pypi link\nbpo-33421\n: Add missing documentation for\ntyping.AsyncContextManager\n.\nTests\n¶\nbpo-33655\n: Ignore test_posix_fallocate failures on BSD platforms that\nmight be due to running on ZFS.\nbpo-32604\n: Remove the _xxsubinterpreters module (meant for testing) and\nassociated helpers.  This module was originally added recently in 3.7b1.\nBuild\n¶\nbpo-33614\n: Ensures module definition files for the stable ABI on Windows\nare correctly regenerated.\nbpo-33522\n: Enable CI builds on Visual Studio Team Services at\nhttps://python.visualstudio.com/cpython\nbpo-33012\n: Add\n-Wno-cast-function-type\nfor gcc 8 for silencing\nwarnings about function casts like casting to PyCFunction in method\ndefinition lists.\nmacOS\n¶\nbpo-13631\n: The .editrc file in user’s home directory is now processed\ncorrectly during the readline initialization through editline emulation on\nmacOS.\nIDLE\n¶\nbpo-33628\n: IDLE: Cleanup codecontext.py and its test.\nbpo-33564\n: IDLE’s code context now recognizes async as a block opener.\nbpo-32831\n: Add docstrings and tests for codecontext.\nPython 3.7.0 beta 4\n¶\nRelease date: 2018-05-02\nCore and Builtins\n¶\nbpo-33363\n: Raise a SyntaxError for\nasync\nwith\nand\nasync\nfor\nstatements outside of async functions.\nbpo-33128\n: Fix a bug that causes PathFinder to appear twice on\nsys.meta_path. Patch by Pablo Galindo Salgado.\nbpo-33312\n: Fixed clang ubsan (undefined behavior sanitizer) warnings in\ndictobject.c by adjusting how the internal struct _dictkeysobject shared\nkeys structure is declared.\nbpo-33231\n: Fix potential memory leak in\nnormalizestring()\n.\nbpo-33205\n: Change dict growth function from\nround_up_to_power_2(used*2+hashtable_size/2)\nto\nround_up_to_power_2(used*3)\n.  Previously, dict is shrinked only when\nused\n==\n0\n. Now dict has more chance to be shrinked.\nbpo-29922\n: Improved error messages in ‘async with’ when\n__aenter__()\nor\n__aexit__()\nreturn non-awaitable object.\nbpo-33199\n: Fix\nma_version_tag\nin dict implementation is uninitialized\nwhen copying from key-sharing dict.\nLibrary\n¶\nbpo-33281\n: Fix ctypes.util.find_library regression on macOS.\nbpo-33383\n: Fixed crash in the get() method of the\ndbm.ndbm\ndatabase\nobject when it is called with a single argument.\nbpo-33329\n: Fix multiprocessing regression on newer glibcs\nbpo-991266\n: Fix quoting of the\nComment\nattribute of\nhttp.cookies.SimpleCookie\n.\nbpo-33131\n: Upgrade bundled version of pip to 10.0.1.\nbpo-33308\n: Fixed a crash in the\nparser\nmodule when converting an ST\nobject to a tree of tuples or lists with\nline_info=False\nand\ncol_info=True\n.\nbpo-33266\n: lib2to3 now recognizes\nrf'...'\nstrings.\nbpo-11594\n: Ensure line-endings are respected when using lib2to3.\nbpo-33254\n: Have\nimportlib.resources.contents()\nand\nimportlib.abc.ResourceReader.contents()\nreturn an\niterable\ninstead of an\niterator\n.\nbpo-33256\n: Fix display of\n<module>\ncall in the html produced by\ncgitb.html()\n. Patch by Stéphane Blondon.\nbpo-33185\n: Fixed regression when running pydoc with the\n-m\nswitch. (The regression was introduced in 3.7.0b3 by the resolution of\nbpo-33053\n) This fix also changed pydoc to add\nos.getcwd()\nto\nsys.path\nwhen necessary, rather than adding\n\".\"\n.\nbpo-33169\n: Delete entries of\nNone\nin\nsys.path_importer_cache\nwhen\nimportlib.machinery.invalidate_caches()\nis called.\nbpo-33217\n: Deprecate looking up non-Enum objects in Enum classes and Enum\nmembers (will raise\nTypeError\nin 3.8+).\nbpo-33203\n:\nrandom.Random.choice()\nnow raises\nIndexError\nfor empty\nsequences consistently even when called from subclasses without a\ngetrandbits()\nimplementation.\nbpo-33224\n: Update difflib.mdiff() for\nPEP 479\n.  Convert an uncaught\nStopIteration in a generator into a return-statement.\nbpo-33209\n: End framing at the end of C implementation of\npickle.Pickler.dump()\n.\nbpo-20104\n: Improved error handling and fixed a reference leak in\nos.posix_spawn()\n.\nbpo-33175\n: In dataclasses, Field.__set_name__ now looks up the\n__set_name__ special method on the class, not the instance, of the default\nvalue.\nbpo-33097\n: Raise RuntimeError when\nexecutor.submit\nis called during\ninterpreter shutdown.\nbpo-31908\n: Fix output of cover files for\ntrace\nmodule command-line\ntool. Previously emitted cover files only when\n--missing\noption was\nused. Patch by Michael Selik.\nDocumentation\n¶\nbpo-33378\n: Add Korean language switcher for\nhttps://docs.python.org/3/\nbpo-33276\n: Clarify that the\n__path__\nattribute on modules cannot be\njust any value.\nbpo-33201\n: Modernize documentation for writing C extension types.\nbpo-33195\n: Deprecate\nPy_UNICODE\nusage in\nc-api/arg\ndocument.\nPy_UNICODE\nrelated APIs are deprecated since Python 3.3, but it is\nmissed in the document.\nbpo-8243\n: Add a note about curses.addch and curses.addstr exception\nbehavior when writing outside a window, or pad.\nbpo-32337\n: Update documentation related with\ndict\norder.\nTests\n¶\nbpo-33358\n: Fix\ntest_embed.test_pre_initialization_sys_options()\nwhen\nthe interpreter is built with\n--enable-shared\n.\nBuild\n¶\nbpo-33394\n: Enable the verbose build for extension modules, when GNU make\nis passed macros on the command line.\nbpo-33393\n: Update config.guess and config.sub files.\nbpo-33377\n: Add new triplets for mips r6 and riscv variants (used in\nextension suffixes).\nbpo-32232\n: By default, modules configured in\nModules/Setup\nare no\nlonger built with\n-DPy_BUILD_CORE\n. Instead, modules that specifically\nneed that preprocessor definition include it in their individual entries.\nbpo-33182\n: The embedding tests can once again be built with clang 6.0\nWindows\n¶\nbpo-33184\n: Update Windows installer to use OpenSSL 1.1.0h.\nmacOS\n¶\nbpo-33184\n: Update macOS installer build to use OpenSSL 1.1.0h.\nIDLE\n¶\nbpo-21474\n: Update word/identifier definition from ascii to unicode. In\ntext and entry boxes, this affects selection by double-click, movement\nleft/right by control-left/right, and deletion left/right by\ncontrol-BACKSPACE/DEL.\nbpo-33204\n: IDLE: consistently color invalid string prefixes. A ‘u’ string\nprefix cannot be paired with either ‘r’ or ‘f’. Consistently color as much\nof the prefix, starting at the right, as is valid. Revise and extend\ncolorizer test.\nTools/Demos\n¶\nbpo-33189\n:\npygettext.py\nnow recognizes only literal strings as\ndocstrings and translatable strings, and rejects bytes literals and\nf-string expressions.\nbpo-31920\n: Fixed handling directories as arguments in the\npygettext\nscript. Based on patch by Oleg Krasnikov.\nbpo-29673\n: Fix pystackv and pystack gdbinit macros.\nbpo-31583\n: Fix 2to3 for using with –add-suffix option but without\n–output-dir option for relative path to files in current directory.\nPython 3.7.0 beta 3\n¶\nRelease date: 2018-03-29\nSecurity\n¶\nbpo-33136\n: Harden ssl module against LibreSSL\nCVE 2018-8970\n.\nX509_VERIFY_PARAM_set1_host() is called with an explicit namelen. A new\ntest ensures that NULL bytes are not allowed.\nbpo-33001\n: Minimal fix to prevent buffer overrun in os.symlink on Windows\nbpo-32981\n: Regexes in difflib and poplib were vulnerable to catastrophic\nbacktracking. These regexes formed potential DOS vectors (REDOS). They\nhave been refactored. This resolves\nCVE 2018-1060\nand\nCVE 2018-1061\n.\nPatch by Jamie Davis.\nCore and Builtins\n¶\nbpo-33053\n: When using the -m switch, sys.path[0] is now explicitly\nexpanded as the\nstarting\nworking directory, rather than being left as\nthe empty path (which allows imports from the current working directory at\nthe time of the import)\nbpo-33018\n: Improve consistency of errors raised by\nissubclass()\nwhen\ncalled with a non-class and an abstract base class as the first and second\narguments, respectively. Patch by Josh Bronson.\nbpo-33041\n: Fixed jumping when the function contains an\nasync\nfor\nloop.\nbpo-33026\n: Fixed jumping out of “with” block by setting f_lineno.\nbpo-33005\n: Fix a crash on fork when using a custom memory allocator (ex:\nusing PYTHONMALLOC env var). _PyGILState_Reinit() and\n_PyInterpreterState_Enable() now use the default RAW memory allocator to\nallocate a new interpreters mutex on fork.\nbpo-17288\n: Prevent jumps from ‘return’ and ‘exception’ trace events.\nbpo-32836\n: Don’t use temporary variables in cases of list/dict/set\ncomprehensions\nLibrary\n¶\nbpo-33141\n: Have Field objects pass through __set_name__ to their default\nvalues, if they have their own __set_name__.\nbpo-33096\n: Allow ttk.Treeview.insert to insert iid that has a false\nboolean value. Note iid=0 and iid=False would be same. Patch by Garvit\nKhatri.\nbpo-32873\n: Treat type variables and special typing forms as immutable by\ncopy and pickle.  This fixes several minor issues and inconsistencies, and\nimproves backwards compatibility with Python 3.6.\nbpo-33134\n: When computing dataclass’s __hash__, use the lookup table to\ncontain the function which returns the __hash__ value.  This is an\nimprovement over looking up a string, and then testing that string to see\nwhat to do.\nbpo-33127\n: The ssl module now compiles with LibreSSL 2.7.1.\nbpo-32505\n: Raise TypeError if a member variable of a dataclass is of type\nField, but doesn’t have a type annotation.\nbpo-33078\n: Fix the failure on OSX caused by the tests relying on\nsem_getvalue\nbpo-33116\n: Add ‘Field’ to dataclasses.__all__.\nbpo-32896\n: Fix an error where subclassing a dataclass with a field that\nuses a default_factory would generate an incorrect class.\nbpo-33100\n: Dataclasses: If a field has a default value that’s a\nMemberDescriptorType, then it’s from that field being in __slots__, not an\nactual default value.\nbpo-32953\n: If a non-dataclass inherits from a frozen dataclass, allow\nattributes to be added to the derived class.  Only attributes from the\nfrozen dataclass cannot be assigned to.  Require all dataclasses in a\nhierarchy to be either all frozen or all non-frozen.\nbpo-33061\n: Add missing\nNoReturn\nto\n__all__\nin typing.py\nbpo-33078\n: Fix the size handling in multiprocessing.Queue when a pickling\nerror occurs.\nbpo-33064\n: lib2to3 now properly supports trailing commas after\n*args\nand\n**kwargs\nin function signatures.\nbpo-33056\n: FIX properly close leaking fds in\nconcurrent.futures.ProcessPoolExecutor.\nbpo-33021\n: Release the GIL during fstat() calls, avoiding hang of all\nthreads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch\nby Nir Soffer.\nbpo-31804\n: Avoid failing in multiprocessing.Process if the standard\nstreams are closed or None at exit.\nbpo-33037\n: Skip sending/receiving data after SSL transport closing.\nbpo-27683\n: Fix a regression in\nipaddress\nthat result of\nhosts()\nis empty when the network is constructed by a tuple\ncontaining an integer mask and only 1 bit left for addresses.\nbpo-32999\n: Fix C implementation of\nABC.__subclasscheck__(cls,\nsubclass)\ncrashed when\nsubclass\nis not a type object.\nbpo-33009\n: Fix inspect.signature() for single-parameter partialmethods.\nbpo-32969\n: Expose several missing constants in zlib and fix corresponding\ndocumentation.\nbpo-32056\n: Improved exceptions raised for invalid number of channels and\nsample width when read an audio file in modules\naifc\n,\nwave\nand\nsunau\n.\nbpo-32844\n: Fix wrong redirection of a low descriptor (0 or 1) to stderr in\nsubprocess if another low descriptor is closed.\nbpo-32857\n: In\ntkinter\n,\nafter_cancel(None)\nnow raises a\nValueError\ninstead of canceling the first scheduled function.\nPatch by Cheryl Sabella.\nbpo-31639\n: http.server now exposes a ThreadedHTTPServer class and uses it\nwhen the module is run with\n-m\nto cope with web browsers pre-opening\nsockets.\nbpo-27645\n:\nsqlite3.Connection\nnow exposes a\nbackup\nmethod, if the underlying SQLite\nlibrary is at version 3.6.11 or higher.  Patch by Lele Gaifax.\nDocumentation\n¶\nbpo-33126\n: Document PyBuffer_ToContiguous().\nbpo-27212\n: Modify documentation for the\nislice()\nrecipe to consume\ninitial values up to the start index.\nbpo-28247\n: Update\nzipapp\ndocumentation to describe how to make\nstandalone applications.\nbpo-18802\n: Documentation changes for ipaddress.  Patch by Jon Foster and\nBerker Peksag.\nbpo-27428\n: Update documentation to clarify that\nWindowsRegistryFinder\nimplements\nMetaPathFinder\n. (Patch by Himanshu Lakhara)\nTests\n¶\nbpo-32872\n: Avoid regrtest compatibility issue with namespace packages.\nbpo-32517\n: Fix failing\ntest_asyncio\non macOS 10.12.2+ due to transport\nof\nKqueueSelector\nloop was not being closed.\nbpo-19417\n: Add test_bdb.py.\nBuild\n¶\nbpo-33163\n: Upgrade pip to 9.0.3 and setuptools to v39.0.1.\nWindows\n¶\nbpo-33016\n: Fix potential use of uninitialized memory in\nnt._getfinalpathname\nbpo-32903\n: Fix a memory leak in os.chdir() on Windows if the current\ndirectory is set to a UNC path.\nmacOS\n¶\nbpo-32726\n: Build and link with private copy of Tcl/Tk 8.6 for the macOS\n10.6+ installer. The 10.9+ installer variant already does this.  This\nmeans that the Python 3.7 provided by the python.org macOS installers no\nlonger need or use any external versions of Tcl/Tk, either system-provided\nor user-installed, such as ActiveTcl.\nIDLE\n¶\nbpo-32984\n: Set\n__file__\nwhile running a startup file.  Like Python,\nIDLE optionally runs one startup file in the Shell window before\npresenting the first interactive input prompt.  For IDLE,\n-s\nruns a\nfile named in environmental variable\nIDLESTARTUP\nor\nPYTHONSTARTUP\n;\n-r\nfile\nruns\nfile\n.  Python sets\n__file__\nto the startup file name before running the file and unsets\nit before the first prompt.  IDLE now does the same when run normally,\nwithout the\n-n\noption.\nbpo-32940\n: Simplify and rename StringTranslatePseudoMapping in pyparse.\nTools/Demos\n¶\nbpo-32885\n: Add an\n-n\nflag for\nTools/scripts/pathfix.py\nto disable\nautomatic backup creation (files with\n~\nsuffix).\nC API\n¶\nbpo-33042\n: Embedding applications may once again call\nPySys_ResetWarnOptions, PySys_AddWarnOption, and PySys_AddXOption prior to\ncalling Py_Initialize.\nbpo-32374\n: Document that m_traverse for multi-phase initialized modules\ncan be called with m_state=NULL, and add a sanity check\nPython 3.7.0 beta 2\n¶\nRelease date: 2018-02-27\nSecurity\n¶\nbpo-28414\n: The ssl module now allows users to perform their own IDN\nen/decoding when using SNI.\nCore and Builtins\n¶\nbpo-32889\n: Update Valgrind suppression list to account for the rename of\nPy_ADDRESS_IN_RANG\nto\naddress_in_range\n.\nbpo-31356\n: Remove the new API added in\nbpo-31356\n(gc.ensure_disabled()\ncontext manager).\nbpo-32305\n: For namespace packages, ensure that both\n__file__\nand\n__spec__.origin\nare set to None.\nbpo-32303\n: Make sure\n__spec__.loader\nmatches\n__loader__\nfor\nnamespace packages.\nbpo-32711\n: Fix the warning messages for Python/ast_unparse.c. Patch by\nStéphane Wirtel\nbpo-32583\n: Fix possible crashing in builtin Unicode decoders caused by\nwrite out-of-bound errors when using customized decode error handlers.\nLibrary\n¶\nbpo-32960\n: For dataclasses, disallow inheriting frozen from non-frozen\nclasses, and also disallow inheriting non-frozen from frozen classes. This\nrestriction will be relaxed at a future date.\nbpo-32713\n: Fixed tarfile.itn handling of out-of-bounds float values. Patch\nby Joffrey Fuhrer.\nbpo-32951\n: Direct instantiation of SSLSocket and SSLObject objects is now\nprohibited. The constructors were never documented, tested, or designed as\npublic constructors. Users were suppose to use ssl.wrap_socket() or\nSSLContext.\nbpo-32929\n: Remove the tri-state parameter “hash”, and add the boolean\n“unsafe_hash”. If unsafe_hash is True, add a __hash__ function, but if a\n__hash__ exists, raise TypeError.  If unsafe_hash is False, add a __hash__\nbased on the values of eq= and frozen=.  The unsafe_hash=False behavior is\nthe same as the old hash=None behavior.  unsafe_hash=False is the default,\njust as hash=None used to be.\nbpo-32947\n: Add OP_ENABLE_MIDDLEBOX_COMPAT and test workaround for TLSv1.3\nfor future compatibility with OpenSSL 1.1.1.\nbpo-30622\n: The ssl module now detects missing NPN support in LibreSSL.\nbpo-32922\n: dbm.open() now encodes filename with the filesystem encoding\nrather than default encoding.\nbpo-32859\n: In\nos.dup2\n, don’t check every call whether the\ndup3\nsyscall exists or not.\nbpo-32556\n: nt._getfinalpathname, nt._getvolumepathname and\nnt._getdiskusage now correctly convert from bytes.\nbpo-25988\n: Emit a\nDeprecationWarning\nwhen using or importing an ABC\ndirectly from\ncollections\nrather than from\ncollections.abc\n.\nbpo-21060\n: Rewrite confusing message from setup.py upload from “No dist\nfile created in earlier command” to the more helpful “Must create and\nupload files in one command”.\nbpo-32852\n: Make sure sys.argv remains as a list when running trace.\nbpo-31333\n:\n_abc\nmodule is added.  It is a speedup module with C\nimplementations for various functions and methods in\nabc\n.  Creating an\nABC subclass and calling\nisinstance\nor\nissubclass\nwith an ABC\nsubclass are up to 1.5x faster. In addition, this makes Python start-up up\nto 10% faster. Note that the new implementation hides internal registry\nand caches, previously accessible via private attributes\n_abc_registry\n,\n_abc_cache\n, and\n_abc_negative_cache\n.  There are\nthree debugging helper methods that can be used instead\n_dump_registry\n,\n_abc_registry_clear\n, and\n_abc_caches_clear\n.\nbpo-32841\n: Fixed\nasyncio.Condition\nissue which silently ignored\ncancellation after notifying and cancelling a conditional lock. Patch by\nBar Harel.\nbpo-32819\n: ssl.match_hostname() has been simplified and no longer depends\non re and ipaddress module for wildcard and IP addresses. Error reporting\nfor invalid wildcards has been improved.\nbpo-32394\n: socket: Remove\nTCP_FASTOPEN,TCP_KEEPCNT,TCP_KEEPIDLE,TCP_KEEPINTVL flags on older version\nWindows during run-time.\nbpo-31787\n: Fixed refleaks of\n__init__()\nmethods in various modules.\n(Contributed by Oren Milman)\nbpo-30157\n: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when\nonly the last field is quoted.  Patch by Jake Davis.\nbpo-32792\n: collections.ChainMap() preserves the order of the underlying\nmappings.\nbpo-32775\n:\nfnmatch.translate()\nno longer produces patterns which\ncontain set operations. Sets starting with ‘[’ or containing ‘–’, ‘&&’,\n‘~~’ or ‘||’ will be interpreted differently in regular expressions in\nfuture versions. Currently they emit warnings. fnmatch.translate() now\navoids producing patterns containing such sets by accident.\nbpo-32622\n: Implement native fast sendfile for Windows proactor event loop.\nbpo-32777\n: Fix a rare but potential pre-exec child process deadlock in\nsubprocess on POSIX systems when marking file descriptors inheritable on\nexec in the child process.  This bug appears to have been introduced in\n3.4.\nbpo-32647\n: The ctypes module used to depend on indirect linking for\ndlopen. The shared extension is now explicitly linked against libdl on\nplatforms with dl.\nbpo-32741\n: Implement\nasyncio.TimerHandle.when()\nmethod.\nbpo-32691\n: Use mod_spec.parent when running modules with pdb\nbpo-32734\n: Fixed\nasyncio.Lock()\nsafety issue which allowed acquiring\nand locking the same lock multiple times, without it being free. Patch by\nBar Harel.\nbpo-32727\n: Do not include name field in SMTP envelope from address. Patch\nby Stéphane Wirtel\nbpo-31453\n: Add TLSVersion constants and SSLContext.maximum_version /\nminimum_version attributes. The new API wraps OpenSSL 1.1\nhttps://web.archive.org/web/20180309043602/https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_set_min_proto_version.html\nfeature.\nbpo-24334\n: Internal implementation details of ssl module were cleaned up.\nThe SSLSocket has one less layer of indirection. Owner and session\ninformation are now handled by the SSLSocket and SSLObject constructor.\nChannel binding implementation has been simplified.\nbpo-31848\n: Fix the error handling in Aifc_read.initfp() when the SSND\nchunk is not found. Patch by Zackery Spytz.\nbpo-32585\n: Add Ttk spinbox widget to\ntkinter.ttk\n.  Patch by Alan D\nMoore.\nbpo-32221\n: Various functions returning tuple containing IPv6 addresses now\nomit\n%scope\npart since the same information is already encoded in\nscopeid\ntuple item. Especially this speeds up\nsocket.recvfrom()\nwhen it receives multicast packet since useless resolving of network\ninterface name is omitted.\nbpo-30693\n: The TarFile class now recurses directories in a reproducible\nway.\nbpo-30693\n: The ZipFile class now recurses directories in a reproducible\nway.\nDocumentation\n¶\nbpo-28124\n: The ssl module function ssl.wrap_socket() has been\nde-emphasized and deprecated in favor of the more secure and efficient\nSSLContext.wrap_socket() method.\nbpo-17232\n: Clarify docs for -O and -OO.  Patch by Terry Reedy.\nbpo-32436\n: Add documentation for the contextvars module (PEP 567).\nbpo-32800\n: Update link to w3c doc for xml default namespaces.\nbpo-11015\n: Update\ntest.support\ndocumentation.\nbpo-8722\n: Document\n__getattr__()\nbehavior when property\nget()\nmethod raises\nAttributeError\n.\nbpo-32614\n: Modify RE examples in documentation to use raw strings to\nprevent\nDeprecationWarning\nand add text to REGEX HOWTO to highlight\nthe deprecation.\nbpo-31972\n: Improve docstrings for\npathlib.PurePath\nsubclasses.\nTests\n¶\nbpo-31809\n: Add tests to verify connection with secp ECDH curves.\nBuild\n¶\nbpo-32898\n: Fix the python debug build when using COUNT_ALLOCS.\nWindows\n¶\nbpo-32901\n: Update Tcl and Tk versions to 8.6.8\nbpo-31966\n: Fixed WindowsConsoleIO.write() for writing empty data.\nbpo-32409\n: Ensures activate.bat can handle Unicode contents.\nbpo-32457\n: Improves handling of denormalized executable path when\nlaunching Python.\nbpo-32370\n: Use the correct encoding for ipconfig output in the uuid\nmodule. Patch by Segev Finer.\nbpo-29248\n: Fix\nos.readlink()\non Windows, which was mistakenly\ntreating the\nPrintNameOffset\nfield of the reparse data buffer as a\nnumber of characters instead of bytes. Patch by Craig Holmquist and SSE4.\nmacOS\n¶\nbpo-32901\n: Update macOS 10.9+ installer to Tcl/Tk 8.6.8.\nIDLE\n¶\nbpo-32916\n: Change\nstr\nto\ncode\nin pyparse.\nbpo-32905\n: Remove unused code in pyparse module.\nbpo-32874\n: Add tests for pyparse.\nbpo-32837\n: Using the system and place-dependent default encoding for\nopen() is a bad idea for IDLE’s system and location-independent files.\nbpo-32826\n: Add “encoding=utf-8” to open() in IDLE’s test_help_about. GUI\ntest test_file_buttons() only looks at initial ascii-only lines, but\nfailed on systems where open() defaults to ‘ascii’ because readline()\ninternally reads and decodes far enough ahead to encounter a non-ascii\ncharacter in CREDITS.txt.\nbpo-32765\n: Update configdialog General tab docstring to add new widgets to\nthe widget list.\nTools/Demos\n¶\nbpo-32222\n: Fix pygettext not extracting docstrings for functions with type\nannotated arguments. Patch by Toby Harradine.\nPython 3.7.0 beta 1\n¶\nRelease date: 2018-01-30\nCore and Builtins\n¶\nbpo-32703\n: Fix coroutine’s ResourceWarning when there’s an active error\nset when it’s being finalized.\nbpo-32650\n: Pdb and other debuggers dependent on bdb.py will correctly step\nover (next command) native coroutines. Patch by Pablo Galindo.\nbpo-28685\n: Optimize list.sort() and sorted() by using type specialized\ncomparisons when possible.\nbpo-32685\n: Improve suggestion when the Python 2 form of print statement is\neither present on the same line as the header of a compound statement or\nelse terminated by a semi-colon instead of a newline. Patch by Nitish\nChandra.\nbpo-32697\n: Python now explicitly preserves the definition order of\nkeyword-only parameters.  It’s always preserved their order, but this\nbehavior was never guaranteed before; this behavior is now guaranteed and\ntested.\nbpo-32690\n: The locals() dictionary now displays in the lexical order that\nvariables were defined.  Previously, the order was reversed.\nbpo-32677\n: Add\n.isascii()\nmethod to\nstr\n,\nbytes\nand\nbytearray\n. It can be used to test that string contains only ASCII\ncharacters.\nbpo-32670\n: Enforce\nPEP 479\nfor all code. This means that manually\nraising a StopIteration exception from a generator is prohibited for all\ncode, regardless of whether ‘from __future__ import generator_stop’ was\nused or not.\nbpo-32591\n: Added built-in support for tracking the origin of coroutine\nobjects; see sys.set_coroutine_origin_tracking_depth and\nCoroutineType.cr_origin. This replaces the asyncio debug mode’s use of\ncoroutine wrapping for native coroutine objects.\nbpo-31368\n: Expose preadv and pwritev system calls in the os module. Patch\nby Pablo Galindo\nbpo-32544\n:\nhasattr(obj,\nname)\nand\ngetattr(obj,\nname,\ndefault)\nare\nabout 4 times faster than before when\nname\nis not found and\nobj\ndoesn’t override\n__getattr__\nor\n__getattribute__\n.\nbpo-26163\n: Improved frozenset() hash to create more distinct hash values\nwhen faced with datasets containing many similar values.\nbpo-32550\n: Remove the STORE_ANNOTATION bytecode.\nbpo-20104\n: Expose posix_spawn as a low level API in the os module.\n(removed before 3.7.0rc1)\nbpo-24340\n: Fixed estimation of the code stack size.\nbpo-32436\n: Implement\nPEP 567\nContext Variables.\nbpo-18533\n:\nrepr()\non a dict containing its own\nvalues()\nor\nitems()\nno longer raises\nRecursionError\n; OrderedDict similarly.\nInstead, use\n...\n, as for other recursive structures.  Patch by Ben\nNorth.\nbpo-20891\n: Py_Initialize() now creates the GIL. The GIL is no longer\ncreated “on demand” to fix a race condition when PyGILState_Ensure() is\ncalled in a non-Python thread.\nbpo-32028\n: Leading whitespace is now correctly ignored when generating\nsuggestions for converting Py2 print statements to Py3 builtin print\nfunction calls. Patch by Sanyam Khurana.\nbpo-31179\n: Make dict.copy() up to 5.5 times faster.\nbpo-31113\n: Get rid of recursion in the compiler for normal control flow.\nLibrary\n¶\nbpo-25988\n: Deprecate exposing the contents of collections.abc in the\nregular collections module.\nbpo-31429\n: The default cipher suite selection of the ssl module now uses a\nblacklist approach rather than a hard-coded whitelist. Python no longer\nre-enables ciphers that have been blocked by OpenSSL security update.\nDefault cipher suite selection can be configured on compile time.\nbpo-30306\n: contextlib.contextmanager now releases the arguments passed to\nthe underlying generator as soon as the context manager is entered.\nPreviously it would keep them alive for as long as the context manager was\nalive, even when not being used as a function decorator. Patch by Martin\nTeichmann.\nbpo-21417\n: Added support for setting the compression level for\nzipfile.ZipFile.\nbpo-32251\n: Implement asyncio.BufferedProtocol (provisional API).\nbpo-32513\n: In dataclasses, allow easier overriding of dunder methods\nwithout specifying decorator parameters.\nbpo-32660\n:\ntermios\nmakes available\nFIONREAD\n,\nFIONCLEX\n,\nFIOCLEX\n,\nFIOASYNC\nand\nFIONBIO\nalso under Solaris/derivatives.\nbpo-27931\n: Fix email address header parsing error when the username is an\nempty quoted string. Patch by Xiang Zhang.\nbpo-32659\n: Under Solaris and derivatives,\nos.stat_result\nprovides\na st_fstype attribute.\nbpo-32662\n: Implement Server.start_serving(), Server.serve_forever(), and\nServer.is_serving() methods.  Add ‘start_serving’ keyword parameter to\nloop.create_server() and loop.create_unix_server().\nbpo-32391\n: Implement\nasyncio.StreamWriter.wait_closed()\nand\nasyncio.StreamWriter.is_closing()\nmethods\nbpo-32643\n: Make Task._step, Task._wakeup and Future._schedule_callbacks\nmethods private.\nbpo-32630\n: Refactor decimal module to use contextvars to store decimal\ncontext.\nbpo-32622\n: Add\nasyncio.AbstractEventLoop.sendfile()\nmethod.\nbpo-32304\n: distutils’ upload command no longer corrupts tar files ending\nwith a CR byte, and no longer tries to convert CR to CRLF in any of the\nupload text fields.\nbpo-32502\n: uuid.uuid1 no longer raises an exception if a 64-bit hardware\naddress is encountered.\nbpo-32596\n:\nconcurrent.futures\nimports\nThreadPoolExecutor\nand\nProcessPoolExecutor\nlazily (using\nPEP 562\n). It makes\nimport\nasyncio\nabout 15% faster because asyncio uses only\nThreadPoolExecutor\nby default.\nbpo-31801\n: Add\n_ignore_\nto\nEnum\nso temporary variables can be used\nduring class construction without being turned into members.\nbpo-32576\n: Use queue.SimpleQueue() in places where it can be invoked from\na weakref callback.\nbpo-32574\n: Fix memory leak in asyncio.Queue, when the queue has limited\nsize and it is full, the cancelation of queue.put() can cause a memory\nleak. Patch by: José Melero.\nbpo-32521\n: The nis module is now compatible with new libnsl and headers\nlocation.\nbpo-32467\n: collections.abc.ValuesView now inherits from\ncollections.abc.Collection.\nbpo-32473\n: Improve ABCMeta._dump_registry() output readability\nbpo-32102\n: New argument\ncapture_output\nfor subprocess.run\nbpo-32521\n: glibc has removed Sun RPC. Use replacement libtirpc headers and\nlibrary in nis module.\nbpo-32493\n: UUID module fixes build for FreeBSD/OpenBSD\nbpo-32503\n: Pickling with protocol 4 no longer creates too small frames.\nbpo-29237\n: Create enum for pstats sorting options\nbpo-32454\n: Add close(fd) function to the socket module.\nbpo-25942\n: The subprocess module is now more graceful when handling a\nCtrl-C KeyboardInterrupt during subprocess.call, subprocess.run, or a\nPopen context manager.  It now waits a short amount of time for the child\n(presumed to have also gotten the SIGINT) to exit, before continuing the\nKeyboardInterrupt exception handling.  This still includes a SIGKILL in\nthe call() and run() APIs, but at least the child had a chance first.\nbpo-32433\n: The hmac module now has hmac.digest(), which provides an\noptimized HMAC digest.\nbpo-28134\n: Sockets now auto-detect family, type and protocol from file\ndescriptor by default.\nbpo-32404\n: Fix bug where\ndatetime.datetime.fromtimestamp()\ndid not\ncall __new__ in\ndatetime.datetime\nsubclasses.\nbpo-32403\n: Improved speed of\ndatetime.date\nand\ndatetime.datetime\nalternate constructors.\nbpo-32228\n: Ensure that\ntruncate()\npreserves the file position (as\nreported by\ntell()\n) after writes longer than the buffer size.\nbpo-32410\n: Implement\nloop.sock_sendfile\nfor asyncio event loop.\nbpo-22908\n: Added seek and tell to the ZipExtFile class. This only works if\nthe file object used to open the zipfile is seekable.\nbpo-32373\n: Add socket.getblocking() method.\nbpo-32248\n: Add\nimportlib.resources\nand\nimportlib.abc.ResourceReader\nas the unified API for reading\nresources contained within packages.  Loaders wishing to support resource\nreading must implement the\nget_resource_reader()\nmethod.  File-based\nand zipimport-based loaders both implement these APIs.\nimportlib.abc.ResourceLoader\nis deprecated in favor of these new\nAPIs.\nbpo-32320\n: collections.namedtuple() now supports default values.\nbpo-29302\n: Add contextlib.AsyncExitStack. Patch by Alexander Mohr and Ilya\nKulakov.\nbpo-31961\n:\nRemoved in Python 3.7.0b2.\nThe\nargs\nargument of\nsubprocess.Popen can now be a\npath-like object\n. If\nargs\nis given\nas a sequence, it’s first element can now be a\npath-like object\nas\nwell.\nbpo-31900\n: The\nlocale.localeconv()\nfunction now sets temporarily the\nLC_CTYPE\nlocale to the\nLC_NUMERIC\nlocale to decode\ndecimal_point\nand\nthousands_sep\nbyte strings if they are non-ASCII\nor longer than 1 byte, and the\nLC_NUMERIC\nlocale is different than the\nLC_CTYPE\nlocale. This temporary change affects other threads. Same\nchange for the\nstr.format()\nmethod when formatting a number\n(\nint\n,\nfloat\n,\nfloat\nand subclasses) with the\nn\ntype (ex:\n'{:n}'.format(1234)\n).\nbpo-31853\n: Use super().method instead of socket.method in SSLSocket.  They\nwere there most likely for legacy reasons.\nbpo-31399\n: The ssl module now uses OpenSSL’s X509_VERIFY_PARAM_set1_host()\nand X509_VERIFY_PARAM_set1_ip() API to verify hostname and IP addresses.\nSubject common name fallback can be disabled with\nSSLContext.hostname_checks_common_name.\nbpo-14976\n: Add a queue.SimpleQueue class, an unbounded FIFO queue with a\nreentrant C implementation of put().\nDocumentation\n¶\nbpo-32724\n: Add references to some commands in the documentation of Pdb.\nPatch by Stéphane Wirtel\nbpo-32649\n: Complete the C API documentation, profiling and tracing part\nwith the newly added per-opcode events.\nbpo-17799\n: Explain real behaviour of sys.settrace and sys.setprofile and\ntheir C-API counterparts regarding which type of events are received in\neach function. Patch by Pablo Galindo Salgado.\nTests\n¶\nbpo-32721\n: Fix test_hashlib to not fail if the _md5 module is not built.\nbpo-28414\n: Add test cases for IDNA 2003 and 2008 host names. IDNA 2003\ninternationalized host names are working since\nbpo-31399\nhas landed. IDNA\n2008 are still broken.\nbpo-32604\n: Add a new “_xxsubinterpreters” extension module that exposes\nthe existing subinterpreter C-API and a new cross-interpreter data sharing\nmechanism. The module is primarily intended for more thorough testing of\nthe existing subinterpreter support. Note that the _xxsubinterpreters\nmodule has been removed in 3.7.0rc1.\nbpo-32602\n: Add test certs and test for ECDSA cert and EC/RSA dual mode.\nbpo-32549\n: On Travis CI, Python now Compiles and uses a local copy of\nOpenSSL 1.1.0g for testing.\nBuild\n¶\nbpo-32635\n: Fix segfault of the crypt module when libxcrypt is provided\ninstead of libcrypt at the system.\nbpo-32598\n: Use autoconf to detect OpenSSL libs, headers and supported\nfeatures. The ax_check_openssl M4 macro uses pkg-config to locate OpenSSL\nand falls back to manual search.\nbpo-32593\n: Drop support of FreeBSD 9 and older.\nbpo-29708\n: If the\nSOURCE_DATE_EPOCH\nenvironment variable is set,\npy_compile\nwill always create hash-based\n.pyc\nfiles.\nWindows\n¶\nbpo-32588\n: Create standalone _distutils_findvs module and add missing\n_queue module to installer.\nbpo-29911\n: Ensure separate Modify and Uninstall buttons are displayed.\nbpo-32507\n: Use app-local UCRT install rather than the proper update for\nold versions of Windows.\nmacOS\n¶\nbpo-32726\n: Provide an additional, more modern macOS installer variant that\nsupports macOS 10.9+ systems in 64-bit mode only.  Upgrade the supplied\nthird-party libraries to OpenSSL 1.1.0g and to SQLite 3.22.0.  The 10.9+\ninstaller now links with and supplies its own copy of Tcl/Tk 8.6.\nbpo-28440\n: No longer add /Library/Python/3.x/site-packages to sys.path for\nmacOS framework builds to avoid future conflicts.\nC API\n¶\nbpo-32681\n: Fix uninitialized variable ‘res’ in the C implementation of\nos.dup2. Patch by Stéphane Wirtel\nbpo-10381\n: Add C API access to the\ndatetime.timezone\nconstructor and\ndatetime.timzone.UTC\nsingleton.\nPython 3.7.0 alpha 4\n¶\nRelease date: 2018-01-08\nCore and Builtins\n¶\nbpo-31975\n: The default warning filter list now starts with a\n“default::DeprecationWarning:__main__” entry, so deprecation warnings are\nonce again shown by default in single-file scripts and at the interactive\nprompt.\nbpo-32226\n:\n__class_getitem__\nis now an automatic class method.\nbpo-32399\n: Add AIX uuid library support for RFC4122 using uuid_create() in\nlibc.a\nbpo-32390\n: Fix the compilation failure on AIX after the f_fsid field has\nbeen added to the object returned by os.statvfs() (\nbpo-32143\n). Original\npatch by Michael Felt.\nbpo-32379\n: Make MRO computation faster when a class inherits from a single\nbase.\nbpo-32259\n: The error message of a TypeError raised when unpack\nnon-iterable is now more specific.\nbpo-27169\n: The\n__debug__\nconstant is now optimized out at compile\ntime. This fixes also\nbpo-22091\n.\nbpo-32329\n: The\n-R\noption now turns on hash randomization when\nthe\nPYTHONHASHSEED\nenvironment variable is set to\n0\n.\nPreviously, the option was ignored. Moreover,\nsys.flags.hash_randomization\nis now properly set to 0 when hash\nrandomization is turned off by\nPYTHONHASHSEED=0\n.\nbpo-30416\n: The optimizer is now protected from spending much time doing\ncomplex calculations and consuming much memory for creating large\nconstants in constant folding. Increased limits for constants that can be\nproduced in constant folding.\nbpo-32282\n: Fix an unnecessary ifdef in the include of VersionHelpers.h in\nsocketmodule on Windows.\nbpo-30579\n: Implement TracebackType.__new__ to allow Python-level creation\nof traceback objects, and make TracebackType.tb_next mutable.\nbpo-32260\n: Don’t byte swap the input keys to the SipHash algorithm on\nbig-endian platforms. This should ensure siphash gives consistent results\nacross platforms.\nbpo-31506\n: Improve the error message logic for object.__new__ and\nobject.__init__. Patch by Sanyam Khurana.\nbpo-20361\n:\n-b\nand\n-bb\nnow inject\n'default::BytesWarning'\nand\nerror::BytesWarning\nentries into\nsys.warnoptions\n, ensuring that\nthey take precedence over any other warning filters configured via the\n-W\noption or the\nPYTHONWARNINGS\nenvironment variable.\nbpo-32230\n:\n-X\ndev\nnow injects a\n'default'\nentry into\nsys.warnoptions, ensuring that it behaves identically to actually passing\n-Wdefault\nat the command line.\nbpo-29240\n: Add a new UTF-8 mode: implementation of the\nPEP 540\n.\nbpo-32226\n:\nPEP 560\n: Add support for\n__mro_entries__\nand\n__class_getitem__\n. Implemented by Ivan Levkivskyi.\nbpo-32225\n:\nPEP 562\n: Add support for module\n__getattr__\nand\n__dir__\n. Implemented by Ivan Levkivskyi.\nbpo-31901\n: The\natexit\nmodule now has its callback stored per\ninterpreter.\nbpo-31650\n: Implement\nPEP 552\n(Deterministic pycs). Python now supports\ninvalidating bytecode cache files bashed on a source content hash rather\nthan source last-modified time.\nbpo-29469\n: Move constant folding from bytecode layer to AST layer.\nOriginal patch by Eugene Toder.\nLibrary\n¶\nbpo-32506\n: Now that dict is defined as keeping insertion order, drop\nOrderedDict and just use plain dict.\nbpo-32279\n: Add params to dataclasses.make_dataclasses(): init, repr, eq,\norder, hash, and frozen.  Pass them through to dataclass().\nbpo-32278\n: Make type information optional on dataclasses.make_dataclass().\nIf omitted, the string ‘typing.Any’ is used.\nbpo-32499\n: Add dataclasses.is_dataclass(obj), which returns True if obj is\na dataclass or an instance of one.\nbpo-32468\n: Improve frame repr() to mention filename, code name and current\nline number.\nbpo-23749\n: asyncio: Implement loop.start_tls()\nbpo-32441\n: Return the new file descriptor (i.e., the second argument) from\nos.dup2\n. Previously,\nNone\nwas always returned.\nbpo-32422\n:\nfunctools.lru_cache\nuses less memory (3 words for each\ncached key) and takes about 1/3 time for cyclic GC.\nbpo-31721\n: Prevent Python crash from happening when Future._log_traceback\nis set to True manually.  Now it can only be set to False, or a ValueError\nis raised.\nbpo-32415\n: asyncio: Add Task.get_loop() and Future.get_loop()\nbpo-26133\n: Don’t unsubscribe signals in asyncio UNIX event loop on\ninterpreter shutdown.\nbpo-32363\n: Make asyncio.Task.set_exception() and set_result() raise\nNotImplementedError. Task._step() and Future.__await__() raise proper\nexceptions when they are in an invalid state, instead of raising an\nAssertionError.\nbpo-32357\n: Optimize asyncio.iscoroutine() and loop.create_task() for\nnon-native coroutines (e.g. async/await compiled with Cython).\n‘loop.create_task(python_coroutine)’ used to be 20% faster than\n‘loop.create_task(cython_coroutine)’.  Now, the latter is as fast.\nbpo-32356\n: asyncio.transport.resume_reading() and pause_reading() are now\nidempotent. New transport.is_reading() method is added.\nbpo-32355\n: Optimize asyncio.gather(); now up to 15% faster.\nbpo-32351\n: Use fastpath in asyncio.sleep if delay<0 (2x boost)\nbpo-32348\n: Optimize asyncio.Future schedule/add/remove callback.  The\noptimization shows 3-6% performance improvements of async/await code.\nbpo-32331\n: Fix socket.settimeout() and socket.setblocking() to keep\nsocket.type as is. Fix socket.socket() constructor to reset any bit flags\napplied to socket’s type.  This change only affects OSes that have\nSOCK_NONBLOCK and/or SOCK_CLOEXEC.\nbpo-32248\n: Add\nimportlib.abc.ResourceReader\nas an ABC for loaders\nto provide a unified API for reading resources contained within packages.\nAlso add\nimportlib.resources\nas the port of\nimportlib_resources\n.\nbpo-32311\n: Implement asyncio.create_task(coro) shortcut\nbpo-32327\n: Convert asyncio functions that were documented as coroutines to\ncoroutines. Affected functions: loop.sock_sendall, loop.sock_recv,\nloop.sock_accept, loop.getaddrinfo, loop.getnameinfo.\nbpo-32323\n:\nurllib.parse.urlsplit()\ndoes not convert zone-id (scope)\nto lower case for scoped IPv6 addresses in hostnames now.\nbpo-32302\n: Fix bdist_wininst of distutils for CRT v142: it binary\ncompatible with CRT v140.\nbpo-29711\n: Fix\nstop_serving\nin asyncio proactor loop kill all\nlistening servers\nbpo-32308\n:\nre.sub()\nnow replaces empty matches adjacent to a\nprevious non-empty match.\nbpo-29970\n: Abort asyncio SSLProtocol connection if handshake not complete\nwithin 10 seconds.\nbpo-32314\n: Implement asyncio.run().\nbpo-17852\n: Revert incorrect fix based on misunderstanding of\n_Py_PyAtExit() semantics.\nbpo-32296\n: Implement asyncio._get_running_loop() and get_event_loop() in\nC. This makes them 4x faster.\nbpo-32250\n: Implement\nasyncio.current_task()\nand\nasyncio.all_tasks()\n. Add helpers intended to be used by alternative\ntask implementations:\nasyncio._register_task\n,\nasyncio._enter_task\n,\nasyncio._leave_task\nand\nasyncio._unregister_task\n. Deprecate\nasyncio.Task.current_task()\nand\nasyncio.Task.all_tasks()\n.\nbpo-32255\n: A single empty field is now always quoted when written into a\nCSV file. This allows to distinguish an empty row from a row consisting of\na single empty field. Patch by Licht Takeuchi.\nbpo-32277\n: Raise\nNotImplementedError\ninstead of\nSystemError\non\nplatforms where\nchmod(...,\nfollow_symlinks=False)\nis not supported.\nPatch by Anthony Sottile.\nbpo-30050\n: New argument warn_on_full_buffer to signal.set_wakeup_fd lets\nyou control whether Python prints a warning on stderr when the wakeup fd\nbuffer overflows.\nbpo-29137\n: The\nfpectl\nlibrary has been removed. It was never enabled\nby default, never worked correctly on x86-64, and it changed the Python\nABI in ways that caused unexpected breakage of C extensions.\nbpo-32273\n: Move asyncio.test_utils to test.test_asyncio.\nbpo-32272\n: Remove asyncio.async() function.\nbpo-32269\n: Add asyncio.get_running_loop() function.\nbpo-32265\n: All class and static methods of builtin types now are correctly\nclassified by inspect.classify_class_attrs() and grouped in pydoc ouput.\nAdded types.ClassMethodDescriptorType for unbound class methods of builtin\ntypes.\nbpo-32253\n: Deprecate\nyield\nfrom\nlock\n,\nawait\nlock\n,\nwith\n(yield\nfrom\nlock)\nand\nwith\nawait\nlock\nfor asyncio synchronization\nprimitives.\nbpo-22589\n: Changed MIME type of .bmp from ‘image/x-ms-bmp’ to ‘image/bmp’\nbpo-32193\n: Convert asyncio to use\nasync/await\nsyntax. Old styled\nyield\nfrom\nis still supported too.\nbpo-32206\n: Add support to run modules with pdb\nbpo-32227\n:\nfunctools.singledispatch\nnow supports registering\nimplementations using type annotations.\nbpo-15873\n: Added new alternate constructors\ndatetime.datetime.fromisoformat()\n,\ndatetime.time.fromisoformat()\nand\ndatetime.date.fromisoformat()\nas the inverse operation of each\nclasses’s respective\nisoformat\nmethods.\nbpo-32199\n: The getnode() ip getter now uses ‘ip link’ instead of ‘ip link\nlist’.\nbpo-32143\n: os.statvfs() includes the f_fsid field from statvfs(2)\nbpo-26439\n: Fix ctypes.util.find_library() for AIX by implementing\nctypes._aix.find_library() Patch by: Michael Felt\nbpo-31993\n: The pickler now uses less memory when serializing large bytes\nand str objects into a file.  Pickles created with protocol 4 will require\nless memory for unpickling large bytes and str objects.\nbpo-27456\n: Ensure TCP_NODELAY is set on Linux. Tests by Victor Stinner.\nbpo-31778\n: ast.literal_eval() is now more strict. Addition and subtraction\nof arbitrary numbers no longer allowed.\nbpo-31802\n: Importing native path module (\nposixpath\n,\nntpath\n) now\nworks even if the\nos\nmodule still is not imported.\nbpo-30241\n: Add contextlib.AbstractAsyncContextManager. Patch by Jelle\nZijlstra.\nbpo-31699\n: Fix deadlocks in\nconcurrent.futures.ProcessPoolExecutor\nwhen task arguments or\nresults cause pickling or unpickling errors. This should make sure that\ncalls to the\nProcessPoolExecutor\nAPI always eventually return.\nbpo-15216\n:\nTextIOWrapper.reconfigure()\nsupports changing\nencoding\n,\nerrors\n, and\nnewline\n.\nDocumentation\n¶\nbpo-32418\n: Add get_loop() method to Server and AbstractServer classes.\nTests\n¶\nbpo-32252\n: Fix faulthandler_suppress_crash_report() used to prevent core\ndump files when testing crashes. getrlimit() returns zero on success.\nbpo-32002\n: Adjust C locale coercion testing for the empty locale and POSIX\nlocale cases to more readily adjust to platform dependent behaviour.\nWindows\n¶\nbpo-19764\n: Implement support for\nsubprocess.Popen(close_fds=True)\non\nWindows. Patch by Segev Finer.\nTools/Demos\n¶\nbpo-24960\n: 2to3 and lib2to3 can now read pickled grammar files using\npkgutil.get_data() rather than probing the filesystem. This lets 2to3 and\nlib2to3 work when run from a zipfile.\nC API\n¶\nbpo-32030\n: Py_Initialize() doesn’t reset the memory allocators to default\nif the\nPYTHONMALLOC\nenvironment variable is not set.\nbpo-29084\n: Undocumented C API for OrderedDict has been excluded from the\nlimited C API. It was added by mistake and actually never worked in the\nlimited C API.\nbpo-32264\n: Moved the pygetopt.h header into internal/, since it has no\npublic APIs.\nbpo-32241\n:\nPy_SetProgramName()\nand\nPy_SetPythonHome()\nnow take the\nconst\nwchar\n*\narguments instead of\nwchar\n*\n.\nPython 3.7.0 alpha 3\n¶\nRelease date: 2017-12-05\nCore and Builtins\n¶\nbpo-32176\n: co_flags.CO_NOFREE is now always set correctly by the code\nobject constructor based on freevars and cellvars, rather than needing to\nbe set correctly by the caller. This ensures it will be cleared\nautomatically when additional cell references are injected into a modified\ncode object and function.\nbpo-10544\n: Yield expressions are now deprecated in comprehensions and\ngenerator expressions. They are still permitted in the definition of the\noutermost iterable, as that is evaluated directly in the enclosing scope.\nbpo-32137\n: The repr of deeply nested dict now raises a RecursionError\ninstead of crashing due to a stack overflow.\nbpo-32096\n: Revert memory allocator changes in the C API: move structures\nback from _PyRuntime to Objects/obmalloc.c. The memory allocators are once\nagain initialized statically, and so PyMem_RawMalloc() and\nPy_DecodeLocale() can be called before _PyRuntime_Initialize().\nbpo-32043\n: Add a new “developer mode”: new “-X dev” command line option to\nenable debug checks at runtime.\nbpo-32023\n: SyntaxError is now correctly raised when a generator expression\nwithout parenthesis is used instead of an inheritance list in a class\ndefinition. The duplication of the parentheses can be omitted only on\ncalls.\nbpo-32012\n: SyntaxError is now correctly raised when a generator expression\nwithout parenthesis is passed as an argument, but followed by a trailing\ncomma. A generator expression always needs to be directly inside a set of\nparentheses and cannot have a comma on either side.\nbpo-28180\n: A new internal\n_Py_SetLocaleFromEnv(category)\nhelper\nfunction has been added in order to improve the consistency of behaviour\nacross different\nlibc\nimplementations (e.g. Android doesn’t support\nsetting the locale from the environment by default).\nbpo-31949\n: Fixed several issues in printing tracebacks\n(PyTraceBack_Print()). Setting sys.tracebacklimit to 0 or less now\nsuppresses printing tracebacks. Setting sys.tracebacklimit to None now\ncauses using the default limit. Setting sys.tracebacklimit to an integer\nlarger than LONG_MAX now means using the limit LONG_MAX rather than the\ndefault limit. Fixed integer overflows in the case of more than\n2**31\ntraceback items on Windows. Fixed output errors handling.\nbpo-30696\n: Fix the interactive interpreter looping endlessly when no\nmemory.\nbpo-20047\n: Bytearray methods partition() and rpartition() now accept only\nbytes-like objects as separator, as documented.  In particular they now\nraise TypeError rather of returning a bogus result when an integer is\npassed as a separator.\nbpo-21720\n: BytesWarning no longer emitted when the\nfromlist\nargument of\n__import__()\nor the\n__all__\nattribute of the module contain bytes\ninstances.\nbpo-31845\n: Environment variables are once more read correctly at\ninterpreter startup.\nbpo-28936\n: Ensure that lexically first syntax error involving a parameter\nand\nglobal\nor\nnonlocal\nis detected first at a given scope. Patch\nby Ivan Levkivskyi.\nbpo-31825\n: Fixed OverflowError in the ‘unicode-escape’ codec and in\ncodecs.escape_decode() when decode an escaped non-ascii byte.\nbpo-31618\n: The per-frame tracing logic added in 3.7a1 has been altered so\nthat\nframe->f_lineno\nis updated before either\n\"line\"\nor\n\"opcode\"\nevents are emitted. Previously, opcode events were emitted\nfirst, and therefore would occasionally see stale line numbers on the\nframe. The behavior of this feature has changed slightly as a result: when\nboth\nf_trace_lines\nand\nf_trace_opcodes\nare enabled, line events\nnow occur first.\nbpo-28603\n: Print the full context/cause chain of exceptions on interpreter\nexit, even if an exception in the chain is unhashable or compares equal to\nlater ones. Patch by Zane Bitter.\nbpo-31786\n: Fix timeout rounding in the select module to round correctly\nnegative timeouts between -1.0 and 0.0. The functions now block waiting\nfor events as expected. Previously, the call was incorrectly non-blocking.\nPatch by Pablo Galindo.\nbpo-31781\n: Prevent crashes when calling methods of an uninitialized\nzipimport.zipimporter\nobject. Patch by Oren Milman.\nbpo-30399\n: Standard repr() of BaseException with a single argument no\nlonger contains redundant trailing comma.\nbpo-31626\n: Fixed a bug in debug memory allocator.  There was a write to\nfreed memory after shrinking a memory block.\nbpo-30817\n:\nPyErr_PrintEx()\nclears now the ignored exception that may\nbe raised by\n_PySys_SetObjectId()\n, for example when no memory.\nLibrary\n¶\nbpo-28556\n: Two minor fixes for\ntyping\nmodule: allow shallow copying\ninstances of generic classes, improve interaction of\n__init_subclass__\nwith generics. Original PRs by Ivan Levkivskyi.\nbpo-32214\n: PEP 557, Data Classes. Provides a decorator which adds\nboilerplate methods to classes which use type annotations so specify\nfields.\nbpo-27240\n: The header folding algorithm for the new email policies has\nbeen rewritten, which also fixes\nbpo-30788\n,\nbpo-31831\n, and\nbpo-32182\n.  In\nparticular, RFC2231 folding is now done correctly.\nbpo-32186\n: io.FileIO.readall() and io.FileIO.read() now release the GIL\nwhen getting the file size. Fixed hang of all threads with inaccessible\nNFS server. Patch by Nir Soffer.\nbpo-32101\n: Add\nsys.flags.dev_mode\nflag\nbpo-32154\n: The\nasyncio.windows_utils.socketpair()\nfunction has been\nremoved: use directly\nsocket.socketpair()\nwhich is available on all\nplatforms since Python 3.5 (before, it wasn’t available on Windows).\nasyncio.windows_utils.socketpair()\nwas just an alias to\nsocket.socketpair\non Python 3.5 and newer.\nbpo-32089\n: warnings: In development (-X dev) and debug mode (pydebug\nbuild), use the “default” action for ResourceWarning, rather than the\n“always” action, in the default warnings filters.\nbpo-32107\n:\nuuid.getnode()\nnow preferentially returns universally\nadministered MAC addresses if available, over locally administered MAC\naddresses.  This makes a better guarantee for global uniqueness of UUIDs\nreturned from\nuuid.uuid1()\n.  If only locally administered MAC\naddresses are available, the first such one found is returned.\nbpo-23033\n: Wildcard is now supported in hostname when it is one and only\ncharacter in the left most segment of hostname in second argument of\nssl.match_hostname()\n.  Patch by Mandeep Singh.\nbpo-12239\n: Make\nmsilib.SummaryInformation.GetProperty()\nreturn\nNone\nwhen the value of property is\nVT_EMPTY\n.  Initial patch by\nMark Mc Mahon.\nbpo-28334\n: Use\nos.path.expanduser()\nto find the\n~/.netrc\nfile in\nnetrc.netrc\n.  If it does not exist,\nFileNotFoundError\nis\nraised.  Patch by Dimitri Merejkowsky.\nbpo-32121\n: Made\ntracemalloc.Traceback\nbehave more like the traceback\nmodule, sorting the frames from oldest to most recent.\nTraceback.format()\nnow accepts negative\nlimit\n, truncating the result\nto the\nabs(limit)\noldest frames. To get the old behaviour, one can use\nthe new\nmost_recent_first\nargument to\nTraceback.format()\n. (Patch by\nJesse Bakker.)\nbpo-31325\n: Fix wrong usage of\ncollections.namedtuple()\nin the\nRobotFileParser.parse()\nmethod. Initial patch by Robin Wellner.\nbpo-12382\n:\nmsilib.OpenDatabase()\nnow raises a better exception\nmessage when it couldn’t open or create an MSI file.  Initial patch by\nWilliam Tisäter.\nbpo-19610\n:\nsetup()\nnow warns about invalid types for some fields. The\ndistutils.dist.Distribution\nclass now warns when\nclassifiers\n,\nkeywords\nand\nplatforms\nfields are not specified as a list or a\nstring.\nbpo-32071\n: Added the\n-k\ncommand-line option to\npython\n-m\nunittest\nto run only tests that match the given pattern(s).\nbpo-10049\n: Added\nnullcontext\nno-op context manager to contextlib. This\nprovides a simpler and faster alternative to ExitStack() when handling\noptional context managers.\nbpo-28684\n: The new test.support.skip_unless_bind_unix_socket() decorator\nis used here to skip asyncio tests that fail because the platform lacks a\nfunctional bind() function for unix domain sockets (as it is the case for\nnon root users on the recent Android versions that run now SELinux in\nenforcing mode).\nbpo-32110\n:\ncodecs.StreamReader.read(n)\nnow returns not more than\nn\ncharacters/bytes for non-negative\nn\n. This makes it compatible with\nread()\nmethods of other file-like objects.\nbpo-27535\n: The warnings module doesn’t leak memory anymore in the hidden\nwarnings registry for the “ignore” action of warnings filters.\nwarn_explicit() function doesn’t add the warning key to the registry\nanymore for the “ignore” action.\nbpo-32088\n: warnings:  When Python is build is debug mode (\nPy_DEBUG\n),\nDeprecationWarning\n,\nPendingDeprecationWarning\nand\nImportWarning\nwarnings are now displayed by default.\nbpo-1647489\n: Fixed searching regular expression patterns that could match\nan empty string. Non-empty string can now be correctly found after\nmatching an empty string.\nbpo-25054\n: Added support of splitting on a pattern that could match an\nempty string.\nbpo-32072\n: Fixed issues with binary plists: Fixed saving bytearrays.\nIdentical objects will be saved only once. Equal references will be load\nas identical objects. Added support for saving and loading recursive data\nstructures.\nbpo-32069\n: Drop legacy SSL transport from asyncio, ssl.MemoryBIO is always\nused anyway.\nbpo-32066\n: asyncio: Support pathlib.Path in create_unix_connection; sock\narg should be optional\nbpo-32046\n: Updates 2to3 to convert from operator.isCallable(obj) to\ncallable(obj). Patch by Donghee Na.\nbpo-32018\n: inspect.signature should follow\nPEP 8\n, if the parameter has\nan annotation and a default value. Patch by Donghee Na.\nbpo-32025\n: Add time.thread_time() and time.thread_time_ns()\nbpo-32037\n: Integers that fit in a signed 32-bit integer will be now\npickled with protocol 0 using the INT opcode.  This will decrease the size\nof a pickle, speed up pickling and unpickling, and make these integers be\nunpickled as int instances in Python 2.\nbpo-32034\n: Make asyncio.IncompleteReadError and LimitOverrunError\npickleable.\nbpo-32015\n: Fixed the looping of asyncio in the case of reconnection the\nsocket during waiting async read/write from/to the socket.\nbpo-32011\n: Restored support of loading marshal files with the TYPE_INT64\ncode. These files can be produced in Python 2.7.\nbpo-28369\n: Enhance add_reader/writer check that socket is not used by some\ntransport. Before, only cases when add_reader/writer were called with an\nint FD were supported.  Now the check is implemented correctly for all\nfile-like objects.\nbpo-31976\n: Fix race condition when flushing a file is slow, which can\ncause a segfault if closing the file from another thread.\nbpo-31985\n: Formally deprecated aifc.openfp, sunau.openfp, and wave.openfp.\nSince change 7bc817d5ba917528e8bd07ec461c635291e7b06a in 1993, openfp in\neach of the three modules had been pointing to that module’s open function\nas a matter of backwards compatibility, though it had been both untested\nand undocumented.\nbpo-21862\n: cProfile command line now accepts\n-m\nmodule_name\nas an\nalternative to script path. Patch by Sanyam Khurana.\nbpo-31970\n: Reduce performance overhead of asyncio debug mode.\nbpo-31843\n:\ndatabase\nargument of sqlite3.connect() now accepts a\npath-like object\n, instead of just a string.\nbpo-31945\n: Add Configurable\nblocksize\nto\nHTTPConnection\nand\nHTTPSConnection\nfor improved upload throughput.  Patch by Nir Soffer.\nbpo-31943\n: Add a\ncancelled()\nmethod to\nasyncio.Handle\n.  Patch\nby Marat Sharafutdinov.\nbpo-9678\n: Fixed determining the MAC address in the uuid module: Using\nifconfig on NetBSD and OpenBSD. Using arp on Linux, FreeBSD, NetBSD and\nOpenBSD. Based on patch by Takayuki Shimizukawa.\nbpo-30057\n: Fix potential missed signal in signal.signal().\nbpo-31933\n: Fix Blake2 params leaf_size and node_offset on big endian\nplatforms. Patch by Jack O’Connor.\nbpo-21423\n: Add an initializer argument to {Process,Thread}PoolExecutor\nbpo-31927\n: Fixed compilation of the socket module on NetBSD 8.  Fixed\nassertion failure or reading arbitrary data when parse a AF_BLUETOOTH\naddress on NetBSD and DragonFly BSD.\nbpo-27666\n: Fixed stack corruption in curses.box() and curses.ungetmouse()\nwhen the size of types chtype or mmask_t is less than the size of C long.\ncurses.box() now accepts characters as arguments.  Based on patch by Steve\nFink.\nbpo-31917\n: Add 3 new clock identifiers:\ntime.CLOCK_BOOTTIME\n,\ntime.CLOCK_PROF\nand\ntime.CLOCK_UPTIME\n.\nbpo-31897\n: plistlib now catches more errors when read binary plists and\nraises InvalidFileException instead of unexpected exceptions.\nbpo-25720\n: Fix the method for checking pad state of curses WINDOW. Patch\nby Masayuki Yamamoto.\nbpo-31893\n: Fixed the layout of the kqueue_event structure on OpenBSD and\nNetBSD. Fixed the comparison of the kqueue_event objects.\nbpo-31891\n: Fixed building the curses module on NetBSD.\nbpo-31884\n: added required constants to subprocess module for setting\npriority on windows\nbpo-28281\n: Remove year (1-9999) limits on the Calendar.weekday() function.\nPatch by Mark Gollahon.\nbpo-31702\n: crypt.mksalt() now allows to specify the number of rounds for\nSHA-256 and SHA-512 hashing.\nbpo-30639\n:\ninspect.getfile()\nno longer computes the repr of unknown\nobjects to display in an error message, to protect against badly behaved\ncustom reprs.\nbpo-30768\n: Fix the pthread+semaphore implementation of\nPyThread_acquire_lock_timed() when called with timeout > 0 and\nintr_flag=0: recompute the timeout if sem_timedwait() is interrupted by a\nsignal (EINTR). See also the\nPEP 475\n.\nbpo-31854\n: Add\nmmap.ACCESS_DEFAULT\nconstant.\nbpo-31834\n: Use optimized code for BLAKE2 only with SSSE3+. The pure SSE2\nimplementation is slower than the pure C reference implementation.\nbpo-28292\n: Calendar.itermonthdates() will now consistently raise an\nexception when a date falls outside of the 0001-01-01 through 9999-12-31\nrange.  To support applications that cannot tolerate such exceptions, the\nnew methods itermonthdays3() and itermonthdays4() are added.  The new\nmethods return tuples and are not restricted by the range supported by\ndatetime.date.\nbpo-28564\n: The shutil.rmtree() function has been sped up to 20–40%. This\nwas done using the os.scandir() function.\nbpo-28416\n: Instances of pickle.Pickler subclass with the persistent_id()\nmethod and pickle.Unpickler subclass with the persistent_load() method no\nlonger create reference cycles.\nbpo-31653\n: Don’t release the GIL if we can acquire a multiprocessing\nsemaphore immediately.\nbpo-28326\n: Fix multiprocessing.Process when stdout and/or stderr is closed\nor None.\nbpo-20825\n: Add\nsubnet_of\nand\nsuperset_of\ncontainment tests to\nipaddress.IPv6Network\nand\nipaddress.IPv4Network\n. Patch\nby Michel Albert and Cheryl Sabella.\nbpo-31827\n: Remove the os.stat_float_times() function. It was introduced in\nPython 2.3 for backward compatibility with Python 2.2, and was deprecated\nsince Python 3.1.\nbpo-31756\n: Add a\nsubprocess.Popen(text=False)\nkeyword argument to\nsubprocess\nfunctions to be more explicit about when the library should\nattempt to decode outputs into text. Patch by Andrew Clegg.\nbpo-31819\n: Add AbstractEventLoop.sock_recv_into().\nbpo-31457\n: If nested log adapters are used, the inner\nprocess()\nmethods are no longer omitted.\nbpo-31457\n: The\nmanager\nproperty on LoggerAdapter objects is now\nproperly settable.\nbpo-31806\n: Fix timeout rounding in time.sleep(), threading.Lock.acquire()\nand socket.socket.settimeout() to round correctly negative timeouts\nbetween -1.0 and 0.0. The functions now block waiting for events as\nexpected. Previously, the call was incorrectly non-blocking. Patch by\nPablo Galindo.\nbpo-31803\n: time.clock() and time.get_clock_info(‘clock’) now emit a\nDeprecationWarning warning.\nbpo-31800\n: Extended support for parsing UTC offsets. strptime ‘%z’ can now\nparse the output generated by datetime.isoformat, including seconds and\nmicroseconds.\nbpo-28603\n: traceback: Fix a TypeError that occurred during printing of\nexception tracebacks when either the current exception or an exception in\nits context/cause chain is unhashable. Patch by Zane Bitter.\nbpo-30541\n: Add new function to seal a mock and prevent the automatically\ncreation of child mocks. Patch by Mario Corchero.\nbpo-31784\n: Implement the\nPEP 564\n, add new 6 new functions with\nnanosecond resolution to the\ntime\nmodule:\nclock_gettime_ns()\n,\nclock_settime_ns()\n,\nmonotonic_ns()\n,\nperf_counter_ns()\n,\nprocess_time_ns()\n,\ntime_ns()\n.\nbpo-30143\n: 2to3 now generates a code that uses abstract collection classes\nfrom collections.abc rather than collections.\nbpo-31770\n: Prevent a crash when calling the\n__init__()\nmethod of a\nsqlite3.Cursor\nobject more than once. Patch by Oren Milman.\nbpo-31764\n: Prevent a crash in\nsqlite3.Cursor.close()\nin case the\nCursor\nobject is uninitialized. Patch by Oren Milman.\nbpo-31752\n: Fix possible crash in timedelta constructor called with custom\nintegers.\nbpo-31620\n: an empty asyncio.Queue now doesn’t leak memory when queue.get\npollers timeout\nbpo-31690\n: Allow the flags re.ASCII, re.LOCALE, and re.UNICODE to be used\nas group flags for regular expressions.\nbpo-30349\n: FutureWarning is now emitted if a regular expression contains\ncharacter set constructs that will change semantically in the future\n(nested sets and set operations).\nbpo-31664\n: Added support for the Blowfish hashing in the crypt module.\nbpo-31632\n: Fix method set_protocol() of class _SSLProtocolTransport in\nasyncio module. This method was previously modifying a wrong reference to\nthe protocol.\nbpo-15037\n: Added a workaround for getkey() in curses for ncurses 5.7 and\nearlier.\nbpo-31307\n: Allow use of bytes objects for arguments to\nconfigparser.ConfigParser.read()\n. Patch by Vincent Michel.\nbpo-31334\n: Fix\npoll.poll([timeout])\nin the\nselect\nmodule for\narbitrary negative timeouts on all OSes where it can only be a\nnon-negative integer or -1. Patch by Riccardo Coccioli.\nbpo-31310\n: multiprocessing’s semaphore tracker should be launched again if\ncrashed.\nbpo-31308\n: Make multiprocessing’s forkserver process immune to Ctrl-C and\nother user interruptions. If it crashes, restart it when necessary.\nbpo-31245\n: Added support for AF_UNIX socket in asyncio\ncreate_datagram_endpoint\n.\nbpo-30553\n: Add HTTP/2 status code 421 (Misdirected Request) to\nhttp.HTTPStatus\n. Patch by Vitor Pereira.\nDocumentation\n¶\nbpo-32105\n: Added asyncio.BaseEventLoop.connect_accepted_socket\nversionadded marker.\nTests\n¶\nbpo-31380\n: Skip test_httpservers test_undecodable_file on macOS: fails on\nAPFS.\nbpo-31705\n: Skip test_socket.test_sha256() on Linux kernel older than 4.5.\nThe test fails with ENOKEY on kernel 3.10 (on ppc64le). A fix was merged\ninto the kernel 4.5.\nbpo-32138\n: Skip on Android test_faulthandler tests that raise SIGSEGV and\nremove the test.support.requires_android_level decorator.\nbpo-32136\n: The runtime embedding tests have been split out from\nLib/test/test_capi.py\ninto a new\nLib/test/test_embed.py\nfile.\nbpo-28668\n: test.support.requires_multiprocessing_queue is removed. Skip\ntests with test.support.import_module(‘multiprocessing.synchronize’)\ninstead when the semaphore implementation is broken or missing.\nbpo-32126\n: Skip test_get_event_loop_new_process in\ntest.test_asyncio.test_events when sem_open() is not functional.\nbpo-31174\n: Fix test_tools.test_unparse: DirectoryTestCase now stores the\nnames sample to always test the same files. It prevents false alarms when\nhunting reference leaks.\nBuild\n¶\nbpo-28538\n: Revert the previous changes, the if_nameindex structure is\ndefined by Unified Headers.\nbpo-28762\n: Revert the last commit, the F_LOCK macro is defined by Android\nUnified Headers.\nbpo-29040\n: Support building Android with Unified Headers. The first NDK\nrelease to support Unified Headers is android-ndk-r14.\nbpo-32059\n:\ndetect_modules()\nin\nsetup.py\nnow also searches the\nsysroot paths when cross-compiling.\nbpo-31957\n: Fixes Windows SDK version detection when building for Windows.\nbpo-31609\n: Fixes quotes in PCbuild/clean.bat\nbpo-31934\n: Abort the build when building out of a not clean source tree.\nbpo-31926\n: Fixed Argument Clinic sometimes causing compilation errors when\nthere was more than one function and/or method in a .c file with the same\nname.\nbpo-28791\n: Update Windows builds to use SQLite 3.21.0.\nbpo-28791\n: Update OS X installer to use SQLite 3.21.0.\nbpo-28643\n: Record profile-opt build progress with stamp files.\nbpo-31866\n: Finish removing support for AtheOS.\nWindows\n¶\nbpo-1102\n: Return\nNone\nwhen\nView.Fetch()\nreturns\nERROR_NO_MORE_ITEMS\ninstead of raising\nMSIError\n. Initial patch by\nAnthony Tuininga.\nbpo-31944\n: Fixes Modify button in Apps and Features dialog.\nbpo-20486\n: Implement the\nDatabase.Close()\nmethod to help closing MSI\ndatabase objects.\nbpo-31857\n: Make the behavior of USE_STACKCHECK deterministic in a\nmulti-threaded environment.\nmacOS\n¶\nbpo-31392\n: Update macOS installer to use OpenSSL 1.0.2m\nIDLE\n¶\nbpo-32207\n: Improve tk event exception tracebacks in IDLE. When tk event\nhandling is driven by IDLE’s run loop, a confusing and distracting\nqueue.EMPTY traceback context is no longer added to tk event exception\ntracebacks.  The traceback is now the same as when event handling is\ndriven by user code.  Patch based on a suggestion by Serhiy Storchaka.\nbpo-32164\n: Delete unused file idlelib/tabbedpages.py. Use of TabbedPageSet\nin configdialog was replaced by ttk.Notebook.\nbpo-32100\n: IDLE: Fix old and new bugs in pathbrowser; improve tests. Patch\nmostly by Cheryl Sabella.\nbpo-31858\n: IDLE – Restrict shell prompt manipulation to the shell. Editor\nand output windows only see an empty last prompt line.  This simplifies\nthe code and fixes a minor bug when newline is inserted. Sys.ps1, if\npresent, is read on Shell start-up, but is not set or changed.\nbpo-31860\n: The font sample in the IDLE configuration dialog is now\neditable. Changes persist while IDLE remains open\nbpo-31836\n: Test_code_module now passes if run after test_idle, which sets\nps1. The code module uses sys.ps1 if present or sets it to ‘>>> ‘ if not.\nTest_code_module now properly tests both behaviors.  Ditto for ps2.\nbpo-28603\n: Fix a TypeError that caused a shell restart when printing a\ntraceback that includes an exception that is unhashable. Patch by Zane\nBitter.\nbpo-13802\n: Use non-Latin characters in the IDLE’s Font settings sample.\nEven if one selects a font that defines a limited subset of the unicode\nBasic Multilingual Plane, tcl/tk will use other fonts that define a\ncharacter. The expanded example give users of non-Latin characters a\nbetter idea of what they might see in IDLE’s shell and editors. To make\nroom for the expanded sample, frames on the Font tab are re-arranged.  The\nFont/Tabs help explains a bit about the additions.\nTools/Demos\n¶\nbpo-32159\n: Remove CVS and Subversion tools: remove svneol.py and\ntreesync.py scripts. CPython migrated from CVS to Subversion, to\nMercurial, and then to Git. CVS and Subversion are no longer used to\ndevelop CPython.\nbpo-30722\n: Make redemo work with Python 3.6 and newer versions. Also,\nremove the\nLOCALE\noption since it doesn’t work with string patterns in\nPython 3. Patch by Christoph Sarnowski.\nC API\n¶\nbpo-20891\n: Fix PyGILState_Ensure(). When PyGILState_Ensure() is called in\na non-Python thread before PyEval_InitThreads(), only call\nPyEval_InitThreads() after calling PyThreadState_New() to fix a crash.\nbpo-32125\n: The\nPy_UseClassExceptionsFlag\nflag has been removed. It was\ndeprecated and wasn’t used anymore since Python 2.0.\nbpo-25612\n: Move the current exception state from the frame object to the\nco-routine. This simplifies the interpreter and fixes a couple of obscure\nbugs caused by having swap exception state when entering or exiting a\ngenerator.\nbpo-23699\n: Add Py_RETURN_RICHCOMPARE macro to reduce boilerplate code in\nrich comparison functions.\nbpo-30697\n: The\nPyExc_RecursionErrorInst\nsingleton is removed and\nPyErr_NormalizeException()\ndoes not use it anymore. This singleton is\npersistent and its members being never cleared may cause a segfault during\nfinalization of the interpreter. See also\nbpo-22898\n.\nPython 3.7.0 alpha 2\n¶\nRelease date: 2017-10-16\nCore and Builtins\n¶\nbpo-31558\n:\ngc.freeze()\nis a new API that allows for moving all objects\ncurrently tracked by the garbage collector to a permanent generation,\neffectively removing them from future collection events. This can be used\nto protect those objects from having their PyGC_Head mutated. In effect,\nthis enables great copy-on-write stability at fork().\nbpo-31642\n: Restored blocking “from package import module” by setting\nsys.modules[“package.module”] to None.\nbpo-31708\n: Allow use of asynchronous generator expressions in synchronous\nfunctions.\nbpo-31709\n: Drop support of asynchronous __aiter__.\nbpo-30404\n: The -u option now makes the stdout and stderr streams\nunbuffered rather than line-buffered.\nbpo-31619\n: Fixed a ValueError when convert a string with large number of\nunderscores to integer with binary base.\nbpo-31602\n: Fix an assertion failure in\nzipimporter.get_source()\nin\ncase of a bad\nzlib.decompress()\n. Patch by Oren Milman.\nbpo-31592\n: Fixed an assertion failure in Python parser in case of a bad\nunicodedata.normalize()\n. Patch by Oren Milman.\nbpo-31588\n: Raise a\nTypeError\nwith a helpful error message when class\ncreation fails due to a metaclass with a bad\n__prepare__()\nmethod.\nPatch by Oren Milman.\nbpo-31574\n: Importlib was instrumented with two dtrace probes to profile\nimport timing.\nbpo-31566\n: Fix an assertion failure in\n_warnings.warn()\nin case of a\nbad\n__name__\nglobal. Patch by Oren Milman.\nbpo-31506\n: Improved the error message logic for\nobject.__new__\nand\nobject.__init__\n.\nbpo-31505\n: Fix an assertion failure in\njson\n, in case\n_json.make_encoder()\nreceived a bad\nencoder()\nargument. Patch by\nOren Milman.\nbpo-31492\n: Fix assertion failures in case of failing to import from a\nmodule with a bad\n__name__\nattribute, and in case of failing to access\nan attribute of such a module. Patch by Oren Milman.\nbpo-31478\n: Fix an assertion failure in\n_random.Random.seed()\nin case\nthe argument has a bad\n__abs__()\nmethod. Patch by Oren Milman.\nbpo-31336\n: Speed up class creation by 10-20% by reducing the overhead in\nthe necessary special method lookups.  Patch by Stefan Behnel.\nbpo-31415\n: Add\n-X\nimporttime\noption to show how long each import\ntakes. It can be used to optimize application’s startup time.  Support the\nPYTHONPROFILEIMPORTTIME\nas an equivalent way to enable this.\nbpo-31410\n: Optimized calling wrapper and classmethod descriptors.\nbpo-31353\n:\nPEP 553\n- Add a new built-in called\nbreakpoint()\nwhich\ncalls\nsys.breakpointhook()\n.  By default this imports\npdb\nand calls\npdb.set_trace()\n, but users may override\nsys.breakpointhook()\nto\ncall whatever debugger they want.  The original value of the hook is saved\nin\nsys.__breakpointhook__\n.\nbpo-17852\n: Maintain a list of open buffered files, flush them before\nexiting the interpreter.  Based on a patch from Armin Rigo.\nbpo-31315\n: Fix an assertion failure in imp.create_dynamic(), when\nspec.name is not a string. Patch by Oren Milman.\nbpo-31311\n: Fix a crash in the\n__setstate__()\nmethod of\nctypes._CData\n, in case of a bad\n__dict__\n. Patch by Oren Milman.\nbpo-31293\n: Fix crashes in true division and multiplication of a timedelta\nobject by a float with a bad as_integer_ratio() method. Patch by Oren\nMilman.\nbpo-31285\n: Fix an assertion failure in\nwarnings.warn_explicit\n, when\nthe return value of the received loader’s\nget_source()\nhas a bad\nsplitlines()\nmethod. Patch by Oren Milman.\nbpo-30406\n: Make\nasync\nand\nawait\nproper keywords, as specified in\nPEP 492\n.\nLibrary\n¶\nbpo-30058\n: Fixed buffer overflow in select.kqueue.control().\nbpo-31672\n:\nidpattern\nin\nstring.Template\nmatched some non-ASCII\ncharacters. Now it uses\n-i\nregular expression local flag to avoid\nnon-ASCII characters.\nbpo-31701\n: On Windows, faulthandler.enable() now ignores MSC and COM\nexceptions.\nbpo-31728\n: Prevent crashes in\n_elementtree\ndue to unsafe cleanup of\nElement.text\nand\nElement.tail\n. Patch by Oren Milman.\nbpo-31671\n: Now\nre.compile()\nconverts passed RegexFlag to normal int\nobject before compiling. bm_regex_compile benchmark shows 14% performance\nimprovements.\nbpo-30397\n: The types of compiled regular objects and match objects are now\nexposed as\nre.Pattern\nand\nre.Match\n.  This adds information in\npydoc output for the\nre\nmodule.\nbpo-31675\n: Fixed memory leaks in Tkinter’s methods splitlist() and split()\nwhen pass a string larger than 2 GiB.\nbpo-31673\n: Fixed typo in the name of Tkinter’s method adderrorinfo().\nbpo-31648\n: Improvements to path predicates in ElementTree: Allow\nwhitespace around predicate parts, i.e. “[a = ‘text’]” instead of\nrequiring the less readable “[a=’text’]”. Add support for text comparison\nof the current node, like “[.=’text’]”. Patch by Stefan Behnel.\nbpo-30806\n: Fix the string representation of a netrc object.\nbpo-31638\n: Add optional argument\ncompressed\nto\nzipapp.create_archive\n, and add option\n--compress\nto the command\nline interface of\nzipapp\n.\nbpo-25351\n: Avoid venv activate failures with undefined variables\nbpo-20519\n: Avoid ctypes use (if possible) and improve import time for\nuuid.\nbpo-28293\n: The regular expression cache is no longer completely dumped\nwhen it is full.\nbpo-31596\n: Added pthread_getcpuclockid() to the time module\nbpo-27494\n: Make 2to3 accept a trailing comma in generator expressions. For\nexample,\nset(x\nfor\nx\nin\n[],)\nis now allowed.\nbpo-30347\n: Stop crashes when concurrently iterate over itertools.groupby()\niterators.\nbpo-30346\n: An iterator produced by itertools.groupby() iterator now\nbecomes exhausted after advancing the groupby iterator.\nbpo-31556\n: Cancel asyncio.wait_for future faster if timeout <= 0\nbpo-31540\n: Allow passing a context object in\nconcurrent.futures.ProcessPoolExecutor\nconstructor. Also, free\njob resources in\nconcurrent.futures.ProcessPoolExecutor\nearlier\nto improve memory usage when a worker waits for new jobs.\nbpo-31516\n:\nthreading.current_thread()\nshould not return a dummy thread\nat shutdown.\nbpo-31525\n: In the sqlite module, require the sqlite3_prepare_v2 API. Thus,\nthe sqlite module now requires sqlite version at least 3.3.9.\nbpo-26510\n: argparse subparsers are now required by default.  This matches\nbehaviour in Python 2. For optional subparsers, use the new parameter\nadd_subparsers(required=False)\n. Patch by Anthony Sottile. (As of\n3.7.0rc1, the default was changed to not required as had been the case\nsince Python 3.3.)\nbpo-27541\n: Reprs of subclasses of some collection and iterator classes\n(\nbytearray\n,\narray.array\n,\ncollections.deque\n,\ncollections.defaultdict\n,\nitertools.count\n,\nitertools.repeat\n)\nnow contain actual type name instead of hardcoded names of the base class.\nbpo-31351\n: python -m ensurepip now exits with non-zero exit code if pip\nbootstrapping has failed.\nbpo-31389\n:\npdb.set_trace()\nnow takes an optional keyword-only argument\nheader\n. If given, this is printed to the console just before debugging\nbegins.\nDocumentation\n¶\nbpo-31537\n: Fix incorrect usage of\nget_history_length\nin readline\ndocumentation example code. Patch by Brad Smith.\nbpo-30085\n: The operator functions without double underscores are preferred\nfor clarity. The one with underscores are only kept for\nback-compatibility.\nBuild\n¶\nbpo-31696\n: Improve compiler version information in\nsys.version\nwhen Python is built with Clang.\nbpo-31625\n: Stop using ranlib on static libraries. Instead, we assume ar\nsupports the ‘s’ flag.\nbpo-31624\n: Remove support for BSD/OS.\nbpo-22140\n: Prevent double substitution of prefix in python-config.sh.\nbpo-31569\n: Correct PCBuild/ case to PCbuild/ in build scripts and\ndocumentation.\nbpo-31536\n: Avoid wholesale rebuild after\nmake\nregen-all\nif nothing\nchanged.\nIDLE\n¶\nbpo-31460\n: Simplify the API of IDLE’s Module Browser. Passing a widget\ninstead of an flist with a root widget opens the option of creating a\nbrowser frame that is only part of a window.  Passing a full file name\ninstead of pieces assumed to come from a .py file opens the possibility of\nbrowsing python files that do not end in .py.\nbpo-31649\n: IDLE - Make _htest, _utest parameters keyword only.\nbpo-31559\n: Remove test order dependence in idle_test.test_browser.\nbpo-31459\n: Rename IDLE’s module browser from Class Browser to Module\nBrowser. The original module-level class and method browser became a\nmodule browser, with the addition of module-level functions, years ago.\nNested classes and functions were added yesterday.  For\nback-compatibility, the virtual event <<open-class-browser>>, which\nappears on the Keys tab of the Settings dialog, is not changed. Patch by\nCheryl Sabella.\nbpo-31500\n: Default fonts now are scaled on HiDPI displays.\nbpo-1612262\n: IDLE module browser now shows nested classes and functions.\nOriginal patches for code and tests by Guilherme Polo and Cheryl Sabella,\nrespectively.\nC API\n¶\nbpo-28280\n: Make\nPyMapping_Keys()\n,\nPyMapping_Values()\nand\nPyMapping_Items()\nalways return a\nlist\n(rather than a\nlist\nor\na\ntuple\n). Patch by Oren Milman.\nbpo-31532\n: Fix memory corruption due to allocator mix in getpath.c between\nPy_GetPath() and Py_SetPath()\nbpo-25658\n: Implement\nPEP 539\nfor Thread Specific Storage (TSS) API: it\nis a new Thread Local Storage (TLS) API to CPython which would supersede\nuse of the existing TLS API within the CPython interpreter, while\ndeprecating the existing API. PEP written by Erik M. Bray, patch by\nMasayuki Yamamoto.\nPython 3.7.0 alpha 1\n¶\nRelease date: 2017-09-19\nSecurity\n¶\nbpo-29781\n: SSLObject.version() now correctly returns None when handshake\nover BIO has not been performed yet.\nbpo-29505\n: Add fuzz tests for float(str), int(str), unicode(str); for\noss-fuzz.\nbpo-30947\n: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to\nget security fixes.\nbpo-30730\n: Prevent environment variables injection in subprocess on\nWindows.  Prevent passing other environment variables and command\narguments.\nbpo-30694\n: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple\nsecurity vulnerabilities including:\nCVE 2017-9233\n(External entity\ninfinite loop DoS),\nCVE 2016-9063\n(Integer overflow, re-fix),\nCVE 2016-0718\n(Fix regression bugs from 2.2.0’s fix to\nCVE 2016-0718\n) and\nCVE 2012-0876\n(Counter hash flooding with\nSipHash). Note: the\nCVE 2016-5300\n(Use os-specific entropy sources like\ngetrandom) doesn’t impact Python, since Python already gets entropy from\nthe OS to set the expat secret using\nXML_SetHashSalt()\n.\nbpo-30500\n: Fix urllib.parse.splithost() to correctly parse fragments. For\nexample,\nsplithost('//127.0.0.1#@evil.com/')\nnow correctly returns the\n127.0.0.1\nhost, instead of treating\n@evil.com\nas the host in an\nauthentication (\nlogin@host\n).\nbpo-29591\n: Update expat copy from 2.1.1 to 2.2.0 to get fixes of\nCVE 2016-0718\nand\nCVE 2016-4472\n. See\nhttps://sourceforge.net/p/expat/bugs/537/\nfor more information.\nCore and Builtins\n¶\nbpo-31490\n: Fix an assertion failure in\nctypes\nclass definition, in\ncase the class has an attribute whose name is specified in\n_anonymous_\nbut not in\n_fields_\n. Patch by Oren Milman.\nbpo-31471\n: Fix an assertion failure in\nsubprocess.Popen()\non Windows,\nin case the env argument has a bad\nkeys()\nmethod. Patch by Oren\nMilman.\nbpo-31418\n: Fix an assertion failure in\nPyErr_WriteUnraisable()\nin case\nof an exception with a bad\n__module__\nattribute. Patch by Oren Milman.\nbpo-31416\n: Fix assertion failures in case of a bad warnings.filters or\nwarnings.defaultaction. Patch by Oren Milman.\nbpo-28411\n: Change direct usage of PyInterpreterState.modules to\nPyImport_GetModuleDict(). Also introduce more uniformity in other code\nthat deals with sys.modules. This helps reduce complications when working\non sys.modules.\nbpo-28411\n: Switch to the abstract API when dealing with\nPyInterpreterState.modules\n. This allows later support for all dict\nsubclasses and other Mapping implementations.  Also add a\nPyImport_GetModule()\nfunction to reduce a bunch of duplicated code.\nbpo-31411\n: Raise a TypeError instead of SystemError in case\nwarnings.onceregistry is not a dictionary. Patch by Oren Milman.\nbpo-31344\n: For finer control of tracing behaviour when testing the\ninterpreter, two new frame attributes have been added to control the\nemission of particular trace events:\nf_trace_lines\n(\nTrue\nby\ndefault) to turn off per-line trace events; and\nf_trace_opcodes\n(\nFalse\nby default) to turn on per-opcode trace events.\nbpo-31373\n: Fix several possible instances of undefined behavior due to\nfloating-point demotions.\nbpo-30465\n: Location information (\nlineno\nand\ncol_offset\n) in\nf-strings is now (mostly) correct.  This fixes tools like flake8 from\nshowing warnings on the wrong line (typically the first line of the file).\nbpo-30860\n: Consolidate CPython’s global runtime state under a single\nstruct.  This improves discoverability of the runtime state.\nbpo-31347\n: Fix possible undefined behavior in _PyObject_FastCall_Prepend.\nbpo-31343\n: Include sys/sysmacros.h for major(), minor(), and makedev().\nGNU C libray plans to remove the functions from sys/types.h.\nbpo-31291\n: Fix an assertion failure in\nzipimport.zipimporter.get_data\non Windows, when the return value of\npathname.replace('/','\\\\')\nisn’t\na string. Patch by Oren Milman.\nbpo-31271\n: Fix an assertion failure in the\nwrite()\nmethod of\nio.TextIOWrapper\n, when the encoder doesn’t return a bytes object.\nPatch by Oren Milman.\nbpo-31243\n: Fix a crash in some methods of\nio.TextIOWrapper\n, when the\ndecoder’s state is invalid. Patch by Oren Milman.\nbpo-30721\n:\nprint\nnow shows correct usage hint for using Python 2\nredirection syntax.  Patch by Sanyam Khurana.\nbpo-31070\n: Fix a race condition in importlib _get_module_lock().\nbpo-30747\n: Add a non-dummy implementation of _Py_atomic_store and\n_Py_atomic_load on MSVC.\nbpo-31095\n: Fix potential crash during GC caused by\ntp_dealloc\nwhich\ndoesn’t call\nPyObject_GC_UnTrack()\n.\nbpo-31071\n: Avoid masking original TypeError in call with * unpacking when\nother arguments are passed.\nbpo-30978\n: str.format_map() now passes key lookup exceptions through.\nPreviously any exception was replaced with a KeyError exception.\nbpo-30808\n: Use _Py_atomic API for concurrency-sensitive signal state.\nbpo-30876\n: Relative import from unloaded package now reimports the package\ninstead of failing with SystemError.  Relative import from non-package now\nfails with ImportError rather than SystemError.\nbpo-30703\n: Improve signal delivery. Avoid using Py_AddPendingCall from\nsignal handler, to avoid calling signal-unsafe functions. The tests I’m\nadding here fail without the rest of the patch, on Linux and OS X. This\nmeans our signal delivery logic had defects (some signals could be lost).\nbpo-30765\n: Avoid blocking in pthread_mutex_lock() when\nPyThread_acquire_lock() is asked not to block.\nbpo-31161\n: Make sure the ‘Missing parentheses’ syntax error message is\nonly applied to SyntaxError, not to subclasses. Patch by Martijn Pieters.\nbpo-30814\n: Fixed a race condition when import a submodule from a package.\nbpo-30736\n: The internal unicodedata database has been upgraded to Unicode\n10.0.\nbpo-30604\n: Move co_extra_freefuncs from per-thread to per-interpreter to\navoid crashes.\nbpo-30597\n:\nprint\nnow shows expected input in custom error message when\nused as a Python 2 statement. Patch by Sanyam Khurana.\nbpo-30682\n: Removed a too-strict assertion that failed for certain\nf-strings, such as eval(“f’\\n’”) and eval(“f’\\r’”).\nbpo-30501\n: The compiler now produces more optimal code for complex\ncondition expressions in the “if”, “while” and “assert” statement, the\n“if” expression, and generator expressions and comprehensions.\nbpo-28180\n: Implement\nPEP 538\n(legacy C locale coercion). This means\nthat when a suitable coercion target locale is available, both the core\ninterpreter and locale-aware C extensions will assume the use of UTF-8 as\nthe default text encoding, rather than ASCII.\nbpo-30486\n: Allows setting cell values for __closure__. Patch by Lisa\nRoach.\nbpo-30537\n: itertools.islice now accepts integer-like objects (having an\n__index__ method) as start, stop, and slice arguments\nbpo-25324\n: Tokens needed for parsing in Python moved to C.\nCOMMENT\n,\nNL\nand\nENCODING\n. This way the tokens and tok_names in the token\nmodule don’t get changed when you import the tokenize module.\nbpo-29104\n: Fixed parsing backslashes in f-strings.\nbpo-27945\n: Fixed various segfaults with dict when input collections are\nmutated during searching, inserting or comparing.  Based on patches by\nDuane Griffin and Tim Mitchell.\nbpo-25794\n: Fixed type.__setattr__() and type.__delattr__() for\nnon-interned attribute names.  Based on patch by Eryk Sun.\nbpo-30039\n: If a KeyboardInterrupt happens when the interpreter is in the\nmiddle of resuming a chain of nested ‘yield from’ or ‘await’ calls, it’s\nnow correctly delivered to the innermost frame.\nbpo-28974\n:\nobject.__format__(x,\n'')\nis now equivalent to\nstr(x)\nrather than\nformat(str(self),\n'')\n.\nbpo-30024\n: Circular imports involving absolute imports with binding a\nsubmodule to a name are now supported.\nbpo-12414\n: sys.getsizeof() on a code object now returns the sizes which\nincludes the code struct and sizes of objects which it references. Patch\nby Donghee Na.\nbpo-29839\n: len() now raises ValueError rather than OverflowError if\n__len__() returned a large negative integer.\nbpo-11913\n: README.rst is now included in the list of distutils standard\nREADMEs and therefore included in source distributions.\nbpo-29914\n: Fixed default implementations of __reduce__ and\n__reduce_ex__(). object.__reduce__() no longer takes arguments,\nobject.__reduce_ex__() now requires one argument.\nbpo-29949\n: Fix memory usage regression of set and frozenset object.\nbpo-29935\n: Fixed error messages in the index() method of tuple, list and\ndeque when pass indices of wrong type.\nbpo-29816\n: Shift operation now has less opportunity to raise\nOverflowError. ValueError always is raised rather than OverflowError for\nnegative counts. Shifting zero with non-negative count always returns\nzero.\nbpo-24821\n: Fixed the slowing down to 25 times in the searching of some\nunlucky Unicode characters.\nbpo-29102\n: Add a unique ID to PyInterpreterState.  This makes it easier to\nidentify each subinterpreter.\nbpo-29894\n: The deprecation warning is emitted if __complex__ returns an\ninstance of a strict subclass of complex.  In a future versions of Python\nthis can be an error.\nbpo-29859\n: Show correct error messages when any of the pthread_* calls in\nthread_pthread.h fails.\nbpo-29849\n: Fix a memory leak when an ImportError is raised during from\nimport.\nbpo-28856\n: Fix an oversight that %b format for bytes should support\nobjects follow the buffer protocol.\nbpo-29723\n: The\nsys.path[0]\ninitialization change for\nbpo-29139\ncaused\na regression by revealing an inconsistency in how sys.path is initialized\nwhen executing\n__main__\nfrom a zipfile, directory, or other import\nlocation. The interpreter now consistently avoids ever adding the import\nlocation’s parent directory to\nsys.path\n, and ensures no other\nsys.path\nentries are inadvertently modified when inserting the import\nlocation named on the command line.\nbpo-29568\n: Escaped percent “%%” in the format string for classic string\nformatting no longer allows any characters between two percents.\nbpo-29714\n: Fix a regression that bytes format may fail when containing\nzero bytes inside.\nbpo-29695\n: bool(), float(), list() and tuple() no longer take keyword\narguments. The first argument of int() can now be passes only as\npositional argument.\nbpo-28893\n: Set correct __cause__ for errors about invalid awaitables\nreturned from __aiter__ and __anext__.\nbpo-28876\n:\nbool(range)\nworks even if\nlen(range)\nraises\nOverflowError\n.\nbpo-29683\n: Fixes to memory allocation in _PyCode_SetExtra.  Patch by Brian\nColeman.\nbpo-29684\n: Fix minor regression of PyEval_CallObjectWithKeywords. It\nshould raise TypeError when kwargs is not a dict.  But it might cause segv\nwhen args=NULL and kwargs is not a dict.\nbpo-28598\n: Support __rmod__ for subclasses of str being called before\nstr.__mod__. Patch by Martijn Pieters.\nbpo-29607\n: Fix stack_effect computation for CALL_FUNCTION_EX. Patch by\nMatthieu Dartiailh.\nbpo-29602\n: Fix incorrect handling of signed zeros in complex constructor\nfor complex subclasses and for inputs having a __complex__ method. Patch\nby Serhiy Storchaka.\nbpo-29347\n: Fixed possibly dereferencing undefined pointers when creating\nweakref objects.\nbpo-29463\n: Add\ndocstring\nfield to Module, ClassDef, FunctionDef, and\nAsyncFunctionDef ast nodes.  docstring is not first stmt in their body\nanymore.  It affects\nco_firstlineno\nand\nco_lnotab\nof code object\nfor module and class. (Reverted in\nbpo-32911\n.)\nbpo-29438\n: Fixed use-after-free problem in key sharing dict.\nbpo-29546\n: Set the ‘path’ and ‘name’ attribute on ImportError for\nfrom\n...\nimport\n...\n.\nbpo-29546\n: Improve from-import error message with location\nbpo-29478\n: If max_line_length=None is specified while using the Compat32\npolicy, it is no longer ignored.  Patch by Mircea Cosbuc.\nbpo-29319\n: Prevent RunMainFromImporter overwriting sys.path[0].\nbpo-29337\n: Fixed possible BytesWarning when compare the code objects.\nWarnings could be emitted at compile time.\nbpo-29327\n: Fixed a crash when pass the iterable keyword argument to\nsorted().\nbpo-29034\n: Fix memory leak and use-after-free in os module\n(path_converter).\nbpo-29159\n: Fix regression in bytes(x) when x.__index__() raises Exception.\nbpo-29049\n: Call _PyObject_GC_TRACK() lazily when calling Python function.\nCalling function is up to 5% faster.\nbpo-28927\n: bytes.fromhex() and bytearray.fromhex() now ignore all ASCII\nwhitespace, not only spaces.  Patch by Robert Xiao.\nbpo-28932\n: Do not include <sys/random.h> if it does not exist.\nbpo-25677\n: Correct the positioning of the syntax error caret for indented\nblocks. Based on patch by Michael Layzell.\nbpo-29000\n: Fixed bytes formatting of octals with zero padding in alternate\nform.\nbpo-18896\n: Python function can now have more than 255 parameters.\ncollections.namedtuple() now supports tuples with more than 255 elements.\nbpo-28596\n: The preferred encoding is UTF-8 on Android. Patch written by\nChi Hsuan Yen.\nbpo-22257\n: Clean up interpreter startup (see\nPEP 432\n).\nbpo-26919\n: On Android, operating system data is now always encoded/decoded\nto/from UTF-8, instead of the locale encoding to avoid inconsistencies\nwith os.fsencode() and os.fsdecode() which are already using UTF-8.\nbpo-28991\n: functools.lru_cache() was susceptible to an obscure reentrancy\nbug triggerable by a monkey-patched len() function.\nbpo-28147\n: Fix a memory leak in split-table dictionaries: setattr() must\nnot convert combined table into split table. Patch written by INADA Naoki.\nbpo-28739\n: f-string expressions are no longer accepted as docstrings and\nby ast.literal_eval() even if they do not include expressions.\nbpo-28512\n: Fixed setting the offset attribute of SyntaxError by\nPyErr_SyntaxLocationEx() and PyErr_SyntaxLocationObject().\nbpo-28918\n: Fix the cross compilation of xxlimited when Python has been\nbuilt with Py_DEBUG defined.\nbpo-23722\n: Rather than silently producing a class that doesn’t support\nzero-argument\nsuper()\nin methods, failing to pass the new\n__classcell__\nnamespace entry up to\ntype.__new__\nnow results in a\nDeprecationWarning\nand a class that supports zero-argument\nsuper()\n.\nbpo-28797\n: Modifying the class __dict__ inside the __set_name__ method of\na descriptor that is used inside that class no longer prevents calling the\n__set_name__ method of other descriptors.\nbpo-28799\n: Remove the\nPyEval_GetCallStats()\nfunction and deprecate the\nuntested and undocumented\nsys.callstats()\nfunction. Remove the\nCALL_PROFILE\nspecial build: use the\nsys.setprofile()\nfunction,\ncProfile\nor\nprofile\nto profile function calls.\nbpo-12844\n: More than 255 arguments can now be passed to a function.\nbpo-28782\n: Fix a bug in the implementation\nyield\nfrom\nwhen checking if\nthe next instruction is YIELD_FROM. Regression introduced by WORDCODE\n(\nbpo-26647\n).\nbpo-28774\n: Fix error position of the unicode error in ASCII and Latin1\nencoders when a string returned by the error handler contains multiple\nnon-encodable characters (non-ASCII for the ASCII codec, characters out of\nthe U+0000-U+00FF range for Latin1).\nbpo-28731\n: Optimize _PyDict_NewPresized() to create correct size dict.\nImprove speed of dict literal with constant keys up to 30%.\nbpo-28532\n: Show sys.version when -V option is supplied twice.\nbpo-27100\n: The with-statement now checks for __enter__ before it checks\nfor __exit__. This gives less confusing error messages when both methods\nare missing. Patch by Jonathan Ellington.\nbpo-28746\n: Fix the set_inheritable() file descriptor method on platforms\nthat do not have the ioctl FIOCLEX and FIONCLEX commands.\nbpo-26920\n: Fix not getting the locale’s charset upon initializing the\ninterpreter, on platforms that do not have langinfo.\nbpo-28648\n: Fixed crash in Py_DecodeLocale() in debug build on Mac OS X\nwhen decode astral characters.  Patch by Xiang Zhang.\nbpo-28665\n: Improve speed of the STORE_DEREF opcode by 40%.\nbpo-19398\n: Extra slash no longer added to sys.path components in case of\nempty compile-time PYTHONPATH components.\nbpo-28621\n: Sped up converting int to float by reusing faster bits counting\nimplementation.  Patch by Adrian Wielgosik.\nbpo-28580\n: Optimize iterating split table values. Patch by Xiang Zhang.\nbpo-28583\n: PyDict_SetDefault didn’t combine split table when needed. Patch\nby Xiang Zhang.\nbpo-28128\n: Deprecation warning for invalid str and byte escape sequences\nnow prints better information about where the error occurs. Patch by\nSerhiy Storchaka and Eric Smith.\nbpo-28509\n: dict.update() no longer allocate unnecessary large memory.\nbpo-28426\n: Fixed potential crash in PyUnicode_AsDecodedObject() in debug\nbuild.\nbpo-28517\n: Fixed of-by-one error in the peephole optimizer that caused\nkeeping unreachable code.\nbpo-28214\n: Improved exception reporting for problematic __set_name__\nattributes.\nbpo-23782\n: Fixed possible memory leak in _PyTraceback_Add() and exception\nloss in PyTraceBack_Here().\nbpo-28183\n: Optimize and cleanup dict iteration.\nbpo-26081\n: Added C implementation of asyncio.Future. Original patch by\nYury Selivanov.\nbpo-28379\n: Added sanity checks and tests for PyUnicode_CopyCharacters().\nPatch by Xiang Zhang.\nbpo-28376\n: The type of long range iterator is now registered as Iterator.\nPatch by Oren Milman.\nbpo-28376\n: Creating instances of range_iterator by calling range_iterator\ntype now is disallowed.  Calling iter() on range instance is the only way.\nPatch by Oren Milman.\nbpo-26906\n: Resolving special methods of uninitialized type now causes\nimplicit initialization of the type instead of a fail.\nbpo-18287\n: PyType_Ready() now checks that tp_name is not NULL. Original\npatch by Niklas Koep.\nbpo-24098\n: Fixed possible crash when AST is changed in process of\ncompiling it.\nbpo-28201\n: Dict reduces possibility of 2nd conflict in hash table when\nhashes have same lower bits.\nbpo-28350\n: String constants with null character no longer interned.\nbpo-26617\n: Fix crash when GC runs during weakref callbacks.\nbpo-27942\n: String constants now interned recursively in tuples and\nfrozensets.\nbpo-28289\n: ImportError.__init__ now resets not specified attributes.\nbpo-21578\n: Fixed misleading error message when ImportError called with\ninvalid keyword args.\nbpo-28203\n: Fix incorrect type in complex(1.0, {2:3}) error message. Patch\nby Soumya Sharma.\nbpo-28086\n: Single var-positional argument of tuple subtype was passed\nunscathed to the C-defined function.  Now it is converted to exact tuple.\nbpo-28214\n: Now __set_name__ is looked up on the class instead of the\ninstance.\nbpo-27955\n: Fallback on reading /dev/urandom device when the getrandom()\nsyscall fails with EPERM, for example when blocked by SECCOMP.\nbpo-28192\n: Don’t import readline in isolated mode.\nbpo-27441\n: Remove some redundant assignments to ob_size in longobject.c.\nThanks Oren Milman.\nbpo-27222\n: Clean up redundant code in long_rshift function. Thanks Oren\nMilman.\nUpgrade internal unicode databases to Unicode version 9.0.0.\nbpo-28131\n: Fix a regression in zipimport’s compile_source().  zipimport\nshould use the same optimization level as the interpreter.\nbpo-28126\n: Replace Py_MEMCPY with memcpy(). Visual Studio can properly\noptimize memcpy().\nbpo-28120\n: Fix dict.pop() for splitted dictionary when trying to remove a\n“pending key” (Not yet inserted in split-table). Patch by Xiang Zhang.\nbpo-26182\n: Raise DeprecationWarning when async and await keywords are used\nas variable/attribute/class/function name.\nbpo-26182\n: Fix a refleak in code that raises DeprecationWarning.\nbpo-28721\n: Fix asynchronous generators aclose() and athrow() to handle\nStopAsyncIteration propagation properly.\nbpo-26110\n: Speed-up method calls: add LOAD_METHOD and CALL_METHOD opcodes.\nLibrary\n¶\nbpo-31499\n: xml.etree: Fix a crash when a parser is part of a reference\ncycle.\nbpo-31482\n:\nrandom.seed()\nnow works with bytes in version=1\nbpo-28556\n: typing.get_type_hints now finds the right globalns for classes\nand modules by default (when no\nglobalns\nwas specified by the caller).\nbpo-28556\n: Speed improvements to the\ntyping\nmodule.  Original PRs by\nIvan Levkivskyi and Mitar.\nbpo-31544\n: The C accelerator module of ElementTree ignored exceptions\nraised when looking up TreeBuilder target methods in XMLParser().\nbpo-31234\n: socket.create_connection() now fixes manually a reference\ncycle: clear the variable storing the last exception on success.\nbpo-31457\n: LoggerAdapter objects can now be nested.\nbpo-31431\n: SSLContext.check_hostname now automatically sets\nSSLContext.verify_mode to ssl.CERT_REQUIRED instead of failing with a\nValueError.\nbpo-31233\n: socketserver.ThreadingMixIn now keeps a list of non-daemonic\nthreads to wait until all these threads complete in server_close().\nbpo-28638\n: Changed the implementation strategy for\ncollections.namedtuple() to substantially reduce the use of exec() in\nfavor of precomputed methods. As a result, the\nverbose\nparameter and\n_source\nattribute are no longer supported.  The benefits include 1)\nhaving a smaller memory footprint for applications using multiple named\ntuples, 2) faster creation of the named tuple class (approx 4x to 6x\ndepending on how it is measured), and 3) minor speed-ups for instance\ncreation using __new__, _make, and _replace.  (The primary patch\ncontributor is Jelle Zijlstra with further improvements by INADA Naoki,\nSerhiy Storchaka, and Raymond Hettinger.)\nbpo-31400\n: Improves SSL error handling to avoid losing error numbers.\nbpo-27629\n: Make return types of SSLContext.wrap_bio() and\nSSLContext.wrap_socket() customizable.\nbpo-28958\n: ssl.SSLContext() now uses OpenSSL error information when a\ncontext cannot be instantiated.\nbpo-28182\n: The SSL module now raises SSLCertVerificationError when OpenSSL\nfails to verify the peer’s certificate. The exception contains more\ninformation about the error.\nbpo-27340\n: SSLSocket.sendall() now uses memoryview to create slices of\ndata. This fixes support for all bytes-like object. It is also more\nefficient and avoids costly copies.\nbpo-14191\n: A new function\nargparse.ArgumentParser.parse_intermixed_args\nprovides the ability to\nparse command lines where there user intermixes options and positional\narguments.\nbpo-31178\n: Fix string concatenation bug in rare error path in the\nsubprocess module\nbpo-31350\n: Micro-optimize\nasyncio._get_running_loop()\nto become up\nto 10% faster.\nbpo-31170\n: expat: Update libexpat from 2.2.3 to 2.2.4. Fix copying of\npartial characters for UTF-8 input (libexpat bug 115):\nhttps://github.com/libexpat/libexpat/issues/115\nbpo-29136\n: Add TLS 1.3 cipher suites and OP_NO_TLSv1_3.\nbpo-1198569\n:\nstring.Template\nsubclasses can optionally define\nbraceidpattern\nif they want to specify different placeholder patterns\ninside and outside the braces.  If None (the default) it falls back to\nidpattern\n.\nbpo-31326\n: concurrent.futures.ProcessPoolExecutor.shutdown() now\nexplicitly closes the call queue. Moreover, shutdown(wait=True) now also\njoin the call queue thread, to prevent leaking a dangling thread.\nbpo-27144\n: The\nmap()\nand\nas_completed()\niterators in\nconcurrent.futures\nnow avoid keeping a reference to yielded objects.\nbpo-31281\n: Fix\nfileinput.FileInput(files,\ninplace=True)\nwhen\nfiles\ncontain\npathlib.Path\nobjects.\nbpo-10746\n: Fix ctypes producing wrong\nPEP 3118\ntype codes for integer\ntypes.\nbpo-27584\n:\nAF_VSOCK\nhas been added to the socket interface which\nallows communication between virtual machines and their host.\nbpo-22536\n: The subprocess module now sets the filename when\nFileNotFoundError is raised on POSIX systems due to the executable or cwd\nnot being found.\nbpo-29741\n: Update some methods in the _pyio module to also accept integer\ntypes. Patch by Oren Milman.\nbpo-31249\n: concurrent.futures: WorkItem.run() used by ThreadPoolExecutor\nnow breaks a reference cycle between an exception object and the WorkItem\nobject.\nbpo-31247\n: xmlrpc.server now explicitly breaks reference cycles when using\nsys.exc_info() in code handling exceptions.\nbpo-23835\n: configparser: reading defaults in the\nConfigParser()\nconstructor is now using\nread_dict()\n, making its behavior consistent\nwith the rest of the parser.  Non-string keys and values in the defaults\ndictionary are now being implicitly converted to strings.  Patch by James\nTocknell.\nbpo-31238\n: pydoc: the stop() method of the private ServerThread class now\nwaits until DocServer.serve_until_quit() completes and then explicitly\nsets its docserver attribute to None to break a reference cycle.\nbpo-5001\n: Many asserts in\nmultiprocessing\nare now more informative,\nand some error types have been changed to more specific ones.\nbpo-31109\n: Convert zipimport to use Argument Clinic.\nbpo-30102\n: The ssl and hashlib modules now call\nOPENSSL_add_all_algorithms_noconf() on OpenSSL < 1.1.0. The function\ndetects CPU features and enables optimizations on some CPU architectures\nsuch as POWER8. Patch is based on research from Gustavo Serra Scalet.\nbpo-18966\n: Non-daemonic threads created by a multiprocessing.Process are\nnow joined on child exit.\nbpo-31183\n:\ndis\nnow works with asynchronous generator and coroutine\nobjects. Patch by George Collins based on diagnosis by Luciano Ramalho.\nbpo-5001\n: There are a number of uninformative asserts in the\nmultiprocessing\nmodule, as noted in issue 5001. This change fixes two\nof the most potentially problematic ones, since they are in\nerror-reporting code, in the\nmultiprocessing.managers.convert_to_error\nfunction. (It also makes more informative a ValueError message.) The only\npotentially problematic change is that the AssertionError is now a\nTypeError; however, this should also help distinguish it from an\nAssertionError being\nreported\nby the function/its caller (such as in\nissue 31169). - Patch by Allen W. Smith (drallensmith on github).\nbpo-31185\n: Fixed miscellaneous errors in asyncio speedup module.\nbpo-31151\n: socketserver.ForkingMixIn.server_close() now waits until all\nchild processes completed to prevent leaking zombie processes.\nbpo-31072\n: Add an\ninclude_file\nparameter to\nzipapp.create_archive()\nbpo-24700\n: Optimize array.array comparison. It is now from 10x up to 70x\nfaster when comparing arrays holding values of the same integer type.\nbpo-31135\n: ttk: fix the destroy() method of LabeledScale and OptionMenu\nclasses. Call the parent destroy() method even if the used attribute\ndoesn’t exist. The LabeledScale.destroy() method now also explicitly\nclears label and scale attributes to help the garbage collector to destroy\nall widgets.\nbpo-31107\n: Fix\ncopyreg._slotnames()\nmangled attribute calculation for\nclasses whose name begins with an underscore. Patch by Shane Harvey.\nbpo-31080\n: Allow\nlogging.config.fileConfig\nto accept kwargs and/or\nargs.\nbpo-30897\n:\npathlib.Path\nobjects now include an\nis_mount()\nmethod\n(only implemented on POSIX).  This is similar to\nos.path.ismount(p)\n.\nPatch by Cooper Ry Lees.\nbpo-31061\n: Fixed a crash when using asyncio and threads.\nbpo-30987\n: Added support for CAN ISO-TP protocol in the socket module.\nbpo-30522\n: Added a\nsetStream\nmethod to\nlogging.StreamHandler\nto\nallow the stream to be set after creation.\nbpo-30502\n: Fix handling of long oids in ssl.  Based on patch by Christian\nHeimes.\nbpo-5288\n: Support tzinfo objects with sub-minute offsets.\nbpo-30919\n: Fix shared memory performance regression in multiprocessing in\n3.x. Shared memory used anonymous memory mappings in 2.x, while 3.x mmaps\nactual files. Try to be careful to do as little disk I/O as possible.\nbpo-26732\n: Fix too many fds in processes started with the “forkserver”\nmethod. A child process would inherit as many fds as the number of\nstill-running children.\nbpo-29403\n: Fix\nunittest.mock\n’s autospec to not fail on method-bound\nbuiltin functions.  Patch by Aaron Gallagher.\nbpo-30961\n: Fix decrementing a borrowed reference in tracemalloc.\nbpo-19896\n: Fix multiprocessing.sharedctypes to recognize typecodes\n'q'\nand\n'Q'\n.\nbpo-30946\n: Remove obsolete code in readline module for platforms where GNU\nreadline is older than 2.1 or where select() is not available.\nbpo-25684\n: Change\nttk.OptionMenu\nradiobuttons to be unique across\ninstances of\nOptionMenu\n.\nbpo-30886\n: Fix multiprocessing.Queue.join_thread(): it now waits until the\nthread completes, even if the thread was started by the same process which\ncreated the queue.\nbpo-29854\n: Fix segfault in readline when using readline’s history-size\noption.  Patch by Nir Soffer.\nbpo-30794\n: Added multiprocessing.Process.kill method to terminate using\nthe SIGKILL signal on Unix.\nbpo-30319\n: socket.close() now ignores ECONNRESET error.\nbpo-30828\n: Fix out of bounds write in\nasyncio.CFuture.remove_done_callback()\n.\nbpo-30302\n: Use keywords in the\nrepr\nof\ndatetime.timedelta\n.\nbpo-30807\n: signal.setitimer() may disable the timer when passed a tiny\nvalue. Tiny values (such as 1e-6) are valid non-zero values for\nsetitimer(), which is specified as taking microsecond-resolution\nintervals. However, on some platform, our conversion routine could convert\n1e-6 into a zero interval, therefore disabling the timer instead of\n(re-)scheduling it.\nbpo-30441\n: Fix bug when modifying os.environ while iterating over it\nbpo-29585\n: Avoid importing\nsysconfig\nfrom\nsite\nto improve startup\nspeed. Python startup is about 5% faster on Linux and 30% faster on macOS.\nbpo-29293\n: Add missing parameter “n” on\nmultiprocessing.Condition.notify(). The doc claims\nmultiprocessing.Condition behaves like threading.Condition, but its\nnotify() method lacked the optional “n” argument (to specify the number of\nsleepers to wake up) that threading.Condition.notify() accepts.\nbpo-30532\n: Fix email header value parser dropping folding white space in\ncertain cases.\nbpo-30596\n: Add a\nclose()\nmethod to\nmultiprocessing.Process\n.\nbpo-9146\n: Fix a segmentation fault in _hashopenssl when standard hash\nfunctions such as md5 are not available in the linked OpenSSL library.  As\nin some special FIPS-140 build environments.\nbpo-29169\n: Update zlib to 1.2.11.\nbpo-30119\n: ftplib.FTP.putline() now throws ValueError on commands that\ncontains CR or LF. Patch by Donghee Na.\nbpo-30879\n: os.listdir() and os.scandir() now emit bytes names when called\nwith bytes-like argument.\nbpo-30746\n: Prohibited the ‘=’ character in environment variable names in\nos.putenv()\nand\nos.spawn*()\n.\nbpo-30664\n: The description of a unittest subtest now preserves the order\nof keyword arguments of TestCase.subTest().\nbpo-21071\n: struct.Struct.format type is now\nstr\ninstead of\nbytes\n.\nbpo-29212\n: Fix concurrent.futures.thread.ThreadPoolExecutor threads to\nhave a non repr() based thread name by default when no thread_name_prefix\nis supplied. They will now identify themselves as\n“ThreadPoolExecutor-y_n”.\nbpo-29755\n: Fixed the lgettext() family of functions in the gettext module.\nThey now always return bytes.\nbpo-30616\n: Functional API of enum allows to create empty enums. Patched by\nDonghee Na\nbpo-30038\n: Fix race condition between signal delivery and wakeup file\ndescriptor. Patch by Nathaniel Smith.\nbpo-23894\n: lib2to3 now recognizes\nrb'...'\nand\nf'...'\nstrings.\nbpo-24744\n: pkgutil.walk_packages function now raises ValueError if\npath\nis a string. Patch by Sanyam Khurana.\nbpo-24484\n: Avoid race condition in multiprocessing cleanup.\nbpo-30589\n: Fix multiprocessing.Process.exitcode to return the opposite of\nthe signal number when the process is killed by a signal (instead of 255)\nwhen using the “forkserver” method.\nbpo-28994\n: The traceback no longer displayed for SystemExit raised in a\ncallback registered by atexit.\nbpo-30508\n: Don’t log exceptions if Task/Future “cancel()” method was\ncalled.\nbpo-30645\n: Fix path calculation in\nimp.load_package()\n, fixing it for\ncases when a package is only shipped with bytecodes. Patch by Alexandru\nArdelean.\nbpo-11822\n: The dis.dis() function now is able to disassemble nested code\nobjects.\nbpo-30624\n: selectors does not take KeyboardInterrupt and SystemExit into\naccount, leaving a fd in a bad state in case of error. Patch by Giampaolo\nRodola’.\nbpo-30595\n: multiprocessing.Queue.get() with a timeout now polls its reader\nin non-blocking mode if it succeeded to acquire the lock but the acquire\ntook longer than the timeout.\nbpo-28556\n: Updates to typing module: Add generic AsyncContextManager, add\nsupport for ContextManager on all versions. Original PRs by Jelle Zijlstra\nand Ivan Levkivskyi\nbpo-30605\n: re.compile() no longer raises a BytesWarning when compiling a\nbytes instance with misplaced inline modifier.  Patch by Roy Williams.\nbpo-29870\n: Fix ssl sockets leaks when connection is aborted in asyncio/ssl\nimplementation. Patch by Michaël Sghaïer.\nbpo-29743\n: Closing transport during handshake process leaks open socket.\nPatch by Nikolay Kim\nbpo-27585\n: Fix waiter cancellation in asyncio.Lock. Patch by Mathieu\nSornay.\nbpo-30014\n: modify() method of poll(), epoll() and devpoll() based classes\nof selectors module is around 10% faster.  Patch by Giampaolo Rodola’.\nbpo-30418\n: On Windows, subprocess.Popen.communicate() now also ignore\nEINVAL on stdin.write() if the child process is still running but closed\nthe pipe.\nbpo-30463\n: Addded empty __slots__ to abc.ABC.  This allows subclassers to\ndeny __dict__ and __weakref__ creation.  Patch by Aaron Hall.\nbpo-30520\n: Loggers are now pickleable.\nbpo-30557\n: faulthandler now correctly filters and displays exception codes\non Windows\nbpo-30526\n: Add TextIOWrapper.reconfigure() and a\nTextIOWrapper.write_through attribute.\nbpo-30245\n: Fix possible overflow when organize struct.pack_into error\nmessage.  Patch by Yuan Liu.\nbpo-30378\n: Fix the problem that logging.handlers.SysLogHandler cannot\nhandle IPv6 addresses.\nbpo-16500\n: Allow registering at-fork handlers.\nbpo-30470\n: Deprecate invalid ctypes call protection on Windows.  Patch by\nMariatta Wijaya.\nbpo-30414\n: multiprocessing.Queue._feed background running thread do not\nbreak from main loop on exception.\nbpo-30003\n: Fix handling escape characters in HZ codec.  Based on patch by\nMa Lin.\nbpo-30149\n: inspect.signature() now supports callables with\nvariable-argument parameters wrapped with partialmethod. Patch by Donghee\nNa.\nbpo-30436\n: importlib.find_spec() raises ModuleNotFoundError instead of\nAttributeError if the specified parent module is not a package (i.e. lacks\na __path__ attribute).\nbpo-30301\n: Fix AttributeError when using SimpleQueue.empty() under\nspawn\nand\nforkserver\nstart methods.\nbpo-30375\n: Warnings emitted when compile a regular expression now always\npoint to the line in the user code.  Previously they could point into\ninners of the re module if emitted from inside of groups or conditionals.\nbpo-30329\n: imaplib and poplib now catch the Windows socket WSAEINVAL error\n(code 10022) on shutdown(SHUT_RDWR): An invalid operation was attempted.\nThis error occurs sometimes on SSL connections.\nbpo-29196\n: Removed previously deprecated in Python 2.4 classes Plist, Dict\nand _InternalDict in the plistlib module.  Dict values in the result of\nfunctions readPlist() and readPlistFromBytes() are now normal dicts.  You\nno longer can use attribute access to access items of these dictionaries.\nbpo-9850\n: The\nmacpath\nis now deprecated and will be removed in\nPython 3.8.\nbpo-30299\n: Compiling regular expression in debug mode on CPython now\ndisplays the compiled bytecode in human readable form.\nbpo-30048\n: Fixed\nTask.cancel()\ncan be ignored when the task is running\ncoroutine and the coroutine returned without any more\nawait\n.\nbpo-30266\n: contextlib.AbstractContextManager now supports\nanti-registration by setting __enter__ = None or __exit__ = None,\nfollowing the pattern introduced in\nbpo-25958\n. Patch by Jelle Zijlstra.\nbpo-30340\n: Enhanced regular expressions optimization. This increased the\nperformance of matching some patterns up to 25 times.\nbpo-30298\n: Weaken the condition of deprecation warnings for inline\nmodifiers. Now allowed several subsequential inline modifiers at the start\nof the pattern (e.g.\n'(?i)(?s)...'\n).  In verbose mode whitespaces and\ncomments now are allowed before and between inline modifiers (e.g.\n'(?x)\n(?i)\n(?s)...'\n).\nbpo-30285\n: Optimized case-insensitive matching and searching of regular\nexpressions.\nbpo-29990\n: Fix range checking in GB18030 decoder.  Original patch by Ma\nLin.\nbpo-29979\n: rewrite cgi.parse_multipart, reusing the FieldStorage class and\nmaking its results consistent with those of FieldStorage for\nmultipart/form-data requests. Patch by Pierre Quentel.\nbpo-30243\n: Removed the __init__ methods of _json’s scanner and encoder.\nMisusing them could cause memory leaks or crashes.  Now scanner and\nencoder objects are completely initialized in the __new__ methods.\nbpo-30215\n: Compiled regular expression objects with the re.LOCALE flag no\nlonger depend on the locale at compile time.  Only the locale at matching\ntime affects the result of matching.\nbpo-30185\n: Avoid KeyboardInterrupt tracebacks in forkserver helper process\nwhen Ctrl-C is received.\nbpo-30103\n: binascii.b2a_uu() and uu.encode() now support using\n'`'\nas\nzero instead of space.\nbpo-28556\n: Various updates to typing module: add typing.NoReturn type, use\nWrapperDescriptorType, minor bug-fixes.  Original PRs by Jim\nFasarakis-Hilliard and Ivan Levkivskyi.\nbpo-30205\n: Fix getsockname() for unbound AF_UNIX sockets on Linux.\nbpo-30228\n: The seek() and tell() methods of io.FileIO now set the internal\nseekable attribute to avoid one syscall on open() (in buffered or text\nmode).\nbpo-30190\n: unittest’s assertAlmostEqual and assertNotAlmostEqual provide a\nbetter message in case of failure which includes the difference between\nleft and right arguments.  (patch by Giampaolo Rodola’)\nbpo-30101\n: Add support for curses.A_ITALIC.\nbpo-29822\n: inspect.isabstract() now works during __init_subclass__.  Patch\nby Nate Soares.\nbpo-29960\n: Preserve generator state when _random.Random.setstate() raises\nan exception. Patch by Bryan Olson.\nbpo-30070\n: Fixed leaks and crashes in errors handling in the parser\nmodule.\nbpo-22352\n: Column widths in the output of dis.dis() are now adjusted for\nlarge line numbers and instruction offsets.\nbpo-30061\n: Fixed crashes in IOBase methods __next__() and readlines() when\nreadline() or __next__() respectively return non-sizeable object. Fixed\npossible other errors caused by not checking results of PyObject_Size(),\nPySequence_Size(), or PyMapping_Size().\nbpo-30218\n: Fix PathLike support for shutil.unpack_archive. Patch by Jelle\nZijlstra.\nbpo-10076\n: Compiled regular expression and match objects in the re module\nnow support copy.copy() and copy.deepcopy() (they are considered atomic).\nbpo-30068\n: _io._IOBase.readlines will check if it’s closed first when hint\nis present.\nbpo-29694\n: Fixed race condition in pathlib mkdir with flags parents=True.\nPatch by Armin Rigo.\nbpo-29692\n: Fixed arbitrary unchaining of RuntimeError exceptions in\ncontextlib.contextmanager.  Patch by Siddharth Velankar.\nbpo-26187\n: Test that sqlite3 trace callback is not called multiple times\nwhen schema is changing.  Indirectly fixed by switching to use\nsqlite3_prepare_v2() in\nbpo-9303\n.  Patch by Aviv Palivoda.\nbpo-30017\n: Allowed calling the close() method of the zip entry writer\nobject multiple times.  Writing to a closed writer now always produces a\nValueError.\nbpo-29998\n: Pickling and copying ImportError now preserves name and path\nattributes.\nbpo-29995\n: re.escape() now escapes only regex special characters.\nbpo-29962\n: Add math.remainder operation, implementing remainder as\nspecified in IEEE 754.\nbpo-29649\n: Improve struct.pack_into() exception messages for problems with\nthe buffer size and offset.  Patch by Andrew Nester.\nbpo-29654\n: Support If-Modified-Since HTTP header (browser cache).  Patch\nby Pierre Quentel.\nbpo-29931\n: Fixed comparison check for ipaddress.ip_interface objects.\nPatch by Sanjay Sundaresan.\nbpo-29953\n: Fixed memory leaks in the replace() method of datetime and time\nobjects when pass out of bound fold argument.\nbpo-29942\n: Fix a crash in itertools.chain.from_iterable when encountering\nlong runs of empty iterables.\nbpo-10030\n: Sped up reading encrypted ZIP files by 2 times.\nbpo-29204\n: Element.getiterator() and the html parameter of XMLParser()\nwere deprecated only in the documentation (since Python 3.2 and 3.4\ncorrespondingly). Now using them emits a deprecation warning.\nbpo-27863\n: Fixed multiple crashes in ElementTree caused by race conditions\nand wrong types.\nbpo-25996\n: Added support of file descriptors in os.scandir() on Unix.\nos.fwalk() is sped up by 2 times by using os.scandir().\nbpo-28699\n: Fixed a bug in pools in multiprocessing.pool that raising an\nexception at the very first of an iterable may swallow the exception or\nmake the program hang. Patch by Davin Potts and Xiang Zhang.\nbpo-23890\n: unittest.TestCase.assertRaises() now manually breaks a\nreference cycle to not keep objects alive longer than expected.\nbpo-29901\n: The zipapp module now supports general path-like objects, not\njust pathlib.Path.\nbpo-25803\n: Avoid incorrect errors raised by Path.mkdir(exist_ok=True) when\nthe OS gives priority to errors such as EACCES over EEXIST.\nbpo-29861\n: Release references to tasks, their arguments and their results\nas soon as they are finished in multiprocessing.Pool.\nbpo-19930\n: The mode argument of os.makedirs() no longer affects the file\npermission bits of newly created intermediate-level directories.\nbpo-29884\n: faulthandler: Restore the old sigaltstack during teardown.\nPatch by Christophe Zeitouny.\nbpo-25455\n: Fixed crashes in repr of recursive buffered file-like objects.\nbpo-29800\n: Fix crashes in partial.__repr__ if the keys of partial.keywords\nare not strings.  Patch by Michael Seifert.\nbpo-8256\n: Fixed possible failing or crashing input() if attributes\n“encoding” or “errors” of sys.stdin or sys.stdout are not set or are not\nstrings.\nbpo-28692\n: Using non-integer value for selecting a plural form in gettext\nis now deprecated.\nbpo-26121\n: Use C library implementation for math functions erf() and\nerfc().\nbpo-29619\n: os.stat() and os.DirEntry.inode() now convert inode (st_ino)\nusing unsigned integers.\nbpo-28298\n: Fix a bug that prevented array ‘Q’, ‘L’ and ‘I’ from accepting\nbig intables (objects that have __int__) as elements.\nbpo-29645\n: Speed up importing the webbrowser module.\nwebbrowser.register() is now thread-safe.\nbpo-28231\n: The zipfile module now accepts path-like objects for external\npaths.\nbpo-26915\n: index() and count() methods of collections.abc.Sequence now\ncheck identity before checking equality when do comparisons.\nbpo-28682\n: Added support for bytes paths in os.fwalk().\nbpo-29728\n: Add new\nsocket.TCP_NOTSENT_LOWAT\n(Linux 3.12)\nconstant. Patch by Nathaniel J. Smith.\nbpo-29623\n: Allow use of path-like object as a single argument in\nConfigParser.read(). Patch by David Ellis.\nbpo-9303\n: Migrate sqlite3 module to _v2 API.  Patch by Aviv Palivoda.\nbpo-28963\n: Fix out of bound iteration in\nasyncio.Future.remove_done_callback implemented in C.\nbpo-29704\n: asyncio.subprocess.SubprocessStreamProtocol no longer closes\nbefore all pipes are closed.\nbpo-29271\n: Fix Task.current_task and Task.all_tasks implemented in C to\naccept None argument as their pure Python implementation.\nbpo-29703\n: Fix asyncio to support instantiation of new event loops in\nchild processes.\nbpo-29615\n: SimpleXMLRPCDispatcher no longer chains KeyError (or any other\nexception) to exception(s) raised in the dispatched methods. Patch by Petr\nMotejlek.\nbpo-7769\n: Method register_function() of\nxmlrpc.server.SimpleXMLRPCDispatcher and its subclasses can now be used as\na decorator.\nbpo-29376\n: Fix assertion error in threading._DummyThread.is_alive().\nbpo-28624\n: Add a test that checks that cwd parameter of Popen() accepts\nPathLike objects.  Patch by Sayan Chowdhury.\nbpo-28518\n: Start a transaction implicitly before a DML statement. Patch by\nAviv Palivoda.\nbpo-29742\n: get_extra_info() raises exception if get called on closed ssl\ntransport. Patch by Nikolay Kim.\nbpo-16285\n: urllib.parse.quote is now based on RFC 3986 and hence includes\n‘~’ in the set of characters that is not quoted by default. Patch by\nChristian Theune and Ratnadeep Debnath.\nbpo-29532\n: Altering a kwarg dictionary passed to functools.partial() no\nlonger affects a partial object after creation.\nbpo-29110\n: Fix file object leak in aifc.open() when file is given as a\nfilesystem path and is not in valid AIFF format. Patch by Anthony Zhang.\nbpo-22807\n: Add uuid.SafeUUID and uuid.UUID.is_safe to relay information\nfrom the platform about whether generated UUIDs are generated with a\nmultiprocessing safe method.\nbpo-29576\n: Improve some deprecations in importlib. Some deprecated methods\nnow emit DeprecationWarnings and have better descriptive messages.\nbpo-29534\n: Fixed different behaviour of Decimal.from_float() for _decimal\nand _pydecimal. Thanks Andrew Nester.\nbpo-10379\n: locale.format_string now supports the ‘monetary’ keyword\nargument, and locale.format is deprecated.\nbpo-29851\n: importlib.reload() now raises ModuleNotFoundError if the module\nlacks a spec.\nbpo-28556\n: Various updates to typing module: typing.Counter,\ntyping.ChainMap, improved ABC caching, etc. Original PRs by Jelle\nZijlstra, Ivan Levkivskyi, Manuel Krebber, and Łukasz Langa.\nbpo-29100\n: Fix datetime.fromtimestamp() regression introduced in Python\n3.6.0: check minimum and maximum years.\nbpo-29416\n: Prevent infinite loop in pathlib.Path.mkdir\nbpo-29444\n: Fixed out-of-bounds buffer access in the group() method of the\nmatch object. Based on patch by WGH.\nbpo-29377\n: Add WrapperDescriptorType, MethodWrapperType, and\nMethodDescriptorType built-in types to types module. Original patch by\nManuel Krebber.\nbpo-29218\n: Unused install_misc command is now removed.  It has been\ndocumented as unused since 2000.  Patch by Eric N. Vander Weele.\nbpo-29368\n: The extend() method is now called instead of the append()\nmethod when unpickle collections.deque and other list-like objects. This\ncan speed up unpickling to 2 times.\nbpo-29338\n: The help of a builtin or extension class now includes the\nconstructor signature if __text_signature__ is provided for the class.\nbpo-29335\n: Fix subprocess.Popen.wait() when the child process has exited\nto a stopped instead of terminated state (ex: when under ptrace).\nbpo-29290\n: Fix a regression in argparse that help messages would wrap at\nnon-breaking spaces.\nbpo-28735\n: Fixed the comparison of mock.MagickMock with mock.ANY.\nbpo-29197\n: Removed deprecated function ntpath.splitunc().\nbpo-29210\n: Removed support of deprecated argument “exclude” in\ntarfile.TarFile.add().\nbpo-29219\n: Fixed infinite recursion in the repr of uninitialized\nctypes.CDLL instances.\nbpo-29192\n: Removed deprecated features in the http.cookies module.\nbpo-29193\n: A format string argument for string.Formatter.format() is now\npositional-only.\nbpo-29195\n: Removed support of deprecated undocumented keyword arguments in\nmethods of regular expression objects.\nbpo-28969\n: Fixed race condition in C implementation of\nfunctools.lru_cache. KeyError could be raised when cached function with\nfull cache was simultaneously called from different threads with the same\nuncached arguments.\nbpo-20804\n: The unittest.mock.sentinel attributes now preserve their\nidentity when they are copied or pickled.\nbpo-29142\n: In urllib.request, suffixes in no_proxy environment variable\nwith leading dots could match related hostnames again (e.g. .b.c matches\na.b.c). Patch by Milan Oberkirch.\nbpo-28961\n: Fix unittest.mock._Call helper: don’t ignore the name parameter\nanymore. Patch written by Jiajun Huang.\nbpo-15812\n: inspect.getframeinfo() now correctly shows the first line of a\ncontext. Patch by Sam Breese.\nbpo-28985\n: Update authorizer constants in sqlite3 module. Patch by\nDingyuan Wang.\nbpo-29079\n: Prevent infinite loop in pathlib.resolve() on Windows\nbpo-13051\n: Fixed recursion errors in large or resized\ncurses.textpad.Textbox.  Based on patch by Tycho Andersen.\nbpo-9770\n: curses.ascii predicates now work correctly with negative\nintegers.\nbpo-28427\n: old keys should not remove new values from WeakValueDictionary\nwhen collecting from another thread.\nbpo-28923\n: Remove editor artifacts from Tix.py.\nbpo-28871\n: Fixed a crash when deallocate deep ElementTree.\nbpo-19542\n: Fix bugs in WeakValueDictionary.setdefault() and\nWeakValueDictionary.pop() when a GC collection happens in another thread.\nbpo-20191\n: Fixed a crash in resource.prlimit() when passing a sequence\nthat doesn’t own its elements as limits.\nbpo-16255\n: subprocess.Popen uses /system/bin/sh on Android as the shell,\ninstead of /bin/sh.\nbpo-28779\n: multiprocessing.set_forkserver_preload() would crash the\nforkserver process if a preloaded module instantiated some multiprocessing\nobjects such as locks.\nbpo-26937\n: The chown() method of the tarfile.TarFile class does not fail\nnow when the grp module cannot be imported, as for example on Android\nplatforms.\nbpo-28847\n: dbm.dumb now supports reading read-only files and no longer\nwrites the index file when it is not changed.  A deprecation warning is\nnow emitted if the index file is missed and recreated in the ‘r’ and ‘w’\nmodes (will be an error in future Python releases).\nbpo-27030\n: Unknown escapes consisting of\n'\\'\nand an ASCII letter in\nre.sub() replacement templates regular expressions now are errors.\nbpo-28835\n: Fix a regression introduced in warnings.catch_warnings(): call\nwarnings.showwarning() if it was overridden inside the context manager.\nbpo-27172\n: To assist with upgrades from 2.7, the previously documented\ndeprecation of\ninspect.getfullargspec()\nhas been reversed. This\ndecision may be revisited again after the Python 2.7 branch is no longer\nofficially supported.\nbpo-28740\n: Add sys.getandroidapilevel(): return the build time API version\nof Android as an integer. Function only available on Android.\nbpo-26273\n: Add new\nsocket.TCP_CONGESTION\n(Linux 2.6.13) and\nsocket.TCP_USER_TIMEOUT\n(Linux 2.6.37) constants. Patch written\nby Omar Sandoval.\nbpo-28752\n: Restored the __reduce__() methods of datetime objects.\nbpo-28727\n: Regular expression patterns, _sre.SRE_Pattern objects created\nby re.compile(), become comparable (only x==y and x!=y operators). This\nchange should fix the\nbpo-18383\n: don’t duplicate warning filters when\nthe warnings module is reloaded (thing usually only done in unit tests).\nbpo-20572\n: Remove the subprocess.Popen.wait endtime parameter.  It was\ndeprecated in 3.4 and undocumented prior to that.\nbpo-25659\n: In ctypes, prevent a crash calling the from_buffer() and\nfrom_buffer_copy() methods on abstract classes like Array.\nbpo-28548\n: In the “http.server” module, parse the protocol version if\npossible, to avoid using HTTP 0.9 in some error responses.\nbpo-19717\n: Makes Path.resolve() succeed on paths that do not exist. Patch\nby Vajrasky Kok\nbpo-28563\n: Fixed possible DoS and arbitrary code execution when handle\nplural form selections in the gettext module.  The expression parser now\nsupports exact syntax supported by GNU gettext.\nbpo-28387\n: Fixed possible crash in _io.TextIOWrapper deallocator when the\ngarbage collector is invoked in other thread.  Based on patch by Sebastian\nCufre.\nbpo-27517\n: LZMA compressor and decompressor no longer raise exceptions if\ngiven empty data twice.  Patch by Benjamin Fogle.\nbpo-28549\n: Fixed segfault in curses’s addch() with ncurses6.\nbpo-28449\n: tarfile.open() with mode “r” or “r:” now tries to open a tar\nfile with compression before trying to open it without compression.\nOtherwise it had 50% chance failed with ignore_zeros=True.\nbpo-23262\n: The webbrowser module now supports Firefox 36+ and derived\nbrowsers.  Based on patch by Oleg Broytman.\nbpo-24241\n: The webbrowser in an X environment now prefers using the\ndefault browser directly. Also, the webbrowser register() function now has\na documented ‘preferred’ argument, to specify browsers to be returned by\nget() with no arguments. Patch by David Steele\nbpo-27939\n: Fixed bugs in tkinter.ttk.LabeledScale and tkinter.Scale caused\nby representing the scale as float value internally in Tk.  tkinter.IntVar\nnow works if float value is set to underlying Tk variable.\nbpo-28255\n: calendar.TextCalendar.prweek() no longer prints a space after a\nweeks’s calendar.  calendar.TextCalendar.pryear() no longer prints\nredundant newline after a year’s calendar.  Based on patch by Xiang Zhang.\nbpo-28255\n: calendar.TextCalendar.prmonth() no longer prints a space at the\nstart of new line after printing a month’s calendar.  Patch by Xiang\nZhang.\nbpo-20491\n: The textwrap.TextWrapper class now honors non-breaking spaces.\nBased on patch by Kaarle Ritvanen.\nbpo-28353\n: os.fwalk() no longer fails on broken links.\nbpo-28430\n: Fix iterator of C implemented asyncio.Future doesn’t accept\nnon-None value is passed to it.send(val).\nbpo-27025\n: Generated names for Tkinter widgets now start by the “!” prefix\nfor readability.\nbpo-25464\n: Fixed HList.header_exists() in tkinter.tix module by addin a\nworkaround to Tix library bug.\nbpo-28488\n: shutil.make_archive() no longer adds entry “./” to ZIP archive.\nbpo-25953\n: re.sub() now raises an error for invalid numerical group\nreference in replacement template even if the pattern is not found in the\nstring.  Error message for invalid group reference now includes the group\nindex and the position of the reference. Based on patch by SilentGhost.\nbpo-28469\n: timeit now uses the sequence 1, 2, 5, 10, 20, 50,… instead of\n1, 10, 100,… for autoranging.\nbpo-28115\n: Command-line interface of the zipfile module now uses argparse.\nAdded support of long options.\nbpo-18219\n: Optimize csv.DictWriter for large number of columns. Patch by\nMariatta Wijaya.\nbpo-28448\n: Fix C implemented asyncio.Future didn’t work on Windows.\nbpo-23214\n: In the “io” module, the argument to BufferedReader and\nBytesIO’s read1() methods is now optional and can be -1, matching the\nBufferedIOBase specification.\nbpo-28480\n: Fix error building socket module when multithreading is\ndisabled.\nbpo-28240\n: timeit: remove\n-c/--clock\nand\n-t/--time\ncommand line\noptions which were deprecated since Python 3.3.\nbpo-28240\n: timeit now repeats the benchmarks 5 times instead of only 3 to\nmake benchmarks more reliable.\nbpo-28240\n: timeit autorange now uses a single loop iteration if the\nbenchmark takes less than 10 seconds, instead of 10 iterations. “python3\n-m timeit -s ‘import time’ ‘time.sleep(1)’” now takes 4 seconds instead of\n40 seconds.\nDistutils.sdist now looks for README and setup.py files with case\nsensitivity. This behavior matches that found in Setuptools 6.0 and later.\nSee\nsetuptools 100\nfor\nrationale.\nbpo-24452\n: Make webbrowser support Chrome on Mac OS X. Patch by Ned\nBatchelder.\nbpo-20766\n: Fix references leaked by pdb in the handling of SIGINT\nhandlers.\nbpo-27998\n: Fixed bytes path support in os.scandir() on Windows. Patch by\nEryk Sun.\nbpo-28317\n: The disassembler now decodes FORMAT_VALUE argument.\nbpo-28380\n: unittest.mock Mock autospec functions now properly support\nassert_called, assert_not_called, and assert_called_once.\nbpo-28229\n: lzma module now supports pathlib.\nbpo-28321\n: Fixed writing non-BMP characters with binary format in\nplistlib.\nbpo-28225\n: bz2 module now supports pathlib.  Initial patch by Ethan\nFurman.\nbpo-28227\n: gzip now supports pathlib.  Patch by Ethan Furman.\nbpo-28332\n: Deprecated silent truncations in socket.htons and socket.ntohs.\nOriginal patch by Oren Milman.\nbpo-27358\n: Optimized merging var-keyword arguments and improved error\nmessage when passing a non-mapping as a var-keyword argument.\nbpo-28257\n: Improved error message when passing a non-iterable as a\nvar-positional argument.  Added opcode BUILD_TUPLE_UNPACK_WITH_CALL.\nbpo-28322\n: Fixed possible crashes when unpickle itertools objects from\nincorrect pickle data.  Based on patch by John Leitch.\nbpo-28228\n: imghdr now supports pathlib.\nbpo-28226\n: compileall now supports pathlib.\nbpo-28314\n: Fix function declaration (C flags) for the getiterator() method\nof xml.etree.ElementTree.Element.\nbpo-28148\n: Stop using localtime() and gmtime() in the time module.\nIntroduced platform independent _PyTime_localtime API that is similar to\nPOSIX localtime_r, but available on all platforms.  Patch by Ed Schouten.\nbpo-28253\n: Fixed calendar functions for extreme months: 0001-01 and\n9999-12. Methods itermonthdays() and itermonthdays2() are reimplemented so\nthat they don’t call itermonthdates() which can cause datetime.date\nunder/overflow.\nbpo-28275\n: Fixed possible use after free in the decompress() methods of\nthe LZMADecompressor and BZ2Decompressor classes. Original patch by John\nLeitch.\nbpo-27897\n: Fixed possible crash in sqlite3.Connection.create_collation()\nif pass invalid string-like object as a name.  Patch by Xiang Zhang.\nbpo-18844\n: random.choices() now has k as a keyword-only argument to\nimprove the readability of common cases and come into line with the\nsignature used in other languages.\nbpo-18893\n: Fix invalid exception handling in Lib/ctypes/macholib/dyld.py.\nPatch by Madison May.\nbpo-27611\n: Fixed support of default root window in the tkinter.tix module.\nAdded the master parameter in the DisplayStyle constructor.\nbpo-27348\n: In the traceback module, restore the formatting of exception\nmessages like “Exception: None”.  This fixes a regression introduced in\n3.5a2.\nbpo-25651\n: Allow false values to be used for msg parameter of subTest().\nbpo-27778\n: Fix a memory leak in os.getrandom() when the getrandom() is\ninterrupted by a signal and a signal handler raises a Python exception.\nbpo-28200\n: Fix memory leak on Windows in the os module (fix\npath_converter() function).\nbpo-25400\n: RobotFileParser now correctly returns default values for\ncrawl_delay and request_rate.  Initial patch by Peter Wirtz.\nbpo-27932\n: Prevent memory leak in win32_ver().\nFix UnboundLocalError in socket._sendfile_use_sendfile.\nbpo-28075\n: Check for ERROR_ACCESS_DENIED in Windows implementation of\nos.stat().  Patch by Eryk Sun.\nbpo-22493\n: Warning message emitted by using inline flags in the middle of\nregular expression now contains a (truncated) regex pattern. Patch by Tim\nGraham.\nbpo-25270\n: Prevent codecs.escape_encode() from raising SystemError when an\nempty bytestring is passed.\nbpo-28181\n: Get antigravity over HTTPS. Patch by Kaartic Sivaraam.\nbpo-25895\n: Enable WebSocket URL schemes in urllib.parse.urljoin. Patch by\nGergely Imreh and Markus Holtermann.\nbpo-28114\n: Fix a crash in parse_envlist() when env contains byte strings.\nPatch by Eryk Sun.\nbpo-27599\n: Fixed buffer overrun in binascii.b2a_qp() and\nbinascii.a2b_qp().\nbpo-27906\n: Fix socket accept exhaustion during high TCP traffic. Patch by\nKevin Conway.\nbpo-28174\n: Handle when SO_REUSEPORT isn’t properly supported. Patch by\nSeth Michael Larson.\nbpo-26654\n: Inspect functools.partial in asyncio.Handle.__repr__. Patch by\niceboy.\nbpo-26909\n: Fix slow pipes IO in asyncio. Patch by INADA Naoki.\nbpo-28176\n: Fix callbacks race in asyncio.SelectorLoop.sock_connect.\nbpo-27759\n: Fix selectors incorrectly retain invalid file descriptors.\nPatch by Mark Williams.\nbpo-28325\n: Remove vestigial MacOS 9 macurl2path module and its tests.\nbpo-28368\n: Refuse monitoring processes if the child watcher has no loop\nattached. Patch by Vincent Michel.\nbpo-28369\n: Raise RuntimeError when transport’s FD is used with add_reader,\nadd_writer, etc.\nbpo-28370\n: Speedup asyncio.StreamReader.readexactly. Patch by Коренберг\nМарк.\nbpo-28371\n: Deprecate passing asyncio.Handles to run_in_executor.\nbpo-28372\n: Fix asyncio to support formatting of non-python coroutines.\nbpo-28399\n: Remove UNIX socket from FS before binding. Patch by Коренберг\nМарк.\nbpo-27972\n: Prohibit Tasks to await on themselves.\nbpo-24142\n: Reading a corrupt config file left configparser in an invalid\nstate. Original patch by Florian Höch.\nbpo-29581\n: ABCMeta.__new__ now accepts\n**kwargs\n, allowing abstract\nbase classes to use keyword parameters in __init_subclass__. Patch by Nate\nSoares.\nbpo-25532\n: inspect.unwrap() will now only try to unwrap an object\nsys.getrecursionlimit() times, to protect against objects which create a\nnew object on every attribute access.\nbpo-30177\n: path.resolve(strict=False) no longer cuts the path after the\nfirst element not present in the filesystem.  Patch by Antoine Pietri.\nDocumentation\n¶\nbpo-31294\n: Fix incomplete code snippet in the ZeroMQSocketListener and\nZeroMQSocketHandler examples and adapt them to Python 3.\nbpo-21649\n: Add RFC 7525 and Mozilla server side TLS links to SSL\ndocumentation.\nbpo-31128\n: Allow the pydoc server to bind to arbitrary hostnames.\nbpo-30803\n: Clarify doc on truth value testing. Original patch by Peter\nThomassen.\nbpo-30176\n: Add missing attribute related constants in curses\ndocumentation.\nbpo-30052\n: the link targets for\nbytes()\nand\nbytearray()\nare\nnow their respective type definitions, rather than the corresponding\nbuiltin function entries. Use\nbytes\nand\nbytearray\nto reference the latter. In order to\nensure this and future cross-reference updates are applied automatically,\nthe daily documentation builds now disable the default output caching\nfeatures in Sphinx.\nbpo-26985\n: Add missing info of code object in inspect documentation.\nbpo-19824\n: Improve the documentation for, and links to, template strings\nby emphasizing their utility for internationalization, and by clarifying\nsome usage constraints. (See also:\nbpo-20314\n,\nbpo-12518\n)\nbpo-28929\n: Link the documentation to its source file on GitHub.\nbpo-25008\n: Document smtpd.py as effectively deprecated and add a pointer\nto aiosmtpd, a third-party asyncio-based replacement.\nbpo-26355\n: Add canonical header link on each page to corresponding major\nversion of the documentation. Patch by Matthias Bussonnier.\nbpo-29349\n: Fix Python 2 syntax in code for building the documentation.\nbpo-23722\n: The data model reference and the porting section in the 3.6\nWhat’s New guide now cover the additional\n__classcell__\nhandling\nneeded for custom metaclasses to fully support\nPEP 487\nand\nzero-argument\nsuper()\n.\nbpo-28513\n: Documented command-line interface of zipfile.\nTests\n¶\nbpo-29639\n: test.support.HOST is now “localhost”, a new HOSTv4 constant has\nbeen added for your\n127.0.0.1\nneeds, similar to the existing HOSTv6\nconstant.\nbpo-31320\n: Silence traceback in test_ssl\nbpo-31346\n: Prefer PROTOCOL_TLS_CLIENT and PROTOCOL_TLS_SERVER protocols\nfor SSLContext.\nbpo-25674\n: Remove sha256.tbs-internet.com ssl test\nbpo-30715\n: Address ALPN callback changes for OpenSSL 1.1.0f. The latest\nversion behaves like OpenSSL 1.0.2 and no longer aborts handshake.\nbpo-30822\n: regrtest: Exclude tzdata from regrtest –all. When running the\ntest suite using –use=all / -u all, exclude tzdata since it makes\ntest_datetime too slow (15-20 min on some buildbots) which then times out\non some buildbots. Fix also regrtest command line parser to allow passing\n-u extralargefile to run test_zipfile64.\nbpo-30695\n: Add the\nset_nomemory(start,\nstop)\nand\nremove_mem_hooks()\nfunctions to the\n_testcapi\nmodule.\nbpo-30357\n: test_thread: setUp() now uses support.threading_setup() and\nsupport.threading_cleanup() to wait until threads complete to avoid random\nside effects on following tests. Initial patch written by Grzegorz\nGrzywacz.\nbpo-30197\n: Enhanced functions swap_attr() and swap_item() in the\ntest.support module. They now work when delete replaced attribute or item\ninside the with statement.  The old value of the attribute or item (or\nNone if it doesn’t exist) now will be assigned to the target of the “as”\nclause, if there is one.\nbpo-24932\n: Use proper command line parsing in _testembed\nbpo-28950\n: Disallow -j0 to be combined with -T/-l in regrtest command line\narguments.\nbpo-28683\n: Fix the tests that bind() a unix socket and raise\nPermissionError on Android for a non-root user.\nbpo-26936\n: Fix the test_socket failures on Android - getservbyname(),\ngetservbyport() and getaddrinfo() are broken on some Android API levels.\nbpo-28666\n: Now test.support.rmtree is able to remove unwritable or\nunreadable directories.\nbpo-23839\n: Various caches now are cleared before running every test file.\nbpo-26944\n: Fix test_posix for Android where ‘id -G’ is entirely wrong or\nmissing the effective gid.\nbpo-28409\n: regrtest: fix the parser of command line arguments.\nbpo-28217\n: Adds _testconsole module to test console input.\nbpo-26939\n: Add the support.setswitchinterval() function to fix\ntest_functools hanging on the Android armv7 qemu emulator.\nBuild\n¶\nbpo-31354\n: Allow\n--with-lto\nto be used on all builds, not just\nmake\nprofile-opt\n.\nbpo-31370\n: Remove support for building –without-threads. This option is\nnot really useful anymore in the 21st century. Removing lots of\nconditional paths allows us to simplify the code base, including in\ndifficult to maintain low-level internal code.\nbpo-31341\n: Per\nPEP 11\n, support for the IRIX operating system was\nremoved.\nbpo-30854\n: Fix compile error when compiling –without-threads. Patch by\nMasayuki Yamamoto.\nbpo-30687\n: Locate msbuild.exe on Windows when building rather than\nvcvarsall.bat\nbpo-20210\n: Support the\ndisabled\nmarker in Setup files. Extension modules\nlisted after this marker are not built at all, neither by the Makefile nor\nby setup.py.\nbpo-29941\n: Add\n--with-assertions\nconfigure flag to explicitly enable C\nassert()\nchecks. Defaults to off.\n--with-pydebug\nimplies\n--with-assertions\n.\nbpo-28787\n: Fix out-of-tree builds of Python when configured with\n--with--dtrace\n.\nbpo-29243\n: Prevent unnecessary rebuilding of Python during\nmake\ntest\n,\nmake\ninstall\nand some other make targets when configured with\n--enable-optimizations\n.\nbpo-23404\n: Don’t regenerate generated files based on file modification\ntime anymore: the action is now explicit. Replace\nmake\ntouch\nwith\nmake\nregen-all\n.\nbpo-29643\n: Fix\n--enable-optimization\ndidn’t work.\nbpo-27593\n: sys.version and the platform module python_build(),\npython_branch(), and python_revision() functions now use git information\nrather than hg when building from a repo.\nbpo-29572\n: Update Windows build and OS X installers to use OpenSSL 1.0.2k.\nbpo-27659\n: Prohibit implicit C function declarations: use\n-Werror=implicit-function-declaration\nwhen possible (GCC and Clang,\nbut it depends on the compiler version). Patch written by Chi Hsuan Yen.\nbpo-29384\n: Remove old Be OS helper scripts.\nbpo-26851\n: Set Android compilation and link flags.\nbpo-28768\n: Fix implicit declaration of function _setmode. Patch by\nMasayuki Yamamoto\nbpo-29080\n: Removes hard dependency on hg.exe from PCBuild/build.bat\nbpo-23903\n: Added missed names to PC/python3.def.\nbpo-28762\n: lockf() is available on Android API level 24, but the F_LOCK\nmacro is not defined in android-ndk-r13.\nbpo-28538\n: Fix the compilation error that occurs because if_nameindex() is\navailable on Android API level 24, but the if_nameindex structure is not\ndefined.\nbpo-20211\n: Do not add the directory for installing C header files and the\ndirectory for installing object code libraries to the cross compilation\nsearch paths. Original patch by Thomas Petazzoni.\nbpo-28849\n: Do not define sys.implementation._multiarch on Android.\nbpo-10656\n: Fix out-of-tree building on AIX.  Patch by Tristan Carel and\nMichael Haubenwallner.\nbpo-26359\n: Rename –with-optimiations to –enable-optimizations.\nbpo-28444\n: Fix missing extensions modules when cross compiling.\nbpo-28208\n: Update Windows build and OS X installers to use SQLite 3.14.2.\nbpo-28248\n: Update Windows build and OS X installers to use OpenSSL 1.0.2j.\nbpo-21124\n: Fix building the _struct module on Cygwin by passing\nNULL\ninstead of\n&PyType_Type\nto PyVarObject_HEAD_INIT.  Patch by Masayuki\nYamamoto.\nbpo-13756\n: Fix building extensions modules on Cygwin.  Patch by Roumen\nPetrov, based on original patch by Jason Tishler.\nbpo-21085\n: Add configure check for siginfo_t.si_band, which Cygwin does\nnot provide. Patch by Masayuki Yamamoto with review and rebase by Erik\nBray.\nbpo-28258\n: Fixed build with Estonian locale (python-config and distclean\ntargets in Makefile).  Patch by Arfrever Frehtes Taifersar Arahesis.\nbpo-26661\n: setup.py now detects system libffi with multiarch wrapper.\nbpo-27979\n: A full copy of libffi is no longer bundled for use when\nbuilding _ctypes on non-OSX UNIX platforms.  An installed copy of libffi\nis now required when building _ctypes on such platforms.\nbpo-15819\n: Remove redundant include search directory option for building\noutside the source tree.\nbpo-28676\n: Prevent missing ‘getentropy’ declaration warning on macOS.\nPatch by Gareth Rees.\nWindows\n¶\nbpo-31392\n: Update Windows build to use OpenSSL 1.1.0f\nbpo-30389\n: Adds detection of Visual Studio 2017 to distutils on Windows.\nbpo-31358\n: zlib is no longer bundled in the CPython source, instead it is\ndownloaded on demand just like bz2, lzma, OpenSSL, Tcl/Tk, and SQLite.\nbpo-31340\n: Change to building with MSVC v141 (included with Visual Studio\n2017)\nbpo-30581\n: os.cpu_count() now returns the correct number of processors on\nWindows when the number of logical processors is greater than 64.\nbpo-30916\n: Pre-build OpenSSL, Tcl and Tk and include the binaries in the\nbuild.\nbpo-30731\n: Add a missing xmlns to python.manifest so that it matches the\nschema.\nbpo-30291\n: Allow requiring 64-bit interpreters from py.exe using -64\nsuffix. Contributed by Steve (Gadget) Barnes.\nbpo-30362\n: Adds list options (-0, -0p) to py.exe launcher. Contributed by\nSteve Barnes.\nbpo-23451\n: Fix socket deprecation warnings in socketmodule.c. Patch by\nSegev Finer.\nbpo-30450\n: The build process on Windows no longer depends on Subversion,\ninstead pulling external code from GitHub via a Python script.  If Python\n3.6 is not found on the system (via\npy\n-3.6\n), NuGet is used to\ndownload a copy of 32-bit Python.\nbpo-29579\n: Removes readme.txt from the installer.\nbpo-25778\n: winreg does not truncate string correctly (Patch by Eryk Sun)\nbpo-28896\n: Deprecate WindowsRegistryFinder and disable it by default\nbpo-28522\n: Fixes mishandled buffer reallocation in getpathp.c\nbpo-28402\n: Adds signed catalog files for stdlib on Windows.\nbpo-28333\n: Enables Unicode for ps1/ps2 and input() prompts. (Patch by Eryk\nSun)\nbpo-28251\n: Improvements to help manuals on Windows.\nbpo-28110\n: launcher.msi has different product codes between 32-bit and\n64-bit\nbpo-28161\n: Opening CON for write access fails\nbpo-28162\n: WindowsConsoleIO readall() fails if first line starts with\nCtrl+Z\nbpo-28163\n: WindowsConsoleIO fileno() passes wrong flags to _open_osfhandle\nbpo-28164\n: _PyIO_get_console_type fails for various paths\nbpo-28137\n: Renames Windows path file to ._pth\nbpo-28138\n: Windows ._pth file should allow import site\nIDLE\n¶\nbpo-31493\n: IDLE code context – fix code update and font update timers.\nCanceling timers prevents a warning message when test_idle completes.\nbpo-31488\n: IDLE - Update non-key options in former extension classes. When\napplying configdialog changes, call .reload for each feature class. Change\nParenMatch so updated options affect existing instances attached to\nexisting editor windows.\nbpo-31477\n: IDLE - Improve rstrip entry in doc. Strip trailing whitespace\nstrips more than blank spaces.  Multiline string literals are not skipped.\nbpo-31480\n: IDLE - make tests pass with zzdummy extension disabled by\ndefault.\nbpo-31421\n: Document how IDLE runs tkinter programs. IDLE calls tcl/tk\nupdate in the background in order to make live interaction and\nexperimentation with tkinter applications much easier.\nbpo-31414\n: IDLE – fix tk entry box tests by deleting first. Adding to an\nint entry is not the same as deleting and inserting because int(‘’) will\nfail.\nbpo-31051\n: Rearrange IDLE configdialog GenPage into Window, Editor, and\nHelp sections.\nbpo-30617\n: IDLE - Add docstrings and tests for outwin subclass of editor.\nMove some data and functions from the class to module level. Patch by\nCheryl Sabella.\nbpo-31287\n: IDLE - Do not modify tkinter.message in test_configdialog.\nbpo-27099\n: Convert IDLE’s built-in ‘extensions’ to regular features. About\n10 IDLE features were implemented as supposedly optional extensions. Their\ndifferent behavior could be confusing or worse for users and not good for\nmaintenance. Hence the conversion. The main difference for users is that\nuser configurable key bindings for builtin features are now handled\nuniformly. Now, editing a binding in a keyset only affects its value in\nthe keyset. All bindings are defined together in the system-specific\ndefault keysets in config-extensions.def. All custom keysets are saved as\na whole in config-extension.cfg.  All take effect as soon as one clicks\nApply or Ok. The affected events are ‘<<force-open-completions>>’,\n‘<<expand-word>>’, ‘<<force-open-calltip>>’, ‘<<flash-paren>>’,\n‘<<format-paragraph>>’, ‘<<run-module>>’, ‘<<check-module>>’, and\n‘<<zoom-height>>’.  Any (global) customizations made before 3.6.3 will not\naffect their keyset-specific customization after 3.6.3. and vice versa.\nInitial patch by Charles Wohlganger.\nbpo-31206\n: IDLE: Factor HighPage(Frame) class from ConfigDialog. Patch by\nCheryl Sabella.\nbpo-31001\n: Add tests for configdialog highlight tab.  Patch by Cheryl\nSabella.\nbpo-31205\n: IDLE: Factor KeysPage(Frame) class from ConfigDialog.  The\nslightly modified tests continue to pass.  Patch by Cheryl Sabella.\nbpo-31130\n: IDLE – stop leaks in test_configdialog. Initial patch by\nVictor Stinner.\nbpo-31002\n: Add tests for configdialog keys tab. Patch by Cheryl Sabella.\nbpo-19903\n: IDLE: Calltips use\ninspect.signature\ninstead of\ninspect.getfullargspec\n. This improves calltips for builtins converted\nto use Argument Clinic. Patch by Louie Lu.\nbpo-31083\n: IDLE - Add an outline of a TabPage class in configdialog.\nUpdate existing classes to match outline. Initial patch by Cheryl Sabella.\nbpo-31050\n: Factor GenPage(Frame) class from ConfigDialog. The slightly\nmodified tests continue to pass. Patch by Cheryl Sabella.\nbpo-31004\n: IDLE - Factor FontPage(Frame) class from ConfigDialog. Slightly\nmodified tests continue to pass. Fix General tests. Patch mostly by Cheryl\nSabella.\nbpo-30781\n: IDLE - Use ttk widgets in ConfigDialog. Patches by Terry Jan\nReedy and Cheryl Sabella.\nbpo-31060\n: IDLE - Finish rearranging methods of ConfigDialog Grouping\nmethods pertaining to each tab and the buttons will aid writing tests and\nimproving the tabs and will enable splitting the groups into classes.\nbpo-30853\n: IDLE – Factor a VarTrace class out of ConfigDialog. Instance\ntracers manages pairs consisting of a tk variable and a callback function.\nWhen tracing is turned on, setting the variable calls the function.  Test\ncoverage for the new class is 100%.\nbpo-31003\n: IDLE: Add more tests for General tab.\nbpo-30993\n: IDLE - Improve configdialog font page and tests. In\nconfigdialog: Document causal pathways in create_font_tab docstring.\nSimplify some attribute names. Move set_samples calls to var_changed_font\n(idea from Cheryl Sabella).  Move related functions to positions after the\ncreate widgets function. In test_configdialog: Fix test_font_set so not\norder dependent.  Fix renamed test_indent_scale so it tests the widget.\nAdjust tests for movement of set_samples call.  Add tests for load\nfunctions.  Put all font tests in one class and tab indent tests in\nanother.  Except for two lines, these tests completely cover the related\nfunctions.\nbpo-30981\n: IDLE – Add more configdialog font page tests.\nbpo-28523\n: IDLE: replace ‘colour’ with ‘color’ in configdialog.\nbpo-30917\n: Add tests for idlelib.config.IdleConf. Increase coverage from\n46% to 96%. Patch by Louie Lu.\nbpo-30934\n: Document coverage details for idlelib tests. Add section to\nidlelib/idle-test/README.txt. Include check that branches are taken both\nways. Exclude IDLE-specific code that does not run during unit tests.\nbpo-30913\n: IDLE: Document ConfigDialog tk Vars, methods, and widgets in\ndocstrings This will facilitate improving the dialog and splitting up the\nclass. Original patch by Cheryl Sabella.\nbpo-30899\n: IDLE: Add tests for ConfigParser subclasses in config. Patch by\nLouie Lu.\nbpo-30881\n: IDLE: Add docstrings to browser.py. Patch by Cheryl Sabella.\nbpo-30851\n: IDLE: Remove unused variables in configdialog.  One is a\nduplicate, one is set but cannot be altered by users. Patch by Cheryl\nSabella.\nbpo-30870\n: IDLE: In Settings dialog, select font with Up, Down keys as\nwell as mouse. Initial patch by Louie Lu.\nbpo-8231\n: IDLE: call config.IdleConf.GetUserCfgDir only once.\nbpo-30779\n: IDLE: Factor ConfigChanges class from configdialog, put in\nconfig; test. * In config, put dump test code in a function; run it and\nunittest in   ‘if __name__ == ‘__main__’. * Add class config.ConfigChanges\nbased on changes_class_v4.py on bpo issue. * Add class\ntest_config.ChangesTest, partly using configdialog_tests_v1.py. * Revise\nconfigdialog to use ConfigChanges; see tracker msg297804. * Revise\ntest_configdialog to match configdialog changes. * Remove configdialog\nfunctions unused or moved to ConfigChanges. Cheryl Sabella contributed\nparts of the patch.\nbpo-30777\n: IDLE: configdialog - Add docstrings and fix comments. Patch by\nCheryl Sabella.\nbpo-30495\n: IDLE: Improve textview with docstrings, PEP8 names, and more\ntests. Patch by Cheryl Sabella.\nbpo-30723\n: IDLE: Make several improvements to parenmatch. Add ‘parens’\nstyle to highlight both opener and closer. Make ‘default’ style, which is\nnot default, a synonym for ‘opener’. Make time-delay work the same with\nall styles. Add help for config dialog extensions tab, including help for\nparenmatch. Add new tests.  Original patch by Charles Wohlganger.\nbpo-30674\n: IDLE: add docstrings to grep module. Patch by Cheryl Sabella\nbpo-21519\n: IDLE’s basic custom key entry dialog now detects duplicates\nproperly. Original patch by Saimadhav Heblikar.\nbpo-29910\n: IDLE no longer deletes a character after commenting out a\nregion by a key shortcut.  Add\nreturn\n'break'\nfor this and other\npotential conflicts between IDLE and default key bindings.\nbpo-30728\n: Review and change idlelib.configdialog names. Lowercase method\nand attribute names. Replace ‘colour’ with ‘color’, expand overly cryptic\nnames, delete unneeded underscores. Replace\nimport\n*\nwith specific\nimports. Patches by Cheryl Sabella.\nbpo-6739\n: IDLE: Verify user-entered key sequences by trying to bind them\nwith tk. Add tests for all 3 validation functions. Original patch by G\nPolo.  Tests added by Cheryl Sabella.\nbpo-15786\n: Fix several problems with IDLE’s autocompletion box. The\nfollowing should now work: clicking on selection box items; using the\nscrollbar; selecting an item by hitting Return. Hangs on MacOSX should no\nlonger happen. Patch by Louie Lu.\nbpo-25514\n: Add doc subsubsection about IDLE failure to start. Popup\nno-connection message directs users to this section.\nbpo-30642\n: Fix reference leaks in IDLE tests. Patches by Louie Lu and\nTerry Jan Reedy.\nbpo-30495\n: Add docstrings for textview.py and use PEP8 names. Patches by\nCheryl Sabella and Terry Jan Reedy.\nbpo-30290\n: Help-about: use pep8 names and add tests. Increase coverage to\n100%. Patches by Louie Lu, Cheryl Sabella, and Terry Jan Reedy.\nbpo-30303\n: Add _utest option to textview; add new tests. Increase coverage\nto 100%. Patches by Louie Lu and Terry Jan Reedy.\nbpo-29071\n: IDLE colors f-string prefixes (but not invalid ur prefixes).\nbpo-28572\n: Add 10% to coverage of IDLE’s test_configdialog. Update and\naugment description of the configuration system.\nTools/Demos\n¶\nbpo-30983\n: gdb integration commands (py-bt, etc.) work on optimized shared\nbuilds now, too.\nPEP 523\nintroduced _PyEval_EvalFrameDefault which\ninlines PyEval_EvalFrameEx on non-debug shared builds.  This broke the\nability to use py-bt, py-up, and a few other Python-specific gdb\nintegrations. The problem is fixed by only looking for\n_PyEval_EvalFrameDefault frames in python-gdb.py.  Original patch by Bruno\n“Polaco” Penteado.\nbpo-29748\n: Added the slice index converter in Argument Clinic.\nbpo-24037\n: Argument Clinic now uses the converter\nbool(accept={int})\nrather than\nint\nfor semantical booleans.  This avoids repeating the\ndefault value for Python and C and will help in converting to\nbool\nin\nfuture.\nbpo-29367\n: python-gdb.py now supports also\nmethod-wrapper\n(\nwrapperobject\n) objects.\nbpo-28023\n: Fix python-gdb.py didn’t support new dict implementation.\nbpo-15369\n: The pybench and pystone microbenchmark have been removed from\nTools. Please use the new Python benchmark suite\nhttps://github.com/python/pyperformance\nwhich is more reliable and\nincludes a portable version of pybench working on Python 2 and Python 3.\nbpo-28102\n: The zipfile module CLI now prints usage to stderr. Patch by\nStephen J. Turnbull.\nC API\n¶\nbpo-31338\n: Added the\nPy_UNREACHABLE()\nmacro for code paths which are\nnever expected to be reached.  This and a few other useful macros are now\ndocumented in the C API manual.\nbpo-30832\n: Remove own implementation for thread-local storage. CPython has\nprovided the own implementation for thread-local storage (TLS) on\nPython/thread.c, it’s used in the case which a platform has not supplied\nnative TLS.  However, currently all supported platforms (Windows and\npthreads) have provided native TLS and defined the Py_HAVE_NATIVE_TLS\nmacro with unconditional in any case.\nbpo-30708\n: PyUnicode_AsWideCharString() now raises a ValueError if the\nsecond argument is NULL and the wchar_t* string contains null characters.\nbpo-16500\n: Deprecate PyOS_AfterFork() and add PyOS_BeforeFork(),\nPyOS_AfterFork_Parent() and PyOS_AfterFork_Child().\nbpo-6532\n: The type of results of PyThread_start_new_thread() and\nPyThread_get_thread_ident(), and the id parameter of\nPyThreadState_SetAsyncExc() changed from “long” to “unsigned long”.\nbpo-27867\n: Function PySlice_GetIndicesEx() is deprecated and replaced with\na macro if Py_LIMITED_API is not set or set to the value between\n0x03050400 and 0x03060000 (not including) or 0x03060100 or higher.  Added\nfunctions PySlice_Unpack() and PySlice_AdjustIndices().\nbpo-29083\n: Fixed the declaration of some public API functions.\nPyArg_VaParse() and PyArg_VaParseTupleAndKeywords() were not available in\nlimited API. PyArg_ValidateKeywordArguments(), PyArg_UnpackTuple() and\nPy_BuildValue() were not available in limited API of version < 3.3 when\nPY_SSIZE_T_CLEAN is defined.\nbpo-28769\n: The result of PyUnicode_AsUTF8AndSize() and PyUnicode_AsUTF8()\nis now of type\nconst\nchar\n*\nrather of\nchar\n*\n.\nbpo-29058\n: All stable API extensions added after Python 3.2 are now\navailable only when Py_LIMITED_API is set to the PY_VERSION_HEX value of\nthe minimum Python version supporting this API.\nbpo-28822\n: The index parameters\nstart\nand\nend\nof PyUnicode_FindChar()\nare now adjusted to behave like\nstr[start:end]\n.\nbpo-28808\n: PyUnicode_CompareWithASCIIString() now never raises exceptions.\nbpo-28761\n: The fields name and doc of structures PyMemberDef, PyGetSetDef,\nPyStructSequence_Field, PyStructSequence_Desc, and wrapperbase are now of\ntype\nconst\nchar\n*\nrather of\nchar\n*\n.\nbpo-28748\n: Private variable _Py_PackageContext is now of type\nconst\nchar\n*\nrather of\nchar\n*\n.\nbpo-19569\n: Compiler warnings are now emitted if use most of deprecated\nfunctions.\nbpo-28426\n: Deprecated undocumented functions PyUnicode_AsEncodedObject(),\nPyUnicode_AsDecodedObject(), PyUnicode_AsDecodedUnicode() and\nPyUnicode_AsEncodedUnicode().\nPython 3.6.6 final\n¶\nRelease date: 2018-06-27\nThere were no new changes in version 3.6.6.\nPython 3.6.6 release candidate 1\n¶\nRelease date: 2018-06-11\nCore and Builtins\n¶\nbpo-33786\n: Fix asynchronous generators to handle GeneratorExit in athrow()\ncorrectly\nbpo-30654\n: Fixed reset of the SIGINT handler to SIG_DFL on interpreter\nshutdown even when there was a custom handler set previously. Patch by\nPhilipp Kerling.\nbpo-33622\n: Fixed a leak when the garbage collector fails to add an object\nwith the\n__del__\nmethod or referenced by it into the\ngc.garbage\nlist.\nPyGC_Collect()\ncan now be called when an\nexception is set and preserves it.\nbpo-31849\n: Fix signed/unsigned comparison warning in pyhash.c.\nbpo-33391\n: Fix a leak in set_symmetric_difference().\nbpo-28055\n: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.\nbpo-33231\n: Fix potential memory leak in\nnormalizestring()\n.\nbpo-29922\n: Improved error messages in ‘async with’ when\n__aenter__()\nor\n__aexit__()\nreturn non-awaitable object.\nbpo-33199\n: Fix\nma_version_tag\nin dict implementation is uninitialized\nwhen copying from key-sharing dict.\nbpo-33041\n: Fixed jumping when the function contains an\nasync\nfor\nloop.\nbpo-32282\n: Fix an unnecessary ifdef in the include of VersionHelpers.h in\nsocketmodule on Windows.\nbpo-21983\n: Fix a crash in\nctypes.cast()\nin case the type argument is a\nctypes structured data type. Patch by Eryk Sun and Oren Milman.\nLibrary\n¶\nbpo-30167\n: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by\nSteve Weber.\nbpo-33812\n: Datetime instance d with non-None tzinfo, but with\nd.tzinfo.utcoffset(d) returning None is now treated as naive by the\nastimezone() method.\nbpo-30805\n: Avoid race condition with debug logging\nbpo-33767\n: The concatenation (\n+\n) and repetition (\n*\n) sequence\noperations now raise\nTypeError\ninstead of\nSystemError\nwhen\nperformed on\nmmap.mmap\nobjects.  Patch by Zackery Spytz.\nbpo-32684\n: Fix gather to propagate cancellation of itself even with\nreturn_exceptions.\nbpo-33674\n: Fix a race condition in SSLProtocol.connection_made() of\nasyncio.sslproto: start immediately the handshake instead of using\ncall_soon(). Previously, data_received() could be called before the\nhandshake started, causing the handshake to hang or fail.\nbpo-31647\n: Fixed bug where calling write_eof() on a\n_SelectorSocketTransport after it’s already closed raises AttributeError.\nbpo-33672\n: Fix Task.__repr__ crash with Cython’s bogus coroutines\nbpo-33469\n: Fix RuntimeError after closing loop that used run_in_executor\nbpo-11874\n: Use a better regex when breaking usage into wrappable parts.\nAvoids bogus assertion errors from custom metavar strings.\nbpo-30877\n: Fixed a bug in the Python implementation of the JSON decoder\nthat prevented the cache of parsed strings from clearing after finishing\nthe decoding. Based on patch by c-fos.\nbpo-33548\n: tempfile._candidate_tempdir_list should consider common TEMP\nlocations\nbpo-33542\n: Prevent\nuuid.get_node\nfrom using a DUID instead of a MAC on\nWindows. Patch by Zvi Effron\nbpo-26819\n: Fix race condition with\nReadTransport.resume_reading\nin\nWindows proactor event loop.\nbpo-28556\n: Minor fixes in typing module: add annotations to\nNamedTuple.__new__\n, pass\n*args\nand\n**kwds\nin\nGeneric.__new__\n.  Original PRs by Paulius Šarka and Chad Dombrova.\nbpo-20087\n: Updated alias mapping with glibc 2.27 supported locales.\nbpo-33422\n: Fix trailing quotation marks getting deleted when looking up\nbyte/string literals on pydoc. Patch by Andrés Delfino.\nbpo-33197\n: Update error message when constructing invalid\ninspect.Parameters Patch by Donghee Na.\nbpo-33383\n: Fixed crash in the get() method of the\ndbm.ndbm\ndatabase\nobject when it is called with a single argument.\nbpo-33329\n: Fix multiprocessing regression on newer glibcs\nbpo-991266\n: Fix quoting of the\nComment\nattribute of\nhttp.cookies.SimpleCookie\n.\nbpo-33131\n: Upgrade bundled version of pip to 10.0.1.\nbpo-33308\n: Fixed a crash in the\nparser\nmodule when converting an ST\nobject to a tree of tuples or lists with\nline_info=False\nand\ncol_info=True\n.\nbpo-33263\n: Fix FD leak in\n_SelectorSocketTransport\nPatch by Vlad\nStarostin.\nbpo-33256\n: Fix display of\n<module>\ncall in the html produced by\ncgitb.html()\n. Patch by Stéphane Blondon.\nbpo-33203\n:\nrandom.Random.choice()\nnow raises\nIndexError\nfor empty\nsequences consistently even when called from subclasses without a\ngetrandbits()\nimplementation.\nbpo-33224\n: Update difflib.mdiff() for\nPEP 479\n.  Convert an uncaught\nStopIteration in a generator into a return-statement.\nbpo-33209\n: End framing at the end of C implementation of\npickle.Pickler.dump()\n.\nbpo-32861\n: The urllib.robotparser’s\n__str__\nrepresentation now\nincludes wildcard entries and the “Crawl-delay” and “Request-rate” fields.\nPatch by Michael Lazar.\nbpo-33096\n: Allow ttk.Treeview.insert to insert iid that has a false\nboolean value. Note iid=0 and iid=False would be same. Patch by Garvit\nKhatri.\nbpo-33127\n: The ssl module now compiles with LibreSSL 2.7.1.\nbpo-33021\n: Release the GIL during fstat() calls, avoiding hang of all\nthreads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch\nby Nir Soffer.\nbpo-27683\n: Fix a regression in\nipaddress\nthat result of\nhosts()\nis empty when the network is constructed by a tuple\ncontaining an integer mask and only 1 bit left for addresses.\nbpo-32844\n: Fix wrong redirection of a low descriptor (0 or 1) to stderr in\nsubprocess if another low descriptor is closed.\nbpo-31908\n: Fix output of cover files for\ntrace\nmodule command-line\ntool. Previously emitted cover files only when\n--missing\noption was\nused. Patch by Michael Selik.\nbpo-31457\n: If nested log adapters are used, the inner\nprocess()\nmethods are no longer omitted.\nbpo-16865\n: Support arrays >=2GiB in\nctypes\n.  Patch by Segev Finer.\nbpo-31238\n: pydoc: the stop() method of the private ServerThread class now\nwaits until DocServer.serve_until_quit() completes and then explicitly\nsets its docserver attribute to None to break a reference cycle.\nDocumentation\n¶\nbpo-33503\n: Fix broken pypi link\nbpo-33421\n: Add missing documentation for\ntyping.AsyncContextManager\n.\nbpo-33378\n: Add Korean language switcher for\nhttps://docs.python.org/3/\nbpo-33276\n: Clarify that the\n__path__\nattribute on modules cannot be\njust any value.\nbpo-33201\n: Modernize documentation for writing C extension types.\nbpo-33195\n: Deprecate\nPy_UNICODE\nusage in\nc-api/arg\ndocument.\nPy_UNICODE\nrelated APIs are deprecated since Python 3.3, but it is\nmissed in the document.\nbpo-33126\n: Document PyBuffer_ToContiguous().\nbpo-27212\n: Modify documentation for the\nislice()\nrecipe to consume\ninitial values up to the start index.\nbpo-28247\n: Update\nzipapp\ndocumentation to describe how to make\nstandalone applications.\nbpo-18802\n: Documentation changes for ipaddress.  Patch by Jon Foster and\nBerker Peksag.\nbpo-27428\n: Update documentation to clarify that\nWindowsRegistryFinder\nimplements\nMetaPathFinder\n. (Patch by Himanshu Lakhara)\nbpo-8243\n: Add a note about curses.addch and curses.addstr exception\nbehavior when writing outside a window, or pad.\nbpo-31432\n: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED\nflags for ssl.SSLContext.verify_mode.\nTests\n¶\nbpo-33655\n: Ignore test_posix_fallocate failures on BSD platforms that\nmight be due to running on ZFS.\nbpo-19417\n: Add test_bdb.py.\nBuild\n¶\nbpo-5755\n: Move\n-Wstrict-prototypes\noption to\nCFLAGS_NODIST\nfrom\nOPT\n. This option emitted annoying warnings when building extension\nmodules written in C++.\nbpo-33614\n: Ensures module definition files for the stable ABI on Windows\nare correctly regenerated.\nbpo-33522\n: Enable CI builds on Visual Studio Team Services at\nhttps://python.visualstudio.com/cpython\nbpo-33012\n: Add\n-Wno-cast-function-type\nfor gcc 8 for silencing\nwarnings about function casts like casting to PyCFunction in method\ndefinition lists.\nbpo-33394\n: Enable the verbose build for extension modules, when GNU make\nis passed macros on the command line.\nWindows\n¶\nbpo-33184\n: Update Windows installer to OpenSSL 1.0.2o.\nmacOS\n¶\nbpo-33184\n: Update macOS installer build to use OpenSSL 1.0.2o.\nIDLE\n¶\nbpo-33656\n: On Windows, add API call saying that tk scales for DPI. On\nWindows 8.1+ or 10, with DPI compatibility properties of the Python binary\nunchanged, and a monitor resolution greater than 96 DPI, this should make\ntext and lines sharper.  It should otherwise have no effect.\nbpo-33768\n: Clicking on a context line moves that line to the top of the\neditor window.\nbpo-33763\n: IDLE: Use read-only text widget for code context instead of\nlabel widget.\nbpo-33664\n: Scroll IDLE editor text by lines. Previously, the mouse wheel\nand scrollbar slider moved text by a fixed number of pixels, resulting in\npartial lines at the top of the editor box.  The change also applies to\nthe shell and grep output windows, but not to read-only text views.\nbpo-33679\n: Enable theme-specific color configuration for Code Context. Use\nthe Highlights tab to see the setting for built-in themes or add settings\nto custom themes.\nbpo-33642\n: Display up to maxlines non-blank lines for Code Context. If\nthere is no current context, show a single blank line.\nbpo-33628\n: IDLE: Cleanup codecontext.py and its test.\nbpo-33564\n: IDLE’s code context now recognizes async as a block opener.\nbpo-29706\n: IDLE now colors async and await as keywords in 3.6. They become\nfull keywords in 3.7.\nbpo-21474\n: Update word/identifier definition from ascii to unicode. In\ntext and entry boxes, this affects selection by double-click, movement\nleft/right by control-left/right, and deletion left/right by\ncontrol-BACKSPACE/DEL.\nbpo-33204\n: IDLE: consistently color invalid string prefixes. A ‘u’ string\nprefix cannot be paired with either ‘r’ or ‘f’. Consistently color as much\nof the prefix, starting at the right, as is valid. Revise and extend\ncolorizer test.\nbpo-32831\n: Add docstrings and tests for codecontext.\nTools/Demos\n¶\nbpo-33189\n:\npygettext.py\nnow recognizes only literal strings as\ndocstrings and translatable strings, and rejects bytes literals and\nf-string expressions.\nbpo-31920\n: Fixed handling directories as arguments in the\npygettext\nscript. Based on patch by Oleg Krasnikov.\nbpo-29673\n: Fix pystackv and pystack gdbinit macros.\nbpo-32885\n: Add an\n-n\nflag for\nTools/scripts/pathfix.py\nto disable\nautomatic backup creation (files with\n~\nsuffix).\nbpo-31583\n: Fix 2to3 for using with –add-suffix option but without\n–output-dir option for relative path to files in current directory.\nC API\n¶\nbpo-32374\n: Document that m_traverse for multi-phase initialized modules\ncan be called with m_state=NULL, and add a sanity check\nPython 3.6.5 final\n¶\nRelease date: 2018-03-28\nTests\n¶\nbpo-32872\n: Avoid regrtest compatibility issue with namespace packages.\nBuild\n¶\nbpo-33163\n: Upgrade pip to 9.0.3 and setuptools to v39.0.1.\nPython 3.6.5 release candidate 1\n¶\nRelease date: 2018-03-13\nSecurity\n¶\nbpo-33001\n: Minimal fix to prevent buffer overrun in os.symlink on Windows\nbpo-32981\n: Regexes in difflib and poplib were vulnerable to catastrophic\nbacktracking. These regexes formed potential DOS vectors (REDOS). They\nhave been refactored. This resolves\nCVE 2018-1060\nand\nCVE 2018-1061\n.\nPatch by Jamie Davis.\nCore and Builtins\n¶\nbpo-33026\n: Fixed jumping out of “with” block by setting f_lineno.\nbpo-17288\n: Prevent jumps from ‘return’ and ‘exception’ trace events.\nbpo-32889\n: Update Valgrind suppression list to account for the rename of\nPy_ADDRESS_IN_RANG\nto\naddress_in_range\n.\nbpo-32650\n: Pdb and other debuggers dependent on bdb.py will correctly step\nover (next command) native coroutines. Patch by Pablo Galindo.\nbpo-32685\n: Improve suggestion when the Python 2 form of print statement is\neither present on the same line as the header of a compound statement or\nelse terminated by a semi-colon instead of a newline. Patch by Nitish\nChandra.\nbpo-32583\n: Fix possible crashing in builtin Unicode decoders caused by\nwrite out-of-bound errors when using customized decode error handlers.\nbpo-26163\n: Improved frozenset() hash to create more distinct hash values\nwhen faced with datasets containing many similar values.\nbpo-27169\n: The\n__debug__\nconstant is now optimized out at compile\ntime. This fixes also\nbpo-22091\n.\nbpo-32329\n:\nsys.flags.hash_randomization\nis now properly set to 0 when\nhash randomization is turned off by\nPYTHONHASHSEED=0\n.\nbpo-30416\n: The optimizer is now protected from spending much time doing\ncomplex calculations and consuming much memory for creating large\nconstants in constant folding.\nbpo-18533\n:\nrepr()\non a dict containing its own\nvalues()\nor\nitems()\nno longer raises\nRecursionError\n; OrderedDict similarly.\nInstead, use\n...\n, as for other recursive structures.  Patch by Ben\nNorth.\nbpo-32028\n: Leading whitespace is now correctly ignored when generating\nsuggestions for converting Py2 print statements to Py3 builtin print\nfunction calls. Patch by Sanyam Khurana.\nbpo-32137\n: The repr of deeply nested dict now raises a RecursionError\ninstead of crashing due to a stack overflow.\nLibrary\n¶\nbpo-33064\n: lib2to3 now properly supports trailing commas after\n*args\nand\n**kwargs\nin function signatures.\nbpo-31804\n: Avoid failing in multiprocessing.Process if the standard\nstreams are closed or None at exit.\nbpo-33037\n: Skip sending/receiving data after SSL transport closing.\nbpo-30353\n: Fix ctypes pass-by-value for structs on 64-bit Cygwin/MinGW.\nbpo-33009\n: Fix inspect.signature() for single-parameter partialmethods.\nbpo-32969\n: Expose several missing constants in zlib and fix corresponding\ndocumentation.\nbpo-32713\n: Fixed tarfile.itn handling of out-of-bounds float values. Patch\nby Joffrey Fuhrer.\nbpo-30622\n: The ssl module now detects missing NPN support in LibreSSL.\nbpo-32922\n: dbm.open() now encodes filename with the filesystem encoding\nrather than default encoding.\nbpo-32859\n: In\nos.dup2\n, don’t check every call whether the\ndup3\nsyscall exists or not.\nbpo-21060\n: Rewrite confusing message from setup.py upload from “No dist\nfile created in earlier command” to the more helpful “Must create and\nupload files in one command”.\nbpo-32857\n: In\ntkinter\n,\nafter_cancel(None)\nnow raises a\nValueError\ninstead of canceling the first scheduled function.\nPatch by Cheryl Sabella.\nbpo-32852\n: Make sure sys.argv remains as a list when running trace.\nbpo-32841\n: Fixed\nasyncio.Condition\nissue which silently ignored\ncancellation after notifying and cancelling a conditional lock. Patch by\nBar Harel.\nbpo-31787\n: Fixed refleaks of\n__init__()\nmethods in various modules.\n(Contributed by Oren Milman)\nbpo-30157\n: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when\nonly the last field is quoted.  Patch by Jake Davis.\nbpo-32394\n: socket: Remove TCP_FASTOPEN, TCP_KEEPCNT flags on older version\nWindows during run-time.\nbpo-32777\n: Fix a rare but potential pre-exec child process deadlock in\nsubprocess on POSIX systems when marking file descriptors inheritable on\nexec in the child process.  This bug appears to have been introduced in\n3.4.\nbpo-32647\n: The ctypes module used to depend on indirect linking for\ndlopen. The shared extension is now explicitly linked against libdl on\nplatforms with dl.\nbpo-32734\n: Fixed\nasyncio.Lock()\nsafety issue which allowed acquiring\nand locking the same lock multiple times, without it being free. Patch by\nBar Harel.\nbpo-32727\n: Do not include name field in SMTP envelope from address. Patch\nby Stéphane Wirtel\nbpo-27931\n: Fix email address header parsing error when the username is an\nempty quoted string. Patch by Xiang Zhang.\nbpo-32304\n: distutils’ upload command no longer corrupts tar files ending\nwith a CR byte, and no longer tries to convert CR to CRLF in any of the\nupload text fields.\nbpo-32502\n: uuid.uuid1 no longer raises an exception if a 64-bit hardware\naddress is encountered.\nbpo-31848\n: Fix the error handling in Aifc_read.initfp() when the SSND\nchunk is not found. Patch by Zackery Spytz.\nbpo-32555\n: On FreeBSD and Solaris, os.strerror() now always decode the\nbyte string from the current locale encoding, rather than using\nASCII/surrogateescape in some cases.\nbpo-32521\n: The nis module is now compatible with new libnsl and headers\nlocation.\nbpo-32473\n: Improve ABCMeta._dump_registry() output readability\nbpo-32521\n: glibc has removed Sun RPC. Use replacement libtirpc headers and\nlibrary in nis module.\nbpo-32228\n: Ensure that\ntruncate()\npreserves the file position (as\nreported by\ntell()\n) after writes longer than the buffer size.\nbpo-26133\n: Don’t unsubscribe signals in asyncio UNIX event loop on\ninterpreter shutdown.\nbpo-32185\n: The SSL module no longer sends IP addresses in SNI TLS\nextension on platforms with OpenSSL 1.0.2+ or inet_pton.\nbpo-32323\n:\nurllib.parse.urlsplit()\ndoes not convert zone-id (scope)\nto lower case for scoped IPv6 addresses in hostnames now.\nbpo-32302\n: Fix bdist_wininst of distutils for CRT v142: it binary\ncompatible with CRT v140.\nbpo-32255\n: A single empty field is now always quoted when written into a\nCSV file. This allows to distinguish an empty row from a row consisting of\na single empty field. Patch by Licht Takeuchi.\nbpo-32277\n: Raise\nNotImplementedError\ninstead of\nSystemError\non\nplatforms where\nchmod(...,\nfollow_symlinks=False)\nis not supported.\nPatch by Anthony Sottile.\nbpo-32199\n: The getnode() ip getter now uses ‘ip link’ instead of ‘ip link\nlist’.\nbpo-27456\n: Ensure TCP_NODELAY is set on Linux. Tests by Victor Stinner.\nbpo-31900\n: The\nlocale.localeconv()\nfunction now sets temporarily the\nLC_CTYPE\nlocale to the\nLC_NUMERIC\nlocale to decode\ndecimal_point\nand\nthousands_sep\nbyte strings if they are non-ASCII\nor longer than 1 byte, and the\nLC_NUMERIC\nlocale is different than the\nLC_CTYPE\nlocale. This temporary change affects other threads. Same\nchange for the\nstr.format()\nmethod when formatting a number\n(\nint\n,\nfloat\n,\nfloat\nand subclasses) with the\nn\ntype (ex:\n'{:n}'.format(1234)\n).\nbpo-31802\n: Importing native path module (\nposixpath\n,\nntpath\n) now\nworks even if the\nos\nmodule still is not imported.\nDocumentation\n¶\nbpo-17232\n: Clarify docs for -O and -OO.  Patch by Terry Reedy.\nbpo-32800\n: Update link to w3c doc for xml default namespaces.\nbpo-8722\n: Document\n__getattr__()\nbehavior when property\nget()\nmethod raises\nAttributeError\n.\nbpo-32614\n: Modify RE examples in documentation to use raw strings to\nprevent\nDeprecationWarning\nand add text to REGEX HOWTO to highlight\nthe deprecation.\nbpo-31972\n: Improve docstrings for\npathlib.PurePath\nsubclasses.\nbpo-17799\n: Explain real behaviour of sys.settrace and sys.setprofile and\ntheir C-API counterparts regarding which type of events are received in\neach function. Patch by Pablo Galindo Salgado.\nTests\n¶\nbpo-32517\n: Fix failing\ntest_asyncio\non macOS 10.12.2+ due to transport\nof\nKqueueSelector\nloop was not being closed.\nbpo-32721\n: Fix test_hashlib to not fail if the _md5 module is not built.\nbpo-32252\n: Fix faulthandler_suppress_crash_report() used to prevent core\ndump files when testing crashes. getrlimit() returns zero on success.\nbpo-31518\n: Debian Unstable has disabled TLS 1.0 and 1.1 for\nSSLv23_METHOD(). Change TLS/SSL protocol of some tests to PROTOCOL_TLS or\nPROTOCOL_TLSv1_2 to make them pass on Debian.\nBuild\n¶\nbpo-32635\n: Fix segfault of the crypt module when libxcrypt is provided\ninstead of libcrypt at the system.\nWindows\n¶\nbpo-33016\n: Fix potential use of uninitialized memory in\nnt._getfinalpathname\nbpo-32903\n: Fix a memory leak in os.chdir() on Windows if the current\ndirectory is set to a UNC path.\nbpo-31966\n: Fixed WindowsConsoleIO.write() for writing empty data.\nbpo-32409\n: Ensures activate.bat can handle Unicode contents.\nbpo-32457\n: Improves handling of denormalized executable path when\nlaunching Python.\nbpo-32370\n: Use the correct encoding for ipconfig output in the uuid\nmodule. Patch by Segev Finer.\nbpo-29248\n: Fix\nos.readlink()\non Windows, which was mistakenly\ntreating the\nPrintNameOffset\nfield of the reparse data buffer as a\nnumber of characters instead of bytes. Patch by Craig Holmquist and SSE4.\nbpo-32588\n: Create standalone _distutils_findvs module.\nmacOS\n¶\nbpo-32726\n: Provide an additional, more modern macOS installer variant that\nsupports macOS 10.9+ systems in 64-bit mode only. Upgrade the supplied\nthird-party libraries to OpenSSL 1.0.2n, XZ 5.2.3, and SQLite 3.22.0. The\n10.9+ installer now links with and supplies its own copy of Tcl/Tk 8.6.8.\nIDLE\n¶\nbpo-32984\n: Set\n__file__\nwhile running a startup file.  Like Python,\nIDLE optionally runs one startup file in the Shell window before\npresenting the first interactive input prompt.  For IDLE,\n-s\nruns a\nfile named in environmental variable\nIDLESTARTUP\nor\nPYTHONSTARTUP\n;\n-r\nfile\nruns\nfile\n.  Python sets\n__file__\nto the startup file name before running the file and unsets\nit before the first prompt.  IDLE now does the same when run normally,\nwithout the\n-n\noption.\nbpo-32940\n: Simplify and rename StringTranslatePseudoMapping in pyparse.\nbpo-32916\n: Change\nstr\nto\ncode\nin pyparse.\nbpo-32905\n: Remove unused code in pyparse module.\nbpo-32874\n: Add tests for pyparse.\nbpo-32837\n: Using the system and place-dependent default encoding for\nopen() is a bad idea for IDLE’s system and location-independent files.\nbpo-32826\n: Add “encoding=utf-8” to open() in IDLE’s test_help_about. GUI\ntest test_file_buttons() only looks at initial ascii-only lines, but\nfailed on systems where open() defaults to ‘ascii’ because readline()\ninternally reads and decodes far enough ahead to encounter a non-ascii\ncharacter in CREDITS.txt.\nbpo-32765\n: Update configdialog General tab docstring to add new widgets to\nthe widget list.\nTools/Demos\n¶\nbpo-24960\n: 2to3 and lib2to3 can now read pickled grammar files using\npkgutil.get_data() rather than probing the filesystem. This lets 2to3 and\nlib2to3 work when run from a zipfile.\nbpo-32222\n: Fix pygettext not extracting docstrings for functions with type\nannotated arguments. Patch by Toby Harradine.\nC API\n¶\nbpo-29084\n: Undocumented C API for OrderedDict has been excluded from the\nlimited C API. It was added by mistake and actually never worked in the\nlimited C API.\nPython 3.6.4 final\n¶\nRelease date: 2017-12-18\nThere were no new code changes in version 3.6.4 since v3.6.4rc1.\nPython 3.6.4 release candidate 1\n¶\nRelease date: 2017-12-05\nCore and Builtins\n¶\nbpo-32176\n: co_flags.CO_NOFREE is now always set correctly by the code\nobject constructor based on freevars and cellvars, rather than needing to\nbe set correctly by the caller. This ensures it will be cleared\nautomatically when additional cell references are injected into a modified\ncode object and function.\nbpo-31949\n: Fixed several issues in printing tracebacks\n(PyTraceBack_Print()). Setting sys.tracebacklimit to 0 or less now\nsuppresses printing tracebacks. Setting sys.tracebacklimit to None now\ncauses using the default limit. Setting sys.tracebacklimit to an integer\nlarger than LONG_MAX now means using the limit LONG_MAX rather than the\ndefault limit. Fixed integer overflows in the case of more than\n2**31\ntraceback items on Windows. Fixed output errors handling.\nbpo-30696\n: Fix the interactive interpreter looping endlessly when no\nmemory.\nbpo-20047\n: Bytearray methods partition() and rpartition() now accept only\nbytes-like objects as separator, as documented.  In particular they now\nraise TypeError rather of returning a bogus result when an integer is\npassed as a separator.\nbpo-31852\n: Fix a segmentation fault caused by a combination of the async\nsoft keyword and continuation lines.\nbpo-21720\n: BytesWarning no longer emitted when the\nfromlist\nargument of\n__import__()\nor the\n__all__\nattribute of the module contain bytes\ninstances.\nbpo-31825\n: Fixed OverflowError in the ‘unicode-escape’ codec and in\ncodecs.escape_decode() when decode an escaped non-ascii byte.\nbpo-28603\n: Print the full context/cause chain of exceptions on interpreter\nexit, even if an exception in the chain is unhashable or compares equal to\nlater ones. Patch by Zane Bitter.\nbpo-31786\n: Fix timeout rounding in the select module to round correctly\nnegative timeouts between -1.0 and 0.0. The functions now block waiting\nfor events as expected. Previously, the call was incorrectly non-blocking.\nPatch by Pablo Galindo.\nbpo-31642\n: Restored blocking “from package import module” by setting\nsys.modules[“package.module”] to None.\nbpo-31626\n: Fixed a bug in debug memory allocator.  There was a write to\nfreed memory after shrinking a memory block.\nbpo-31619\n: Fixed a ValueError when convert a string with large number of\nunderscores to integer with binary base.\nbpo-31592\n: Fixed an assertion failure in Python parser in case of a bad\nunicodedata.normalize()\n. Patch by Oren Milman.\nbpo-31588\n: Raise a\nTypeError\nwith a helpful error message when class\ncreation fails due to a metaclass with a bad\n__prepare__()\nmethod.\nPatch by Oren Milman.\nbpo-31566\n: Fix an assertion failure in\n_warnings.warn()\nin case of a\nbad\n__name__\nglobal. Patch by Oren Milman.\nbpo-31505\n: Fix an assertion failure in\njson\n, in case\n_json.make_encoder()\nreceived a bad\nencoder()\nargument. Patch by\nOren Milman.\nbpo-31492\n: Fix assertion failures in case of failing to import from a\nmodule with a bad\n__name__\nattribute, and in case of failing to access\nan attribute of such a module. Patch by Oren Milman.\nbpo-31490\n: Fix an assertion failure in\nctypes\nclass definition, in\ncase the class has an attribute whose name is specified in\n_anonymous_\nbut not in\n_fields_\n. Patch by Oren Milman.\nbpo-31478\n: Fix an assertion failure in\n_random.Random.seed()\nin case\nthe argument has a bad\n__abs__()\nmethod. Patch by Oren Milman.\nbpo-31315\n: Fix an assertion failure in imp.create_dynamic(), when\nspec.name is not a string. Patch by Oren Milman.\nbpo-31311\n: Fix a crash in the\n__setstate__()\nmethod of\nctypes._CData\n, in case of a bad\n__dict__\n. Patch by Oren Milman.\nbpo-31293\n: Fix crashes in true division and multiplication of a timedelta\nobject by a float with a bad as_integer_ratio() method. Patch by Oren\nMilman.\nbpo-31285\n: Fix an assertion failure in\nwarnings.warn_explicit\n, when\nthe return value of the received loader’s\nget_source()\nhas a bad\nsplitlines()\nmethod. Patch by Oren Milman.\nbpo-30817\n:\nPyErr_PrintEx()\nclears now the ignored exception that may\nbe raised by\n_PySys_SetObjectId()\n, for example when no memory.\nLibrary\n¶\nbpo-28556\n: Two minor fixes for\ntyping\nmodule: allow shallow copying\ninstances of generic classes, improve interaction of\n__init_subclass__\nwith generics. Original PRs by Ivan Levkivskyi.\nbpo-27240\n: The header folding algorithm for the new email policies has\nbeen rewritten, which also fixes\nbpo-30788\n,\nbpo-31831\n, and\nbpo-32182\n.  In\nparticular, RFC2231 folding is now done correctly.\nbpo-32186\n: io.FileIO.readall() and io.FileIO.read() now release the GIL\nwhen getting the file size. Fixed hang of all threads with inaccessible\nNFS server. Patch by Nir Soffer.\nbpo-12239\n: Make\nmsilib.SummaryInformation.GetProperty()\nreturn\nNone\nwhen the value of property is\nVT_EMPTY\n.  Initial patch by\nMark Mc Mahon.\nbpo-31325\n: Fix wrong usage of\ncollections.namedtuple()\nin the\nRobotFileParser.parse()\nmethod. Initial patch by Robin Wellner.\nbpo-12382\n:\nmsilib.OpenDatabase()\nnow raises a better exception\nmessage when it couldn’t open or create an MSI file.  Initial patch by\nWilliam Tisäter.\nbpo-32110\n:\ncodecs.StreamReader.read(n)\nnow returns not more than\nn\ncharacters/bytes for non-negative\nn\n. This makes it compatible with\nread()\nmethods of other file-like objects.\nbpo-32072\n: Fixed issues with binary plists: Fixed saving bytearrays.\nIdentical objects will be saved only once. Equal references will be load\nas identical objects. Added support for saving and loading recursive data\nstructures.\nbpo-32034\n: Make asyncio.IncompleteReadError and LimitOverrunError\npickleable.\nbpo-32015\n: Fixed the looping of asyncio in the case of reconnection the\nsocket during waiting async read/write from/to the socket.\nbpo-32011\n: Restored support of loading marshal files with the TYPE_INT64\ncode. These files can be produced in Python 2.7.\nbpo-31970\n: Reduce performance overhead of asyncio debug mode.\nbpo-9678\n: Fixed determining the MAC address in the uuid module: Using\nifconfig on NetBSD and OpenBSD. Using arp on Linux, FreeBSD, NetBSD and\nOpenBSD. Based on patch by Takayuki Shimizukawa.\nbpo-30057\n: Fix potential missed signal in signal.signal().\nbpo-31933\n: Fix Blake2 params leaf_size and node_offset on big endian\nplatforms. Patch by Jack O’Connor.\nbpo-31927\n: Fixed compilation of the socket module on NetBSD 8.  Fixed\nassertion failure or reading arbitrary data when parse a AF_BLUETOOTH\naddress on NetBSD and DragonFly BSD.\nbpo-27666\n: Fixed stack corruption in curses.box() and curses.ungetmouse()\nwhen the size of types chtype or mmask_t is less than the size of C long.\ncurses.box() now accepts characters as arguments.  Based on patch by Steve\nFink.\nbpo-31897\n: plistlib now catches more errors when read binary plists and\nraises InvalidFileException instead of unexpected exceptions.\nbpo-25720\n: Fix the method for checking pad state of curses WINDOW. Patch\nby Masayuki Yamamoto.\nbpo-31893\n: Fixed the layout of the kqueue_event structure on OpenBSD and\nNetBSD. Fixed the comparison of the kqueue_event objects.\nbpo-31891\n: Fixed building the curses module on NetBSD.\nbpo-28416\n: Instances of pickle.Pickler subclass with the persistent_id()\nmethod and pickle.Unpickler subclass with the persistent_load() method no\nlonger create reference cycles.\nbpo-28326\n: Fix multiprocessing.Process when stdout and/or stderr is closed\nor None.\nbpo-31457\n: If nested log adapters are used, the inner\nprocess()\nmethods are no longer omitted.\nbpo-31457\n: The\nmanager\nproperty on LoggerAdapter objects is now\nproperly settable.\nbpo-31806\n: Fix timeout rounding in time.sleep(), threading.Lock.acquire()\nand socket.socket.settimeout() to round correctly negative timeouts\nbetween -1.0 and 0.0. The functions now block waiting for events as\nexpected. Previously, the call was incorrectly non-blocking. Patch by\nPablo Galindo.\nbpo-28603\n: traceback: Fix a TypeError that occurred during printing of\nexception tracebacks when either the current exception or an exception in\nits context/cause chain is unhashable. Patch by Zane Bitter.\nbpo-30058\n: Fixed buffer overflow in select.kqueue.control().\nbpo-31770\n: Prevent a crash when calling the\n__init__()\nmethod of a\nsqlite3.Cursor\nobject more than once. Patch by Oren Milman.\nbpo-31672\n:\nidpattern\nin\nstring.Template\nmatched some non-ASCII\ncharacters. Now it uses\n-i\nregular expression local flag to avoid\nnon-ASCII characters.\nbpo-31764\n: Prevent a crash in\nsqlite3.Cursor.close()\nin case the\nCursor\nobject is uninitialized. Patch by Oren Milman.\nbpo-31752\n: Fix possible crash in timedelta constructor called with custom\nintegers.\nbpo-31701\n: On Windows, faulthandler.enable() now ignores MSC and COM\nexceptions.\nbpo-31728\n: Prevent crashes in\n_elementtree\ndue to unsafe cleanup of\nElement.text\nand\nElement.tail\n. Patch by Oren Milman.\nbpo-31620\n: an empty asyncio.Queue now doesn’t leak memory when queue.get\npollers timeout\nbpo-31632\n: Fix method set_protocol() of class _SSLProtocolTransport in\nasyncio module. This method was previously modifying a wrong reference to\nthe protocol.\nbpo-31675\n: Fixed memory leaks in Tkinter’s methods splitlist() and split()\nwhen pass a string larger than 2 GiB.\nbpo-31673\n: Fixed typo in the name of Tkinter’s method adderrorinfo().\nbpo-30806\n: Fix the string representation of a netrc object.\nbpo-15037\n: Added a workaround for getkey() in curses for ncurses 5.7 and\nearlier.\nbpo-25351\n: Avoid venv activate failures with undefined variables\nbpo-25532\n: inspect.unwrap() will now only try to unwrap an object\nsys.getrecursionlimit() times, to protect against objects which create a\nnew object on every attribute access.\nbpo-30347\n: Stop crashes when concurrently iterate over itertools.groupby()\niterators.\nbpo-31516\n:\nthreading.current_thread()\nshould not return a dummy thread\nat shutdown.\nbpo-31351\n: python -m ensurepip now exits with non-zero exit code if pip\nbootstrapping has failed.\nbpo-31482\n:\nrandom.seed()\nnow works with bytes in version=1\nbpo-31334\n: Fix\npoll.poll([timeout])\nin the\nselect\nmodule for\narbitrary negative timeouts on all OSes where it can only be a\nnon-negative integer or -1. Patch by Riccardo Coccioli.\nbpo-31310\n: multiprocessing’s semaphore tracker should be launched again if\ncrashed.\nbpo-31308\n: Make multiprocessing’s forkserver process immune to Ctrl-C and\nother user interruptions. If it crashes, restart it when necessary.\nDocumentation\n¶\nbpo-32105\n: Added asyncio.BaseEventLoop.connect_accepted_socket\nversionadded marker.\nbpo-31537\n: Fix incorrect usage of\nget_history_length\nin readline\ndocumentation example code. Patch by Brad Smith.\nbpo-30085\n: The operator functions without double underscores are preferred\nfor clarity. The one with underscores are only kept for\nback-compatibility.\nTests\n¶\nbpo-31380\n: Skip test_httpservers test_undecodable_file on macOS: fails on\nAPFS.\nbpo-31705\n: Skip test_socket.test_sha256() on Linux kernel older than 4.5.\nThe test fails with ENOKEY on kernel 3.10 (on ppc64le). A fix was merged\ninto the kernel 4.5.\nbpo-31174\n: Fix test_tools.test_unparse: DirectoryTestCase now stores the\nnames sample to always test the same files. It prevents false alarms when\nhunting reference leaks.\nbpo-30695\n: Add the\nset_nomemory(start,\nstop)\nand\nremove_mem_hooks()\nfunctions to the\n_testcapi\nmodule.\nBuild\n¶\nbpo-32059\n:\ndetect_modules()\nin\nsetup.py\nnow also searches the\nsysroot paths when cross-compiling.\nbpo-31957\n: Fixes Windows SDK version detection when building for Windows.\nbpo-31609\n: Fixes quotes in PCbuild/clean.bat\nbpo-31934\n: Abort the build when building out of a not clean source tree.\nbpo-31926\n: Fixed Argument Clinic sometimes causing compilation errors when\nthere was more than one function and/or method in a .c file with the same\nname.\nbpo-28791\n: Update Windows builds to use SQLite 3.21.0.\nbpo-28791\n: Update OS X installer to use SQLite 3.21.0.\nbpo-22140\n: Prevent double substitution of prefix in python-config.sh.\nbpo-31536\n: Avoid wholesale rebuild after\nmake\nregen-all\nif nothing\nchanged.\nWindows\n¶\nbpo-1102\n: Return\nNone\nwhen\nView.Fetch()\nreturns\nERROR_NO_MORE_ITEMS\ninstead of raising\nMSIError\n. Initial patch by\nAnthony Tuininga.\nbpo-31944\n: Fixes Modify button in Apps and Features dialog.\nmacOS\n¶\nbpo-31392\n: Update macOS installer to use OpenSSL 1.0.2m\nIDLE\n¶\nbpo-32207\n: Improve tk event exception tracebacks in IDLE. When tk event\nhandling is driven by IDLE’s run loop, a confusing and distracting\nqueue.EMPTY traceback context is no longer added to tk event exception\ntracebacks.  The traceback is now the same as when event handling is\ndriven by user code.  Patch based on a suggestion by Serhiy Storchaka.\nbpo-32164\n: Delete unused file idlelib/tabbedpages.py. Use of TabbedPageSet\nin configdialog was replaced by ttk.Notebook.\nbpo-32100\n: IDLE: Fix old and new bugs in pathbrowser; improve tests. Patch\nmostly by Cheryl Sabella.\nbpo-31858\n: IDLE – Restrict shell prompt manipulation to the shell. Editor\nand output windows only see an empty last prompt line.  This simplifies\nthe code and fixes a minor bug when newline is inserted. Sys.ps1, if\npresent, is read on Shell start-up, but is not set or changed.\nbpo-31860\n: The font sample in the IDLE configuration dialog is now\neditable. Changes persist while IDLE remains open\nbpo-31836\n: Test_code_module now passes if run after test_idle, which sets\nps1. The code module uses sys.ps1 if present or sets it to ‘>>> ‘ if not.\nTest_code_module now properly tests both behaviors.  Ditto for ps2.\nbpo-28603\n: Fix a TypeError that caused a shell restart when printing a\ntraceback that includes an exception that is unhashable. Patch by Zane\nBitter.\nbpo-13802\n: Use non-Latin characters in the IDLE’s Font settings sample.\nEven if one selects a font that defines a limited subset of the unicode\nBasic Multilingual Plane, tcl/tk will use other fonts that define a\ncharacter. The expanded example give users of non-Latin characters a\nbetter idea of what they might see in IDLE’s shell and editors. To make\nroom for the expanded sample, frames on the Font tab are re-arranged. The\nFont/Tabs help explains a bit about the additions.\nbpo-31460\n: Simplify the API of IDLE’s Module Browser. Passing a widget\ninstead of an flist with a root widget opens the option of creating a\nbrowser frame that is only part of a window.  Passing a full file name\ninstead of pieces assumed to come from a .py file opens the possibility of\nbrowsing python files that do not end in .py.\nbpo-31649\n: IDLE - Make _htest, _utest parameters keyword only.\nbpo-31559\n: Remove test order dependence in idle_test.test_browser.\nbpo-31459\n: Rename IDLE’s module browser from Class Browser to Module\nBrowser. The original module-level class and method browser became a\nmodule browser, with the addition of module-level functions, years ago.\nNested classes and functions were added yesterday.  For\nback-compatibility, the virtual event <<open-class-browser>>, which\nappears on the Keys tab of the Settings dialog, is not changed. Patch by\nCheryl Sabella.\nbpo-31500\n: Default fonts now are scaled on HiDPI displays.\nbpo-1612262\n: IDLE module browser now shows nested classes and functions.\nOriginal patches for code and tests by Guilherme Polo and Cheryl Sabella,\nrespectively.\nTools/Demos\n¶\nbpo-30722\n: Make redemo work with Python 3.6 and newer versions. Also,\nremove the\nLOCALE\noption since it doesn’t work with string patterns in\nPython 3. Patch by Christoph Sarnowski.\nC API\n¶\nbpo-20891\n: Fix PyGILState_Ensure(). When PyGILState_Ensure() is called in\na non-Python thread before PyEval_InitThreads(), only call\nPyEval_InitThreads() after calling PyThreadState_New() to fix a crash.\nbpo-31532\n: Fix memory corruption due to allocator mix in getpath.c between\nPy_GetPath() and Py_SetPath()\nbpo-30697\n: The\nPyExc_RecursionErrorInst\nsingleton is removed and\nPyErr_NormalizeException()\ndoes not use it anymore. This singleton is\npersistent and its members being never cleared may cause a segfault during\nfinalization of the interpreter. See also\nbpo-22898\n.\nPython 3.6.3 final\n¶\nRelease date: 2017-10-03\nLibrary\n¶\nbpo-31641\n: Re-allow arbitrary iterables in\nconcurrent.futures.as_completed()\n. Fixes regression in 3.6.3rc1.\nBuild\n¶\nbpo-31662\n: Fix typos in Windows\nuploadrelease.bat\nscript. Fix Windows\nDoc build issues in\nDoc/make.bat\n.\nbpo-31423\n: Fix building the PDF documentation with newer versions of\nSphinx.\nPython 3.6.3 release candidate 1\n¶\nRelease date: 2017-09-18\nSecurity\n¶\nbpo-29781\n: SSLObject.version() now correctly returns None when handshake\nover BIO has not been performed yet.\nbpo-30947\n: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to\nget security fixes.\nCore and Builtins\n¶\nbpo-31471\n: Fix an assertion failure in\nsubprocess.Popen()\non Windows,\nin case the env argument has a bad\nkeys()\nmethod. Patch by Oren\nMilman.\nbpo-31418\n: Fix an assertion failure in\nPyErr_WriteUnraisable()\nin case\nof an exception with a bad\n__module__\nattribute. Patch by Oren Milman.\nbpo-31416\n: Fix assertion failures in case of a bad warnings.filters or\nwarnings.defaultaction. Patch by Oren Milman.\nbpo-31411\n: Raise a TypeError instead of SystemError in case\nwarnings.onceregistry is not a dictionary. Patch by Oren Milman.\nbpo-31373\n: Fix several possible instances of undefined behavior due to\nfloating-point demotions.\nbpo-30465\n: Location information (\nlineno\nand\ncol_offset\n) in\nf-strings is now (mostly) correct.  This fixes tools like flake8 from\nshowing warnings on the wrong line (typically the first line of the file).\nbpo-31343\n: Include sys/sysmacros.h for major(), minor(), and makedev().\nGNU C libray plans to remove the functions from sys/types.h.\nbpo-31291\n: Fix an assertion failure in\nzipimport.zipimporter.get_data\non Windows, when the return value of\npathname.replace('/','\\\\')\nisn’t\na string. Patch by Oren Milman.\nbpo-31271\n: Fix an assertion failure in the\nwrite()\nmethod of\nio.TextIOWrapper\n, when the encoder doesn’t return a bytes object.\nPatch by Oren Milman.\nbpo-31243\n: Fix a crash in some methods of\nio.TextIOWrapper\n, when the\ndecoder’s state is invalid. Patch by Oren Milman.\nbpo-30721\n:\nprint\nnow shows correct usage hint for using Python 2\nredirection syntax.  Patch by Sanyam Khurana.\nbpo-31070\n: Fix a race condition in importlib _get_module_lock().\nbpo-31095\n: Fix potential crash during GC caused by\ntp_dealloc\nwhich\ndoesn’t call\nPyObject_GC_UnTrack()\n.\nbpo-31071\n: Avoid masking original TypeError in call with * unpacking when\nother arguments are passed.\nbpo-30978\n: str.format_map() now passes key lookup exceptions through.\nPreviously any exception was replaced with a KeyError exception.\nbpo-30808\n: Use _Py_atomic API for concurrency-sensitive signal state.\nbpo-30876\n: Relative import from unloaded package now reimports the package\ninstead of failing with SystemError.  Relative import from non-package now\nfails with ImportError rather than SystemError.\nbpo-30703\n: Improve signal delivery. Avoid using Py_AddPendingCall from\nsignal handler, to avoid calling signal-unsafe functions. The tests I’m\nadding here fail without the rest of the patch, on Linux and OS X. This\nmeans our signal delivery logic had defects (some signals could be lost).\nbpo-30765\n: Avoid blocking in pthread_mutex_lock() when\nPyThread_acquire_lock() is asked not to block.\nbpo-31161\n: Make sure the ‘Missing parentheses’ syntax error message is\nonly applied to SyntaxError, not to subclasses. Patch by Martijn Pieters.\nbpo-30814\n: Fixed a race condition when import a submodule from a package.\nbpo-30597\n:\nprint\nnow shows expected input in custom error message when\nused as a Python 2 statement. Patch by Sanyam Khurana.\nLibrary\n¶\nbpo-31499\n: xml.etree: Fix a crash when a parser is part of a reference\ncycle.\nbpo-28556\n: typing.get_type_hints now finds the right globalns for classes\nand modules by default (when no\nglobalns\nwas specified by the caller).\nbpo-28556\n: Speed improvements to the\ntyping\nmodule.  Original PRs by\nIvan Levkivskyi and Mitar.\nbpo-31544\n: The C accelerator module of ElementTree ignored exceptions\nraised when looking up TreeBuilder target methods in XMLParser().\nbpo-31234\n: socket.create_connection() now fixes manually a reference\ncycle: clear the variable storing the last exception on success.\nbpo-31457\n: LoggerAdapter objects can now be nested.\nbpo-31400\n: Improves SSL error handling to avoid losing error numbers.\nbpo-28958\n: ssl.SSLContext() now uses OpenSSL error information when a\ncontext cannot be instantiated.\nbpo-27340\n: SSLSocket.sendall() now uses memoryview to create slices of\ndata. This fixes support for all bytes-like object. It is also more\nefficient and avoids costly copies.\nbpo-31178\n: Fix string concatenation bug in rare error path in the\nsubprocess module\nbpo-31350\n: Micro-optimize\nasyncio._get_running_loop()\nto become up\nto 10% faster.\nbpo-31170\n: expat: Update libexpat from 2.2.3 to 2.2.4. Fix copying of\npartial characters for UTF-8 input (libexpat bug 115):\nhttps://github.com/libexpat/libexpat/issues/115\nbpo-29136\n: Add TLS 1.3 cipher suites and OP_NO_TLSv1_3.\nbpo-29212\n: Fix concurrent.futures.thread.ThreadPoolExecutor threads to\nhave a non repr() based thread name by default when no thread_name_prefix\nis supplied. They will now identify themselves as\n“ThreadPoolExecutor-y_n”.\nbpo-9146\n: Fix a segmentation fault in _hashopenssl when standard hash\nfunctions such as md5 are not available in the linked OpenSSL library.  As\nin some special FIPS-140 build environments.\nbpo-27144\n: The\nmap()\nand\nas_completed()\niterators in\nconcurrent.futures\nnow avoid keeping a reference to yielded objects.\nbpo-10746\n: Fix ctypes producing wrong\nPEP 3118\ntype codes for integer\ntypes.\nbpo-22536\n: The subprocess module now sets the filename when\nFileNotFoundError is raised on POSIX systems due to the executable or cwd\nnot being found.\nbpo-31249\n: concurrent.futures: WorkItem.run() used by ThreadPoolExecutor\nnow breaks a reference cycle between an exception object and the WorkItem\nobject.\nbpo-31247\n: xmlrpc.server now explicitly breaks reference cycles when using\nsys.exc_info() in code handling exceptions.\nbpo-30102\n: The ssl and hashlib modules now call\nOPENSSL_add_all_algorithms_noconf() on OpenSSL < 1.1.0. The function\ndetects CPU features and enables optimizations on some CPU architectures\nsuch as POWER8. Patch is based on research from Gustavo Serra Scalet.\nbpo-31185\n: Fixed miscellaneous errors in asyncio speedup module.\nbpo-31135\n: ttk: fix the destroy() method of LabeledScale and OptionMenu\nclasses. Call the parent destroy() method even if the used attribute\ndoesn’t exist. The LabeledScale.destroy() method now also explicitly\nclears label and scale attributes to help the garbage collector to destroy\nall widgets.\nbpo-31107\n: Fix\ncopyreg._slotnames()\nmangled attribute calculation for\nclasses whose name begins with an underscore. Patch by Shane Harvey.\nbpo-31061\n: Fixed a crash when using asyncio and threads.\nbpo-30502\n: Fix handling of long oids in ssl.  Based on patch by Christian\nHeimes.\nbpo-30119\n: ftplib.FTP.putline() now throws ValueError on commands that\ncontains CR or LF. Patch by Donghee Na.\nbpo-30595\n: multiprocessing.Queue.get() with a timeout now polls its reader\nin non-blocking mode if it succeeded to acquire the lock but the acquire\ntook longer than the timeout.\nbpo-29403\n: Fix\nunittest.mock\n’s autospec to not fail on method-bound\nbuiltin functions.  Patch by Aaron Gallagher.\nbpo-30961\n: Fix decrementing a borrowed reference in tracemalloc.\nbpo-25684\n: Change\nttk.OptionMenu\nradiobuttons to be unique across\ninstances of\nOptionMenu\n.\nbpo-30886\n: Fix multiprocessing.Queue.join_thread(): it now waits until the\nthread completes, even if the thread was started by the same process which\ncreated the queue.\nbpo-29854\n: Fix segfault in readline when using readline’s history-size\noption.  Patch by Nir Soffer.\nbpo-30319\n: socket.close() now ignores ECONNRESET error.\nbpo-30828\n: Fix out of bounds write in\nasyncio.CFuture.remove_done_callback()\n.\nbpo-30807\n: signal.setitimer() may disable the timer when passed a tiny\nvalue. Tiny values (such as 1e-6) are valid non-zero values for\nsetitimer(), which is specified as taking microsecond-resolution\nintervals. However, on some platform, our conversion routine could convert\n1e-6 into a zero interval, therefore disabling the timer instead of\n(re-)scheduling it.\nbpo-30441\n: Fix bug when modifying os.environ while iterating over it\nbpo-30532\n: Fix email header value parser dropping folding white space in\ncertain cases.\nbpo-30879\n: os.listdir() and os.scandir() now emit bytes names when called\nwith bytes-like argument.\nbpo-30746\n: Prohibited the ‘=’ character in environment variable names in\nos.putenv()\nand\nos.spawn*()\n.\nbpo-29755\n: Fixed the lgettext() family of functions in the gettext module.\nThey now always return bytes.\nDocumentation\n¶\nbpo-31294\n: Fix incomplete code snippet in the ZeroMQSocketListener and\nZeroMQSocketHandler examples and adapt them to Python 3.\nbpo-21649\n: Add RFC 7525 and Mozilla server side TLS links to SSL\ndocumentation.\nbpo-30803\n: Clarify doc on truth value testing. Original patch by Peter\nThomassen.\nTests\n¶\nbpo-31320\n: Silence traceback in test_ssl\nbpo-25674\n: Remove sha256.tbs-internet.com ssl test\nbpo-30715\n: Address ALPN callback changes for OpenSSL 1.1.0f. The latest\nversion behaves like OpenSSL 1.0.2 and no longer aborts handshake.\nbpo-30822\n: regrtest: Exclude tzdata from regrtest –all. When running the\ntest suite using –use=all / -u all, exclude tzdata since it makes\ntest_datetime too slow (15-20 min on some buildbots) which then times out\non some buildbots. Fix also regrtest command line parser to allow passing\n-u extralargefile to run test_zipfile64.\nBuild\n¶\nbpo-30854\n: Fix compile error when compiling –without-threads. Patch by\nMasayuki Yamamoto.\nWindows\n¶\nbpo-30389\n: Adds detection of Visual Studio 2017 to distutils on Windows.\nbpo-31340\n: Change to building with MSVC v141 (included with Visual Studio\n2017)\nbpo-30581\n: os.cpu_count() now returns the correct number of processors on\nWindows when the number of logical processors is greater than 64.\nbpo-30731\n: Add a missing xmlns to python.manifest so that it matches the\nschema.\nIDLE\n¶\nbpo-31493\n: IDLE code context – fix code update and font update timers.\nCanceling timers prevents a warning message when test_idle completes.\nbpo-31488\n: IDLE - Update non-key options in former extension classes. When\napplying configdialog changes, call .reload for each feature class. Change\nParenMatch so updated options affect existing instances attached to\nexisting editor windows.\nbpo-31477\n: IDLE - Improve rstrip entry in doc. Strip trailing whitespace\nstrips more than blank spaces.  Multiline string literals are not skipped.\nbpo-31480\n: IDLE - make tests pass with zzdummy extension disabled by\ndefault.\nbpo-31421\n: Document how IDLE runs tkinter programs. IDLE calls tcl/tk\nupdate in the background in order to make live interaction and\nexperimentation with tkinter applications much easier.\nbpo-31414\n: IDLE – fix tk entry box tests by deleting first. Adding to an\nint entry is not the same as deleting and inserting because int(‘’) will\nfail.\nbpo-31051\n: Rearrange IDLE configdialog GenPage into Window, Editor, and\nHelp sections.\nbpo-30617\n: IDLE - Add docstrings and tests for outwin subclass of editor.\nMove some data and functions from the class to module level. Patch by\nCheryl Sabella.\nbpo-31287\n: IDLE - Do not modify tkinter.message in test_configdialog.\nbpo-27099\n: Convert IDLE’s built-in ‘extensions’ to regular features. About\n10 IDLE features were implemented as supposedly optional extensions. Their\ndifferent behavior could be confusing or worse for users and not good for\nmaintenance. Hence the conversion. The main difference for users is that\nuser configurable key bindings for builtin features are now handled\nuniformly. Now, editing a binding in a keyset only affects its value in\nthe keyset. All bindings are defined together in the system-specific\ndefault keysets in config-extensions.def. All custom keysets are saved as\na whole in config-extension.cfg.  All take effect as soon as one clicks\nApply or Ok. The affected events are ‘<<force-open-completions>>’,\n‘<<expand-word>>’, ‘<<force-open-calltip>>’, ‘<<flash-paren>>’,\n‘<<format-paragraph>>’, ‘<<run-module>>’, ‘<<check-module>>’, and\n‘<<zoom-height>>’.  Any (global) customizations made before 3.6.3 will not\naffect their keyset-specific customization after 3.6.3. and vice versa.\nInitial patch by Charles Wohlganger.\nbpo-31206\n: IDLE: Factor HighPage(Frame) class from ConfigDialog. Patch by\nCheryl Sabella.\nbpo-31001\n: Add tests for configdialog highlight tab.  Patch by Cheryl\nSabella.\nbpo-31205\n: IDLE: Factor KeysPage(Frame) class from ConfigDialog.  The\nslightly modified tests continue to pass.  Patch by Cheryl Sabella.\nbpo-31130\n: IDLE – stop leaks in test_configdialog. Initial patch by\nVictor Stinner.\nbpo-31002\n: Add tests for configdialog keys tab. Patch by Cheryl Sabella.\nbpo-19903\n: IDLE: Calltips use\ninspect.signature\ninstead of\ninspect.getfullargspec\n. This improves calltips for builtins converted\nto use Argument Clinic. Patch by Louie Lu.\nbpo-31083\n: IDLE - Add an outline of a TabPage class in configdialog.\nUpdate existing classes to match outline. Initial patch by Cheryl Sabella.\nbpo-31050\n: Factor GenPage(Frame) class from ConfigDialog. The slightly\nmodified tests continue to pass. Patch by Cheryl Sabella.\nbpo-31004\n: IDLE - Factor FontPage(Frame) class from ConfigDialog. Slightly\nmodified tests continue to pass. Fix General tests. Patch mostly by Cheryl\nSabella.\nbpo-30781\n: IDLE - Use ttk widgets in ConfigDialog. Patches by Terry Jan\nReedy and Cheryl Sabella.\nbpo-31060\n: IDLE - Finish rearranging methods of ConfigDialog Grouping\nmethods pertaining to each tab and the buttons will aid writing tests and\nimproving the tabs and will enable splitting the groups into classes.\nbpo-30853\n: IDLE – Factor a VarTrace class out of ConfigDialog. Instance\ntracers manages pairs consisting of a tk variable and a callback function.\nWhen tracing is turned on, setting the variable calls the function.  Test\ncoverage for the new class is 100%.\nbpo-31003\n: IDLE: Add more tests for General tab.\nbpo-30993\n: IDLE - Improve configdialog font page and tests. In\nconfigdialog: Document causal pathways in create_font_tab docstring.\nSimplify some attribute names. Move set_samples calls to var_changed_font\n(idea from Cheryl Sabella).  Move related functions to positions after the\ncreate widgets function. In test_configdialog: Fix test_font_set so not\norder dependent.  Fix renamed test_indent_scale so it tests the widget.\nAdjust tests for movement of set_samples call.  Add tests for load\nfunctions.  Put all font tests in one class and tab indent tests in\nanother.  Except for two lines, these tests completely cover the related\nfunctions.\nbpo-30981\n: IDLE – Add more configdialog font page tests.\nbpo-28523\n: IDLE: replace ‘colour’ with ‘color’ in configdialog.\nbpo-30917\n: Add tests for idlelib.config.IdleConf. Increase coverage from\n46% to 96%. Patch by Louie Lu.\nbpo-30934\n: Document coverage details for idlelib tests. Add section to\nidlelib/idle-test/README.txt. Include check that branches are taken both\nways. Exclude IDLE-specific code that does not run during unit tests.\nbpo-30913\n: IDLE: Document ConfigDialog tk Vars, methods, and widgets in\ndocstrings This will facilitate improving the dialog and splitting up the\nclass. Original patch by Cheryl Sabella.\nbpo-30899\n: IDLE: Add tests for ConfigParser subclasses in config. Patch by\nLouie Lu.\nbpo-30881\n: IDLE: Add docstrings to browser.py. Patch by Cheryl Sabella.\nbpo-30851\n: IDLE: Remove unused variables in configdialog.  One is a\nduplicate, one is set but cannot be altered by users. Patch by Cheryl\nSabella.\nbpo-30870\n: IDLE: In Settings dialog, select font with Up, Down keys as\nwell as mouse. Initial patch by Louie Lu.\nbpo-8231\n: IDLE: call config.IdleConf.GetUserCfgDir only once.\nbpo-30779\n: IDLE: Factor ConfigChanges class from configdialog, put in\nconfig; test. * In config, put dump test code in a function; run it and\nunittest in   ‘if __name__ == ‘__main__’. * Add class config.ConfigChanges\nbased on changes_class_v4.py on bpo issue. * Add class\ntest_config.ChangesTest, partly using configdialog_tests_v1.py. * Revise\nconfigdialog to use ConfigChanges; see tracker msg297804. * Revise\ntest_configdialog to match configdialog changes. * Remove configdialog\nfunctions unused or moved to ConfigChanges. Cheryl Sabella contributed\nparts of the patch.\nbpo-30777\n: IDLE: configdialog - Add docstrings and fix comments. Patch by\nCheryl Sabella.\nbpo-30495\n: IDLE: Improve textview with docstrings, PEP8 names, and more\ntests. Patch by Cheryl Sabella.\nbpo-30723\n: IDLE: Make several improvements to parenmatch. Add ‘parens’\nstyle to highlight both opener and closer. Make ‘default’ style, which is\nnot default, a synonym for ‘opener’. Make time-delay work the same with\nall styles. Add help for config dialog extensions tab, including help for\nparenmatch. Add new tests.  Original patch by Charles Wohlganger.\nbpo-30674\n: IDLE: add docstrings to grep module. Patch by Cheryl Sabella\nbpo-21519\n: IDLE’s basic custom key entry dialog now detects duplicates\nproperly. Original patch by Saimadhav Heblikar.\nbpo-29910\n: IDLE no longer deletes a character after commenting out a\nregion by a key shortcut.  Add\nreturn\n'break'\nfor this and other\npotential conflicts between IDLE and default key bindings.\nbpo-30728\n: Review and change idlelib.configdialog names. Lowercase method\nand attribute names. Replace ‘colour’ with ‘color’, expand overly cryptic\nnames, delete unneeded underscores. Replace\nimport\n*\nwith specific\nimports. Patches by Cheryl Sabella.\nbpo-6739\n: IDLE: Verify user-entered key sequences by trying to bind them\nwith tk. Add tests for all 3 validation functions. Original patch by G\nPolo.  Tests added by Cheryl Sabella.\nTools/Demos\n¶\nbpo-30983\n: gdb integration commands (py-bt, etc.) work on optimized shared\nbuilds now, too.\nPEP 523\nintroduced _PyEval_EvalFrameDefault which\ninlines PyEval_EvalFrameEx on non-debug shared builds.  This broke the\nability to use py-bt, py-up, and a few other Python-specific gdb\nintegrations. The problem is fixed by only looking for\n_PyEval_EvalFrameDefault frames in python-gdb.py.  Original patch by Bruno\n“Polaco” Penteado.\nPython 3.6.2 final\n¶\nRelease date: 2017-07-17\nNo changes since release candidate 2\nPython 3.6.2 release candidate 2\n¶\nRelease date: 2017-07-07\nSecurity\n¶\nbpo-30730\n: Prevent environment variables injection in subprocess on\nWindows.  Prevent passing other environment variables and command\narguments.\nbpo-30694\n: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple\nsecurity vulnerabilities including:\nCVE 2017-9233\n(External entity\ninfinite loop DoS),\nCVE 2016-9063\n(Integer overflow, re-fix),\nCVE 2016-0718\n(Fix regression bugs from 2.2.0’s fix to\nCVE 2016-0718\n) and\nCVE 2012-0876\n(Counter hash flooding with\nSipHash). Note: the\nCVE 2016-5300\n(Use os-specific entropy sources like\ngetrandom) doesn’t impact Python, since Python already gets entropy from\nthe OS to set the expat secret using\nXML_SetHashSalt()\n.\nbpo-30500\n: Fix urllib.parse.splithost() to correctly parse fragments. For\nexample,\nsplithost('//127.0.0.1#@evil.com/')\nnow correctly returns the\n127.0.0.1\nhost, instead of treating\n@evil.com\nas the host in an\nauthentication (\nlogin@host\n).\nPython 3.6.2 release candidate 1\n¶\nRelease date: 2017-06-17\nSecurity\n¶\nbpo-29591\n: Update expat copy from 2.1.1 to 2.2.0 to get fixes of\nCVE 2016-0718\nand\nCVE 2016-4472\n. See\nhttps://sourceforge.net/p/expat/bugs/537/\nfor more information.\nCore and Builtins\n¶\nbpo-30682\n: Removed a too-strict assertion that failed for certain\nf-strings, such as eval(“f’\\n’”) and eval(“f’\\r’”).\nbpo-30604\n: Move co_extra_freefuncs to not be per-thread to avoid crashes\nbpo-29104\n: Fixed parsing backslashes in f-strings.\nbpo-27945\n: Fixed various segfaults with dict when input collections are\nmutated during searching, inserting or comparing.  Based on patches by\nDuane Griffin and Tim Mitchell.\nbpo-25794\n: Fixed type.__setattr__() and type.__delattr__() for\nnon-interned attribute names.  Based on patch by Eryk Sun.\nbpo-30039\n: If a KeyboardInterrupt happens when the interpreter is in the\nmiddle of resuming a chain of nested ‘yield from’ or ‘await’ calls, it’s\nnow correctly delivered to the innermost frame.\nbpo-12414\n: sys.getsizeof() on a code object now returns the sizes which\nincludes the code struct and sizes of objects which it references. Patch\nby Donghee Na.\nbpo-29949\n: Fix memory usage regression of set and frozenset object.\nbpo-29935\n: Fixed error messages in the index() method of tuple, list and\ndeque when pass indices of wrong type.\nbpo-29859\n: Show correct error messages when any of the pthread_* calls in\nthread_pthread.h fails.\nbpo-28876\n:\nbool(range)\nworks even if\nlen(range)\nraises\nOverflowError\n.\nbpo-29600\n: Fix wrapping coroutine return values in StopIteration.\nbpo-28856\n: Fix an oversight that %b format for bytes should support\nobjects follow the buffer protocol.\nbpo-29714\n: Fix a regression that bytes format may fail when containing\nzero bytes inside.\nbpo-29478\n: If max_line_length=None is specified while using the Compat32\npolicy, it is no longer ignored.  Patch by Mircea Cosbuc.\nLibrary\n¶\nbpo-30616\n: Functional API of enum allows to create empty enums. Patched by\nDonghee Na\nbpo-30038\n: Fix race condition between signal delivery and wakeup file\ndescriptor. Patch by Nathaniel Smith.\nbpo-23894\n: lib2to3 now recognizes\nrb'...'\nand\nf'...'\nstrings.\nbpo-23890\n: unittest.TestCase.assertRaises() now manually breaks a\nreference cycle to not keep objects alive longer than expected.\nbpo-30149\n: inspect.signature() now supports callables with\nvariable-argument parameters wrapped with partialmethod. Patch by Donghee\nNa.\nbpo-30645\n: Fix path calculation in imp.load_package(), fixing it for cases\nwhen a package is only shipped with bytecodes. Patch by Alexandru\nArdelean.\nbpo-29931\n: Fixed comparison check for ipaddress.ip_interface objects.\nPatch by Sanjay Sundaresan.\nbpo-30605\n: re.compile() no longer raises a BytesWarning when compiling a\nbytes instance with misplaced inline modifier.  Patch by Roy Williams.\nbpo-24484\n: Avoid race condition in multiprocessing cleanup (#2159)\nbpo-28994\n: The traceback no longer displayed for SystemExit raised in a\ncallback registered by atexit.\nbpo-30508\n: Don’t log exceptions if Task/Future “cancel()” method was\ncalled.\nbpo-28556\n: Updates to typing module: Add generic AsyncContextManager, add\nsupport for ContextManager on all versions. Original PRs by Jelle Zijlstra\nand Ivan Levkivskyi\nbpo-29870\n: Fix ssl sockets leaks when connection is aborted in asyncio/ssl\nimplementation. Patch by Michaël Sghaïer.\nbpo-29743\n: Closing transport during handshake process leaks open socket.\nPatch by Nikolay Kim\nbpo-27585\n: Fix waiter cancellation in asyncio.Lock. Patch by Mathieu\nSornay.\nbpo-30418\n: On Windows, subprocess.Popen.communicate() now also ignore\nEINVAL on stdin.write() if the child process is still running but closed\nthe pipe.\nbpo-29822\n: inspect.isabstract() now works during __init_subclass__.  Patch\nby Nate Soares.\nbpo-29581\n: ABCMeta.__new__ now accepts\n**kwargs\n, allowing abstract\nbase classes to use keyword parameters in __init_subclass__. Patch by Nate\nSoares.\nbpo-30557\n: faulthandler now correctly filters and displays exception codes\non Windows\nbpo-30378\n: Fix the problem that logging.handlers.SysLogHandler cannot\nhandle IPv6 addresses.\nbpo-29960\n: Preserve generator state when _random.Random.setstate() raises\nan exception. Patch by Bryan Olson.\nbpo-30414\n: multiprocessing.Queue._feed background running thread do not\nbreak from main loop on exception.\nbpo-30003\n: Fix handling escape characters in HZ codec.  Based on patch by\nMa Lin.\nbpo-30301\n: Fix AttributeError when using SimpleQueue.empty() under\nspawn\nand\nforkserver\nstart methods.\nbpo-30329\n: imaplib and poplib now catch the Windows socket WSAEINVAL error\n(code 10022) on shutdown(SHUT_RDWR): An invalid operation was attempted.\nThis error occurs sometimes on SSL connections.\nbpo-30375\n: Warnings emitted when compile a regular expression now always\npoint to the line in the user code.  Previously they could point into\ninners of the re module if emitted from inside of groups or conditionals.\nbpo-30048\n: Fixed\nTask.cancel()\ncan be ignored when the task is running\ncoroutine and the coroutine returned without any more\nawait\n.\nbpo-30266\n: contextlib.AbstractContextManager now supports\nanti-registration by setting __enter__ = None or __exit__ = None,\nfollowing the pattern introduced in\nbpo-25958\n. Patch by Jelle Zijlstra.\nbpo-30298\n: Weaken the condition of deprecation warnings for inline\nmodifiers. Now allowed several subsequential inline modifiers at the start\nof the pattern (e.g.\n'(?i)(?s)...'\n).  In verbose mode whitespaces and\ncomments now are allowed before and between inline modifiers (e.g.\n'(?x)\n(?i)\n(?s)...'\n).\nbpo-29990\n: Fix range checking in GB18030 decoder.  Original patch by Ma\nLin.\nbpo-26293\n: Change resulted because of zipfile breakage. (See also:\nbpo-29094\n)\nbpo-30243\n: Removed the __init__ methods of _json’s scanner and encoder.\nMisusing them could cause memory leaks or crashes.  Now scanner and\nencoder objects are completely initialized in the __new__ methods.\nbpo-30185\n: Avoid KeyboardInterrupt tracebacks in forkserver helper process\nwhen Ctrl-C is received.\nbpo-28556\n: Various updates to typing module: add typing.NoReturn type, use\nWrapperDescriptorType, minor bug-fixes.  Original PRs by Jim\nFasarakis-Hilliard and Ivan Levkivskyi.\nbpo-30205\n: Fix getsockname() for unbound AF_UNIX sockets on Linux.\nbpo-30070\n: Fixed leaks and crashes in errors handling in the parser\nmodule.\nbpo-30061\n: Fixed crashes in IOBase methods __next__() and readlines() when\nreadline() or __next__() respectively return non-sizeable object. Fixed\npossible other errors caused by not checking results of PyObject_Size(),\nPySequence_Size(), or PyMapping_Size().\nbpo-30017\n: Allowed calling the close() method of the zip entry writer\nobject multiple times.  Writing to a closed writer now always produces a\nValueError.\nbpo-30068\n: _io._IOBase.readlines will check if it’s closed first when hint\nis present.\nbpo-29694\n: Fixed race condition in pathlib mkdir with flags parents=True.\nPatch by Armin Rigo.\nbpo-29692\n: Fixed arbitrary unchaining of RuntimeError exceptions in\ncontextlib.contextmanager.  Patch by Siddharth Velankar.\nbpo-29998\n: Pickling and copying ImportError now preserves name and path\nattributes.\nbpo-29953\n: Fixed memory leaks in the replace() method of datetime and time\nobjects when pass out of bound fold argument.\nbpo-29942\n: Fix a crash in itertools.chain.from_iterable when encountering\nlong runs of empty iterables.\nbpo-27863\n: Fixed multiple crashes in ElementTree caused by race conditions\nand wrong types.\nbpo-28699\n: Fixed a bug in pools in multiprocessing.pool that raising an\nexception at the very first of an iterable may swallow the exception or\nmake the program hang. Patch by Davin Potts and Xiang Zhang.\nbpo-25803\n: Avoid incorrect errors raised by Path.mkdir(exist_ok=True) when\nthe OS gives priority to errors such as EACCES over EEXIST.\nbpo-29861\n: Release references to tasks, their arguments and their results\nas soon as they are finished in multiprocessing.Pool.\nbpo-29884\n: faulthandler: Restore the old sigaltstack during teardown.\nPatch by Christophe Zeitouny.\nbpo-25455\n: Fixed crashes in repr of recursive buffered file-like objects.\nbpo-29800\n: Fix crashes in partial.__repr__ if the keys of partial.keywords\nare not strings.  Patch by Michael Seifert.\nbpo-29742\n: get_extra_info() raises exception if get called on closed ssl\ntransport. Patch by Nikolay Kim.\nbpo-8256\n: Fixed possible failing or crashing input() if attributes\n“encoding” or “errors” of sys.stdin or sys.stdout are not set or are not\nstrings.\nbpo-28298\n: Fix a bug that prevented array ‘Q’, ‘L’ and ‘I’ from accepting\nbig intables (objects that have __int__) as elements.  Patch by Oren\nMilman.\nbpo-28231\n: The zipfile module now accepts path-like objects for external\npaths.\nbpo-26915\n: index() and count() methods of collections.abc.Sequence now\ncheck identity before checking equality when do comparisons.\nbpo-29615\n: SimpleXMLRPCDispatcher no longer chains KeyError (or any other\nexception) to exception(s) raised in the dispatched methods. Patch by Petr\nMotejlek.\nbpo-30177\n: path.resolve(strict=False) no longer cuts the path after the\nfirst element not present in the filesystem.  Patch by Antoine Pietri.\nIDLE\n¶\nbpo-15786\n: Fix several problems with IDLE’s autocompletion box. The\nfollowing should now work: clicking on selection box items; using the\nscrollbar; selecting an item by hitting Return. Hangs on MacOSX should no\nlonger happen. Patch by Louie Lu.\nbpo-25514\n: Add doc subsubsection about IDLE failure to start. Popup\nno-connection message directs users to this section.\nbpo-30642\n: Fix reference leaks in IDLE tests. Patches by Louie Lu and\nTerry Jan Reedy.\nbpo-30495\n: Add docstrings for textview.py and use PEP8 names. Patches by\nCheryl Sabella and Terry Jan Reedy.\nbpo-30290\n: Help-about: use pep8 names and add tests. Increase coverage to\n100%. Patches by Louie Lu, Cheryl Sabella, and Terry Jan Reedy.\nbpo-30303\n: Add _utest option to textview; add new tests. Increase coverage\nto 100%. Patches by Louie Lu and Terry Jan Reedy.\nC API\n¶\nbpo-27867\n: Function PySlice_GetIndicesEx() no longer replaced with a macro\nif Py_LIMITED_API is not set.\nBuild\n¶\nbpo-29941\n: Add\n--with-assertions\nconfigure flag to explicitly enable C\nassert()\nchecks. Defaults to off.\n--with-pydebug\nimplies\n--with-assertions\n.\nbpo-28787\n: Fix out-of-tree builds of Python when configured with\n--with--dtrace\n.\nbpo-29243\n: Prevent unnecessary rebuilding of Python during\nmake\ntest\n,\nmake\ninstall\nand some other make targets when configured with\n--enable-optimizations\n.\nbpo-23404\n: Don’t regenerate generated files based on file modification\ntime anymore: the action is now explicit. Replace\nmake\ntouch\nwith\nmake\nregen-all\n.\nbpo-29643\n: Fix\n--enable-optimization\ndidn’t work.\nDocumentation\n¶\nbpo-30176\n: Add missing attribute related constants in curses\ndocumentation.\nbpo-30052\n: the link targets for\nbytes()\nand\nbytearray()\nare\nnow their respective type definitions, rather than the corresponding\nbuiltin function entries. Use\nbytes\nand\nbytearray\nto reference the latter. In order to\nensure this and future cross-reference updates are applied automatically,\nthe daily documentation builds now disable the default output caching\nfeatures in Sphinx.\nbpo-26985\n: Add missing info of code object in inspect documentation.\nTools/Demos\n¶\nbpo-29367\n: python-gdb.py now supports also\nmethod-wrapper\n(\nwrapperobject\n) objects.\nTests\n¶\nbpo-30357\n: test_thread: setUp() now uses support.threading_setup() and\nsupport.threading_cleanup() to wait until threads complete to avoid random\nside effects on following tests. Initial patch written by Grzegorz\nGrzywacz.\nbpo-30197\n: Enhanced functions swap_attr() and swap_item() in the\ntest.support module. They now work when delete replaced attribute or item\ninside the with statement.  The old value of the attribute or item (or\nNone if it doesn’t exist) now will be assigned to the target of the “as”\nclause, if there is one.\nWindows\n¶\nbpo-30687\n: Locate msbuild.exe on Windows when building rather than\nvcvarsall.bat\nbpo-30450\n: The build process on Windows no longer depends on Subversion,\ninstead pulling external code from GitHub via a Python script.  If Python\n3.6 is not found on the system (via\npy\n-3.6\n), NuGet is used to\ndownload a copy of 32-bit Python.\nPython 3.6.1 final\n¶\nRelease date: 2017-03-21\nCore and Builtins\n¶\nbpo-29723\n: The\nsys.path[0]\ninitialization change for\nbpo-29139\ncaused\na regression by revealing an inconsistency in how sys.path is initialized\nwhen executing\n__main__\nfrom a zipfile, directory, or other import\nlocation. The interpreter now consistently avoids ever adding the import\nlocation’s parent directory to\nsys.path\n, and ensures no other\nsys.path\nentries are inadvertently modified when inserting the import\nlocation named on the command line.\nBuild\n¶\nbpo-27593\n: fix format of git information used in sys.version\nFix incompatible comment in python.h\nPython 3.6.1 release candidate 1\n¶\nRelease date: 2017-03-04\nCore and Builtins\n¶\nbpo-28893\n: Set correct __cause__ for errors about invalid awaitables\nreturned from __aiter__ and __anext__.\nbpo-29683\n: Fixes to memory allocation in _PyCode_SetExtra.  Patch by Brian\nColeman.\nbpo-29684\n: Fix minor regression of PyEval_CallObjectWithKeywords. It\nshould raise TypeError when kwargs is not a dict.  But it might cause segv\nwhen args=NULL and kwargs is not a dict.\nbpo-28598\n: Support __rmod__ for subclasses of str being called before\nstr.__mod__. Patch by Martijn Pieters.\nbpo-29607\n: Fix stack_effect computation for CALL_FUNCTION_EX. Patch by\nMatthieu Dartiailh.\nbpo-29602\n: Fix incorrect handling of signed zeros in complex constructor\nfor complex subclasses and for inputs having a __complex__ method. Patch\nby Serhiy Storchaka.\nbpo-29347\n: Fixed possibly dereferencing undefined pointers when creating\nweakref objects.\nbpo-29438\n: Fixed use-after-free problem in key sharing dict.\nbpo-29319\n: Prevent RunMainFromImporter overwriting sys.path[0].\nbpo-29337\n: Fixed possible BytesWarning when compare the code objects.\nWarnings could be emitted at compile time.\nbpo-29327\n: Fixed a crash when pass the iterable keyword argument to\nsorted().\nbpo-29034\n: Fix memory leak and use-after-free in os module\n(path_converter).\nbpo-29159\n: Fix regression in bytes(x) when x.__index__() raises Exception.\nbpo-28932\n: Do not include <sys/random.h> if it does not exist.\nbpo-25677\n: Correct the positioning of the syntax error caret for indented\nblocks. Based on patch by Michael Layzell.\nbpo-29000\n: Fixed bytes formatting of octals with zero padding in alternate\nform.\nbpo-26919\n: On Android, operating system data is now always encoded/decoded\nto/from UTF-8, instead of the locale encoding to avoid inconsistencies\nwith os.fsencode() and os.fsdecode() which are already using UTF-8.\nbpo-28991\n: functools.lru_cache() was susceptible to an obscure reentrancy\nbug triggerable by a monkey-patched len() function.\nbpo-28739\n: f-string expressions are no longer accepted as docstrings and\nby ast.literal_eval() even if they do not include expressions.\nbpo-28512\n: Fixed setting the offset attribute of SyntaxError by\nPyErr_SyntaxLocationEx() and PyErr_SyntaxLocationObject().\nbpo-28918\n: Fix the cross compilation of xxlimited when Python has been\nbuilt with Py_DEBUG defined.\nbpo-28731\n: Optimize _PyDict_NewPresized() to create correct size dict.\nImprove speed of dict literal with constant keys up to 30%.\nLibrary\n¶\nbpo-29169\n: Update zlib to 1.2.11.\nbpo-29623\n: Allow use of path-like object as a single argument in\nConfigParser.read(). Patch by David Ellis.\nbpo-28963\n: Fix out of bound iteration in\nasyncio.Future.remove_done_callback implemented in C.\nbpo-29704\n: asyncio.subprocess.SubprocessStreamProtocol no longer closes\nbefore all pipes are closed.\nbpo-29271\n: Fix Task.current_task and Task.all_tasks implemented in C to\naccept None argument as their pure Python implementation.\nbpo-29703\n: Fix asyncio to support instantiation of new event loops in\nchild processes.\nbpo-29376\n: Fix assertion error in threading._DummyThread.is_alive().\nbpo-28624\n: Add a test that checks that cwd parameter of Popen() accepts\nPathLike objects.  Patch by Sayan Chowdhury.\nbpo-28518\n: Start a transaction implicitly before a DML statement. Patch by\nAviv Palivoda.\nbpo-29532\n: Altering a kwarg dictionary passed to functools.partial() no\nlonger affects a partial object after creation.\nbpo-29110\n: Fix file object leak in aifc.open() when file is given as a\nfilesystem path and is not in valid AIFF format. Patch by Anthony Zhang.\nbpo-28556\n: Various updates to typing module: typing.Counter,\ntyping.ChainMap, improved ABC caching, etc. Original PRs by Jelle\nZijlstra, Ivan Levkivskyi, Manuel Krebber, and Łukasz Langa.\nbpo-29100\n: Fix datetime.fromtimestamp() regression introduced in Python\n3.6.0: check minimum and maximum years.\nbpo-29519\n: Fix weakref spewing exceptions during interpreter shutdown when\nused with a rare combination of multiprocessing and custom codecs.\nbpo-29416\n: Prevent infinite loop in pathlib.Path.mkdir\nbpo-29444\n: Fixed out-of-bounds buffer access in the group() method of the\nmatch object. Based on patch by WGH.\nbpo-29335\n: Fix subprocess.Popen.wait() when the child process has exited\nto a stopped instead of terminated state (ex: when under ptrace).\nbpo-29290\n: Fix a regression in argparse that help messages would wrap at\nnon-breaking spaces.\nbpo-28735\n: Fixed the comparison of mock.MagickMock with mock.ANY.\nbpo-29316\n: Restore the provisional status of typing module, add\ncorresponding note to documentation. Patch by Ivan L.\nbpo-29219\n: Fixed infinite recursion in the repr of uninitialized\nctypes.CDLL instances.\nbpo-29011\n: Fix an important omission by adding Deque to the typing module.\nbpo-28969\n: Fixed race condition in C implementation of\nfunctools.lru_cache. KeyError could be raised when cached function with\nfull cache was simultaneously called from different threads with the same\nuncached arguments.\nbpo-29142\n: In urllib.request, suffixes in no_proxy environment variable\nwith leading dots could match related hostnames again (e.g. .b.c matches\na.b.c). Patch by Milan Oberkirch.\nbpo-28961\n: Fix unittest.mock._Call helper: don’t ignore the name parameter\nanymore. Patch written by Jiajun Huang.\nbpo-29203\n: functools.lru_cache() now respects\nPEP 468\nand preserves the\norder of keyword arguments.  f(a=1, b=2) is now cached separately from\nf(b=2, a=1) since both calls could potentially give different results.\nbpo-15812\n: inspect.getframeinfo() now correctly shows the first line of a\ncontext. Patch by Sam Breese.\nbpo-29094\n: Offsets in a ZIP file created with extern file object and modes\n“w” and “x” now are relative to the start of the file.\nbpo-29085\n: Allow random.Random.seed() to use high quality OS randomness\nrather than the pid and time.\nbpo-29061\n: Fixed bug in secrets.randbelow() which would hang when given a\nnegative input.  Patch by Brendan Donegan.\nbpo-29079\n: Prevent infinite loop in pathlib.resolve() on Windows\nbpo-13051\n: Fixed recursion errors in large or resized\ncurses.textpad.Textbox.  Based on patch by Tycho Andersen.\nbpo-29119\n: Fix weakrefs in the pure python version of\ncollections.OrderedDict move_to_end() method. Contributed by Andra\nBogildea.\nbpo-9770\n: curses.ascii predicates now work correctly with negative\nintegers.\nbpo-28427\n: old keys should not remove new values from WeakValueDictionary\nwhen collecting from another thread.\nbpo-28923\n: Remove editor artifacts from Tix.py.\nbpo-29055\n: Neaten-up empty population error on random.choice() by\nsuppressing the upstream exception.\nbpo-28871\n: Fixed a crash when deallocate deep ElementTree.\nbpo-19542\n: Fix bugs in WeakValueDictionary.setdefault() and\nWeakValueDictionary.pop() when a GC collection happens in another thread.\nbpo-20191\n: Fixed a crash in resource.prlimit() when passing a sequence\nthat doesn’t own its elements as limits.\nbpo-28779\n: multiprocessing.set_forkserver_preload() would crash the\nforkserver process if a preloaded module instantiated some multiprocessing\nobjects such as locks.\nbpo-28847\n: dbm.dumb now supports reading read-only files and no longer\nwrites the index file when it is not changed.\nbpo-26937\n: The chown() method of the tarfile.TarFile class does not fail\nnow when the grp module cannot be imported, as for example on Android\nplatforms.\nIDLE\n¶\nbpo-29071\n: IDLE colors f-string prefixes (but not invalid ur prefixes).\nbpo-28572\n: Add 10% to coverage of IDLE’s test_configdialog. Update and\naugment description of the configuration system.\nWindows\n¶\nbpo-29579\n: Removes readme.txt from the installer\nbpo-29326\n: Ignores blank lines in ._pth files (Patch by Alexey Izbyshev)\nbpo-28164\n: Correctly handle special console filenames (patch by Eryk Sun)\nbpo-29409\n: Implement\nPEP 529\nfor io.FileIO (Patch by Eryk Sun)\nbpo-29392\n: Prevent crash when passing invalid arguments into msvcrt\nmodule.\nbpo-25778\n: winreg does not truncate string correctly (Patch by Eryk Sun)\nbpo-28896\n: Deprecate WindowsRegistryFinder and disable it by default.\nC API\n¶\nbpo-27867\n: Function PySlice_GetIndicesEx() is replaced with a macro if\nPy_LIMITED_API is not set or set to the value between 0x03050400 and\n0x03060000 (not including) or 0x03060100 or higher.\nbpo-29083\n: Fixed the declaration of some public API functions.\nPyArg_VaParse() and PyArg_VaParseTupleAndKeywords() were not available in\nlimited API. PyArg_ValidateKeywordArguments(), PyArg_UnpackTuple() and\nPy_BuildValue() were not available in limited API of version < 3.3 when\nPY_SSIZE_T_CLEAN is defined.\nbpo-29058\n: All stable API extensions added after Python 3.2 are now\navailable only when Py_LIMITED_API is set to the PY_VERSION_HEX value of\nthe minimum Python version supporting this API.\nDocumentation\n¶\nbpo-28929\n: Link the documentation to its source file on GitHub.\nbpo-25008\n: Document smtpd.py as effectively deprecated and add a pointer\nto aiosmtpd, a third-party asyncio-based replacement.\nbpo-26355\n: Add canonical header link on each page to corresponding major\nversion of the documentation. Patch by Matthias Bussonnier.\nbpo-29349\n: Fix Python 2 syntax in code for building the documentation.\nTests\n¶\nbpo-28087\n: Skip test_asyncore and test_eintr poll failures on macOS. Skip\nsome tests of select.poll when running on macOS due to unresolved issues\nwith the underlying system poll function on some macOS versions.\nbpo-29571\n: to match the behaviour of the\nre.LOCALE\nflag,\ntest_re.test_locale_flag now uses\nlocale.getpreferredencoding(False)\nto determine the candidate encoding for the test regex (allowing it to\ncorrectly skip the test when the default locale encoding is a multi-byte\nencoding)\nbpo-28950\n: Disallow -j0 to be combined with -T/-l in regrtest command line\narguments.\nbpo-28683\n: Fix the tests that bind() a unix socket and raise\nPermissionError on Android for a non-root user.\nbpo-26939\n: Add the support.setswitchinterval() function to fix\ntest_functools hanging on the Android armv7 qemu emulator.\nBuild\n¶\nbpo-27593\n: sys.version and the platform module python_build(),\npython_branch(), and python_revision() functions now use git information\nrather than hg when building from a repo.\nbpo-29572\n: Update Windows build and OS X installers to use OpenSSL 1.0.2k.\nbpo-26851\n: Set Android compilation and link flags.\nbpo-28768\n: Fix implicit declaration of function _setmode. Patch by\nMasayuki Yamamoto\nbpo-29080\n: Removes hard dependency on hg.exe from PCBuild/build.bat\nbpo-23903\n: Added missed names to PC/python3.def.\nbpo-28762\n: lockf() is available on Android API level 24, but the F_LOCK\nmacro is not defined in android-ndk-r13.\nbpo-28538\n: Fix the compilation error that occurs because if_nameindex() is\navailable on Android API level 24, but the if_nameindex structure is not\ndefined.\nbpo-20211\n: Do not add the directory for installing C header files and the\ndirectory for installing object code libraries to the cross compilation\nsearch paths. Original patch by Thomas Petazzoni.\nbpo-28849\n: Do not define sys.implementation._multiarch on Android.\nPython 3.6.0 final\n¶\nRelease date: 2016-12-23\nNo changes since release candidate 2\nPython 3.6.0 release candidate 2\n¶\nRelease date: 2016-12-16\nCore and Builtins\n¶\nbpo-28147\n: Fix a memory leak in split-table dictionaries: setattr() must\nnot convert combined table into split table. Patch written by INADA Naoki.\nbpo-28990\n: Fix asyncio SSL hanging if connection is closed before\nhandshake is completed. (Patch by HoHo-Ho)\nTools/Demos\n¶\nbpo-28770\n: Fix python-gdb.py for fastcalls.\nWindows\n¶\nbpo-28896\n: Deprecate WindowsRegistryFinder.\nBuild\n¶\nbpo-28898\n: Prevent gdb build errors due to HAVE_LONG_LONG redefinition.\nPython 3.6.0 release candidate 1\n¶\nRelease date: 2016-12-06\nCore and Builtins\n¶\nbpo-23722\n: Rather than silently producing a class that doesn’t support\nzero-argument\nsuper()\nin methods, failing to pass the new\n__classcell__\nnamespace entry up to\ntype.__new__\nnow results in a\nDeprecationWarning\nand a class that supports zero-argument\nsuper()\n.\nbpo-28797\n: Modifying the class __dict__ inside the __set_name__ method of\na descriptor that is used inside that class no longer prevents calling the\n__set_name__ method of other descriptors.\nbpo-28782\n: Fix a bug in the implementation\nyield\nfrom\nwhen checking if\nthe next instruction is YIELD_FROM. Regression introduced by WORDCODE\n(\nbpo-26647\n).\nLibrary\n¶\nbpo-27030\n: Unknown escapes in re.sub() replacement template are allowed\nagain.  But they still are deprecated and will be disabled in 3.7.\nbpo-28835\n: Fix a regression introduced in warnings.catch_warnings(): call\nwarnings.showwarning() if it was overridden inside the context manager.\nbpo-27172\n: To assist with upgrades from 2.7, the previously documented\ndeprecation of\ninspect.getfullargspec()\nhas been reversed. This\ndecision may be revisited again after the Python 2.7 branch is no longer\nofficially supported.\nbpo-26273\n: Add new\nsocket.TCP_CONGESTION\n(Linux 2.6.13) and\nsocket.TCP_USER_TIMEOUT\n(Linux 2.6.37) constants. Patch written\nby Omar Sandoval.\nbpo-24142\n: Reading a corrupt config file left configparser in an invalid\nstate. Original patch by Florian Höch.\nbpo-28843\n: Fix asyncio C Task to handle exceptions __traceback__.\nC API\n¶\nbpo-28808\n: PyUnicode_CompareWithASCIIString() now never raises exceptions.\nDocumentation\n¶\nbpo-23722\n: The data model reference and the porting section in the What’s\nNew guide now cover the additional\n__classcell__\nhandling needed for\ncustom metaclasses to fully support\nPEP 487\nand zero-argument\nsuper()\n.\nTools/Demos\n¶\nbpo-28023\n: Fix python-gdb.py didn’t support new dict implementation.\nPython 3.6.0 beta 4\n¶\nRelease date: 2016-11-21\nCore and Builtins\n¶\nbpo-28532\n: Show sys.version when -V option is supplied twice.\nbpo-27100\n: The with-statement now checks for __enter__ before it checks\nfor __exit__. This gives less confusing error messages when both methods\nare missing. Patch by Jonathan Ellington.\nbpo-28746\n: Fix the set_inheritable() file descriptor method on platforms\nthat do not have the ioctl FIOCLEX and FIONCLEX commands.\nbpo-26920\n: Fix not getting the locale’s charset upon initializing the\ninterpreter, on platforms that do not have langinfo.\nbpo-28648\n: Fixed crash in Py_DecodeLocale() in debug build on Mac OS X\nwhen decode astral characters.  Patch by Xiang Zhang.\nbpo-19398\n: Extra slash no longer added to sys.path components in case of\nempty compile-time PYTHONPATH components.\nbpo-28665\n: Improve speed of the STORE_DEREF opcode by 40%.\nbpo-28583\n: PyDict_SetDefault didn’t combine split table when needed. Patch\nby Xiang Zhang.\nbpo-27243\n: Change PendingDeprecationWarning -> DeprecationWarning. As it\nwas agreed in the issue, __aiter__ returning an awaitable should result in\nPendingDeprecationWarning in 3.5 and in DeprecationWarning in 3.6.\nbpo-26182\n: Fix a refleak in code that raises DeprecationWarning.\nbpo-28721\n: Fix asynchronous generators aclose() and athrow() to handle\nStopAsyncIteration propagation properly.\nLibrary\n¶\nbpo-28752\n: Restored the __reduce__() methods of datetime objects.\nbpo-28727\n: Regular expression patterns, _sre.SRE_Pattern objects created\nby re.compile(), become comparable (only x==y and x!=y operators). This\nchange should fix the\nbpo-18383\n: don’t duplicate warning filters when\nthe warnings module is reloaded (thing usually only done in unit tests).\nbpo-20572\n: The subprocess.Popen.wait method’s undocumented endtime\nparameter now raises a DeprecationWarning.\nbpo-25659\n: In ctypes, prevent a crash calling the from_buffer() and\nfrom_buffer_copy() methods on abstract classes like Array.\nbpo-19717\n: Makes Path.resolve() succeed on paths that do not exist. Patch\nby Vajrasky Kok\nbpo-28563\n: Fixed possible DoS and arbitrary code execution when handle\nplural form selections in the gettext module.  The expression parser now\nsupports exact syntax supported by GNU gettext.\nbpo-28387\n: Fixed possible crash in _io.TextIOWrapper deallocator when the\ngarbage collector is invoked in other thread.  Based on patch by Sebastian\nCufre.\nbpo-28600\n: Optimize loop.call_soon.\nbpo-28613\n: Fix get_event_loop() return the current loop if called from\ncoroutines/callbacks.\nbpo-28634\n: Fix asyncio.isfuture() to support unittest.Mock.\nbpo-26081\n: Fix refleak in _asyncio.Future.__iter__().throw.\nbpo-28639\n: Fix inspect.isawaitable to always return bool Patch by Justin\nMayfield.\nbpo-28652\n: Make loop methods reject socket kinds they do not support.\nbpo-28653\n: Fix a refleak in functools.lru_cache.\nbpo-28703\n: Fix asyncio.iscoroutinefunction to handle Mock objects.\nbpo-28704\n: Fix create_unix_server to support Path-like objects (PEP 519).\nbpo-28720\n: Add collections.abc.AsyncGenerator.\nDocumentation\n¶\nbpo-28513\n: Documented command-line interface of zipfile.\nTests\n¶\nbpo-28666\n: Now test.support.rmtree is able to remove unwritable or\nunreadable directories.\nbpo-23839\n: Various caches now are cleared before running every test file.\nBuild\n¶\nbpo-10656\n: Fix out-of-tree building on AIX.  Patch by Tristan Carel and\nMichael Haubenwallner.\nbpo-26359\n: Rename –with-optimiations to –enable-optimizations.\nbpo-28676\n: Prevent missing ‘getentropy’ declaration warning on macOS.\nPatch by Gareth Rees.\nPython 3.6.0 beta 3\n¶\nRelease date: 2016-10-31\nCore and Builtins\n¶\nbpo-28128\n: Deprecation warning for invalid str and byte escape sequences\nnow prints better information about where the error occurs. Patch by\nSerhiy Storchaka and Eric Smith.\nbpo-28509\n: dict.update() no longer allocate unnecessary large memory.\nbpo-28426\n: Fixed potential crash in PyUnicode_AsDecodedObject() in debug\nbuild.\nbpo-28517\n: Fixed of-by-one error in the peephole optimizer that caused\nkeeping unreachable code.\nbpo-28214\n: Improved exception reporting for problematic __set_name__\nattributes.\nbpo-23782\n: Fixed possible memory leak in _PyTraceback_Add() and exception\nloss in PyTraceBack_Here().\nbpo-28471\n: Fix “Python memory allocator called without holding the GIL”\ncrash in socket.setblocking.\nLibrary\n¶\nbpo-27517\n: LZMA compressor and decompressor no longer raise exceptions if\ngiven empty data twice.  Patch by Benjamin Fogle.\nbpo-28549\n: Fixed segfault in curses’s addch() with ncurses6.\nbpo-28449\n: tarfile.open() with mode “r” or “r:” now tries to open a tar\nfile with compression before trying to open it without compression.\nOtherwise it had 50% chance failed with ignore_zeros=True.\nbpo-23262\n: The webbrowser module now supports Firefox 36+ and derived\nbrowsers.  Based on patch by Oleg Broytman.\nbpo-27939\n: Fixed bugs in tkinter.ttk.LabeledScale and tkinter.Scale caused\nby representing the scale as float value internally in Tk.  tkinter.IntVar\nnow works if float value is set to underlying Tk variable.\nbpo-18844\n: The various ways of specifying weights for random.choices() now\nproduce the same result sequences.\nbpo-28255\n: calendar.TextCalendar().prmonth() no longer prints a space at\nthe start of new line after printing a month’s calendar.  Patch by Xiang\nZhang.\nbpo-20491\n: The textwrap.TextWrapper class now honors non-breaking spaces.\nBased on patch by Kaarle Ritvanen.\nbpo-28353\n: os.fwalk() no longer fails on broken links.\nbpo-28430\n: Fix iterator of C implemented asyncio.Future doesn’t accept\nnon-None value is passed to it.send(val).\nbpo-27025\n: Generated names for Tkinter widgets now start by the “!” prefix\nfor readability.\nbpo-25464\n: Fixed HList.header_exists() in tkinter.tix module by addin a\nworkaround to Tix library bug.\nbpo-28488\n: shutil.make_archive() no longer adds entry “./” to ZIP archive.\nbpo-25953\n: re.sub() now raises an error for invalid numerical group\nreference in replacement template even if the pattern is not found in the\nstring.  Error message for invalid group reference now includes the group\nindex and the position of the reference. Based on patch by SilentGhost.\nbpo-18219\n: Optimize csv.DictWriter for large number of columns. Patch by\nMariatta Wijaya.\nbpo-28448\n: Fix C implemented asyncio.Future didn’t work on Windows.\nbpo-28480\n: Fix error building socket module when multithreading is\ndisabled.\nbpo-24452\n: Make webbrowser support Chrome on Mac OS X.\nbpo-20766\n: Fix references leaked by pdb in the handling of SIGINT\nhandlers.\nbpo-28492\n: Fix how StopIteration exception is raised in _asyncio.Future.\nbpo-28500\n: Fix asyncio to handle async gens GC from another thread.\nbpo-26923\n: Fix asyncio.Gather to refuse being cancelled once all children\nare done. Patch by Johannes Ebke.\nbpo-26796\n: Don’t configure the number of workers for default threadpool\nexecutor. Initial patch by Hans Lawrenz.\nbpo-28544\n: Implement asyncio.Task in C.\nWindows\n¶\nbpo-28522\n: Fixes mishandled buffer reallocation in getpathp.c\nBuild\n¶\nbpo-28444\n: Fix missing extensions modules when cross compiling.\nbpo-28208\n: Update Windows build and OS X installers to use SQLite 3.14.2.\nbpo-28248\n: Update Windows build and OS X installers to use OpenSSL 1.0.2j.\nTests\n¶\nbpo-26944\n: Fix test_posix for Android where ‘id -G’ is entirely wrong or\nmissing the effective gid.\nbpo-28409\n: regrtest: fix the parser of command line arguments.\nPython 3.6.0 beta 2\n¶\nRelease date: 2016-10-10\nCore and Builtins\n¶\nbpo-28183\n: Optimize and cleanup dict iteration.\nbpo-26081\n: Added C implementation of asyncio.Future. Original patch by\nYury Selivanov.\nbpo-28379\n: Added sanity checks and tests for PyUnicode_CopyCharacters().\nPatch by Xiang Zhang.\nbpo-28376\n: The type of long range iterator is now registered as Iterator.\nPatch by Oren Milman.\nbpo-28376\n: Creating instances of range_iterator by calling range_iterator\ntype now is deprecated.  Patch by Oren Milman.\nbpo-28376\n: The constructor of range_iterator now checks that step is not\n0. Patch by Oren Milman.\nbpo-26906\n: Resolving special methods of uninitialized type now causes\nimplicit initialization of the type instead of a fail.\nbpo-18287\n: PyType_Ready() now checks that tp_name is not NULL. Original\npatch by Niklas Koep.\nbpo-24098\n: Fixed possible crash when AST is changed in process of\ncompiling it.\nbpo-28201\n: Dict reduces possibility of 2nd conflict in hash table when\nhashes have same lower bits.\nbpo-28350\n: String constants with null character no longer interned.\nbpo-26617\n: Fix crash when GC runs during weakref callbacks.\nbpo-27942\n: String constants now interned recursively in tuples and\nfrozensets.\nbpo-21578\n: Fixed misleading error message when ImportError called with\ninvalid keyword args.\nbpo-28203\n: Fix incorrect type in complex(1.0, {2:3}) error message. Patch\nby Soumya Sharma.\nbpo-28086\n: Single var-positional argument of tuple subtype was passed\nunscathed to the C-defined function.  Now it is converted to exact tuple.\nbpo-28214\n: Now __set_name__ is looked up on the class instead of the\ninstance.\nbpo-27955\n: Fallback on reading /dev/urandom device when the getrandom()\nsyscall fails with EPERM, for example when blocked by SECCOMP.\nbpo-28192\n: Don’t import readline in isolated mode.\nUpgrade internal unicode databases to Unicode version 9.0.0.\nbpo-28131\n: Fix a regression in zipimport’s compile_source().  zipimport\nshould use the same optimization level as the interpreter.\nbpo-28126\n: Replace Py_MEMCPY with memcpy(). Visual Studio can properly\noptimize memcpy().\nbpo-28120\n: Fix dict.pop() for splitted dictionary when trying to remove a\n“pending key” (Not yet inserted in split-table). Patch by Xiang Zhang.\nbpo-26182\n: Raise DeprecationWarning when async and await keywords are used\nas variable/attribute/class/function name.\nLibrary\n¶\nbpo-27998\n: Fixed bytes path support in os.scandir() on Windows. Patch by\nEryk Sun.\nbpo-28317\n: The disassembler now decodes FORMAT_VALUE argument.\nbpo-26293\n: Fixed writing ZIP files that starts not from the start of the\nfile.  Offsets in ZIP file now are relative to the start of the archive in\nconforming to the specification.\nbpo-28380\n: unittest.mock Mock autospec functions now properly support\nassert_called, assert_not_called, and assert_called_once.\nbpo-27181\n: remove statistics.geometric_mean and defer until 3.7.\nbpo-28229\n: lzma module now supports pathlib.\nbpo-28321\n: Fixed writing non-BMP characters with binary format in\nplistlib.\nbpo-28225\n: bz2 module now supports pathlib.  Initial patch by Ethan\nFurman.\nbpo-28227\n: gzip now supports pathlib.  Patch by Ethan Furman.\nbpo-27358\n: Optimized merging var-keyword arguments and improved error\nmessage when passing a non-mapping as a var-keyword argument.\nbpo-28257\n: Improved error message when passing a non-iterable as a\nvar-positional argument.  Added opcode BUILD_TUPLE_UNPACK_WITH_CALL.\nbpo-28322\n: Fixed possible crashes when unpickle itertools objects from\nincorrect pickle data.  Based on patch by John Leitch.\nbpo-28228\n: imghdr now supports pathlib.\nbpo-28226\n: compileall now supports pathlib.\nbpo-28314\n: Fix function declaration (C flags) for the getiterator() method\nof xml.etree.ElementTree.Element.\nbpo-28148\n: Stop using localtime() and gmtime() in the time module.\nIntroduced platform independent _PyTime_localtime API that is similar to\nPOSIX localtime_r, but available on all platforms.  Patch by Ed Schouten.\nbpo-28253\n: Fixed calendar functions for extreme months: 0001-01 and\n9999-12. Methods itermonthdays() and itermonthdays2() are reimplemented so\nthat they don’t call itermonthdates() which can cause datetime.date\nunder/overflow.\nbpo-28275\n: Fixed possible use after free in the decompress() methods of\nthe LZMADecompressor and BZ2Decompressor classes. Original patch by John\nLeitch.\nbpo-27897\n: Fixed possible crash in sqlite3.Connection.create_collation()\nif pass invalid string-like object as a name.  Patch by Xiang Zhang.\nbpo-18844\n: random.choices() now has k as a keyword-only argument to\nimprove the readability of common cases and come into line with the\nsignature used in other languages.\nbpo-18893\n: Fix invalid exception handling in Lib/ctypes/macholib/dyld.py.\nPatch by Madison May.\nbpo-27611\n: Fixed support of default root window in the tkinter.tix module.\nAdded the master parameter in the DisplayStyle constructor.\nbpo-27348\n: In the traceback module, restore the formatting of exception\nmessages like “Exception: None”.  This fixes a regression introduced in\n3.5a2.\nbpo-25651\n: Allow false values to be used for msg parameter of subTest().\nbpo-27778\n: Fix a memory leak in os.getrandom() when the getrandom() is\ninterrupted by a signal and a signal handler raises a Python exception.\nbpo-28200\n: Fix memory leak on Windows in the os module (fix\npath_converter() function).\nbpo-25400\n: RobotFileParser now correctly returns default values for\ncrawl_delay and request_rate.  Initial patch by Peter Wirtz.\nbpo-27932\n: Prevent memory leak in win32_ver().\nFix UnboundLocalError in socket._sendfile_use_sendfile.\nbpo-28075\n: Check for ERROR_ACCESS_DENIED in Windows implementation of\nos.stat().  Patch by Eryk Sun.\nbpo-22493\n: Warning message emitted by using inline flags in the middle of\nregular expression now contains a (truncated) regex pattern. Patch by Tim\nGraham.\nbpo-25270\n: Prevent codecs.escape_encode() from raising SystemError when an\nempty bytestring is passed.\nbpo-28181\n: Get antigravity over HTTPS. Patch by Kaartic Sivaraam.\nbpo-25895\n: Enable WebSocket URL schemes in urllib.parse.urljoin. Patch by\nGergely Imreh and Markus Holtermann.\nbpo-28114\n: Fix a crash in parse_envlist() when env contains byte strings.\nPatch by Eryk Sun.\nbpo-27599\n: Fixed buffer overrun in binascii.b2a_qp() and\nbinascii.a2b_qp().\nbpo-27906\n: Fix socket accept exhaustion during high TCP traffic. Patch by\nKevin Conway.\nbpo-28174\n: Handle when SO_REUSEPORT isn’t properly supported. Patch by\nSeth Michael Larson.\nbpo-26654\n: Inspect functools.partial in asyncio.Handle.__repr__. Patch by\niceboy.\nbpo-26909\n: Fix slow pipes IO in asyncio. Patch by INADA Naoki.\nbpo-28176\n: Fix callbacks race in asyncio.SelectorLoop.sock_connect.\nbpo-27759\n: Fix selectors incorrectly retain invalid file descriptors.\nPatch by Mark Williams.\nbpo-28368\n: Refuse monitoring processes if the child watcher has no loop\nattached. Patch by Vincent Michel.\nbpo-28369\n: Raise RuntimeError when transport’s FD is used with add_reader,\nadd_writer, etc.\nbpo-28370\n: Speedup asyncio.StreamReader.readexactly. Patch by Коренберг\nМарк.\nbpo-28371\n: Deprecate passing asyncio.Handles to run_in_executor.\nbpo-28372\n: Fix asyncio to support formatting of non-python coroutines.\nbpo-28399\n: Remove UNIX socket from FS before binding. Patch by Коренберг\nМарк.\nbpo-27972\n: Prohibit Tasks to await on themselves.\nWindows\n¶\nbpo-28402\n: Adds signed catalog files for stdlib on Windows.\nbpo-28333\n: Enables Unicode for ps1/ps2 and input() prompts. (Patch by Eryk\nSun)\nbpo-28251\n: Improvements to help manuals on Windows.\nbpo-28110\n: launcher.msi has different product codes between 32-bit and\n64-bit\nbpo-28161\n: Opening CON for write access fails\nbpo-28162\n: WindowsConsoleIO readall() fails if first line starts with\nCtrl+Z\nbpo-28163\n: WindowsConsoleIO fileno() passes wrong flags to _open_osfhandle\nbpo-28164\n: _PyIO_get_console_type fails for various paths\nbpo-28137\n: Renames Windows path file to ._pth\nbpo-28138\n: Windows ._pth file should allow import site\nC API\n¶\nbpo-28426\n: Deprecated undocumented functions PyUnicode_AsEncodedObject(),\nPyUnicode_AsDecodedObject(), PyUnicode_AsDecodedUnicode() and\nPyUnicode_AsEncodedUnicode().\nBuild\n¶\nbpo-28258\n: Fixed build with Estonian locale (python-config and distclean\ntargets in Makefile).  Patch by Arfrever Frehtes Taifersar Arahesis.\nbpo-26661\n: setup.py now detects system libffi with multiarch wrapper.\nbpo-15819\n: Remove redundant include search directory option for building\noutside the source tree.\nTests\n¶\nbpo-28217\n: Adds _testconsole module to test console input.\nPython 3.6.0 beta 1\n¶\nRelease date: 2016-09-12\nCore and Builtins\n¶\nbpo-23722\n: The __class__ cell used by zero-argument super() is now\ninitialized from type.__new__ rather than __build_class__, so class\nmethods relying on that will now work correctly when called from metaclass\nmethods during class creation. Patch by Martin Teichmann.\nbpo-25221\n: Fix corrupted result from PyLong_FromLong(0) when Python is\ncompiled with NSMALLPOSINTS = 0.\nbpo-27080\n: Implement formatting support for\nPEP 515\n.  Initial patch by\nChris Angelico.\nbpo-27199\n: In tarfile, expose copyfileobj bufsize to improve throughput.\nPatch by Jason Fried.\nbpo-27948\n: In f-strings, only allow backslashes inside the braces (where\nthe expressions are).  This is a breaking change from the 3.6 alpha\nreleases, where backslashes are allowed anywhere in an f-string.  Also,\nrequire that expressions inside f-strings be enclosed within literal\nbraces, and not escapes like\nf'\\x7b\"hi\"\\x7d'\n.\nbpo-28046\n: Remove platform-specific directories from sys.path.\nbpo-28071\n: Add early-out for differencing from an empty set.\nbpo-25758\n: Prevents zipimport from unnecessarily encoding a filename\n(patch by Eryk Sun)\nbpo-25856\n: The __module__ attribute of extension classes and functions now\nis interned. This leads to more compact pickle data with protocol 4.\nbpo-27213\n: Rework CALL_FUNCTION* opcodes to produce shorter and more\nefficient bytecode. Patch by Demur Rumed, design by Serhiy Storchaka,\nreviewed by Serhiy Storchaka and Victor Stinner.\nbpo-26331\n: Implement tokenizing support for\nPEP 515\n. Patch by Georg\nBrandl.\nbpo-27999\n: Make “global after use” a SyntaxError, and ditto for nonlocal.\nPatch by Ivan Levkivskyi.\nbpo-28003\n: Implement\nPEP 525\n– Asynchronous Generators.\nbpo-27985\n: Implement\nPEP 526\n– Syntax for Variable Annotations. Patch\nby Ivan Levkivskyi.\nbpo-26058\n: Add a new private version to the builtin dict type, incremented\nat each dictionary creation and at each dictionary change. Implementation\nof the PEP 509.\nbpo-27364\n: A backslash-character pair that is not a valid escape sequence\nnow generates a DeprecationWarning.  Patch by Emanuel Barry.\nbpo-27350\n:\ndict\nimplementation is changed like PyPy. It is more\ncompact and preserves insertion order. (Concept developed by Raymond\nHettinger and patch by Inada Naoki.)\nbpo-27911\n: Remove unnecessary error checks in\nexec_builtin_or_dynamic()\n.\nbpo-27078\n: Added BUILD_STRING opcode.  Optimized f-strings evaluation.\nbpo-17884\n: Python now requires systems with inttypes.h and stdint.h\nbpo-27961\n: Require platforms to support\nlong\nlong\n. Python hasn’t\ncompiled without\nlong\nlong\nfor years, so this is basically a\nformality.\nbpo-27355\n: Removed support for Windows CE.  It was never finished, and\nWindows CE is no longer a relevant platform for Python.\nImplement\nPEP 523\n.\nbpo-27870\n: A left shift of zero by a large integer no longer attempts to\nallocate large amounts of memory.\nbpo-25402\n: In int-to-decimal-string conversion, improve the estimate of\nthe intermediate memory required, and remove an unnecessarily strict\noverflow check. Patch by Serhiy Storchaka.\nbpo-27214\n: In long_invert, be more careful about modifying object returned\nby long_add, and remove an unnecessary check for small longs. Thanks Oren\nMilman for analysis and patch.\nbpo-27506\n: Support passing the bytes/bytearray.translate() “delete”\nargument by keyword.\nbpo-27812\n: Properly clear out a generator’s frame’s backreference to the\ngenerator to prevent crashes in frame.clear().\nbpo-27811\n: Fix a crash when a coroutine that has not been awaited is\nfinalized with warnings-as-errors enabled.\nbpo-27587\n: Fix another issue found by PVS-Studio: Null pointer check after\nuse of ‘def’ in _PyState_AddModule(). Initial patch by Christian Heimes.\nbpo-27792\n: The modulo operation applied to\nbool\nand other\nint\nsubclasses now always returns an\nint\n. Previously the return type\ndepended on the input values. Patch by Xiang Zhang.\nbpo-26984\n: int() now always returns an instance of exact int.\nbpo-25604\n: Fix a minor bug in integer true division; this bug could\npotentially have caused off-by-one-ulp results on platforms with\nunreliable ldexp implementations.\nbpo-24254\n: Make class definition namespace ordered by default.\nbpo-27662\n: Fix an overflow check in\nList_New\n: the original code was\nchecking against\nPy_SIZE_MAX\ninstead of the correct upper bound of\nPy_SSIZE_T_MAX\n. Patch by Xiang Zhang.\nbpo-27782\n: Multi-phase extension module import now correctly allows the\nm_methods\nfield to be used to add module level functions to instances\nof non-module types returned from\nPy_create_mod\n. Patch by Xiang Zhang.\nbpo-27936\n: The round() function accepted a second None argument for some\ntypes but not for others.  Fixed the inconsistency by accepting None for\nall numeric types.\nbpo-27487\n: Warn if a submodule argument to “python -m” or\nrunpy.run_module() is found in sys.modules after parent packages are\nimported, but before the submodule is executed.\nbpo-27157\n: Make only type() itself accept the one-argument form. Patch by\nEryk Sun and Emanuel Barry.\nbpo-27558\n: Fix a SystemError in the implementation of “raise” statement.\nIn a brand new thread, raise a RuntimeError since there is no active\nexception to reraise. Patch written by Xiang Zhang.\nbpo-28008\n: Implement\nPEP 530\n– asynchronous comprehensions.\nbpo-27942\n: Fix memory leak in codeobject.c\nLibrary\n¶\nbpo-28732\n: Fix crash in os.spawnv() with no elements in args\nbpo-28485\n: Always raise ValueError for negative\ncompileall.compile_dir(workers=…) parameter, even when multithreading is\nunavailable.\nbpo-28037\n: Use sqlite3_get_autocommit() instead of setting\nConnection->inTransaction manually.\nbpo-25283\n: Attributes tm_gmtoff and tm_zone are now available on all\nplatforms in the return values of time.localtime() and time.gmtime().\nbpo-24454\n: Regular expression match object groups are now accessible using\n__getitem__. “mo[x]” is equivalent to “mo.group(x)”.\nbpo-10740\n: sqlite3 no longer implicitly commit an open transaction before\nDDL statements.\nbpo-17941\n: Add a\nmodule\nparameter to collections.namedtuple().\nbpo-22493\n: Inline flags now should be used only at the start of the\nregular expression. Deprecation warning is emitted if uses them in the\nmiddle of the regular expression.\nbpo-26885\n: xmlrpc now supports unmarshalling additional data types used by\nApache XML-RPC implementation for numerics and None.\nbpo-28070\n: Fixed parsing inline verbose flag in regular expressions.\nbpo-19500\n: Add client-side SSL session resumption to the ssl module.\nbpo-28022\n: Deprecate ssl-related arguments in favor of SSLContext. The\ndeprecation include manual creation of SSLSocket and certfile/keyfile (or\nsimilar) in ftplib, httplib, imaplib, smtplib, poplib and urllib.\nbpo-28043\n: SSLContext has improved default settings: OP_NO_SSLv2,\nOP_NO_SSLv3, OP_NO_COMPRESSION, OP_CIPHER_SERVER_PREFERENCE,\nOP_SINGLE_DH_USE, OP_SINGLE_ECDH_USE and HIGH ciphers without MD5.\nbpo-24693\n: Changed some RuntimeError’s in the zipfile module to more\nappropriate types. Improved some error messages and debugging output.\nbpo-17909\n:\njson.load\nand\njson.loads\nnow support binary input\nencoded as UTF-8, UTF-16 or UTF-32. Patch by Serhiy Storchaka.\nbpo-27137\n: the pure Python fallback implementation of\nfunctools.partial\nnow matches the behaviour of its accelerated C\ncounterpart for subclassing, pickling and text representation purposes.\nPatch by Emanuel Barry and Serhiy Storchaka.\nFix possible integer overflows and crashes in the mmap module with unusual\nusage patterns.\nbpo-1703178\n: Fix the ability to pass the –link-objects option to the\ndistutils build_ext command.\nbpo-28019\n: itertools.count() no longer rounds non-integer step in range\nbetween 1.0 and 2.0 to 1.\nbpo-18401\n: Pdb now supports the ‘readrc’ keyword argument to control\nwhether .pdbrc files should be read.  Patch by Martin Matusiak and Sam\nKimbrel.\nbpo-25969\n: Update the lib2to3 grammar to handle the unpacking\ngeneralizations added in 3.5.\nbpo-14977\n: mailcap now respects the order of the lines in the mailcap\nfiles (“first match”), as required by RFC 1542.  Patch by Michael Lazar.\nbpo-28082\n: Convert re flag constants to IntFlag.\nbpo-28025\n: Convert all ssl module constants to IntEnum and IntFlags.\nSSLContext properties now return flags and enums.\nbpo-23591\n: Add Flag, IntFlag, and auto() to enum module.\nbpo-433028\n: Added support of modifier spans in regular expressions.\nbpo-24594\n: Validates persist parameter when opening MSI database\nbpo-17582\n: xml.etree.ElementTree nows preserves whitespaces in attributes\n(Patch by Duane Griffin.  Reviewed and approved by Stefan Behnel.)\nbpo-28047\n: Fixed calculation of line length used for the base64 CTE in the\nnew email policies.\nbpo-27576\n: Fix call order in OrderedDict.__init__().\nemail.generator.DecodedGenerator now supports the policy keyword.\nbpo-28027\n: Remove undocumented modules from\nLib/plat-*\n: IN, CDROM,\nDLFCN, TYPES, CDIO, and STROPTS.\nbpo-27445\n: Don’t pass str(_charset) to MIMEText.set_payload(). Patch by\nClaude Paroz.\nbpo-24277\n: The new email API is no longer provisional, and the docs have\nbeen reorganized and rewritten to emphasize the new API.\nbpo-22450\n: urllib now includes an\nAccept:\n*/*\nheader among the default\nheaders. This makes the results of REST API requests more consistent and\npredictable especially when proxy servers are involved.\nlib2to3.pgen3.driver.load_grammar() now creates a stable cache file\nbetween runs given the same Grammar.txt input regardless of the hash\nrandomization setting.\nbpo-28005\n: Allow ImportErrors in encoding implementation to propagate.\nbpo-26667\n: Support path-like objects in importlib.util.\nbpo-27570\n: Avoid zero-length memcpy() etc calls with null source pointers\nin the “ctypes” and “array” modules.\nbpo-22233\n: Break email header lines\nonly\non the RFC specified CR and LF\ncharacters, not on arbitrary unicode line breaks.  This also fixes a bug\nin HTTP header parsing.\nbpo-27331\n: The email.mime classes now all accept an optional policy\nkeyword.\nbpo-27988\n: Fix email iter_attachments incorrect mutation of payload list.\nbpo-16113\n: Add SHA-3 and SHAKE support to hashlib module.\nEliminate a tautological-pointer-compare warning in _scproxy.c.\nbpo-27776\n: The\nos.urandom()\nfunction does now block on Linux 3.17\nand newer until the system urandom entropy pool is initialized to increase\nthe security. This change is part of the\nPEP 524\n.\nbpo-27778\n: Expose the Linux\ngetrandom()\nsyscall as a new\nos.getrandom()\nfunction. This change is part of the\nPEP 524\n.\nbpo-27691\n: Fix ssl module’s parsing of GEN_RID subject alternative name\nfields in X.509 certs.\nbpo-18844\n: Add random.choices().\nbpo-25761\n: Improved error reporting about truncated pickle data in C\nimplementation of unpickler.  UnpicklingError is now raised instead of\nAttributeError and ValueError in some cases.\nbpo-26798\n: Add BLAKE2 (blake2b and blake2s) to hashlib.\nbpo-26032\n: Optimized globbing in pathlib by using os.scandir(); it is now\nabout 1.5–4 times faster.\nbpo-25596\n: Optimized glob() and iglob() functions in the glob module; they\nare now about 3–6 times faster.\nbpo-27928\n: Add scrypt (password-based key derivation function) to hashlib\nmodule (requires OpenSSL 1.1.0).\nbpo-27850\n: Remove 3DES from ssl module’s default cipher list to counter\nmeasure sweet32 attack (\nCVE 2016-2183\n).\nbpo-27766\n: Add ChaCha20 Poly1305 to ssl module’s default cipher list.\n(Required OpenSSL 1.1.0 or LibreSSL).\nbpo-25387\n: Check return value of winsound.MessageBeep.\nbpo-27866\n: Add SSLContext.get_ciphers() method to get a list of all\nenabled ciphers.\nbpo-27744\n: Add AF_ALG (Linux Kernel crypto) to socket module.\nbpo-26470\n: Port ssl and hashlib module to OpenSSL 1.1.0.\nbpo-11620\n: Fix support for SND_MEMORY in winsound.PlaySound.  Based on a\npatch by Tim Lesher.\nbpo-11734\n: Add support for IEEE 754 half-precision floats to the struct\nmodule. Based on a patch by Eli Stevens.\nbpo-27919\n: Deprecated\nextra_path\ndistribution option in distutils\npackaging.\nbpo-23229\n: Add new\ncmath\nconstants:\ncmath.inf\nand\ncmath.nan\nto\nmatch\nmath.inf\nand\nmath.nan\n, and also\ncmath.infj\nand\ncmath.nanj\nto match the format used by complex repr.\nbpo-27842\n: The csv.DictReader now returns rows of type OrderedDict.\n(Contributed by Steve Holden.)\nRemove support for passing a file descriptor to os.access. It never worked\nbut previously didn’t raise.\nbpo-12885\n: Fix error when distutils encounters symlink.\nbpo-27881\n: Fixed possible bugs when setting\nsqlite3.Connection.isolation_level. Based on patch by Xiang Zhang.\nbpo-27861\n: Fixed a crash in sqlite3.Connection.cursor() when a factory\ncreates not a cursor.  Patch by Xiang Zhang.\nbpo-19884\n: Avoid spurious output on OS X with Gnu Readline.\nbpo-27706\n: Restore deterministic behavior of random.Random().seed() for\nstring seeds using seeding version 1.  Allows sequences of calls to\nrandom() to exactly match those obtained in Python 2. Patch by Nofar\nSchnider.\nbpo-10513\n: Fix a regression in Connection.commit().  Statements should not\nbe reset after a commit.\nbpo-12319\n: Chunked transfer encoding support added to\nhttp.client.HTTPConnection requests.  The\nurllib.request.AbstractHTTPHandler class does not enforce a Content-Length\nheader any more.  If a HTTP request has a file or iterable body, but no\nContent-Length header, the library now falls back to use chunked\ntransfer-encoding.\nA new version of typing.py from\nhttps://github.com/python/typing\n: -\nCollection (only for 3.6) (\nbpo-27598\n) - Add FrozenSet to __all__\n(upstream #261) - fix crash in _get_type_vars() (upstream #259) - Remove\nthe dict constraint in ForwardRef._eval_type (upstream #252)\nbpo-27832\n: Make\n_normalize\nparameter to\nFraction\nconstructor\nkeyword-only, so that\nFraction(2,\n3,\n4)\nnow raises\nTypeError\n.\nbpo-27539\n: Fix unnormalised\nFraction.__pow__\nresult in the case of\nnegative exponent and negative base.\nbpo-21718\n: cursor.description is now available for queries using CTEs.\nbpo-27819\n: In distutils sdists, simply produce the “gztar” (gzipped tar\nformat) distributions on all platforms unless “formats” is supplied.\nbpo-2466\n: posixpath.ismount now correctly recognizes mount points which\nthe user does not have permission to access.\nbpo-9998\n: On Linux, ctypes.util.find_library now looks in LD_LIBRARY_PATH\nfor shared libraries.\nbpo-27573\n: exit message for code.interact is now configurable.\nbpo-27930\n: Improved behaviour of logging.handlers.QueueListener. Thanks to\nPaulo Andrade and Petr Viktorin for the analysis and patch.\nbpo-6766\n: Distributed reference counting added to multiprocessing to\nsupport nesting of shared values / proxy objects.\nbpo-21201\n: Improves readability of multiprocessing error message.  Thanks\nto Wojciech Walczak for patch.\nasyncio: Add set_protocol / get_protocol to Transports.\nbpo-27456\n: asyncio: Set TCP_NODELAY by default.\nIDLE\n¶\nbpo-15308\n: Add ‘interrupt execution’ (^C) to Shell menu. Patch by Roger\nSerwy, updated by Bayard Randel.\nbpo-27922\n: Stop IDLE tests from ‘flashing’ gui widgets on the screen.\nbpo-27891\n: Consistently group and sort imports within idlelib modules.\nbpo-17642\n: add larger font sizes for classroom projection.\nAdd version to title of IDLE help window.\nbpo-25564\n: In section on IDLE – console differences, mention that using\nexec means that __builtins__ is defined for each statement.\nbpo-27821\n: Fix 3.6.0a3 regression that prevented custom key sets from\nbeing selected when no custom theme was defined.\nC API\n¶\nbpo-26900\n: Excluded underscored names and other private API from limited\nAPI.\nbpo-26027\n: Add support for path-like objects in PyUnicode_FSConverter() &\nPyUnicode_FSDecoder().\nTests\n¶\nbpo-27427\n: Additional tests for the math module. Patch by Francisco Couzo.\nbpo-27953\n: Skip math and cmath tests that fail on OS X 10.4 due to a poor\nlibm implementation of tan.\nbpo-26040\n: Improve test_math and test_cmath coverage and rigour. Patch by\nJeff Allen.\nbpo-27787\n: Call gc.collect() before checking each test for “dangling\nthreads”, since the dangling threads are weak references.\nBuild\n¶\nbpo-27566\n: Fix clean target in freeze makefile (patch by Lisa Roach)\nbpo-27705\n: Update message in validate_ucrtbase.py\nbpo-27976\n: Deprecate building _ctypes with the bundled copy of libffi on\nnon-OSX UNIX platforms.\nbpo-27983\n: Cause lack of llvm-profdata tool when using clang as required\nfor PGO linking to be a configure time error rather than make time when\n--with-optimizations\nis enabled.  Also improve our ability to find the\nllvm-profdata tool on MacOS and some Linuxes.\nbpo-21590\n: Support for DTrace and SystemTap probes.\nbpo-26307\n: The profile-opt build now applies PGO to the built-in modules.\nbpo-26359\n: Add the –with-optimizations flag to turn on LTO and PGO build\nsupport when available.\nbpo-27917\n: Set platform triplets for Android builds.\nbpo-25825\n: Update references to the $(LIBPL) installation path on AIX.\nThis path was changed in 3.2a4.\nUpdate OS X installer to use SQLite 3.14.1 and XZ 5.2.2.\nbpo-21122\n: Fix LTO builds on OS X.\nbpo-17128\n: Build OS X installer with a private copy of OpenSSL. Also\nprovide a sample Install Certificates command script to install a set of\nroot certificates from the third-party certifi module.\nTools/Demos\n¶\nbpo-27952\n: Get Tools/scripts/fixcid.py working with Python 3 and the\ncurrent “re” module, avoid invalid Python backslash escapes, and fix a bug\nparsing escaped C quote signs.\nWindows\n¶\nbpo-28065\n: Update xz dependency to 5.2.2 and build it from source.\nbpo-25144\n: Ensures TargetDir is set before continuing with custom install.\nbpo-1602\n: Windows console doesn’t input or print Unicode (PEP 528)\nbpo-27781\n: Change file system encoding on Windows to UTF-8 (PEP 529)\nbpo-27731\n: Opt-out of MAX_PATH on Windows 10\nbpo-6135\n: Adds encoding and errors parameters to subprocess.\nbpo-27959\n: Adds oem encoding, alias ansi to mbcs, move aliasmbcs to codec\nlookup.\nbpo-27982\n: The functions of the winsound module now accept keyword\narguments.\nbpo-20366\n: Build full text search support into SQLite on Windows.\nbpo-27756\n: Adds new icons for Python files and processes on Windows.\nDesigns by Cherry Wang.\nbpo-27883\n: Update sqlite to 3.14.1.0 on Windows.\nPython 3.6.0 alpha 4\n¶\nRelease date: 2016-08-15\nCore and Builtins\n¶\nbpo-27704\n: Optimized creating bytes and bytearray from byte-like objects\nand iterables. Speed up to 3 times for short objects.  Original patch by\nNaoki Inada.\nbpo-26823\n: Large sections of repeated lines in tracebacks are now\nabbreviated as “[Previous line repeated {count} more times]” by the\nbuiltin traceback rendering. Patch by Emanuel Barry.\nbpo-27574\n: Decreased an overhead of parsing keyword arguments in functions\nimplemented with using Argument Clinic.\nbpo-22557\n: Now importing already imported modules is up to 2.5 times\nfaster.\nbpo-17596\n: Include <wincrypt.h> to help with Min GW building.\nbpo-17599\n: On Windows, rename the privately defined REPARSE_DATA_BUFFER\nstructure to avoid conflicting with the definition from Min GW.\nbpo-27507\n: Add integer overflow check in bytearray.extend().  Patch by\nXiang Zhang.\nbpo-27581\n: Don’t rely on wrapping for overflow check in\nPySequence_Tuple().  Patch by Xiang Zhang.\nbpo-1621\n: Avoid signed integer overflow in list and tuple operations.\nPatch by Xiang Zhang.\nbpo-27419\n: Standard __import__() no longer look up “__import__” in globals\nor builtins for importing submodules or “from import”.  Fixed a crash if\nraise a warning about unabling to resolve package from __spec__ or\n__package__.\nbpo-27083\n: Respect the PYTHONCASEOK environment variable under Windows.\nbpo-27514\n: Make having too many statically nested blocks a SyntaxError\ninstead of SystemError.\nbpo-27366\n: Implemented\nPEP 487\n(Simpler customization of class\ncreation). Upon subclassing, the __init_subclass__ classmethod is called\non the base class. Descriptors are initialized with __set_name__ after\nclass creation.\nLibrary\n¶\nbpo-26027\n: Add\nPEP 519\n/__fspath__() support to the os and os.path\nmodules. Includes code from Jelle Zijlstra. (See also:\nbpo-27524\n)\nbpo-27598\n: Add Collections to collections.abc. Patch by Ivan Levkivskyi,\ndocs by Neil Girdhar.\nbpo-25958\n: Support “anti-registration” of special methods from various\nABCs, like __hash__, __iter__ or __len__.  All these (and several more)\ncan be set to None in an implementation class and the behavior will be as\nif the method is not defined at all. (Previously, this mechanism existed\nonly for __hash__, to make mutable classes unhashable.)  Code contributed\nby Andrew Barnert and Ivan Levkivskyi.\nbpo-16764\n: Support keyword arguments to zlib.decompress().  Patch by Xiang\nZhang.\nbpo-27736\n: Prevent segfault after interpreter re-initialization due to ref\ncount problem introduced in code for\nbpo-27038\nin 3.6.0a3. Patch by\nXiang Zhang.\nbpo-25628\n: The\nverbose\nand\nrename\nparameters for\ncollections.namedtuple are now keyword-only.\nbpo-12345\n: Add mathematical constant tau to math and cmath. See also\nPEP 628\n.\nbpo-26823\n: traceback.StackSummary.format now abbreviates large sections of\nrepeated lines as “[Previous line repeated {count} more times]” (this\nchange then further affects other traceback display operations in the\nmodule). Patch by Emanuel Barry.\nbpo-27664\n: Add to concurrent.futures.thread.ThreadPoolExecutor() the\nability to specify a thread name prefix.\nbpo-27181\n: Add geometric_mean and harmonic_mean to statistics module.\nbpo-27573\n: code.interact now prints an message when exiting.\nbpo-6422\n: Add autorange method to timeit.Timer objects.\nbpo-27773\n: Correct some memory management errors server_hostname in\n_ssl.wrap_socket().\nbpo-26750\n: unittest.mock.create_autospec() now works properly for\nsubclasses of property() and other data descriptors.  Removes the never\npublicly used, never documented unittest.mock.DescriptorTypes tuple.\nbpo-26754\n: Undocumented support of general bytes-like objects as path in\ncompile() and similar functions is now deprecated.\nbpo-26800\n: Undocumented support of general bytes-like objects as paths in\nos functions is now deprecated.\nbpo-26981\n: Add _order_ compatibility shim to enum.Enum for Python 2/3 code\nbases.\nbpo-27661\n: Added tzinfo keyword argument to datetime.combine.\nIn the curses module, raise an error if window.getstr() or window.instr()\nis passed a negative value.\nbpo-27783\n: Fix possible usage of uninitialized memory in\noperator.methodcaller.\nbpo-27774\n: Fix possible Py_DECREF on unowned object in _sre.\nbpo-27760\n: Fix possible integer overflow in binascii.b2a_qp.\nbpo-27758\n: Fix possible integer overflow in the _csv module for large\nrecord lengths.\nbpo-27568\n: Prevent HTTPoxy attack (\nCVE 2016-1000110\n). Ignore the\nHTTP_PROXY variable when REQUEST_METHOD environment is set, which\nindicates that the script is in CGI mode.\nbpo-7063\n: Remove dead code from the “array” module’s slice handling. Patch\nby Chuck.\nbpo-27656\n: Do not assume sched.h defines any SCHED_* constants.\nbpo-27130\n: In the “zlib” module, fix handling of large buffers (typically\n4 GiB) when compressing and decompressing.  Previously, inputs were\nlimited to 4 GiB, and compression and decompression operations did not\nproperly handle results of 4 GiB.\nbpo-24773\n: Implemented\nPEP 495\n(Local Time Disambiguation).\nExpose the EPOLLEXCLUSIVE constant (when it is defined) in the select\nmodule.\nbpo-27567\n: Expose the EPOLLRDHUP and POLLRDHUP constants in the select\nmodule.\nbpo-1621\n: Avoid signed int negation overflow in the “audioop” module.\nbpo-27533\n: Release GIL in nt._isdir\nbpo-17711\n: Fixed unpickling by the persistent ID with protocol 0. Original\npatch by Alexandre Vassalotti.\nbpo-27522\n: Avoid an unintentional reference cycle in email.feedparser.\nbpo-27512\n: Fix a segfault when os.fspath() called an __fspath__() method\nthat raised an exception. Patch by Xiang Zhang.\nIDLE\n¶\nbpo-27714\n: text_textview and test_autocomplete now pass when re-run in the\nsame process.  This occurs when test_idle fails when run with the -w\noption but without -jn.  Fix warning from test_config.\nbpo-27621\n: Put query response validation error messages in the query box\nitself instead of in a separate messagebox.  Redo tests to match. Add Mac\nOSX refinements. Original patch by Mark Roseman.\nbpo-27620\n: Escape key now closes Query box as cancelled.\nbpo-27609\n: IDLE: tab after initial whitespace should tab, not\nautocomplete. This fixes problem with writing docstrings at least twice\nindented.\nbpo-27609\n: Explicitly return None when there are also non-None returns. In\na few cases, reverse a condition and eliminate a return.\nbpo-25507\n: IDLE no longer runs buggy code because of its tkinter imports.\nUsers must include the same imports required to run directly in Python.\nbpo-27173\n: Add ‘IDLE Modern Unix’ to the built-in key sets. Make the\ndefault key set depend on the platform. Add tests for the changes to the\nconfig module.\nbpo-27452\n: add line counter and crc to IDLE configHandler test dump.\nTests\n¶\nbpo-25805\n: Skip a test in test_pkgutil as needed that doesn’t work when\n__name__\n==\n__main__\n. Patch by SilentGhost.\nbpo-27472\n: Add test.support.unix_shell as the path to the default shell.\nbpo-27369\n: In test_pyexpat, avoid testing an error message detail that\nchanged in Expat 2.2.0.\nbpo-27594\n: Prevent assertion error when running test_ast with coverage\nenabled: ensure code object has a valid first line number. Patch suggested\nby Ivan Levkivskyi.\nWindows\n¶\nbpo-27647\n: Update bundled Tcl/Tk to 8.6.6.\nbpo-27610\n: Adds\nPEP 514\nmetadata to Windows installer\nbpo-27469\n: Adds a shell extension to the launcher so that drag and drop\nworks correctly.\nbpo-27309\n: Enables proper Windows styles in python[w].exe manifest.\nBuild\n¶\nbpo-27713\n: Suppress spurious build warnings when updating importlib’s\nbootstrap files. Patch by Xiang Zhang\nbpo-25825\n: Correct the references to Modules/python.exp, which is required\non AIX.  The references were accidentally changed in 3.5.0a1.\nbpo-27453\n: CPP invocation in configure must use CPPFLAGS. Patch by Chi\nHsuan Yen.\nbpo-27641\n: The configure script now inserts comments into the makefile to\nprevent the pgen and _freeze_importlib executables from being\ncross-compiled.\nbpo-26662\n: Set PYTHON_FOR_GEN in configure as the Python program to be\nused for file generation during the build.\nbpo-10910\n: Avoid C++ compilation errors on FreeBSD and OS X. Also update\nFreedBSD version checks for the original ctype UTF-8 workaround.\nPython 3.6.0 alpha 3\n¶\nRelease date: 2016-07-11\nSecurity\n¶\nbpo-27278\n: Fix os.urandom() implementation using getrandom() on Linux.\nTruncate size to INT_MAX and loop until we collected enough random bytes,\ninstead of casting a directly Py_ssize_t to int.\nbpo-22636\n: Avoid shell injection problems with ctypes.util.find_library().\nCore and Builtins\n¶\nbpo-27473\n: Fixed possible integer overflow in bytes and bytearray\nconcatenations. Patch by Xiang Zhang.\nbpo-23034\n: The output of a special Python build with defined COUNT_ALLOCS,\nSHOW_ALLOC_COUNT or SHOW_TRACK_COUNT macros is now off by  default.  It\ncan be re-enabled using the “-X showalloccount” option.  It now outputs to\nstderr instead of stdout.\nbpo-27443\n: __length_hint__() of bytearray iterators no longer return a\nnegative integer for a resized bytearray.\nbpo-27007\n: The fromhex() class methods of bytes and bytearray subclasses\nnow return an instance of corresponding subclass.\nLibrary\n¶\nbpo-26844\n: Fix error message for imp.find_module() to refer to ‘path’\ninstead of ‘name’. Patch by Lev Maximov.\nbpo-23804\n: Fix SSL zero-length recv() calls to not block and not raise an\nerror about unclean EOF.\nbpo-27466\n: Change time format returned by http.cookie.time2netscape,\nconfirming the netscape cookie format and making it consistent with\ndocumentation.\nbpo-21708\n: Deprecated dbm.dumb behavior that differs from common dbm\nbehavior: creating a database in ‘r’ and ‘w’ modes and modifying a\ndatabase in ‘r’ mode.\nbpo-26721\n: Change the socketserver.StreamRequestHandler.wfile attribute to\nimplement BufferedIOBase. In particular, the write() method no longer does\npartial writes.\nbpo-22115\n: Added methods trace_add, trace_remove and trace_info in the\ntkinter.Variable class.  They replace old methods trace_variable, trace,\ntrace_vdelete and trace_vinfo that use obsolete Tcl commands and might not\nwork in future versions of Tcl.  Fixed old tracing methods:\ntrace_vdelete() with wrong mode no longer break tracing, trace_vinfo() now\nalways returns a list of pairs of strings, tracing in the “u” mode now\nworks.\nbpo-26243\n: Only the level argument to zlib.compress() is keyword argument\nnow.  The first argument is positional-only.\nbpo-27038\n: Expose the DirEntry type as os.DirEntry. Code patch by Jelle\nZijlstra.\nbpo-27186\n: Update os.fspath()/PyOS_FSPath() to check the return value of\n__fspath__() to be either str or bytes.\nbpo-18726\n: All optional parameters of the dump(), dumps(), load() and\nloads() functions and JSONEncoder and JSONDecoder class constructors in\nthe json module are now keyword-only.\nbpo-27319\n: Methods selection_set(), selection_add(), selection_remove()\nand selection_toggle() of ttk.TreeView now allow passing multiple items as\nmultiple arguments instead of passing them as a tuple.  Deprecated\nundocumented ability of calling the selection() method with arguments.\nbpo-27079\n: Fixed curses.ascii functions isblank(), iscntrl() and\nispunct().\nbpo-27294\n: Numerical state in the repr for Tkinter event objects is now\nrepresented as a combination of known flags.\nbpo-27177\n: Match objects in the re module now support index-like objects\nas group indices.  Based on patches by Jeroen Demeyer and Xiang Zhang.\nbpo-26754\n: Some functions (compile() etc) accepted a filename argument\nencoded as an iterable of integers. Now only strings and byte-like objects\nare accepted.\nbpo-26536\n: socket.ioctl now supports SIO_LOOPBACK_FAST_PATH. Patch by\nDaniel Stokes.\nbpo-27048\n: Prevents distutils failing on Windows when environment\nvariables contain non-ASCII characters\nbpo-27330\n: Fixed possible leaks in the ctypes module.\nbpo-27238\n: Got rid of bare excepts in the turtle module.  Original patch\nby Jelle Zijlstra.\nbpo-27122\n: When an exception is raised within the context being managed by\na contextlib.ExitStack() and one of the exit stack generators catches and\nraises it in a chain, do not re-raise the original exception when exiting,\nlet the new chained one through.  This avoids the\nPEP 479\nbug described\nin issue25782.\nbpo-16864\n: sqlite3.Cursor.lastrowid now supports REPLACE statement.\nInitial patch by Alex LordThorsen.\nbpo-26386\n: Fixed ttk.TreeView selection operations with item id’s\ncontaining spaces.\nbpo-8637\n: Honor a pager set by the env var MANPAGER (in preference to one\nset by the env var PAGER).\nbpo-16182\n: Fix various functions in the “readline” module to use the\nlocale encoding, and fix get_begidx() and get_endidx() to return code\npoint indexes.\nbpo-27392\n: Add loop.connect_accepted_socket(). Patch by Jim Fulton.\nIDLE\n¶\nbpo-27477\n: IDLE search dialogs now use ttk widgets.\nbpo-27173\n: Add ‘IDLE Modern Unix’ to the built-in key sets. Make the\ndefault key set depend on the platform. Add tests for the changes to the\nconfig module.\nbpo-27452\n: make command line “idle-test> python test_help.py” work.\n__file__ is relative when python is started in the file’s directory.\nbpo-27452\n: add line counter and crc to IDLE configHandler test dump.\nbpo-27380\n: IDLE: add query.py with base Query dialog and ttk widgets.\nModule had subclasses SectionName, ModuleName, and HelpSource, which are\nused to get information from users by configdialog and file =>Load Module.\nEach subclass has itw own validity checks.  Using ModuleName allows users\nto edit bad module names instead of starting over. Add tests and delete\nthe two files combined into the new one.\nbpo-27372\n: Test_idle no longer changes the locale.\nbpo-27365\n: Allow non-ascii chars in IDLE NEWS.txt, for contributor names.\nbpo-27245\n: IDLE: Cleanly delete custom themes and key bindings.\nPreviously, when IDLE was started from a console or by import, a cascade\nof warnings was emitted. Patch by Serhiy Storchaka.\nbpo-24137\n: Run IDLE, test_idle, and htest with tkinter default root\ndisabled.  Fix code and tests that fail with this restriction.  Fix htests\nto not create a second and redundant root and mainloop.\nbpo-27310\n: Fix IDLE.app failure to launch on OS X due to vestigial import.\nC API\n¶\nbpo-26754\n: PyUnicode_FSDecoder() accepted a filename argument encoded as\nan iterable of integers. Now only strings and byte-like objects are\naccepted.\nBuild\n¶\nbpo-28066\n: Fix the logic that searches build directories for generated\ninclude files when building outside the source tree.\nbpo-27442\n: Expose the Android API level that python was built against, in\nsysconfig.get_config_vars() as ‘ANDROID_API_LEVEL’.\nbpo-27434\n: The interpreter that runs the cross-build, found in PATH, must\nnow be of the same feature version (e.g. 3.6) as the source being built.\nbpo-26930\n: Update Windows builds to use OpenSSL 1.0.2h.\nbpo-23968\n: Rename the platform directory from plat-$(MACHDEP) to\nplat-$(PLATFORM_TRIPLET). Rename the config directory (LIBPL) from\nconfig-$(LDVERSION) to config-$(LDVERSION)-$(PLATFORM_TRIPLET). Install\nthe platform specific _sysconfigdata module into the platform directory\nand rename it to include the ABIFLAGS.\nDon’t use largefile support for GNU/Hurd.\nTools/Demos\n¶\nbpo-27332\n: Fixed the type of the first argument of module-level functions\ngenerated by Argument Clinic.  Patch by Petr Viktorin.\nbpo-27418\n: Fixed Tools/importbench/importbench.py.\nDocumentation\n¶\nbpo-19489\n: Moved the search box from the sidebar to the header and footer\nof each page. Patch by Ammar Askar.\nbpo-27285\n: Update documentation to reflect the deprecation of\npyvenv\nand normalize on the term “virtual environment”. Patch by Steve Piercy.\nTests\n¶\nbpo-27027\n: Added test.support.is_android that is True when this is an\nAndroid build.\nPython 3.6.0 alpha 2\n¶\nRelease date: 2016-06-13\nSecurity\n¶\nbpo-26556\n: Update expat to 2.1.1, fixes\nCVE 2015-1283\n.\nFix TLS stripping vulnerability in smtplib,\nCVE 2016-0772\n. Reported by\nTeam Oststrom.\nbpo-26839\n: On Linux,\nos.urandom()\nnow calls\ngetrandom()\nwith\nGRND_NONBLOCK\nto fall back on reading\n/dev/urandom\nif the urandom\nentropy pool is not initialized yet. Patch written by Colm Buckley.\nCore and Builtins\n¶\nbpo-27095\n: Simplified MAKE_FUNCTION and removed MAKE_CLOSURE opcodes.\nPatch by Demur Rumed.\nbpo-27190\n: Raise NotSupportedError if sqlite3 is older than 3.3.1. Patch\nby Dave Sawyer.\nbpo-27286\n: Fixed compiling BUILD_MAP_UNPACK_WITH_CALL opcode.  Calling\nfunction with generalized unpacking (PEP 448) and conflicting keyword\nnames could cause undefined behavior.\nbpo-27140\n: Added BUILD_CONST_KEY_MAP opcode.\nbpo-27186\n: Add support for os.PathLike objects to open() (part of\nPEP 519\n).\nbpo-27066\n: Fixed SystemError if a custom opener (for open()) returns a\nnegative number without setting an exception.\nbpo-26983\n: float() now always return an instance of exact float. The\ndeprecation warning is emitted if __float__ returns an instance of a\nstrict subclass of float.  In a future versions of Python this can be an\nerror.\nbpo-27097\n: Python interpreter is now about 7% faster due to optimized\ninstruction decoding.  Based on patch by Demur Rumed.\nbpo-26647\n: Python interpreter now uses 16-bit wordcode instead of\nbytecode. Patch by Demur Rumed.\nbpo-23275\n: Allow assigning to an empty target list in round brackets: () =\niterable.\nbpo-27243\n: Update the __aiter__ protocol: instead of returning an\nawaitable that resolves to an asynchronous iterator, the asynchronous\niterator should be returned directly.  Doing the former will trigger a\nPendingDeprecationWarning.\nLibrary\n¶\nComment out socket (SO_REUSEPORT) and posix (O_SHLOCK, O_EXLOCK) constants\nexposed on the API which are not implemented on GNU/Hurd. They would not\nwork at runtime anyway.\nbpo-27025\n: Generated names for Tkinter widgets are now more meaningful and\nrecognizable.\nbpo-25455\n: Fixed crashes in repr of recursive ElementTree.Element and\nfunctools.partial objects.\nbpo-27294\n: Improved repr for Tkinter event objects.\nbpo-20508\n: Improve exception message of IPv{4,6}Network.__getitem__. Patch\nby Gareth Rees.\nbpo-21386\n: Implement missing IPv4Address.is_global property.  It was\ndocumented since 07a5610bae9d.  Initial patch by Roger Luethi.\nbpo-27029\n: Removed deprecated support of universal newlines mode from\nZipFile.open().\nbpo-27030\n: Unknown escapes consisting of\n'\\'\nand an ASCII letter in\nregular expressions now are errors.  The re.LOCALE flag now can be used\nonly with bytes patterns.\nbpo-27186\n: Add os.PathLike support to DirEntry (part of\nPEP 519\n).\nInitial patch by Jelle Zijlstra.\nbpo-20900\n: distutils register command now decodes HTTP responses\ncorrectly.  Initial patch by ingrid.\nbpo-27186\n: Add os.PathLike support to pathlib, removing its provisional\nstatus (part of PEP 519). Initial patch by Dusty Phillips.\nbpo-27186\n: Add support for os.PathLike objects to os.fsencode() and\nos.fsdecode() (part of\nPEP 519\n).\nbpo-27186\n: Introduce os.PathLike and os.fspath() (part of\nPEP 519\n).\nA new version of typing.py provides several new classes and features:\n@overload outside stubs, Reversible, DefaultDict, Text, ContextManager,\nType[], NewType(), TYPE_CHECKING, and numerous bug fixes (note that some\nof the new features are not yet implemented in mypy or other static\nanalyzers). Also classes for\nPEP 492\n(Awaitable, AsyncIterable,\nAsyncIterator) have been added (in fact they made it into 3.5.1 but were\nnever mentioned).\nbpo-25738\n: Stop http.server.BaseHTTPRequestHandler.send_error() from\nsending a message body for 205 Reset Content.  Also, don’t send Content\nheader fields in responses that don’t have a body.  Patch by Susumu\nKoshiba.\nbpo-21313\n: Fix the “platform” module to tolerate when sys.version contains\ntruncated build information.\nbpo-23883\n: Added missing APIs to __all__ to match the documented APIs for\nthe following modules: cgi, mailbox, mimetypes, plistlib and smtpd.\nPatches by Jacek Kołodziej.\nbpo-27164\n: In the zlib module, allow decompressing raw Deflate streams\nwith a predefined zdict.  Based on patch by Xiang Zhang.\nbpo-24291\n: Fix wsgiref.simple_server.WSGIRequestHandler to completely\nwrite data to the client.  Previously it could do partial writes and\ntruncate data.  Also, wsgiref.handler.ServerHandler can now handle stdout\ndoing partial writes, but this is deprecated.\nbpo-21272\n: Use _sysconfigdata.py to initialize distutils.sysconfig.\nbpo-19611\n:\ninspect\nnow reports the implicit\n.0\nparameters\ngenerated by the compiler for comprehension and generator expression\nscopes as if they were positional-only parameters called\nimplicit0\n.\nPatch by Jelle Zijlstra.\nbpo-26809\n: Add\n__all__\nto\nstring\n.  Patch by Emanuel Barry.\nbpo-26373\n: subprocess.Popen.communicate now correctly ignores\nBrokenPipeError when the child process dies before .communicate() is\ncalled in more/all circumstances.\nsignal, socket, and ssl module IntEnum constant name lookups now return a\nconsistent name for values having multiple names.  Ex: signal.Signals(6)\nnow refers to itself as signal.SIGALRM rather than flipping between that\nand signal.SIGIOT based on the interpreter’s hash randomization seed.\nbpo-27167\n: Clarify the subprocess.CalledProcessError error message text\nwhen the child process died due to a signal.\nbpo-25931\n: Don’t define socketserver.Forking* names on platforms such as\nWindows that do not support os.fork().\nbpo-21776\n: distutils.upload now correctly handles HTTPError. Initial patch\nby Claudiu Popa.\nbpo-26526\n: Replace custom parse tree validation in the parser module with\na simple DFA validator.\nbpo-27114\n: Fix SSLContext._load_windows_store_certs fails with\nPermissionError\nbpo-18383\n: Avoid creating duplicate filters when using filterwarnings and\nsimplefilter. Based on patch by Alex Shkop.\nbpo-23026\n: winreg.QueryValueEx() now return an integer for REG_QWORD type.\nbpo-26741\n: subprocess.Popen destructor now emits a ResourceWarning warning\nif the child process is still running.\nbpo-27056\n: Optimize pickle.load() and pickle.loads(), up to 10% faster to\ndeserialize a lot of small objects.\nbpo-21271\n: New keyword only parameters in reset_mock call.\nIDLE\n¶\nbpo-5124\n: Paste with text selected now replaces the selection on X11. This\nmatches how paste works on Windows, Mac, most modern Linux apps, and ttk\nwidgets. Original patch by Serhiy Storchaka.\nbpo-24750\n: Switch all scrollbars in IDLE to ttk versions. Where needed,\nminimal tests are added to cover changes.\nbpo-24759\n: IDLE requires tk 8.5 and availability ttk widgets. Delete now\nunneeded tk version tests and code for older versions. Add test for IDLE\nsyntax colorizer.\nbpo-27239\n: idlelib.macosx.isXyzTk functions initialize as needed.\nbpo-27262\n: move Aqua unbinding code, which enable context menus, to\nmacosx.\nbpo-24759\n: Make clear in idlelib.idle_test.__init__ that the directory is\na private implementation of test.test_idle and tool for maintainers.\nbpo-27196\n: Stop ‘ThemeChanged’ warnings when running IDLE tests. These\npersisted after other warnings were suppressed in #20567. Apply Serhiy\nStorchaka’s update_idletasks solution to four test files. Record this\nadditional advice in idle_test/README.txt\nbpo-20567\n: Revise idle_test/README.txt with advice about avoiding tk\nwarning messages from tests.  Apply advice to several IDLE tests.\nbpo-24225\n: Update idlelib/README.txt with new file names and event\nhandlers.\nbpo-27156\n: Remove obsolete code not used by IDLE.\nbpo-27117\n: Make colorizer htest and turtledemo work with dark themes. Move\ncode for configuring text widget colors to a new function.\nbpo-24225\n: Rename many\nidlelib/*.py\nand\nidle_test/test_*.py\nfiles.\nEdit files to replace old names with new names when the old name referred\nto the module rather than the class it contained. See the issue and IDLE\nsection in What’s New in 3.6 for more.\nbpo-26673\n: When tk reports font size as 0, change to size 10. Such fonts\non Linux prevented the configuration dialog from opening.\nbpo-21939\n: Add test for IDLE’s percolator. Original patch by Saimadhav\nHeblikar.\nbpo-21676\n: Add test for IDLE’s replace dialog. Original patch by Saimadhav\nHeblikar.\nbpo-18410\n: Add test for IDLE’s search dialog. Original patch by Westley\nMartínez.\nbpo-21703\n: Add test for undo delegator.  Patch mostly by Saimadhav\nHeblikar .\nbpo-27044\n: Add ConfigDialog.remove_var_callbacks to stop memory leaks.\nbpo-23977\n: Add more asserts to test_delegator.\nDocumentation\n¶\nbpo-16484\n: Change the default PYTHONDOCS URL to “https:”, and fix the\nresulting links to use lowercase.  Patch by Sean Rodman, test by Kaushik\nNadikuditi.\nbpo-24136\n: Document the new\nPEP 448\nunpacking syntax of 3.5.\nbpo-22558\n: Add remaining doc links to source code for Python-coded\nmodules. Patch by Yoni Lavi.\nTests\n¶\nbpo-25285\n: regrtest now uses subprocesses when the -j1 command line option\nis used: each test file runs in a fresh child process. Before, the -j1\noption was ignored.\nbpo-25285\n: Tools/buildbot/test.bat script now uses -j1 by default to run\neach test file in fresh child process.\nWindows\n¶\nbpo-27064\n: The py.exe launcher now defaults to Python 3. The Windows\nlauncher\npy.exe\nno longer prefers an installed Python 2 version over\nPython 3 by default when used interactively.\nbpo-17500\n: Remove unused and outdated icons. (See also:\nhttps://github.com/python/pythondotorg/issues/945\n)\nBuild\n¶\nbpo-27229\n: Fix the cross-compiling pgen rule for in-tree builds.  Patch by\nXavier de Gaye.\nbpo-26930\n: Update OS X 10.5+ 32-bit-only installer to build and link with\nOpenSSL 1.0.2h.\nC API\n¶\nbpo-27186\n: Add the PyOS_FSPath() function (part of\nPEP 519\n).\nbpo-26282\n: PyArg_ParseTupleAndKeywords() now supports positional-only\nparameters.\nTools/Demos\n¶\nbpo-26282\n: Argument Clinic now supports positional-only and keyword\nparameters in the same function.\nPython 3.6.0 alpha 1\n¶\nRelease date: 2016-05-16\nSecurity\n¶\nbpo-26657\n: Fix directory traversal vulnerability with http.server on\nWindows.  This fixes a regression that was introduced in 3.3.4rc1 and\n3.4.0rc1.  Based on patch by Philipp Hagemeister.\nbpo-26313\n: ssl.py _load_windows_store_certs fails if windows cert store is\nempty. Patch by Baji.\nbpo-25939\n: On Windows open the cert store readonly in\nssl.enum_certificates.\nCore and Builtins\n¶\nbpo-20041\n: Fixed TypeError when frame.f_trace is set to None. Patch by\nXavier de Gaye.\nbpo-26168\n: Fixed possible refleaks in failing Py_BuildValue() with the “N”\nformat unit.\nbpo-26991\n: Fix possible refleak when creating a function with annotations.\nbpo-27039\n: Fixed bytearray.remove() for values greater than 127.  Based on\npatch by Joe Jevnik.\nbpo-23640\n: int.from_bytes() no longer bypasses constructors for\nsubclasses.\nbpo-27005\n: Optimized the float.fromhex() class method for exact float. It\nis now 2 times faster.\nbpo-18531\n: Single var-keyword argument of dict subtype was passed\nunscathed to the C-defined function.  Now it is converted to exact dict.\nbpo-26811\n: gc.get_objects() no longer contains a broken tuple with NULL\npointer.\nbpo-20120\n: Use RawConfigParser for .pypirc parsing, removing support for\ninterpolation unintentionally added with move to Python 3. Behavior no\nlonger does any interpolation in .pypirc files, matching behavior in\nPython 2.7 and Setuptools 19.0.\nbpo-26249\n: Memory functions of the\nPyMem_Malloc()\ndomain\n(\nPYMEM_DOMAIN_MEM\n) now use the\npymalloc allocator\nrather than system\nmalloc()\n. Applications calling\nPyMem_Malloc()\nwithout holding the GIL can now crash: use\nPYTHONMALLOC=debug\nenvironment variable to validate the usage of\nmemory allocators in your application.\nbpo-26802\n: Optimize function calls only using unpacking like\nfunc(*tuple)\n(no other positional argument, no keyword): avoid copying\nthe tuple. Patch written by Joe Jevnik.\nbpo-26659\n: Make the builtin slice type support cycle collection.\nbpo-26718\n: super.__init__ no longer leaks memory if called multiple times.\nNOTE: A direct call of super.__init__ is not endorsed!\nbpo-27138\n: Fix the doc comment for FileFinder.find_spec().\nbpo-27147\n: Mention\nPEP 420\nin the importlib docs.\nbpo-25339\n: PYTHONIOENCODING now has priority over locale in setting the\nerror handler for stdin and stdout.\nbpo-26494\n: Fixed crash on iterating exhausting iterators. Affected classes\nare generic sequence iterators, iterators of str, bytes, bytearray, list,\ntuple, set, frozenset, dict, OrderedDict, corresponding views and\nos.scandir() iterator.\nbpo-26574\n: Optimize\nbytes.replace(b'',\nb'.')\nand\nbytearray.replace(b'',\nb'.')\n. Patch written by Josh Snider.\nbpo-26581\n: If coding cookie is specified multiple times on a line in\nPython source code file, only the first one is taken to account.\nbpo-19711\n: Add tests for reloading namespace packages.\nbpo-21099\n: Switch applicable importlib tests to use\nPEP 451\nAPI.\nbpo-26563\n: Debug hooks on Python memory allocators now raise a fatal error\nif functions of the\nPyMem_Malloc()\nfamily are called without\nholding the GIL.\nbpo-26564\n: On error, the debug hooks on Python memory allocators now use\nthe\ntracemalloc\nmodule to get the traceback where a memory block\nwas allocated.\nbpo-26558\n: The debug hooks on Python memory allocator\nPyObject_Malloc()\nnow detect when functions are called without\nholding the GIL.\nbpo-26516\n: Add\nPYTHONMALLOC\nenvironment variable to set the\nPython memory allocators and/or install debug hooks.\nbpo-26516\n: The\nPyMem_SetupDebugHooks()\nfunction can now also be\nused on Python compiled in release mode.\nbpo-26516\n: The\nPYTHONMALLOCSTATS\nenvironment variable can now\nalso be used on Python compiled in release mode. It now has no effect if\nset to an empty string.\nbpo-26516\n: In debug mode, debug hooks are now also installed on Python\nmemory allocators when Python is configured without pymalloc.\nbpo-26464\n: Fix str.translate() when string is ASCII and first replacements\nremoves character, but next replacement uses a non-ASCII character or a\nstring longer than 1 character. Regression introduced in Python 3.5.0.\nbpo-22836\n: Ensure exception reports from PyErr_Display() and\nPyErr_WriteUnraisable() are sensible even when formatting them produces\nsecondary errors.  This affects the reports produced by\nsys.__excepthook__() and when __del__() raises an exception.\nbpo-26302\n: Correct behavior to reject comma as a legal character for\ncookie names.\nbpo-26136\n: Upgrade the warning when a generator raises StopIteration from\nPendingDeprecationWarning to DeprecationWarning.  Patch by Anish Shah.\nbpo-26204\n: The compiler now ignores all constant statements: bytes, str,\nint, float, complex, name constants (None, False, True), Ellipsis and\nast.Constant; not only str and int. For example,\n1.0\nis now ignored in\ndef\nf():\n1.0\n.\nbpo-4806\n: Avoid masking the original TypeError exception when using star\n(\n*\n) unpacking in function calls.  Based on patch by Hagen Fürstenau\nand Daniel Urban.\nbpo-26146\n: Add a new kind of AST node:\nast.Constant\n. It can be used by\nexternal AST optimizers, but the compiler does not emit directly such\nnode.\nbpo-23601\n: Sped-up allocation of dict key objects by using Python’s small\nobject allocator.  (Contributed by Julian Taylor.)\nbpo-18018\n: Import raises ImportError instead of SystemError if a relative\nimport is attempted without a known parent package.\nbpo-25843\n: When compiling code, don’t merge constants if they are equal\nbut have a different types. For example,\nf1,\nf2\n=\nlambda:\n1,\nlambda:\n1.0\nis now correctly compiled to two different functions:\nf1()\nreturns\n1\n(\nint\n) and\nf2()\nreturns\n1.0\n(\nfloat\n), even if\n1\nand\n1.0\nare equal.\nbpo-26107\n: The format of the\nco_lnotab\nattribute of code objects\nchanges to support negative line number delta.\nbpo-26154\n: Add a new private _PyThreadState_UncheckedGet() function to get\nthe current Python thread state, but don’t issue a fatal error if it is\nNULL. This new function must be used instead of accessing directly the\n_PyThreadState_Current variable.  The variable is no more exposed since\nPython 3.5.1 to hide the exact implementation of atomic C types, to avoid\ncompiler issues.\nbpo-25791\n: If __package__ != __spec__.parent or if neither __package__ or\n__spec__ are defined then ImportWarning is raised.\nbpo-22995\n: [UPDATE] Comment out the one of the pickleability tests in\n_PyObject_GetState() due to regressions observed in Cython-based projects.\nbpo-25961\n: Disallowed null characters in the type name.\nbpo-25973\n: Fix segfault when an invalid nonlocal statement binds a name\nstarting with two underscores.\nbpo-22995\n: Instances of extension types with a state that aren’t\nsubclasses of list or dict and haven’t implemented any pickle-related\nmethods (__reduce__, __reduce_ex__, __getnewargs__, __getnewargs_ex__, or\n__getstate__), can no longer be pickled.  Including memoryview.\nbpo-20440\n: Massive replacing unsafe attribute setting code with special\nmacro Py_SETREF.\nbpo-25766\n: Special method __bytes__() now works in str subclasses.\nbpo-25421\n: __sizeof__ methods of builtin types now use dynamic basic size.\nThis allows sys.getsize() to work correctly with their subclasses with\n__slots__ defined.\nbpo-25709\n: Fixed problem with in-place string concatenation and utf-8\ncache.\nbpo-5319\n: New Py_FinalizeEx() API allowing Python to set an exit status of\n120 on failure to flush buffered streams.\nbpo-25485\n: telnetlib.Telnet is now a context manager.\nbpo-24097\n: Fixed crash in object.__reduce__() if slot name is freed inside\n__getattr__.\nbpo-24731\n: Fixed crash on converting objects with special methods\n__bytes__, __trunc__, and __float__ returning instances of subclasses of\nbytes, int, and float to subclasses of bytes, int, and float\ncorrespondingly.\nbpo-25630\n: Fix a possible segfault during argument parsing in functions\nthat accept filesystem paths.\nbpo-23564\n: Fixed a partially broken sanity check in the _posixsubprocess\ninternals regarding how fds_to_pass were passed to the child.  The bug had\nno actual impact as subprocess.py already avoided it.\nbpo-25388\n: Fixed tokenizer crash when processing undecodable source code\nwith a null byte.\nbpo-25462\n: The hash of the key now is calculated only once in most\noperations in C implementation of OrderedDict.\nbpo-22995\n: Default implementation of __reduce__ and __reduce_ex__ now\nrejects builtin types with not defined __new__.\nbpo-24802\n: Avoid buffer overreads when int(), float(), compile(), exec()\nand eval() are passed bytes-like objects.  These objects are not\nnecessarily terminated by a null byte, but the functions assumed they\nwere.\nbpo-25555\n: Fix parser and AST: fill lineno and col_offset of “arg” node\nwhen compiling AST from Python objects.\nbpo-24726\n: Fixed a crash and leaking NULL in repr() of OrderedDict that\nwas mutated by direct calls of dict methods.\nbpo-25449\n: Iterating OrderedDict with keys with unstable hash now raises\nKeyError in C implementations as well as in Python implementation.\nbpo-25395\n: Fixed crash when highly nested OrderedDict structures were\ngarbage collected.\nbpo-25401\n: Optimize bytes.fromhex() and bytearray.fromhex(): they are now\nbetween 2x and 3.5x faster.\nbpo-25399\n: Optimize bytearray % args using the new private _PyBytesWriter\nAPI. Formatting is now between 2.5 and 5 times faster.\nbpo-25274\n: sys.setrecursionlimit() now raises a RecursionError if the new\nrecursion limit is too low depending at the current recursion depth.\nModify also the “lower-water mark” formula to make it monotonic. This mark\nis used to decide when the overflowed flag of the thread state is reset.\nbpo-24402\n: Fix input() to prompt to the redirected stdout when\nsys.stdout.fileno() fails.\nbpo-25349\n: Optimize bytes % args using the new private _PyBytesWriter API.\nFormatting is now up to 2 times faster.\nbpo-24806\n: Prevent builtin types that are not allowed to be subclassed\nfrom being subclassed through multiple inheritance.\nbpo-25301\n: The UTF-8 decoder is now up to 15 times as fast for error\nhandlers:\nignore\n,\nreplace\nand\nsurrogateescape\n.\nbpo-24848\n: Fixed a number of bugs in UTF-7 decoding of misformed data.\nbpo-25267\n: The UTF-8 encoder is now up to 75 times as fast for error\nhandlers:\nignore\n,\nreplace\n,\nsurrogateescape\n,\nsurrogatepass\n.\nPatch co-written with Serhiy Storchaka.\nbpo-25280\n: Import trace messages emitted in verbose (-v) mode are no\nlonger formatted twice.\nbpo-25227\n: Optimize ASCII and latin1 encoders with the\nsurrogateescape\nerror handler: the encoders are now up to 3 times as fast. Initial patch\nwritten by Serhiy Storchaka.\nbpo-25003\n: On Solaris 11.3 or newer, os.urandom() now uses the getrandom()\nfunction instead of the getentropy() function. The getentropy() function\nis blocking to generate very good quality entropy, os.urandom() doesn’t\nneed such high-quality entropy.\nbpo-9232\n: Modify Python’s grammar to allow trailing commas in the argument\nlist of a function declaration.  For example, “def f(*, a = 3,): pass” is\nnow legal. Patch from Mark Dickinson.\nbpo-24965\n: Implement\nPEP 498\n“Literal String Interpolation”. This\nallows you to embed expressions inside f-strings, which are converted to\nnormal strings at run time. Given x=3, then f’value={x}’ == ‘value=3’.\nPatch by Eric V. Smith.\nbpo-26478\n: Fix semantic bugs when using binary operators with dictionary\nviews and tuples.\nbpo-26171\n: Fix possible integer overflow and heap corruption in\nzipimporter.get_data().\nbpo-25660\n: Fix TAB key behaviour in REPL with readline.\nbpo-26288\n: Optimize PyLong_AsDouble.\nbpo-26289\n: Optimize floor and modulo division for single-digit longs.\nMicrobenchmarks show 2-2.5x improvement.  Built-in ‘divmod’ function is\nnow also ~10% faster. (See also:\nbpo-26315\n)\nbpo-25887\n: Raise a RuntimeError when a coroutine object is awaited more\nthan once.\nLibrary\n¶\nbpo-27057\n: Fix os.set_inheritable() on Android, ioctl() is blocked by\nSELinux and fails with EACCESS. The function now falls back to fcntl().\nPatch written by Michał Bednarski.\nbpo-27014\n: Fix infinite recursion using typing.py.  Thanks to Kalle Tuure!\nbpo-27031\n: Removed dummy methods in Tkinter widget classes: tk_menuBar()\nand tk_bindForTraversal().\nbpo-14132\n: Fix urllib.request redirect handling when the target only has a\nquery string.  Original fix by Ján Janech.\nbpo-17214\n: The “urllib.request” module now percent-encodes non-ASCII bytes\nfound in redirect target URLs.  Some servers send Location header fields\nwith non-ASCII bytes, but “http.client” requires the request target to be\nASCII-encodable, otherwise a UnicodeEncodeError is raised.  Based on patch\nby Christian Heimes.\nbpo-27033\n: The default value of the decode_data parameter for\nsmtpd.SMTPChannel and smtpd.SMTPServer constructors is changed to False.\nbpo-27034\n: Removed deprecated class asynchat.fifo.\nbpo-26870\n: Added readline.set_auto_history(), which can stop entries being\nautomatically added to the history list.  Based on patch by Tyler\nCrompton.\nbpo-26039\n: zipfile.ZipFile.open() can now be used to write data into a ZIP\nfile, as well as for extracting data.  Patch by Thomas Kluyver.\nbpo-26892\n: Honor debuglevel flag in urllib.request.HTTPHandler. Patch\ncontributed by Chi Hsuan Yen.\nbpo-22274\n: In the subprocess module, allow stderr to be redirected to\nstdout even when stdout is not redirected.  Patch by Akira Li.\nbpo-26807\n: mock_open ‘files’ no longer error on readline at end of file.\nPatch from Yolanda Robla.\nbpo-25745\n: Fixed leaking a userptr in curses panel destructor.\nbpo-26977\n: Removed unnecessary, and ignored, call to sum of squares helper\nin statistics.pvariance.\nbpo-26002\n: Use bisect in statistics.median instead of a linear search.\nPatch by Upendra Kuma.\nbpo-25974\n: Make use of new Decimal.as_integer_ratio() method in statistics\nmodule. Patch by Stefan Krah.\nbpo-26996\n: Add secrets module as described in\nPEP 506\n.\nbpo-26881\n: The modulefinder module now supports extended opcode arguments.\nbpo-23815\n: Fixed crashes related to directly created instances of types in\n_tkinter and curses.panel modules.\nbpo-17765\n: weakref.ref() no longer silently ignores keyword arguments.\nPatch by Georg Brandl.\nbpo-26873\n: xmlrpc now raises ResponseError on unsupported type tags\ninstead of silently return incorrect result.\nbpo-26915\n: The __contains__ methods in the collections ABCs now check for\nidentity before checking equality.  This better matches the behavior of\nthe concrete classes, allows sensible handling of NaNs, and makes it\neasier to reason about container invariants.\nbpo-26711\n: Fixed the comparison of plistlib.Data with other types.\nbpo-24114\n: Fix an uninitialized variable in\nctypes.util\n. The bug only\noccurs on SunOS when the ctypes implementation searches for the\ncrle\nprogram. Patch by Xiang Zhang.  Tested on SunOS by Kees Bos.\nbpo-26864\n: In urllib.request, change the proxy bypass host checking\nagainst no_proxy to be case-insensitive, and to not match unrelated host\nnames that happen to have a bypassed hostname as a suffix.  Patch by Xiang\nZhang.\nbpo-24902\n: Print server URL on http.server startup.  Initial patch by\nFelix Kaiser.\nbpo-25788\n: fileinput.hook_encoded() now supports an “errors” argument for\npassing to open.  Original patch by Joseph Hackman.\nbpo-26634\n: recursive_repr() now sets __qualname__ of wrapper.  Patch by\nXiang Zhang.\nbpo-26804\n: urllib.request will prefer lower_case proxy environment\nvariables over UPPER_CASE or Mixed_Case ones. Patch contributed by\nHans-Peter Jansen.\nbpo-26837\n: assertSequenceEqual() now correctly outputs non-stringified\ndiffering items (like bytes in the -b mode).  This affects\nassertListEqual() and assertTupleEqual().\nbpo-26041\n: Remove “will be removed in Python 3.7” from deprecation\nmessages of platform.dist() and platform.linux_distribution(). Patch by\nKumaripaba Miyurusara Athukorala.\nbpo-26822\n: itemgetter, attrgetter and methodcaller objects no longer\nsilently ignore keyword arguments.\nbpo-26733\n: Disassembling a class now disassembles class and static\nmethods. Patch by Xiang Zhang.\nbpo-26801\n: Fix error handling in\nshutil.get_terminal_size()\n, catch\nAttributeError\ninstead of\nNameError\n. Patch written by\nEmanuel Barry.\nbpo-24838\n: tarfile’s ustar and gnu formats now correctly calculate name\nand link field limits for multibyte character encodings like utf-8.\nbpo-26717\n: Stop encoding Latin-1-ized WSGI paths with UTF-8.  Patch by\nAnthony Sottile.\nbpo-26782\n: Add STARTUPINFO to subprocess.__all__ on Windows.\nbpo-26404\n: Add context manager to socketserver.  Patch by Aviv Palivoda.\nbpo-26735\n: Fix\nos.urandom()\non Solaris 11.3 and newer when reading\nmore than 1,024 bytes: call\ngetrandom()\nmultiple times with a limit of\n1024 bytes per call.\nbpo-26585\n: Eliminate http.server._quote_html() and use\nhtml.escape(quote=False).  Patch by Xiang Zhang.\nbpo-26685\n: Raise OSError if closing a socket fails.\nbpo-16329\n: Add .webm to mimetypes.types_map.  Patch by Giampaolo Rodola’.\nbpo-13952\n: Add .csv to mimetypes.types_map.  Patch by Geoff Wilson.\nbpo-26587\n: the site module now allows .pth files to specify files to be\nadded to sys.path (e.g. zip files).\nbpo-25609\n: Introduce contextlib.AbstractContextManager and\ntyping.ContextManager.\nbpo-26709\n: Fixed Y2038 problem in loading binary PLists.\nbpo-23735\n: Handle terminal resizing with Readline 6.3+ by installing our\nown SIGWINCH handler.  Patch by Eric Price.\nbpo-25951\n: Change SSLSocket.sendall() to return None, as explicitly\ndocumented for plain socket objects.  Patch by Aviv Palivoda.\nbpo-26586\n: In http.server, respond with “413 Request header fields too\nlarge” if there are too many header fields to parse, rather than killing\nthe connection and raising an unhandled exception.  Patch by Xiang Zhang.\nbpo-26676\n: Added missing XMLPullParser to ElementTree.__all__.\nbpo-22854\n: Change BufferedReader.writable() and BufferedWriter.readable()\nto always return False.\nbpo-26492\n: Exhausted iterator of array.array now conforms with the\nbehavior of iterators of other mutable sequences: it lefts exhausted even\nif iterated array is extended.\nbpo-26641\n: doctest.DocFileTest and doctest.testfile() now support packages\n(module splitted into multiple directories) for the package parameter.\nbpo-25195\n: Fix a regression in mock.MagicMock. _Call is a subclass of\ntuple (changeset 3603bae63c13 only works for classes) so we need to\nimplement __ne__ ourselves.  Patch by Andrew Plummer.\nbpo-26644\n: Raise ValueError rather than SystemError when a negative length\nis passed to SSLSocket.recv() or read().\nbpo-23804\n: Fix SSL recv(0) and read(0) methods to return zero bytes\ninstead of up to 1024.\nbpo-26616\n: Fixed a bug in datetime.astimezone() method.\nbpo-26637\n: The\nimportlib\nmodule now emits an\nImportError\nrather than a\nTypeError\nif\n__import__()\nis tried during the\nPython shutdown process but\nsys.path\nis already cleared (set to\nNone\n).\nbpo-21925\n:\nwarnings.formatwarning()\nnow catches exceptions when\ncalling\nlinecache.getline()\nand\ntracemalloc.get_object_traceback()\nto be able to log\nResourceWarning\nemitted late during the Python shutdown process.\nbpo-23848\n: On Windows, faulthandler.enable() now also installs an\nexception handler to dump the traceback of all Python threads on any\nWindows exception, not only on UNIX signals (SIGSEGV, SIGFPE, SIGABRT).\nbpo-26530\n: Add C functions\n_PyTraceMalloc_Track()\nand\n_PyTraceMalloc_Untrack()\nto track memory blocks using the\ntracemalloc\nmodule. Add\n_PyTraceMalloc_GetTraceback()\nto\nget the traceback of an object.\nbpo-26588\n: The _tracemalloc now supports tracing memory allocations of\nmultiple address spaces (domains).\nbpo-24266\n: Ctrl+C during Readline history search now cancels the search\nmode when compiled with Readline 7.\nbpo-26590\n: Implement a safe finalizer for the _socket.socket type. It now\nreleases the GIL to close the socket.\nbpo-18787\n: spwd.getspnam() now raises a PermissionError if the user\ndoesn’t have privileges.\nbpo-26560\n: Avoid potential ValueError in BaseHandler.start_response.\nInitial patch by Peter Inglesby.\nbpo-26567\n: Add a new function\nPyErr_ResourceWarning()\nfunction to\npass the destroyed object. Add a\nsource\nattribute to\nwarnings.WarningMessage\n. Add warnings._showwarnmsg() which uses\ntracemalloc to get the traceback where source object was allocated.\nbpo-26569\n: Fix\npyclbr.readmodule()\nand\npyclbr.readmodule_ex()\nto support importing packages.\nbpo-26499\n: Account for remaining Content-Length in HTTPResponse.readline()\nand read1(). Based on patch by Silent Ghost. Also document that\nHTTPResponse now supports these methods.\nbpo-25320\n: Handle sockets in directories unittest discovery is scanning.\nPatch from Victor van den Elzen.\nbpo-16181\n: cookiejar.http2time() now returns None if year is higher than\ndatetime.MAXYEAR.\nbpo-26513\n: Fixes platform module detection of Windows Server\nbpo-23718\n: Fixed parsing time in week 0 before Jan 1.  Original patch by\nTamás Bence Gedai.\nbpo-26323\n: Add Mock.assert_called() and Mock.assert_called_once() methods\nto unittest.mock. Patch written by Amit Saha.\nbpo-20589\n: Invoking Path.owner() and Path.group() on Windows now raise\nNotImplementedError instead of ImportError.\nbpo-26177\n: Fixed the keys() method for Canvas and Scrollbar widgets.\nbpo-15068\n: Got rid of excessive buffering in fileinput. The bufsize\nparameter is now deprecated and ignored.\nbpo-19475\n: Added an optional argument timespec to the datetime isoformat()\nmethod to choose the precision of the time component.\nbpo-2202\n: Fix UnboundLocalError in\nAbstractDigestAuthHandler.get_algorithm_impls. Initial patch by Mathieu\nDupuy.\nbpo-26167\n: Minimized overhead in copy.copy() and copy.deepcopy().\nOptimized copying and deepcopying bytearrays, NotImplemented, slices,\nshort lists, tuples, dicts, sets.\nbpo-25718\n: Fixed pickling and copying the accumulate() iterator with total\nis None.\nbpo-26475\n: Fixed debugging output for regular expressions with the (?x)\nflag.\nbpo-26482\n: Allowed pickling recursive dequeues.\nbpo-26335\n: Make mmap.write() return the number of bytes written like other\nwrite methods.  Patch by Jakub Stasiak.\nbpo-26457\n: Fixed the subnets() methods in IP network classes for the case\nwhen resulting prefix length is equal to maximal prefix length. Based on\npatch by Xiang Zhang.\nbpo-26385\n: Remove the file if the internal open() call in\nNamedTemporaryFile() fails. Patch by Silent Ghost.\nbpo-26402\n: Fix XML-RPC client to retry when the server shuts down a\npersistent connection.  This was a regression related to the new\nhttp.client.RemoteDisconnected exception in 3.5.0a4.\nbpo-25913\n: Leading\n<~\nis optional now in base64.a85decode() with\nadobe=True.  Patch by Swati Jaiswal.\nbpo-26186\n: Remove an invalid type check in importlib.util.LazyLoader.\nbpo-26367\n: importlib.__import__() raises ImportError like\nbuiltins.__import__() when\nlevel\nis specified but without an\naccompanying package specified.\nbpo-26309\n: In the “socketserver” module, shut down the request (closing\nthe connected socket) when verify_request() returns false.  Patch by Aviv\nPalivoda.\nbpo-23430\n: Change the socketserver module to only catch exceptions raised\nfrom a request handler that are derived from Exception (instead of\nBaseException). Therefore SystemExit and KeyboardInterrupt no longer\ntrigger the handle_error() method, and will now to stop a single-threaded\nserver.\nbpo-25995\n: os.walk() no longer uses FDs proportional to the tree depth.\nbpo-25994\n: Added the close() method and the support of the context manager\nprotocol for the os.scandir() iterator.\nbpo-23992\n: multiprocessing: make MapResult not fail-fast upon exception.\nbpo-26243\n: Support keyword arguments to zlib.compress().  Patch by Aviv\nPalivoda.\nbpo-26117\n: The os.scandir() iterator now closes file descriptor not only\nwhen the iteration is finished, but when it was failed with error.\nbpo-25949\n: __dict__ for an OrderedDict instance is now created only when\nneeded.\nbpo-25911\n: Restored support of bytes paths in os.walk() on Windows.\nbpo-26045\n: Add UTF-8 suggestion to error message when posting a\nnon-Latin-1 string with http.client.\nbpo-26039\n: Added zipfile.ZipInfo.from_file() and zipinfo.ZipInfo.is_dir().\nPatch by Thomas Kluyver.\nbpo-12923\n: Reset FancyURLopener’s redirect counter even if there is an\nexception. Based on patches by Brian Brazil and Daniel Rocco.\nbpo-25945\n: Fixed a crash when unpickle the functools.partial object with\nwrong state. Fixed a leak in failed functools.partial constructor. “args”\nand “keywords” attributes of functools.partial have now always types tuple\nand dict correspondingly.\nbpo-26202\n: copy.deepcopy() now correctly copies range() objects with\nnon-atomic attributes.\nbpo-23076\n: Path.glob() now raises a ValueError if it’s called with an\ninvalid pattern. Patch by Thomas Nyberg.\nbpo-19883\n: Fixed possible integer overflows in zipimport.\nbpo-26227\n: On Windows, getnameinfo(), gethostbyaddr() and\ngethostbyname_ex() functions of the socket module now decode the hostname\nfrom the ANSI code page rather than UTF-8.\nbpo-26099\n: The site module now writes an error into stderr if\nsitecustomize module can be imported but executing the module raise an\nImportError. Same change for usercustomize.\nbpo-26147\n: xmlrpc now works with strings not encodable with used non-UTF-8\nencoding.\nbpo-25935\n: Garbage collector now breaks reference loops with OrderedDict.\nbpo-16620\n: Fixed AttributeError in msilib.Directory.glob().\nbpo-26013\n: Added compatibility with broken protocol 2 pickles created in\nold Python 3 versions (3.4.3 and lower).\nbpo-26129\n: Deprecated accepting non-integers in grp.getgrgid().\nbpo-25850\n: Use cross-compilation by default for 64-bit Windows.\nbpo-25822\n: Add docstrings to the fields of urllib.parse results. Patch\ncontributed by Swati Jaiswal.\nbpo-22642\n: Convert trace module option parsing mechanism to argparse.\nPatch contributed by SilentGhost.\nbpo-24705\n: Fix sysconfig._parse_makefile not expanding ${} vars appearing\nbefore $() vars.\nbpo-26069\n: Remove the deprecated apis in the trace module.\nbpo-22138\n: Fix mock.patch behavior when patching descriptors. Restore\noriginal values after patching. Patch contributed by Sean McCully.\nbpo-25672\n: In the ssl module, enable the SSL_MODE_RELEASE_BUFFERS mode\noption if it is safe to do so.\nbpo-26012\n: Don’t traverse into symlinks for\n**\npattern in\npathlib.Path.[r]glob().\nbpo-24120\n: Ignore PermissionError when traversing a tree with\npathlib.Path.[r]glob(). Patch by Ulrich Petri.\nbpo-21815\n: Accept ] characters in the data portion of imap responses, in\norder to handle the flags with square brackets accepted and produced by\nservers such as gmail.\nbpo-25447\n: fileinput now uses sys.stdin as-is if it does not have a buffer\nattribute (restores backward compatibility).\nbpo-25971\n: Optimized creating Fractions from floats by 2 times and from\nDecimals by 3 times.\nbpo-25802\n: Document as deprecated the remaining implementations of\nimportlib.abc.Loader.load_module().\nbpo-25928\n: Add Decimal.as_integer_ratio().\nbpo-25447\n: Copying the lru_cache() wrapper object now always works,\nindependently from the type of the wrapped object (by returning the\noriginal object unchanged).\nbpo-25768\n: Have the functions in compileall return booleans instead of\nints and add proper documentation and tests for the return values.\nbpo-24103\n: Fixed possible use after free in ElementTree.XMLPullParser.\nbpo-25860\n: os.fwalk() no longer skips remaining directories when error\noccurs. Original patch by Samson Lee.\nbpo-25914\n: Fixed and simplified OrderedDict.__sizeof__.\nbpo-25869\n: Optimized deepcopying ElementTree; it is now 20 times faster.\nbpo-25873\n: Optimized iterating ElementTree.  Iterating elements\nElement.iter() is now 40% faster, iterating text Element.itertext() is now\nup to 2.5 times faster.\nbpo-25902\n: Fixed various refcount issues in ElementTree iteration.\nbpo-22227\n: The TarFile iterator is reimplemented using generator. This\nimplementation is simpler that using class.\nbpo-25638\n: Optimized ElementTree.iterparse(); it is now 2x faster.\nOptimized ElementTree parsing; it is now 10% faster.\nbpo-25761\n: Improved detecting errors in broken pickle data.\nbpo-25717\n: Restore the previous behaviour of tolerating most fstat()\nerrors when opening files.  This was a regression in 3.5a1, and stopped\nanonymous temporary files from working in special cases.\nbpo-24903\n: Fix regression in number of arguments compileall accepts when\n‘-d’ is specified.  The check on the number of arguments has been dropped\ncompletely as it never worked correctly anyway.\nbpo-25764\n: In the subprocess module, preserve any exception caused by\nfork() failure when preexec_fn is used.\nbpo-25771\n: Tweak the exception message for importlib.util.resolve_name()\nwhen ‘package’ isn’t specified but necessary.\nbpo-6478\n: _strptime’s regexp cache now is reset after changing timezone\nwith time.tzset().\nbpo-14285\n: When executing a package with the “python -m package” option,\nand package initialization fails, a proper traceback is now reported.  The\n“runpy” module now lets exceptions from package initialization pass back\nto the caller, rather than raising ImportError.\nbpo-19771\n: Also in runpy and the “-m” option, omit the irrelevant message\n“… is a package and cannot be directly executed” if the package could\nnot even be initialized (e.g. due to a bad\n*.pyc\nfile).\nbpo-25177\n: Fixed problem with the mean of very small and very large\nnumbers. As a side effect, statistics.mean and statistics.variance should\nbe significantly faster.\nbpo-25718\n: Fixed copying object with state with boolean value is false.\nbpo-10131\n: Fixed deep copying of minidom documents.  Based on patch by\nMarian Ganisin.\nbpo-7990\n: dir() on ElementTree.Element now lists properties: “tag”,\n“text”, “tail” and “attrib”.  Original patch by Santoso Wijaya.\nbpo-25725\n: Fixed a reference leak in pickle.loads() when unpickling\ninvalid data including tuple instructions.\nbpo-25663\n: In the Readline completer, avoid listing duplicate global\nnames, and search the global namespace before searching builtins.\nbpo-25688\n: Fixed file leak in ElementTree.iterparse() raising an error.\nbpo-23914\n: Fixed SystemError raised by unpickler on broken pickle data.\nbpo-25691\n: Fixed crash on deleting ElementTree.Element attributes.\nbpo-25624\n: ZipFile now always writes a ZIP_STORED header for directory\nentries.  Patch by Dingyuan Wang.\nbpo-25626\n: Change three zlib functions to accept sizes that fit in\nPy_ssize_t, but internally cap those sizes to UINT_MAX.  This resolves a\nregression in 3.5 where GzipFile.read() failed to read chunks larger than\n2 or 4 GiB.  The change affects the zlib.Decompress.decompress()\nmax_length parameter, the zlib.decompress() bufsize parameter, and the\nzlib.Decompress.flush() length parameter.\nbpo-25583\n: Avoid incorrect errors raised by os.makedirs(exist_ok=True)\nwhen the OS gives priority to errors such as EACCES over EEXIST.\nbpo-25593\n: Change semantics of EventLoop.stop() in asyncio.\nbpo-6973\n: When we know a subprocess.Popen process has died, do not allow\nthe send_signal(), terminate(), or kill() methods to do anything as they\ncould potentially signal a different process.\nbpo-23883\n: Added missing APIs to __all__ to match the documented APIs for\nthe following modules: calendar, csv, enum, fileinput, ftplib, logging,\noptparse, tarfile, threading and wave.  Also added a\ntest.support.check__all__() helper. Patches by Jacek Kołodziej, Mauro S.\nM. Rodrigues and Joel Taddei.\nbpo-25590\n: In the Readline completer, only call getattr() once per\nattribute.  Also complete names of attributes such as properties and slots\nwhich are listed by dir() but not yet created on an instance.\nbpo-25498\n: Fix a crash when garbage-collecting ctypes objects created by\nwrapping a memoryview.  This was a regression made in 3.5a1.  Based on\npatch by Eryksun.\nbpo-25584\n: Added “escape” to the __all__ list in the glob module.\nbpo-25584\n: Fixed recursive glob() with patterns starting with\n**\n.\nbpo-25446\n: Fix regression in smtplib’s AUTH LOGIN support.\nbpo-18010\n: Fix the pydoc web server’s module search function to handle\nexceptions from importing packages.\nbpo-25554\n: Got rid of circular references in regular expression parsing.\nbpo-18973\n: Command-line interface of the calendar module now uses argparse\ninstead of optparse.\nbpo-25510\n: fileinput.FileInput.readline() now returns b’’ instead of ‘’ at\nthe end if the FileInput was opened with binary mode. Patch by Ryosuke\nIto.\nbpo-25503\n: Fixed inspect.getdoc() for inherited docstrings of properties.\nOriginal patch by John Mark Vandenberg.\nbpo-25515\n: Always use os.urandom as a source of randomness in uuid.uuid4.\nbpo-21827\n: Fixed textwrap.dedent() for the case when largest common\nwhitespace is a substring of smallest leading whitespace. Based on patch\nby Robert Li.\nbpo-25447\n: The lru_cache() wrapper objects now can be copied and pickled\n(by returning the original object unchanged).\nbpo-25390\n: typing: Don’t crash on Union[str, Pattern].\nbpo-25441\n: asyncio: Raise error from drain() when socket is closed.\nbpo-25410\n: Cleaned up and fixed minor bugs in C implementation of\nOrderedDict.\nbpo-25411\n: Improved Unicode support in SMTPHandler through better use of\nthe email package. Thanks to user simon04 for the patch.\nMove the imp module from a PendingDeprecationWarning to\nDeprecationWarning.\nbpo-25407\n: Remove mentions of the formatter module being removed in Python\n3.6.\nbpo-25406\n: Fixed a bug in C implementation of OrderedDict.move_to_end()\nthat caused segmentation fault or hang in iterating after moving several\nitems to the start of ordered dict.\nbpo-25382\n: pickletools.dis() now outputs implicit memo index for the\nMEMOIZE opcode.\nbpo-25357\n: Add an optional newline parameter to binascii.b2a_base64().\nbase64.b64encode() uses it to avoid a memory copy.\nbpo-24164\n: Objects that need calling\n__new__\nwith keyword arguments,\ncan now be pickled using pickle protocols older than protocol version 4.\nbpo-25364\n: zipfile now works in threads disabled builds.\nbpo-25328\n: smtpd’s SMTPChannel now correctly raises a ValueError if both\ndecode_data and enable_SMTPUTF8 are set to true.\nbpo-16099\n: RobotFileParser now supports Crawl-delay and Request-rate\nextensions.  Patch by Nikolay Bogoychev.\nbpo-25316\n: distutils raises OSError instead of DistutilsPlatformError when\nMSVC is not installed.\nbpo-25380\n: Fixed protocol for the STACK_GLOBAL opcode in\npickletools.opcodes.\nbpo-23972\n: Updates asyncio datagram create method allowing reuseport and\nreuseaddr socket options to be set prior to binding the socket. Mirroring\nthe existing asyncio create_server method the reuseaddr option for\ndatagram sockets defaults to True if the O/S is ‘posix’ (except if the\nplatform is Cygwin). Patch by Chris Laws.\nbpo-25304\n: Add asyncio.run_coroutine_threadsafe().  This lets you submit a\ncoroutine to a loop from another thread, returning a\nconcurrent.futures.Future.  By Vincent Michel.\nbpo-25232\n: Fix CGIRequestHandler to split the query from the URL at the\nfirst question mark (?) rather than the last. Patch from Xiang Zhang.\nbpo-24657\n: Prevent CGIRequestHandler from collapsing slashes in the query\npart of the URL as if it were a path. Patch from Xiang Zhang.\nbpo-25287\n: Don’t add crypt.METHOD_CRYPT to crypt.methods if it’s not\nsupported. Check if it is supported, it may not be supported on OpenBSD\nfor example.\nbpo-23600\n: Default implementation of tzinfo.fromutc() was returning wrong\nresults in some cases.\nbpo-25203\n: Failed readline.set_completer_delims() no longer left the\nmodule in inconsistent state.\nbpo-25011\n: rlcompleter now omits private and special attribute names\nunless the prefix starts with underscores.\nbpo-25209\n: rlcompleter now can add a space or a colon after completed\nkeyword.\nbpo-22241\n: timezone.utc name is now plain ‘UTC’, not ‘UTC-00:00’.\nbpo-23517\n: fromtimestamp() and utcfromtimestamp() methods of\ndatetime.datetime now round microseconds to nearest with ties going to\nnearest even integer (ROUND_HALF_EVEN), as round(float), instead of\nrounding towards -Infinity (ROUND_FLOOR).\nbpo-23552\n: Timeit now warns when there is substantial (4x) variance\nbetween best and worst times. Patch from Serhiy Storchaka.\nbpo-24633\n: site-packages/README -> README.txt.\nbpo-24879\n: help() and pydoc can now list named tuple fields in the order\nthey were defined rather than alphabetically.  The ordering is determined\nby the _fields attribute if present.\nbpo-24874\n: Improve speed of itertools.cycle() and make its pickle more\ncompact.\nFix crash in itertools.cycle.__setstate__() when the first argument wasn’t\na list.\nbpo-20059\n: urllib.parse raises ValueError on all invalid ports. Patch by\nMartin Panter.\nbpo-24360\n: Improve __repr__ of argparse.Namespace() for invalid\nidentifiers.  Patch by Matthias Bussonnier.\nbpo-23426\n: run_setup was broken in distutils. Patch from Alexander\nBelopolsky.\nbpo-13938\n: 2to3 converts StringTypes to a tuple. Patch from Mark Hammond.\nbpo-2091\n: open() accepted a ‘U’ mode string containing ‘+’, but ‘U’ can\nonly be used with ‘r’. Patch from Jeff Balogh and John O’Connor.\nbpo-8585\n: improved tests for zipimporter2. Patch from Mark Lawrence.\nbpo-18622\n: unittest.mock.mock_open().reset_mock would recurse infinitely.\nPatch from Nicola Palumbo and Laurent De Buyst.\nbpo-24426\n: Fast searching optimization in regular expressions now works\nfor patterns that starts with capturing groups.  Fast searching\noptimization now can’t be disabled at compile time.\nbpo-23661\n: unittest.mock side_effects can now be exceptions again. This\nwas a regression vs Python 3.4. Patch from Ignacio Rossi\nbpo-13248\n: Remove deprecated inspect.getmoduleinfo function.\nbpo-25578\n: Fix (another) memory leak in SSLSocket.getpeercer().\nbpo-25530\n: Disable the vulnerable SSLv3 protocol by default when creating\nssl.SSLContext.\nbpo-25569\n: Fix memory leak in SSLSocket.getpeercert().\nbpo-25471\n: Sockets returned from accept() shouldn’t appear to be\nnonblocking.\nbpo-25319\n: When threading.Event is reinitialized, the underlying condition\nshould use a regular lock rather than a recursive lock.\nSkip getaddrinfo if host is already resolved. Patch by A. Jesse Jiryu\nDavis.\nbpo-26050\n: Add asyncio.StreamReader.readuntil() method. Patch by Марк\nКоренберг.\nbpo-25924\n: Avoid unnecessary serialization of getaddrinfo(3) calls on OS X\nversions 10.5 or higher.  Original patch by A. Jesse Jiryu Davis.\nbpo-26406\n: Avoid unnecessary serialization of getaddrinfo(3) calls on\ncurrent versions of OpenBSD and NetBSD.  Patch by A. Jesse Jiryu Davis.\nbpo-26848\n: Fix asyncio/subprocess.communicate() to handle empty input.\nPatch by Jack O’Connor.\nbpo-27040\n: Add loop.get_exception_handler method\nbpo-27041\n: asyncio: Add loop.create_future method\nIDLE\n¶\nbpo-20640\n: Add tests for idlelib.configHelpSourceEdit. Patch by Saimadhav\nHeblikar.\nIn the ‘IDLE-console differences’ section of the IDLE doc, clarify how\nrunning with IDLE affects sys.modules and the standard streams.\nbpo-25507\n: fix incorrect change in IOBinding that prevented printing.\nAugment IOBinding htest to include all major IOBinding functions.\nbpo-25905\n: Revert unwanted conversion of ‘ to ’ RIGHT SINGLE QUOTATION\nMARK in README.txt and open this and NEWS.txt with ‘ascii’. Re-encode\nCREDITS.txt to utf-8 and open it with ‘utf-8’.\nbpo-15348\n: Stop the debugger engine (normally in a user process) before\nclosing the debugger window (running in the IDLE process). This prevents\nthe RuntimeErrors that were being caught and ignored.\nbpo-24455\n: Prevent IDLE from hanging when a) closing the shell while the\ndebugger is active (15347); b) closing the debugger with the [X] button\n(15348); and c) activating the debugger when already active (24455). The\npatch by Mark Roseman does this by making two changes. 1. Suspend and\nresume the gui.interaction method with the tcl vwait mechanism intended\nfor this purpose (instead of root.mainloop & .quit). 2. In gui.run, allow\nany existing interaction to terminate first.\nChange ‘The program’ to ‘Your program’ in an IDLE ‘kill program?’ message\nto make it clearer that the program referred to is the currently running\nuser program, not IDLE itself.\nbpo-24750\n: Improve the appearance of the IDLE editor window status bar.\nPatch by Mark Roseman.\nbpo-25313\n: Change the handling of new built-in text color themes to better\naddress the compatibility problem introduced by the addition of IDLE Dark.\nConsistently use the revised idleConf.CurrentTheme everywhere in idlelib.\nbpo-24782\n: Extension configuration is now a tab in the IDLE Preferences\ndialog rather than a separate dialog.  The former tabs are now a sorted\nlist.  Patch by Mark Roseman.\nbpo-22726\n: Re-activate the config dialog help button with some content\nabout the other buttons and the new IDLE Dark theme.\nbpo-24820\n: IDLE now has an ‘IDLE Dark’ built-in text color theme. It is\nmore or less IDLE Classic inverted, with a cobalt blue background.\nStrings, comments, keywords, … are still green, red, orange, … . To\nuse it with IDLEs released before November 2015, hit the ‘Save as New\nCustom Theme’ button and enter a new name, such as ‘Custom Dark’.  The\ncustom theme will work with any IDLE release, and can be modified.\nbpo-25224\n: README.txt is now an idlelib index for IDLE developers and\ncurious users. The previous user content is now in the IDLE doc chapter.\n‘IDLE’ now means ‘Integrated Development and Learning Environment’.\nbpo-24820\n: Users can now set breakpoint colors in Settings -> Custom\nHighlighting. Original patch by Mark Roseman.\nbpo-24972\n: Inactive selection background now matches active selection\nbackground, as configured by users, on all systems.  Found items are now\nalways highlighted on Windows.  Initial patch by Mark Roseman.\nbpo-24570\n: Idle: make calltip and completion boxes appear on Macs affected\nby a tk regression.  Initial patch by Mark Roseman.\nbpo-24988\n: Idle ScrolledList context menus (used in debugger) now work on\nMac Aqua. Patch by Mark Roseman.\nbpo-24801\n: Make right-click for context menu work on Mac Aqua. Patch by\nMark Roseman.\nbpo-25173\n: Associate tkinter messageboxes with a specific widget. For Mac\nOSX, make them a ‘sheet’.  Patch by Mark Roseman.\nbpo-25198\n: Enhance the initial html viewer now used for Idle Help.\nProperly indent fixed-pitch text (patch by Mark Roseman). Give code\nsnippet a very Sphinx-like light blueish-gray background. Re-use initial\nwidth and height set by users for shell and editor. When the Table of\nContents (TOC) menu is used, put the section header at the top of the\nscreen.\nbpo-25225\n: Condense and rewrite Idle doc section on text colors.\nbpo-21995\n: Explain some differences between IDLE and console Python.\nbpo-22820\n: Explain need for\nprint\nwhen running file from Idle editor.\nbpo-25224\n: Doc: augment Idle feature list and no-subprocess section.\nbpo-25219\n: Update doc for Idle command line options. Some were missing and\nnotes were not correct.\nbpo-24861\n: Most of idlelib is private and subject to change. Use\nidleib.idle.* to start Idle. See idlelib.__init__.__doc__.\nbpo-25199\n: Idle: add synchronization comments for future maintainers.\nbpo-16893\n: Replace help.txt with help.html for Idle doc display. The new\nidlelib/help.html is rstripped Doc/build/html/library/idle.html. It looks\nbetter than help.txt and will better document Idle as released. The\ntkinter html viewer that works for this file was written by Rose Roseman.\nThe now unused EditorWindow.HelpDialog class and helt.txt file are\ndeprecated.\nbpo-24199\n: Deprecate unused idlelib.idlever with possible removal in 3.6.\nbpo-24790\n: Remove extraneous code (which also create 2 & 3 conflicts).\nDocumentation\n¶\nbpo-26736\n: Used HTTPS for external links in the documentation if possible.\nbpo-6953\n: Rework the Readline module documentation to group related\nfunctions together, and add more details such as what underlying Readline\nfunctions and variables are accessed.\nbpo-23606\n: Adds note to ctypes documentation regarding cdll.msvcrt.\nbpo-24952\n: Clarify the default size argument of stack_size() in the\n“threading” and “_thread” modules. Patch from Mattip.\nbpo-26014\n: Update 3.x packaging documentation: * “See also” links to the\nnew docs are now provided in the legacy pages * links to setuptools\ndocumentation have been updated\nTests\n¶\nbpo-21916\n: Added tests for the turtle module.  Patch by ingrid, Gregory\nLoyse and Jelle Zijlstra.\nbpo-26295\n: When using “python3 -m test –testdir=TESTDIR”, regrtest\ndoesn’t add “test.” prefix to test module names.\nbpo-26523\n: The multiprocessing thread pool (multiprocessing.dummy.Pool)\nwas untested.\nbpo-26015\n: Added new tests for pickling iterators of mutable sequences.\nbpo-26325\n: Added test.support.check_no_resource_warning() to check that no\nResourceWarning is emitted.\nbpo-25940\n: Changed test_ssl to use its internal local server more.  This\navoids relying on svn.python.org, which recently changed root certificate.\nbpo-25616\n: Tests for OrderedDict are extracted from test_collections into\nseparate file test_ordered_dict.\nbpo-25449\n: Added tests for OrderedDict subclasses.\nbpo-25188\n: Add -P/–pgo to test.regrtest to suppress error output when\nrunning the test suite for the purposes of a PGO build. Initial patch by\nAlecsandru Patrascu.\nbpo-22806\n: Add\npython\n-m\ntest\n--list-tests\ncommand to list tests.\nbpo-18174\n:\npython\n-m\ntest\n--huntrleaks\n...\nnow also checks for leak of\nfile descriptors. Patch written by Richard Oudkerk.\nbpo-25260\n: Fix\npython\n-m\ntest\n--coverage\non Windows. Remove the list\nof ignored directories.\nPCbuild\\rt.bat\nnow accepts an unlimited number of arguments to pass\nalong to regrtest.py.  Previously there was a limit of 9.\nbpo-26583\n: Skip test_timestamp_overflow in test_import if bytecode files\ncannot be written.\nBuild\n¶\nbpo-21277\n: Don’t try to link _ctypes with a ffi_convenience library.\nbpo-26884\n: Fix linking extension modules for cross builds. Patch by Xavier\nde Gaye.\nbpo-26932\n: Fixed support of RTLD_* constants defined as enum values, not\nvia macros (in particular on Android).  Patch by Chi Hsuan Yen.\nbpo-22359\n: Disable the rules for running _freeze_importlib and pgen when\ncross-compiling.  The output of these programs is normally saved with the\nsource code anyway, and is still regenerated when doing a native build.\nPatch by Xavier de Gaye.\nbpo-21668\n: Link audioop, _datetime, _ctypes_test modules to libm, except\non Mac OS X. Patch written by Chi Hsuan Yen.\nbpo-25702\n: A –with-lto configure option has been added that will enable\nlink time optimizations at build time during a make profile-opt. Some\ncompilers and toolchains are known to not produce stable code when using\nLTO, be sure to test things thoroughly before relying on it. It can\nprovide a few % speed up over profile-opt alone.\nbpo-26624\n: Adds validation of ucrtbase[d].dll version with warning for old\nversions.\nbpo-17603\n: Avoid error about nonexistent fileblocks.o file by using a\nlower-level check for st_blocks in struct stat.\nbpo-26079\n: Fixing the build output folder for tix-8.4.3.6. Patch by Bjoern\nThiel.\nbpo-26465\n: Update Windows builds to use OpenSSL 1.0.2g.\nbpo-25348\n: Added\n--pgo\nand\n--pgo-job\narguments to\nPCbuild\\build.bat\nfor building with Profile-Guided Optimization.  The\nold\nPCbuild\\build_pgo.bat\nscript is removed.\nbpo-25827\n: Add support for building with ICC to\nconfigure\n, including a\nnew\n--with-icc\nflag.\nbpo-25696\n: Fix installation of Python on UNIX with make -j9.\nbpo-24986\n: It is now possible to build Python on Windows without errors\nwhen external libraries are not available.\nbpo-24421\n: Compile Modules/_math.c once, before building extensions.\nPreviously it could fail to compile properly if the math and cmath builds\nwere concurrent.\nbpo-26465\n: Update OS X 10.5+ 32-bit-only installer to build and link with\nOpenSSL 1.0.2g.\nbpo-26268\n: Update Windows builds to use OpenSSL 1.0.2f.\nbpo-25136\n: Support Apple Xcode 7’s new textual SDK stub libraries.\nbpo-24324\n: Do not enable unreachable code warnings when using gcc as the\noption does not work correctly in older versions of gcc and has been\nsilently removed as of gcc-4.5.\nWindows\n¶\nbpo-27053\n: Updates make_zip.py to correctly generate library ZIP file.\nbpo-26268\n: Update the prepare_ssl.py script to handle OpenSSL releases\nthat don’t include the contents of the include directory (that is, 1.0.2e\nand later).\nbpo-26071\n: bdist_wininst created binaries fail to start and find 32bit\nPython\nbpo-26073\n: Update the list of magic numbers in launcher\nbpo-26065\n: Excludes venv from library when generating embeddable distro.\nbpo-25022\n: Removed very outdated PC/example_nt/ directory.\nTools/Demos\n¶\nbpo-26799\n: Fix python-gdb.py: don’t get C types once when the Python code\nis loaded, but get C types on demand. The C types can change if\npython-gdb.py is loaded before the Python executable. Patch written by\nThomas Ilsche.\nbpo-26271\n: Fix the Freeze tool to properly use flags passed through\nconfigure. Patch by Daniel Shaulov.\nbpo-26489\n: Add dictionary unpacking support to Tools/parser/unparse.py.\nPatch by Guo Ci Teo.\nbpo-26316\n: Fix variable name typo in Argument Clinic.\nbpo-25440\n: Fix output of python-config –extension-suffix.\nbpo-25154\n: The pyvenv script has been deprecated in favour of\npython3\n-m\nvenv\n.\nC API\n¶\nbpo-26312\n: SystemError is now raised in all programming bugs with using\nPyArg_ParseTupleAndKeywords().  RuntimeError did raised before in some\nprogramming bugs.\nbpo-26198\n: ValueError is now raised instead of TypeError on buffer\noverflow in parsing “es#” and “et#” format units.  SystemError is now\nraised instead of TypeError on programmatical error in parsing format\nstring.\nPython 3.5.5 final\n¶\nRelease date: 2018-02-04\nThere were no new changes in version 3.5.5.\nPython 3.5.5 release candidate 1\n¶\nRelease date: 2018-01-23\nSecurity\n¶\nbpo-32551\n: The\nsys.path[0]\ninitialization change for\nbpo-29139\ncaused\na regression by revealing an inconsistency in how sys.path is initialized\nwhen executing\n__main__\nfrom a zipfile, directory, or other import\nlocation. This is considered a potential security issue, as it may lead to\nprivileged processes unexpectedly loading code from user controlled\ndirectories in situations where that was not previously the case. The\ninterpreter now consistently avoids ever adding the import location’s\nparent directory to\nsys.path\n, and ensures no other\nsys.path\nentries are inadvertently modified when inserting the import location\nnamed on the command line. (Originally reported as\nbpo-29723\nagainst\nPython 3.6rc1, but it was missed at the time that the then upcoming Python\n3.5.4 release would also be affected)\nbpo-30657\n: Fixed possible integer overflow in PyBytes_DecodeEscape,\nCVE 2017-1000158\n. Original patch by Jay Bosamiya; rebased to Python 3\nby Miro Hrončok.\nbpo-30947\n: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to\nget security fixes.\nCore and Builtins\n¶\nbpo-31095\n: Fix potential crash during GC caused by\ntp_dealloc\nwhich\ndoesn’t call\nPyObject_GC_UnTrack()\n.\nLibrary\n¶\nbpo-32072\n: Fixed issues with binary plists: Fixed saving bytearrays.\nIdentical objects will be saved only once. Equal references will be load\nas identical objects. Added support for saving and loading recursive data\nstructures.\nbpo-31170\n: expat: Update libexpat from 2.2.3 to 2.2.4. Fix copying of\npartial characters for UTF-8 input (libexpat bug 115):\nhttps://github.com/libexpat/libexpat/issues/115\nPython 3.5.4 final\n¶\nRelease date: 2017-08-07\nLibrary\n¶\nbpo-30119\n: ftplib.FTP.putline() now throws ValueError on commands that\ncontains CR or LF. Patch by Donghee Na.\nPython 3.5.4 release candidate 1\n¶\nRelease date: 2017-07-23\nSecurity\n¶\nbpo-30730\n: Prevent environment variables injection in subprocess on\nWindows.  Prevent passing other environment variables and command\narguments.\nbpo-30694\n: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple\nsecurity vulnerabilities including:\nCVE 2017-9233\n(External entity\ninfinite loop DoS),\nCVE 2016-9063\n(Integer overflow, re-fix),\nCVE 2016-0718\n(Fix regression bugs from 2.2.0’s fix to\nCVE 2016-0718\n) and\nCVE 2012-0876\n(Counter hash flooding with\nSipHash). Note: the\nCVE 2016-5300\n(Use os-specific entropy sources like\ngetrandom) doesn’t impact Python, since Python already gets entropy from\nthe OS to set the expat secret using\nXML_SetHashSalt()\n.\nbpo-30500\n: Fix urllib.parse.splithost() to correctly parse fragments. For\nexample,\nsplithost('//127.0.0.1#@evil.com/')\nnow correctly returns the\n127.0.0.1\nhost, instead of treating\n@evil.com\nas the host in an\nauthentication (\nlogin@host\n).\nbpo-29591\n: Update expat copy from 2.1.1 to 2.2.0 to get fixes of\nCVE 2016-0718\nand\nCVE 2016-4472\n. See\nhttps://sourceforge.net/p/expat/bugs/537/\nfor more information.\nCore and Builtins\n¶\nbpo-30876\n: Relative import from unloaded package now reimports the package\ninstead of failing with SystemError.  Relative import from non-package now\nfails with ImportError rather than SystemError.\nbpo-30765\n: Avoid blocking in pthread_mutex_lock() when\nPyThread_acquire_lock() is asked not to block.\nbpo-27945\n: Fixed various segfaults with dict when input collections are\nmutated during searching, inserting or comparing.  Based on patches by\nDuane Griffin and Tim Mitchell.\nbpo-25794\n: Fixed type.__setattr__() and type.__delattr__() for\nnon-interned attribute names.  Based on patch by Eryk Sun.\nbpo-29935\n: Fixed error messages in the index() method of tuple, list and\ndeque when pass indices of wrong type.\nbpo-28876\n:\nbool(range)\nworks even if\nlen(range)\nraises\nOverflowError\n.\nbpo-29600\n: Fix wrapping coroutine return values in StopIteration.\nbpo-29537\n: Restore runtime compatibility with bytecode files generated by\nCPython 3.5.0 to 3.5.2, and adjust the eval loop to avoid the problems\nthat could be caused by the malformed variant of the\nBUILD_MAP_UNPACK_WITH_CALL opcode that they may contain. Patch by Petr\nViktorin, Serhiy Storchaka, and Nick Coghlan.\nbpo-28598\n: Support __rmod__ for subclasses of str being called before\nstr.__mod__. Patch by Martijn Pieters.\nbpo-29602\n: Fix incorrect handling of signed zeros in complex constructor\nfor complex subclasses and for inputs having a __complex__ method. Patch\nby Serhiy Storchaka.\nbpo-29347\n: Fixed possibly dereferencing undefined pointers when creating\nweakref objects.\nbpo-29438\n: Fixed use-after-free problem in key sharing dict.\nbpo-29319\n: Prevent RunMainFromImporter overwriting sys.path[0].\nbpo-29337\n: Fixed possible BytesWarning when compare the code objects.\nWarnings could be emitted at compile time.\nbpo-29478\n: If max_line_length=None is specified while using the Compat32\npolicy, it is no longer ignored.  Patch by Mircea Cosbuc.\nLibrary\n¶\nbpo-29403\n: Fix\nunittest.mock\n’s autospec to not fail on method-bound\nbuiltin functions.  Patch by Aaron Gallagher.\nbpo-30961\n: Fix decrementing a borrowed reference in tracemalloc.\nbpo-30886\n: Fix multiprocessing.Queue.join_thread(): it now waits until the\nthread completes, even if the thread was started by the same process which\ncreated the queue.\nbpo-29854\n: Fix segfault in readline when using readline’s history-size\noption.  Patch by Nir Soffer.\nbpo-30807\n: signal.setitimer() may disable the timer when passed a tiny\nvalue. Tiny values (such as 1e-6) are valid non-zero values for\nsetitimer(), which is specified as taking microsecond-resolution\nintervals. However, on some platform, our conversion routine could convert\n1e-6 into a zero interval, therefore disabling the timer instead of\n(re-)scheduling it.\nbpo-30441\n: Fix bug when modifying os.environ while iterating over it\nbpo-30532\n: Fix email header value parser dropping folding white space in\ncertain cases.\nbpo-29169\n: Update zlib to 1.2.11.\nbpo-30879\n: os.listdir() and os.scandir() now emit bytes names when called\nwith bytes-like argument.\nbpo-30746\n: Prohibited the ‘=’ character in environment variable names in\nos.putenv()\nand\nos.spawn*()\n.\nbpo-29755\n: Fixed the lgettext() family of functions in the gettext module.\nThey now always return bytes.\nbpo-30645\n: Fix path calculation in imp.load_package(), fixing it for cases\nwhen a package is only shipped with bytecodes. Patch by Alexandru\nArdelean.\nbpo-23890\n: unittest.TestCase.assertRaises() now manually breaks a\nreference cycle to not keep objects alive longer than expected.\nbpo-30149\n: inspect.signature() now supports callables with\nvariable-argument parameters wrapped with partialmethod. Patch by Donghee\nNa.\nbpo-29931\n: Fixed comparison check for ipaddress.ip_interface objects.\nPatch by Sanjay Sundaresan.\nbpo-24484\n: Avoid race condition in multiprocessing cleanup.\nbpo-28994\n: The traceback no longer displayed for SystemExit raised in a\ncallback registered by atexit.\nbpo-30508\n: Don’t log exceptions if Task/Future “cancel()” method was\ncalled.\nbpo-28556\n: Updates to typing module: Add generic AsyncContextManager, add\nsupport for ContextManager on all versions. Original PRs by Jelle Zijlstra\nand Ivan Levkivskyi\nbpo-29870\n: Fix ssl sockets leaks when connection is aborted in asyncio/ssl\nimplementation. Patch by Michaël Sghaïer.\nbpo-29743\n: Closing transport during handshake process leaks open socket.\nPatch by Nikolay Kim\nbpo-27585\n: Fix waiter cancellation in asyncio.Lock. Patch by Mathieu\nSornay.\nbpo-30418\n: On Windows, subprocess.Popen.communicate() now also ignore\nEINVAL on stdin.write() if the child process is still running but closed\nthe pipe.\nbpo-30378\n: Fix the problem that logging.handlers.SysLogHandler cannot\nhandle IPv6 addresses.\nbpo-29960\n: Preserve generator state when _random.Random.setstate() raises\nan exception. Patch by Bryan Olson.\nbpo-30414\n: multiprocessing.Queue._feed background running thread do not\nbreak from main loop on exception.\nbpo-30003\n: Fix handling escape characters in HZ codec.  Based on patch by\nMa Lin.\nbpo-30301\n: Fix AttributeError when using SimpleQueue.empty() under\nspawn\nand\nforkserver\nstart methods.\nbpo-30329\n: imaplib and poplib now catch the Windows socket WSAEINVAL error\n(code 10022) on shutdown(SHUT_RDWR): An invalid operation was attempted.\nThis error occurs sometimes on SSL connections.\nbpo-30375\n: Warnings emitted when compile a regular expression now always\npoint to the line in the user code.  Previously they could point into\ninners of the re module if emitted from inside of groups or conditionals.\nbpo-30048\n: Fixed\nTask.cancel()\ncan be ignored when the task is running\ncoroutine and the coroutine returned without any more\nawait\n.\nbpo-29990\n: Fix range checking in GB18030 decoder.  Original patch by Ma\nLin.\nbpo-26293\n: Change resulted because of zipfile breakage. (See also:\nbpo-29094\n)\nbpo-30243\n: Removed the __init__ methods of _json’s scanner and encoder.\nMisusing them could cause memory leaks or crashes.  Now scanner and\nencoder objects are completely initialized in the __new__ methods.\nbpo-30185\n: Avoid KeyboardInterrupt tracebacks in forkserver helper process\nwhen Ctrl-C is received.\nbpo-28556\n: Various updates to typing module: add typing.NoReturn type, use\nWrapperDescriptorType, minor bug-fixes.  Original PRs by Jim\nFasarakis-Hilliard and Ivan Levkivskyi.\nbpo-30205\n: Fix getsockname() for unbound AF_UNIX sockets on Linux.\nbpo-30070\n: Fixed leaks and crashes in errors handling in the parser\nmodule.\nbpo-30061\n: Fixed crashes in IOBase methods __next__() and readlines() when\nreadline() or __next__() respectively return non-sizeable object. Fixed\npossible other errors caused by not checking results of PyObject_Size(),\nPySequence_Size(), or PyMapping_Size().\nbpo-30068\n: _io._IOBase.readlines will check if it’s closed first when hint\nis present.\nbpo-29694\n: Fixed race condition in pathlib mkdir with flags parents=True.\nPatch by Armin Rigo.\nbpo-29692\n: Fixed arbitrary unchaining of RuntimeError exceptions in\ncontextlib.contextmanager.  Patch by Siddharth Velankar.\nbpo-29998\n: Pickling and copying ImportError now preserves name and path\nattributes.\nbpo-29942\n: Fix a crash in itertools.chain.from_iterable when encountering\nlong runs of empty iterables.\nbpo-27863\n: Fixed multiple crashes in ElementTree caused by race conditions\nand wrong types.\nbpo-28699\n: Fixed a bug in pools in multiprocessing.pool that raising an\nexception at the very first of an iterable may swallow the exception or\nmake the program hang. Patch by Davin Potts and Xiang Zhang.\nbpo-25803\n: Avoid incorrect errors raised by Path.mkdir(exist_ok=True) when\nthe OS gives priority to errors such as EACCES over EEXIST.\nbpo-29861\n: Release references to tasks, their arguments and their results\nas soon as they are finished in multiprocessing.Pool.\nbpo-29884\n: faulthandler: Restore the old sigaltstack during teardown.\nPatch by Christophe Zeitouny.\nbpo-25455\n: Fixed crashes in repr of recursive buffered file-like objects.\nbpo-29800\n: Fix crashes in partial.__repr__ if the keys of partial.keywords\nare not strings.  Patch by Michael Seifert.\nbpo-29742\n: get_extra_info() raises exception if get called on closed ssl\ntransport. Patch by Nikolay Kim.\nbpo-8256\n: Fixed possible failing or crashing input() if attributes\n“encoding” or “errors” of sys.stdin or sys.stdout are not set or are not\nstrings.\nbpo-28298\n: Fix a bug that prevented array ‘Q’, ‘L’ and ‘I’ from accepting\nbig intables (objects that have __int__) as elements.  Patch by Oren\nMilman.\nbpo-29615\n: SimpleXMLRPCDispatcher no longer chains KeyError (or any other\nexception) to exception(s) raised in the dispatched methods. Patch by Petr\nMotejlek.\nbpo-29704\n: asyncio.subprocess.SubprocessStreamProtocol no longer closes\nbefore all pipes are closed.\nbpo-29703\n: Fix asyncio to support instantiation of new event loops in\nchild processes.\nbpo-29376\n: Fix assertion error in threading._DummyThread.is_alive().\nbpo-29110\n: Fix file object leak in aifc.open() when file is given as a\nfilesystem path and is not in valid AIFF format. Patch by Anthony Zhang.\nbpo-28961\n: Fix unittest.mock._Call helper: don’t ignore the name parameter\nanymore. Patch written by Jiajun Huang.\nbpo-29532\n: Altering a kwarg dictionary passed to functools.partial() no\nlonger affects a partial object after creation.\nbpo-28556\n: Various updates to typing module: typing.Counter,\ntyping.ChainMap, improved ABC caching, etc. Original PRs by Jelle\nZijlstra, Ivan Levkivskyi, Manuel Krebber, and Łukasz Langa.\nbpo-29100\n: Fix datetime.fromtimestamp() regression introduced in Python\n3.6.0: check minimum and maximum years.\nbpo-29519\n: Fix weakref spewing exceptions during interpreter shutdown when\nused with a rare combination of multiprocessing and custom codecs.\nbpo-29416\n: Prevent infinite loop in pathlib.Path.mkdir\nbpo-29444\n: Fixed out-of-bounds buffer access in the group() method of the\nmatch object. Based on patch by WGH.\nbpo-29335\n: Fix subprocess.Popen.wait() when the child process has exited\nto a stopped instead of terminated state (ex: when under ptrace).\nbpo-29290\n: Fix a regression in argparse that help messages would wrap at\nnon-breaking spaces.\nbpo-28735\n: Fixed the comparison of mock.MagickMock with mock.ANY.\nbpo-29011\n: Fix an important omission by adding Deque to the typing module.\nbpo-29219\n: Fixed infinite recursion in the repr of uninitialized\nctypes.CDLL instances.\nbpo-28969\n: Fixed race condition in C implementation of\nfunctools.lru_cache. KeyError could be raised when cached function with\nfull cache was simultaneously called from different threads with the same\nuncached arguments.\nbpo-29142\n: In urllib.request, suffixes in no_proxy environment variable\nwith leading dots could match related hostnames again (e.g. .b.c matches\na.b.c). Patch by Milan Oberkirch.\nDocumentation\n¶\nbpo-30176\n: Add missing attribute related constants in curses\ndocumentation.\nbpo-26985\n: Add missing info of code object in inspect documentation.\nbpo-28929\n: Link the documentation to its source file on GitHub.\nbpo-25008\n: Document smtpd.py as effectively deprecated and add a pointer\nto aiosmtpd, a third-party asyncio-based replacement.\nbpo-26355\n: Add canonical header link on each page to corresponding major\nversion of the documentation. Patch by Matthias Bussonnier.\nbpo-29349\n: Fix Python 2 syntax in code for building the documentation.\nTests\n¶\nbpo-30822\n: Fix regrtest command line parser to allow passing -u\nextralargefile to run test_zipfile64.\nbpo-30383\n: regrtest: Enhance regrtest and backport features from the\nmaster branch. Add options: –coverage, –testdir, –list-tests (list test\nfiles, don’t run them), –list-cases (list test identifiers, don’t run\nthem,\nbpo-30523\n), –matchfile (load a list of test filters from a\ntext file,\nbpo-30540\n), –slowest (alias to –slow). Enhance output:\nadd timestamp, test result, currently running tests, “Tests result: xxx”\nsummary with total duration, etc. Fix reference leak hunting in regrtest,\n–huntrleaks: regrtest now warms up caches, create explicitly all internal\nsingletons which are created on demand to prevent false positives when\nchecking for reference leaks. (\nbpo-30675\n).\nbpo-30357\n: test_thread: setUp() now uses support.threading_setup() and\nsupport.threading_cleanup() to wait until threads complete to avoid random\nside effects on following tests. Initial patch written by Grzegorz\nGrzywacz.\nbpo-28087\n: Skip test_asyncore and test_eintr poll failures on macOS. Skip\nsome tests of select.poll when running on macOS due to unresolved issues\nwith the underlying system poll function on some macOS versions.\nbpo-30197\n: Enhanced functions swap_attr() and swap_item() in the\ntest.support module. They now work when delete replaced attribute or item\ninside the with statement.  The old value of the attribute or item (or\nNone if it doesn’t exist) now will be assigned to the target of the “as”\nclause, if there is one.\nbpo-29571\n: to match the behaviour of the\nre.LOCALE\nflag,\ntest_re.test_locale_flag now uses\nlocale.getpreferredencoding(False)\nto determine the candidate encoding for the test regex (allowing it to\ncorrectly skip the test when the default locale encoding is a multi-byte\nencoding)\nBuild\n¶\nbpo-29243\n: Prevent unnecessary rebuilding of Python during\nmake\ntest\n,\nmake\ninstall\nand some other make targets when configured with\n--enable-optimizations\n.\nbpo-23404\n: Don’t regenerate generated files based on file modification\ntime anymore: the action is now explicit. Replace\nmake\ntouch\nwith\nmake\nregen-all\n.\nbpo-29643\n: Fix\n--enable-optimization\ndidn’t work.\nWindows\n¶\nbpo-30687\n: Locate msbuild.exe on Windows when building rather than\nvcvarsall.bat\nbpo-29392\n: Prevent crash when passing invalid arguments into msvcrt\nmodule.\nC API\n¶\nbpo-27867\n: Function PySlice_GetIndicesEx() is replaced with a macro if\nPy_LIMITED_API is set to the value between 0x03050400 and 0x03060000 (not\nincluding) or 0x03060100 or higher.\nbpo-29083\n: Fixed the declaration of some public API functions.\nPyArg_VaParse() and PyArg_VaParseTupleAndKeywords() were not available in\nlimited API. PyArg_ValidateKeywordArguments(), PyArg_UnpackTuple() and\nPy_BuildValue() were not available in limited API of version < 3.3 when\nPY_SSIZE_T_CLEAN is defined.\nPython 3.5.3 final\n¶\nRelease date: 2017-01-17\nThere were no code changes between 3.5.3rc1 and 3.5.3 final.\nPython 3.5.3 release candidate 1\n¶\nRelease date: 2017-01-02\nSecurity\n¶\nbpo-27278\n: Fix os.urandom() implementation using getrandom() on Linux.\nTruncate size to INT_MAX and loop until we collected enough random bytes,\ninstead of casting a directly Py_ssize_t to int.\nbpo-22636\n: Avoid shell injection problems with ctypes.util.find_library().\nCore and Builtins\n¶\nbpo-29073\n: bytearray formatting no longer truncates on first null byte.\nbpo-28932\n: Do not include <sys/random.h> if it does not exist.\nbpo-28147\n: Fix a memory leak in split-table dictionaries: setattr() must\nnot convert combined table into split table.\nbpo-25677\n: Correct the positioning of the syntax error caret for indented\nblocks. Based on patch by Michael Layzell.\nbpo-29000\n: Fixed bytes formatting of octals with zero padding in alternate\nform.\nbpo-28512\n: Fixed setting the offset attribute of SyntaxError by\nPyErr_SyntaxLocationEx() and PyErr_SyntaxLocationObject().\nbpo-28991\n: functools.lru_cache() was susceptible to an obscure reentrancy\nbug caused by a monkey-patched len() function.\nbpo-28648\n: Fixed crash in Py_DecodeLocale() in debug build on Mac OS X\nwhen decode astral characters.  Patch by Xiang Zhang.\nbpo-19398\n: Extra slash no longer added to sys.path components in case of\nempty compile-time PYTHONPATH components.\nbpo-28426\n: Fixed potential crash in PyUnicode_AsDecodedObject() in debug\nbuild.\nbpo-23782\n: Fixed possible memory leak in _PyTraceback_Add() and exception\nloss in PyTraceBack_Here().\nbpo-28379\n: Added sanity checks and tests for PyUnicode_CopyCharacters().\nPatch by Xiang Zhang.\nbpo-28376\n: The type of long range iterator is now registered as Iterator.\nPatch by Oren Milman.\nbpo-28376\n: The constructor of range_iterator now checks that step is not\n0. Patch by Oren Milman.\nbpo-26906\n: Resolving special methods of uninitialized type now causes\nimplicit initialization of the type instead of a fail.\nbpo-18287\n: PyType_Ready() now checks that tp_name is not NULL. Original\npatch by Niklas Koep.\nbpo-24098\n: Fixed possible crash when AST is changed in process of\ncompiling it.\nbpo-28350\n: String constants with null character no longer interned.\nbpo-26617\n: Fix crash when GC runs during weakref callbacks.\nbpo-27942\n: String constants now interned recursively in tuples and\nfrozensets.\nbpo-21578\n: Fixed misleading error message when ImportError called with\ninvalid keyword args.\nbpo-28203\n: Fix incorrect type in error message from\ncomplex(1.0,\n{2:3})\n. Patch by Soumya Sharma.\nbpo-27955\n: Fallback on reading /dev/urandom device when the getrandom()\nsyscall fails with EPERM, for example when blocked by SECCOMP.\nbpo-28131\n: Fix a regression in zipimport’s compile_source().  zipimport\nshould use the same optimization level as the interpreter.\nbpo-25221\n: Fix corrupted result from PyLong_FromLong(0) when Python is\ncompiled with NSMALLPOSINTS = 0.\nbpo-25758\n: Prevents zipimport from unnecessarily encoding a filename\n(patch by Eryk Sun)\nbpo-28189\n: dictitems_contains no longer swallows compare errors. (Patch by\nXiang Zhang)\nbpo-27812\n: Properly clear out a generator’s frame’s backreference to the\ngenerator to prevent crashes in frame.clear().\nbpo-27811\n: Fix a crash when a coroutine that has not been awaited is\nfinalized with warnings-as-errors enabled.\nbpo-27587\n: Fix another issue found by PVS-Studio: Null pointer check after\nuse of ‘def’ in _PyState_AddModule(). Initial patch by Christian Heimes.\nbpo-26020\n: set literal evaluation order did not match documented\nbehaviour.\nbpo-27782\n: Multi-phase extension module import now correctly allows the\nm_methods\nfield to be used to add module level functions to instances\nof non-module types returned from\nPy_create_mod\n. Patch by Xiang Zhang.\nbpo-27936\n: The round() function accepted a second None argument for some\ntypes but not for others.  Fixed the inconsistency by accepting None for\nall numeric types.\nbpo-27487\n: Warn if a submodule argument to “python -m” or\nrunpy.run_module() is found in sys.modules after parent packages are\nimported, but before the submodule is executed.\nbpo-27558\n: Fix a SystemError in the implementation of “raise” statement.\nIn a brand new thread, raise a RuntimeError since there is no active\nexception to reraise. Patch written by Xiang Zhang.\nbpo-27419\n: Standard __import__() no longer look up “__import__” in globals\nor builtins for importing submodules or “from import”.  Fixed handling an\nerror of non-string package name.\nbpo-27083\n: Respect the PYTHONCASEOK environment variable under Windows.\nbpo-27514\n: Make having too many statically nested blocks a SyntaxError\ninstead of SystemError.\nbpo-27473\n: Fixed possible integer overflow in bytes and bytearray\nconcatenations. Patch by Xiang Zhang.\nbpo-27507\n: Add integer overflow check in bytearray.extend().  Patch by\nXiang Zhang.\nbpo-27581\n: Don’t rely on wrapping for overflow check in\nPySequence_Tuple().  Patch by Xiang Zhang.\nbpo-27443\n: __length_hint__() of bytearray iterators no longer return a\nnegative integer for a resized bytearray.\nbpo-27942\n: Fix memory leak in codeobject.c\nLibrary\n¶\nbpo-15812\n: inspect.getframeinfo() now correctly shows the first line of a\ncontext. Patch by Sam Breese.\nbpo-29094\n: Offsets in a ZIP file created with extern file object and modes\n“w” and “x” now are relative to the start of the file.\nbpo-13051\n: Fixed recursion errors in large or resized\ncurses.textpad.Textbox.  Based on patch by Tycho Andersen.\nbpo-29119\n: Fix weakrefs in the pure python version of\ncollections.OrderedDict move_to_end() method. Contributed by Andra\nBogildea.\nbpo-9770\n: curses.ascii predicates now work correctly with negative\nintegers.\nbpo-28427\n: old keys should not remove new values from WeakValueDictionary\nwhen collecting from another thread.\nbpo-28923\n: Remove editor artifacts from Tix.py.\nbpo-28871\n: Fixed a crash when deallocate deep ElementTree.\nbpo-19542\n: Fix bugs in WeakValueDictionary.setdefault() and\nWeakValueDictionary.pop() when a GC collection happens in another thread.\nbpo-20191\n: Fixed a crash in resource.prlimit() when pass a sequence that\ndoesn’t own its elements as limits.\nbpo-28779\n: multiprocessing.set_forkserver_preload() would crash the\nforkserver process if a preloaded module instantiated some multiprocessing\nobjects such as locks.\nbpo-28847\n: dbm.dumb now supports reading read-only files and no longer\nwrites the index file when it is not changed.\nbpo-25659\n: In ctypes, prevent a crash calling the from_buffer() and\nfrom_buffer_copy() methods on abstract classes like Array.\nbpo-28732\n: Fix crash in os.spawnv() with no elements in args\nbpo-28485\n: Always raise ValueError for negative\ncompileall.compile_dir(workers=…) parameter, even when multithreading is\nunavailable.\nbpo-28387\n: Fixed possible crash in _io.TextIOWrapper deallocator when the\ngarbage collector is invoked in other thread.  Based on patch by Sebastian\nCufre.\nbpo-27517\n: LZMA compressor and decompressor no longer raise exceptions if\ngiven empty data twice.  Patch by Benjamin Fogle.\nbpo-28549\n: Fixed segfault in curses’s addch() with ncurses6.\nbpo-28449\n: tarfile.open() with mode “r” or “r:” now tries to open a tar\nfile with compression before trying to open it without compression.\nOtherwise it had 50% chance failed with ignore_zeros=True.\nbpo-23262\n: The webbrowser module now supports Firefox 36+ and derived\nbrowsers.  Based on patch by Oleg Broytman.\nbpo-27939\n: Fixed bugs in tkinter.ttk.LabeledScale and tkinter.Scale caused\nby representing the scale as float value internally in Tk.  tkinter.IntVar\nnow works if float value is set to underlying Tk variable.\nbpo-28255\n: calendar.TextCalendar().prmonth() no longer prints a space at\nthe start of new line after printing a month’s calendar.  Patch by Xiang\nZhang.\nbpo-20491\n: The textwrap.TextWrapper class now honors non-breaking spaces.\nBased on patch by Kaarle Ritvanen.\nbpo-28353\n: os.fwalk() no longer fails on broken links.\nbpo-25464\n: Fixed HList.header_exists() in tkinter.tix module by addin a\nworkaround to Tix library bug.\nbpo-28488\n: shutil.make_archive() no longer add entry “./” to ZIP archive.\nbpo-24452\n: Make webbrowser support Chrome on Mac OS X.\nbpo-20766\n: Fix references leaked by pdb in the handling of SIGINT\nhandlers.\nbpo-26293\n: Fixed writing ZIP files that starts not from the start of the\nfile.  Offsets in ZIP file now are relative to the start of the archive in\nconforming to the specification.\nbpo-28321\n: Fixed writing non-BMP characters with binary format in\nplistlib.\nbpo-28322\n: Fixed possible crashes when unpickle itertools objects from\nincorrect pickle data.  Based on patch by John Leitch.\nFix possible integer overflows and crashes in the mmap module with unusual\nusage patterns.\nbpo-1703178\n: Fix the ability to pass the –link-objects option to the\ndistutils build_ext command.\nbpo-28253\n: Fixed calendar functions for extreme months: 0001-01 and\n9999-12. Methods itermonthdays() and itermonthdays2() are reimplemented so\nthat they don’t call itermonthdates() which can cause datetime.date\nunder/overflow.\nbpo-28275\n: Fixed possible use after free in the decompress() methods of\nthe LZMADecompressor and BZ2Decompressor classes. Original patch by John\nLeitch.\nbpo-27897\n: Fixed possible crash in sqlite3.Connection.create_collation()\nif pass invalid string-like object as a name.  Patch by Xiang Zhang.\nbpo-18893\n: Fix invalid exception handling in Lib/ctypes/macholib/dyld.py.\nPatch by Madison May.\nbpo-27611\n: Fixed support of default root window in the tkinter.tix module.\nbpo-27348\n: In the traceback module, restore the formatting of exception\nmessages like “Exception: None”.  This fixes a regression introduced in\n3.5a2.\nbpo-25651\n: Allow false values to be used for msg parameter of subTest().\nbpo-27932\n: Prevent memory leak in win32_ver().\nFix UnboundLocalError in socket._sendfile_use_sendfile.\nbpo-28075\n: Check for ERROR_ACCESS_DENIED in Windows implementation of\nos.stat().  Patch by Eryk Sun.\nbpo-25270\n: Prevent codecs.escape_encode() from raising SystemError when an\nempty bytestring is passed.\nbpo-28181\n: Get antigravity over HTTPS. Patch by Kaartic Sivaraam.\nbpo-25895\n: Enable WebSocket URL schemes in urllib.parse.urljoin. Patch by\nGergely Imreh and Markus Holtermann.\nbpo-27599\n: Fixed buffer overrun in binascii.b2a_qp() and\nbinascii.a2b_qp().\nbpo-19003\n: m email.generator now replaces only\n\\r\nand/or\n\\n\nline\nendings, per the RFC, instead of all unicode line endings.\nbpo-28019\n: itertools.count() no longer rounds non-integer step in range\nbetween 1.0 and 2.0 to 1.\nbpo-25969\n: Update the lib2to3 grammar to handle the unpacking\ngeneralizations added in 3.5.\nbpo-14977\n: mailcap now respects the order of the lines in the mailcap\nfiles (“first match”), as required by RFC 1542.  Patch by Michael Lazar.\nbpo-24594\n: Validates persist parameter when opening MSI database\nbpo-17582\n: xml.etree.ElementTree nows preserves whitespaces in attributes\n(Patch by Duane Griffin.  Reviewed and approved by Stefan Behnel.)\nbpo-28047\n: Fixed calculation of line length used for the base64 CTE in the\nnew email policies.\nbpo-27445\n: Don’t pass str(_charset) to MIMEText.set_payload(). Patch by\nClaude Paroz.\nbpo-22450\n: urllib now includes an\nAccept:\n*/*\nheader among the default\nheaders. This makes the results of REST API requests more consistent and\npredictable especially when proxy servers are involved.\nlib2to3.pgen3.driver.load_grammar() now creates a stable cache file\nbetween runs given the same Grammar.txt input regardless of the hash\nrandomization setting.\nbpo-27570\n: Avoid zero-length memcpy() etc calls with null source pointers\nin the “ctypes” and “array” modules.\nbpo-22233\n: Break email header lines\nonly\non the RFC specified CR and LF\ncharacters, not on arbitrary unicode line breaks.  This also fixes a bug\nin HTTP header parsing.\nbpo-27988\n: Fix email iter_attachments incorrect mutation of payload list.\nbpo-27691\n: Fix ssl module’s parsing of GEN_RID subject alternative name\nfields in X.509 certs.\nbpo-27850\n: Remove 3DES from ssl module’s default cipher list to counter\nmeasure sweet32 attack (\nCVE 2016-2183\n).\nbpo-27766\n: Add ChaCha20 Poly1305 to ssl module’s default cipher list.\n(Required OpenSSL 1.1.0 or LibreSSL).\nbpo-26470\n: Port ssl and hashlib module to OpenSSL 1.1.0.\nRemove support for passing a file descriptor to os.access. It never worked\nbut previously didn’t raise.\nbpo-12885\n: Fix error when distutils encounters symlink.\nbpo-27881\n: Fixed possible bugs when setting\nsqlite3.Connection.isolation_level. Based on patch by Xiang Zhang.\nbpo-27861\n: Fixed a crash in sqlite3.Connection.cursor() when a factory\ncreates not a cursor.  Patch by Xiang Zhang.\nbpo-19884\n: Avoid spurious output on OS X with Gnu Readline.\nbpo-27706\n: Restore deterministic behavior of random.Random().seed() for\nstring seeds using seeding version 1.  Allows sequences of calls to\nrandom() to exactly match those obtained in Python 2. Patch by Nofar\nSchnider.\nbpo-10513\n: Fix a regression in Connection.commit().  Statements should not\nbe reset after a commit.\nA new version of typing.py from\nhttps://github.com/python/typing\n:\nCollection (only for 3.6) (\nbpo-27598\n). Add FrozenSet to __all__\n(upstream #261). Fix crash in _get_type_vars() (upstream #259). Remove the\ndict constraint in ForwardRef._eval_type (upstream #252).\nbpo-27539\n: Fix unnormalised\nFraction.__pow__\nresult in the case of\nnegative exponent and negative base.\nbpo-21718\n: cursor.description is now available for queries using CTEs.\nbpo-2466\n: posixpath.ismount now correctly recognizes mount points which\nthe user does not have permission to access.\nbpo-27773\n: Correct some memory management errors server_hostname in\n_ssl.wrap_socket().\nbpo-26750\n: unittest.mock.create_autospec() now works properly for\nsubclasses of property() and other data descriptors.\nIn the curses module, raise an error if window.getstr() or window.instr()\nis passed a negative value.\nbpo-27783\n: Fix possible usage of uninitialized memory in\noperator.methodcaller.\nbpo-27774\n: Fix possible Py_DECREF on unowned object in _sre.\nbpo-27760\n: Fix possible integer overflow in binascii.b2a_qp.\nbpo-27758\n: Fix possible integer overflow in the _csv module for large\nrecord lengths.\nbpo-27568\n: Prevent HTTPoxy attack (\nCVE 2016-1000110\n). Ignore the\nHTTP_PROXY variable when REQUEST_METHOD environment is set, which\nindicates that the script is in CGI mode.\nbpo-27656\n: Do not assume sched.h defines any SCHED_* constants.\nbpo-27130\n: In the “zlib” module, fix handling of large buffers (typically\n4 GiB) when compressing and decompressing.  Previously, inputs were\nlimited to 4 GiB, and compression and decompression operations did not\nproperly handle results of 4 GiB.\nbpo-27533\n: Release GIL in nt._isdir\nbpo-17711\n: Fixed unpickling by the persistent ID with protocol 0. Original\npatch by Alexandre Vassalotti.\nbpo-27522\n: Avoid an unintentional reference cycle in email.feedparser.\nbpo-26844\n: Fix error message for imp.find_module() to refer to ‘path’\ninstead of ‘name’. Patch by Lev Maximov.\nbpo-23804\n: Fix SSL zero-length recv() calls to not block and not raise an\nerror about unclean EOF.\nbpo-27466\n: Change time format returned by http.cookie.time2netscape,\nconfirming the netscape cookie format and making it consistent with\ndocumentation.\nbpo-26664\n: Fix activate.fish by removing mis-use of\n$\n.\nbpo-22115\n: Fixed tracing Tkinter variables: trace_vdelete() with wrong\nmode no longer break tracing, trace_vinfo() now always returns a list of\npairs of strings, tracing in the “u” mode now works.\nFix a scoping issue in importlib.util.LazyLoader which triggered an\nUnboundLocalError when lazy-loading a module that was already put into\nsys.modules.\nbpo-27079\n: Fixed curses.ascii functions isblank(), iscntrl() and\nispunct().\nbpo-26754\n: Some functions (compile() etc) accepted a filename argument\nencoded as an iterable of integers. Now only strings and byte-like objects\nare accepted.\nbpo-27048\n: Prevents distutils failing on Windows when environment\nvariables contain non-ASCII characters\nbpo-27330\n: Fixed possible leaks in the ctypes module.\nbpo-27238\n: Got rid of bare excepts in the turtle module.  Original patch\nby Jelle Zijlstra.\nbpo-27122\n: When an exception is raised within the context being managed by\na contextlib.ExitStack() and one of the exit stack generators catches and\nraises it in a chain, do not re-raise the original exception when exiting,\nlet the new chained one through.  This avoids the\nPEP 479\nbug described\nin issue25782.\nbpo-26386\n: Fixed ttk.TreeView selection operations with item id’s\ncontaining spaces.\nbpo-16182\n: Fix various functions in the “readline” module to use the\nlocale encoding, and fix get_begidx() and get_endidx() to return code\npoint indexes.\nbpo-27392\n: Add loop.connect_accepted_socket(). Patch by Jim Fulton.\nbpo-27930\n: Improved behaviour of logging.handlers.QueueListener. Thanks to\nPaulo Andrade and Petr Viktorin for the analysis and patch.\nbpo-21201\n: Improves readability of multiprocessing error message.  Thanks\nto Wojciech Walczak for patch.\nbpo-27456\n: asyncio: Set TCP_NODELAY by default.\nbpo-27906\n: Fix socket accept exhaustion during high TCP traffic. Patch by\nKevin Conway.\nbpo-28174\n: Handle when SO_REUSEPORT isn’t properly supported. Patch by\nSeth Michael Larson.\nbpo-26654\n: Inspect functools.partial in asyncio.Handle.__repr__. Patch by\niceboy.\nbpo-26909\n: Fix slow pipes IO in asyncio. Patch by INADA Naoki.\nbpo-28176\n: Fix callbacks race in asyncio.SelectorLoop.sock_connect.\nbpo-27759\n: Fix selectors incorrectly retain invalid file descriptors.\nPatch by Mark Williams.\nbpo-28368\n: Refuse monitoring processes if the child watcher has no loop\nattached. Patch by Vincent Michel.\nbpo-28369\n: Raise RuntimeError when transport’s FD is used with add_reader,\nadd_writer, etc.\nbpo-28370\n: Speedup asyncio.StreamReader.readexactly. Patch by Коренберг\nМарк.\nbpo-28371\n: Deprecate passing asyncio.Handles to run_in_executor.\nbpo-28372\n: Fix asyncio to support formatting of non-python coroutines.\nbpo-28399\n: Remove UNIX socket from FS before binding. Patch by Коренберг\nМарк.\nbpo-27972\n: Prohibit Tasks to await on themselves.\nbpo-26923\n: Fix asyncio.Gather to refuse being cancelled once all children\nare done. Patch by Johannes Ebke.\nbpo-26796\n: Don’t configure the number of workers for default threadpool\nexecutor. Initial patch by Hans Lawrenz.\nbpo-28600\n: Optimize loop.call_soon().\nbpo-28613\n: Fix get_event_loop() return the current loop if called from\ncoroutines/callbacks.\nbpo-28639\n: Fix inspect.isawaitable to always return bool Patch by Justin\nMayfield.\nbpo-28652\n: Make loop methods reject socket kinds they do not support.\nbpo-28653\n: Fix a refleak in functools.lru_cache.\nbpo-28703\n: Fix asyncio.iscoroutinefunction to handle Mock objects.\nbpo-24142\n: Reading a corrupt config file left the parser in an invalid\nstate.  Original patch by Florian Höch.\nbpo-28990\n: Fix SSL hanging if connection is closed before handshake\ncompleted. (Patch by HoHo-Ho)\nIDLE\n¶\nbpo-15308\n: Add ‘interrupt execution’ (^C) to Shell menu. Patch by Roger\nSerwy, updated by Bayard Randel.\nbpo-27922\n: Stop IDLE tests from ‘flashing’ gui widgets on the screen.\nAdd version to title of IDLE help window.\nbpo-25564\n: In section on IDLE – console differences, mention that using\nexec means that __builtins__ is defined for each statement.\nbpo-27714\n: text_textview and test_autocomplete now pass when re-run in the\nsame process.  This occurs when test_idle fails when run with the -w\noption but without -jn.  Fix warning from test_config.\nbpo-25507\n: IDLE no longer runs buggy code because of its tkinter imports.\nUsers must include the same imports required to run directly in Python.\nbpo-27452\n: add line counter and crc to IDLE configHandler test dump.\nbpo-27365\n: Allow non-ascii chars in IDLE NEWS.txt, for contributor names.\nbpo-27245\n: IDLE: Cleanly delete custom themes and key bindings.\nPreviously, when IDLE was started from a console or by import, a cascade\nof warnings was emitted. Patch by Serhiy Storchaka.\nC API\n¶\nbpo-28808\n: PyUnicode_CompareWithASCIIString() now never raises exceptions.\nbpo-26754\n: PyUnicode_FSDecoder() accepted a filename argument encoded as\nan iterable of integers. Now only strings and bytes-like objects are\naccepted.\nDocumentation\n¶\nbpo-28513\n: Documented command-line interface of zipfile.\nTests\n¶\nbpo-28950\n: Disallow -j0 to be combined with -T/-l/-M in regrtest command\nline arguments.\nbpo-28666\n: Now test.support.rmtree is able to remove unwritable or\nunreadable directories.\nbpo-23839\n: Various caches now are cleared before running every test file.\nbpo-28409\n: regrtest: fix the parser of command line arguments.\nbpo-27787\n: Call gc.collect() before checking each test for “dangling\nthreads”, since the dangling threads are weak references.\nbpo-27369\n: In test_pyexpat, avoid testing an error message detail that\nchanged in Expat 2.2.0.\nTools/Demos\n¶\nbpo-27952\n: Get Tools/scripts/fixcid.py working with Python 3 and the\ncurrent “re” module, avoid invalid Python backslash escapes, and fix a bug\nparsing escaped C quote signs.\nbpo-27332\n: Fixed the type of the first argument of module-level functions\ngenerated by Argument Clinic.  Patch by Petr Viktorin.\nbpo-27418\n: Fixed Tools/importbench/importbench.py.\nWindows\n¶\nbpo-28251\n: Improvements to help manuals on Windows.\nbpo-28110\n: launcher.msi has different product codes between 32-bit and\n64-bit\nbpo-25144\n: Ensures TargetDir is set before continuing with custom install.\nbpo-27469\n: Adds a shell extension to the launcher so that drag and drop\nworks correctly.\nbpo-27309\n: Enabled proper Windows styles in python[w].exe manifest.\nBuild\n¶\nbpo-29080\n: Removes hard dependency on hg.exe from PCBuild/build.bat\nbpo-23903\n: Added missed names to PC/python3.def.\nbpo-10656\n: Fix out-of-tree building on AIX.  Patch by Tristan Carel and\nMichael Haubenwallner.\nbpo-26359\n: Rename –with-optimiations to –enable-optimizations.\nbpo-28444\n: Fix missing extensions modules when cross compiling.\nbpo-28248\n: Update Windows build and OS X installers to use OpenSSL 1.0.2j.\nbpo-28258\n: Fixed build with Estonian locale (python-config and distclean\ntargets in Makefile).  Patch by Arfrever Frehtes Taifersar Arahesis.\nbpo-26661\n: setup.py now detects system libffi with multiarch wrapper.\nbpo-28066\n: Fix the logic that searches build directories for generated\ninclude files when building outside the source tree.\nbpo-15819\n: Remove redundant include search directory option for building\noutside the source tree.\nbpo-27566\n: Fix clean target in freeze makefile (patch by Lisa Roach)\nbpo-27705\n: Update message in validate_ucrtbase.py\nbpo-27983\n: Cause lack of llvm-profdata tool when using clang as required\nfor PGO linking to be a configure time error rather than make time when\n–with-optimizations is enabled.  Also improve our ability to find the\nllvm-profdata tool on MacOS and some Linuxes.\nbpo-26307\n: The profile-opt build now applies PGO to the built-in modules.\nbpo-26359\n: Add the –with-optimizations configure flag.\nbpo-27713\n: Suppress spurious build warnings when updating importlib’s\nbootstrap files. Patch by Xiang Zhang\nbpo-25825\n: Correct the references to Modules/python.exp and ld_so_aix,\nwhich are required on AIX.  This updates references to an installation\npath that was changed in 3.2a4, and undoes changed references to the build\ntree that were made in 3.5.0a1.\nbpo-27453\n: CPP invocation in configure must use CPPFLAGS. Patch by Chi\nHsuan Yen.\nbpo-27641\n: The configure script now inserts comments into the makefile to\nprevent the pgen and _freeze_importlib executables from being\ncross-compiled.\nbpo-26662\n: Set PYTHON_FOR_GEN in configure as the Python program to be\nused for file generation during the build.\nbpo-10910\n: Avoid C++ compilation errors on FreeBSD and OS X. Also update\nFreedBSD version checks for the original ctype UTF-8 workaround.\nbpo-28676\n: Prevent missing ‘getentropy’ declaration warning on macOS.\nPatch by Gareth Rees.\nPython 3.5.2 final\n¶\nRelease date: 2016-06-26\nCore and Builtins\n¶\nbpo-26930\n: Update Windows builds to use OpenSSL 1.0.2h.\nTests\n¶\nbpo-26867\n: Ubuntu’s openssl OP_NO_SSLv3 is forced on by default; fix test.\nIDLE\n¶\nbpo-27365\n: Allow non-ascii in idlelib/NEWS.txt - minimal part for 3.5.2.\nPython 3.5.2 release candidate 1\n¶\nRelease date: 2016-06-12\nSecurity\n¶\nbpo-26556\n: Update expat to 2.1.1, fixes\nCVE 2015-1283\n.\nFix TLS stripping vulnerability in smtplib,\nCVE 2016-0772\n. Reported by\nTeam Oststrom.\nbpo-26839\n: On Linux,\nos.urandom()\nnow calls\ngetrandom()\nwith\nGRND_NONBLOCK\nto fall back on reading\n/dev/urandom\nif the urandom\nentropy pool is not initialized yet. Patch written by Colm Buckley.\nbpo-26657\n: Fix directory traversal vulnerability with http.server on\nWindows.  This fixes a regression that was introduced in 3.3.4rc1 and\n3.4.0rc1.  Based on patch by Philipp Hagemeister.\nbpo-26313\n: ssl.py _load_windows_store_certs fails if windows cert store is\nempty. Patch by Baji.\nbpo-25939\n: On Windows open the cert store readonly in\nssl.enum_certificates.\nCore and Builtins\n¶\nbpo-27066\n: Fixed SystemError if a custom opener (for open()) returns a\nnegative number without setting an exception.\nbpo-20041\n: Fixed TypeError when frame.f_trace is set to None. Patch by\nXavier de Gaye.\nbpo-26168\n: Fixed possible refleaks in failing Py_BuildValue() with the “N”\nformat unit.\nbpo-26991\n: Fix possible refleak when creating a function with annotations.\nbpo-27039\n: Fixed bytearray.remove() for values greater than 127.  Patch by\nJoe Jevnik.\nbpo-23640\n: int.from_bytes() no longer bypasses constructors for\nsubclasses.\nbpo-26811\n: gc.get_objects() no longer contains a broken tuple with NULL\npointer.\nbpo-20120\n: Use RawConfigParser for .pypirc parsing, removing support for\ninterpolation unintentionally added with move to Python 3. Behavior no\nlonger does any interpolation in .pypirc files, matching behavior in\nPython 2.7 and Setuptools 19.0.\nbpo-26659\n: Make the builtin slice type support cycle collection.\nbpo-26718\n: super.__init__ no longer leaks memory if called multiple times.\nNOTE: A direct call of super.__init__ is not endorsed!\nbpo-25339\n: PYTHONIOENCODING now has priority over locale in setting the\nerror handler for stdin and stdout.\nbpo-26494\n: Fixed crash on iterating exhausting iterators. Affected classes\nare generic sequence iterators, iterators of str, bytes, bytearray, list,\ntuple, set, frozenset, dict, OrderedDict, corresponding views and\nos.scandir() iterator.\nbpo-26581\n: If coding cookie is specified multiple times on a line in\nPython source code file, only the first one is taken to account.\nbpo-26464\n: Fix str.translate() when string is ASCII and first replacements\nremoves character, but next replacement uses a non-ASCII character or a\nstring longer than 1 character. Regression introduced in Python 3.5.0.\nbpo-22836\n: Ensure exception reports from PyErr_Display() and\nPyErr_WriteUnraisable() are sensible even when formatting them produces\nsecondary errors.  This affects the reports produced by\nsys.__excepthook__() and when __del__() raises an exception.\nbpo-26302\n: Correct behavior to reject comma as a legal character for\ncookie names.\nbpo-4806\n: Avoid masking the original TypeError exception when using star\n(\n*\n) unpacking in function calls.  Based on patch by Hagen Fürstenau\nand Daniel Urban.\nbpo-27138\n: Fix the doc comment for FileFinder.find_spec().\nbpo-26154\n: Add a new private _PyThreadState_UncheckedGet() function to get\nthe current Python thread state, but don’t issue a fatal error if it is\nNULL. This new function must be used instead of accessing directly the\n_PyThreadState_Current variable.  The variable is no more exposed since\nPython 3.5.1 to hide the exact implementation of atomic C types, to avoid\ncompiler issues.\nbpo-26194\n: Deque.insert() gave odd results for bounded deques that had\nreached their maximum size.  Now an IndexError will be raised when\nattempting to insert into a full deque.\nbpo-25843\n: When compiling code, don’t merge constants if they are equal\nbut have a different types. For example,\nf1,\nf2\n=\nlambda:\n1,\nlambda:\n1.0\nis now correctly compiled to two different functions:\nf1()\nreturns\n1\n(\nint\n) and\nf2()\nreturns\n1.0\n(\nint\n), even if\n1\nand\n1.0\nare equal.\nbpo-22995\n: [UPDATE] Comment out the one of the pickleability tests in\n_PyObject_GetState() due to regressions observed in Cython-based projects.\nbpo-25961\n: Disallowed null characters in the type name.\nbpo-25973\n: Fix segfault when an invalid nonlocal statement binds a name\nstarting with two underscores.\nbpo-22995\n: Instances of extension types with a state that aren’t\nsubclasses of list or dict and haven’t implemented any pickle-related\nmethods (__reduce__, __reduce_ex__, __getnewargs__, __getnewargs_ex__, or\n__getstate__), can no longer be pickled.  Including memoryview.\nbpo-20440\n: Massive replacing unsafe attribute setting code with special\nmacro Py_SETREF.\nbpo-25766\n: Special method __bytes__() now works in str subclasses.\nbpo-25421\n: __sizeof__ methods of builtin types now use dynamic basic size.\nThis allows sys.getsize() to work correctly with their subclasses with\n__slots__ defined.\nbpo-25709\n: Fixed problem with in-place string concatenation and utf-8\ncache.\nbpo-27147\n: Mention\nPEP 420\nin the importlib docs.\nbpo-24097\n: Fixed crash in object.__reduce__() if slot name is freed inside\n__getattr__.\nbpo-24731\n: Fixed crash on converting objects with special methods\n__bytes__, __trunc__, and __float__ returning instances of subclasses of\nbytes, int, and float to subclasses of bytes, int, and float\ncorrespondingly.\nbpo-26478\n: Fix semantic bugs when using binary operators with dictionary\nviews and tuples.\nbpo-26171\n: Fix possible integer overflow and heap corruption in\nzipimporter.get_data().\nbpo-25660\n: Fix TAB key behaviour in REPL with readline.\nbpo-25887\n: Raise a RuntimeError when a coroutine object is awaited more\nthan once.\nbpo-27243\n: Update the __aiter__ protocol: instead of returning an\nawaitable that resolves to an asynchronous iterator, the asynchronous\niterator should be returned directly.  Doing the former will trigger a\nPendingDeprecationWarning.\nLibrary\n¶\nbpo-21386\n: Implement missing IPv4Address.is_global property.  It was\ndocumented since 07a5610bae9d.  Initial patch by Roger Luethi.\nbpo-20900\n: distutils register command now decodes HTTP responses\ncorrectly.  Initial patch by ingrid.\nA new version of typing.py provides several new classes and features:\n@overload outside stubs, Reversible, DefaultDict, Text, ContextManager,\nType[], NewType(), TYPE_CHECKING, and numerous bug fixes (note that some\nof the new features are not yet implemented in mypy or other static\nanalyzers). Also classes for\nPEP 492\n(Awaitable, AsyncIterable,\nAsyncIterator) have been added (in fact they made it into 3.5.1 but were\nnever mentioned).\nbpo-25738\n: Stop http.server.BaseHTTPRequestHandler.send_error() from\nsending a message body for 205 Reset Content.  Also, don’t send Content\nheader fields in responses that don’t have a body.  Patch by Susumu\nKoshiba.\nbpo-21313\n: Fix the “platform” module to tolerate when sys.version contains\ntruncated build information.\nbpo-27164\n: In the zlib module, allow decompressing raw Deflate streams\nwith a predefined zdict.  Based on patch by Xiang Zhang.\nbpo-24291\n: Fix wsgiref.simple_server.WSGIRequestHandler to completely\nwrite data to the client.  Previously it could do partial writes and\ntruncate data.  Also, wsgiref.handler.ServerHandler can now handle stdout\ndoing partial writes, but this is deprecated.\nbpo-26809\n: Add\n__all__\nto\nstring\n.  Patch by Emanuel Barry.\nbpo-26373\n: subprocess.Popen.communicate now correctly ignores\nBrokenPipeError when the child process dies before .communicate() is\ncalled in more/all circumstances.\nbpo-21776\n: distutils.upload now correctly handles HTTPError. Initial patch\nby Claudiu Popa.\nbpo-27114\n: Fix SSLContext._load_windows_store_certs fails with\nPermissionError\nbpo-18383\n: Avoid creating duplicate filters when using filterwarnings and\nsimplefilter. Based on patch by Alex Shkop.\nbpo-27057\n: Fix os.set_inheritable() on Android, ioctl() is blocked by\nSELinux and fails with EACCESS. The function now falls back to fcntl().\nPatch written by Michał Bednarski.\nbpo-27014\n: Fix infinite recursion using typing.py.  Thanks to Kalle Tuure!\nbpo-14132\n: Fix urllib.request redirect handling when the target only has a\nquery string.  Original fix by Ján Janech.\nbpo-17214\n: The “urllib.request” module now percent-encodes non-ASCII bytes\nfound in redirect target URLs.  Some servers send Location header fields\nwith non-ASCII bytes, but “http.client” requires the request target to be\nASCII-encodable, otherwise a UnicodeEncodeError is raised.  Based on patch\nby Christian Heimes.\nbpo-26892\n: Honor debuglevel flag in urllib.request.HTTPHandler. Patch\ncontributed by Chi Hsuan Yen.\nbpo-22274\n: In the subprocess module, allow stderr to be redirected to\nstdout even when stdout is not redirected.  Patch by Akira Li.\nbpo-26807\n: mock_open ‘files’ no longer error on readline at end of file.\nPatch from Yolanda Robla.\nbpo-25745\n: Fixed leaking a userptr in curses panel destructor.\nbpo-26977\n: Removed unnecessary, and ignored, call to sum of squares helper\nin statistics.pvariance.\nbpo-26881\n: The modulefinder module now supports extended opcode arguments.\nbpo-23815\n: Fixed crashes related to directly created instances of types in\n_tkinter and curses.panel modules.\nbpo-17765\n: weakref.ref() no longer silently ignores keyword arguments.\nPatch by Georg Brandl.\nbpo-26873\n: xmlrpc now raises ResponseError on unsupported type tags\ninstead of silently return incorrect result.\nbpo-26711\n: Fixed the comparison of plistlib.Data with other types.\nbpo-24114\n: Fix an uninitialized variable in\nctypes.util\n. The bug only\noccurs on SunOS when the ctypes implementation searches for the\ncrle\nprogram. Patch by Xiang Zhang.  Tested on SunOS by Kees Bos.\nbpo-26864\n: In urllib.request, change the proxy bypass host checking\nagainst no_proxy to be case-insensitive, and to not match unrelated host\nnames that happen to have a bypassed hostname as a suffix.  Patch by Xiang\nZhang.\nbpo-26634\n: recursive_repr() now sets __qualname__ of wrapper.  Patch by\nXiang Zhang.\nbpo-26804\n: urllib.request will prefer lower_case proxy environment\nvariables over UPPER_CASE or Mixed_Case ones. Patch contributed by\nHans-Peter Jansen.\nbpo-26837\n: assertSequenceEqual() now correctly outputs non-stringified\ndiffering items (like bytes in the -b mode).  This affects\nassertListEqual() and assertTupleEqual().\nbpo-26041\n: Remove “will be removed in Python 3.7” from deprecation\nmessages of platform.dist() and platform.linux_distribution(). Patch by\nKumaripaba Miyurusara Athukorala.\nbpo-26822\n: itemgetter, attrgetter and methodcaller objects no longer\nsilently ignore keyword arguments.\nbpo-26733\n: Disassembling a class now disassembles class and static\nmethods. Patch by Xiang Zhang.\nbpo-26801\n: Fix error handling in\nshutil.get_terminal_size()\n, catch\nAttributeError\ninstead of\nNameError\n. Patch written by\nEmanuel Barry.\nbpo-24838\n: tarfile’s ustar and gnu formats now correctly calculate name\nand link field limits for multibyte character encodings like utf-8.\nbpo-26717\n: Stop encoding Latin-1-ized WSGI paths with UTF-8.  Patch by\nAnthony Sottile.\nbpo-26735\n: Fix\nos.urandom()\non Solaris 11.3 and newer when reading\nmore than 1,024 bytes: call\ngetrandom()\nmultiple times with a limit of\n1024 bytes per call.\nbpo-16329\n: Add .webm to mimetypes.types_map.  Patch by Giampaolo Rodola’.\nbpo-13952\n: Add .csv to mimetypes.types_map.  Patch by Geoff Wilson.\nbpo-26709\n: Fixed Y2038 problem in loading binary PLists.\nbpo-23735\n: Handle terminal resizing with Readline 6.3+ by installing our\nown SIGWINCH handler.  Patch by Eric Price.\nbpo-26586\n: In http.server, respond with “413 Request header fields too\nlarge” if there are too many header fields to parse, rather than killing\nthe connection and raising an unhandled exception.  Patch by Xiang Zhang.\nbpo-22854\n: Change BufferedReader.writable() and BufferedWriter.readable()\nto always return False.\nbpo-25195\n: Fix a regression in mock.MagicMock. _Call is a subclass of\ntuple (changeset 3603bae63c13 only works for classes) so we need to\nimplement __ne__ ourselves.  Patch by Andrew Plummer.\nbpo-26644\n: Raise ValueError rather than SystemError when a negative length\nis passed to SSLSocket.recv() or read().\nbpo-23804\n: Fix SSL recv(0) and read(0) methods to return zero bytes\ninstead of up to 1024.\nbpo-26616\n: Fixed a bug in datetime.astimezone() method.\nbpo-21925\n:\nwarnings.formatwarning()\nnow catches exceptions on\nlinecache.getline(...)\nto be able to log\nResourceWarning\nemitted late during the Python shutdown process.\nbpo-24266\n: Ctrl+C during Readline history search now cancels the search\nmode when compiled with Readline 7.\nbpo-26560\n: Avoid potential ValueError in BaseHandler.start_response.\nInitial patch by Peter Inglesby.\nbpo-26569\n: Fix\npyclbr.readmodule()\nand\npyclbr.readmodule_ex()\nto support importing packages.\nbpo-26499\n: Account for remaining Content-Length in HTTPResponse.readline()\nand read1(). Based on patch by Silent Ghost. Also document that\nHTTPResponse now supports these methods.\nbpo-25320\n: Handle sockets in directories unittest discovery is scanning.\nPatch from Victor van den Elzen.\nbpo-16181\n: cookiejar.http2time() now returns None if year is higher than\ndatetime.MAXYEAR.\nbpo-26513\n: Fixes platform module detection of Windows Server\nbpo-23718\n: Fixed parsing time in week 0 before Jan 1.  Original patch by\nTamás Bence Gedai.\nbpo-20589\n: Invoking Path.owner() and Path.group() on Windows now raise\nNotImplementedError instead of ImportError.\nbpo-26177\n: Fixed the keys() method for Canvas and Scrollbar widgets.\nbpo-15068\n: Got rid of excessive buffering in the fileinput module. The\nbufsize parameter is no longer used.\nbpo-2202\n: Fix UnboundLocalError in\nAbstractDigestAuthHandler.get_algorithm_impls. Initial patch by Mathieu\nDupuy.\nbpo-25718\n: Fixed pickling and copying the accumulate() iterator with total\nis None.\nbpo-26475\n: Fixed debugging output for regular expressions with the (?x)\nflag.\nbpo-26457\n: Fixed the subnets() methods in IP network classes for the case\nwhen resulting prefix length is equal to maximal prefix length. Based on\npatch by Xiang Zhang.\nbpo-26385\n: Remove the file if the internal open() call in\nNamedTemporaryFile() fails. Patch by Silent Ghost.\nbpo-26402\n: Fix XML-RPC client to retry when the server shuts down a\npersistent connection.  This was a regression related to the new\nhttp.client.RemoteDisconnected exception in 3.5.0a4.\nbpo-25913\n: Leading\n<~\nis optional now in base64.a85decode() with\nadobe=True.  Patch by Swati Jaiswal.\nbpo-26186\n: Remove an invalid type check in importlib.util.LazyLoader.\nbpo-26367\n: importlib.__import__() raises SystemError like\nbuiltins.__import__() when\nlevel\nis specified but without an\naccompanying package specified.\nbpo-26309\n: In the “socketserver” module, shut down the request (closing\nthe connected socket) when verify_request() returns false.  Patch by Aviv\nPalivoda.\nbpo-25995\n: os.walk() no longer uses FDs proportional to the tree depth.\nbpo-26117\n: The os.scandir() iterator now closes file descriptor not only\nwhen the iteration is finished, but when it was failed with error.\nbpo-25911\n: Restored support of bytes paths in os.walk() on Windows.\nbpo-26045\n: Add UTF-8 suggestion to error message when posting a\nnon-Latin-1 string with http.client.\nbpo-12923\n: Reset FancyURLopener’s redirect counter even if there is an\nexception. Based on patches by Brian Brazil and Daniel Rocco.\nbpo-25945\n: Fixed a crash when unpickle the functools.partial object with\nwrong state. Fixed a leak in failed functools.partial constructor. “args”\nand “keywords” attributes of functools.partial have now always types tuple\nand dict correspondingly.\nbpo-26202\n: copy.deepcopy() now correctly copies range() objects with\nnon-atomic attributes.\nbpo-23076\n: Path.glob() now raises a ValueError if it’s called with an\ninvalid pattern. Patch by Thomas Nyberg.\nbpo-19883\n: Fixed possible integer overflows in zipimport.\nbpo-26227\n: On Windows, getnameinfo(), gethostbyaddr() and\ngethostbyname_ex() functions of the socket module now decode the hostname\nfrom the ANSI code page rather than UTF-8.\nbpo-26147\n: xmlrpc now works with strings not encodable with used non-UTF-8\nencoding.\nbpo-25935\n: Garbage collector now breaks reference loops with OrderedDict.\nbpo-16620\n: Fixed AttributeError in msilib.Directory.glob().\nbpo-26013\n: Added compatibility with broken protocol 2 pickles created in\nold Python 3 versions (3.4.3 and lower).\nbpo-25850\n: Use cross-compilation by default for 64-bit Windows.\nbpo-17633\n: Improve zipimport’s support for namespace packages.\nbpo-24705\n: Fix sysconfig._parse_makefile not expanding ${} vars appearing\nbefore $() vars.\nbpo-22138\n: Fix mock.patch behavior when patching descriptors. Restore\noriginal values after patching. Patch contributed by Sean McCully.\nbpo-25672\n: In the ssl module, enable the SSL_MODE_RELEASE_BUFFERS mode\noption if it is safe to do so.\nbpo-26012\n: Don’t traverse into symlinks for\n**\npattern in\npathlib.Path.[r]glob().\nbpo-24120\n: Ignore PermissionError when traversing a tree with\npathlib.Path.[r]glob(). Patch by Ulrich Petri.\nbpo-25447\n: fileinput now uses sys.stdin as-is if it does not have a buffer\nattribute (restores backward compatibility).\nbpo-25447\n: Copying the lru_cache() wrapper object now always works,\nindependently from the type of the wrapped object (by returning the\noriginal object unchanged).\nbpo-24103\n: Fixed possible use after free in ElementTree.XMLPullParser.\nbpo-25860\n: os.fwalk() no longer skips remaining directories when error\noccurs. Original patch by Samson Lee.\nbpo-25914\n: Fixed and simplified OrderedDict.__sizeof__.\nbpo-25902\n: Fixed various refcount issues in ElementTree iteration.\nbpo-25717\n: Restore the previous behaviour of tolerating most fstat()\nerrors when opening files.  This was a regression in 3.5a1, and stopped\nanonymous temporary files from working in special cases.\nbpo-24903\n: Fix regression in number of arguments compileall accepts when\n‘-d’ is specified.  The check on the number of arguments has been dropped\ncompletely as it never worked correctly anyway.\nbpo-25764\n: In the subprocess module, preserve any exception caused by\nfork() failure when preexec_fn is used.\nbpo-6478\n: _strptime’s regexp cache now is reset after changing timezone\nwith time.tzset().\nbpo-14285\n: When executing a package with the “python -m package” option,\nand package initialization fails, a proper traceback is now reported.  The\n“runpy” module now lets exceptions from package initialization pass back\nto the caller, rather than raising ImportError.\nbpo-19771\n: Also in runpy and the “-m” option, omit the irrelevant message\n“… is a package and cannot be directly executed” if the package could\nnot even be initialized (e.g. due to a bad\n*.pyc\nfile).\nbpo-25177\n: Fixed problem with the mean of very small and very large\nnumbers. As a side effect, statistics.mean and statistics.variance should\nbe significantly faster.\nbpo-25718\n: Fixed copying object with state with boolean value is false.\nbpo-10131\n: Fixed deep copying of minidom documents.  Based on patch by\nMarian Ganisin.\nbpo-25725\n: Fixed a reference leak in pickle.loads() when unpickling\ninvalid data including tuple instructions.\nbpo-25663\n: In the Readline completer, avoid listing duplicate global\nnames, and search the global namespace before searching builtins.\nbpo-25688\n: Fixed file leak in ElementTree.iterparse() raising an error.\nbpo-23914\n: Fixed SystemError raised by unpickler on broken pickle data.\nbpo-25691\n: Fixed crash on deleting ElementTree.Element attributes.\nbpo-25624\n: ZipFile now always writes a ZIP_STORED header for directory\nentries.  Patch by Dingyuan Wang.\nSkip getaddrinfo if host is already resolved. Patch by A. Jesse Jiryu\nDavis.\nbpo-26050\n: Add asyncio.StreamReader.readuntil() method. Patch by Марк\nКоренберг.\nbpo-25924\n: Avoid unnecessary serialization of getaddrinfo(3) calls on OS X\nversions 10.5 or higher.  Original patch by A. Jesse Jiryu Davis.\nbpo-26406\n: Avoid unnecessary serialization of getaddrinfo(3) calls on\ncurrent versions of OpenBSD and NetBSD.  Patch by A. Jesse Jiryu Davis.\nbpo-26848\n: Fix asyncio/subprocess.communicate() to handle empty input.\nPatch by Jack O’Connor.\nbpo-27040\n: Add loop.get_exception_handler method\nbpo-27041\n: asyncio: Add loop.create_future method\nbpo-27223\n: asyncio: Fix _read_ready and _write_ready to respect\n_conn_lost. Patch by Łukasz Langa.\nbpo-22970\n: asyncio: Fix inconsistency cancelling Condition.wait. Patch by\nDavid Coles.\nIDLE\n¶\nbpo-5124\n: Paste with text selected now replaces the selection on X11. This\nmatches how paste works on Windows, Mac, most modern Linux apps, and ttk\nwidgets. Original patch by Serhiy Storchaka.\nbpo-24759\n: Make clear in idlelib.idle_test.__init__ that the directory is\na private implementation of test.test_idle and tool for maintainers.\nbpo-27196\n: Stop ‘ThemeChanged’ warnings when running IDLE tests. These\npersisted after other warnings were suppressed in #20567. Apply Serhiy\nStorchaka’s update_idletasks solution to four test files. Record this\nadditional advice in idle_test/README.txt\nbpo-20567\n: Revise idle_test/README.txt with advice about avoiding tk\nwarning messages from tests.  Apply advice to several IDLE tests.\nbpo-27117\n: Make colorizer htest and turtledemo work with dark themes. Move\ncode for configuring text widget colors to a new function.\nbpo-26673\n: When tk reports font size as 0, change to size 10. Such fonts\non Linux prevented the configuration dialog from opening.\nbpo-21939\n: Add test for IDLE’s percolator. Original patch by Saimadhav\nHeblikar.\nbpo-21676\n: Add test for IDLE’s replace dialog. Original patch by Saimadhav\nHeblikar.\nbpo-18410\n: Add test for IDLE’s search dialog. Original patch by Westley\nMartínez.\nbpo-21703\n: Add test for IDLE’s undo delegator. Original patch by Saimadhav\nHeblikar .\nbpo-27044\n: Add ConfigDialog.remove_var_callbacks to stop memory leaks.\nbpo-23977\n: Add more asserts to test_delegator.\nbpo-20640\n: Add tests for idlelib.configHelpSourceEdit. Patch by Saimadhav\nHeblikar.\nIn the ‘IDLE-console differences’ section of the IDLE doc, clarify how\nrunning with IDLE affects sys.modules and the standard streams.\nbpo-25507\n: fix incorrect change in IOBinding that prevented printing.\nAugment IOBinding htest to include all major IOBinding functions.\nbpo-25905\n: Revert unwanted conversion of ‘ to ’ RIGHT SINGLE QUOTATION\nMARK in README.txt and open this and NEWS.txt with ‘ascii’. Re-encode\nCREDITS.txt to utf-8 and open it with ‘utf-8’.\nDocumentation\n¶\nbpo-19489\n: Moved the search box from the sidebar to the header and footer\nof each page. Patch by Ammar Askar.\nbpo-24136\n: Document the new\nPEP 448\nunpacking syntax of 3.5.\nbpo-26736\n: Used HTTPS for external links in the documentation if possible.\nbpo-6953\n: Rework the Readline module documentation to group related\nfunctions together, and add more details such as what underlying Readline\nfunctions and variables are accessed.\nbpo-23606\n: Adds note to ctypes documentation regarding cdll.msvcrt.\nbpo-25500\n: Fix documentation to not claim that __import__ is searched for\nin the global scope.\nbpo-26014\n: Update 3.x packaging documentation: * “See also” links to the\nnew docs are now provided in the legacy pages * links to setuptools\ndocumentation have been updated\nTests\n¶\nbpo-21916\n: Added tests for the turtle module.  Patch by ingrid, Gregory\nLoyse and Jelle Zijlstra.\nbpo-26523\n: The multiprocessing thread pool (multiprocessing.dummy.Pool)\nwas untested.\nbpo-26015\n: Added new tests for pickling iterators of mutable sequences.\nbpo-26325\n: Added test.support.check_no_resource_warning() to check that no\nResourceWarning is emitted.\nbpo-25940\n: Changed test_ssl to use self-signed.pythontest.net.  This\navoids relying on svn.python.org, which recently changed root certificate.\nbpo-25616\n: Tests for OrderedDict are extracted from test_collections into\nseparate file test_ordered_dict.\nbpo-26583\n: Skip test_timestamp_overflow in test_import if bytecode files\ncannot be written.\nBuild\n¶\nbpo-26884\n: Fix linking extension modules for cross builds. Patch by Xavier\nde Gaye.\nbpo-22359\n: Disable the rules for running _freeze_importlib and pgen when\ncross-compiling.  The output of these programs is normally saved with the\nsource code anyway, and is still regenerated when doing a native build.\nPatch by Xavier de Gaye.\nbpo-27229\n: Fix the cross-compiling pgen rule for in-tree builds.  Patch by\nXavier de Gaye.\nbpo-21668\n: Link audioop, _datetime, _ctypes_test modules to libm, except\non Mac OS X. Patch written by Xavier de Gaye.\nbpo-25702\n: A –with-lto configure option has been added that will enable\nlink time optimizations at build time during a make profile-opt. Some\ncompilers and toolchains are known to not produce stable code when using\nLTO, be sure to test things thoroughly before relying on it. It can\nprovide a few % speed up over profile-opt alone.\nbpo-26624\n: Adds validation of ucrtbase[d].dll version with warning for old\nversions.\nbpo-17603\n: Avoid error about nonexistent fileblocks.o file by using a\nlower-level check for st_blocks in struct stat.\nbpo-26079\n: Fixing the build output folder for tix-8.4.3.6. Patch by Bjoern\nThiel.\nbpo-26465\n: Update Windows builds to use OpenSSL 1.0.2g.\nbpo-24421\n: Compile Modules/_math.c once, before building extensions.\nPreviously it could fail to compile properly if the math and cmath builds\nwere concurrent.\nbpo-25348\n: Added\n--pgo\nand\n--pgo-job\narguments to\nPCbuild\\build.bat\nfor building with Profile-Guided Optimization.  The\nold\nPCbuild\\build_pgo.bat\nscript is now deprecated, and simply calls\nPCbuild\\build.bat\n--pgo\n%*\n.\nbpo-25827\n: Add support for building with ICC to\nconfigure\n, including a\nnew\n--with-icc\nflag.\nbpo-25696\n: Fix installation of Python on UNIX with make -j9.\nbpo-26930\n: Update OS X 10.5+ 32-bit-only installer to build and link with\nOpenSSL 1.0.2h.\nbpo-26268\n: Update Windows builds to use OpenSSL 1.0.2f.\nbpo-25136\n: Support Apple Xcode 7’s new textual SDK stub libraries.\nbpo-24324\n: Do not enable unreachable code warnings when using gcc as the\noption does not work correctly in older versions of gcc and has been\nsilently removed as of gcc-4.5.\nWindows\n¶\nbpo-27053\n: Updates make_zip.py to correctly generate library ZIP file.\nbpo-26268\n: Update the prepare_ssl.py script to handle OpenSSL releases\nthat don’t include the contents of the include directory (that is, 1.0.2e\nand later).\nbpo-26071\n: bdist_wininst created binaries fail to start and find 32bit\nPython\nbpo-26073\n: Update the list of magic numbers in launcher\nbpo-26065\n: Excludes venv from library when generating embeddable distro.\nbpo-17500\n: Remove unused and outdated icons. (See also:\nhttps://github.com/python/pythondotorg/issues/945\n)\nTools/Demos\n¶\nbpo-26799\n: Fix python-gdb.py: don’t get C types once when the Python code\nis loaded, but get C types on demand. The C types can change if\npython-gdb.py is loaded before the Python executable. Patch written by\nThomas Ilsche.\nbpo-26271\n: Fix the Freeze tool to properly use flags passed through\nconfigure. Patch by Daniel Shaulov.\nbpo-26489\n: Add dictionary unpacking support to Tools/parser/unparse.py.\nPatch by Guo Ci Teo.\nbpo-26316\n: Fix variable name typo in Argument Clinic.\nPython 3.5.1 final\n¶\nRelease date: 2015-12-06\nCore and Builtins\n¶\nbpo-25709\n: Fixed problem with in-place string concatenation and utf-8\ncache.\nWindows\n¶\nbpo-25715\n: Python 3.5.1 installer shows wrong upgrade path and incorrect\nlogic for launcher detection.\nPython 3.5.1 release candidate 1\n¶\nRelease date: 2015-11-22\nCore and Builtins\n¶\nbpo-25630\n: Fix a possible segfault during argument parsing in functions\nthat accept filesystem paths.\nbpo-23564\n: Fixed a partially broken sanity check in the _posixsubprocess\ninternals regarding how fds_to_pass were passed to the child.  The bug had\nno actual impact as subprocess.py already avoided it.\nbpo-25388\n: Fixed tokenizer crash when processing undecodable source code\nwith a null byte.\nbpo-25462\n: The hash of the key now is calculated only once in most\noperations in C implementation of OrderedDict.\nbpo-22995\n: Default implementation of __reduce__ and __reduce_ex__ now\nrejects builtin types with not defined __new__.\nbpo-25555\n: Fix parser and AST: fill lineno and col_offset of “arg” node\nwhen compiling AST from Python objects.\nbpo-24802\n: Avoid buffer overreads when int(), float(), compile(), exec()\nand eval() are passed bytes-like objects.  These objects are not\nnecessarily terminated by a null byte, but the functions assumed they\nwere.\nbpo-24726\n: Fixed a crash and leaking NULL in repr() of OrderedDict that\nwas mutated by direct calls of dict methods.\nbpo-25449\n: Iterating OrderedDict with keys with unstable hash now raises\nKeyError in C implementations as well as in Python implementation.\nbpo-25395\n: Fixed crash when highly nested OrderedDict structures were\ngarbage collected.\nbpo-25274\n: sys.setrecursionlimit() now raises a RecursionError if the new\nrecursion limit is too low depending at the current recursion depth.\nModify also the “lower-water mark” formula to make it monotonic. This mark\nis used to decide when the overflowed flag of the thread state is reset.\nbpo-24402\n: Fix input() to prompt to the redirected stdout when\nsys.stdout.fileno() fails.\nbpo-24806\n: Prevent builtin types that are not allowed to be subclassed\nfrom being subclassed through multiple inheritance.\nbpo-24848\n: Fixed a number of bugs in UTF-7 decoding of misformed data.\nbpo-25280\n: Import trace messages emitted in verbose (-v) mode are no\nlonger formatted twice.\nbpo-25003\n: On Solaris 11.3 or newer, os.urandom() now uses the getrandom()\nfunction instead of the getentropy() function. The getentropy() function\nis blocking to generate very good quality entropy, os.urandom() doesn’t\nneed such high-quality entropy.\nbpo-25182\n: The stdprinter (used as sys.stderr before the io module is\nimported at startup) now uses the backslashreplace error handler.\nbpo-25131\n: Make the line number and column offset of set/dict literals and\ncomprehensions correspond to the opening brace.\nbpo-25150\n: Hide the private\n_Py_atomic_\nxxx\nsymbols from the\npublic Python.h header to fix a compilation error with OpenMP.\nPyThreadState_GET() becomes an alias to PyThreadState_Get() to avoid ABI\nincompatibilities.\nLibrary\n¶\nbpo-25626\n: Change three zlib functions to accept sizes that fit in\nPy_ssize_t, but internally cap those sizes to UINT_MAX.  This resolves a\nregression in 3.5 where GzipFile.read() failed to read chunks larger than\n2 or 4 GiB.  The change affects the zlib.Decompress.decompress()\nmax_length parameter, the zlib.decompress() bufsize parameter, and the\nzlib.Decompress.flush() length parameter.\nbpo-25583\n: Avoid incorrect errors raised by os.makedirs(exist_ok=True)\nwhen the OS gives priority to errors such as EACCES over EEXIST.\nbpo-25593\n: Change semantics of EventLoop.stop() in asyncio.\nbpo-6973\n: When we know a subprocess.Popen process has died, do not allow\nthe send_signal(), terminate(), or kill() methods to do anything as they\ncould potentially signal a different process.\nbpo-25590\n: In the Readline completer, only call getattr() once per\nattribute.\nbpo-25498\n: Fix a crash when garbage-collecting ctypes objects created by\nwrapping a memoryview.  This was a regression made in 3.5a1.  Based on\npatch by Eryksun.\nbpo-25584\n: Added “escape” to the __all__ list in the glob module.\nbpo-25584\n: Fixed recursive glob() with patterns starting with\n**\n.\nbpo-25446\n: Fix regression in smtplib’s AUTH LOGIN support.\nbpo-18010\n: Fix the pydoc web server’s module search function to handle\nexceptions from importing packages.\nbpo-25554\n: Got rid of circular references in regular expression parsing.\nbpo-25510\n: fileinput.FileInput.readline() now returns b’’ instead of ‘’ at\nthe end if the FileInput was opened with binary mode. Patch by Ryosuke\nIto.\nbpo-25503\n: Fixed inspect.getdoc() for inherited docstrings of properties.\nOriginal patch by John Mark Vandenberg.\nbpo-25515\n: Always use os.urandom as a source of randomness in uuid.uuid4.\nbpo-21827\n: Fixed textwrap.dedent() for the case when largest common\nwhitespace is a substring of smallest leading whitespace. Based on patch\nby Robert Li.\nbpo-25447\n: The lru_cache() wrapper objects now can be copied and pickled\n(by returning the original object unchanged).\nbpo-25390\n: typing: Don’t crash on Union[str, Pattern].\nbpo-25441\n: asyncio: Raise error from drain() when socket is closed.\nbpo-25410\n: Cleaned up and fixed minor bugs in C implementation of\nOrderedDict.\nbpo-25411\n: Improved Unicode support in SMTPHandler through better use of\nthe email package. Thanks to user simon04 for the patch.\nbpo-25407\n: Remove mentions of the formatter module being removed in Python\n3.6.\nbpo-25406\n: Fixed a bug in C implementation of OrderedDict.move_to_end()\nthat caused segmentation fault or hang in iterating after moving several\nitems to the start of ordered dict.\nbpo-25364\n: zipfile now works in threads disabled builds.\nbpo-25328\n: smtpd’s SMTPChannel now correctly raises a ValueError if both\ndecode_data and enable_SMTPUTF8 are set to true.\nbpo-25316\n: distutils raises OSError instead of DistutilsPlatformError when\nMSVC is not installed.\nbpo-25380\n: Fixed protocol for the STACK_GLOBAL opcode in\npickletools.opcodes.\nbpo-23972\n: Updates asyncio datagram create method allowing reuseport and\nreuseaddr socket options to be set prior to binding the socket. Mirroring\nthe existing asyncio create_server method the reuseaddr option for\ndatagram sockets defaults to True if the O/S is ‘posix’ (except if the\nplatform is Cygwin). Patch by Chris Laws.\nbpo-25304\n: Add asyncio.run_coroutine_threadsafe().  This lets you submit a\ncoroutine to a loop from another thread, returning a\nconcurrent.futures.Future.  By Vincent Michel.\nbpo-25232\n: Fix CGIRequestHandler to split the query from the URL at the\nfirst question mark (?) rather than the last. Patch from Xiang Zhang.\nbpo-24657\n: Prevent CGIRequestHandler from collapsing slashes in the query\npart of the URL as if it were a path. Patch from Xiang Zhang.\nbpo-24483\n: C implementation of functools.lru_cache() now calculates key’s\nhash only once.\nbpo-22958\n: Constructor and update method of weakref.WeakValueDictionary\nnow accept the self and the dict keyword arguments.\nbpo-22609\n: Constructor of collections.UserDict now accepts the self\nkeyword argument.\nbpo-25111\n: Fixed comparison of traceback.FrameSummary.\nbpo-25262\n: Added support for BINBYTES8 opcode in Python implementation of\nunpickler. Highest 32 bits of 64-bit size for BINUNICODE8 and BINBYTES8\nopcodes no longer silently ignored on 32-bit platforms in C\nimplementation.\nbpo-25034\n: Fix string.Formatter problem with auto-numbering and nested\nformat_specs. Patch by Anthon van der Neut.\nbpo-25233\n: Rewrite the guts of asyncio.Queue and asyncio.Semaphore to be\nmore understandable and correct.\nbpo-25203\n: Failed readline.set_completer_delims() no longer left the\nmodule in inconsistent state.\nbpo-23600\n: Default implementation of tzinfo.fromutc() was returning wrong\nresults in some cases.\nbpo-23329\n: Allow the ssl module to be built with older versions of\nLibreSSL.\nPrevent overflow in _Unpickler_Read.\nbpo-25047\n: The XML encoding declaration written by Element Tree now\nrespects the letter case given by the user. This restores the ability to\nwrite encoding names in uppercase like “UTF-8”, which worked in Python 2.\nbpo-25135\n: Make deque_clear() safer by emptying the deque before clearing.\nThis helps avoid possible reentrancy issues.\nbpo-19143\n: platform module now reads Windows version from kernel32.dll to\navoid compatibility shims.\nbpo-25092\n: Fix datetime.strftime() failure when errno was already set to\nEINVAL.\nbpo-23517\n: Fix rounding in fromtimestamp() and utcfromtimestamp() methods\nof datetime.datetime: microseconds are now rounded to nearest with ties\ngoing to nearest even integer (ROUND_HALF_EVEN), instead of being rounding\ntowards minus infinity (ROUND_FLOOR). It’s important that these methods\nuse the same rounding mode than datetime.timedelta to keep the property:\n(datetime(1970,1,1) + timedelta(seconds=t)) ==\ndatetime.utcfromtimestamp(t). It also the rounding mode used by\nround(float) for example.\nbpo-25155\n: Fix datetime.datetime.now() and datetime.datetime.utcnow() on\nWindows to support date after year 2038. It was a regression introduced in\nPython 3.5.0.\nbpo-25108\n: Omitted internal frames in traceback functions print_stack(),\nformat_stack(), and extract_stack() called without arguments.\nbpo-25118\n: Fix a regression of Python 3.5.0 in os.waitpid() on Windows.\nbpo-24684\n: socket.socket.getaddrinfo() now calls\nPyUnicode_AsEncodedString() instead of calling the encode() method of the\nhost, to handle correctly custom string with an encode() method which\ndoesn’t return a byte string. The encoder of the IDNA codec is now called\ndirectly instead of calling the encode() method of the string.\nbpo-25060\n: Correctly compute stack usage of the BUILD_MAP opcode.\nbpo-24857\n: Comparing call_args to a long sequence now correctly returns a\nboolean result instead of raising an exception.  Patch by A Kaptur.\nbpo-23144\n: Make sure that HTMLParser.feed() returns all the data, even\nwhen convert_charrefs is True.\nbpo-24982\n: shutil.make_archive() with the “zip” format now adds entries\nfor directories (including empty directories) in ZIP file.\nbpo-25019\n: Fixed a crash caused by setting non-string key of expat parser.\nBased on patch by John Leitch.\nbpo-16180\n: Exit pdb if file has syntax error, instead of trapping user in\nan infinite loop.  Patch by Xavier de Gaye.\nbpo-24891\n: Fix a race condition at Python startup if the file descriptor\nof stdin (0), stdout (1) or stderr (2) is closed while Python is creating\nsys.stdin, sys.stdout and sys.stderr objects. These attributes are now set\nto None if the creation of the object failed, instead of raising an\nOSError exception. Initial patch written by Marco Paolini.\nbpo-24992\n: Fix error handling and a race condition (related to garbage\ncollection) in collections.OrderedDict constructor.\nbpo-24881\n: Fixed setting binary mode in Python implementation of FileIO on\nWindows and Cygwin.  Patch from Akira Li.\nbpo-25578\n: Fix (another) memory leak in SSLSocket.getpeercer().\nbpo-25530\n: Disable the vulnerable SSLv3 protocol by default when creating\nssl.SSLContext.\nbpo-25569\n: Fix memory leak in SSLSocket.getpeercert().\nbpo-25471\n: Sockets returned from accept() shouldn’t appear to be\nnonblocking.\nbpo-25319\n: When threading.Event is reinitialized, the underlying condition\nshould use a regular lock rather than a recursive lock.\nbpo-21112\n: Fix regression in unittest.expectedFailure on subclasses. Patch\nfrom Berker Peksag.\nbpo-24764\n: cgi.FieldStorage.read_multi() now ignores the Content-Length\nheader in part headers. Patch written by Peter Landry and reviewed by\nPierre Quentel.\nbpo-24913\n: Fix overrun error in deque.index(). Found by John Leitch and\nBryce Darling.\nbpo-24774\n: Fix docstring in http.server.test. Patch from Chiu-Hsiang Hsu.\nbpo-21159\n: Improve message in\nconfigparser.InterpolationMissingOptionError. Patch from Łukasz Langa.\nbpo-20362\n: Honour TestCase.longMessage correctly in assertRegex. Patch\nfrom Ilia Kurenkov.\nbpo-23572\n: Fixed functools.singledispatch on classes with false\nmetaclasses.  Patch by Ethan Furman.\nasyncio: ensure_future() now accepts awaitable objects.\nIDLE\n¶\nbpo-15348\n: Stop the debugger engine (normally in a user process) before\nclosing the debugger window (running in the IDLE process). This prevents\nthe RuntimeErrors that were being caught and ignored.\nbpo-24455\n: Prevent IDLE from hanging when a) closing the shell while the\ndebugger is active (15347); b) closing the debugger with the [X] button\n(15348); and c) activating the debugger when already active (24455). The\npatch by Mark Roseman does this by making two changes. 1. Suspend and\nresume the gui.interaction method with the tcl vwait mechanism intended\nfor this purpose (instead of root.mainloop & .quit). 2. In gui.run, allow\nany existing interaction to terminate first.\nChange ‘The program’ to ‘Your program’ in an IDLE ‘kill program?’ message\nto make it clearer that the program referred to is the currently running\nuser program, not IDLE itself.\nbpo-24750\n: Improve the appearance of the IDLE editor window status bar.\nPatch by Mark Roseman.\nbpo-25313\n: Change the handling of new built-in text color themes to better\naddress the compatibility problem introduced by the addition of IDLE Dark.\nConsistently use the revised idleConf.CurrentTheme everywhere in idlelib.\nbpo-24782\n: Extension configuration is now a tab in the IDLE Preferences\ndialog rather than a separate dialog.  The former tabs are now a sorted\nlist.  Patch by Mark Roseman.\nbpo-22726\n: Re-activate the config dialog help button with some content\nabout the other buttons and the new IDLE Dark theme.\nbpo-24820\n: IDLE now has an ‘IDLE Dark’ built-in text color theme. It is\nmore or less IDLE Classic inverted, with a cobalt blue background.\nStrings, comments, keywords, … are still green, red, orange, … . To\nuse it with IDLEs released before November 2015, hit the ‘Save as New\nCustom Theme’ button and enter a new name, such as ‘Custom Dark’.  The\ncustom theme will work with any IDLE release, and can be modified.\nbpo-25224\n: README.txt is now an idlelib index for IDLE developers and\ncurious users. The previous user content is now in the IDLE doc chapter.\n‘IDLE’ now means ‘Integrated Development and Learning Environment’.\nbpo-24820\n: Users can now set breakpoint colors in Settings -> Custom\nHighlighting. Original patch by Mark Roseman.\nbpo-24972\n: Inactive selection background now matches active selection\nbackground, as configured by users, on all systems.  Found items are now\nalways highlighted on Windows.  Initial patch by Mark Roseman.\nbpo-24570\n: Idle: make calltip and completion boxes appear on Macs affected\nby a tk regression.  Initial patch by Mark Roseman.\nbpo-24988\n: Idle ScrolledList context menus (used in debugger) now work on\nMac Aqua. Patch by Mark Roseman.\nbpo-24801\n: Make right-click for context menu work on Mac Aqua. Patch by\nMark Roseman.\nbpo-25173\n: Associate tkinter messageboxes with a specific widget. For Mac\nOSX, make them a ‘sheet’.  Patch by Mark Roseman.\nbpo-25198\n: Enhance the initial html viewer now used for Idle Help.\nProperly indent fixed-pitch text (patch by Mark Roseman). Give code\nsnippet a very Sphinx-like light blueish-gray background. Re-use initial\nwidth and height set by users for shell and editor. When the Table of\nContents (TOC) menu is used, put the section header at the top of the\nscreen.\nbpo-25225\n: Condense and rewrite Idle doc section on text colors.\nbpo-21995\n: Explain some differences between IDLE and console Python.\nbpo-22820\n: Explain need for\nprint\nwhen running file from Idle editor.\nbpo-25224\n: Doc: augment Idle feature list and no-subprocess section.\nbpo-25219\n: Update doc for Idle command line options. Some were missing and\nnotes were not correct.\nbpo-24861\n: Most of idlelib is private and subject to change. Use\nidleib.idle.* to start Idle. See idlelib.__init__.__doc__.\nbpo-25199\n: Idle: add synchronization comments for future maintainers.\nbpo-16893\n: Replace help.txt with help.html for Idle doc display. The new\nidlelib/help.html is rstripped Doc/build/html/library/idle.html. It looks\nbetter than help.txt and will better document Idle as released. The\ntkinter html viewer that works for this file was written by Mark Roseman.\nThe now unused EditorWindow.HelpDialog class and helt.txt file are\ndeprecated.\nbpo-24199\n: Deprecate unused idlelib.idlever with possible removal in 3.6.\nbpo-24790\n: Remove extraneous code (which also create 2 & 3 conflicts).\nDocumentation\n¶\nbpo-22558\n: Add remaining doc links to source code for Python-coded\nmodules. Patch by Yoni Lavi.\nbpo-12067\n: Rewrite Comparisons section in the Expressions chapter of the\nlanguage reference. Some of the details of comparing mixed types were\nincorrect or ambiguous. NotImplemented is only relevant at a lower level\nthan the Expressions chapter. Added details of comparing range() objects,\nand default behaviour and consistency suggestions for user-defined\nclasses. Patch from Andy Maier.\nbpo-24952\n: Clarify the default size argument of stack_size() in the\n“threading” and “_thread” modules. Patch from Mattip.\nbpo-23725\n: Overhaul tempfile docs. Note deprecated status of mktemp. Patch\nfrom Zbigniew Jędrzejewski-Szmek.\nbpo-24808\n: Update the types of some PyTypeObject fields.  Patch by Joseph\nWeston.\nbpo-22812\n: Fix unittest discovery examples. Patch from Pam McA’Nulty.\nTests\n¶\nbpo-25449\n: Added tests for OrderedDict subclasses.\nbpo-25099\n: Make test_compileall not fail when an entry on sys.path cannot\nbe written to (commonly seen in administrative installs on Windows).\nbpo-23919\n: Prevents assert dialogs appearing in the test suite.\nPCbuild\\rt.bat\nnow accepts an unlimited number of arguments to pass\nalong to regrtest.py.  Previously there was a limit of 9.\nBuild\n¶\nbpo-24915\n: Add LLVM support for PGO builds and use the test suite to\ngenerate the profile data. Initial patch by Alecsandru Patrascu of Intel.\nbpo-24910\n: Windows MSIs now have unique display names.\nbpo-24986\n: It is now possible to build Python on Windows without errors\nwhen external libraries are not available.\nWindows\n¶\nbpo-25450\n: Updates shortcuts to start Python in installation directory.\nbpo-25164\n: Changes default all-users install directory to match per-user\ndirectory.\nbpo-25143\n: Improves installer error messages for unsupported platforms.\nbpo-25163\n: Display correct directory in installer when using non-default\nsettings.\nbpo-25361\n: Disables use of SSE2 instructions in Windows 32-bit build\nbpo-25089\n: Adds logging to installer for case where launcher is not\nselected on upgrade.\nbpo-25165\n: Windows uninstallation should not remove launcher if other\nversions remain\nbpo-25112\n: py.exe launcher is missing icons\nbpo-25102\n: Windows installer does not precompile for -O or -OO.\nbpo-25081\n: Makes Back button in installer go back to upgrade page when\nupgrading.\nbpo-25091\n: Increases font size of the installer.\nbpo-25126\n: Clarifies that the non-web installer will download some\ncomponents.\nbpo-25213\n: Restores requestedExecutionLevel to manifest to disable UAC\nvirtualization.\nbpo-25022\n: Removed very outdated PC/example_nt/ directory.\nTools/Demos\n¶\nbpo-25440\n: Fix output of python-config –extension-suffix.\nPython 3.5.0 final\n¶\nRelease date: 2015-09-13\nBuild\n¶\nbpo-25071\n: Windows installer should not require TargetDir parameter when\ninstalling quietly.\nPython 3.5.0 release candidate 4\n¶\nRelease date: 2015-09-09\nLibrary\n¶\nbpo-25029\n: Fixes MemoryError in test_strptime.\nBuild\n¶\nbpo-25027\n: Reverts partial-static build options and adds vcruntime140.dll\nto Windows installation.\nPython 3.5.0 release candidate 3\n¶\nRelease date: 2015-09-07\nCore and Builtins\n¶\nbpo-24305\n: Prevent import subsystem stack frames from being counted by the\nwarnings.warn(stacklevel=) parameter.\nbpo-24912\n: Prevent __class__ assignment to immutable built-in objects.\nbpo-24975\n: Fix AST compilation for\nPEP 448\nsyntax.\nLibrary\n¶\nbpo-24917\n: time_strftime() buffer over-read.\nbpo-24748\n: To resolve a compatibility problem found with py2exe and\npywin32, imp.load_dynamic() once again ignores previously loaded modules\nto support Python modules replacing themselves with extension modules.\nPatch by Petr Viktorin.\nbpo-24635\n: Fixed a bug in typing.py where isinstance([], typing.Iterable)\nwould return True once, then False on subsequent calls.\nbpo-24989\n: Fixed buffer overread in BytesIO.readline() if a position is\nset beyond size.  Based on patch by John Leitch.\nbpo-24913\n: Fix overrun error in deque.index(). Found by John Leitch and\nBryce Darling.\nPython 3.5.0 release candidate 2\n¶\nRelease date: 2015-08-25\nCore and Builtins\n¶\nbpo-24769\n: Interpreter now starts properly when dynamic loading is\ndisabled.  Patch by Petr Viktorin.\nbpo-21167\n: NAN operations are now handled correctly when python is\ncompiled with ICC even if -fp-model strict is not specified.\nbpo-24492\n: A “package” lacking a __name__ attribute when trying to perform\na\nfrom\n..\nimport\n...\nstatement will trigger an ImportError instead of\nan AttributeError.\nLibrary\n¶\nbpo-24847\n: Removes vcruntime140.dll dependency from Tcl/Tk.\nbpo-24839\n: platform._syscmd_ver raises DeprecationWarning\nbpo-24867\n: Fix Task.get_stack() for ‘async def’ coroutines\nPython 3.5.0 release candidate 1\n¶\nRelease date: 2015-08-09\nCore and Builtins\n¶\nbpo-24667\n: Resize odict in all cases that the underlying dict resizes.\nLibrary\n¶\nbpo-24824\n: Signatures of codecs.encode() and codecs.decode() now are\ncompatible with pydoc.\nbpo-24634\n: Importing uuid should not try to load libc on Windows\nbpo-24798\n: _msvccompiler.py doesn’t properly support manifests\nbpo-4395\n: Better testing and documentation of binary operators. Patch by\nMartin Panter.\nbpo-23973\n: Update typing.py from GitHub repo.\nbpo-23004\n: mock_open() now reads binary data correctly when the type of\nread_data is bytes.  Initial patch by Aaron Hill.\nbpo-23888\n: Handle fractional time in cookie expiry. Patch by ssh.\nbpo-23652\n: Make it possible to compile the select module against the libc\nheaders from the Linux Standard Base, which do not include some EPOLL\nmacros.  Patch by Matt Frank.\nbpo-22932\n: Fix timezones in email.utils.formatdate. Patch from Dmitry\nShachnev.\nbpo-23779\n: imaplib raises TypeError if authenticator tries to abort. Patch\nfrom Craig Holmquist.\nbpo-23319\n: Fix ctypes.BigEndianStructure, swap correctly bytes. Patch\nwritten by Matthieu Gautier.\nbpo-23254\n: Document how to close the TCPServer listening socket. Patch\nfrom Martin Panter.\nbpo-19450\n: Update Windows and OS X installer builds to use SQLite 3.8.11.\nbpo-17527\n: Add PATCH to wsgiref.validator. Patch from Luca Sbardella.\nbpo-24791\n: Fix grammar regression for call syntax: ‘g(*a or b)’.\nIDLE\n¶\nbpo-23672\n: Allow Idle to edit and run files with astral chars in name.\nPatch by Mohd Sanad Zaki Rizvi.\nbpo-24745\n: Idle editor default font. Switch from Courier to\nplatform-sensitive TkFixedFont.  This should not affect current customized\nfont selections.  If there is a problem, edit\n$HOME/.idlerc/config-main.cfg and remove ‘\nfont\nxxx\n’ entries from\n[Editor Window].  Patch by Mark Roseman.\nbpo-21192\n: Idle editor. When a file is run, put its name in the restart\nbar. Do not print false prompts. Original patch by Adnan Umer.\nbpo-13884\n: Idle menus. Remove tearoff lines. Patch by Roger Serwy.\nDocumentation\n¶\nbpo-24129\n: Clarify the reference documentation for name resolution. This\nincludes removing the assumption that readers will be familiar with the\nname resolution scheme Python used prior to the introduction of lexical\nscoping for function namespaces. Patch by Ivan Levkivskyi.\nbpo-20769\n: Improve reload() docs. Patch by Dorian Pula.\nbpo-23589\n: Remove duplicate sentence from the FAQ.  Patch by Yongzhi Pan.\nbpo-24729\n: Correct IO tutorial to match implementation regarding encoding\nparameter to open function.\nTests\n¶\nbpo-24751\n: When running regrtest with the\n-w\ncommand line option, a\ntest run is no longer marked as a failure if all tests succeed when\nre-run.\nPython 3.5.0 beta 4\n¶\nRelease date: 2015-07-26\nCore and Builtins\n¶\nbpo-23573\n: Restored optimization of bytes.rfind() and bytearray.rfind()\nfor single-byte argument on Linux.\nbpo-24569\n: Make\nPEP 448\ndictionary evaluation more consistent.\nbpo-24583\n: Fix crash when set is mutated while being updated.\nbpo-24407\n: Fix crash when dict is mutated while being updated.\nbpo-24619\n: New approach for tokenizing async/await. As a consequence, it\nis now possible to have one-line ‘async def foo(): await ..’ functions.\nbpo-24687\n: Plug refleak on SyntaxError in function parameters annotations.\nbpo-15944\n: memoryview: Allow arbitrary formats when casting to bytes.\nPatch by Martin Panter.\nLibrary\n¶\nbpo-23441\n: rcompleter now prints a tab character instead of displaying\npossible completions for an empty word.  Initial patch by Martin Sekera.\nbpo-24683\n: Fixed crashes in _json functions called with arguments of\ninappropriate type.\nbpo-21697\n: shutil.copytree() now correctly handles symbolic links that\npoint to directories.  Patch by Eduardo Seabra and Thomas Kluyver.\nbpo-14373\n: Fixed segmentation fault when gc.collect() is called during\nconstructing lru_cache (C implementation).\nbpo-24695\n: Fix a regression in traceback.print_exception().  If\nexc_traceback is None we shouldn’t print a traceback header like described\nin the documentation.\nbpo-24620\n: Random.setstate() now validates the value of state last\nelement.\nbpo-22485\n: Fixed an issue that caused\ninspect.getsource\nto return\nincorrect results on nested functions.\nbpo-22153\n: Improve unittest docs. Patch from Martin Panter and evilzero.\nbpo-24580\n: Symbolic group references to open group in re patterns now are\nexplicitly forbidden as well as numeric group references.\nbpo-24206\n: Fixed __eq__ and __ne__ methods of inspect classes.\nbpo-24631\n: Fixed regression in the timeit module with multiline setup.\nbpo-18622\n: unittest.mock.mock_open().reset_mock would recurse infinitely.\nPatch from Nicola Palumbo and Laurent De Buyst.\nbpo-23661\n: unittest.mock side_effects can now be exceptions again. This\nwas a regression vs Python 3.4. Patch from Ignacio Rossi\nbpo-24608\n: chunk.Chunk.read() now always returns bytes, not str.\nbpo-18684\n: Fixed reading out of the buffer in the re module.\nbpo-24259\n: tarfile now raises a ReadError if an archive is truncated\ninside a data segment.\nbpo-15014\n: SMTP.auth() and SMTP.login() now support RFC 4954’s optional\ninitial-response argument to the SMTP AUTH command.\nbpo-24669\n: Fix inspect.getsource() for ‘async def’ functions. Patch by Kai\nGroner.\nbpo-24688\n: ast.get_docstring() for ‘async def’ functions.\nBuild\n¶\nbpo-24603\n: Update Windows builds and OS X 10.5 installer to use OpenSSL\n1.0.2d.\nPython 3.5.0 beta 3\n¶\nRelease date: 2015-07-05\nCore and Builtins\n¶\nbpo-24467\n: Fixed possible buffer over-read in bytearray. The bytearray\nobject now always allocates place for trailing null byte and it’s buffer\nnow is always null-terminated.\nUpgrade to Unicode 8.0.0.\nbpo-24345\n: Add Py_tp_finalize slot for the stable ABI.\nbpo-24400\n: Introduce a distinct type for\nPEP 492\ncoroutines; add\ntypes.CoroutineType, inspect.getcoroutinestate,\ninspect.getcoroutinelocals; coroutines no longer use CO_GENERATOR flag;\nsys.set_coroutine_wrapper works only for ‘async def’ coroutines;\ninspect.iscoroutine no longer uses collections.abc.Coroutine, it’s\nintended to test for pure ‘async def’ coroutines only; add new opcode:\nGET_YIELD_FROM_ITER; fix generators wrapper used in types.coroutine to be\ninstance of collections.abc.Generator; collections.abc.Awaitable and\ncollections.abc.Coroutine can no longer be used to detect generator-based\ncoroutines–use inspect.isawaitable instead.\nbpo-24450\n: Add gi_yieldfrom to generators and cr_await to coroutines.\nContributed by Benno Leslie and Yury Selivanov.\nbpo-19235\n: Add new RecursionError exception. Patch by Georg Brandl.\nLibrary\n¶\nbpo-21750\n: mock_open.read_data can now be read from each instance, as it\ncould in Python 3.3.\nbpo-24552\n: Fix use after free in an error case of the _pickle module.\nbpo-24514\n: tarfile now tolerates number fields consisting of only\nwhitespace.\nbpo-19176\n: Fixed doctype() related bugs in C implementation of\nElementTree. A deprecation warning no longer issued by XMLParser subclass\nwith default doctype() method.  Direct call of doctype() now issues a\nwarning.  Parser’s doctype() now is not called if target’s doctype() is\ncalled.  Based on patch by Martin Panter.\nbpo-20387\n: Restore semantic round-trip correctness in tokenize/untokenize\nfor tab-indented blocks.\nbpo-24456\n: Fixed possible buffer over-read in adpcm2lin() and lin2adpcm()\nfunctions of the audioop module.\nbpo-24336\n: The contextmanager decorator now works with functions with\nkeyword arguments called “func” and “self”.  Patch by Martin Panter.\nbpo-24522\n: Fix possible integer overflow in json accelerator module.\nbpo-24489\n: ensure a previously set C errno doesn’t disturb cmath.polar().\nbpo-24408\n: Fixed AttributeError in measure() and metrics() methods of\ntkinter.Font.\nbpo-14373\n: C implementation of functools.lru_cache() now can be used with\nmethods.\nbpo-24347\n: Set KeyError if PyDict_GetItemWithError returns NULL.\nbpo-24348\n: Drop superfluous incref/decref.\nbpo-24359\n: Check for changed OrderedDict size during iteration.\nbpo-24368\n: Support keyword arguments in OrderedDict methods.\nbpo-24362\n: Simplify the C OrderedDict fast nodes resize logic.\nbpo-24377\n: Fix a ref leak in OrderedDict.__repr__.\nbpo-24369\n: Defend against key-changes during iteration.\nTests\n¶\nbpo-24373\n: _testmultiphase and xxlimited now use tp_traverse and\ntp_finalize to avoid reference leaks encountered when combining tp_dealloc\nwith PyType_FromSpec (see\nbpo-16690\nfor details)\nDocumentation\n¶\nbpo-24458\n: Update documentation to cover multi-phase initialization for\nextension modules (PEP 489). Patch by Petr Viktorin.\nbpo-24351\n: Clarify what is meant by “identifier” in the context of\nstring.Template instances.\nBuild\n¶\nbpo-24432\n: Update Windows builds and OS X 10.5 installer to use OpenSSL\n1.0.2c.\nPython 3.5.0 beta 2\n¶\nRelease date: 2015-05-31\nCore and Builtins\n¶\nbpo-24284\n: The startswith and endswith methods of the str class no longer\nreturn True when finding the empty string and the indexes are completely\nout of range.\nbpo-24115\n: Update uses of PyObject_IsTrue(), PyObject_Not(),\nPyObject_IsInstance(), PyObject_RichCompareBool() and _PyDict_Contains()\nto check for and handle errors correctly.\nbpo-24328\n: Fix importing one character extension modules.\nbpo-11205\n: In dictionary displays, evaluate the key before the value.\nbpo-24285\n: Fixed regression that prevented importing extension modules\nfrom inside packages. Patch by Petr Viktorin.\nLibrary\n¶\nbpo-23247\n: Fix a crash in the StreamWriter.reset() of CJK codecs.\nbpo-24270\n: Add math.isclose() and cmath.isclose() functions as per\nPEP 485\n. Contributed by Chris Barker and Tal Einat.\nbpo-5633\n: Fixed timeit when the statement is a string and the setup is\nnot.\nbpo-24326\n: Fixed audioop.ratecv() with non-default weightB argument.\nOriginal patch by David Moore.\nbpo-16991\n: Add a C implementation of OrderedDict.\nbpo-23934\n: Fix inspect.signature to fail correctly for builtin types\nlacking signature information.  Initial patch by James Powell.\nPython 3.5.0 beta 1\n¶\nRelease date: 2015-05-24\nCore and Builtins\n¶\nbpo-24276\n: Fixed optimization of property descriptor getter.\nbpo-24268\n: PEP 489: Multi-phase extension module initialization. Patch by\nPetr Viktorin.\nbpo-23955\n: Add pyvenv.cfg option to suppress registry/environment lookup\nfor generating sys.path on Windows.\nbpo-24257\n: Fixed system error in the comparison of faked\ntypes.SimpleNamespace.\nbpo-22939\n: Fixed integer overflow in iterator object.  Patch by Clement\nRouault.\nbpo-23985\n: Fix a possible buffer overrun when deleting a slice from the\nfront of a bytearray and then appending some other bytes data.\nbpo-24102\n: Fixed exception type checking in standard error handlers.\nbpo-15027\n: The UTF-32 encoder is now 3x to 7x faster.\nbpo-23290\n: Optimize set_merge() for cases where the target is empty.\n(Contributed by Serhiy Storchaka.)\nbpo-2292\n: PEP 448: Additional Unpacking Generalizations.\nbpo-24096\n: Make warnings.warn_explicit more robust against mutation of the\nwarnings.filters list.\nbpo-23996\n: Avoid a crash when a delegated generator raises an unnormalized\nStopIteration exception.  Patch by Stefan Behnel.\nbpo-23910\n: Optimize property() getter calls.  Patch by Joe Jevnik.\nbpo-23911\n: Move path-based importlib bootstrap code to a separate frozen\nmodule.\nbpo-24192\n: Fix namespace package imports.\nbpo-24022\n: Fix tokenizer crash when processing undecodable source code.\nbpo-9951\n: Added a hex() method to bytes, bytearray, and memoryview.\nbpo-22906\n: PEP 479: Change StopIteration handling inside generators.\nbpo-24017\n: PEP 492: Coroutines with async and await syntax.\nLibrary\n¶\nbpo-14373\n: Added C implementation of functools.lru_cache().  Based on\npatches by Matt Joiner and Alexey Kachayev.\nbpo-24230\n: The tempfile module now accepts bytes for prefix, suffix and\ndir parameters and returns bytes in such situations (matching the os\nmodule APIs).\nbpo-22189\n: collections.UserString now supports __getnewargs__(),\n__rmod__(), casefold(), format_map(), isprintable(), and maketrans().\nPatch by Joe Jevnik.\nbpo-24244\n: Prevents termination when an invalid format string is\nencountered on Windows in strftime.\nbpo-23973\n: PEP 484: Add the typing module.\nbpo-23086\n: The collections.abc.Sequence() abstract base class added\nstart\nand\nstop\nparameters to the index() mixin. Patch by Devin\nJeanpierre.\nbpo-20035\n: Replaced the\ntkinter._fix\nmodule used for setting up the\nTcl/Tk environment on Windows with a private function in the\n_tkinter\nmodule that makes no permanent changes to the environment.\nbpo-24257\n: Fixed segmentation fault in sqlite3.Row constructor with faked\ncursor type.\nbpo-15836\n: assertRaises(), assertRaisesRegex(), assertWarns() and\nassertWarnsRegex() assertments now check the type of the first argument to\nprevent possible user error.  Based on patch by Daniel Wagner-Hall.\nbpo-9858\n: Add missing method stubs to _io.RawIOBase.  Patch by Laura\nRupprecht.\nbpo-22955\n: attrgetter, itemgetter and methodcaller objects in the operator\nmodule now support pickling.  Added readable and evaluable repr for these\nobjects. Based on patch by Josh Rosenberg.\nbpo-22107\n: tempfile.gettempdir() and tempfile.mkdtemp() now try again when\na directory with the chosen name already exists on Windows as well as on\nUnix. tempfile.mkstemp() now fails early if parent directory is not valid\n(not exists or is a file) on Windows.\nbpo-23780\n: Improved error message in os.path.join() with single argument.\nbpo-6598\n: Increased time precision and random number range in\nemail.utils.make_msgid() to strengthen the uniqueness of the message ID.\nbpo-24091\n: Fixed various crashes in corner cases in C implementation of\nElementTree.\nbpo-21931\n: msilib.FCICreate() now raises TypeError in the case of a bad\nargument instead of a ValueError with a bogus FCI error number. Patch by\nJeffrey Armstrong.\nbpo-13866\n:\nquote_via\nargument added to urllib.parse.urlencode.\nbpo-20098\n: New mangle_from policy option for email, default True for\ncompat32, but False for all other policies.\nbpo-24211\n: The email library now supports RFC 6532: it can generate\nheaders using utf-8 instead of encoded words.\nbpo-16314\n: Added support for the LZMA compression in distutils.\nbpo-21804\n: poplib now supports RFC 6856 (UTF8).\nbpo-18682\n: Optimized pprint functions for builtin scalar types.\nbpo-22027\n: smtplib now supports RFC 6531 (SMTPUTF8).\nbpo-23488\n: Random generator objects now consume 2x less memory on 64-bit.\nbpo-1322\n: platform.dist() and platform.linux_distribution() functions are\nnow deprecated.  Initial patch by Vajrasky Kok.\nbpo-22486\n: Added the math.gcd() function.  The fractions.gcd() function\nnow is deprecated.  Based on patch by Mark Dickinson.\nbpo-24064\n: Property() docstrings are now writeable. (Patch by Berker\nPeksag.)\nbpo-22681\n: Added support for the koi8_t encoding.\nbpo-22682\n: Added support for the kz1048 encoding.\nbpo-23796\n: peek and read1 methods of BufferedReader now raise ValueError\nif they called on a closed object. Patch by John Hergenroeder.\nbpo-21795\n: smtpd now supports the 8BITMIME extension whenever the new\ndecode_data\nconstructor argument is set to False.\nbpo-24155\n: optimize heapq.heapify() for better cache performance when\nheapifying large lists.\nbpo-21800\n: imaplib now supports RFC 5161 (enable), RFC 6855\n(utf8/internationalized email) and automatically encodes non-ASCII\nusernames and passwords to UTF8.\nbpo-20274\n: When calling a _sqlite.Connection, it now complains if passed\nany keyword arguments.  Previously it silently ignored them.\nbpo-20274\n: Remove ignored and erroneous “kwargs” parameters from three\nMETH_VARARGS methods on _sqlite.Connection.\nbpo-24134\n: assertRaises(), assertRaisesRegex(), assertWarns() and\nassertWarnsRegex() checks now emits a deprecation warning when callable is\nNone or keyword arguments except msg is passed in the context manager\nmode.\nbpo-24018\n: Add a collections.abc.Generator abstract base class.\nContributed by Stefan Behnel.\nbpo-23880\n: Tkinter’s getint() and getdouble() now support Tcl_Obj.\nTkinter’s getdouble() now supports any numbers (in particular int).\nbpo-22619\n: Added negative limit support in the traceback module. Based on\npatch by Dmitry Kazakov.\nbpo-24094\n: Fix possible crash in json.encode with poorly behaved dict\nsubclasses.\nbpo-9246\n: On POSIX, os.getcwd() now supports paths longer than 1025 bytes.\nPatch written by William Orr.\nbpo-17445\n: add difflib.diff_bytes() to support comparison of byte strings\n(fixes a regression from Python 2).\nbpo-23917\n: Fall back to sequential compilation when ProcessPoolExecutor\ndoesn’t exist. Patch by Claudiu Popa.\nbpo-23008\n: Fixed resolving attributes with boolean value is False in\npydoc.\nFix asyncio issue 235: LifoQueue and PriorityQueue’s put didn’t increment\nunfinished tasks (this bug was introduced when JoinableQueue was merged\nwith Queue).\nbpo-23908\n: os functions now reject paths with embedded null character on\nWindows instead of silently truncating them.\nbpo-23728\n: binascii.crc_hqx() could return an integer outside of the range\n0-0xffff for empty data.\nbpo-23887\n: urllib.error.HTTPError now has a proper repr() representation.\nPatch by Berker Peksag.\nasyncio: New event loop APIs: set_task_factory() and get_task_factory().\nasyncio: async() function is deprecated in favour of ensure_future().\nbpo-24178\n: asyncio.Lock, Condition, Semaphore, and BoundedSemaphore\nsupport new ‘async with’ syntax.  Contributed by Yury Selivanov.\nbpo-24179\n: Support ‘async for’ for asyncio.StreamReader. Contributed by\nYury Selivanov.\nbpo-24184\n: Add AsyncIterator and AsyncIterable ABCs to collections.abc.\nContributed by Yury Selivanov.\nbpo-22547\n: Implement informative __repr__ for inspect.BoundArguments.\nContributed by Yury Selivanov.\nbpo-24190\n: Implement inspect.BoundArgument.apply_defaults() method.\nContributed by Yury Selivanov.\nbpo-20691\n: Add ‘follow_wrapped’ argument to\ninspect.Signature.from_callable() and inspect.signature(). Contributed by\nYury Selivanov.\nbpo-24248\n: Deprecate inspect.Signature.from_function() and\ninspect.Signature.from_builtin().\nbpo-23898\n: Fix inspect.classify_class_attrs() to support attributes with\noverloaded __eq__ and __bool__.  Patch by Mike Bayer.\nbpo-24298\n: Fix inspect.signature() to correctly unwrap wrappers around\nbound methods.\nIDLE\n¶\nbpo-23184\n: remove unused names and imports in idlelib. Initial patch by Al\nSweigart.\nTests\n¶\nbpo-21520\n: test_zipfile no longer fails if the word ‘bad’ appears anywhere\nin the name of the current directory.\nbpo-9517\n: Move script_helper into the support package. Patch by Christie\nWilson.\nDocumentation\n¶\nbpo-22155\n: Add File Handlers subsection with createfilehandler to tkinter\ndoc.  Remove obsolete example from FAQ.  Patch by Martin Panter.\nbpo-24029\n: Document the name binding behavior for submodule imports.\nbpo-24077\n: Fix typo in man page for -I command option: -s, not -S\nTools/Demos\n¶\nbpo-24000\n: Improved Argument Clinic’s mapping of converters to legacy\n“format units”. Updated the documentation to match.\nbpo-24001\n: Argument Clinic converters now use accept={type} instead of\ntypes={‘type’} to specify the types the converter accepts.\nbpo-23330\n: h2py now supports arbitrary filenames in #include.\nbpo-24031\n: make patchcheck now supports git checkouts, too.\nPython 3.5.0 alpha 4\n¶\nRelease date: 2015-04-19\nCore and Builtins\n¶\nbpo-22980\n: Under Linux, GNU/KFreeBSD and the Hurd, C extensions now\ninclude the architecture triplet in the extension name, to make it easy to\ntest builds for different ABIs in the same working tree.  Under OS X, the\nextension name now includes\nPEP 3149\n-style information.\nbpo-22631\n: Added Linux-specific socket constant CAN_RAW_FD_FRAMES. Patch\ncourtesy of Joe Jevnik.\nbpo-23731\n: Implement\nPEP 488\n: removal of .pyo files.\nbpo-23726\n: Don’t enable GC for user subclasses of non-GC types that don’t\nadd any new fields.  Patch by Eugene Toder.\nbpo-23309\n: Avoid a deadlock at shutdown if a daemon thread is aborted\nwhile it is holding a lock to a buffered I/O object, and the main thread\ntries to use the same I/O object (typically stdout or stderr).  A fatal\nerror is emitted instead.\nbpo-22977\n: Fixed formatting Windows error messages on Wine. Patch by\nMartin Panter.\nbpo-23466\n: %c, %o, %x, and %X in bytes formatting now raise TypeError on\nnon-integer input.\nbpo-24044\n: Fix possible null pointer dereference in list.sort in out of\nmemory conditions.\nbpo-21354\n: PyCFunction_New function is exposed by python DLL again.\nLibrary\n¶\nbpo-23840\n: tokenize.open() now closes the temporary binary file on error\nto fix a resource warning.\nbpo-16914\n: new debuglevel 2 in smtplib adds timestamps to debug output.\nbpo-7159\n: urllib.request now supports sending auth credentials\nautomatically after the first 401.  This enhancement is a superset of the\nenhancement from\nbpo-19494\nand supersedes that change.\nbpo-23703\n: Fix a regression in urljoin() introduced in 901e4e52b20a. Patch\nby Demian Brecht.\nbpo-4254\n: Adds _curses.update_lines_cols().  Patch by Arnon Yaari\nbpo-19933\n: Provide default argument for ndigits in round. Patch by\nVajrasky Kok.\nbpo-23193\n: Add a numeric_owner parameter to tarfile.TarFile.extract and\ntarfile.TarFile.extractall. Patch by Michael Vogt and Eric Smith.\nbpo-23342\n: Add a subprocess.run() function than returns a CalledProcess\ninstance for a more consistent API than the existing call* functions.\nbpo-21217\n: inspect.getsourcelines() now tries to compute the start and end\nlines from the code object, fixing an issue when a lambda function is used\nas decorator argument. Patch by Thomas Ballinger and Allison Kaptur.\nbpo-24521\n: Fix possible integer overflows in the pickle module.\nbpo-22931\n: Allow ‘[’ and ‘]’ in cookie values.\nThe keywords attribute of functools.partial is now always a dictionary.\nbpo-23811\n: Add missing newline to the PyCompileError error message. Patch\nby Alex Shkop.\nbpo-21116\n: Avoid blowing memory when allocating a multiprocessing shared\narray that’s larger than 50% of the available RAM.  Patch by Médéric\nBoquien.\nbpo-22982\n: Improve BOM handling when seeking to multiple positions of a\nwritable text file.\nbpo-23464\n: Removed deprecated asyncio JoinableQueue.\nbpo-23529\n: Limit the size of decompressed data when reading from GzipFile,\nBZ2File or LZMAFile.  This defeats denial of service attacks using\ncompressed bombs (i.e. compressed payloads which decompress to a huge\nsize).  Patch by Martin Panter and Nikolaus Rath.\nbpo-21859\n: Added Python implementation of io.FileIO.\nbpo-23865\n: close() methods in multiple modules now are idempotent and more\nrobust at shutdown. If they need to release multiple resources, all are\nreleased even if errors occur.\nbpo-23400\n: Raise same exception on both Python 2 and 3 if sem_open is not\navailable. Patch by Davin Potts.\nbpo-10838\n: The subprocess now module includes SubprocessError and\nTimeoutError in its list of exported names for the users wild enough to\nuse\nfrom\nsubprocess\nimport\n*\n.\nbpo-23411\n: Added DefragResult, ParseResult, SplitResult,\nDefragResultBytes, ParseResultBytes, and SplitResultBytes to\nurllib.parse.__all__. Patch by Martin Panter.\nbpo-23881\n: urllib.request.ftpwrapper constructor now closes the socket if\nthe FTP connection failed to fix a ResourceWarning.\nbpo-23853\n:\nsocket.socket.sendall()\ndoes no more reset the socket\ntimeout each time data is sent successfully. The socket timeout is now the\nmaximum total duration to send all data.\nbpo-22721\n: An order of multiline pprint output of set or dict containing\norderable and non-orderable elements no longer depends on iteration order\nof set or dict.\nbpo-15133\n: _tkinter.tkapp.getboolean() now supports Tcl_Obj and always\nreturns bool. tkinter.BooleanVar now validates input values (accepted\nbool, int, str, and Tcl_Obj).  tkinter.BooleanVar.get() now always returns\nbool.\nbpo-10590\n: xml.sax.parseString() now supports string argument.\nbpo-23338\n: Fixed formatting ctypes error messages on Cygwin. Patch by\nMakoto Kato.\nbpo-15582\n: inspect.getdoc() now follows inheritance chains.\nbpo-2175\n: SAX parsers now support a character stream of InputSource\nobject.\nbpo-16840\n: Tkinter now supports 64-bit integers added in Tcl 8.4 and\narbitrary precision integers added in Tcl 8.5.\nbpo-23834\n: Fix socket.sendto(), use the C Py_ssize_t type to store the\nresult of sendto() instead of the C int type.\nbpo-23618\n:\nsocket.socket.connect()\nnow waits until the connection\ncompletes instead of raising\nInterruptedError\nif the connection is\ninterrupted by signals, signal handlers don’t raise an exception and the\nsocket is blocking or has a timeout.\nsocket.socket.connect()\nstill\nraise\nInterruptedError\nfor non-blocking sockets.\nbpo-21526\n: Tkinter now supports new boolean type in Tcl 8.5.\nbpo-23836\n: Fix the faulthandler module to handle reentrant calls to its\nsignal handlers.\nbpo-23838\n: linecache now clears the cache and returns an empty result on\nMemoryError.\nbpo-10395\n: Added os.path.commonpath(). Implemented in posixpath and\nntpath. Based on patch by Rafik Draoui.\nbpo-23611\n: Serializing more “lookupable” objects (such as unbound methods\nor nested classes) now are supported with pickle protocols < 4.\nbpo-13583\n: sqlite3.Row now supports slice indexing.\nbpo-18473\n: Fixed 2to3 and 3to2 compatible pickle mappings.  Fixed\nambiguous reverse mappings.  Added many new mappings.  Import mapping is\nno longer applied to modules already mapped with full name mapping.\nbpo-23485\n: select.select() is now retried automatically with the\nrecomputed timeout when interrupted by a signal, except if the signal\nhandler raises an exception. This change is part of the\nPEP 475\n.\nbpo-23752\n: When built from an existing file descriptor, io.FileIO() now\nonly calls fstat() once. Before fstat() was called twice, which was not\nnecessary.\nbpo-23704\n: collections.deque() objects now support __add__, __mul__, and\n__imul__().\nbpo-23171\n: csv.Writer.writerow() now supports arbitrary iterables.\nbpo-23745\n: The new email header parser now handles duplicate MIME\nparameter names without error, similar to how get_param behaves.\nbpo-22117\n: Fix os.utime(), it now rounds the timestamp towards minus\ninfinity (-inf) instead of rounding towards zero.\nbpo-23310\n: Fix MagicMock’s initializer to work with __methods__, just like\nconfigure_mock().  Patch by Kasia Jachim.\nBuild\n¶\nbpo-23817\n: FreeBSD now uses “1.0” in the SOVERSION as other operating\nsystems, instead of just “1”.\nbpo-23501\n: Argument Clinic now generates code into separate files by\ndefault.\nTests\n¶\nbpo-23799\n: Added test.support.start_threads() for running and cleaning up\nmultiple threads.\nbpo-22390\n: test.regrtest now emits a warning if temporary files or\ndirectories are left after running a test.\nTools/Demos\n¶\nbpo-18128\n: pygettext now uses standard +NNNN format in the\nPOT-Creation-Date header.\nbpo-23935\n: Argument Clinic’s understanding of format units accepting\nbytes, bytearrays, and buffers is now consistent with both the\ndocumentation and the implementation.\nbpo-23944\n: Argument Clinic now wraps long impl prototypes at column 78.\nbpo-20586\n: Argument Clinic now ensures that functions without docstrings\nhave signatures.\nbpo-23492\n: Argument Clinic now generates argument parsing code with\nPyArg_Parse instead of PyArg_ParseTuple if possible.\nbpo-23500\n: Argument Clinic is now smarter about generating the “#ifndef”\n(empty) definition of the methoddef macro: it’s only generated once, even\nif Argument Clinic processes the same symbol multiple times, and it’s\nemitted at the end of all processing rather than immediately after the\nfirst use.\nC API\n¶\nbpo-23998\n: PyImport_ReInitLock() now checks for lock allocation error\nPython 3.5.0 alpha 3\n¶\nRelease date: 2015-03-28\nCore and Builtins\n¶\nbpo-23573\n: Increased performance of string search operations (str.find,\nstr.index, str.count, the in operator, str.split, str.partition) with\narguments of different kinds (UCS1, UCS2, UCS4).\nbpo-23753\n: Python doesn’t support anymore platforms without stat() or\nfstat(), these functions are always required.\nbpo-23681\n: The -b option now affects comparisons of bytes with int.\nbpo-23632\n: Memoryviews now allow tuple indexing (including for\nmulti-dimensional memoryviews).\nbpo-23192\n: Fixed generator lambdas.  Patch by Bruno Cauet.\nbpo-23629\n: Fix the default __sizeof__ implementation for variable-sized\nobjects.\nLibrary\n¶\nbpo-14260\n: The groupindex attribute of regular expression pattern object\nnow is non-modifiable mapping.\nbpo-23792\n: Ignore KeyboardInterrupt when the pydoc pager is active. This\nmimics the behavior of the standard unix pagers, and prevents pipepager\nfrom shutting down while the pager itself is still running.\nbpo-23775\n: pprint() of OrderedDict now outputs the same representation as\nrepr().\nbpo-23765\n: Removed IsBadStringPtr calls in ctypes\nbpo-22364\n: Improved some re error messages using regex for hints.\nbpo-23742\n: ntpath.expandvars() no longer loses unbalanced single quotes.\nbpo-21717\n: The zipfile.ZipFile.open function now supports ‘x’ (exclusive\ncreation) mode.\nbpo-21802\n: The reader in BufferedRWPair now is closed even when closing\nwriter failed in BufferedRWPair.close().\nbpo-23622\n: Unknown escapes in regular expressions that consist of\n'\\'\nand ASCII letter now raise a deprecation warning and will be forbidden in\nPython 3.6.\nbpo-23671\n: string.Template now allows specifying the “self” parameter as a\nkeyword argument.  string.Formatter now allows specifying the “self” and\nthe “format_string” parameters as keyword arguments.\nbpo-23502\n: The pprint module now supports mapping proxies.\nbpo-17530\n: pprint now wraps long bytes objects and bytearrays.\nbpo-22687\n: Fixed some corner cases in breaking words in tetxtwrap. Got rid\nof quadratic complexity in breaking long words.\nbpo-4727\n: The copy module now uses pickle protocol 4 (PEP 3154) and\nsupports copying of instances of classes whose __new__ method takes\nkeyword-only arguments.\nbpo-23491\n: Added a zipapp module to support creating executable zip file\narchives of Python code. Registered “.pyz” and “.pyzw” extensions on\nWindows for these archives (PEP 441).\nbpo-23657\n: Avoid explicit checks for str in zipapp, adding support for\npathlib.Path objects as arguments.\nbpo-23688\n: Added support of arbitrary bytes-like objects and avoided\nunnecessary copying of memoryview in gzip.GzipFile.write(). Original patch\nby Wolfgang Maier.\nbpo-23252\n: Added support for writing ZIP files to unseekable streams.\nbpo-23647\n: Increase imaplib’s MAXLINE to accommodate modern mailbox sizes.\nbpo-23539\n: If body is None, http.client.HTTPConnection.request now sets\nContent-Length to 0 for PUT, POST, and PATCH headers to avoid 411 errors\nfrom some web servers.\nbpo-22351\n: The nntplib.NNTP constructor no longer leaves the connection\nand socket open until the garbage collector cleans them up.  Patch by\nMartin Panter.\nbpo-23704\n: collections.deque() objects now support methods for index(),\ninsert(), and copy().  This allows deques to be registered as a\nMutableSequence and it improves their substitutability for lists.\nbpo-23715\n:\nsignal.sigwaitinfo()\nand\nsignal.sigtimedwait()\nare\nnow retried when interrupted by a signal not in the\nsigset\nparameter, if\nthe signal handler does not raise an exception. signal.sigtimedwait()\nrecomputes the timeout with a monotonic clock when it is retried.\nbpo-23001\n: Few functions in modules mmap, ossaudiodev, socket, ssl, and\ncodecs, that accepted only read-only bytes-like object now accept writable\nbytes-like object too.\nbpo-23646\n: If time.sleep() is interrupted by a signal, the sleep is now\nretried with the recomputed delay, except if the signal handler raises an\nexception (PEP 475).\nbpo-23136\n: _strptime now uniformly handles all days in week 0, including\nDec 30 of previous year.  Based on patch by Jim Carroll.\nbpo-23700\n: Iterator of NamedTemporaryFile now keeps a reference to\nNamedTemporaryFile instance.  Patch by Bohuslav Kabrda.\nbpo-22903\n: The fake test case created by unittest.loader when it fails\nimporting a test module is now picklable.\nbpo-22181\n: On Linux, os.urandom() now uses the new getrandom() syscall if\navailable, syscall introduced in the Linux kernel 3.17. It is more\nreliable and more secure, because it avoids the need of a file descriptor\nand waits until the kernel has enough entropy.\nbpo-2211\n: Updated the implementation of the http.cookies.Morsel class.\nSetting attributes key, value and coded_value directly now is deprecated.\nupdate() and setdefault() now transform and check keys.  Comparing for\nequality now takes into account attributes key, value and coded_value.\ncopy() now returns a Morsel, not a dict.  repr() now contains all\nattributes. Optimized checking keys and quoting values.  Added new tests.\nOriginal patch by Demian Brecht.\nbpo-18983\n: Allow selection of output units in timeit. Patch by Julian\nGindi.\nbpo-23631\n: Fix traceback.format_list when a traceback has been mutated.\nbpo-23568\n: Add rdivmod support to MagicMock() objects. Patch by Håkan\nLövdahl.\nbpo-2052\n: Add charset parameter to HtmlDiff.make_file().\nbpo-23668\n: Support os.truncate and os.ftruncate on Windows.\nbpo-23138\n: Fixed parsing cookies with absent keys or values in cookiejar.\nPatch by Demian Brecht.\nbpo-23051\n: multiprocessing.Pool methods imap() and imap_unordered() now\nhandle exceptions raised by an iterator.  Patch by Alon Diamant and Davin\nPotts.\nbpo-23581\n: Add matmul support to MagicMock. Patch by Håkan Lövdahl.\nbpo-23566\n: enable(), register(), dump_traceback() and\ndump_traceback_later() functions of faulthandler now accept file\ndescriptors. Patch by Wei Wu.\nbpo-22928\n: Disabled HTTP header injections in http.client. Original patch\nby Demian Brecht.\nbpo-23615\n: Modules bz2, tarfile and tokenize now can be reloaded with\nimp.reload(). Patch by Thomas Kluyver.\nbpo-23605\n: os.walk() now calls os.scandir() instead of os.listdir(). The\nusage of os.scandir() reduces the number of calls to os.stat(). Initial\npatch written by Ben Hoyt.\nBuild\n¶\nbpo-23585\n: make patchcheck will ensure the interpreter is built.\nTests\n¶\nbpo-23583\n: Added tests for standard IO streams in IDLE.\nbpo-22289\n: Prevent test_urllib2net failures due to ftp connection timeout.\nTools/Demos\n¶\nbpo-22826\n: The result of open() in Tools/freeze/bkfile.py is now better\ncompatible with regular files (in particular it now supports the context\nmanagement protocol).\nPython 3.5.0 alpha 2\n¶\nRelease date: 2015-03-09\nCore and Builtins\n¶\nbpo-23571\n: PyObject_Call() and PyCFunction_Call() now raise a SystemError\nif a function returns a result and raises an exception. The SystemError is\nchained to the previous exception.\nLibrary\n¶\nbpo-22524\n: New os.scandir() function, part of the\nPEP 471\n:\n“os.scandir() function – a better and faster directory iterator”. Patch\nwritten by Ben Hoyt.\nbpo-23103\n: Reduced the memory consumption of IPv4Address and IPv6Address.\nbpo-21793\n: BaseHTTPRequestHandler again logs response code as numeric, not\nas stringified enum.  Patch by Demian Brecht.\nbpo-23476\n: In the ssl module, enable OpenSSL’s X509_V_FLAG_TRUSTED_FIRST\nflag on certificate stores when it is available.\nbpo-23576\n: Avoid stalling in SSL reads when EOF has been reached in the\nSSL layer but the underlying connection hasn’t been closed.\nbpo-23504\n: Added an __all__ to the types module.\nbpo-23563\n: Optimized utility functions in urllib.parse.\nbpo-7830\n: Flatten nested functools.partial.\nbpo-20204\n: Added the __module__ attribute to _tkinter classes.\nbpo-19980\n: Improved help() for non-recognized strings.  help(‘’) now shows\nthe help on str.  help(‘help’) now shows the help on help(). Original\npatch by Mark Lawrence.\nbpo-23521\n: Corrected pure python implementation of timedelta division.\nEliminated OverflowError from\ntimedelta\n*\nfloat\nfor some floats;\nCorrected rounding in timedelta true division.\nbpo-21619\n: Popen objects no longer leave a zombie after exit in the with\nstatement if the pipe was broken.  Patch by Martin Panter.\nbpo-22936\n: Make it possible to show local variables in tracebacks for both\nthe traceback module and unittest.\nbpo-15955\n: Add an option to limit the output size in bz2.decompress().\nPatch by Nikolaus Rath.\nbpo-6639\n: Module-level turtle functions no longer raise TclError after\nclosing the window.\nbpo-814253\n: Group references and conditional group references now work in\nlookbehind assertions in regular expressions. (See also:\nbpo-9179\n)\nbpo-23215\n: Multibyte codecs with custom error handlers that ignores errors\nconsumed too much memory and raised SystemError or MemoryError. Original\npatch by Aleksi Torhamo.\nbpo-5700\n: io.FileIO() called flush() after closing the file. flush() was\nnot called in close() if closefd=False.\nbpo-23374\n: Fixed pydoc failure with non-ASCII files when stdout encoding\ndiffers from file system encoding (e.g. on Mac OS).\nbpo-23481\n: Remove RC4 from the SSL module’s default cipher list.\nbpo-21548\n: Fix pydoc.synopsis() and pydoc.apropos() on modules with empty\ndocstrings.\nbpo-22885\n: Fixed arbitrary code execution vulnerability in the dbm.dumb\nmodule. Original patch by Claudiu Popa.\nbpo-23239\n: ssl.match_hostname() now supports matching of IP addresses.\nbpo-23146\n: Fix mishandling of absolute Windows paths with forward slashes\nin pathlib.\nbpo-23096\n: Pickle representation of floats with protocol 0 now is the same\nfor both Python and C implementations.\nbpo-19105\n: pprint now more efficiently uses free space at the right.\nbpo-14910\n: Add allow_abbrev parameter to argparse.ArgumentParser. Patch by\nJonathan Paugh, Steven Bethard, paul j3 and Daniel Eriksson.\nbpo-21717\n: tarfile.open() now supports ‘x’ (exclusive creation) mode.\nbpo-23344\n: marshal.dumps() is now 20-25% faster on average.\nbpo-20416\n: marshal.dumps() with protocols 3 and 4 is now 40-50% faster on\naverage.\nbpo-23421\n: Fixed compression in tarfile CLI.  Patch by wdv4758h.\nbpo-23367\n: Fix possible overflows in the unicodedata module.\nbpo-23361\n: Fix possible overflow in Windows subprocess creation code.\nlogging.handlers.QueueListener now takes a respect_handler_level keyword\nargument which, if set to True, will pass messages to handlers taking\nhandler levels into account.\nbpo-19705\n: turtledemo now has a visual sorting algorithm demo.  Original\npatch from Jason Yeo.\nbpo-23801\n: Fix issue where cgi.FieldStorage did not always ignore the\nentire preamble to a multipart body.\nBuild\n¶\nbpo-23445\n: pydebug builds now use “gcc -Og” where possible, to make the\nresulting executable faster.\nbpo-23686\n: Update OS X 10.5 installer build to use OpenSSL 1.0.2a.\nC API\n¶\nbpo-20204\n: Deprecation warning is now raised for builtin types without the\n__module__ attribute.\nWindows\n¶\nbpo-23465\n: Implement\nPEP 486\n- Make the Python Launcher aware of\nvirtual environments. Patch by Paul Moore.\nbpo-23437\n: Make user scripts directory versioned on Windows. Patch by Paul\nMoore.\nPython 3.5.0 alpha 1\n¶\nRelease date: 2015-02-08\nCore and Builtins\n¶\nbpo-23285\n: PEP 475 - EINTR handling.\nbpo-22735\n: Fix many edge cases (including crashes) involving custom mro()\nimplementations.\nbpo-22896\n: Avoid using PyObject_AsCharBuffer(), PyObject_AsReadBuffer()\nand PyObject_AsWriteBuffer().\nbpo-21295\n: Revert some changes (\nbpo-16795\n) to AST line numbers and\ncolumn offsets that constituted a regression.\nbpo-22986\n: Allow changing an object’s __class__ between a dynamic type and\nstatic type in some cases.\nbpo-15859\n: PyUnicode_EncodeFSDefault(), PyUnicode_EncodeMBCS() and\nPyUnicode_EncodeCodePage() now raise an exception if the object is not a\nUnicode object. For PyUnicode_EncodeFSDefault(), it was already the case\non platforms other than Windows. Patch written by Campbell Barton.\nbpo-21408\n: The default __ne__() now returns NotImplemented if __eq__()\nreturned NotImplemented.  Original patch by Martin Panter.\nbpo-23321\n: Fixed a crash in str.decode() when error handler returned\nreplacement string longer than malformed input data.\nbpo-22286\n: The “backslashreplace” error handlers now works with decoding\nand translating.\nbpo-23253\n: Delay-load ShellExecute[AW] in os.startfile for reduced startup\noverhead on Windows.\nbpo-22038\n: pyatomic.h now uses stdatomic.h or GCC built-in functions for\natomic memory access if available. Patch written by Vitor de Lima and\nGustavo Temple.\nbpo-20284\n: %-interpolation (aka printf) formatting added for bytes and\nbytearray.\nbpo-23048\n: Fix jumping out of an infinite while loop in the pdb.\nbpo-20335\n: bytes constructor now raises TypeError when encoding or errors\nis specified with non-string argument.  Based on patch by Renaud Blanch.\nbpo-22834\n: If the current working directory ends up being set to a\nnon-existent directory then import will no longer raise FileNotFoundError.\nbpo-22869\n: Move the interpreter startup & shutdown code to a new dedicated\npylifecycle.c module\nbpo-22847\n: Improve method cache efficiency.\nbpo-22335\n: Fix crash when trying to enlarge a bytearray to 0x7fffffff\nbytes on a 32-bit platform.\nbpo-22653\n: Fix an assertion failure in debug mode when doing a reentrant\ndict insertion in debug mode.\nbpo-22643\n: Fix integer overflow in Unicode case operations (upper, lower,\ntitle, swapcase, casefold).\nbpo-17636\n: Circular imports involving relative imports are now supported.\nbpo-22604\n: Fix assertion error in debug mode when dividing a complex\nnumber by (nan+0j).\nbpo-21052\n: Do not raise ImportWarning when sys.path_hooks or sys.meta_path\nare set to None.\nbpo-16518\n: Use ‘bytes-like object required’ in error messages that\npreviously used the far more cryptic “‘x’ does not support the buffer\nprotocol.\nbpo-22470\n: Fixed integer overflow issues in “backslashreplace”,\n“xmlcharrefreplace”, and “surrogatepass” error handlers.\nbpo-22540\n: speed up\nPyObject_IsInstance\nand\nPyObject_IsSubclass\nin\nthe common case that the second argument has metaclass\ntype\n.\nbpo-18711\n: Add a new\nPyErr_FormatV\nfunction, similar to\nPyErr_Format\nbut accepting a\nva_list\nargument.\nbpo-22520\n: Fix overflow checking when generating the repr of a unicode\nobject.\nbpo-22519\n: Fix overflow checking in PyBytes_Repr.\nbpo-22518\n: Fix integer overflow issues in latin-1 encoding.\nbpo-16324\n: _charset parameter of MIMEText now also accepts\nemail.charset.Charset instances. Initial patch by Claude Paroz.\nbpo-1764286\n: Fix inspect.getsource() to support decorated functions. Patch\nby Claudiu Popa.\nbpo-18554\n: os.__all__ includes posix functions.\nbpo-21391\n: Use os.path.abspath in the shutil module.\nbpo-11471\n: avoid generating a JUMP_FORWARD instruction at the end of an\nif-block if there is no else-clause.  Original patch by Eugene Toder.\nbpo-22215\n: Now ValueError is raised instead of TypeError when str or bytes\nargument contains not permitted null character or byte.\nbpo-22258\n: Fix the internal function set_inheritable() on Illumos. This\nplatform exposes the function\nioctl(FIOCLEX)\n, but calling it fails\nwith errno is ENOTTY: “Inappropriate ioctl for device”. set_inheritable()\nnow falls back to the slower\nfcntl()\n(\nF_GETFD\nand then\nF_SETFD\n).\nbpo-21389\n: Displaying the __qualname__ of the underlying function in the\nrepr of a bound method.\nbpo-22206\n: Using pthread, PyThread_create_key() now sets errno to ENOMEM\nand returns -1 (error) on integer overflow.\nbpo-20184\n: Argument Clinic based signature introspection added for 30 of\nthe builtin functions.\nbpo-22116\n: C functions and methods (of the ‘builtin_function_or_method’\ntype) can now be weakref’ed.  Patch by Wei Wu.\nbpo-22077\n: Improve index error messages for bytearrays, bytes, lists, and\ntuples by adding ‘or slices’. Added ‘, not <typename>’ for bytearrays.\nOriginal patch by Claudiu Popa.\nbpo-20179\n: Apply Argument Clinic to bytes and bytearray. Patch by Tal\nEinat.\nbpo-22082\n: Clear interned strings in slotdefs.\nUpgrade Unicode database to Unicode 7.0.0.\nbpo-21897\n: Fix a crash with the f_locals attribute with closure variables\nwhen frame.clear() has been called.\nbpo-21205\n: Add a new\n__qualname__\nattribute to generator, the\nqualified name, and use it in the representation of a generator\n(\nrepr(gen)\n). The default name of the generator (\n__name__\nattribute) is now get from the function instead of the code. Use\ngen.gi_code.co_name\nto get the name of the code.\nbpo-21669\n: With the aid of heuristics in SyntaxError.__init__, the parser\nnow attempts to generate more meaningful (or at least more search engine\nfriendly) error messages when “exec” and “print” are used as statements.\nbpo-21642\n: In the conditional if-else expression, allow an integer written\nwith no space between itself and the\nelse\nkeyword (e.g.\nTrue\nif\n42else\nFalse\n) to be valid syntax.\nbpo-21523\n: Fix over-pessimistic computation of the stack effect of some\nopcodes in the compiler.  This also fixes a quadratic compilation time\nissue noticeable when compiling code with a large number of “and” and “or”\noperators.\nbpo-21418\n: Fix a crash in the builtin function super() when called without\nargument and without current frame (ex: embedded Python).\nbpo-21425\n: Fix flushing of standard streams in the interactive\ninterpreter.\nbpo-21435\n: In rare cases, when running finalizers on objects in cyclic\ntrash a bad pointer dereference could occur due to a subtle flaw in\ninternal iteration logic.\nbpo-21377\n: PyBytes_Concat() now tries to concatenate in-place when the\nfirst argument has a reference count of 1.  Patch by Nikolaus Rath.\nbpo-20355\n: -W command line options now have higher priority than the\nPYTHONWARNINGS environment variable.  Patch by Arfrever.\nbpo-21274\n: Define PATH_MAX for GNU/Hurd in Python/pythonrun.c.\nbpo-20904\n: Support setting FPU precision on m68k.\nbpo-21209\n: Fix sending tuples to custom generator objects with the yield\nfrom syntax.\nbpo-21193\n: pow(a, b, c) now raises ValueError rather than TypeError when b\nis negative. Patch by Josh Rosenberg.\nbpo-21176\n: PEP 465: Add the ‘@’ operator for matrix multiplication.\nbpo-21134\n: Fix segfault when str is called on an uninitialized\nUnicodeEncodeError, UnicodeDecodeError, or UnicodeTranslateError object.\nbpo-19537\n: Fix PyUnicode_DATA() alignment under m68k.  Patch by Andreas\nSchwab.\nbpo-20929\n: Add a type cast to avoid shifting a negative number.\nbpo-20731\n: Properly position in source code files even if they are opened\nin text mode. Patch by Serhiy Storchaka.\nbpo-20637\n: Key-sharing now also works for instance dictionaries of\nsubclasses.  Patch by Peter Ingebretson.\nbpo-8297\n: Attributes missing from modules now include the module name in\nthe error text.  Original patch by ysj.ray.\nbpo-19995\n: %c, %o, %x, and %X now raise TypeError on non-integer input.\nbpo-19655\n: The ASDL parser - used by the build process to generate code\nfor managing the Python AST in C - was rewritten. The new parser is self\ncontained and does not require to carry long the spark.py parser-generator\nlibrary; spark.py was removed from the source base.\nbpo-12546\n: Allow\n\\x00\nto be used as a fill character when using str,\nint, float, and complex __format__ methods.\nbpo-20480\n: Add ipaddress.reverse_pointer. Patch by Leon Weber.\nbpo-13598\n: Modify string.Formatter to support auto-numbering of\nreplacement fields. It now matches the behavior of str.format() in this\nregard. Patches by Phil Elson and Ramchandra Apte.\nbpo-8931\n: Make alternate formatting (‘#’) for type ‘c’ raise an exception.\nIn versions prior to 3.5, ‘#’ with ‘c’ had no effect. Now specifying it is\nan error. Patch by Torsten Landschoff.\nbpo-23165\n: Perform overflow checks before allocating memory in the\n_Py_char2wchar function.\nLibrary\n¶\nbpo-23399\n: pyvenv creates relative symlinks where possible.\nbpo-20289\n: cgi.FieldStorage() now supports the context management\nprotocol.\nbpo-13128\n: Print response headers for CONNECT requests when debuglevel >\n0. Patch by Demian Brecht.\nbpo-15381\n: Optimized io.BytesIO to make less allocations and copyings.\nbpo-22818\n: Splitting on a pattern that could match an empty string now\nraises a warning.  Patterns that can only match empty strings are now\nrejected.\nbpo-23099\n: Closing io.BytesIO with exported buffer is rejected now to\nprevent corrupting exported buffer.\nbpo-23326\n: Removed __ne__ implementations.  Since fixing default __ne__\nimplementation in\nbpo-21408\nthey are redundant.\nbpo-23363\n: Fix possible overflow in itertools.permutations.\nbpo-23364\n: Fix possible overflow in itertools.product.\nbpo-23366\n: Fixed possible integer overflow in itertools.combinations.\nbpo-23369\n: Fixed possible integer overflow in\n_json.encode_basestring_ascii.\nbpo-23353\n: Fix the exception handling of generators in\nPyEval_EvalFrameEx(). At entry, save or swap the exception state even if\nPyEval_EvalFrameEx() is called with throwflag=0. At exit, the exception\nstate is now always restored or swapped, not only if why is WHY_YIELD or\nWHY_RETURN. Patch co-written with Antoine Pitrou.\nbpo-14099\n: Restored support of writing ZIP files to tellable but\nnon-seekable streams.\nbpo-14099\n: Writing to ZipFile and reading multiple ZipExtFiles is\nthreadsafe now.\nbpo-19361\n: JSON decoder now raises JSONDecodeError instead of ValueError.\nbpo-18518\n: timeit now rejects statements which can’t be compiled outside a\nfunction or a loop (e.g. “return” or “break”).\nbpo-23094\n: Fixed readline with frames in Python implementation of pickle.\nbpo-23268\n: Fixed bugs in the comparison of ipaddress classes.\nbpo-21408\n: Removed incorrect implementations of __ne__() which didn’t\nreturned NotImplemented if __eq__() returned NotImplemented.  The default\n__ne__() now works correctly.\nbpo-19996\n:\nemail.feedparser.FeedParser\nnow handles (malformed)\nheaders with no key rather than assuming the body has started.\nbpo-20188\n: Support Application-Layer Protocol Negotiation (ALPN) in the\nssl module.\nbpo-23133\n: Pickling of ipaddress objects now produces more compact and\nportable representation.\nbpo-23248\n: Update ssl error codes from latest OpenSSL git master.\nbpo-23266\n: Much faster implementation of ipaddress.collapse_addresses()\nwhen there are many non-consecutive addresses.\nbpo-23098\n: 64-bit dev_t is now supported in the os module.\nbpo-21817\n: When an exception is raised in a task submitted to a\nProcessPoolExecutor, the remote traceback is now displayed in the parent\nprocess.  Patch by Claudiu Popa.\nbpo-15955\n: Add an option to limit output size when decompressing LZMA\ndata.  Patch by Nikolaus Rath and Martin Panter.\nbpo-23250\n: In the http.cookies module, capitalize “HttpOnly” and “Secure”\nas they are written in the standard.\nbpo-23063\n: In the distutils’ check command, fix parsing of reST with code\nor code-block directives.\nbpo-23209\n: selectors.BaseSelector.get_key() now raises a RuntimeError if\nthe selector is closed. And selectors.BaseSelector.close() now clears its\ninternal reference to the selector mapping to break a reference cycle.\nInitial patch written by Martin Richard. (See also:\nbpo-23225\n)\nbpo-17911\n: Provide a way to seed the linecache for a PEP-302 module\nwithout actually loading the code.\nbpo-17911\n: Provide a new object API for traceback, including the ability\nto not lookup lines at all until the traceback is actually rendered,\nwithout any trace of the original objects being kept alive.\nbpo-19777\n: Provide a home() classmethod on Path objects.  Contributed by\nVictor Salgado and Mayank Tripathi.\nbpo-23206\n: Make\njson.dumps(...,\nensure_ascii=False)\nas fast as the\ndefault case of\nensure_ascii=True\n.  Patch by Naoki Inada.\nbpo-23185\n: Add math.inf and math.nan constants.\nbpo-23186\n: Add ssl.SSLObject.shared_ciphers() and\nssl.SSLSocket.shared_ciphers() to fetch the client’s list ciphers sent at\nhandshake.\nbpo-23143\n: Remove compatibility with OpenSSLs older than 0.9.8.\nbpo-23132\n: Improve performance and introspection support of comparison\nmethods created by functool.total_ordering.\nbpo-19776\n: Add an expanduser() method on Path objects.\nbpo-23112\n: Fix SimpleHTTPServer to correctly carry the query string and\nfragment when it redirects to add a trailing slash.\nbpo-21793\n: Added http.HTTPStatus enums (i.e. HTTPStatus.OK,\nHTTPStatus.NOT_FOUND). Patch by Demian Brecht.\nbpo-23093\n: In the io, module allow more operations to work on detached\nstreams.\nbpo-23111\n: In the ftplib, make ssl.PROTOCOL_SSLv23 the default protocol\nversion.\nbpo-22585\n: On OpenBSD 5.6 and newer, os.urandom() now calls getentropy(),\ninstead of reading /dev/urandom, to get pseudo-random bytes.\nbpo-19104\n: pprint now produces evaluable output for wrapped strings.\nbpo-23071\n: Added missing names to codecs.__all__.  Patch by Martin Panter.\nbpo-22783\n: Pickling now uses the NEWOBJ opcode instead of the NEWOBJ_EX\nopcode if possible.\nbpo-15513\n: Added a __sizeof__ implementation for pickle classes.\nbpo-19858\n: pickletools.optimize() now aware of the MEMOIZE opcode, can\nproduce more compact result and no longer produces invalid output if input\ndata contains MEMOIZE opcodes together with PUT or BINPUT opcodes.\nbpo-22095\n: Fixed HTTPConnection.set_tunnel with default port.  The port\nvalue in the host header was set to “None”.  Patch by Demian Brecht.\nbpo-23016\n: A warning no longer produces an AttributeError when the program\nis run with pythonw.exe.\nbpo-21775\n: shutil.copytree(): fix crash when copying to VFAT. An exception\nhandler assumed that OSError objects always have a ‘winerror’ attribute.\nThat is not the case, so the exception handler itself raised\nAttributeError when run on Linux (and, presumably, any other non-Windows\nOS). Patch by Greg Ward.\nbpo-1218234\n: Fix inspect.getsource() to load updated source of reloaded\nmodule. Initial patch by Berker Peksag.\nbpo-21740\n: Support wrapped callables in doctest. Patch by Claudiu Popa.\nbpo-23009\n: Make sure selectors.EpollSelector.select() works when no FD is\nregistered.\nbpo-22959\n: In the constructor of http.client.HTTPSConnection, prefer the\ncontext’s check_hostname attribute over the\ncheck_hostname\nparameter.\nbpo-22696\n: Add function\nsys.is_finalizing()\nto know about\ninterpreter shutdown.\nbpo-16043\n: Add a default limit for the amount of data\nxmlrpclib.gzip_decode will return. This resolves\nCVE 2013-1753\n.\nbpo-14099\n: ZipFile.open() no longer reopen the underlying file.  Objects\nreturned by ZipFile.open() can now operate independently of the ZipFile\neven if the ZipFile was created by passing in a file-like object as the\nfirst argument to the constructor.\nbpo-22966\n: Fix __pycache__ pyc file name clobber when pyc_compile is asked\nto compile a source file containing multiple dots in the source file name.\nbpo-21971\n: Update turtledemo doc and add module to the index.\nbpo-21032\n: Fixed socket leak if HTTPConnection.getresponse() fails.\nOriginal patch by Martin Panter.\nbpo-22407\n: Deprecated the use of re.LOCALE flag with str patterns or\nre.ASCII. It was newer worked.\nbpo-22902\n: The “ip” command is now used on Linux to determine MAC address\nin uuid.getnode().  Pach by Bruno Cauet.\nbpo-22960\n: Add a context argument to xmlrpclib.ServerProxy constructor.\nbpo-22389\n: Add contextlib.redirect_stderr().\nbpo-21356\n: Make ssl.RAND_egd() optional to support LibreSSL. The\navailability of the function is checked during the compilation. Patch\nwritten by Bernard Spil.\nbpo-22915\n: SAX parser now supports files opened with file descriptor or\nbytes path.\nbpo-22609\n: Constructors and update methods of mapping classes in the\ncollections module now accept the self keyword argument.\nbpo-22940\n: Add readline.append_history_file.\nbpo-19676\n: Added the “namereplace” error handler.\nbpo-22788\n: Add\ncontext\nparameter to logging.handlers.HTTPHandler.\nbpo-22921\n: Allow SSLContext to take the\nhostname\nparameter even if\nOpenSSL doesn’t support SNI.\nbpo-22894\n: TestCase.subTest() would cause the test suite to be stopped\nwhen in failfast mode, even in the absence of failures.\nbpo-22796\n: HTTP cookie parsing is now stricter, in order to protect\nagainst potential injection attacks.\nbpo-22370\n: Windows detection in pathlib is now more robust.\nbpo-22841\n: Reject coroutines in asyncio add_signal_handler(). Patch by\nLudovic.Gasc.\nbpo-19494\n: Added urllib.request.HTTPBasicPriorAuthHandler. Patch by Matej\nCepl.\nbpo-22578\n: Added attributes to the re.error class.\nbpo-22849\n: Fix possible double free in the io.TextIOWrapper constructor.\nbpo-12728\n: Different Unicode characters having the same uppercase but\ndifferent lowercase are now matched in case-insensitive regular\nexpressions.\nbpo-22821\n: Fixed fcntl() with integer argument on 64-bit big-endian\nplatforms.\nbpo-21650\n: Add an\n--sort-keys\noption to\njson.tool\nCLI.\nbpo-22824\n: Updated reprlib output format for sets to use set literals.\nPatch contributed by Berker Peksag.\nbpo-22824\n: Updated reprlib output format for arrays to display empty\narrays without an unnecessary empty list.  Suggested by Serhiy Storchaka.\nbpo-22406\n: Fixed the uu_codec codec incorrectly ported to 3.x. Based on\npatch by Martin Panter.\nbpo-17293\n: uuid.getnode() now determines MAC address on AIX using netstat.\nBased on patch by Aivars Kalvāns.\nbpo-22769\n: Fixed ttk.Treeview.tag_has() when called without arguments.\nbpo-22417\n: Verify certificates by default in httplib (PEP 476).\nbpo-22775\n: Fixed unpickling of http.cookies.SimpleCookie with protocol 2\nand above. Patch by Tim Graham.\nbpo-22776\n: Brought excluded code into the scope of a try block in\nSysLogHandler.emit().\nbpo-22665\n: Add missing get_terminal_size and SameFileError to\nshutil.__all__.\nbpo-6623\n: Remove deprecated Netrc class in the ftplib module. Patch by\nMatt Chaput.\nbpo-17381\n: Fixed handling of case-insensitive ranges in regular\nexpressions.\nbpo-22410\n: Module level functions in the re module now cache compiled\nlocale-dependent regular expressions taking into account the locale.\nbpo-22759\n: Query methods on pathlib.Path() (exists(), is_dir(), etc.) now\nreturn False when the underlying stat call raises NotADirectoryError.\nbpo-8876\n: distutils now falls back to copying files when hard linking\ndoesn’t work. This allows use with special filesystems such as VirtualBox\nshared folders.\nbpo-22217\n: Implemented reprs of classes in the zipfile module.\nbpo-22457\n: Honour load_tests in the start_dir of discovery.\nbpo-18216\n: gettext now raises an error when a .mo file has an unsupported\nmajor version number.  Patch by Aaron Hill.\nbpo-13918\n: Provide a locale.delocalize() function which can remove\nlocale-specific number formatting from a string representing a number,\nwithout then converting it to a specific type.  Patch by Cédric Krier.\nbpo-22676\n: Make the pickling of global objects which don’t have a\n__module__ attribute less slow.\nbpo-18853\n: Fixed ResourceWarning in shlex.__nain__.\nbpo-9351\n: Defaults set with set_defaults on an argparse subparser are no\nlonger ignored when also set on the parent parser.\nbpo-7559\n: unittest test loading ImportErrors are reported as import errors\nwith their import exception rather than as attribute errors after the\nimport has already failed.\nbpo-19746\n: Make it possible to examine the errors from unittest discovery\nwithout executing the test suite. The new\nerrors\nattribute on\nTestLoader\nexposes these non-fatal errors encountered during\ndiscovery.\nbpo-21991\n: Make email.headerregistry’s header ‘params’ attributes be\nread-only (MappingProxyType).  Previously the dictionary was modifiable\nbut a new one was created on each access of the attribute.\nbpo-22638\n: SSLv3 is now disabled throughout the standard library. It can\nstill be enabled by instantiating a SSLContext manually.\nbpo-22641\n: In asyncio, the default SSL context for client connections is\nnow created using ssl.create_default_context(), for stronger security.\nbpo-17401\n: Include closefd in io.FileIO repr.\nbpo-21338\n: Add silent mode for compileall. quiet parameters of\ncompile_{dir, file, path} functions now have a multilevel value. Also, -q\noption of the CLI now have a multilevel value. Patch by Thomas Kluyver.\nbpo-20152\n: Convert the array and cmath modules to Argument Clinic.\nbpo-18643\n: Add socket.socketpair() on Windows.\nbpo-22435\n: Fix a file descriptor leak when socketserver bind fails.\nbpo-13096\n: Fixed segfault in CTypes POINTER handling of large values.\nbpo-11694\n: Raise ConversionError in xdrlib as documented.  Patch by Filip\nGruszczyński and Claudiu Popa.\nbpo-19380\n: Optimized parsing of regular expressions.\nbpo-1519638\n: Now unmatched groups are replaced with empty strings in\nre.sub() and re.subn().\nbpo-18615\n: sndhdr.what/whathdr now return a namedtuple.\nbpo-22462\n: Fix pyexpat’s creation of a dummy frame to make it appear in\nexception tracebacks.\nbpo-21965\n: Add support for in-memory SSL to the ssl module.  Patch by\nGeert Jansen.\nbpo-21173\n: Fix len() on a WeakKeyDictionary when .clear() was called with\nan iterator alive.\nbpo-11866\n: Eliminated race condition in the computation of names for new\nthreads.\nbpo-21905\n: Avoid RuntimeError in pickle.whichmodule() when sys.modules is\nmutated while iterating.  Patch by Olivier Grisel.\nbpo-11271\n: concurrent.futures.Executor.map() now takes a\nchunksize\nargument to allow batching of tasks in child processes and improve\nperformance of ProcessPoolExecutor.  Patch by Dan O’Reilly.\nbpo-21883\n: os.path.join() and os.path.relpath() now raise a TypeError with\nmore helpful error message for unsupported or mismatched types of\narguments.\nbpo-22219\n: The zipfile module CLI now adds entries for directories\n(including empty directories) in ZIP file.\nbpo-22449\n: In the ssl.SSLContext.load_default_certs, consult the\nenvironmental variables SSL_CERT_DIR and SSL_CERT_FILE on Windows.\nbpo-22508\n: The email.__version__ variable has been removed; the email code\nis no longer shipped separately from the stdlib, and __version__ hasn’t\nbeen updated in several releases.\nbpo-20076\n: Added non derived UTF-8 aliases to locale aliases table.\nbpo-20079\n: Added locales supported in glibc 2.18 to locale alias table.\nbpo-20218\n: Added convenience methods read_text/write_text and read_bytes/\nwrite_bytes to pathlib.Path objects.\nbpo-22396\n: On 32-bit AIX platform, don’t expose os.posix_fadvise() nor\nos.posix_fallocate() because their prototypes in system headers are wrong.\nbpo-22517\n: When an io.BufferedRWPair object is deallocated, clear its\nweakrefs.\nbpo-22437\n: Number of capturing groups in regular expression is no longer\nlimited by 100.\nbpo-17442\n: InteractiveInterpreter now displays the full chained traceback\nin its showtraceback method, to match the built in interactive\ninterpreter.\nbpo-23392\n: Added tests for marshal C API that works with FILE*.\nbpo-10510\n: distutils register and upload methods now use HTML standards\ncompliant CRLF line endings.\nbpo-9850\n: Fixed macpath.join() for empty first component.  Patch by Oleg\nOshmyan.\nbpo-5309\n: distutils’ build and build_ext commands now accept a\n-j\noption to enable parallel building of extension modules.\nbpo-22448\n: Improve canceled timer handles cleanup to prevent unbound\nmemory usage. Patch by Joshua Moore-Oliva.\nbpo-22427\n: TemporaryDirectory no longer attempts to clean up twice when\nused in the with statement in generator.\nbpo-22362\n: Forbidden ambiguous octal escapes out of range 0-0o377 in\nregular expressions.\nbpo-20912\n: Now directories added to ZIP file have correct Unix and MS-DOS\ndirectory attributes.\nbpo-21866\n: ZipFile.close() no longer writes ZIP64 central directory\nrecords if allowZip64 is false.\nbpo-22278\n: Fix urljoin problem with relative urls, a regression observed\nafter changes to issue22118 were submitted.\nbpo-22415\n: Fixed debugging output of the GROUPREF_EXISTS opcode in the re\nmodule. Removed trailing spaces in debugging output.\nbpo-22423\n: Unhandled exception in thread no longer causes unhandled\nAttributeError when sys.stderr is None.\nbpo-21332\n: Ensure that\nbufsize=1\nin subprocess.Popen() selects line\nbuffering, rather than block buffering.  Patch by Akira Li.\nbpo-21091\n: Fix API bug: email.message.EmailMessage.is_attachment is now a\nmethod.\nbpo-21079\n: Fix email.message.EmailMessage.is_attachment to return the\ncorrect result when the header has parameters as well as a value.\nbpo-22247\n: Add NNTPError to nntplib.__all__.\nbpo-22366\n: urllib.request.urlopen will accept a context object\n(SSLContext) as an argument which will then be used for HTTPS connection.\nPatch by Alex Gaynor.\nbpo-4180\n: The warnings registries are now reset when the filters are\nmodified.\nbpo-22419\n: Limit the length of incoming HTTP request in wsgiref server to\n65536 bytes and send a 414 error code for higher lengths. Patch\ncontributed by Devin Cook.\nLax cookie parsing in http.cookies could be a security issue when combined\nwith non-standard cookie handling in some web browsers.  Reported by\nSergey Bobrov.\nbpo-20537\n: logging methods now accept an exception instance as well as a\nBoolean value or exception tuple. Thanks to Yury Selivanov for the patch.\nbpo-22384\n: An exception in Tkinter callback no longer crashes the program\nwhen it is run with pythonw.exe.\nbpo-22168\n: Prevent turtle AttributeError with non-default Canvas on OS X.\nbpo-21147\n: sqlite3 now raises an exception if the request contains a null\ncharacter instead of truncating it.  Based on patch by Victor Stinner.\nbpo-13968\n: The glob module now supports recursive search in subdirectories\nusing the\n**\npattern.\nbpo-21951\n: Fixed a crash in Tkinter on AIX when called Tcl command with\nempty string or tuple argument.\nbpo-21951\n: Tkinter now most likely raises MemoryError instead of crash if\nthe memory allocation fails.\nbpo-22338\n: Fix a crash in the json module on memory allocation failure.\nbpo-12410\n: imaplib.IMAP4 now supports the context management protocol.\nOriginal patch by Tarek Ziadé.\nbpo-21270\n: We now override tuple methods in mock.call objects so that they\ncan be used as normal call attributes.\nbpo-16662\n:\nload_tests()\nis now unconditionally run when it is present\nin a package’s\n__init__.py\n.\nTestLoader.loadTestsFromModule()\nstill accepts use_load_tests, but it is deprecated and ignored.  A new\nkeyword-only attribute\npattern\nis added and documented.  Patch given\nby Robert Collins, tweaked by Barry Warsaw.\nbpo-22226\n: First letter no longer is stripped from the “status” key in the\nresult of Treeview.heading().\nbpo-19524\n: Fixed resource leak in the HTTP connection when an invalid\nresponse is received.  Patch by Martin Panter.\nbpo-20421\n: Add a .version() method to SSL sockets exposing the actual\nprotocol version in use.\nbpo-19546\n: configparser exceptions no longer expose implementation\ndetails. Chained KeyErrors are removed, which leads to cleaner tracebacks.\nPatch by Claudiu Popa.\nbpo-22051\n: turtledemo no longer reloads examples to re-run them.\nInitialization of variables and gui setup should be done in main(), which\nis called each time a demo is run, but not on import.\nbpo-21933\n: Turtledemo users can change the code font size with a menu\nselection or control(command) ‘-’ or ‘+’ or control-mousewheel. Original\npatch by Lita Cho.\nbpo-21597\n: The separator between the turtledemo text pane and the drawing\ncanvas can now be grabbed and dragged with a mouse.  The code text pane\ncan be widened to easily view or copy the full width of the text.  The\ncanvas can be widened on small screens.  Original patches by Jan Kanis and\nLita Cho.\nbpo-18132\n: Turtledemo buttons no longer disappear when the window is\nshrunk.  Original patches by Jan Kanis and Lita Cho.\nbpo-22043\n: time.monotonic() is now always available.\nthreading.Lock.acquire()\n,\nthreading.RLock.acquire()\nand socket\noperations now use a monotonic clock, instead of the system clock, when a\ntimeout is used.\nbpo-21527\n: Add a default number of workers to ThreadPoolExecutor equal to\n5 times the number of CPUs.  Patch by Claudiu Popa.\nbpo-22216\n: smtplib now resets its state more completely after a quit.  The\nmost obvious consequence of the previous behavior was a STARTTLS failure\nduring a connect/starttls/quit/connect/starttls sequence.\nbpo-22098\n: ctypes’ BigEndianStructure and LittleEndianStructure now define\nan empty __slots__ so that subclasses don’t always get an instance dict.\nPatch by Claudiu Popa.\nbpo-22185\n: Fix an occasional RuntimeError in threading.Condition.wait()\ncaused by mutation of the waiters queue without holding the lock.  Patch\nby Doug Zongker.\nbpo-22287\n: On UNIX, _PyTime_gettimeofday() now uses\nclock_gettime(CLOCK_REALTIME) if available. As a side effect, Python now\ndepends on the librt library on Solaris and on Linux (only with glibc\nolder than 2.17).\nbpo-22182\n: Use e.args to unpack exceptions correctly in\ndistutils.file_util.move_file. Patch by Claudiu Popa.\nThe webbrowser module now uses subprocess’s start_new_session=True rather\nthan a potentially risky preexec_fn=os.setsid call.\nbpo-22042\n: signal.set_wakeup_fd(fd) now raises an exception if the file\ndescriptor is in blocking mode.\nbpo-16808\n: inspect.stack() now returns a named tuple instead of a tuple.\nPatch by Daniel Shahaf.\nbpo-22236\n: Fixed Tkinter images copying operations in NoDefaultRoot mode.\nbpo-2527\n: Add a\nglobals\nargument to timeit functions, in order to\noverride the globals namespace in which the timed code is executed. Patch\nby Ben Roberts.\nbpo-22118\n: Switch urllib.parse to use RFC 3986 semantics for the\nresolution of relative URLs, rather than RFCs 1808 and 2396. Patch by\nDemian Brecht.\nbpo-21549\n: Added the “members” parameter to TarFile.list().\nbpo-19628\n: Allow compileall recursion depth to be specified with a -r\noption.\nbpo-15696\n: Add a __sizeof__ implementation for mmap objects on Windows.\nbpo-22068\n: Avoided reference loops with Variables and Fonts in Tkinter.\nbpo-22165\n: SimpleHTTPRequestHandler now supports undecodable file names.\nbpo-15381\n: Optimized line reading in io.BytesIO.\nbpo-8797\n: Raise HTTPError on failed Basic Authentication immediately.\nInitial patch by Sam Bull.\nbpo-20729\n: Restored the use of lazy iterkeys()/itervalues()/iteritems() in\nthe mailbox module.\nbpo-21448\n: Changed FeedParser feed() to avoid\nO\n(\nn\n2\n)\nbehavior when parsing long line. Original patch by Raymond Hettinger.\nbpo-22184\n: The functools LRU Cache decorator factory now gives an earlier\nand clearer error message when the user forgets the required parameters.\nbpo-17923\n: glob() patterns ending with a slash no longer match non-dirs on\nAIX.  Based on patch by Delhallt.\nbpo-21725\n: Added support for RFC 6531 (SMTPUTF8) in smtpd.\nbpo-22176\n: Update the ctypes module’s libffi to v3.1.  This release adds\nsupport for the Linux AArch64 and POWERPC ELF ABIv2 little endian\narchitectures.\nbpo-5411\n: Added support for the “xztar” format in the shutil module.\nbpo-21121\n: Don’t force 3rd party C extensions to be built with\n-Werror=declaration-after-statement.\nbpo-21975\n: Fixed crash when using uninitialized sqlite3.Row (in particular\nwhen unpickling pickled sqlite3.Row).  sqlite3.Row is now initialized in\nthe __new__() method.\nbpo-20170\n: Convert posixmodule to use Argument Clinic.\nbpo-21539\n: Add an\nexists_ok\nargument to\nPathlib.mkdir()\nto mimic\nmkdir\n-p\nand\nos.makedirs()\nfunctionality.  When true, ignore\nFileExistsErrors\n. Patch by Berker Peksag.\nbpo-22127\n: Bypass IDNA for pure-ASCII host names in the socket module (in\nparticular for numeric IPs).\nbpo-21047\n: set the default value for the\nconvert_charrefs\nargument of\nHTMLParser to True.  Patch by Berker Peksag.\nAdd an __all__ to html.entities.\nbpo-15114\n: the strict mode and argument of HTMLParser, HTMLParser.error,\nand the HTMLParserError exception have been removed.\nbpo-22085\n: Dropped support of Tk 8.3 in Tkinter.\nbpo-21580\n: Now Tkinter correctly handles bytes arguments passed to Tk. In\nparticular this allows initializing images from binary data.\nbpo-22003\n: When initialized from a bytes object, io.BytesIO() now defers\nmaking a copy until it is mutated, improving performance and memory use on\nsome use cases. Patch by David Wilson.\nbpo-22018\n: On Windows, signal.set_wakeup_fd() now also supports sockets. A\nside effect is that Python depends to the WinSock library.\nbpo-22054\n: Add os.get_blocking() and os.set_blocking() functions to get\nand set the blocking mode of a file descriptor (False if the O_NONBLOCK\nflag is set, True otherwise). These functions are not available on\nWindows.\nbpo-17172\n: Make turtledemo start as active on OS X even when run with\nsubprocess. Patch by Lita Cho.\nbpo-21704\n: Fix build error for _multiprocessing when semaphores are not\navailable. Patch by Arfrever Frehtes Taifersar Arahesis.\nbpo-20173\n: Convert sha1, sha256, sha512 and md5 to ArgumentClinic. Patch\nby Vajrasky Kok.\nFix repr(_socket.socket) on Windows 64-bit: don’t fail with OverflowError\non closed socket. repr(socket.socket) already works fine.\nbpo-22033\n: Reprs of most Python implemented classes now contain actual\nclass name instead of hardcoded one.\nbpo-21947\n: The dis module can now disassemble generator-iterator objects\nbased on their gi_code attribute. Patch by Clement Rouault.\nbpo-16133\n: The asynchat.async_chat.handle_read() method now ignores\nBlockingIOError exceptions.\nbpo-22044\n: Fixed premature DECREF in call_tzinfo_method. Patch by Tom\nFlanagan.\nbpo-19884\n: readline: Disable the meta modifier key if stdout is not a\nterminal to not write the ANSI sequence\n\"\\033[1034h\"\ninto stdout. This\nsequence is used on some terminal (ex: TERM=xterm-256color”) to enable\nsupport of 8 bit characters.\nbpo-4350\n: Removed a number of out-of-dated and non-working for a long time\nTkinter methods.\nbpo-6167\n: Scrollbar.activate() now returns the name of active element if\nthe argument is not specified.  Scrollbar.set() now always accepts only 2\narguments.\nbpo-15275\n: Clean up and speed up the ntpath module.\nbpo-21888\n: plistlib’s load() and loads() now work if the fmt parameter is\nspecified.\nbpo-22032\n: __qualname__ instead of __name__ is now always used to format\nfully qualified class names of Python implemented classes.\nbpo-22031\n: Reprs now always use hexadecimal format with the “0x” prefix\nwhen contain an id in form “ at 0x…”.\nbpo-22018\n: signal.set_wakeup_fd() now raises an OSError instead of a\nValueError on\nfstat()\nfailure.\nbpo-21044\n: tarfile.open() now handles fileobj with an integer ‘name’\nattribute.  Based on patch by Antoine Pietri.\nbpo-21966\n: Respect -q command-line option when code module is ran.\nbpo-19076\n: Don’t pass the redundant ‘file’ argument to self.error().\nbpo-16382\n: Improve exception message of warnings.warn() for bad category.\nInitial patch by Phil Elson.\nbpo-21932\n: os.read() now uses a\nPy_ssize_t()\ntype instead of\nint\nfor the size to support reading more than 2 GB at once. On\nWindows, the size is truncated to INT_MAX. As any call to os.read(), the\nOS may read less bytes than the number of requested bytes.\nbpo-21942\n: Fixed source file viewing in pydoc’s server mode on Windows.\nbpo-11259\n: asynchat.async_chat().set_terminator() now raises a ValueError\nif the number of received bytes is negative.\nbpo-12523\n: asynchat.async_chat.push() now raises a TypeError if it doesn’t\nget a bytes string\nbpo-21707\n: Add missing kwonlyargcount argument to\nModuleFinder.replace_paths_in_code().\nbpo-20639\n: calling Path.with_suffix(‘’) allows removing the suffix again.\nPatch by July Tikhonov.\nbpo-21714\n: Disallow the construction of invalid paths using\nPath.with_name().  Original patch by Antony Lee.\nbpo-15014\n: Added ‘auth’ method to smtplib to make implementing auth\nmechanisms simpler, and used it internally in the login method.\nbpo-21151\n: Fixed a segfault in the winreg module when\nNone\nis passed\nas a\nREG_BINARY\nvalue to SetValueEx.  Patch by John Ehresman.\nbpo-21090\n: io.FileIO.readall() does not ignore I/O errors anymore. Before,\nit ignored I/O errors if at least the first C call read() succeed.\nbpo-5800\n: headers parameter of wsgiref.headers.Headers is now optional.\nInitial patch by Pablo Torres Navarrete and SilentGhost.\nbpo-21781\n: ssl.RAND_add() now supports strings longer than 2 GB.\nbpo-21679\n: Prevent extraneous fstat() calls during open().  Patch by\nBohuslav Kabrda.\nbpo-21863\n: cProfile now displays the module name of C extension functions,\nin addition to their own name.\nbpo-11453\n: asyncore: emit a ResourceWarning when an unclosed file_wrapper\nobject is destroyed. The destructor now closes the file if needed. The\nclose() method can now be called twice: the second call does nothing.\nbpo-21858\n: Better handling of Python exceptions in the sqlite3 module.\nbpo-21476\n: Make sure the email.parser.BytesParser TextIOWrapper is\ndiscarded after parsing, so the input file isn’t unexpectedly closed.\nbpo-20295\n: imghdr now recognizes OpenEXR format images.\nbpo-21729\n: Used the “with” statement in the dbm.dumb module to ensure\nfiles closing. Patch by Claudiu Popa.\nbpo-21491\n: socketserver: Fix a race condition in child processes reaping.\nbpo-21719\n: Added the\nst_file_attributes\nfield to os.stat_result on\nWindows.\nbpo-21832\n: Require named tuple inputs to be exact strings.\nbpo-21722\n: The distutils “upload” command now exits with a non-zero return\ncode when uploading fails.  Patch by Martin Dengler.\nbpo-21723\n: asyncio.Queue: support any type of number (ex: float) for the\nmaximum size. Patch written by Vajrasky Kok.\nbpo-21711\n: support for “site-python” directories has now been removed from\nthe site module (it was deprecated in 3.4).\nbpo-17552\n: new socket.sendfile() method allowing a file to be sent over a\nsocket by using high-performance os.sendfile() on UNIX. Patch by Giampaolo\nRodola’.\nbpo-18039\n: dbm.dump.open() now always creates a new database when the flag\nhas the value ‘n’.  Patch by Claudiu Popa.\nbpo-21326\n: Add a new is_closed() method to asyncio.BaseEventLoop.\nrun_forever() and run_until_complete() methods of asyncio.BaseEventLoop\nnow raise an exception if the event loop was closed.\nbpo-21766\n: Prevent a security hole in CGIHTTPServer by URL unquoting paths\nbefore checking for a CGI script at that path.\nbpo-21310\n: Fixed possible resource leak in failed open().\nbpo-21256\n: Printout of keyword args should be in deterministic order in a\nmock function call. This will help to write better doctests.\nbpo-21677\n: Fixed chaining nonnormalized exceptions in io close() methods.\nbpo-11709\n: Fix the pydoc.help function to not fail when sys.stdin is not a\nvalid file.\nbpo-21515\n: tempfile.TemporaryFile now uses os.O_TMPFILE flag is available.\nbpo-13223\n: Fix pydoc.writedoc so that the HTML documentation for methods\nthat use ‘self’ in the example code is generated correctly.\nbpo-21463\n: In urllib.request, fix pruning of the FTP cache.\nbpo-21618\n: The subprocess module could fail to close open fds that were\ninherited by the calling process and already higher than POSIX resource\nlimits would otherwise allow.  On systems with a functioning /proc/self/fd\nor /dev/fd interface the max is now ignored and all fds are closed.\nbpo-20383\n: Introduce importlib.util.module_from_spec() as the preferred\nway to create a new module.\nbpo-21552\n: Fixed possible integer overflow of too long string lengths in\nthe tkinter module on 64-bit platforms.\nbpo-14315\n: The zipfile module now ignores extra fields in the central\ndirectory that are too short to be parsed instead of letting a\nstruct.unpack error bubble up as this “bad data” appears in many real\nworld zip files in the wild and is ignored by other zip tools.\nbpo-13742\n: Added “key” and “reverse” parameters to heapq.merge(). (First\ndraft of patch contributed by Simon Sapin.)\nbpo-21402\n: tkinter.ttk now works when default root window is not set.\nbpo-3015\n:\n_tkinter.create()\nnow creates\ntkapp\nobject with\nwantobjects=1\nby default.\nbpo-10203\n: sqlite3.Row now truly supports sequence protocol.  In\nparticular it supports reverse() and negative indices.  Original patch by\nClaudiu Popa.\nbpo-18807\n: If copying (no symlinks) specified for a venv, then the python\ninterpreter aliases (python, python3) are now created by copying rather\nthan symlinking.\nbpo-20197\n: Added support for the WebP image type in the imghdr module.\nPatch by Fabrice Aneche and Claudiu Popa.\nbpo-21513\n: Speedup some properties of IP addresses (IPv4Address,\nIPv6Address) such as .is_private or .is_multicast.\nbpo-21137\n: Improve the repr for threading.Lock() and its variants by\nshowing the “locked” or “unlocked” status.  Patch by Berker Peksag.\nbpo-21538\n: The plistlib module now supports loading of binary plist files\nwhen reference or offset size is not a power of two.\nbpo-21455\n: Add a default backlog to socket.listen().\nbpo-21525\n: Most Tkinter methods which accepted tuples now accept lists\ntoo.\nbpo-22166\n: With the assistance of a new internal _codecs._forget_codec\nhelping function, test_codecs now clears the encoding caches to avoid the\nappearance of a reference leak\nbpo-22236\n: Tkinter tests now don’t reuse default root window.  New root\nwindow is created for every test class.\nbpo-10744\n: Fix\nPEP 3118\nformat strings on ctypes objects with a\nnontrivial shape.\nbpo-20826\n: Optimize ipaddress.collapse_addresses().\nbpo-21487\n: Optimize ipaddress.summarize_address_range() and\nipaddress.{IPv4Network,IPv6Network}.subnets().\nbpo-21486\n: Optimize parsing of netmasks in ipaddress.IPv4Network and\nipaddress.IPv6Network.\nbpo-13916\n: Disallowed the surrogatepass error handler for non UTF-*\nencodings.\nbpo-20998\n: Fixed re.fullmatch() of repeated single character pattern with\nignore case. Original patch by Matthew Barnett.\nbpo-21075\n: fileinput.FileInput now reads bytes from standard stream if\nbinary mode is specified.  Patch by Sam Kimbrel.\nbpo-19775\n: Add a samefile() method to pathlib Path objects.  Initial patch\nby Vajrasky Kok.\nbpo-21226\n: Set up modules properly in PyImport_ExecCodeModuleObject (and\nfriends).\nbpo-21398\n: Fix a unicode error in the pydoc pager when the documentation\ncontains characters not encodable to the stdout encoding.\nbpo-16531\n: ipaddress.IPv4Network and ipaddress.IPv6Network now accept an\n(address, netmask) tuple argument, so as to easily construct network\nobjects from existing addresses.\nbpo-21156\n: importlib.abc.InspectLoader.source_to_code() is now a\nstaticmethod.\nbpo-21424\n: Simplified and optimized heaqp.nlargest() and nmsmallest() to\nmake fewer tuple comparisons.\nbpo-21396\n: Fix TextIOWrapper(…, write_through=True) to not force a\nflush() on the underlying binary stream.  Patch by akira.\nbpo-18314\n: Unlink now removes junctions on Windows. Patch by Kim Gräsman\nbpo-21088\n: Bugfix for curses.window.addch() regression in 3.4.0. In\nporting to Argument Clinic, the first two arguments were reversed.\nbpo-21407\n: _decimal: The module now supports function signatures.\nbpo-10650\n: Remove the non-standard ‘watchexp’ parameter from the\nDecimal.quantize() method in the Python version.  It had never been\npresent in the C version.\nbpo-21469\n: Reduced the risk of false positives in robotparser by checking\nto make sure that robots.txt has been read or does not exist prior to\nreturning True in can_fetch().\nbpo-19414\n: Have the OrderedDict mark deleted links as unusable. This gives\nan early failure if the link is deleted during iteration.\nbpo-21421\n: Add __slots__ to the MappingViews ABC. Patch by Josh Rosenberg.\nbpo-21101\n: Eliminate double hashing in the C speed-up code for\ncollections.Counter().\nbpo-21321\n: itertools.islice() now releases the reference to the source\niterator when the slice is exhausted.  Patch by Anton Afanasyev.\nbpo-21057\n: TextIOWrapper now allows the underlying binary stream’s read()\nor read1() method to return an arbitrary bytes-like object (such as a\nmemoryview). Patch by Nikolaus Rath.\nbpo-20951\n: SSLSocket.send() now raises either SSLWantReadError or\nSSLWantWriteError on a non-blocking socket if the operation would block.\nPreviously, it would return 0.  Patch by Nikolaus Rath.\nbpo-13248\n: removed previously deprecated asyncore.dispatcher __getattr__\ncheap inheritance hack.\nbpo-9815\n: assertRaises now tries to clear references to local variables in\nthe exception’s traceback.\nbpo-19940\n: ssl.cert_time_to_seconds() now interprets the given time string\nin the UTC timezone (as specified in RFC 5280), not the local timezone.\nbpo-13204\n: Calling sys.flags.__new__ would crash the interpreter, now it\nraises a TypeError.\nbpo-19385\n: Make operations on a closed dbm.dumb database always raise the\nsame exception.\nbpo-21207\n: Detect when the os.urandom cached fd has been closed or\nreplaced, and open it anew.\nbpo-21291\n: subprocess’s Popen.wait() is now thread safe so that multiple\nthreads may be calling wait() or poll() on a Popen instance at the same\ntime without losing the Popen.returncode value.\nbpo-21127\n: Path objects can now be instantiated from str subclass\ninstances (such as\nnumpy.str_\n).\nbpo-15002\n: urllib.response object to use _TemporaryFileWrapper (and\n_TemporaryFileCloser) facility. Provides a better way to handle file\ndescriptor close. Patch contributed by Christian Theune.\nbpo-12220\n: mindom now raises a custom ValueError indicating it doesn’t\nsupport spaces in URIs instead of letting a ‘split’ ValueError bubble up.\nbpo-21068\n: The ssl.PROTOCOL* constants are now enum members.\nbpo-21276\n: posixmodule: Don’t define USE_XATTRS on KFreeBSD and the Hurd.\nbpo-21262\n: New method assert_not_called for Mock. It raises AssertionError\nif the mock has been called.\nbpo-21238\n: New keyword argument\nunsafe\nto Mock. It raises\nAttributeError\nincase of an attribute startswith assert or assret.\nbpo-20896\n: ssl.get_server_certificate() now uses PROTOCOL_SSLv23, not\nPROTOCOL_SSLv3, for maximum compatibility.\nbpo-21239\n: patch.stopall() didn’t work deterministically when the same\nname was patched more than once.\nbpo-21203\n: Updated fileConfig and dictConfig to remove inconsistencies.\nThanks to Jure Koren for the patch.\nbpo-21222\n: Passing name keyword argument to mock.create_autospec now\nworks.\nbpo-21197\n: Add lib64 -> lib symlink in venvs on 64-bit non-OS X POSIX.\nbpo-17498\n: Some SMTP servers disconnect after certain errors, violating\nstrict RFC conformance.  Instead of losing the error code when we issue\nthe subsequent RSET, smtplib now returns the error code and defers raising\nthe SMTPServerDisconnected error until the next command is issued.\nbpo-17826\n: setting an iterable side_effect on a mock function created by\ncreate_autospec now works. Patch by Kushal Das.\nbpo-7776\n: Fix\nHost:\nheader and reconnection when using\nhttp.client.HTTPConnection.set_tunnel(). Patch by Nikolaus Rath.\nbpo-20968\n: unittest.mock.MagicMock now supports division. Patch by\nJohannes Baiter.\nbpo-21529\n: Fix arbitrary memory access in JSONDecoder.raw_decode with a\nnegative second parameter. Bug reported by Guido Vranken. (See also:\nCVE 2014-4616\n)\nbpo-21169\n: getpass now handles non-ascii characters that the input stream\nencoding cannot encode by re-encoding using the replace error handler.\nbpo-21171\n: Fixed undocumented filter API of the rot13 codec. Patch by\nBerker Peksag.\nbpo-20539\n: Improved math.factorial error message for large positive inputs\nand changed exception type (OverflowError -> ValueError) for large\nnegative inputs.\nbpo-21172\n: isinstance check relaxed from dict to collections.Mapping.\nbpo-21155\n: asyncio.EventLoop.create_unix_server() now raises a ValueError\nif path and sock are specified at the same time.\nbpo-21136\n: Avoid unnecessary normalization of Fractions resulting from\npower and other operations.  Patch by Raymond Hettinger.\nbpo-17621\n: Introduce importlib.util.LazyLoader.\nbpo-21076\n: signal module constants were turned into enums. Patch by\nGiampaolo Rodola’.\nbpo-20636\n: Improved the repr of Tkinter widgets.\nbpo-19505\n: The items, keys, and values views of OrderedDict now support\nreverse iteration using reversed().\nbpo-21149\n: Improved thread-safety in logging cleanup during interpreter\nshutdown. Thanks to Devin Jeanpierre for the patch.\nbpo-21058\n: Fix a leak of file descriptor in\ntempfile.NamedTemporaryFile()\n, close the file descriptor if\nio.open()\nfails\nbpo-21200\n: Return None from pkgutil.get_loader() when __spec__ is missing.\nbpo-21013\n: Enhance ssl.create_default_context() when used for server side\nsockets to provide better security by default.\nbpo-20145\n:\nassertRaisesRegex\nand\nassertWarnsRegex\nnow raise a\nTypeError\nif the second argument is not a string or compiled regex.\nbpo-20633\n: Replace relative import by absolute import.\nbpo-20980\n: Stop wrapping exception when using ThreadPool.\nbpo-21082\n: In os.makedirs, do not set the process-wide umask. Note this\nchanges behavior of makedirs when exist_ok=True.\nbpo-20990\n: Fix issues found by pyflakes for multiprocessing.\nbpo-21015\n: SSL contexts will now automatically select an elliptic curve\nfor ECDH key exchange on OpenSSL 1.0.2 and later, and otherwise default to\n“prime256v1”.\nbpo-21000\n: Improve the command-line interface of json.tool.\nbpo-20995\n: Enhance default ciphers used by the ssl module to enable better\nsecurity and prioritize perfect forward secrecy.\nbpo-20884\n: Don’t assume that __file__ is defined on importlib.__init__.\nbpo-21499\n: Ignore __builtins__ in several test_importlib.test_api tests.\nbpo-20627\n: xmlrpc.client.ServerProxy is now a context manager.\nbpo-19165\n: The formatter module now raises DeprecationWarning instead of\nPendingDeprecationWarning.\nbpo-13936\n: Remove the ability of datetime.time instances to be considered\nfalse in boolean contexts.\nbpo-18931\n: selectors module now supports /dev/poll on Solaris. Patch by\nGiampaolo Rodola’.\nbpo-19977\n: When the\nLC_TYPE\nlocale is the POSIX locale (\nC\nlocale),\nsys.stdin\nand\nsys.stdout\nare now using the\nsurrogateescape\nerror handler, instead of the\nstrict\nerror\nhandler.\nbpo-20574\n: Implement incremental decoder for cp65001 code (Windows code\npage 65001, Microsoft UTF-8).\nbpo-20879\n: Delay the initialization of encoding and decoding tables for\nbase32, ascii85 and base85 codecs in the base64 module, and delay the\ninitialization of the unquote_to_bytes() table of the urllib.parse module,\nto not waste memory if these modules are not used.\nbpo-19157\n: Include the broadcast address in the usuable hosts for IPv6 in\nipaddress.\nbpo-11599\n: When an external command (e.g. compiler) fails, distutils now\nprints out the whole command line (instead of just the command name) if\nthe environment variable DISTUTILS_DEBUG is set.\nbpo-4931\n: distutils should not produce unhelpful “error: None” messages\nanymore. distutils.util.grok_environment_error is kept but doc-deprecated.\nbpo-20875\n: Prevent possible gzip “‘read’ is not defined” NameError. Patch\nby Claudiu Popa.\nbpo-11558\n:\nemail.message.Message.attach\nnow returns a more useful\nerror message if\nattach\nis called on a message for which\nis_multipart\nis False.\nbpo-20283\n: RE pattern methods now accept the string keyword parameters as\ndocumented. The pattern and source keyword parameters are left as\ndeprecated aliases.\nbpo-20778\n: Fix modulefinder to work with bytecode-only modules.\nbpo-20791\n: copy.copy() now doesn’t make a copy when the input is a bytes\nobject. Initial patch by Peter Otten.\nbpo-19748\n: On AIX, time.mktime() now raises an OverflowError for year\noutsize range [1902; 2037].\nbpo-19573\n: inspect.signature: Use enum for parameter kind constants.\nbpo-20726\n: inspect.signature: Make Signature and Parameter picklable.\nbpo-17373\n: Add inspect.Signature.from_callable method.\nbpo-20378\n: Improve repr of inspect.Signature and inspect.Parameter.\nbpo-20816\n: Fix inspect.getcallargs() to raise correct TypeError for\nmissing keyword-only arguments. Patch by Jeremiah Lowin.\nbpo-20817\n: Fix inspect.getcallargs() to fail correctly if more than 3\narguments are missing. Patch by Jeremiah Lowin.\nbpo-6676\n: Ensure a meaningful exception is raised when attempting to parse\nmore than one XML document per pyexpat xmlparser instance. (Original\npatches by Hirokazu Yamamoto and Amaury Forgeot d’Arc, with suggested\nwording by David Gutteridge)\nbpo-21117\n: Fix inspect.signature to better support functools.partial. Due\nto the specifics of functools.partial implementation,\npositional-or-keyword arguments passed as keyword arguments become\nkeyword-only.\nbpo-20334\n: inspect.Signature and inspect.Parameter are now hashable.\nThanks to Antony Lee for bug reports and suggestions.\nbpo-15916\n: doctest.DocTestSuite returns an empty unittest.TestSuite\ninstead of raising ValueError if it finds no tests\nbpo-21209\n: Fix asyncio.tasks.CoroWrapper to workaround a bug in yield-from\nimplementation in CPythons prior to 3.4.1.\nasyncio: Add gi_{frame,running,code} properties to CoroWrapper (upstream\nbpo-163\n).\nbpo-21311\n: Avoid exception in _osx_support with non-standard compiler\nconfigurations. Patch by John Szakmeister.\nbpo-11571\n: Ensure that the turtle window becomes the topmost window when\nlaunched on OS X.\nbpo-21801\n: Validate that __signature__ is None or an instance of\nSignature.\nbpo-21923\n: Prevent AttributeError in\ndistutils.sysconfig.customize_compiler due to possible uninitialized\n_config_vars.\nbpo-21323\n: Fix http.server to again handle scripts in CGI subdirectories,\nbroken by the fix for security\nbpo-19435\n.  Patch by Zach Byrne.\nbpo-22733\n: Fix ffi_prep_args not zero-extending argument values correctly\non 64-bit Windows.\nbpo-23302\n: Default to TCP_NODELAY=1 upon establishing an HTTPConnection.\nRemoved use of hard-coded MSS as it’s an optimization that’s no longer\nneeded with Nagle disabled.\nIDLE\n¶\nbpo-20577\n: Configuration of the max line length for the FormatParagraph\nextension has been moved from the General tab of the Idle preferences\ndialog to the FormatParagraph tab of the Config Extensions dialog. Patch\nby Tal Einat.\nbpo-16893\n: Update Idle doc chapter to match current Idle and add new\ninformation.\nbpo-3068\n: Add Idle extension configuration dialog to Options menu. Changes\nare written to HOME/.idlerc/config-extensions.cfg. Original patch by Tal\nEinat.\nbpo-16233\n: A module browser (File : Class Browser, Alt+C) requires an\neditor window with a filename.  When Class Browser is requested otherwise,\nfrom a shell, output window, or ‘Untitled’ editor, Idle no longer displays\nan error box. It now pops up an Open Module box (Alt+M). If a valid name\nis entered and a module is opened, a corresponding browser is also opened.\nbpo-4832\n: Save As to type Python files automatically adds .py to the name\nyou enter (even if your system does not display it).  Some systems\nautomatically add .txt when type is Text files.\nbpo-21986\n: Code objects are not normally pickled by the pickle module. To\nmatch this, they are no longer pickled when running under Idle.\nbpo-17390\n: Adjust Editor window title; remove ‘Python’, move version to\nend.\nbpo-14105\n: Idle debugger breakpoints no longer disappear when inserting or\ndeleting lines.\nbpo-17172\n: Turtledemo can now be run from Idle. Currently, the entry is on\nthe Help menu, but it may move to Run. Patch by Ramchandra Apt and Lita\nCho.\nbpo-21765\n: Add support for non-ascii identifiers to HyperParser.\nbpo-21940\n: Add unittest for WidgetRedirector. Initial patch by Saimadhav\nHeblikar.\nbpo-18592\n: Add unittest for SearchDialogBase. Patch by Phil Webster.\nbpo-21694\n: Add unittest for ParenMatch. Patch by Saimadhav Heblikar.\nbpo-21686\n: add unittest for HyperParser. Original patch by Saimadhav\nHeblikar.\nbpo-12387\n: Add missing upper(lower)case versions of default Windows key\nbindings for Idle so Caps Lock does not disable them. Patch by Roger\nSerwy.\nbpo-21695\n: Closing a Find-in-files output window while the search is still\nin progress no longer closes Idle.\nbpo-18910\n: Add unittest for textView. Patch by Phil Webster.\nbpo-18292\n: Add unittest for AutoExpand. Patch by Saihadhav Heblikar.\nbpo-18409\n: Add unittest for AutoComplete. Patch by Phil Webster.\nbpo-21477\n: htest.py - Improve framework, complete set of tests. Patches by\nSaimadhav Heblikar\nbpo-18104\n: Add idlelib/idle_test/htest.py with a few sample tests to begin\nconsolidating and improving human-validated tests of Idle. Change other\nfiles as needed to work with htest.  Running the module as __main__ runs\nall tests.\nbpo-21139\n: Change default paragraph width to 72, the\nPEP 8\nrecommendation.\nbpo-21284\n: Paragraph reformat test passes after user changes reformat\nwidth.\nbpo-17654\n: Ensure IDLE menus are customized properly on OS X for\nnon-framework builds and for all variants of Tk.\nbpo-23180\n: Rename IDLE “Windows” menu item to “Window”. Patch by Al\nSweigart.\nBuild\n¶\nbpo-15506\n: Use standard PKG_PROG_PKG_CONFIG autoconf macro in the\nconfigure script.\nbpo-22935\n: Allow the ssl module to be compiled if openssl doesn’t support\nSSL 3.\nbpo-22592\n: Drop support of the Borland C compiler to build Python. The\ndistutils module still supports it to build extensions.\nbpo-22591\n: Drop support of MS-DOS, especially of the DJGPP compiler\n(MS-DOS port of GCC).\nbpo-16537\n: Check whether self.extensions is empty in setup.py. Patch by\nJonathan Hosmer.\nbpo-22359\n: Remove incorrect uses of recursive make.  Patch by Jonas\nWagner.\nbpo-21958\n: Define HAVE_ROUND when building with Visual Studio 2013 and\nabove.  Patch by Zachary Turner.\nbpo-18093\n: the programs that embed the CPython runtime are now in a\nseparate “Programs” directory, rather than being kept in the Modules\ndirectory.\nbpo-15759\n: “make suspicious”, “make linkcheck” and “make doctest” in Doc/\nnow display special message when and only when there are failures.\nbpo-21141\n: The Windows build process no longer attempts to find Perl,\ninstead relying on OpenSSL source being configured and ready to build.\nThe\nPCbuild\\build_ssl.py\nscript has been re-written and re-named to\nPCbuild\\prepare_ssl.py\n, and takes care of configuring OpenSSL source\nfor both 32 and 64 bit platforms.  OpenSSL sources obtained from\nsvn.python.org will always be pre-configured and ready to build.\nbpo-21037\n: Add a build option to enable AddressSanitizer support.\nbpo-19962\n: The Windows build process now creates “python.bat” in the root\nof the source tree, which passes all arguments through to the most\nrecently built interpreter.\nbpo-21285\n: Refactor and fix curses configure check to always search in a\nncursesw directory.\nbpo-15234\n: For BerkeleyDB and Sqlite, only add the found library and\ninclude directories if they aren’t already being searched. This avoids an\nexplicit runtime library dependency.\nbpo-17861\n: Tools/scripts/generate_opcode_h.py automatically regenerates\nInclude/opcode.h from Lib/opcode.py if the latter gets any change.\nbpo-20644\n: OS X installer build support for documentation build changes in\n3.4.1: assume externally supplied sphinx-build is available in /usr/bin.\nbpo-20022\n: Eliminate use of deprecated bundlebuilder in OS X builds.\nbpo-15968\n: Incorporated Tcl, Tk, and Tix builds into the Windows build\nsolution.\nbpo-17095\n: Fix Modules/Setup\nshared\nsupport.\nbpo-21811\n: Anticipated fixes to support OS X versions > 10.9.\nbpo-21166\n: Prevent possible segfaults and other random failures of python\n–generate-posix-vars in pybuilddir.txt build target.\nbpo-18096\n: Fix library order returned by python-config.\nbpo-17219\n: Add library build dir for Python extension cross-builds.\nbpo-22919\n: Windows build updated to support VC 14.0 (Visual Studio 2015),\nwhich will be used for the official release.\nbpo-21236\n: Build _msi.pyd with cabinet.lib instead of fci.lib\nbpo-17128\n: Use private version of OpenSSL for OS X 10.5+ installer.\nC API\n¶\nbpo-14203\n: Remove obsolete support for view==NULL in PyBuffer_FillInfo(),\nbytearray_getbuffer(), bytesiobuf_getbuffer() and array_buffer_getbuf().\nAll functions now raise BufferError in that case.\nbpo-22445\n: PyBuffer_IsContiguous() now implements precise contiguity\ntests, compatible with NumPy’s NPY_RELAXED_STRIDES_CHECKING compilation\nflag.  Previously the function reported false negatives for corner cases.\nbpo-22079\n: PyType_Ready() now checks that statically allocated type has no\ndynamically allocated bases.\nbpo-22453\n: Removed non-documented macro PyObject_REPR().\nbpo-18395\n: Rename\n_Py_char2wchar()\nto\nPy_DecodeLocale()\n,\nrename\n_Py_wchar2char()\nto\nPy_EncodeLocale()\n, and document\nthese functions.\nbpo-21233\n: Add new C functions: PyMem_RawCalloc(), PyMem_Calloc(),\nPyObject_Calloc(), _PyObject_GC_Calloc(). bytes(int) is now using\ncalloc()\ninstead of\nmalloc()\nfor large objects which is faster and\nuse less memory.\nbpo-20942\n: PyImport_ImportFrozenModuleObject() no longer sets __file__ to\nmatch what importlib does; this affects _frozen_importlib as well as any\nmodule loaded using imp.init_frozen().\nDocumentation\n¶\nbpo-19548\n: Update the codecs module documentation to better cover the\ndistinction between text encodings and other codecs, together with other\nclarifications. Patch by Martin Panter.\nbpo-22394\n: Doc/Makefile now supports\nmake\nvenv\nPYTHON=../python\nto\ncreate a venv for generating the documentation, e.g.,\nmake\nhtml\nPYTHON=venv/bin/python3\n.\nbpo-21514\n: The documentation of the json module now refers to new JSON RFC\n7159 instead of obsoleted RFC 4627.\nbpo-21777\n: The binary sequence methods on bytes and bytearray are now\ndocumented explicitly, rather than assuming users will be able to derive\nthe expected behaviour from the behaviour of the corresponding str\nmethods.\nbpo-6916\n: undocument deprecated asynchat.fifo class.\nbpo-17386\n: Expanded functionality of the\nDoc/make.bat\nscript to make\nit much more comparable to\nDoc/Makefile\n.\nbpo-21312\n: Update the thread_foobar.h template file to include newer\nthreading APIs. Patch by Jack McCracken.\nbpo-21043\n: Remove the recommendation for specific CA organizations and to\nmention the ability to load the OS certificates.\nbpo-20765\n: Add missing documentation for PurePath.with_name() and\nPurePath.with_suffix().\nbpo-19407\n: New package installation and distribution guides based on the\nPython Packaging Authority tools. Existing guides have been retained as\nlegacy links from the distutils docs, as they still contain some required\nreference material for tool developers that isn’t recorded anywhere else.\nbpo-19697\n: Document cases where __main__.__spec__ is None.\nTests\n¶\nbpo-18982\n: Add tests for CLI of the calendar module.\nbpo-19548\n: Added some additional checks to test_codecs to ensure that\nstatements in the updated documentation remain accurate. Patch by Martin\nPanter.\nbpo-22838\n: All test_re tests now work with unittest test discovery.\nbpo-22173\n: Update lib2to3 tests to use unittest test discovery.\nbpo-16000\n: Convert test_curses to use unittest.\nbpo-21456\n: Skip two tests in test_urllib2net.py if _ssl module not\npresent. Patch by Remi Pointel.\nbpo-20746\n: Fix test_pdb to run in refleak mode (-R).  Patch by Xavier de\nGaye.\nbpo-22060\n: test_ctypes has been somewhat cleaned up and simplified; it now\nuses unittest test discovery to find its tests.\nbpo-22104\n: regrtest.py no longer holds a reference to the suite of tests\nloaded from test modules that don’t define test_main().\nbpo-22111\n: Assorted cleanups in test_imaplib.  Patch by Milan Oberkirch.\nbpo-22002\n: Added\nload_package_tests\nfunction to test.support and used\nit to implement/augment test discovery in test_asyncio, test_email,\ntest_importlib, test_json, and test_tools.\nbpo-21976\n: Fix test_ssl to accept LibreSSL version strings.  Thanks to\nWilliam Orr.\nbpo-21918\n: Converted test_tools from a module to a package containing\nseparate test files for each tested script.\nbpo-9554\n: Use modern unittest features in test_argparse. Initial patch by\nDenver Coneybeare and Radu Voicilas.\nbpo-20155\n: Changed HTTP method names in failing tests in test_httpservers\nso that packet filtering software (specifically Windows Base Filtering\nEngine) does not interfere with the transaction semantics expected by the\ntests.\nbpo-19493\n: Refactored the ctypes test package to skip tests explicitly\nrather than silently.\nbpo-18492\n: All resources are now allowed when tests are not run by\nregrtest.py.\nbpo-21634\n: Fix pystone micro-benchmark: use floor division instead of true\ndivision to benchmark integers instead of floating-point numbers. Set\npystone version to 1.2. Patch written by Lennart Regebro.\nbpo-21605\n: Added tests for Tkinter images.\nbpo-21493\n: Added test for ntpath.expanduser().  Original patch by Claudiu\nPopa.\nbpo-19925\n: Added tests for the spwd module. Original patch by Vajrasky\nKok.\nbpo-21522\n: Added Tkinter tests for Listbox.itemconfigure(),\nPanedWindow.paneconfigure(), and Menu.entryconfigure().\nbpo-17756\n: Fix test_code test when run from the installed location.\nbpo-17752\n: Fix distutils tests when run from the installed location.\nbpo-18604\n: Consolidated checks for GUI availability.  All platforms now at\nleast check whether Tk can be instantiated when the GUI resource is\nrequested.\nbpo-21275\n: Fix a socket test on KFreeBSD.\nbpo-21223\n: Pass test_site/test_startup_imports when some of the extensions\nare built as builtins.\nbpo-20635\n: Added tests for Tk geometry managers.\nAdd test case for freeze.\nbpo-20743\n: Fix a reference leak in test_tcl.\nbpo-21097\n: Move test_namespace_pkgs into test_importlib.\nbpo-21503\n: Use test_both() consistently in test_importlib.\nbpo-20939\n: Avoid various network test failures due to new redirect of\nhttp://www.python.org/\nto\nhttps://www.python.org\n: use\nhttp://www.example.com\ninstead.\nbpo-20668\n: asyncio tests no longer rely on tests.txt file. (Patch by\nVajrasky Kok)\nbpo-21093\n: Prevent failures of ctypes test_macholib on OS X if a copy of\nlibz exists in $HOME/lib or /usr/local/lib.\nbpo-22770\n: Prevent some Tk segfaults on OS X when running gui tests.\nbpo-23211\n: Workaround test_logging failure on some OS X 10.6 systems.\nbpo-23345\n: Prevent test_ssl failures with large OpenSSL patch level values\n(like 0.9.8zc).\nTools/Demos\n¶\nbpo-22314\n: pydoc now works when the LINES environment variable is set.\nbpo-22615\n: Argument Clinic now supports the “type” argument for the int\nconverter. This permits using the int converter with enums and typedefs.\nbpo-20076\n: The makelocalealias.py script no longer ignores UTF-8 mapping.\nbpo-20079\n: The makelocalealias.py script now can parse the SUPPORTED file\nfrom glibc sources and supports command line options for source paths.\nbpo-22201\n: Command-line interface of the zipfile module now correctly\nextracts ZIP files with directory entries.  Patch by Ryan Wilson.\nbpo-22120\n: For functions using an unsigned integer return converter,\nArgument Clinic now generates a cast to that type for the comparison to -1\nin the generated code.  (This suppresses a compilation warning.)\nbpo-18974\n: Tools/scripts/diff.py now uses argparse instead of optparse.\nbpo-21906\n: Make Tools/scripts/md5sum.py work in Python 3. Patch by Zachary\nWare.\nbpo-21629\n: Fix Argument Clinic’s “–converters” feature.\nAdd support for\nyield\nfrom\nto 2to3.\nAdd support for the\nPEP 465\nmatrix multiplication operator to 2to3.\nbpo-16047\n: Fix module exception list and __file__ handling in freeze.\nPatch by Meador Inge.\nbpo-11824\n: Consider ABI tags in freeze. Patch by Meador Inge.\nbpo-20535\n: PYTHONWARNING no longer affects the run_tests.py script. Patch\nby Arfrever Frehtes Taifersar Arahesis.\nWindows\n¶\nbpo-23260\n: Update Windows installer\nThe bundled version of Tcl/Tk has been updated to 8.6.3.  The most visible\nresult of this change is the addition of new native file dialogs when\nrunning on Windows Vista or newer.  See Tcl/Tk’s TIP 432 for more\ninformation.  Also, this version of Tcl/Tk includes support for Windows\n10.\nbpo-17896\n: The Windows build scripts now expect external library sources\nto be in\nPCbuild\\..\\externals\nrather than\nPCbuild\\..\\..\n.\nbpo-17717\n: The Windows build scripts now use a copy of NASM pulled from\nsvn.python.org to build OpenSSL.\nbpo-21907\n: Improved the batch scripts provided for building Python.\nbpo-22644\n: The bundled version of OpenSSL has been updated to 1.0.1j.\nbpo-10747\n: Use versioned labels in the Windows start menu. Patch by Olive\nKilburn.\nbpo-22980\n: .pyd files with a version and platform tag (for example,\n“.cp35-win32.pyd”) will now be loaded in preference to those without tags.\n(For information about older versions, consult the HISTORY file.)\nTable of Contents\nChangelog\nPython next\nTools/Demos\nTests\nSecurity\nLibrary\nDocumentation\nCore and Builtins\nBuild\nPython 3.13.5 final\nWindows\nTests\nLibrary\nCore and Builtins\nC API\nPython 3.13.4 final\nWindows\nTests\nSecurity\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.3 final\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.2 final\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.1 final\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.0 final\nCore and Builtins\nPython 3.13.0 release candidate 3\nmacOS\nWindows\nTests\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.0 release candidate 2\nmacOS\nWindows\nTools/Demos\nTests\nSecurity\nLibrary\nIDLE\nCore and Builtins\nC API\nBuild\nPython 3.13.0 release candidate 1\nTests\nSecurity\nLibrary\nIDLE\nCore and Builtins\nC API\nBuild\nPython 3.13.0 beta 4\nTests\nLibrary\nIDLE\nDocumentation\nCore and Builtins\nC API\nBuild\nPython 3.13.0 beta 3\nCore and Builtins\nLibrary\nBuild\nC API\nPython 3.13.0 beta 2\nSecurity\nCore and Builtins\nLibrary\nTests\nBuild\nWindows\nC API\nPython 3.13.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.13.0 alpha 6\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nC API\nPython 3.13.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.13.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.13.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.13.0 alpha 2\nCore and Builtins\nLibrary\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.13.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.12.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.12.0 alpha 7\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nC API\nPython 3.12.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.12.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nPython 3.12.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.12.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.12.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.12.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.11.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.11.0 alpha 7\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.11.0 alpha 6\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\nPython 3.11.0 alpha 5\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.11.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.11.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.11.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.11.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.10.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 7\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\nPython 3.10.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nmacOS\nTools/Demos\nC API\nPython 3.10.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.10.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.10.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.9.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\nPython 3.9.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.9.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.9.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\nPython 3.9.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nBuild\nIDLE\nC API\nPython 3.9.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\nPython 3.9.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.8.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.8.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.8.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nC API\nPython 3.8.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nTests\nWindows\nIDLE\nPython 3.8.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.7.0 final\nLibrary\nC API\nPython 3.7.0 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nBuild\nWindows\nIDLE\nPython 3.7.0 beta 5\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nmacOS\nIDLE\nPython 3.7.0 beta 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nPython 3.7.0 beta 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.7.0 beta 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nPython 3.7.0 beta 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\nPython 3.7.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nWindows\nTools/Demos\nC API\nPython 3.7.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.7.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nBuild\nIDLE\nC API\nPython 3.7.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nC API\nPython 3.6.6 final\nPython 3.6.6 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.6.5 final\nTests\nBuild\nPython 3.6.5 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.6.4 final\nPython 3.6.4 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\nPython 3.6.3 final\nLibrary\nBuild\nPython 3.6.3 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nPython 3.6.2 final\nPython 3.6.2 release candidate 2\nSecurity\nPython 3.6.2 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nBuild\nDocumentation\nTools/Demos\nTests\nWindows\nPython 3.6.1 final\nCore and Builtins\nBuild\nPython 3.6.1 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nWindows\nC API\nDocumentation\nTests\nBuild\nPython 3.6.0 final\nPython 3.6.0 release candidate 2\nCore and Builtins\nTools/Demos\nWindows\nBuild\nPython 3.6.0 release candidate 1\nCore and Builtins\nLibrary\nC API\nDocumentation\nTools/Demos\nPython 3.6.0 beta 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nPython 3.6.0 beta 3\nCore and Builtins\nLibrary\nWindows\nBuild\nTests\nPython 3.6.0 beta 2\nCore and Builtins\nLibrary\nWindows\nC API\nBuild\nTests\nPython 3.6.0 beta 1\nCore and Builtins\nLibrary\nIDLE\nC API\nTests\nBuild\nTools/Demos\nWindows\nPython 3.6.0 alpha 4\nCore and Builtins\nLibrary\nIDLE\nTests\nWindows\nBuild\nPython 3.6.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nBuild\nTools/Demos\nDocumentation\nTests\nPython 3.6.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nWindows\nBuild\nC API\nTools/Demos\nPython 3.6.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nC API\nPython 3.5.5 final\nPython 3.5.5 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nPython 3.5.4 final\nLibrary\nPython 3.5.4 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nC API\nPython 3.5.3 final\nPython 3.5.3 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nDocumentation\nTests\nTools/Demos\nWindows\nBuild\nPython 3.5.2 final\nCore and Builtins\nTests\nIDLE\nPython 3.5.2 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nPython 3.5.1 final\nCore and Builtins\nWindows\nPython 3.5.1 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nPython 3.5.0 final\nBuild\nPython 3.5.0 release candidate 4\nLibrary\nBuild\nPython 3.5.0 release candidate 3\nCore and Builtins\nLibrary\nPython 3.5.0 release candidate 2\nCore and Builtins\nLibrary\nPython 3.5.0 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nPython 3.5.0 beta 4\nCore and Builtins\nLibrary\nBuild\nPython 3.5.0 beta 3\nCore and Builtins\nLibrary\nTests\nDocumentation\nBuild\nPython 3.5.0 beta 2\nCore and Builtins\nLibrary\nPython 3.5.0 beta 1\nCore and Builtins\nLibrary\nIDLE\nTests\nDocumentation\nTools/Demos\nPython 3.5.0 alpha 4\nCore and Builtins\nLibrary\nBuild\nTests\nTools/Demos\nC API\nPython 3.5.0 alpha 3\nCore and Builtins\nLibrary\nBuild\nTests\nTools/Demos\nPython 3.5.0 alpha 2\nCore and Builtins\nLibrary\nBuild\nC API\nWindows\nPython 3.5.0 alpha 1\nCore and Builtins\nLibrary\nIDLE\nBuild\nC API\nDocumentation\nTests\nTools/Demos\nWindows\nPrevious topic\nWhat’s New in Python 2.0\nNext topic\nThe Python Tutorial\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nWhat’s New in Python\n»\nChangelog\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/whatsnew/changelog.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12362.6233245
  },
  {
    "title": "Glossary¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nGlossary\n|\nTheme\nAuto\nLight\nDark\n|\nGlossary\n¶\n>>>\n¶\nThe default Python prompt of the\ninteractive\nshell.  Often\nseen for code examples which can be executed interactively in the\ninterpreter.\n...\n¶\nCan refer to:\nThe default Python prompt of the\ninteractive\nshell when entering the\ncode for an indented code block, when within a pair of matching left and\nright delimiters (parentheses, square brackets, curly braces or triple\nquotes), or after specifying a decorator.\nThe\nEllipsis\nbuilt-in constant.\nabstract base class\n¶\nAbstract base classes complement\nduck-typing\nby\nproviding a way to define interfaces when other techniques like\nhasattr()\nwould be clumsy or subtly wrong (for example with\nmagic methods\n).  ABCs introduce virtual\nsubclasses, which are classes that don’t inherit from a class but are\nstill recognized by\nisinstance()\nand\nissubclass()\n; see the\nabc\nmodule documentation.  Python comes with many built-in ABCs for\ndata structures (in the\ncollections.abc\nmodule), numbers (in the\nnumbers\nmodule), streams (in the\nio\nmodule), import finders\nand loaders (in the\nimportlib.abc\nmodule).  You can create your own\nABCs with the\nabc\nmodule.\nannotation\n¶\nA label associated with a variable, a class\nattribute or a function parameter or return value,\nused by convention as a\ntype hint\n.\nAnnotations of local variables cannot be accessed at runtime, but\nannotations of global variables, class attributes, and functions\nare stored in the\n__annotations__\nspecial attribute of modules, classes, and functions,\nrespectively.\nSee\nvariable annotation\n,\nfunction annotation\n,\nPEP 484\nand\nPEP 526\n, which describe this functionality.\nAlso see\nAnnotations Best Practices\nfor best practices on working with annotations.\nargument\n¶\nA value passed to a\nfunction\n(or\nmethod\n) when calling the\nfunction.  There are two kinds of argument:\nkeyword argument\n: an argument preceded by an identifier (e.g.\nname=\n) in a function call or passed as a value in a dictionary\npreceded by\n**\n.  For example,\n3\nand\n5\nare both keyword\narguments in the following calls to\ncomplex()\n:\ncomplex\n(\nreal\n=\n3\n,\nimag\n=\n5\n)\ncomplex\n(\n**\n{\n'real'\n:\n3\n,\n'imag'\n:\n5\n})\npositional argument\n: an argument that is not a keyword argument.\nPositional arguments can appear at the beginning of an argument list\nand/or be passed as elements of an\niterable\npreceded by\n*\n.\nFor example,\n3\nand\n5\nare both positional arguments in the\nfollowing calls:\ncomplex\n(\n3\n,\n5\n)\ncomplex\n(\n*\n(\n3\n,\n5\n))\nArguments are assigned to the named local variables in a function body.\nSee the\nCalls\nsection for the rules governing this assignment.\nSyntactically, any expression can be used to represent an argument; the\nevaluated value is assigned to the local variable.\nSee also the\nparameter\nglossary entry, the FAQ question on\nthe difference between arguments and parameters\n, and\nPEP 362\n.\nasynchronous context manager\n¶\nAn object which controls the environment seen in an\nasync\nwith\nstatement by defining\n__aenter__()\nand\n__aexit__()\nmethods.  Introduced by\nPEP 492\n.\nasynchronous generator\n¶\nA function which returns an\nasynchronous generator iterator\n.  It\nlooks like a coroutine function defined with\nasync\ndef\nexcept\nthat it contains\nyield\nexpressions for producing a series of\nvalues usable in an\nasync\nfor\nloop.\nUsually refers to an asynchronous generator function, but may refer to an\nasynchronous generator iterator\nin some contexts.  In cases where the\nintended meaning isn’t clear, using the full terms avoids ambiguity.\nAn asynchronous generator function may contain\nawait\nexpressions as well as\nasync\nfor\n, and\nasync\nwith\nstatements.\nasynchronous generator iterator\n¶\nAn object created by a\nasynchronous generator\nfunction.\nThis is an\nasynchronous iterator\nwhich when called using the\n__anext__()\nmethod returns an awaitable object which will execute\nthe body of the asynchronous generator function until the next\nyield\nexpression.\nEach\nyield\ntemporarily suspends processing, remembering the\nexecution state (including local variables and pending\ntry-statements).  When the\nasynchronous generator iterator\neffectively\nresumes with another awaitable returned by\n__anext__()\n, it\npicks up where it left off.  See\nPEP 492\nand\nPEP 525\n.\nasynchronous iterable\n¶\nAn object, that can be used in an\nasync\nfor\nstatement.\nMust return an\nasynchronous iterator\nfrom its\n__aiter__()\nmethod.  Introduced by\nPEP 492\n.\nasynchronous iterator\n¶\nAn object that implements the\n__aiter__()\nand\n__anext__()\nmethods.\n__anext__()\nmust return an\nawaitable\nobject.\nasync\nfor\nresolves the awaitables returned by an asynchronous\niterator’s\n__anext__()\nmethod until it raises a\nStopAsyncIteration\nexception.  Introduced by\nPEP 492\n.\nattribute\n¶\nA value associated with an object which is usually referenced by name\nusing dotted expressions.\nFor example, if an object\no\nhas an attribute\na\nit would be referenced as\no.a\n.\nIt is possible to give an object an attribute whose name is not an\nidentifier as defined by\nIdentifiers and keywords\n, for example using\nsetattr()\n, if the object allows it.\nSuch an attribute will not be accessible using a dotted expression,\nand would instead need to be retrieved with\ngetattr()\n.\nawaitable\n¶\nAn object that can be used in an\nawait\nexpression.  Can be\na\ncoroutine\nor an object with an\n__await__()\nmethod.\nSee also\nPEP 492\n.\nBDFL\n¶\nBenevolent Dictator For Life, a.k.a.\nGuido van Rossum\n, Python’s creator.\nbinary file\n¶\nA\nfile object\nable to read and write\nbytes-like objects\n.\nExamples of binary files are files opened in binary mode (\n'rb'\n,\n'wb'\nor\n'rb+'\n),\nsys.stdin.buffer\n,\nsys.stdout.buffer\n, and instances of\nio.BytesIO\nand\ngzip.GzipFile\n.\nSee also\ntext file\nfor a file object able to read and write\nstr\nobjects.\nborrowed reference\n¶\nIn Python’s C API, a borrowed reference is a reference to an object,\nwhere the code using the object does not own the reference.\nIt becomes a dangling\npointer if the object is destroyed. For example, a garbage collection can\nremove the last\nstrong reference\nto the object and so destroy it.\nCalling\nPy_INCREF()\non the\nborrowed reference\nis\nrecommended to convert it to a\nstrong reference\nin-place, except\nwhen the object cannot be destroyed before the last usage of the borrowed\nreference. The\nPy_NewRef()\nfunction can be used to create a new\nstrong reference\n.\nbytes-like object\n¶\nAn object that supports the\nBuffer Protocol\nand can\nexport a C-\ncontiguous\nbuffer. This includes all\nbytes\n,\nbytearray\n, and\narray.array\nobjects, as well as many\ncommon\nmemoryview\nobjects.  Bytes-like objects can\nbe used for various operations that work with binary data; these include\ncompression, saving to a binary file, and sending over a socket.\nSome operations need the binary data to be mutable.  The documentation\noften refers to these as “read-write bytes-like objects”.  Example\nmutable buffer objects include\nbytearray\nand a\nmemoryview\nof a\nbytearray\n.\nOther operations require the binary data to be stored in\nimmutable objects (“read-only bytes-like objects”); examples\nof these include\nbytes\nand a\nmemoryview\nof a\nbytes\nobject.\nbytecode\n¶\nPython source code is compiled into bytecode, the internal representation\nof a Python program in the CPython interpreter.  The bytecode is also\ncached in\n.pyc\nfiles so that executing the same file is\nfaster the second time (recompilation from source to bytecode can be\navoided).  This “intermediate language” is said to run on a\nvirtual machine\nthat executes the machine code corresponding to\neach bytecode. Do note that bytecodes are not expected to work between\ndifferent Python virtual machines, nor to be stable between Python\nreleases.\nA list of bytecode instructions can be found in the documentation for\nthe dis module\n.\ncallable\n¶\nA callable is an object that can be called, possibly with a set\nof arguments (see\nargument\n), with the following syntax:\ncallable\n(\nargument1\n,\nargument2\n,\nargumentN\n)\nA\nfunction\n, and by extension a\nmethod\n, is a callable.\nAn instance of a class that implements the\n__call__()\nmethod is also a callable.\ncallback\n¶\nA subroutine function which is passed as an argument to be executed at\nsome point in the future.\nclass\n¶\nA template for creating user-defined objects. Class definitions\nnormally contain method definitions which operate on instances of the\nclass.\nclass variable\n¶\nA variable defined in a class and intended to be modified only at\nclass level (i.e., not in an instance of the class).\nclosure variable\n¶\nA\nfree variable\nreferenced from a\nnested scope\nthat is defined in an outer\nscope rather than being resolved at runtime from the globals or builtin namespaces.\nMay be explicitly defined with the\nnonlocal\nkeyword to allow write access,\nor implicitly defined if the variable is only being read.\nFor example, in the\ninner\nfunction in the following code, both\nx\nand\nprint\nare\nfree variables\n, but only\nx\nis a\nclosure variable\n:\ndef\nouter\n():\nx\n=\n0\ndef\ninner\n():\nnonlocal\nx\nx\n+=\n1\nprint\n(\nx\n)\nreturn\ninner\nDue to the\ncodeobject.co_freevars\nattribute (which, despite its name, only\nincludes the names of closure variables rather than listing all referenced free\nvariables), the more general\nfree variable\nterm is sometimes used even\nwhen the intended meaning is to refer specifically to closure variables.\ncomplex number\n¶\nAn extension of the familiar real number system in which all numbers are\nexpressed as a sum of a real part and an imaginary part.  Imaginary\nnumbers are real multiples of the imaginary unit (the square root of\n-1\n), often written\ni\nin mathematics or\nj\nin\nengineering.  Python has built-in support for complex numbers, which are\nwritten with this latter notation; the imaginary part is written with a\nj\nsuffix, e.g.,\n3+1j\n.  To get access to complex equivalents of the\nmath\nmodule, use\ncmath\n.  Use of complex numbers is a fairly\nadvanced mathematical feature.  If you’re not aware of a need for them,\nit’s almost certain you can safely ignore them.\ncontext\n¶\nThis term has different meanings depending on where and how it is used.\nSome common meanings:\nThe temporary state or environment established by a\ncontext\nmanager\nvia a\nwith\nstatement.\nThe collection of key­value bindings associated with a particular\ncontextvars.Context\nobject and accessed via\nContextVar\nobjects.  Also see\ncontext\nvariable\n.\nA\ncontextvars.Context\nobject.  Also see\ncurrent\ncontext\n.\ncontext management protocol\n¶\nThe\n__enter__()\nand\n__exit__()\nmethods called\nby the\nwith\nstatement.  See\nPEP 343\n.\ncontext manager\n¶\nAn object which implements the\ncontext management protocol\nand\ncontrols the environment seen in a\nwith\nstatement.  See\nPEP 343\n.\ncontext variable\n¶\nA variable whose value depends on which context is the\ncurrent\ncontext\n.  Values are accessed via\ncontextvars.ContextVar\nobjects.  Context variables are primarily used to isolate state between\nconcurrent asynchronous tasks.\ncontiguous\n¶\nA buffer is considered contiguous exactly if it is either\nC-contiguous\nor\nFortran contiguous\n.  Zero-dimensional buffers are\nC and Fortran contiguous.  In one-dimensional arrays, the items\nmust be laid out in memory next to each other, in order of\nincreasing indexes starting from zero.  In multidimensional\nC-contiguous arrays, the last index varies the fastest when\nvisiting items in order of memory address.  However, in\nFortran contiguous arrays, the first index varies the fastest.\ncoroutine\n¶\nCoroutines are a more generalized form of subroutines. Subroutines are\nentered at one point and exited at another point.  Coroutines can be\nentered, exited, and resumed at many different points.  They can be\nimplemented with the\nasync\ndef\nstatement.  See also\nPEP 492\n.\ncoroutine function\n¶\nA function which returns a\ncoroutine\nobject.  A coroutine\nfunction may be defined with the\nasync\ndef\nstatement,\nand may contain\nawait\n,\nasync\nfor\n, and\nasync\nwith\nkeywords.  These were introduced\nby\nPEP 492\n.\nCPython\n¶\nThe canonical implementation of the Python programming language, as\ndistributed on\npython.org\n.  The term “CPython”\nis used when necessary to distinguish this implementation from others\nsuch as Jython or IronPython.\ncurrent context\n¶\nThe\ncontext\n(\ncontextvars.Context\nobject) that is\ncurrently used by\nContextVar\nobjects to access (get\nor set) the values of\ncontext variables\n.  Each\nthread has its own current context.  Frameworks for executing asynchronous\ntasks (see\nasyncio\n) associate each task with a context which\nbecomes the current context whenever the task starts or resumes execution.\ndecorator\n¶\nA function returning another function, usually applied as a function\ntransformation using the\n@wrapper\nsyntax.  Common examples for\ndecorators are\nclassmethod()\nand\nstaticmethod()\n.\nThe decorator syntax is merely syntactic sugar, the following two\nfunction definitions are semantically equivalent:\ndef\nf\n(\narg\n):\n...\nf\n=\nstaticmethod\n(\nf\n)\n@staticmethod\ndef\nf\n(\narg\n):\n...\nThe same concept exists for classes, but is less commonly used there.  See\nthe documentation for\nfunction definitions\nand\nclass definitions\nfor more about decorators.\ndescriptor\n¶\nAny object which defines the methods\n__get__()\n,\n__set__()\n, or\n__delete__()\n.\nWhen a class attribute is a descriptor, its special\nbinding behavior is triggered upon attribute lookup.  Normally, using\na.b\nto get, set or delete an attribute looks up the object named\nb\nin\nthe class dictionary for\na\n, but if\nb\nis a descriptor, the respective\ndescriptor method gets called.  Understanding descriptors is a key to a\ndeep understanding of Python because they are the basis for many features\nincluding functions, methods, properties, class methods, static methods,\nand reference to super classes.\nFor more information about descriptors’ methods, see\nImplementing Descriptors\nor the\nDescriptor How To Guide\n.\ndictionary\n¶\nAn associative array, where arbitrary keys are mapped to values.  The\nkeys can be any object with\n__hash__()\nand\n__eq__()\nmethods.\nCalled a hash in Perl.\ndictionary comprehension\n¶\nA compact way to process all or part of the elements in an iterable and\nreturn a dictionary with the results.\nresults\n=\n{n:\nn\n**\n2\nfor\nn\nin\nrange(10)}\ngenerates a dictionary containing key\nn\nmapped to\nvalue\nn\n**\n2\n. See\nDisplays for lists, sets and dictionaries\n.\ndictionary view\n¶\nThe objects returned from\ndict.keys()\n,\ndict.values()\n, and\ndict.items()\nare called dictionary views. They provide a dynamic\nview on the dictionary’s entries, which means that when the dictionary\nchanges, the view reflects these changes. To force the\ndictionary view to become a full list use\nlist(dictview)\n.  See\nDictionary view objects\n.\ndocstring\n¶\nA string literal which appears as the first expression in a class,\nfunction or module.  While ignored when the suite is executed, it is\nrecognized by the compiler and put into the\n__doc__\nattribute\nof the enclosing class, function or module.  Since it is available via\nintrospection, it is the canonical place for documentation of the\nobject.\nduck-typing\n¶\nA programming style which does not look at an object’s type to determine\nif it has the right interface; instead, the method or attribute is simply\ncalled or used (“If it looks like a duck and quacks like a duck, it\nmust be a duck.”)  By emphasizing interfaces rather than specific types,\nwell-designed code improves its flexibility by allowing polymorphic\nsubstitution.  Duck-typing avoids tests using\ntype()\nor\nisinstance()\n.  (Note, however, that duck-typing can be complemented\nwith\nabstract base classes\n.)  Instead, it\ntypically employs\nhasattr()\ntests or\nEAFP\nprogramming.\nEAFP\n¶\nEasier to ask for forgiveness than permission.  This common Python coding\nstyle assumes the existence of valid keys or attributes and catches\nexceptions if the assumption proves false.  This clean and fast style is\ncharacterized by the presence of many\ntry\nand\nexcept\nstatements.  The technique contrasts with the\nLBYL\nstyle\ncommon to many other languages such as C.\nexpression\n¶\nA piece of syntax which can be evaluated to some value.  In other words,\nan expression is an accumulation of expression elements like literals,\nnames, attribute access, operators or function calls which all return a\nvalue.  In contrast to many other languages, not all language constructs\nare expressions.  There are also\nstatement\ns which cannot be used\nas expressions, such as\nwhile\n.  Assignments are also statements,\nnot expressions.\nextension module\n¶\nA module written in C or C++, using Python’s C API to interact with the\ncore and with user code.\nf-string\n¶\nString literals prefixed with\n'f'\nor\n'F'\nare commonly called\n“f-strings” which is short for\nformatted string literals\n.  See also\nPEP 498\n.\nfile object\n¶\nAn object exposing a file-oriented API (with methods such as\nread()\nor\nwrite()\n) to an underlying resource.  Depending\non the way it was created, a file object can mediate access to a real\non-disk file or to another type of storage or communication device\n(for example standard input/output, in-memory buffers, sockets, pipes,\netc.).  File objects are also called\nfile-like objects\nor\nstreams\n.\nThere are actually three categories of file objects: raw\nbinary files\n, buffered\nbinary files\nand\ntext files\n.\nTheir interfaces are defined in the\nio\nmodule.  The canonical\nway to create a file object is by using the\nopen()\nfunction.\nfile-like object\n¶\nA synonym for\nfile object\n.\nfilesystem encoding and error handler\n¶\nEncoding and error handler used by Python to decode bytes from the\noperating system and encode Unicode to the operating system.\nThe filesystem encoding must guarantee to successfully decode all bytes\nbelow 128. If the file system encoding fails to provide this guarantee,\nAPI functions can raise\nUnicodeError\n.\nThe\nsys.getfilesystemencoding()\nand\nsys.getfilesystemencodeerrors()\nfunctions can be used to get the\nfilesystem encoding and error handler.\nThe\nfilesystem encoding and error handler\nare configured at\nPython startup by the\nPyConfig_Read()\nfunction: see\nfilesystem_encoding\nand\nfilesystem_errors\nmembers of\nPyConfig\n.\nSee also the\nlocale encoding\n.\nfinder\n¶\nAn object that tries to find the\nloader\nfor a module that is\nbeing imported.\nThere are two types of finder:\nmeta path finders\nfor use with\nsys.meta_path\n, and\npath\nentry finders\nfor use with\nsys.path_hooks\n.\nSee\nFinders and loaders\nand\nimportlib\nfor much more detail.\nfloor division\n¶\nMathematical division that rounds down to nearest integer.  The floor\ndivision operator is\n//\n.  For example, the expression\n11\n//\n4\nevaluates to\n2\nin contrast to the\n2.75\nreturned by float true\ndivision.  Note that\n(-11)\n//\n4\nis\n-3\nbecause that is\n-2.75\nrounded\ndownward\n. See\nPEP 238\n.\nfree threading\n¶\nA threading model where multiple threads can run Python bytecode\nsimultaneously within the same interpreter.  This is in contrast to\nthe\nglobal interpreter lock\nwhich allows only one thread to\nexecute Python bytecode at a time.  See\nPEP 703\n.\nfree variable\n¶\nFormally, as defined in the\nlanguage execution model\n, a free\nvariable is any variable used in a namespace which is not a local variable in that\nnamespace. See\nclosure variable\nfor an example.\nPragmatically, due to the name of the\ncodeobject.co_freevars\nattribute,\nthe term is also sometimes used as a synonym for\nclosure variable\n.\nfunction\n¶\nA series of statements which returns some value to a caller. It can also\nbe passed zero or more\narguments\nwhich may be used in\nthe execution of the body. See also\nparameter\n,\nmethod\n,\nand the\nFunction definitions\nsection.\nfunction annotation\n¶\nAn\nannotation\nof a function parameter or return value.\nFunction annotations are usually used for\ntype hints\n: for example, this function is expected to take two\nint\narguments and is also expected to have an\nint\nreturn value:\ndef\nsum_two_numbers\n(\na\n:\nint\n,\nb\n:\nint\n)\n->\nint\n:\nreturn\na\n+\nb\nFunction annotation syntax is explained in section\nFunction definitions\n.\nSee\nvariable annotation\nand\nPEP 484\n,\nwhich describe this functionality.\nAlso see\nAnnotations Best Practices\nfor best practices on working with annotations.\n__future__\n¶\nA\nfuture statement\n,\nfrom\n__future__\nimport\n<feature>\n,\ndirects the compiler to compile the current module using syntax or\nsemantics that will become standard in a future release of Python.\nThe\n__future__\nmodule documents the possible values of\nfeature\n.  By importing this module and evaluating its variables,\nyou can see when a new feature was first added to the language and\nwhen it will (or did) become the default:\n>>>\nimport\n__future__\n>>>\n__future__\n.\ndivision\n_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)\ngarbage collection\n¶\nThe process of freeing memory when it is not used anymore.  Python\nperforms garbage collection via reference counting and a cyclic garbage\ncollector that is able to detect and break reference cycles.  The\ngarbage collector can be controlled using the\ngc\nmodule.\ngenerator\n¶\nA function which returns a\ngenerator iterator\n.  It looks like a\nnormal function except that it contains\nyield\nexpressions\nfor producing a series of values usable in a for-loop or that can be\nretrieved one at a time with the\nnext()\nfunction.\nUsually refers to a generator function, but may refer to a\ngenerator iterator\nin some contexts.  In cases where the intended\nmeaning isn’t clear, using the full terms avoids ambiguity.\ngenerator iterator\n¶\nAn object created by a\ngenerator\nfunction.\nEach\nyield\ntemporarily suspends processing, remembering the\nexecution state (including local variables and pending\ntry-statements).  When the\ngenerator iterator\nresumes, it picks up where\nit left off (in contrast to functions which start fresh on every\ninvocation).\ngenerator expression\n¶\nAn\nexpression\nthat returns an\niterator\n.  It looks like a normal expression\nfollowed by a\nfor\nclause defining a loop variable, range,\nand an optional\nif\nclause.  The combined expression\ngenerates values for an enclosing function:\n>>>\nsum\n(\ni\n*\ni\nfor\ni\nin\nrange\n(\n10\n))\n# sum of squares 0, 1, 4, ... 81\n285\ngeneric function\n¶\nA function composed of multiple functions implementing the same operation\nfor different types. Which implementation should be used during a call is\ndetermined by the dispatch algorithm.\nSee also the\nsingle dispatch\nglossary entry, the\nfunctools.singledispatch()\ndecorator, and\nPEP 443\n.\ngeneric type\n¶\nA\ntype\nthat can be parameterized; typically a\ncontainer class\nsuch as\nlist\nor\ndict\n. Used for\ntype hints\nand\nannotations\n.\nFor more details, see\ngeneric alias types\n,\nPEP 483\n,\nPEP 484\n,\nPEP 585\n, and the\ntyping\nmodule.\nGIL\n¶\nSee\nglobal interpreter lock\n.\nglobal interpreter lock\n¶\nThe mechanism used by the\nCPython\ninterpreter to assure that\nonly one thread executes Python\nbytecode\nat a time.\nThis simplifies the CPython implementation by making the object model\n(including critical built-in types such as\ndict\n) implicitly\nsafe against concurrent access.  Locking the entire interpreter\nmakes it easier for the interpreter to be multi-threaded, at the\nexpense of much of the parallelism afforded by multi-processor\nmachines.\nHowever, some extension modules, either standard or third-party,\nare designed so as to release the GIL when doing computationally intensive\ntasks such as compression or hashing.  Also, the GIL is always released\nwhen doing I/O.\nAs of Python 3.13, the GIL can be disabled using the\n--disable-gil\nbuild configuration. After building Python with this option, code must be\nrun with\n-X\ngil=0\nor after setting the\nPYTHON_GIL=0\nenvironment variable. This feature enables improved performance for\nmulti-threaded applications and makes it easier to use multi-core CPUs\nefficiently. For more details, see\nPEP 703\n.\nhash-based pyc\n¶\nA bytecode cache file that uses the hash rather than the last-modified\ntime of the corresponding source file to determine its validity. See\nCached bytecode invalidation\n.\nhashable\n¶\nAn object is\nhashable\nif it has a hash value which never changes during\nits lifetime (it needs a\n__hash__()\nmethod), and can be\ncompared to other objects (it needs an\n__eq__()\nmethod).\nHashable objects which\ncompare equal must have the same hash value.\nHashability makes an object usable as a dictionary key and a set member,\nbecause these data structures use the hash value internally.\nMost of Python’s immutable built-in objects are hashable; mutable\ncontainers (such as lists or dictionaries) are not; immutable\ncontainers (such as tuples and frozensets) are only hashable if\ntheir elements are hashable.  Objects which are\ninstances of user-defined classes are hashable by default.  They all\ncompare unequal (except with themselves), and their hash value is derived\nfrom their\nid()\n.\nIDLE\n¶\nAn Integrated Development and Learning Environment for Python.\nIDLE — Python editor and shell\nis a basic editor and interpreter environment\nwhich ships with the standard distribution of Python.\nimmortal\n¶\nImmortal objects\nare a CPython implementation detail introduced\nin\nPEP 683\n.\nIf an object is immortal, its\nreference count\nis never modified,\nand therefore it is never deallocated while the interpreter is running.\nFor example,\nTrue\nand\nNone\nare immortal in CPython.\nimmutable\n¶\nAn object with a fixed value.  Immutable objects include numbers, strings and\ntuples.  Such an object cannot be altered.  A new object has to\nbe created if a different value has to be stored.  They play an important\nrole in places where a constant hash value is needed, for example as a key\nin a dictionary.\nimport path\n¶\nA list of locations (or\npath entries\n) that are\nsearched by the\npath based finder\nfor modules to import. During\nimport, this list of locations usually comes from\nsys.path\n, but\nfor subpackages it may also come from the parent package’s\n__path__\nattribute.\nimporting\n¶\nThe process by which Python code in one module is made available to\nPython code in another module.\nimporter\n¶\nAn object that both finds and loads a module; both a\nfinder\nand\nloader\nobject.\ninteractive\n¶\nPython has an interactive interpreter which means you can enter\nstatements and expressions at the interpreter prompt, immediately\nexecute them and see their results.  Just launch\npython\nwith no\narguments (possibly by selecting it from your computer’s main\nmenu). It is a very powerful way to test out new ideas or inspect\nmodules and packages (remember\nhelp(x)\n). For more on interactive\nmode, see\nInteractive Mode\n.\ninterpreted\n¶\nPython is an interpreted language, as opposed to a compiled one,\nthough the distinction can be blurry because of the presence of the\nbytecode compiler.  This means that source files can be run directly\nwithout explicitly creating an executable which is then run.\nInterpreted languages typically have a shorter development/debug cycle\nthan compiled ones, though their programs generally also run more\nslowly.  See also\ninteractive\n.\ninterpreter shutdown\n¶\nWhen asked to shut down, the Python interpreter enters a special phase\nwhere it gradually releases all allocated resources, such as modules\nand various critical internal structures.  It also makes several calls\nto the\ngarbage collector\n. This can trigger\nthe execution of code in user-defined destructors or weakref callbacks.\nCode executed during the shutdown phase can encounter various\nexceptions as the resources it relies on may not function anymore\n(common examples are library modules or the warnings machinery).\nThe main reason for interpreter shutdown is that the\n__main__\nmodule\nor the script being run has finished executing.\niterable\n¶\nAn object capable of returning its members one at a time. Examples of\niterables include all sequence types (such as\nlist\n,\nstr\n,\nand\ntuple\n) and some non-sequence types like\ndict\n,\nfile objects\n, and objects of any classes you define\nwith an\n__iter__()\nmethod or with a\n__getitem__()\nmethod\nthat implements\nsequence\nsemantics.\nIterables can be\nused in a\nfor\nloop and in many other places where a sequence is\nneeded (\nzip()\n,\nmap()\n, …).  When an iterable object is passed\nas an argument to the built-in function\niter()\n, it returns an\niterator for the object.  This iterator is good for one pass over the set\nof values.  When using iterables, it is usually not necessary to call\niter()\nor deal with iterator objects yourself.  The\nfor\nstatement does that automatically for you, creating a temporary unnamed\nvariable to hold the iterator for the duration of the loop.  See also\niterator\n,\nsequence\n, and\ngenerator\n.\niterator\n¶\nAn object representing a stream of data.  Repeated calls to the iterator’s\n__next__()\nmethod (or passing it to the built-in function\nnext()\n) return successive items in the stream.  When no more data\nare available a\nStopIteration\nexception is raised instead.  At this\npoint, the iterator object is exhausted and any further calls to its\n__next__()\nmethod just raise\nStopIteration\nagain.  Iterators\nare required to have an\n__iter__()\nmethod that returns the iterator\nobject itself so every iterator is also iterable and may be used in most\nplaces where other iterables are accepted.  One notable exception is code\nwhich attempts multiple iteration passes.  A container object (such as a\nlist\n) produces a fresh new iterator each time you pass it to the\niter()\nfunction or use it in a\nfor\nloop.  Attempting this\nwith an iterator will just return the same exhausted iterator object used\nin the previous iteration pass, making it appear like an empty container.\nMore information can be found in\nIterator Types\n.\nCPython implementation detail:\nCPython does not consistently apply the requirement that an iterator\ndefine\n__iter__()\n.\nAnd also please note that the free-threading CPython does not guarantee\nthe thread-safety of iterator operations.\nkey function\n¶\nA key function or collation function is a callable that returns a value\nused for sorting or ordering.  For example,\nlocale.strxfrm()\nis\nused to produce a sort key that is aware of locale specific sort\nconventions.\nA number of tools in Python accept key functions to control how elements\nare ordered or grouped.  They include\nmin()\n,\nmax()\n,\nsorted()\n,\nlist.sort()\n,\nheapq.merge()\n,\nheapq.nsmallest()\n,\nheapq.nlargest()\n, and\nitertools.groupby()\n.\nThere are several ways to create a key function.  For example. the\nstr.lower()\nmethod can serve as a key function for case insensitive\nsorts.  Alternatively, a key function can be built from a\nlambda\nexpression such as\nlambda\nr:\n(r[0],\nr[2])\n.  Also,\noperator.attrgetter()\n,\noperator.itemgetter()\n, and\noperator.methodcaller()\nare three key function constructors.  See the\nSorting HOW TO\nfor examples of how to create and use key functions.\nkeyword argument\n¶\nSee\nargument\n.\nlambda\n¶\nAn anonymous inline function consisting of a single\nexpression\nwhich is evaluated when the function is called.  The syntax to create\na lambda function is\nlambda\n[parameters]:\nexpression\nLBYL\n¶\nLook before you leap.  This coding style explicitly tests for\npre-conditions before making calls or lookups.  This style contrasts with\nthe\nEAFP\napproach and is characterized by the presence of many\nif\nstatements.\nIn a multi-threaded environment, the LBYL approach can risk introducing a\nrace condition between “the looking” and “the leaping”.  For example, the\ncode,\nif\nkey\nin\nmapping:\nreturn\nmapping[key]\ncan fail if another\nthread removes\nkey\nfrom\nmapping\nafter the test, but before the lookup.\nThis issue can be solved with locks or by using the EAFP approach.\nlexical analyzer\n¶\nFormal name for the\ntokenizer\n; see\ntoken\n.\nlist\n¶\nA built-in Python\nsequence\n.  Despite its name it is more akin\nto an array in other languages than to a linked list since access to\nelements is\nO\n(1).\nlist comprehension\n¶\nA compact way to process all or part of the elements in a sequence and\nreturn a list with the results.\nresult\n=\n['{:#04x}'.format(x)\nfor\nx\nin\nrange(256)\nif\nx\n%\n2\n==\n0]\ngenerates a list of strings containing\neven hex numbers (0x..) in the range from 0 to 255. The\nif\nclause is optional.  If omitted, all elements in\nrange(256)\nare\nprocessed.\nloader\n¶\nAn object that loads a module.\nIt must define the\nexec_module()\nand\ncreate_module()\nmethods\nto implement the\nLoader\ninterface.\nA loader is typically returned by a\nfinder\n.\nSee also:\nFinders and loaders\nimportlib.abc.Loader\nPEP 302\nlocale encoding\n¶\nOn Unix, it is the encoding of the LC_CTYPE locale. It can be set with\nlocale.setlocale(locale.LC_CTYPE,\nnew_locale)\n.\nOn Windows, it is the ANSI code page (ex:\n\"cp1252\"\n).\nOn Android and VxWorks, Python uses\n\"utf-8\"\nas the locale encoding.\nlocale.getencoding()\ncan be used to get the locale encoding.\nSee also the\nfilesystem encoding and error handler\n.\nmagic method\n¶\nAn informal synonym for\nspecial method\n.\nmapping\n¶\nA container object that supports arbitrary key lookups and implements the\nmethods specified in the\ncollections.abc.Mapping\nor\ncollections.abc.MutableMapping\nabstract base classes\n.  Examples\ninclude\ndict\n,\ncollections.defaultdict\n,\ncollections.OrderedDict\nand\ncollections.Counter\n.\nmeta path finder\n¶\nA\nfinder\nreturned by a search of\nsys.meta_path\n.  Meta path\nfinders are related to, but different from\npath entry finders\n.\nSee\nimportlib.abc.MetaPathFinder\nfor the methods that meta path\nfinders implement.\nmetaclass\n¶\nThe class of a class.  Class definitions create a class name, a class\ndictionary, and a list of base classes.  The metaclass is responsible for\ntaking those three arguments and creating the class.  Most object oriented\nprogramming languages provide a default implementation.  What makes Python\nspecial is that it is possible to create custom metaclasses.  Most users\nnever need this tool, but when the need arises, metaclasses can provide\npowerful, elegant solutions.  They have been used for logging attribute\naccess, adding thread-safety, tracking object creation, implementing\nsingletons, and many other tasks.\nMore information can be found in\nMetaclasses\n.\nmethod\n¶\nA function which is defined inside a class body.  If called as an attribute\nof an instance of that class, the method will get the instance object as\nits first\nargument\n(which is usually called\nself\n).\nSee\nfunction\nand\nnested scope\n.\nmethod resolution order\n¶\nMethod Resolution Order is the order in which base classes are searched\nfor a member during lookup. See\nThe Python 2.3 Method Resolution Order\nfor details of the\nalgorithm used by the Python interpreter since the 2.3 release.\nmodule\n¶\nAn object that serves as an organizational unit of Python code.  Modules\nhave a namespace containing arbitrary Python objects.  Modules are loaded\ninto Python by the process of\nimporting\n.\nSee also\npackage\n.\nmodule spec\n¶\nA namespace containing the import-related information used to load a\nmodule. An instance of\nimportlib.machinery.ModuleSpec\n.\nSee also\nModule specs\n.\nMRO\n¶\nSee\nmethod resolution order\n.\nmutable\n¶\nMutable objects can change their value but keep their\nid()\n.  See\nalso\nimmutable\n.\nnamed tuple\n¶\nThe term “named tuple” applies to any type or class that inherits from\ntuple and whose indexable elements are also accessible using named\nattributes.  The type or class may have other features as well.\nSeveral built-in types are named tuples, including the values returned\nby\ntime.localtime()\nand\nos.stat()\n.  Another example is\nsys.float_info\n:\n>>>\nsys\n.\nfloat_info\n[\n1\n]\n# indexed access\n1024\n>>>\nsys\n.\nfloat_info\n.\nmax_exp\n# named field access\n1024\n>>>\nisinstance\n(\nsys\n.\nfloat_info\n,\ntuple\n)\n# kind of tuple\nTrue\nSome named tuples are built-in types (such as the above examples).\nAlternatively, a named tuple can be created from a regular class\ndefinition that inherits from\ntuple\nand that defines named\nfields.  Such a class can be written by hand, or it can be created by\ninheriting\ntyping.NamedTuple\n, or with the factory function\ncollections.namedtuple()\n.  The latter techniques also add some\nextra methods that may not be found in hand-written or built-in named\ntuples.\nnamespace\n¶\nThe place where a variable is stored.  Namespaces are implemented as\ndictionaries.  There are the local, global and built-in namespaces as well\nas nested namespaces in objects (in methods).  Namespaces support\nmodularity by preventing naming conflicts.  For instance, the functions\nbuiltins.open\nand\nos.open()\nare distinguished by\ntheir namespaces.  Namespaces also aid readability and maintainability by\nmaking it clear which module implements a function.  For instance, writing\nrandom.seed()\nor\nitertools.islice()\nmakes it clear that those\nfunctions are implemented by the\nrandom\nand\nitertools\nmodules, respectively.\nnamespace package\n¶\nA\npackage\nwhich serves only as a container for subpackages.\nNamespace packages may have no physical representation,\nand specifically are not like a\nregular package\nbecause they\nhave no\n__init__.py\nfile.\nNamespace packages allow several individually installable packages to have a common parent package.\nOtherwise, it is recommended to use a\nregular package\n.\nFor more information, see\nPEP 420\nand\nNamespace packages\n.\nSee also\nmodule\n.\nnested scope\n¶\nThe ability to refer to a variable in an enclosing definition.  For\ninstance, a function defined inside another function can refer to\nvariables in the outer function.  Note that nested scopes by default work\nonly for reference and not for assignment.  Local variables both read and\nwrite in the innermost scope.  Likewise, global variables read and write\nto the global namespace.  The\nnonlocal\nallows writing to outer\nscopes.\nnew-style class\n¶\nOld name for the flavor of classes now used for all class objects.  In\nearlier Python versions, only new-style classes could use Python’s newer,\nversatile features like\n__slots__\n, descriptors,\nproperties,\n__getattribute__()\n, class methods, and static\nmethods.\nobject\n¶\nAny data with state (attributes or value) and defined behavior\n(methods).  Also the ultimate base class of any\nnew-style\nclass\n.\noptimized scope\n¶\nA scope where target local variable names are reliably known to the\ncompiler when the code is compiled, allowing optimization of read and\nwrite access to these names. The local namespaces for functions,\ngenerators, coroutines, comprehensions, and generator expressions are\noptimized in this fashion. Note: most interpreter optimizations are\napplied to all scopes, only those relying on a known set of local\nand nonlocal variable names are restricted to optimized scopes.\npackage\n¶\nA Python\nmodule\nwhich can contain submodules or recursively,\nsubpackages.  Technically, a package is a Python module with a\n__path__\nattribute.\nSee also\nregular package\nand\nnamespace package\n.\nparameter\n¶\nA named entity in a\nfunction\n(or method) definition that\nspecifies an\nargument\n(or in some cases, arguments) that the\nfunction can accept.  There are five kinds of parameter:\npositional-or-keyword\n: specifies an argument that can be passed\neither\npositionally\nor as a\nkeyword argument\n.  This is the default kind of parameter, for example\nfoo\nand\nbar\nin the following:\ndef\nfunc\n(\nfoo\n,\nbar\n=\nNone\n):\n...\npositional-only\n: specifies an argument that can be supplied only\nby position. Positional-only parameters can be defined by including a\n/\ncharacter in the parameter list of the function definition after\nthem, for example\nposonly1\nand\nposonly2\nin the following:\ndef\nfunc\n(\nposonly1\n,\nposonly2\n,\n/\n,\npositional_or_keyword\n):\n...\nkeyword-only\n: specifies an argument that can be supplied only\nby keyword.  Keyword-only parameters can be defined by including a\nsingle var-positional parameter or bare\n*\nin the parameter list\nof the function definition before them, for example\nkw_only1\nand\nkw_only2\nin the following:\ndef\nfunc\n(\narg\n,\n*\n,\nkw_only1\n,\nkw_only2\n):\n...\nvar-positional\n: specifies that an arbitrary sequence of\npositional arguments can be provided (in addition to any positional\narguments already accepted by other parameters).  Such a parameter can\nbe defined by prepending the parameter name with\n*\n, for example\nargs\nin the following:\ndef\nfunc\n(\n*\nargs\n,\n**\nkwargs\n):\n...\nvar-keyword\n: specifies that arbitrarily many keyword arguments\ncan be provided (in addition to any keyword arguments already accepted\nby other parameters).  Such a parameter can be defined by prepending\nthe parameter name with\n**\n, for example\nkwargs\nin the example\nabove.\nParameters can specify both optional and required arguments, as well as\ndefault values for some optional arguments.\nSee also the\nargument\nglossary entry, the FAQ question on\nthe difference between arguments and parameters\n, the\ninspect.Parameter\nclass, the\nFunction definitions\nsection, and\nPEP 362\n.\npath entry\n¶\nA single location on the\nimport path\nwhich the\npath\nbased finder\nconsults to find modules for importing.\npath entry finder\n¶\nA\nfinder\nreturned by a callable on\nsys.path_hooks\n(i.e. a\npath entry hook\n) which knows how to locate modules given\na\npath entry\n.\nSee\nimportlib.abc.PathEntryFinder\nfor the methods that path entry\nfinders implement.\npath entry hook\n¶\nA callable on the\nsys.path_hooks\nlist which returns a\npath\nentry finder\nif it knows how to find modules on a specific\npath\nentry\n.\npath based finder\n¶\nOne of the default\nmeta path finders\nwhich\nsearches an\nimport path\nfor modules.\npath-like object\n¶\nAn object representing a file system path. A path-like object is either\na\nstr\nor\nbytes\nobject representing a path, or an object\nimplementing the\nos.PathLike\nprotocol. An object that supports\nthe\nos.PathLike\nprotocol can be converted to a\nstr\nor\nbytes\nfile system path by calling the\nos.fspath()\nfunction;\nos.fsdecode()\nand\nos.fsencode()\ncan be used to guarantee a\nstr\nor\nbytes\nresult instead, respectively. Introduced\nby\nPEP 519\n.\nPEP\n¶\nPython Enhancement Proposal. A PEP is a design document\nproviding information to the Python community, or describing a new\nfeature for Python or its processes or environment. PEPs should\nprovide a concise technical specification and a rationale for proposed\nfeatures.\nPEPs are intended to be the primary mechanisms for proposing major new\nfeatures, for collecting community input on an issue, and for documenting\nthe design decisions that have gone into Python. The PEP author is\nresponsible for building consensus within the community and documenting\ndissenting opinions.\nSee\nPEP 1\n.\nportion\n¶\nA set of files in a single directory (possibly stored in a zip file)\nthat contribute to a namespace package, as defined in\nPEP 420\n.\npositional argument\n¶\nSee\nargument\n.\nprovisional API\n¶\nA provisional API is one which has been deliberately excluded from\nthe standard library’s backwards compatibility guarantees.  While major\nchanges to such interfaces are not expected, as long as they are marked\nprovisional, backwards incompatible changes (up to and including removal\nof the interface) may occur if deemed necessary by core developers.  Such\nchanges will not be made gratuitously – they will occur only if serious\nfundamental flaws are uncovered that were missed prior to the inclusion\nof the API.\nEven for provisional APIs, backwards incompatible changes are seen as\na “solution of last resort” - every attempt will still be made to find\na backwards compatible resolution to any identified problems.\nThis process allows the standard library to continue to evolve over\ntime, without locking in problematic design errors for extended periods\nof time.  See\nPEP 411\nfor more details.\nprovisional package\n¶\nSee\nprovisional API\n.\nPython 3000\n¶\nNickname for the Python 3.x release line (coined long ago when the\nrelease of version 3 was something in the distant future.)  This is also\nabbreviated “Py3k”.\nPythonic\n¶\nAn idea or piece of code which closely follows the most common idioms\nof the Python language, rather than implementing code using concepts\ncommon to other languages.  For example, a common idiom in Python is\nto loop over all elements of an iterable using a\nfor\nstatement.  Many other languages don’t have this type of construct, so\npeople unfamiliar with Python sometimes use a numerical counter instead:\nfor\ni\nin\nrange\n(\nlen\n(\nfood\n)):\nprint\n(\nfood\n[\ni\n])\nAs opposed to the cleaner, Pythonic method:\nfor\npiece\nin\nfood\n:\nprint\n(\npiece\n)\nqualified name\n¶\nA dotted name showing the “path” from a module’s global scope to a\nclass, function or method defined in that module, as defined in\nPEP 3155\n.  For top-level functions and classes, the qualified name\nis the same as the object’s name:\n>>>\nclass\nC\n:\n...\nclass\nD\n:\n...\ndef\nmeth\n(\nself\n):\n...\npass\n...\n>>>\nC\n.\n__qualname__\n'C'\n>>>\nC\n.\nD\n.\n__qualname__\n'C.D'\n>>>\nC\n.\nD\n.\nmeth\n.\n__qualname__\n'C.D.meth'\nWhen used to refer to modules, the\nfully qualified name\nmeans the\nentire dotted path to the module, including any parent packages,\ne.g.\nemail.mime.text\n:\n>>>\nimport\nemail.mime.text\n>>>\nemail\n.\nmime\n.\ntext\n.\n__name__\n'email.mime.text'\nreference count\n¶\nThe number of references to an object.  When the reference count of an\nobject drops to zero, it is deallocated.  Some objects are\nimmortal\nand have reference counts that are never modified, and\ntherefore the objects are never deallocated.  Reference counting is\ngenerally not visible to Python code, but it is a key element of the\nCPython\nimplementation.  Programmers can call the\nsys.getrefcount()\nfunction to return the\nreference count for a particular object.\nIn\nCPython\n, reference counts are not considered to be stable\nor well-defined values; the number of references to an object, and how\nthat number is affected by Python code, may be different between\nversions.\nregular package\n¶\nA traditional\npackage\n, such as a directory containing an\n__init__.py\nfile.\nSee also\nnamespace package\n.\nREPL\n¶\nAn acronym for the “read–eval–print loop”, another name for the\ninteractive\ninterpreter shell.\n__slots__\n¶\nA declaration inside a class that saves memory by pre-declaring space for\ninstance attributes and eliminating instance dictionaries.  Though\npopular, the technique is somewhat tricky to get right and is best\nreserved for rare cases where there are large numbers of instances in a\nmemory-critical application.\nsequence\n¶\nAn\niterable\nwhich supports efficient element access using integer\nindices via the\n__getitem__()\nspecial method and defines a\n__len__()\nmethod that returns the length of the sequence.\nSome built-in sequence types are\nlist\n,\nstr\n,\ntuple\n, and\nbytes\n. Note that\ndict\nalso\nsupports\n__getitem__()\nand\n__len__()\n, but is considered a\nmapping rather than a sequence because the lookups use arbitrary\nhashable\nkeys rather than integers.\nThe\ncollections.abc.Sequence\nabstract base class\ndefines a much richer interface that goes beyond just\n__getitem__()\nand\n__len__()\n, adding\ncount()\n,\nindex()\n,\n__contains__()\n, and\n__reversed__()\n. Types that implement this expanded\ninterface can be registered explicitly using\nregister()\n. For more documentation on sequence\nmethods generally, see\nCommon Sequence Operations\n.\nset comprehension\n¶\nA compact way to process all or part of the elements in an iterable and\nreturn a set with the results.\nresults\n=\n{c\nfor\nc\nin\n'abracadabra'\nif\nc\nnot\nin\n'abc'}\ngenerates the set of strings\n{'r',\n'd'}\n.  See\nDisplays for lists, sets and dictionaries\n.\nsingle dispatch\n¶\nA form of\ngeneric function\ndispatch where the implementation is\nchosen based on the type of a single argument.\nslice\n¶\nAn object usually containing a portion of a\nsequence\n.  A slice is\ncreated using the subscript notation,\n[]\nwith colons between numbers\nwhen several are given, such as in\nvariable_name[1:3:5]\n.  The bracket\n(subscript) notation uses\nslice\nobjects internally.\nsoft deprecated\n¶\nA soft deprecated API should not be used in new code,\nbut it is safe for already existing code to use it.\nThe API remains documented and tested, but will not be enhanced further.\nSoft deprecation, unlike normal deprecation, does not plan on removing the API\nand will not emit warnings.\nSee\nPEP 387: Soft Deprecation\n.\nspecial method\n¶\nA method that is called implicitly by Python to execute a certain\noperation on a type, such as addition.  Such methods have names starting\nand ending with double underscores.  Special methods are documented in\nSpecial method names\n.\nstandard library\n¶\nThe collection of\npackages\n,\nmodules\nand\nextension modules\ndistributed as a part\nof the official Python interpreter package.  The exact membership of the\ncollection may vary based on platform, available system libraries, or\nother criteria.  Documentation can be found at\nThe Python Standard Library\n.\nSee also\nsys.stdlib_module_names\nfor a list of all possible\nstandard library module names.\nstatement\n¶\nA statement is part of a suite (a “block” of code).  A statement is either\nan\nexpression\nor one of several constructs with a keyword, such\nas\nif\n,\nwhile\nor\nfor\n.\nstatic type checker\n¶\nAn external tool that reads Python code and analyzes it, looking for\nissues such as incorrect types. See also\ntype hints\nand the\ntyping\nmodule.\nstdlib\n¶\nAn abbreviation of\nstandard library\n.\nstrong reference\n¶\nIn Python’s C API, a strong reference is a reference to an object\nwhich is owned by the code holding the reference.  The strong\nreference is taken by calling\nPy_INCREF()\nwhen the\nreference is created and released with\nPy_DECREF()\nwhen the reference is deleted.\nThe\nPy_NewRef()\nfunction can be used to create a strong reference\nto an object. Usually, the\nPy_DECREF()\nfunction must be called on\nthe strong reference before exiting the scope of the strong reference, to\navoid leaking one reference.\nSee also\nborrowed reference\n.\ntext encoding\n¶\nA string in Python is a sequence of Unicode code points (in range\nU+0000\n–\nU+10FFFF\n). To store or transfer a string, it needs to be\nserialized as a sequence of bytes.\nSerializing a string into a sequence of bytes is known as “encoding”, and\nrecreating the string from the sequence of bytes is known as “decoding”.\nThere are a variety of different text serialization\ncodecs\n, which are collectively referred to as\n“text encodings”.\ntext file\n¶\nA\nfile object\nable to read and write\nstr\nobjects.\nOften, a text file actually accesses a byte-oriented datastream\nand handles the\ntext encoding\nautomatically.\nExamples of text files are files opened in text mode (\n'r'\nor\n'w'\n),\nsys.stdin\n,\nsys.stdout\n, and instances of\nio.StringIO\n.\nSee also\nbinary file\nfor a file object able to read and write\nbytes-like objects\n.\ntoken\n¶\nA small unit of source code, generated by the\nlexical analyzer\n(also called the\ntokenizer\n).\nNames, numbers, strings, operators,\nnewlines and similar are represented by tokens.\nThe\ntokenize\nmodule exposes Python’s lexical analyzer.\nThe\ntoken\nmodule contains information on the various types\nof tokens.\ntriple-quoted string\n¶\nA string which is bound by three instances of either a quotation mark\n(”) or an apostrophe (‘).  While they don’t provide any functionality\nnot available with single-quoted strings, they are useful for a number\nof reasons.  They allow you to include unescaped single and double\nquotes within a string and they can span multiple lines without the\nuse of the continuation character, making them especially useful when\nwriting docstrings.\ntype\n¶\nThe type of a Python object determines what kind of object it is; every\nobject has a type.  An object’s type is accessible as its\n__class__\nattribute or can be retrieved with\ntype(obj)\n.\ntype alias\n¶\nA synonym for a type, created by assigning the type to an identifier.\nType aliases are useful for simplifying\ntype hints\n.\nFor example:\ndef\nremove_gray_shades\n(\ncolors\n:\nlist\n[\ntuple\n[\nint\n,\nint\n,\nint\n]])\n->\nlist\n[\ntuple\n[\nint\n,\nint\n,\nint\n]]:\npass\ncould be made more readable like this:\nColor\n=\ntuple\n[\nint\n,\nint\n,\nint\n]\ndef\nremove_gray_shades\n(\ncolors\n:\nlist\n[\nColor\n])\n->\nlist\n[\nColor\n]:\npass\nSee\ntyping\nand\nPEP 484\n, which describe this functionality.\ntype hint\n¶\nAn\nannotation\nthat specifies the expected type for a variable, a class\nattribute, or a function parameter or return value.\nType hints are optional and are not enforced by Python but\nthey are useful to\nstatic type checkers\n.\nThey can also aid IDEs with code completion and refactoring.\nType hints of global variables, class attributes, and functions,\nbut not local variables, can be accessed using\ntyping.get_type_hints()\n.\nSee\ntyping\nand\nPEP 484\n, which describe this functionality.\nuniversal newlines\n¶\nA manner of interpreting text streams in which all of the following are\nrecognized as ending a line: the Unix end-of-line convention\n'\\n'\n,\nthe Windows convention\n'\\r\\n'\n, and the old Macintosh convention\n'\\r'\n.  See\nPEP 278\nand\nPEP 3116\n, as well as\nbytes.splitlines()\nfor an additional use.\nvariable annotation\n¶\nAn\nannotation\nof a variable or a class attribute.\nWhen annotating a variable or a class attribute, assignment is optional:\nclass\nC\n:\nfield\n:\n'annotation'\nVariable annotations are usually used for\ntype hints\n: for example this variable is expected to take\nint\nvalues:\ncount\n:\nint\n=\n0\nVariable annotation syntax is explained in section\nAnnotated assignment statements\n.\nSee\nfunction annotation\n,\nPEP 484\nand\nPEP 526\n, which describe this functionality.\nAlso see\nAnnotations Best Practices\nfor best practices on working with annotations.\nvirtual environment\n¶\nA cooperatively isolated runtime environment that allows Python users\nand applications to install and upgrade Python distribution packages\nwithout interfering with the behaviour of other Python applications\nrunning on the same system.\nSee also\nvenv\n.\nvirtual machine\n¶\nA computer defined entirely in software.  Python’s virtual machine\nexecutes the\nbytecode\nemitted by the bytecode compiler.\nZen of Python\n¶\nListing of Python design principles and philosophies that are helpful in\nunderstanding and using the language.  The listing can be found by typing\n“\nimport\nthis\n” at the interactive prompt.\nPrevious topic\nDeprecations\nNext topic\nAbout this documentation\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nGlossary\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/glossary.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12370.8296243
  },
  {
    "title": "Number Protocol¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython/C API Reference Manual\n»\nAbstract Objects Layer\n»\nNumber Protocol\n|\nTheme\nAuto\nLight\nDark\n|\nNumber Protocol\n¶\nint\nPyNumber_Check\n(\nPyObject\n*\no\n)\n¶\nPart of the\nStable ABI\n.\nReturns\n1\nif the object\no\nprovides numeric protocols, and false otherwise.\nThis function always succeeds.\nChanged in version 3.8:\nReturns\n1\nif\no\nis an index integer.\nPyObject\n*\nPyNumber_Add\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the result of adding\no1\nand\no2\n, or\nNULL\non failure.  This is the\nequivalent of the Python expression\no1\n+\no2\n.\nPyObject\n*\nPyNumber_Subtract\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the result of subtracting\no2\nfrom\no1\n, or\nNULL\non failure.  This is\nthe equivalent of the Python expression\no1\n-\no2\n.\nPyObject\n*\nPyNumber_Multiply\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the result of multiplying\no1\nand\no2\n, or\nNULL\non failure.  This is\nthe equivalent of the Python expression\no1\n*\no2\n.\nPyObject\n*\nPyNumber_MatrixMultiply\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\nsince version 3.7.\nReturns the result of matrix multiplication on\no1\nand\no2\n, or\nNULL\non\nfailure.  This is the equivalent of the Python expression\no1\n@\no2\n.\nAdded in version 3.5.\nPyObject\n*\nPyNumber_FloorDivide\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturn the floor of\no1\ndivided by\no2\n, or\nNULL\non failure.  This is\nthe equivalent of the Python expression\no1\n//\no2\n.\nPyObject\n*\nPyNumber_TrueDivide\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturn a reasonable approximation for the mathematical value of\no1\ndivided by\no2\n, or\nNULL\non failure.  The return value is “approximate” because binary\nfloating-point numbers are approximate; it is not possible to represent all real\nnumbers in base two.  This function can return a floating-point value when\npassed two integers.  This is the equivalent of the Python expression\no1\n/\no2\n.\nPyObject\n*\nPyNumber_Remainder\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the remainder of dividing\no1\nby\no2\n, or\nNULL\non failure.  This is\nthe equivalent of the Python expression\no1\n%\no2\n.\nPyObject\n*\nPyNumber_Divmod\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nSee the built-in function\ndivmod()\n. Returns\nNULL\non failure.  This is\nthe equivalent of the Python expression\ndivmod(o1,\no2)\n.\nPyObject\n*\nPyNumber_Power\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n,\nPyObject\n*\no3\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nSee the built-in function\npow()\n. Returns\nNULL\non failure.  This is the\nequivalent of the Python expression\npow(o1,\no2,\no3)\n, where\no3\nis optional.\nIf\no3\nis to be ignored, pass\nPy_None\nin its place (passing\nNULL\nfor\no3\nwould cause an illegal memory access).\nPyObject\n*\nPyNumber_Negative\n(\nPyObject\n*\no\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the negation of\no\non success, or\nNULL\non failure. This is the\nequivalent of the Python expression\n-o\n.\nPyObject\n*\nPyNumber_Positive\n(\nPyObject\n*\no\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns\no\non success, or\nNULL\non failure.  This is the equivalent of the\nPython expression\n+o\n.\nPyObject\n*\nPyNumber_Absolute\n(\nPyObject\n*\no\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the absolute value of\no\n, or\nNULL\non failure.  This is the equivalent\nof the Python expression\nabs(o)\n.\nPyObject\n*\nPyNumber_Invert\n(\nPyObject\n*\no\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the bitwise negation of\no\non success, or\nNULL\non failure.  This is\nthe equivalent of the Python expression\n~o\n.\nPyObject\n*\nPyNumber_Lshift\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the result of left shifting\no1\nby\no2\non success, or\nNULL\non\nfailure.  This is the equivalent of the Python expression\no1\n<<\no2\n.\nPyObject\n*\nPyNumber_Rshift\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the result of right shifting\no1\nby\no2\non success, or\nNULL\non\nfailure.  This is the equivalent of the Python expression\no1\n>>\no2\n.\nPyObject\n*\nPyNumber_And\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the “bitwise and” of\no1\nand\no2\non success and\nNULL\non failure.\nThis is the equivalent of the Python expression\no1\n&\no2\n.\nPyObject\n*\nPyNumber_Xor\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the “bitwise exclusive or” of\no1\nby\no2\non success, or\nNULL\non\nfailure.  This is the equivalent of the Python expression\no1\n^\no2\n.\nPyObject\n*\nPyNumber_Or\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the “bitwise or” of\no1\nand\no2\non success, or\nNULL\non failure.\nThis is the equivalent of the Python expression\no1\n|\no2\n.\nPyObject\n*\nPyNumber_InPlaceAdd\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the result of adding\no1\nand\no2\n, or\nNULL\non failure.  The operation\nis done\nin-place\nwhen\no1\nsupports it.  This is the equivalent of the Python\nstatement\no1\n+=\no2\n.\nPyObject\n*\nPyNumber_InPlaceSubtract\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the result of subtracting\no2\nfrom\no1\n, or\nNULL\non failure.  The\noperation is done\nin-place\nwhen\no1\nsupports it.  This is the equivalent of\nthe Python statement\no1\n-=\no2\n.\nPyObject\n*\nPyNumber_InPlaceMultiply\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the result of multiplying\no1\nand\no2\n, or\nNULL\non failure.  The\noperation is done\nin-place\nwhen\no1\nsupports it.  This is the equivalent of\nthe Python statement\no1\n*=\no2\n.\nPyObject\n*\nPyNumber_InPlaceMatrixMultiply\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\nsince version 3.7.\nReturns the result of matrix multiplication on\no1\nand\no2\n, or\nNULL\non\nfailure.  The operation is done\nin-place\nwhen\no1\nsupports it.  This is\nthe equivalent of the Python statement\no1\n@=\no2\n.\nAdded in version 3.5.\nPyObject\n*\nPyNumber_InPlaceFloorDivide\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the mathematical floor of dividing\no1\nby\no2\n, or\nNULL\non failure.\nThe operation is done\nin-place\nwhen\no1\nsupports it.  This is the equivalent\nof the Python statement\no1\n//=\no2\n.\nPyObject\n*\nPyNumber_InPlaceTrueDivide\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturn a reasonable approximation for the mathematical value of\no1\ndivided by\no2\n, or\nNULL\non failure.  The return value is “approximate” because binary\nfloating-point numbers are approximate; it is not possible to represent all real\nnumbers in base two.  This function can return a floating-point value when\npassed two integers.  The operation is done\nin-place\nwhen\no1\nsupports it.\nThis is the equivalent of the Python statement\no1\n/=\no2\n.\nPyObject\n*\nPyNumber_InPlaceRemainder\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the remainder of dividing\no1\nby\no2\n, or\nNULL\non failure.  The\noperation is done\nin-place\nwhen\no1\nsupports it.  This is the equivalent of\nthe Python statement\no1\n%=\no2\n.\nPyObject\n*\nPyNumber_InPlacePower\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n,\nPyObject\n*\no3\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nSee the built-in function\npow()\n. Returns\nNULL\non failure.  The operation\nis done\nin-place\nwhen\no1\nsupports it.  This is the equivalent of the Python\nstatement\no1\n**=\no2\nwhen o3 is\nPy_None\n, or an in-place variant of\npow(o1,\no2,\no3)\notherwise. If\no3\nis to be ignored, pass\nPy_None\nin its place (passing\nNULL\nfor\no3\nwould cause an illegal memory access).\nPyObject\n*\nPyNumber_InPlaceLshift\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the result of left shifting\no1\nby\no2\non success, or\nNULL\non\nfailure.  The operation is done\nin-place\nwhen\no1\nsupports it.  This is the\nequivalent of the Python statement\no1\n<<=\no2\n.\nPyObject\n*\nPyNumber_InPlaceRshift\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the result of right shifting\no1\nby\no2\non success, or\nNULL\non\nfailure.  The operation is done\nin-place\nwhen\no1\nsupports it.  This is the\nequivalent of the Python statement\no1\n>>=\no2\n.\nPyObject\n*\nPyNumber_InPlaceAnd\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the “bitwise and” of\no1\nand\no2\non success and\nNULL\non failure. The\noperation is done\nin-place\nwhen\no1\nsupports it.  This is the equivalent of\nthe Python statement\no1\n&=\no2\n.\nPyObject\n*\nPyNumber_InPlaceXor\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the “bitwise exclusive or” of\no1\nby\no2\non success, or\nNULL\non\nfailure.  The operation is done\nin-place\nwhen\no1\nsupports it.  This is the\nequivalent of the Python statement\no1\n^=\no2\n.\nPyObject\n*\nPyNumber_InPlaceOr\n(\nPyObject\n*\no1\n,\nPyObject\n*\no2\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the “bitwise or” of\no1\nand\no2\non success, or\nNULL\non failure.  The\noperation is done\nin-place\nwhen\no1\nsupports it.  This is the equivalent of\nthe Python statement\no1\n|=\no2\n.\nPyObject\n*\nPyNumber_Long\n(\nPyObject\n*\no\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the\no\nconverted to an integer object on success, or\nNULL\non\nfailure.  This is the equivalent of the Python expression\nint(o)\n.\nPyObject\n*\nPyNumber_Float\n(\nPyObject\n*\no\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the\no\nconverted to a float object on success, or\nNULL\non failure.\nThis is the equivalent of the Python expression\nfloat(o)\n.\nPyObject\n*\nPyNumber_Index\n(\nPyObject\n*\no\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the\no\nconverted to a Python int on success or\nNULL\nwith a\nTypeError\nexception raised on failure.\nChanged in version 3.10:\nThe result always has exact type\nint\n.  Previously, the result\ncould have been an instance of a subclass of\nint\n.\nPyObject\n*\nPyNumber_ToBase\n(\nPyObject\n*\nn\n,\nint\nbase\n)\n¶\nReturn value: New reference.\nPart of the\nStable ABI\n.\nReturns the integer\nn\nconverted to base\nbase\nas a string.  The\nbase\nargument must be one of 2, 8, 10, or 16.  For base 2, 8, or 16, the\nreturned string is prefixed with a base marker of\n'0b'\n,\n'0o'\n, or\n'0x'\n, respectively.  If\nn\nis not a Python int, it is converted with\nPyNumber_Index()\nfirst.\nPy_ssize_t\nPyNumber_AsSsize_t\n(\nPyObject\n*\no\n,\nPyObject\n*\nexc\n)\n¶\nPart of the\nStable ABI\n.\nReturns\no\nconverted to a\nPy_ssize_t\nvalue if\no\ncan be interpreted as an\ninteger.  If the call fails, an exception is raised and\n-1\nis returned.\nIf\no\ncan be converted to a Python int but the attempt to\nconvert to a\nPy_ssize_t\nvalue would raise an\nOverflowError\n, then the\nexc\nargument is the type of exception that will be raised (usually\nIndexError\nor\nOverflowError\n).  If\nexc\nis\nNULL\n, then the\nexception is cleared and the value is clipped to\nPY_SSIZE_T_MIN\nfor a negative\ninteger or\nPY_SSIZE_T_MAX\nfor a positive integer.\nint\nPyIndex_Check\n(\nPyObject\n*\no\n)\n¶\nPart of the\nStable ABI\nsince version 3.8.\nReturns\n1\nif\no\nis an index integer (has the\nnb_index\nslot of the\ntp_as_number\nstructure filled in), and\n0\notherwise.\nThis function always succeeds.\nPrevious topic\nCall Protocol\nNext topic\nSequence Protocol\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython/C API Reference Manual\n»\nAbstract Objects Layer\n»\nNumber Protocol\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/c-api/number.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12371.2174239
  },
  {
    "title": "importlib.resources – Package resource reading, opening and access¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nImporting Modules\n»\nimportlib.resources\n– Package resource reading, opening and access\n|\nTheme\nAuto\nLight\nDark\n|\nimportlib.resources\n– Package resource reading, opening and access\n¶\nSource code:\nLib/importlib/resources/__init__.py\nAdded in version 3.7.\nThis module leverages Python’s import system to provide access to\nresources\nwithin\npackages\n.\n“Resources” are file-like resources associated with a module or package in\nPython. The resources may be contained directly in a package, within a\nsubdirectory contained in that package, or adjacent to modules outside a\npackage. Resources may be text or binary. As a result, a package’s Python\nmodule sources (.py), compilation artifacts (pycache), and installation\nartifacts (like\nreserved\nfilenames\nin directories) are technically de-facto resources of that package.\nIn practice, however, resources are primarily those non-Python artifacts\nexposed specifically by the package author.\nResources can be opened or read in either binary or text mode.\nResources are roughly akin to files inside directories, though it’s important\nto keep in mind that this is just a metaphor.  Resources and packages\ndo\nnot\nhave to exist as physical files and directories on the file system:\nfor example, a package and its resources can be imported from a zip file using\nzipimport\n.\nNote\nThis module provides functionality similar to\npkg_resources\nBasic\nResource Access\nwithout the performance overhead of that package.  This makes reading\nresources included in packages easier, with more stable and consistent\nsemantics.\nThe standalone backport of this module provides more information\non\nusing importlib.resources\nand\nmigrating from pkg_resources to importlib.resources\n.\nLoaders\nthat wish to support resource reading should implement a\nget_resource_reader(fullname)\nmethod as specified by\nimportlib.resources.abc.ResourceReader\n.\nclass\nimportlib.resources.\nAnchor\n¶\nRepresents an anchor for resources, either a\nmodule\nobject\nor a module name as a string. Defined as\nUnion[str,\nModuleType]\n.\nimportlib.resources.\nfiles\n(\nanchor\n:\nAnchor\n|\nNone\n=\nNone\n)\n¶\nReturns a\nTraversable\nobject\nrepresenting the resource container (think directory) and its resources\n(think files). A Traversable may contain other containers (think\nsubdirectories).\nanchor\nis an optional\nAnchor\n. If the anchor is a\npackage, resources are resolved from that package. If a module,\nresources are resolved adjacent to that module (in the same package\nor the package root). If the anchor is omitted, the caller’s module\nis used.\nAdded in version 3.9.\nChanged in version 3.12:\npackage\nparameter was renamed to\nanchor\n.\nanchor\ncan now\nbe a non-package module and if omitted will default to the caller’s\nmodule.\npackage\nis still accepted for compatibility but will raise\na\nDeprecationWarning\n. Consider passing the anchor positionally or\nusing\nimportlib_resources\n>=\n5.10\nfor a compatible interface\non older Pythons.\nimportlib.resources.\nas_file\n(\ntraversable\n)\n¶\nGiven a\nTraversable\nobject representing\na file or directory, typically from\nimportlib.resources.files()\n,\nreturn a context manager for use in a\nwith\nstatement.\nThe context manager provides a\npathlib.Path\nobject.\nExiting the context manager cleans up any temporary file or directory\ncreated when the resource was extracted from e.g. a zip file.\nUse\nas_file\nwhen the Traversable methods\n(\nread_text\n, etc) are insufficient and an actual file or directory on\nthe file system is required.\nAdded in version 3.9.\nChanged in version 3.12:\nAdded support for\ntraversable\nrepresenting a directory.\nFunctional API\n¶\nA set of simplified, backwards-compatible helpers is available.\nThese allow common operations in a single function call.\nFor all the following functions:\nanchor\nis an\nAnchor\n,\nas in\nfiles()\n.\nUnlike in\nfiles\n, it may not be omitted.\npath_names\nare components of a resource’s path name, relative to\nthe anchor.\nFor example, to get the text of resource named\ninfo.txt\n, use:\nimportlib\n.\nresources\n.\nread_text\n(\nmy_module\n,\n\"info.txt\"\n)\nLike\nTraversable.joinpath\n,\nThe individual components should use forward slashes (\n/\n)\nas path separators.\nFor example, the following are equivalent:\nimportlib\n.\nresources\n.\nread_binary\n(\nmy_module\n,\n\"pics/painting.png\"\n)\nimportlib\n.\nresources\n.\nread_binary\n(\nmy_module\n,\n\"pics\"\n,\n\"painting.png\"\n)\nFor backward compatibility reasons, functions that read text require\nan explicit\nencoding\nargument if multiple\npath_names\nare given.\nFor example, to get the text of\ninfo/chapter1.txt\n, use:\nimportlib\n.\nresources\n.\nread_text\n(\nmy_module\n,\n\"info\"\n,\n\"chapter1.txt\"\n,\nencoding\n=\n'utf-8'\n)\nimportlib.resources.\nopen_binary\n(\nanchor\n,\n*\npath_names\n)\n¶\nOpen the named resource for binary reading.\nSee\nthe introduction\nfor\ndetails on\nanchor\nand\npath_names\n.\nThis function returns a\nBinaryIO\nobject,\nthat is, a binary stream open for reading.\nThis function is roughly equivalent to:\nfiles\n(\nanchor\n)\n.\njoinpath\n(\n*\npath_names\n)\n.\nopen\n(\n'rb'\n)\nChanged in version 3.13:\nMultiple\npath_names\nare accepted.\nimportlib.resources.\nopen_text\n(\nanchor\n,\n*\npath_names\n,\nencoding\n=\n'utf-8'\n,\nerrors\n=\n'strict'\n)\n¶\nOpen the named resource for text reading.\nBy default, the contents are read as strict UTF-8.\nSee\nthe introduction\nfor\ndetails on\nanchor\nand\npath_names\n.\nencoding\nand\nerrors\nhave the same meaning as in built-in\nopen()\n.\nFor backward compatibility reasons, the\nencoding\nargument must be given\nexplicitly if there are multiple\npath_names\n.\nThis limitation is scheduled to be removed in Python 3.15.\nThis function returns a\nTextIO\nobject,\nthat is, a text stream open for reading.\nThis function is roughly equivalent to:\nfiles\n(\nanchor\n)\n.\njoinpath\n(\n*\npath_names\n)\n.\nopen\n(\n'r'\n,\nencoding\n=\nencoding\n)\nChanged in version 3.13:\nMultiple\npath_names\nare accepted.\nencoding\nand\nerrors\nmust be given as keyword arguments.\nimportlib.resources.\nread_binary\n(\nanchor\n,\n*\npath_names\n)\n¶\nRead and return the contents of the named resource as\nbytes\n.\nSee\nthe introduction\nfor\ndetails on\nanchor\nand\npath_names\n.\nThis function is roughly equivalent to:\nfiles\n(\nanchor\n)\n.\njoinpath\n(\n*\npath_names\n)\n.\nread_bytes\n()\nChanged in version 3.13:\nMultiple\npath_names\nare accepted.\nimportlib.resources.\nread_text\n(\nanchor\n,\n*\npath_names\n,\nencoding\n=\n'utf-8'\n,\nerrors\n=\n'strict'\n)\n¶\nRead and return the contents of the named resource as\nstr\n.\nBy default, the contents are read as strict UTF-8.\nSee\nthe introduction\nfor\ndetails on\nanchor\nand\npath_names\n.\nencoding\nand\nerrors\nhave the same meaning as in built-in\nopen()\n.\nFor backward compatibility reasons, the\nencoding\nargument must be given\nexplicitly if there are multiple\npath_names\n.\nThis limitation is scheduled to be removed in Python 3.15.\nThis function is roughly equivalent to:\nfiles\n(\nanchor\n)\n.\njoinpath\n(\n*\npath_names\n)\n.\nread_text\n(\nencoding\n=\nencoding\n)\nChanged in version 3.13:\nMultiple\npath_names\nare accepted.\nencoding\nand\nerrors\nmust be given as keyword arguments.\nimportlib.resources.\npath\n(\nanchor\n,\n*\npath_names\n)\n¶\nProvides the path to the\nresource\nas an actual file system path.  This\nfunction returns a context manager for use in a\nwith\nstatement.\nThe context manager provides a\npathlib.Path\nobject.\nExiting the context manager cleans up any temporary files created, e.g.\nwhen the resource needs to be extracted from a zip file.\nFor example, the\nstat()\nmethod requires\nan actual file system path; it can be used like this:\nwith\nimportlib\n.\nresources\n.\npath\n(\nanchor\n,\n\"resource.txt\"\n)\nas\nfspath\n:\nresult\n=\nfspath\n.\nstat\n()\nSee\nthe introduction\nfor\ndetails on\nanchor\nand\npath_names\n.\nThis function is roughly equivalent to:\nas_file\n(\nfiles\n(\nanchor\n)\n.\njoinpath\n(\n*\npath_names\n))\nChanged in version 3.13:\nMultiple\npath_names\nare accepted.\nencoding\nand\nerrors\nmust be given as keyword arguments.\nimportlib.resources.\nis_resource\n(\nanchor\n,\n*\npath_names\n)\n¶\nReturn\nTrue\nif the named resource exists, otherwise\nFalse\n.\nThis function does not consider directories to be resources.\nSee\nthe introduction\nfor\ndetails on\nanchor\nand\npath_names\n.\nThis function is roughly equivalent to:\nfiles\n(\nanchor\n)\n.\njoinpath\n(\n*\npath_names\n)\n.\nis_file\n()\nChanged in version 3.13:\nMultiple\npath_names\nare accepted.\nimportlib.resources.\ncontents\n(\nanchor\n,\n*\npath_names\n)\n¶\nReturn an iterable over the named items within the package or path.\nThe iterable returns names of resources (e.g. files) and non-resources\n(e.g. directories) as\nstr\n.\nThe iterable does not recurse into subdirectories.\nSee\nthe introduction\nfor\ndetails on\nanchor\nand\npath_names\n.\nThis function is roughly equivalent to:\nfor\nresource\nin\nfiles\n(\nanchor\n)\n.\njoinpath\n(\n*\npath_names\n)\n.\niterdir\n():\nyield\nresource\n.\nname\nDeprecated since version 3.11:\nPrefer\niterdir()\nas above, which offers more control over the\nresults and richer functionality.\nTable of Contents\nimportlib.resources\n– Package resource reading, opening and access\nFunctional API\nPrevious topic\nimportlib\n— The implementation of\nimport\nNext topic\nimportlib.resources.abc\n– Abstract base classes for resources\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nImporting Modules\n»\nimportlib.resources\n– Package resource reading, opening and access\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/importlib.resources.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12371.4900117
  },
  {
    "title": "copyreg — Register pickle support functions¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nData Persistence\n»\ncopyreg\n— Register\npickle\nsupport functions\n|\nTheme\nAuto\nLight\nDark\n|\ncopyreg\n— Register\npickle\nsupport functions\n¶\nSource code:\nLib/copyreg.py\nThe\ncopyreg\nmodule offers a way to define functions used while pickling\nspecific objects.  The\npickle\nand\ncopy\nmodules use those functions\nwhen pickling/copying those objects.  The module provides configuration\ninformation about object constructors which are not classes.\nSuch constructors may be factory functions or class instances.\ncopyreg.\nconstructor\n(\nobject\n)\n¶\nDeclares\nobject\nto be a valid constructor.  If\nobject\nis not callable (and\nhence not valid as a constructor), raises\nTypeError\n.\ncopyreg.\npickle\n(\ntype\n,\nfunction\n,\nconstructor_ob\n=\nNone\n)\n¶\nDeclares that\nfunction\nshould be used as a “reduction” function for objects\nof type\ntype\n.\nfunction\nmust return either a string or a tuple\ncontaining between two and six elements. See the\ndispatch_table\nfor more details on the interface of\nfunction\n.\nThe\nconstructor_ob\nparameter is a legacy feature and is now ignored, but if\npassed it must be a callable.\nNote that the\ndispatch_table\nattribute of a pickler\nobject or subclass of\npickle.Pickler\ncan also be used for\ndeclaring reduction functions.\nExample\n¶\nThe example below would like to show how to register a pickle function and how\nit will be used:\n>>>\nimport\ncopyreg\n,\ncopy\n,\npickle\n>>>\nclass\nC\n:\n...\ndef\n__init__\n(\nself\n,\na\n):\n...\nself\n.\na\n=\na\n...\n>>>\ndef\npickle_c\n(\nc\n):\n...\nprint\n(\n\"pickling a C instance...\"\n)\n...\nreturn\nC\n,\n(\nc\n.\na\n,)\n...\n>>>\ncopyreg\n.\npickle\n(\nC\n,\npickle_c\n)\n>>>\nc\n=\nC\n(\n1\n)\n>>>\nd\n=\ncopy\n.\ncopy\n(\nc\n)\npickling a C instance...\n>>>\np\n=\npickle\n.\ndumps\n(\nc\n)\npickling a C instance...\nTable of Contents\ncopyreg\n— Register\npickle\nsupport functions\nExample\nPrevious topic\npickle\n— Python object serialization\nNext topic\nshelve\n— Python object persistence\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nData Persistence\n»\ncopyreg\n— Register\npickle\nsupport functions\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/library/copyreg.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12371.678058
  },
  {
    "title": "Deprecations¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nDeprecations\n|\nTheme\nAuto\nLight\nDark\n|\nDeprecations\n¶\nPending Removal in Python 3.14\n¶\nargparse\n: The\ntype\n,\nchoices\n, and\nmetavar\nparameters\nof\nargparse.BooleanOptionalAction\nare deprecated\nand will be removed in 3.14.\n(Contributed by Nikita Sobolev in\ngh-92248\n.)\nast\n: The following features have been deprecated in documentation\nsince Python 3.8, now cause a\nDeprecationWarning\nto be emitted at\nruntime when they are accessed or used, and will be removed in Python 3.14:\nast.Num\nast.Str\nast.Bytes\nast.NameConstant\nast.Ellipsis\nUse\nast.Constant\ninstead.\n(Contributed by Serhiy Storchaka in\ngh-90953\n.)\nasyncio\n:\nThe child watcher classes\nMultiLoopChildWatcher\n,\nFastChildWatcher\n,\nAbstractChildWatcher\nand\nSafeChildWatcher\nare deprecated and\nwill be removed in Python 3.14.\n(Contributed by Kumar Aditya in\ngh-94597\n.)\nasyncio.set_child_watcher()\n,\nasyncio.get_child_watcher()\n,\nasyncio.AbstractEventLoopPolicy.set_child_watcher()\nand\nasyncio.AbstractEventLoopPolicy.get_child_watcher()\nare deprecated\nand will be removed in Python 3.14.\n(Contributed by Kumar Aditya in\ngh-94597\n.)\nThe\nget_event_loop()\nmethod of the\ndefault event loop policy now emits a\nDeprecationWarning\nif there\nis no current event loop set and it decides to create one.\n(Contributed by Serhiy Storchaka and Guido van Rossum in\ngh-100160\n.)\ncollections.abc\n: Deprecated\nByteString\n.\nPrefer\nSequence\nor\nBuffer\n.\nFor use in typing, prefer a union, like\nbytes\n|\nbytearray\n,\nor\ncollections.abc.Buffer\n.\n(Contributed by Shantanu Jain in\ngh-91896\n.)\nemail\n: Deprecated the\nisdst\nparameter in\nemail.utils.localtime()\n.\n(Contributed by Alan Williams in\ngh-72346\n.)\nimportlib.abc\ndeprecated classes:\nimportlib.abc.ResourceReader\nimportlib.abc.Traversable\nimportlib.abc.TraversableResources\nUse\nimportlib.resources.abc\nclasses instead:\nimportlib.resources.abc.Traversable\nimportlib.resources.abc.TraversableResources\n(Contributed by Jason R. Coombs and Hugo van Kemenade in\ngh-93963\n.)\nitertools\nhad undocumented, inefficient, historically buggy,\nand inconsistent support for copy, deepcopy, and pickle operations.\nThis will be removed in 3.14 for a significant reduction in code\nvolume and maintenance burden.\n(Contributed by Raymond Hettinger in\ngh-101588\n.)\nmultiprocessing\n: The default start method will change to a safer one on\nLinux, BSDs, and other non-macOS POSIX platforms where\n'fork'\nis currently\nthe default (\ngh-84559\n). Adding a runtime warning about this was deemed too\ndisruptive as the majority of code is not expected to care. Use the\nget_context()\nor\nset_start_method()\nAPIs to explicitly specify when\nyour code\nrequires\n'fork'\n.  See\nContexts and start methods\n.\npathlib\n:\nis_relative_to()\nand\nrelative_to()\n: passing additional arguments is\ndeprecated.\npkgutil\n:\nfind_loader()\nand\nget_loader()\nnow raise\nDeprecationWarning\n;\nuse\nimportlib.util.find_spec()\ninstead.\n(Contributed by Nikita Sobolev in\ngh-97850\n.)\npty\n:\nmaster_open()\n: use\npty.openpty()\n.\nslave_open()\n: use\npty.openpty()\n.\nsqlite3\n:\nversion\nand\nversion_info\n.\nexecute()\nand\nexecutemany()\nif\nnamed placeholders\nare used and\nparameters\nis a sequence instead of a\ndict\n.\ntyping\n:\nByteString\n, deprecated since Python 3.9,\nnow causes a\nDeprecationWarning\nto be emitted when it is used.\nurllib\n:\nurllib.parse.Quoter\nis deprecated: it was not intended to be a\npublic API.\n(Contributed by Gregory P. Smith in\ngh-88168\n.)\nPending Removal in Python 3.15\n¶\nThe import system:\nSetting\n__cached__\non a module while\nfailing to set\n__spec__.cached\nis deprecated. In Python 3.15,\n__cached__\nwill cease to be set or\ntake into consideration by the import system or standard library. (\ngh-97879\n)\nSetting\n__package__\non a module while\nfailing to set\n__spec__.parent\nis deprecated. In Python 3.15,\n__package__\nwill cease to be set or\ntake into consideration by the import system or standard library. (\ngh-97879\n)\nctypes\n:\nThe undocumented\nctypes.SetPointerType()\nfunction\nhas been deprecated since Python 3.13.\nhttp.server\n:\nThe obsolete and rarely used\nCGIHTTPRequestHandler\nhas been deprecated since Python 3.13.\nNo direct replacement exists.\nAnything\nis better than CGI to interface\na web server with a request handler.\nThe\n--cgi\nflag to the\npython -m http.server\ncommand-line interface has been deprecated since Python 3.13.\nimportlib\n:\nload_module()\nmethod: use\nexec_module()\ninstead.\nlocale\n:\nThe\ngetdefaultlocale()\nfunction\nhas been deprecated since Python 3.11.\nIts removal was originally planned for Python 3.13 (\ngh-90817\n),\nbut has been postponed to Python 3.15.\nUse\ngetlocale()\n,\nsetlocale()\n,\nand\ngetencoding()\ninstead.\n(Contributed by Hugo van Kemenade in\ngh-111187\n.)\npathlib\n:\nPurePath.is_reserved()\nhas been deprecated since Python 3.13.\nUse\nos.path.isreserved()\nto detect reserved paths on Windows.\nplatform\n:\njava_ver()\nhas been deprecated since Python 3.13.\nThis function is only useful for Jython support, has a confusing API,\nand is largely untested.\nsysconfig\n:\nThe\ncheck_home\nargument of\nsysconfig.is_python_build()\nhas been\ndeprecated since Python 3.12.\nthreading\n:\nRLock()\nwill take no arguments in Python 3.15.\nPassing any arguments has been deprecated since Python 3.14,\nas the  Python version does not permit any arguments,\nbut the C version allows any number of positional or keyword arguments,\nignoring every argument.\ntypes\n:\ntypes.CodeType\n: Accessing\nco_lnotab\nwas\ndeprecated in\nPEP 626\nsince 3.10 and was planned to be removed in 3.12,\nbut it only got a proper\nDeprecationWarning\nin 3.12.\nMay be removed in 3.15.\n(Contributed by Nikita Sobolev in\ngh-101866\n.)\ntyping\n:\nThe undocumented keyword argument syntax for creating\nNamedTuple\nclasses\n(e.g.\nPoint\n=\nNamedTuple(\"Point\",\nx=int,\ny=int)\n)\nhas been deprecated since Python 3.13.\nUse the class-based syntax or the functional syntax instead.\nWhen using the functional syntax of\nTypedDict\ns, failing\nto pass a value to the\nfields\nparameter (\nTD\n=\nTypedDict(\"TD\")\n) or\npassing\nNone\n(\nTD\n=\nTypedDict(\"TD\",\nNone)\n) has been deprecated\nsince Python 3.13.\nUse\nclass\nTD(TypedDict):\npass\nor\nTD\n=\nTypedDict(\"TD\",\n{})\nto create a TypedDict with zero field.\nThe\ntyping.no_type_check_decorator()\ndecorator function\nhas been deprecated since Python 3.13.\nAfter eight years in the\ntyping\nmodule,\nit has yet to be supported by any major type checker.\nwave\n:\nThe\ngetmark()\n,\nsetmark()\n,\nand\ngetmarkers()\nmethods of\nthe\nWave_read\nand\nWave_write\nclasses\nhave been deprecated since Python 3.13.\nPending removal in Python 3.16\n¶\nThe import system:\nSetting\n__loader__\non a module while\nfailing to set\n__spec__.loader\nis deprecated. In Python 3.16,\n__loader__\nwill cease to be set or\ntaken into consideration by the import system or the standard library.\narray\n:\nThe\n'u'\nformat code (\nwchar_t\n)\nhas been deprecated in documentation since Python 3.3\nand at runtime since Python 3.13.\nUse the\n'w'\nformat code (\nPy_UCS4\n)\nfor Unicode characters instead.\nasyncio\n:\nasyncio.iscoroutinefunction()\nis deprecated\nand will be removed in Python 3.16,\nuse\ninspect.iscoroutinefunction()\ninstead.\n(Contributed by Jiahao Li and Kumar Aditya in\ngh-122875\n.)\nbuiltins\n:\nBitwise inversion on boolean types,\n~True\nor\n~False\nhas been deprecated since Python 3.12,\nas it produces surprising and unintuitive results (\n-2\nand\n-1\n).\nUse\nnot\nx\ninstead for the logical negation of a Boolean.\nIn the rare case that you need the bitwise inversion of\nthe underlying integer, convert to\nint\nexplicitly (\n~int(x)\n).\nshutil\n:\nThe\nExecError\nexception\nhas been deprecated since Python 3.14.\nIt has not been used by any function in\nshutil\nsince Python 3.4,\nand is now an alias of\nRuntimeError\n.\nsymtable\n:\nThe\nClass.get_methods\nmethod\nhas been deprecated since Python 3.14.\nsys\n:\nThe\n_enablelegacywindowsfsencoding()\nfunction\nhas been deprecated since Python 3.13.\nUse the\nPYTHONLEGACYWINDOWSFSENCODING\nenvironment variable instead.\ntarfile\n:\nThe undocumented and unused\nTarFile.tarfile\nattribute\nhas been deprecated since Python 3.13.\nPending Removal in Future Versions\n¶\nThe following APIs will be removed in the future,\nalthough there is currently no date scheduled for their removal.\nargparse\n: Nesting argument groups and nesting mutually exclusive\ngroups are deprecated.\nbuiltins\n:\nbool(NotImplemented)\n.\nGenerators:\nthrow(type,\nexc,\ntb)\nand\nathrow(type,\nexc,\ntb)\nsignature is deprecated: use\nthrow(exc)\nand\nathrow(exc)\ninstead,\nthe single argument signature.\nCurrently Python accepts numeric literals immediately followed by keywords,\nfor example\n0in\nx\n,\n1or\nx\n,\n0if\n1else\n2\n.  It allows confusing and\nambiguous expressions like\n[0x1for\nx\nin\ny]\n(which can be interpreted as\n[0x1\nfor\nx\nin\ny]\nor\n[0x1f\nor\nx\nin\ny]\n).  A syntax warning is raised\nif the numeric literal is immediately followed by one of keywords\nand\n,\nelse\n,\nfor\n,\nif\n,\nin\n,\nis\nand\nor\n.  In a future release it\nwill be changed to a syntax error. (\ngh-87999\n)\nSupport for\n__index__()\nand\n__int__()\nmethod returning non-int type:\nthese methods will be required to return an instance of a strict subclass of\nint\n.\nSupport for\n__float__()\nmethod returning a strict subclass of\nfloat\n: these methods will be required to return an instance of\nfloat\n.\nSupport for\n__complex__()\nmethod returning a strict subclass of\ncomplex\n: these methods will be required to return an instance of\ncomplex\n.\nDelegation of\nint()\nto\n__trunc__()\nmethod.\nPassing a complex number as the\nreal\nor\nimag\nargument in the\ncomplex()\nconstructor is now deprecated; it should only be passed\nas a single positional argument.\n(Contributed by Serhiy Storchaka in\ngh-109218\n.)\ncalendar\n:\ncalendar.January\nand\ncalendar.February\nconstants are\ndeprecated and replaced by\ncalendar.JANUARY\nand\ncalendar.FEBRUARY\n.\n(Contributed by Prince Roshan in\ngh-103636\n.)\ncodeobject.co_lnotab\n: use the\ncodeobject.co_lines()\nmethod\ninstead.\ndatetime\n:\nutcnow()\n:\nuse\ndatetime.datetime.now(tz=datetime.UTC)\n.\nutcfromtimestamp()\n:\nuse\ndatetime.datetime.fromtimestamp(timestamp,\ntz=datetime.UTC)\n.\ngettext\n: Plural value must be an integer.\nimportlib\n:\ncache_from_source()\ndebug_override\nparameter is\ndeprecated: use the\noptimization\nparameter instead.\nimportlib.metadata\n:\nEntryPoints\ntuple interface.\nImplicit\nNone\non return values.\nlogging\n: the\nwarn()\nmethod has been deprecated\nsince Python 3.3, use\nwarning()\ninstead.\nmailbox\n: Use of StringIO input and text mode is deprecated, use\nBytesIO and binary mode instead.\nos\n: Calling\nos.register_at_fork()\nin multi-threaded process.\npydoc.ErrorDuringImport\n: A tuple value for\nexc_info\nparameter is\ndeprecated, use an exception instance.\nre\n: More strict rules are now applied for numerical group references\nand group names in regular expressions.  Only sequence of ASCII digits is now\naccepted as a numerical reference.  The group name in bytes patterns and\nreplacement strings can now only contain ASCII letters and digits and\nunderscore.\n(Contributed by Serhiy Storchaka in\ngh-91760\n.)\nsre_compile\n,\nsre_constants\nand\nsre_parse\nmodules.\nshutil\n:\nrmtree()\n’s\nonerror\nparameter is deprecated in\nPython 3.12; use the\nonexc\nparameter instead.\nssl\noptions and protocols:\nssl.SSLContext\nwithout protocol argument is deprecated.\nssl.SSLContext\n:\nset_npn_protocols()\nand\nselected_npn_protocol()\nare deprecated: use ALPN\ninstead.\nssl.OP_NO_SSL*\noptions\nssl.OP_NO_TLS*\noptions\nssl.PROTOCOL_SSLv3\nssl.PROTOCOL_TLS\nssl.PROTOCOL_TLSv1\nssl.PROTOCOL_TLSv1_1\nssl.PROTOCOL_TLSv1_2\nssl.TLSVersion.SSLv3\nssl.TLSVersion.TLSv1\nssl.TLSVersion.TLSv1_1\nthreading\nmethods:\nthreading.Condition.notifyAll()\n: use\nnotify_all()\n.\nthreading.Event.isSet()\n: use\nis_set()\n.\nthreading.Thread.isDaemon()\n,\nthreading.Thread.setDaemon()\n:\nuse\nthreading.Thread.daemon\nattribute.\nthreading.Thread.getName()\n,\nthreading.Thread.setName()\n:\nuse\nthreading.Thread.name\nattribute.\nthreading.currentThread()\n: use\nthreading.current_thread()\n.\nthreading.activeCount()\n: use\nthreading.active_count()\n.\ntyping.Text\n(\ngh-92332\n).\nunittest.IsolatedAsyncioTestCase\n: it is deprecated to return a value\nthat is not\nNone\nfrom a test case.\nurllib.parse\ndeprecated functions:\nurlparse()\ninstead\nsplitattr()\nsplithost()\nsplitnport()\nsplitpasswd()\nsplitport()\nsplitquery()\nsplittag()\nsplittype()\nsplituser()\nsplitvalue()\nto_bytes()\nurllib.request\n:\nURLopener\nand\nFancyURLopener\nstyle of invoking requests is\ndeprecated. Use newer\nurlopen()\nfunctions and methods.\nwsgiref\n:\nSimpleHandler.stdout.write()\nshould not do partial\nwrites.\nxml.etree.ElementTree\n: Testing the truth value of an\nElement\nis deprecated. In a future release it\nwill always return\nTrue\n. Prefer explicit\nlen(elem)\nor\nelem\nis\nnot\nNone\ntests instead.\nzipimport.zipimporter.load_module()\nis deprecated:\nuse\nexec_module()\ninstead.\nC API Deprecations\n¶\nPending Removal in Python 3.14\n¶\nThe\nma_version_tag\nfield in\nPyDictObject\nfor extension modules\n(\nPEP 699\n;\ngh-101193\n).\nCreating\nimmutable\ntypes\nwith mutable\nbases (\ngh-95388\n).\nFunctions to configure Python’s initialization, deprecated in Python 3.11:\nPySys_SetArgvEx()\n:\nSet\nPyConfig.argv\ninstead.\nPySys_SetArgv()\n:\nSet\nPyConfig.argv\ninstead.\nPy_SetProgramName()\n:\nSet\nPyConfig.program_name\ninstead.\nPy_SetPythonHome()\n:\nSet\nPyConfig.home\ninstead.\nThe\nPy_InitializeFromConfig()\nAPI should be used with\nPyConfig\ninstead.\nGlobal configuration variables:\nPy_DebugFlag\n:\nUse\nPyConfig.parser_debug\ninstead.\nPy_VerboseFlag\n:\nUse\nPyConfig.verbose\ninstead.\nPy_QuietFlag\n:\nUse\nPyConfig.quiet\ninstead.\nPy_InteractiveFlag\n:\nUse\nPyConfig.interactive\ninstead.\nPy_InspectFlag\n:\nUse\nPyConfig.inspect\ninstead.\nPy_OptimizeFlag\n:\nUse\nPyConfig.optimization_level\ninstead.\nPy_NoSiteFlag\n:\nUse\nPyConfig.site_import\ninstead.\nPy_BytesWarningFlag\n:\nUse\nPyConfig.bytes_warning\ninstead.\nPy_FrozenFlag\n:\nUse\nPyConfig.pathconfig_warnings\ninstead.\nPy_IgnoreEnvironmentFlag\n:\nUse\nPyConfig.use_environment\ninstead.\nPy_DontWriteBytecodeFlag\n:\nUse\nPyConfig.write_bytecode\ninstead.\nPy_NoUserSiteDirectory\n:\nUse\nPyConfig.user_site_directory\ninstead.\nPy_UnbufferedStdioFlag\n:\nUse\nPyConfig.buffered_stdio\ninstead.\nPy_HashRandomizationFlag\n:\nUse\nPyConfig.use_hash_seed\nand\nPyConfig.hash_seed\ninstead.\nPy_IsolatedFlag\n:\nUse\nPyConfig.isolated\ninstead.\nPy_LegacyWindowsFSEncodingFlag\n:\nUse\nPyPreConfig.legacy_windows_fs_encoding\ninstead.\nPy_LegacyWindowsStdioFlag\n:\nUse\nPyConfig.legacy_windows_stdio\ninstead.\nPy_FileSystemDefaultEncoding\n:\nUse\nPyConfig.filesystem_encoding\ninstead.\nPy_HasFileSystemDefaultEncoding\n:\nUse\nPyConfig.filesystem_encoding\ninstead.\nPy_FileSystemDefaultEncodeErrors\n:\nUse\nPyConfig.filesystem_errors\ninstead.\nPy_UTF8Mode\n:\nUse\nPyPreConfig.utf8_mode\ninstead.\n(see\nPy_PreInitialize()\n)\nThe\nPy_InitializeFromConfig()\nAPI should be used with\nPyConfig\ninstead.\nPending Removal in Python 3.15\n¶\nThe\nPyImport_ImportModuleNoBlock()\n:\nUse\nPyImport_ImportModule()\ninstead.\nPyWeakref_GetObject()\nand\nPyWeakref_GET_OBJECT()\n:\nUse\nPyWeakref_GetRef()\ninstead.\nPy_UNICODE\ntype and the\nPy_UNICODE_WIDE\nmacro:\nUse\nwchar_t\ninstead.\nPython initialization functions:\nPySys_ResetWarnOptions()\n:\nClear\nsys.warnoptions\nand\nwarnings.filters\ninstead.\nPy_GetExecPrefix()\n:\nGet\nsys.base_exec_prefix\nand\nsys.exec_prefix\ninstead.\nPy_GetPath()\n:\nGet\nsys.path\ninstead.\nPy_GetPrefix()\n:\nGet\nsys.base_prefix\nand\nsys.prefix\ninstead.\nPy_GetProgramFullPath()\n:\nGet\nsys.executable\ninstead.\nPy_GetProgramName()\n:\nGet\nsys.executable\ninstead.\nPy_GetPythonHome()\n:\nGet\nPyConfig.home\nor the\nPYTHONHOME\nenvironment variable instead.\nPending Removal in Future Versions\n¶\nThe following APIs are deprecated and will be removed,\nalthough there is currently no date scheduled for their removal.\nPy_TPFLAGS_HAVE_FINALIZE\n:\nUnneeded since Python 3.8.\nPyErr_Fetch()\n:\nUse\nPyErr_GetRaisedException()\ninstead.\nPyErr_NormalizeException()\n:\nUse\nPyErr_GetRaisedException()\ninstead.\nPyErr_Restore()\n:\nUse\nPyErr_SetRaisedException()\ninstead.\nPyModule_GetFilename()\n:\nUse\nPyModule_GetFilenameObject()\ninstead.\nPyOS_AfterFork()\n:\nUse\nPyOS_AfterFork_Child()\ninstead.\nPySlice_GetIndicesEx()\n:\nUse\nPySlice_Unpack()\nand\nPySlice_AdjustIndices()\ninstead.\nPyUnicode_AsDecodedObject()\n:\nUse\nPyCodec_Decode()\ninstead.\nPyUnicode_AsDecodedUnicode()\n:\nUse\nPyCodec_Decode()\ninstead.\nPyUnicode_AsEncodedObject()\n:\nUse\nPyCodec_Encode()\ninstead.\nPyUnicode_AsEncodedUnicode()\n:\nUse\nPyCodec_Encode()\ninstead.\nPyUnicode_READY()\n:\nUnneeded since Python 3.12\nPyErr_Display()\n:\nUse\nPyErr_DisplayException()\ninstead.\n_PyErr_ChainExceptions()\n:\nUse\n_PyErr_ChainExceptions1()\ninstead.\nPyBytesObject.ob_shash\nmember:\ncall\nPyObject_Hash()\ninstead.\nPyDictObject.ma_version_tag\nmember.\nThread Local Storage (TLS) API:\nPyThread_create_key()\n:\nUse\nPyThread_tss_alloc()\ninstead.\nPyThread_delete_key()\n:\nUse\nPyThread_tss_free()\ninstead.\nPyThread_set_key_value()\n:\nUse\nPyThread_tss_set()\ninstead.\nPyThread_get_key_value()\n:\nUse\nPyThread_tss_get()\ninstead.\nPyThread_delete_key_value()\n:\nUse\nPyThread_tss_delete()\ninstead.\nPyThread_ReInitTLS()\n:\nUnneeded since Python 3.7.\nTable of Contents\nDeprecations\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending removal in Python 3.16\nPending Removal in Future Versions\nC API Deprecations\nPending Removal in Python 3.14\nPending Removal in Python 3.15\nPending Removal in Future Versions\nPrevious topic\n“Why is Python Installed on my Computer?” FAQ\nNext topic\nGlossary\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nDeprecations\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 29, 2025 (07:36 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/deprecations/index.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12372.0301789
  },
  {
    "title": "posix — The most common POSIX system calls¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nUnix Specific Services\n»\nposix\n— The most common POSIX system calls\n|\nTheme\nAuto\nLight\nDark\n|\nposix\n— The most common POSIX system calls\n¶\nThis module provides access to operating system functionality that is\nstandardized by the C Standard and the POSIX standard (a thinly disguised Unix\ninterface).\nAvailability\n: Unix.\nDo not import this module directly.\nInstead, import the module\nos\n,\nwhich provides a\nportable\nversion of this interface.  On Unix, the\nos\nmodule provides a superset of the\nposix\ninterface.  On non-Unix operating\nsystems the\nposix\nmodule is not available, but a subset is always\navailable through the\nos\ninterface.  Once\nos\nis imported, there is\nno\nperformance penalty in using it instead of\nposix\n.  In addition,\nos\nprovides some additional functionality, such as automatically calling\nputenv()\nwhen an entry in\nos.environ\nis changed.\nErrors are reported as exceptions; the usual exceptions are given for type\nerrors, while errors reported by the system calls raise\nOSError\n.\nLarge File Support\n¶\nSeveral operating systems (including AIX and Solaris) provide\nsupport for files that are larger than 2 GiB from a C programming model where\nint\nand\nlong\nare 32-bit values. This is typically accomplished\nby defining the relevant size and offset types as 64-bit values. Such files are\nsometimes referred to as\nlarge files\n.\nLarge file support is enabled in Python when the size of an\noff_t\nis\nlarger than a\nlong\nand the\nlong\nlong\nis at least as large\nas an\noff_t\n.\nIt may be necessary to configure and compile Python with certain compiler flags\nto enable this mode. For example, with Solaris 2.6 and 2.7 you need to do\nsomething like:\nCFLAGS\n=\n\"`getconf LFS_CFLAGS`\"\nOPT\n=\n\"-g -O2 $CFLAGS\"\n\\\n./\nconfigure\nOn large-file-capable Linux systems, this might work:\nCFLAGS\n=\n'-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64'\nOPT\n=\n\"-g -O2 $CFLAGS\"\n\\\n./\nconfigure\nNotable Module Contents\n¶\nIn addition to many functions described in the\nos\nmodule documentation,\nposix\ndefines the following data item:\nposix.\nenviron\n¶\nA dictionary representing the string environment at the time the interpreter\nwas started. Keys and values are bytes on Unix and str on Windows. For\nexample,\nenviron[b'HOME']\n(\nenviron['HOME']\non Windows) is the\npathname of your home directory, equivalent to\ngetenv(\"HOME\")\nin C.\nModifying this dictionary does not affect the string environment passed on by\nexecv()\n,\npopen()\nor\nsystem()\n; if you need to\nchange the environment, pass\nenviron\nto\nexecve()\nor add\nvariable assignments and export statements to the command string for\nsystem()\nor\npopen()\n.\nChanged in version 3.2:\nOn Unix, keys and values are bytes.\nNote\nThe\nos\nmodule provides an alternate implementation of\nenviron\nwhich updates the environment on modification. Note also that updating\nos.environ\nwill render this dictionary obsolete. Use of the\nos\nmodule version of this is recommended over direct access to the\nposix\nmodule.\nTable of Contents\nposix\n— The most common POSIX system calls\nLarge File Support\nNotable Module Contents\nPrevious topic\nUnix Specific Services\nNext topic\npwd\n— The password database\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nUnix Specific Services\n»\nposix\n— The most common POSIX system calls\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/library/posix.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12372.2125399
  },
  {
    "title": "Structured Markup Processing Tools¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nStructured Markup Processing Tools\n|\nTheme\nAuto\nLight\nDark\n|\nStructured Markup Processing Tools\n¶\nPython supports a variety of modules to work with various forms of structured\ndata markup.  This includes modules to work with the Standard Generalized Markup\nLanguage (SGML) and the Hypertext Markup Language (HTML), and several interfaces\nfor working with the Extensible Markup Language (XML).\nhtml\n— HyperText Markup Language support\nhtml.parser\n— Simple HTML and XHTML parser\nExample HTML Parser Application\nHTMLParser\nMethods\nExamples\nhtml.entities\n— Definitions of HTML general entities\nXML Processing Modules\nXML security\nxml.etree.ElementTree\n— The ElementTree XML API\nTutorial\nXML tree and elements\nParsing XML\nPull API for non-blocking parsing\nFinding interesting elements\nModifying an XML File\nBuilding XML documents\nParsing XML with Namespaces\nXPath support\nExample\nSupported XPath syntax\nReference\nFunctions\nXInclude support\nExample\nReference\nFunctions\nElement Objects\nElementTree Objects\nQName Objects\nTreeBuilder Objects\nXMLParser Objects\nXMLPullParser Objects\nExceptions\nxml.dom\n— The Document Object Model API\nModule Contents\nObjects in the DOM\nDOMImplementation Objects\nNode Objects\nNodeList Objects\nDocumentType Objects\nDocument Objects\nElement Objects\nAttr Objects\nNamedNodeMap Objects\nComment Objects\nText and CDATASection Objects\nProcessingInstruction Objects\nExceptions\nConformance\nType Mapping\nAccessor Methods\nxml.dom.minidom\n— Minimal DOM implementation\nDOM Objects\nDOM Example\nminidom and the DOM standard\nxml.dom.pulldom\n— Support for building partial DOM trees\nDOMEventStream Objects\nxml.sax\n— Support for SAX2 parsers\nSAXException Objects\nxml.sax.handler\n— Base classes for SAX handlers\nContentHandler Objects\nDTDHandler Objects\nEntityResolver Objects\nErrorHandler Objects\nLexicalHandler Objects\nxml.sax.saxutils\n— SAX Utilities\nxml.sax.xmlreader\n— Interface for XML parsers\nXMLReader Objects\nIncrementalParser Objects\nLocator Objects\nInputSource Objects\nThe\nAttributes\nInterface\nThe\nAttributesNS\nInterface\nxml.parsers.expat\n— Fast XML parsing using Expat\nXMLParser Objects\nExpatError Exceptions\nExample\nContent Model Descriptions\nExpat error constants\nPrevious topic\nquopri\n— Encode and decode MIME quoted-printable data\nNext topic\nhtml\n— HyperText Markup Language support\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nStructured Markup Processing Tools\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/markup.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12372.280455
  },
  {
    "title": "“Why is Python Installed on my Computer?” FAQ¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Frequently Asked Questions\n»\n“Why is Python Installed on my Computer?” FAQ\n|\nTheme\nAuto\nLight\nDark\n|\n“Why is Python Installed on my Computer?” FAQ\n¶\nWhat is Python?\n¶\nPython is a programming language.  It’s used for many different applications.\nIt’s used in some high schools and colleges as an introductory programming\nlanguage because Python is easy to learn, but it’s also used by professional\nsoftware developers at places such as Google, NASA, and Lucasfilm Ltd.\nIf you wish to learn more about Python, start with the\nBeginner’s Guide to\nPython\n.\nWhy is Python installed on my machine?\n¶\nIf you find Python installed on your system but don’t remember installing it,\nthere are several possible ways it could have gotten there.\nPerhaps another user on the computer wanted to learn programming and installed\nit; you’ll have to figure out who’s been using the machine and might have\ninstalled it.\nA third-party application installed on the machine might have been written in\nPython and included a Python installation.  There are many such applications,\nfrom GUI programs to network servers and administrative scripts.\nSome Windows machines also have Python installed.  At this writing we’re aware\nof computers from Hewlett-Packard and Compaq that include Python.  Apparently\nsome of HP/Compaq’s administrative tools are written in Python.\nMany Unix-compatible operating systems, such as macOS and some Linux\ndistributions, have Python installed by default; it’s included in the base\ninstallation.\nCan I delete Python?\n¶\nThat depends on where Python came from.\nIf someone installed it deliberately, you can remove it without hurting\nanything.  On Windows, use the Add/Remove Programs icon in the Control Panel.\nIf Python was installed by a third-party application, you can also remove it,\nbut that application will no longer work.  You should use that application’s\nuninstaller rather than removing Python directly.\nIf Python came with your operating system, removing it is not recommended.  If\nyou remove it, whatever tools were written in Python will no longer run, and\nsome of them might be important to you.  Reinstalling the whole system would\nthen be required to fix things again.\nTable of Contents\n“Why is Python Installed on my Computer?” FAQ\nWhat is Python?\nWhy is Python installed on my machine?\nCan I delete Python?\nPrevious topic\nGraphic User Interface FAQ\nNext topic\nDeprecations\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nPython Frequently Asked Questions\n»\n“Why is Python Installed on my Computer?” FAQ\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/faq/installed.html",
    "source": "python",
    "doc_type": "general",
    "scraped_at": 12372.6618264
  },
  {
    "title": "test — Regression tests package for Python¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nDevelopment Tools\n»\ntest\n— Regression tests package for Python\n|\nTheme\nAuto\nLight\nDark\n|\ntest\n— Regression tests package for Python\n¶\nNote\nThe\ntest\npackage is meant for internal use by Python only. It is\ndocumented for the benefit of the core developers of Python. Any use of\nthis package outside of Python’s standard library is discouraged as code\nmentioned here can change or be removed without notice between releases of\nPython.\nThe\ntest\npackage contains all regression tests for Python as well as the\nmodules\ntest.support\nand\ntest.regrtest\n.\ntest.support\nis used to enhance your tests while\ntest.regrtest\ndrives the testing suite.\nEach module in the\ntest\npackage whose name starts with\ntest_\nis a\ntesting suite for a specific module or feature. All new tests should be written\nusing the\nunittest\nor\ndoctest\nmodule.  Some older tests are\nwritten using a “traditional” testing style that compares output printed to\nsys.stdout\n; this style of test is considered deprecated.\nSee also\nModule\nunittest\nWriting PyUnit regression tests.\nModule\ndoctest\nTests embedded in documentation strings.\nWriting Unit Tests for the\ntest\npackage\n¶\nIt is preferred that tests that use the\nunittest\nmodule follow a few\nguidelines. One is to name the test module by starting it with\ntest_\nand end\nit with the name of the module being tested. The test methods in the test module\nshould start with\ntest_\nand end with a description of what the method is\ntesting. This is needed so that the methods are recognized by the test driver as\ntest methods. Also, no documentation string for the method should be included. A\ncomment (such as\n#\nTests\nfunction\nreturns\nonly\nTrue\nor\nFalse\n) should be used\nto provide documentation for test methods. This is done because documentation\nstrings get printed out if they exist and thus what test is being run is not\nstated.\nA basic boilerplate is often used:\nimport\nunittest\nfrom\ntest\nimport\nsupport\nclass\nMyTestCase1\n(\nunittest\n.\nTestCase\n):\n# Only use setUp() and tearDown() if necessary\ndef\nsetUp\n(\nself\n):\n...\ncode\nto\nexecute\nin\npreparation\nfor\ntests\n...\ndef\ntearDown\n(\nself\n):\n...\ncode\nto\nexecute\nto\nclean\nup\nafter\ntests\n...\ndef\ntest_feature_one\n(\nself\n):\n# Test feature one.\n...\ntesting\ncode\n...\ndef\ntest_feature_two\n(\nself\n):\n# Test feature two.\n...\ntesting\ncode\n...\n...\nmore\ntest\nmethods\n...\nclass\nMyTestCase2\n(\nunittest\n.\nTestCase\n):\n...\nsame\nstructure\nas\nMyTestCase1\n...\n...\nmore\ntest\nclasses\n...\nif\n__name__\n==\n'__main__'\n:\nunittest\n.\nmain\n()\nThis code pattern allows the testing suite to be run by\ntest.regrtest\n,\non its own as a script that supports the\nunittest\nCLI, or via the\npython\n-m\nunittest\nCLI.\nThe goal for regression testing is to try to break code. This leads to a few\nguidelines to be followed:\nThe testing suite should exercise all classes, functions, and constants. This\nincludes not just the external API that is to be presented to the outside\nworld but also “private” code.\nWhitebox testing (examining the code being tested when the tests are being\nwritten) is preferred. Blackbox testing (testing only the published user\ninterface) is not complete enough to make sure all boundary and edge cases\nare tested.\nMake sure all possible values are tested including invalid ones. This makes\nsure that not only all valid values are acceptable but also that improper\nvalues are handled correctly.\nExhaust as many code paths as possible. Test where branching occurs and thus\ntailor input to make sure as many different paths through the code are taken.\nAdd an explicit test for any bugs discovered for the tested code. This will\nmake sure that the error does not crop up again if the code is changed in the\nfuture.\nMake sure to clean up after your tests (such as close and remove all temporary\nfiles).\nIf a test is dependent on a specific condition of the operating system then\nverify the condition already exists before attempting the test.\nImport as few modules as possible and do it as soon as possible. This\nminimizes external dependencies of tests and also minimizes possible anomalous\nbehavior from side-effects of importing a module.\nTry to maximize code reuse. On occasion, tests will vary by something as small\nas what type of input is used. Minimize code duplication by subclassing a\nbasic test class with a class that specifies the input:\nclass\nTestFuncAcceptsSequencesMixin\n:\nfunc\n=\nmySuperWhammyFunction\ndef\ntest_func\n(\nself\n):\nself\n.\nfunc\n(\nself\n.\narg\n)\nclass\nAcceptLists\n(\nTestFuncAcceptsSequencesMixin\n,\nunittest\n.\nTestCase\n):\narg\n=\n[\n1\n,\n2\n,\n3\n]\nclass\nAcceptStrings\n(\nTestFuncAcceptsSequencesMixin\n,\nunittest\n.\nTestCase\n):\narg\n=\n'abc'\nclass\nAcceptTuples\n(\nTestFuncAcceptsSequencesMixin\n,\nunittest\n.\nTestCase\n):\narg\n=\n(\n1\n,\n2\n,\n3\n)\nWhen using this pattern, remember that all classes that inherit from\nunittest.TestCase\nare run as tests.  The\nTestFuncAcceptsSequencesMixin\nclass in the example above\ndoes not have any data and so can’t be run by itself, thus it does not\ninherit from\nunittest.TestCase\n.\nSee also\nTest Driven Development\nA book by Kent Beck on writing tests before code.\nRunning tests using the command-line interface\n¶\nThe\ntest\npackage can be run as a script to drive Python’s regression\ntest suite, thanks to the\n-m\noption:\npython -m test\n. Under\nthe hood, it uses\ntest.regrtest\n; the call\npython -m\ntest.regrtest\nused in previous Python versions still works.  Running the\nscript by itself automatically starts running all regression tests in the\ntest\npackage. It does this by finding all modules in the package whose\nname starts with\ntest_\n, importing them, and executing the function\ntest_main()\nif present or loading the tests via\nunittest.TestLoader.loadTestsFromModule if\ntest_main\ndoes not exist.  The\nnames of tests to execute may also be passed to the script. Specifying a single\nregression test (\npython -m test test_spam\n) will minimize output and\nonly print whether the test passed or failed.\nRunning\ntest\ndirectly allows what resources are available for\ntests to use to be set. You do this by using the\n-u\ncommand-line\noption. Specifying\nall\nas the value for the\n-u\noption enables all\npossible resources:\npython -m test -uall\n.\nIf all but one resource is desired (a more common case), a\ncomma-separated list of resources that are not desired may be listed after\nall\n. The command\npython -m test -uall,-audio,-largefile\nwill run\ntest\nwith all resources except the\naudio\nand\nlargefile\nresources. For a list of all resources and more command-line\noptions, run\npython -m test -h\n.\nSome other ways to execute the regression tests depend on what platform the\ntests are being executed on. On Unix, you can run\nmake test\nat the\ntop-level directory where Python was built. On Windows,\nexecuting\nrt.bat\nfrom your\nPCbuild\ndirectory will run all\nregression tests.\ntest.support\n— Utilities for the Python test suite\n¶\nThe\ntest.support\nmodule provides support for Python’s regression\ntest suite.\nNote\ntest.support\nis not a public module.  It is documented here to help\nPython developers write tests.  The API of this module is subject to change\nwithout backwards compatibility concerns between releases.\nThis module defines the following exceptions:\nexception\ntest.support.\nTestFailed\n¶\nException to be raised when a test fails. This is deprecated in favor of\nunittest\n-based tests and\nunittest.TestCase\n’s assertion\nmethods.\nexception\ntest.support.\nResourceDenied\n¶\nSubclass of\nunittest.SkipTest\n. Raised when a resource (such as a\nnetwork connection) is not available. Raised by the\nrequires()\nfunction.\nThe\ntest.support\nmodule defines the following constants:\ntest.support.\nverbose\n¶\nTrue\nwhen verbose output is enabled. Should be checked when more\ndetailed information is desired about a running test.\nverbose\nis set by\ntest.regrtest\n.\ntest.support.\nis_jython\n¶\nTrue\nif the running interpreter is Jython.\ntest.support.\nis_android\n¶\nTrue\nif the system is Android.\ntest.support.\nunix_shell\n¶\nPath for shell if not on Windows; otherwise\nNone\n.\ntest.support.\nLOOPBACK_TIMEOUT\n¶\nTimeout in seconds for tests using a network server listening on the network\nlocal loopback interface like\n127.0.0.1\n.\nThe timeout is long enough to prevent test failure: it takes into account\nthat the client and the server can run in different threads or even\ndifferent processes.\nThe timeout should be long enough for\nconnect()\n,\nrecv()\nand\nsend()\nmethods of\nsocket.socket\n.\nIts default value is 5 seconds.\nSee also\nINTERNET_TIMEOUT\n.\ntest.support.\nINTERNET_TIMEOUT\n¶\nTimeout in seconds for network requests going to the internet.\nThe timeout is short enough to prevent a test to wait for too long if the\ninternet request is blocked for whatever reason.\nUsually, a timeout using\nINTERNET_TIMEOUT\nshould not mark a test as\nfailed, but skip the test instead: see\ntransient_internet()\n.\nIts default value is 1 minute.\nSee also\nLOOPBACK_TIMEOUT\n.\ntest.support.\nSHORT_TIMEOUT\n¶\nTimeout in seconds to mark a test as failed if the test takes “too long”.\nThe timeout value depends on the regrtest\n--timeout\ncommand line option.\nIf a test using\nSHORT_TIMEOUT\nstarts to fail randomly on slow\nbuildbots, use\nLONG_TIMEOUT\ninstead.\nIts default value is 30 seconds.\ntest.support.\nLONG_TIMEOUT\n¶\nTimeout in seconds to detect when a test hangs.\nIt is long enough to reduce the risk of test failure on the slowest Python\nbuildbots. It should not be used to mark a test as failed if the test takes\n“too long”.  The timeout value depends on the regrtest\n--timeout\ncommand\nline option.\nIts default value is 5 minutes.\nSee also\nLOOPBACK_TIMEOUT\n,\nINTERNET_TIMEOUT\nand\nSHORT_TIMEOUT\n.\ntest.support.\nPGO\n¶\nSet when tests can be skipped when they are not useful for PGO.\ntest.support.\nPIPE_MAX_SIZE\n¶\nA constant that is likely larger than the underlying OS pipe buffer size,\nto make writes blocking.\ntest.support.\nPy_DEBUG\n¶\nTrue\nif Python was built with the\nPy_DEBUG\nmacro\ndefined, that is, if\nPython was\nbuilt in debug mode\n.\nAdded in version 3.12.\ntest.support.\nSOCK_MAX_SIZE\n¶\nA constant that is likely larger than the underlying OS socket buffer size,\nto make writes blocking.\ntest.support.\nTEST_SUPPORT_DIR\n¶\nSet to the top level directory that contains\ntest.support\n.\ntest.support.\nTEST_HOME_DIR\n¶\nSet to the top level directory for the test package.\ntest.support.\nTEST_DATA_DIR\n¶\nSet to the\ndata\ndirectory within the test package.\ntest.support.\nMAX_Py_ssize_t\n¶\nSet to\nsys.maxsize\nfor big memory tests.\ntest.support.\nmax_memuse\n¶\nSet by\nset_memlimit()\nas the memory limit for big memory tests.\nLimited by\nMAX_Py_ssize_t\n.\ntest.support.\nreal_max_memuse\n¶\nSet by\nset_memlimit()\nas the memory limit for big memory tests.  Not\nlimited by\nMAX_Py_ssize_t\n.\ntest.support.\nMISSING_C_DOCSTRINGS\n¶\nSet to\nTrue\nif Python is built without docstrings (the\nWITH_DOC_STRINGS\nmacro is not defined).\nSee the\nconfigure\n--without-doc-strings\noption.\nSee also the\nHAVE_DOCSTRINGS\nvariable.\ntest.support.\nHAVE_DOCSTRINGS\n¶\nSet to\nTrue\nif function docstrings are available.\nSee the\npython\n-OO\noption, which strips docstrings of functions implemented in Python.\nSee also the\nMISSING_C_DOCSTRINGS\nvariable.\ntest.support.\nTEST_HTTP_URL\n¶\nDefine the URL of a dedicated HTTP server for the network tests.\ntest.support.\nALWAYS_EQ\n¶\nObject that is equal to anything.  Used to test mixed type comparison.\ntest.support.\nNEVER_EQ\n¶\nObject that is not equal to anything (even to\nALWAYS_EQ\n).\nUsed to test mixed type comparison.\ntest.support.\nLARGEST\n¶\nObject that is greater than anything (except itself).\nUsed to test mixed type comparison.\ntest.support.\nSMALLEST\n¶\nObject that is less than anything (except itself).\nUsed to test mixed type comparison.\nThe\ntest.support\nmodule defines the following functions:\ntest.support.\nbusy_retry\n(\ntimeout\n,\nerr_msg\n=\nNone\n,\n/\n,\n*\n,\nerror\n=\nTrue\n)\n¶\nRun the loop body until\nbreak\nstops the loop.\nAfter\ntimeout\nseconds, raise an\nAssertionError\nif\nerror\nis true,\nor just stop the loop if\nerror\nis false.\nExample:\nfor\n_\nin\nsupport\n.\nbusy_retry\n(\nsupport\n.\nSHORT_TIMEOUT\n):\nif\ncheck\n():\nbreak\nExample of error=False usage:\nfor\n_\nin\nsupport\n.\nbusy_retry\n(\nsupport\n.\nSHORT_TIMEOUT\n,\nerror\n=\nFalse\n):\nif\ncheck\n():\nbreak\nelse\n:\nraise\nRuntimeError\n(\n'my custom error'\n)\ntest.support.\nsleeping_retry\n(\ntimeout\n,\nerr_msg\n=\nNone\n,\n/\n,\n*\n,\ninit_delay\n=\n0.010\n,\nmax_delay\n=\n1.0\n,\nerror\n=\nTrue\n)\n¶\nWait strategy that applies exponential backoff.\nRun the loop body until\nbreak\nstops the loop. Sleep at each loop\niteration, but not at the first iteration. The sleep delay is doubled at\neach iteration (up to\nmax_delay\nseconds).\nSee\nbusy_retry()\ndocumentation for the parameters usage.\nExample raising an exception after SHORT_TIMEOUT seconds:\nfor\n_\nin\nsupport\n.\nsleeping_retry\n(\nsupport\n.\nSHORT_TIMEOUT\n):\nif\ncheck\n():\nbreak\nExample of error=False usage:\nfor\n_\nin\nsupport\n.\nsleeping_retry\n(\nsupport\n.\nSHORT_TIMEOUT\n,\nerror\n=\nFalse\n):\nif\ncheck\n():\nbreak\nelse\n:\nraise\nRuntimeError\n(\n'my custom error'\n)\ntest.support.\nis_resource_enabled\n(\nresource\n)\n¶\nReturn\nTrue\nif\nresource\nis enabled and available. The list of\navailable resources is only set when\ntest.regrtest\nis executing the\ntests.\ntest.support.\npython_is_optimized\n(\n)\n¶\nReturn\nTrue\nif Python was not built with\n-O0\nor\n-Og\n.\ntest.support.\nwith_pymalloc\n(\n)\n¶\nReturn\n_testcapi.WITH_PYMALLOC\n.\ntest.support.\nrequires\n(\nresource\n,\nmsg\n=\nNone\n)\n¶\nRaise\nResourceDenied\nif\nresource\nis not available.\nmsg\nis the\nargument to\nResourceDenied\nif it is raised. Always returns\nTrue\nif called by a function whose\n__name__\nis\n'__main__'\n.\nUsed when tests are executed by\ntest.regrtest\n.\ntest.support.\nsortdict\n(\ndict\n)\n¶\nReturn a repr of\ndict\nwith keys sorted.\ntest.support.\nfindfile\n(\nfilename\n,\nsubdir\n=\nNone\n)\n¶\nReturn the path to the file named\nfilename\n. If no match is found\nfilename\nis returned. This does not equal a failure since it could be the\npath to the file.\nSetting\nsubdir\nindicates a relative path to use to find the file\nrather than looking directly in the path directories.\ntest.support.\nget_pagesize\n(\n)\n¶\nGet size of a page in bytes.\nAdded in version 3.12.\ntest.support.\nsetswitchinterval\n(\ninterval\n)\n¶\nSet the\nsys.setswitchinterval()\nto the given\ninterval\n.  Defines\na minimum interval for Android systems to prevent the system from hanging.\ntest.support.\ncheck_impl_detail\n(\n**\nguards\n)\n¶\nUse this check to guard CPython’s implementation-specific tests or to\nrun them only on the implementations guarded by the arguments.  This\nfunction returns\nTrue\nor\nFalse\ndepending on the host platform.\nExample usage:\ncheck_impl_detail\n()\n# Only on CPython (default).\ncheck_impl_detail\n(\njython\n=\nTrue\n)\n# Only on Jython.\ncheck_impl_detail\n(\ncpython\n=\nFalse\n)\n# Everywhere except CPython.\ntest.support.\nset_memlimit\n(\nlimit\n)\n¶\nSet the values for\nmax_memuse\nand\nreal_max_memuse\nfor big\nmemory tests.\ntest.support.\nrecord_original_stdout\n(\nstdout\n)\n¶\nStore the value from\nstdout\n.  It is meant to hold the stdout at the\ntime the regrtest began.\ntest.support.\nget_original_stdout\n(\n)\n¶\nReturn the original stdout set by\nrecord_original_stdout()\nor\nsys.stdout\nif it’s not set.\ntest.support.\nargs_from_interpreter_flags\n(\n)\n¶\nReturn a list of command line arguments reproducing the current settings\nin\nsys.flags\nand\nsys.warnoptions\n.\ntest.support.\noptim_args_from_interpreter_flags\n(\n)\n¶\nReturn a list of command line arguments reproducing the current\noptimization settings in\nsys.flags\n.\ntest.support.\ncaptured_stdin\n(\n)\n¶\ntest.support.\ncaptured_stdout\n(\n)\n¶\ntest.support.\ncaptured_stderr\n(\n)\n¶\nA context managers that temporarily replaces the named stream with\nio.StringIO\nobject.\nExample use with output streams:\nwith\ncaptured_stdout\n()\nas\nstdout\n,\ncaptured_stderr\n()\nas\nstderr\n:\nprint\n(\n\"hello\"\n)\nprint\n(\n\"error\"\n,\nfile\n=\nsys\n.\nstderr\n)\nassert\nstdout\n.\ngetvalue\n()\n==\n\"hello\n\\n\n\"\nassert\nstderr\n.\ngetvalue\n()\n==\n\"error\n\\n\n\"\nExample use with input stream:\nwith\ncaptured_stdin\n()\nas\nstdin\n:\nstdin\n.\nwrite\n(\n'hello\n\\n\n'\n)\nstdin\n.\nseek\n(\n0\n)\n# call test code that consumes from sys.stdin\ncaptured\n=\ninput\n()\nself\n.\nassertEqual\n(\ncaptured\n,\n\"hello\"\n)\ntest.support.\ndisable_faulthandler\n(\n)\n¶\nA context manager that temporary disables\nfaulthandler\n.\ntest.support.\ngc_collect\n(\n)\n¶\nForce as many objects as possible to be collected.  This is needed because\ntimely deallocation is not guaranteed by the garbage collector.  This means\nthat\n__del__\nmethods may be called later than expected and weakrefs\nmay remain alive for longer than expected.\ntest.support.\ndisable_gc\n(\n)\n¶\nA context manager that disables the garbage collector on entry. On\nexit, the garbage collector is restored to its prior state.\ntest.support.\nswap_attr\n(\nobj\n,\nattr\n,\nnew_val\n)\n¶\nContext manager to swap out an attribute with a new object.\nUsage:\nwith\nswap_attr\n(\nobj\n,\n\"attr\"\n,\n5\n):\n...\nThis will set\nobj.attr\nto 5 for the duration of the\nwith\nblock,\nrestoring the old value at the end of the block.  If\nattr\ndoesn’t\nexist on\nobj\n, it will be created and then deleted at the end of the\nblock.\nThe old value (or\nNone\nif it doesn’t exist) will be assigned to the\ntarget of the “as” clause, if there is one.\ntest.support.\nswap_item\n(\nobj\n,\nattr\n,\nnew_val\n)\n¶\nContext manager to swap out an item with a new object.\nUsage:\nwith\nswap_item\n(\nobj\n,\n\"item\"\n,\n5\n):\n...\nThis will set\nobj[\"item\"]\nto 5 for the duration of the\nwith\nblock,\nrestoring the old value at the end of the block. If\nitem\ndoesn’t\nexist on\nobj\n, it will be created and then deleted at the end of the\nblock.\nThe old value (or\nNone\nif it doesn’t exist) will be assigned to the\ntarget of the “as” clause, if there is one.\ntest.support.\nflush_std_streams\n(\n)\n¶\nCall the\nflush()\nmethod on\nsys.stdout\nand then on\nsys.stderr\n. It can be used to make sure that the logs order is\nconsistent before writing into stderr.\nAdded in version 3.11.\ntest.support.\nprint_warning\n(\nmsg\n)\n¶\nPrint a warning into\nsys.__stderr__\n. Format the message as:\nf\"Warning\n--\n{msg}\"\n. If\nmsg\nis made of multiple lines, add\n\"Warning\n--\n\"\nprefix to each line.\nAdded in version 3.9.\ntest.support.\nwait_process\n(\npid\n,\n*\n,\nexitcode\n,\ntimeout\n=\nNone\n)\n¶\nWait until process\npid\ncompletes and check that the process exit code is\nexitcode\n.\nRaise an\nAssertionError\nif the process exit code is not equal to\nexitcode\n.\nIf the process runs longer than\ntimeout\nseconds (\nSHORT_TIMEOUT\nby\ndefault), kill the process and raise an\nAssertionError\n. The timeout\nfeature is not available on Windows.\nAdded in version 3.9.\ntest.support.\ncalcobjsize\n(\nfmt\n)\n¶\nReturn the size of the\nPyObject\nwhose structure members are\ndefined by\nfmt\n. The returned value includes the size of the Python object header and alignment.\ntest.support.\ncalcvobjsize\n(\nfmt\n)\n¶\nReturn the size of the\nPyVarObject\nwhose structure members are\ndefined by\nfmt\n. The returned value includes the size of the Python object header and alignment.\ntest.support.\nchecksizeof\n(\ntest\n,\no\n,\nsize\n)\n¶\nFor testcase\ntest\n, assert that the\nsys.getsizeof\nfor\no\nplus the GC\nheader size equals\nsize\n.\n@\ntest.support.\nanticipate_failure\n(\ncondition\n)\n¶\nA decorator to conditionally mark tests with\nunittest.expectedFailure()\n. Any use of this decorator should\nhave an associated comment identifying the relevant tracker issue.\ntest.support.\nsystem_must_validate_cert\n(\nf\n)\n¶\nA decorator that skips the decorated test on TLS certification validation failures.\n@\ntest.support.\nrun_with_locale\n(\ncatstr\n,\n*\nlocales\n)\n¶\nA decorator for running a function in a different locale, correctly\nresetting it after it has finished.\ncatstr\nis the locale category as\na string (for example\n\"LC_ALL\"\n).  The\nlocales\npassed will be tried\nsequentially, and the first valid locale will be used.\n@\ntest.support.\nrun_with_tz\n(\ntz\n)\n¶\nA decorator for running a function in a specific timezone, correctly\nresetting it after it has finished.\n@\ntest.support.\nrequires_freebsd_version\n(\n*\nmin_version\n)\n¶\nDecorator for the minimum version when running test on FreeBSD.  If the\nFreeBSD version is less than the minimum, the test is skipped.\n@\ntest.support.\nrequires_linux_version\n(\n*\nmin_version\n)\n¶\nDecorator for the minimum version when running test on Linux.  If the\nLinux version is less than the minimum, the test is skipped.\n@\ntest.support.\nrequires_mac_version\n(\n*\nmin_version\n)\n¶\nDecorator for the minimum version when running test on macOS.  If the\nmacOS version is less than the minimum, the test is skipped.\n@\ntest.support.\nrequires_gil_enabled\n¶\nDecorator for skipping tests on the free-threaded build.  If the\nGIL\nis disabled, the test is skipped.\n@\ntest.support.\nrequires_IEEE_754\n¶\nDecorator for skipping tests on non-IEEE 754 platforms.\n@\ntest.support.\nrequires_zlib\n¶\nDecorator for skipping tests if\nzlib\ndoesn’t exist.\n@\ntest.support.\nrequires_gzip\n¶\nDecorator for skipping tests if\ngzip\ndoesn’t exist.\n@\ntest.support.\nrequires_bz2\n¶\nDecorator for skipping tests if\nbz2\ndoesn’t exist.\n@\ntest.support.\nrequires_lzma\n¶\nDecorator for skipping tests if\nlzma\ndoesn’t exist.\n@\ntest.support.\nrequires_resource\n(\nresource\n)\n¶\nDecorator for skipping tests if\nresource\nis not available.\n@\ntest.support.\nrequires_docstrings\n¶\nDecorator for only running the test if\nHAVE_DOCSTRINGS\n.\n@\ntest.support.\nrequires_limited_api\n¶\nDecorator for only running the test if\nLimited C API\nis available.\n@\ntest.support.\ncpython_only\n¶\nDecorator for tests only applicable to CPython.\n@\ntest.support.\nimpl_detail\n(\nmsg\n=\nNone\n,\n**\nguards\n)\n¶\nDecorator for invoking\ncheck_impl_detail()\non\nguards\n.  If that\nreturns\nFalse\n, then uses\nmsg\nas the reason for skipping the test.\n@\ntest.support.\nno_tracing\n¶\nDecorator to temporarily turn off tracing for the duration of the test.\n@\ntest.support.\nrefcount_test\n¶\nDecorator for tests which involve reference counting.  The decorator does\nnot run the test if it is not run by CPython.  Any trace function is unset\nfor the duration of the test to prevent unexpected refcounts caused by\nthe trace function.\n@\ntest.support.\nbigmemtest\n(\nsize\n,\nmemuse\n,\ndry_run\n=\nTrue\n)\n¶\nDecorator for bigmem tests.\nsize\nis a requested size for the test (in arbitrary, test-interpreted\nunits.)\nmemuse\nis the number of bytes per unit for the test, or a good\nestimate of it.  For example, a test that needs two byte buffers, of 4 GiB\neach, could be decorated with\n@bigmemtest(size=_4G,\nmemuse=2)\n.\nThe\nsize\nargument is normally passed to the decorated test method as an\nextra argument.  If\ndry_run\nis\nTrue\n, the value passed to the test\nmethod may be less than the requested value.  If\ndry_run\nis\nFalse\n, it\nmeans the test doesn’t support dummy runs when\n-M\nis not specified.\n@\ntest.support.\nbigaddrspacetest\n¶\nDecorator for tests that fill the address space.\ntest.support.\ncheck_syntax_error\n(\ntestcase\n,\nstatement\n,\nerrtext\n=\n''\n,\n*\n,\nlineno\n=\nNone\n,\noffset\n=\nNone\n)\n¶\nTest for syntax errors in\nstatement\nby attempting to compile\nstatement\n.\ntestcase\nis the\nunittest\ninstance for the test.\nerrtext\nis the\nregular expression which should match the string representation of the\nraised\nSyntaxError\n.  If\nlineno\nis not\nNone\n, compares to\nthe line of the exception.  If\noffset\nis not\nNone\n, compares to\nthe offset of the exception.\ntest.support.\nopen_urlresource\n(\nurl\n,\n*\nargs\n,\n**\nkw\n)\n¶\nOpen\nurl\n.  If open fails, raises\nTestFailed\n.\ntest.support.\nreap_children\n(\n)\n¶\nUse this at the end of\ntest_main\nwhenever sub-processes are started.\nThis will help ensure that no extra children (zombies) stick around to\nhog resources and create problems when looking for refleaks.\ntest.support.\nget_attribute\n(\nobj\n,\nname\n)\n¶\nGet an attribute, raising\nunittest.SkipTest\nif\nAttributeError\nis raised.\ntest.support.\ncatch_unraisable_exception\n(\n)\n¶\nContext manager catching unraisable exception using\nsys.unraisablehook()\n.\nStoring the exception value (\ncm.unraisable.exc_value\n) creates a\nreference cycle. The reference cycle is broken explicitly when the context\nmanager exits.\nStoring the object (\ncm.unraisable.object\n) can resurrect it if it is set\nto an object which is being finalized. Exiting the context manager clears\nthe stored object.\nUsage:\nwith\nsupport\n.\ncatch_unraisable_exception\n()\nas\ncm\n:\n# code creating an \"unraisable exception\"\n...\n# check the unraisable exception: use cm.unraisable\n...\n# cm.unraisable attribute no longer exists at this point\n# (to break a reference cycle)\nAdded in version 3.8.\ntest.support.\nload_package_tests\n(\npkg_dir\n,\nloader\n,\nstandard_tests\n,\npattern\n)\n¶\nGeneric implementation of the\nunittest\nload_tests\nprotocol for\nuse in test packages.\npkg_dir\nis the root directory of the package;\nloader\n,\nstandard_tests\n, and\npattern\nare the arguments expected by\nload_tests\n.  In simple cases, the test package’s\n__init__.py\ncan be the following:\nimport\nos\nfrom\ntest.support\nimport\nload_package_tests\ndef\nload_tests\n(\n*\nargs\n):\nreturn\nload_package_tests\n(\nos\n.\npath\n.\ndirname\n(\n__file__\n),\n*\nargs\n)\ntest.support.\ndetect_api_mismatch\n(\nref_api\n,\nother_api\n,\n*\n,\nignore\n=\n()\n)\n¶\nReturns the set of attributes, functions or methods of\nref_api\nnot\nfound on\nother_api\n, except for a defined list of items to be\nignored in this check specified in\nignore\n.\nBy default this skips private attributes beginning with ‘_’ but\nincludes all magic methods, i.e. those starting and ending in ‘__’.\nAdded in version 3.5.\ntest.support.\npatch\n(\ntest_instance\n,\nobject_to_patch\n,\nattr_name\n,\nnew_value\n)\n¶\nOverride\nobject_to_patch.attr_name\nwith\nnew_value\n.  Also add\ncleanup procedure to\ntest_instance\nto restore\nobject_to_patch\nfor\nattr_name\n.  The\nattr_name\nshould be a valid attribute for\nobject_to_patch\n.\ntest.support.\nrun_in_subinterp\n(\ncode\n)\n¶\nRun\ncode\nin subinterpreter.  Raise\nunittest.SkipTest\nif\ntracemalloc\nis enabled.\ntest.support.\ncheck_free_after_iterating\n(\ntest\n,\niter\n,\ncls\n,\nargs\n=\n()\n)\n¶\nAssert instances of\ncls\nare deallocated after iterating.\ntest.support.\nmissing_compiler_executable\n(\ncmd_names\n=\n[]\n)\n¶\nCheck for the existence of the compiler executables whose names are listed\nin\ncmd_names\nor all the compiler executables when\ncmd_names\nis empty\nand return the first missing executable or\nNone\nwhen none is found\nmissing.\ntest.support.\ncheck__all__\n(\ntest_case\n,\nmodule\n,\nname_of_module\n=\nNone\n,\nextra\n=\n()\n,\nnot_exported\n=\n()\n)\n¶\nAssert that the\n__all__\nvariable of\nmodule\ncontains all public names.\nThe module’s public names (its API) are detected automatically\nbased on whether they match the public name convention and were defined in\nmodule\n.\nThe\nname_of_module\nargument can specify (as a string or tuple thereof) what\nmodule(s) an API could be defined in order to be detected as a public\nAPI. One case for this is when\nmodule\nimports part of its public API from\nother modules, possibly a C backend (like\ncsv\nand its\n_csv\n).\nThe\nextra\nargument can be a set of names that wouldn’t otherwise be automatically\ndetected as “public”, like objects without a proper\n__module__\nattribute. If provided, it will be added to the automatically detected ones.\nThe\nnot_exported\nargument can be a set of names that must not be treated\nas part of the public API even though their names indicate otherwise.\nExample use:\nimport\nbar\nimport\nfoo\nimport\nunittest\nfrom\ntest\nimport\nsupport\nclass\nMiscTestCase\n(\nunittest\n.\nTestCase\n):\ndef\ntest__all__\n(\nself\n):\nsupport\n.\ncheck__all__\n(\nself\n,\nfoo\n)\nclass\nOtherTestCase\n(\nunittest\n.\nTestCase\n):\ndef\ntest__all__\n(\nself\n):\nextra\n=\n{\n'BAR_CONST'\n,\n'FOO_CONST'\n}\nnot_exported\n=\n{\n'baz'\n}\n# Undocumented name.\n# bar imports part of its API from _bar.\nsupport\n.\ncheck__all__\n(\nself\n,\nbar\n,\n(\n'bar'\n,\n'_bar'\n),\nextra\n=\nextra\n,\nnot_exported\n=\nnot_exported\n)\nAdded in version 3.6.\ntest.support.\nskip_if_broken_multiprocessing_synchronize\n(\n)\n¶\nSkip tests if the\nmultiprocessing.synchronize\nmodule is missing, if\nthere is no available semaphore implementation, or if creating a lock raises\nan\nOSError\n.\nAdded in version 3.10.\ntest.support.\ncheck_disallow_instantiation\n(\ntest_case\n,\ntp\n,\n*\nargs\n,\n**\nkwds\n)\n¶\nAssert that type\ntp\ncannot be instantiated using\nargs\nand\nkwds\n.\nAdded in version 3.10.\ntest.support.\nadjust_int_max_str_digits\n(\nmax_digits\n)\n¶\nThis function returns a context manager that will change the global\nsys.set_int_max_str_digits()\nsetting for the duration of the\ncontext to allow execution of test code that needs a different limit\non the number of digits when converting between an integer and string.\nAdded in version 3.11.\nThe\ntest.support\nmodule defines the following classes:\nclass\ntest.support.\nSuppressCrashReport\n¶\nA context manager used to try to prevent crash dialog popups on tests that\nare expected to crash a subprocess.\nOn Windows, it disables Windows Error Reporting dialogs using\nSetErrorMode\n.\nOn UNIX,\nresource.setrlimit()\nis used to set\nresource.RLIMIT_CORE\n’s soft limit to 0 to prevent coredump file\ncreation.\nOn both platforms, the old value is restored by\n__exit__()\n.\nclass\ntest.support.\nSaveSignals\n¶\nClass to save and restore signal handlers registered by the Python signal\nhandler.\nsave\n(\nself\n)\n¶\nSave the signal handlers to a dictionary mapping signal numbers to the\ncurrent signal handler.\nrestore\n(\nself\n)\n¶\nSet the signal numbers from the\nsave()\ndictionary to the saved\nhandler.\nclass\ntest.support.\nMatcher\n¶\nmatches\n(\nself\n,\nd\n,\n**\nkwargs\n)\n¶\nTry to match a single dict with the supplied arguments.\nmatch_value\n(\nself\n,\nk\n,\ndv\n,\nv\n)\n¶\nTry to match a single stored value (\ndv\n) with a supplied value (\nv\n).\ntest.support.socket_helper\n— Utilities for socket tests\n¶\nThe\ntest.support.socket_helper\nmodule provides support for socket tests.\nAdded in version 3.9.\ntest.support.socket_helper.\nIPV6_ENABLED\n¶\nSet to\nTrue\nif IPv6 is enabled on this host,\nFalse\notherwise.\ntest.support.socket_helper.\nfind_unused_port\n(\nfamily\n=\nsocket.AF_INET\n,\nsocktype\n=\nsocket.SOCK_STREAM\n)\n¶\nReturns an unused port that should be suitable for binding.  This is\nachieved by creating a temporary socket with the same family and type as\nthe\nsock\nparameter (default is\nAF_INET\n,\nSOCK_STREAM\n),\nand binding it to the specified host address (defaults to\n0.0.0.0\n)\nwith the port set to 0, eliciting an unused ephemeral port from the OS.\nThe temporary socket is then closed and deleted, and the ephemeral port is\nreturned.\nEither this method or\nbind_port()\nshould be used for any tests\nwhere a server socket needs to be bound to a particular port for the\nduration of the test.\nWhich one to use depends on whether the calling code is creating a Python\nsocket, or if an unused port needs to be provided in a constructor\nor passed to an external program (i.e. the\n-accept\nargument to\nopenssl’s s_server mode).  Always prefer\nbind_port()\nover\nfind_unused_port()\nwhere possible.  Using a hard coded port is\ndiscouraged since it can make multiple instances of the test impossible to\nrun simultaneously, which is a problem for buildbots.\ntest.support.socket_helper.\nbind_port\n(\nsock\n,\nhost\n=\nHOST\n)\n¶\nBind the socket to a free port and return the port number.  Relies on\nephemeral ports in order to ensure we are using an unbound port.  This is\nimportant as many tests may be running simultaneously, especially in a\nbuildbot environment.  This method raises an exception if the\nsock.family\nis\nAF_INET\nand\nsock.type\nis\nSOCK_STREAM\n, and the socket has\nSO_REUSEADDR\nor\nSO_REUSEPORT\nset on it.\nTests should never set these socket options for TCP/IP sockets.\nThe only case for setting these options is testing multicasting via\nmultiple UDP sockets.\nAdditionally, if the\nSO_EXCLUSIVEADDRUSE\nsocket option is\navailable (i.e. on Windows), it will be set on the socket.  This will\nprevent anyone else from binding to our host/port for the duration of the\ntest.\ntest.support.socket_helper.\nbind_unix_socket\n(\nsock\n,\naddr\n)\n¶\nBind a Unix socket, raising\nunittest.SkipTest\nif\nPermissionError\nis raised.\n@\ntest.support.socket_helper.\nskip_unless_bind_unix_socket\n¶\nA decorator for running tests that require a functional\nbind()\nfor Unix\nsockets.\ntest.support.socket_helper.\ntransient_internet\n(\nresource_name\n,\n*\n,\ntimeout\n=\n30.0\n,\nerrnos\n=\n()\n)\n¶\nA context manager that raises\nResourceDenied\nwhen\nvarious issues with the internet connection manifest themselves as\nexceptions.\ntest.support.script_helper\n— Utilities for the Python execution tests\n¶\nThe\ntest.support.script_helper\nmodule provides support for Python’s\nscript execution tests.\ntest.support.script_helper.\ninterpreter_requires_environment\n(\n)\n¶\nReturn\nTrue\nif\nsys.executable\ninterpreter\nrequires environment\nvariables in order to be able to run at all.\nThis is designed to be used with\n@unittest.skipIf()\nto annotate tests\nthat need to use an\nassert_python*()\nfunction to launch an isolated\nmode (\n-I\n) or no environment mode (\n-E\n) sub-interpreter process.\nA normal build & test does not run into this situation but it can happen\nwhen trying to run the standard library test suite from an interpreter that\ndoesn’t have an obvious home with Python’s current home finding logic.\nSetting\nPYTHONHOME\nis one way to get most of the testsuite to run\nin that situation.\nPYTHONPATH\nor\nPYTHONUSERSITE\nare\nother common environment variables that might impact whether or not the\ninterpreter can start.\ntest.support.script_helper.\nrun_python_until_end\n(\n*\nargs\n,\n**\nenv_vars\n)\n¶\nSet up the environment based on\nenv_vars\nfor running the interpreter\nin a subprocess.  The values can include\n__isolated\n,\n__cleanenv\n,\n__cwd\n, and\nTERM\n.\nChanged in version 3.9:\nThe function no longer strips whitespaces from\nstderr\n.\ntest.support.script_helper.\nassert_python_ok\n(\n*\nargs\n,\n**\nenv_vars\n)\n¶\nAssert that running the interpreter with\nargs\nand optional environment\nvariables\nenv_vars\nsucceeds (\nrc\n==\n0\n) and return a\n(return\ncode,\nstdout,\nstderr)\ntuple.\nIf the\n__cleanenv\nkeyword-only parameter is set,\nenv_vars\nis used as a fresh\nenvironment.\nPython is started in isolated mode (command line option\n-I\n),\nexcept if the\n__isolated\nkeyword-only parameter is set to\nFalse\n.\nChanged in version 3.9:\nThe function no longer strips whitespaces from\nstderr\n.\ntest.support.script_helper.\nassert_python_failure\n(\n*\nargs\n,\n**\nenv_vars\n)\n¶\nAssert that running the interpreter with\nargs\nand optional environment\nvariables\nenv_vars\nfails (\nrc\n!=\n0\n) and return a\n(return\ncode,\nstdout,\nstderr)\ntuple.\nSee\nassert_python_ok()\nfor more options.\nChanged in version 3.9:\nThe function no longer strips whitespaces from\nstderr\n.\ntest.support.script_helper.\nspawn_python\n(\n*\nargs\n,\nstdout\n=\nsubprocess.PIPE\n,\nstderr\n=\nsubprocess.STDOUT\n,\n**\nkw\n)\n¶\nRun a Python subprocess with the given arguments.\nkw\nis extra keyword args to pass to\nsubprocess.Popen()\n. Returns a\nsubprocess.Popen\nobject.\ntest.support.script_helper.\nkill_python\n(\np\n)\n¶\nRun the given\nsubprocess.Popen\nprocess until completion and return\nstdout.\ntest.support.script_helper.\nmake_script\n(\nscript_dir\n,\nscript_basename\n,\nsource\n,\nomit_suffix\n=\nFalse\n)\n¶\nCreate script containing\nsource\nin path\nscript_dir\nand\nscript_basename\n.\nIf\nomit_suffix\nis\nFalse\n, append\n.py\nto the name.  Return the full\nscript path.\ntest.support.script_helper.\nmake_zip_script\n(\nzip_dir\n,\nzip_basename\n,\nscript_name\n,\nname_in_zip\n=\nNone\n)\n¶\nCreate zip file at\nzip_dir\nand\nzip_basename\nwith extension\nzip\nwhich\ncontains the files in\nscript_name\n.\nname_in_zip\nis the archive name.\nReturn a tuple containing\n(full\npath,\nfull\npath\nof\narchive\nname)\n.\ntest.support.script_helper.\nmake_pkg\n(\npkg_dir\n,\ninit_source\n=\n''\n)\n¶\nCreate a directory named\npkg_dir\ncontaining an\n__init__\nfile with\ninit_source\nas its contents.\ntest.support.script_helper.\nmake_zip_pkg\n(\nzip_dir\n,\nzip_basename\n,\npkg_name\n,\nscript_basename\n,\nsource\n,\ndepth\n=\n1\n,\ncompiled\n=\nFalse\n)\n¶\nCreate a zip package directory with a path of\nzip_dir\nand\nzip_basename\ncontaining an empty\n__init__\nfile and a file\nscript_basename\ncontaining the\nsource\n.  If\ncompiled\nis\nTrue\n, both source files will\nbe compiled and added to the zip package.  Return a tuple of the full zip\npath and the archive name for the zip file.\ntest.support.bytecode_helper\n— Support tools for testing correct bytecode generation\n¶\nThe\ntest.support.bytecode_helper\nmodule provides support for testing\nand inspecting bytecode generation.\nAdded in version 3.9.\nThe module defines the following class:\nclass\ntest.support.bytecode_helper.\nBytecodeTestCase\n(\nunittest.TestCase\n)\n¶\nThis class has custom assertion methods for inspecting bytecode.\nBytecodeTestCase.\nget_disassembly_as_string\n(\nco\n)\n¶\nReturn the disassembly of\nco\nas string.\nBytecodeTestCase.\nassertInBytecode\n(\nx\n,\nopname\n,\nargval\n=\n_UNSPECIFIED\n)\n¶\nReturn instr if\nopname\nis found, otherwise throws\nAssertionError\n.\nBytecodeTestCase.\nassertNotInBytecode\n(\nx\n,\nopname\n,\nargval\n=\n_UNSPECIFIED\n)\n¶\nThrows\nAssertionError\nif\nopname\nis found.\ntest.support.threading_helper\n— Utilities for threading tests\n¶\nThe\ntest.support.threading_helper\nmodule provides support for threading tests.\nAdded in version 3.10.\ntest.support.threading_helper.\njoin_thread\n(\nthread\n,\ntimeout\n=\nNone\n)\n¶\nJoin a\nthread\nwithin\ntimeout\n.  Raise an\nAssertionError\nif thread\nis still alive after\ntimeout\nseconds.\n@\ntest.support.threading_helper.\nreap_threads\n¶\nDecorator to ensure the threads are cleaned up even if the test fails.\ntest.support.threading_helper.\nstart_threads\n(\nthreads\n,\nunlock\n=\nNone\n)\n¶\nContext manager to start\nthreads\n, which is a sequence of threads.\nunlock\nis a function called after the threads are started, even if an\nexception was raised; an example would be\nthreading.Event.set()\n.\nstart_threads\nwill attempt to join the started threads upon exit.\ntest.support.threading_helper.\nthreading_cleanup\n(\n*\noriginal_values\n)\n¶\nCleanup up threads not specified in\noriginal_values\n.  Designed to emit\na warning if a test leaves running threads in the background.\ntest.support.threading_helper.\nthreading_setup\n(\n)\n¶\nReturn current thread count and copy of dangling threads.\ntest.support.threading_helper.\nwait_threads_exit\n(\ntimeout\n=\nNone\n)\n¶\nContext manager to wait until all threads created in the\nwith\nstatement\nexit.\ntest.support.threading_helper.\ncatch_threading_exception\n(\n)\n¶\nContext manager catching\nthreading.Thread\nexception using\nthreading.excepthook()\n.\nAttributes set when an exception is caught:\nexc_type\nexc_value\nexc_traceback\nthread\nSee\nthreading.excepthook()\ndocumentation.\nThese attributes are deleted at the context manager exit.\nUsage:\nwith\nthreading_helper\n.\ncatch_threading_exception\n()\nas\ncm\n:\n# code spawning a thread which raises an exception\n...\n# check the thread exception, use cm attributes:\n# exc_type, exc_value, exc_traceback, thread\n...\n# exc_type, exc_value, exc_traceback, thread attributes of cm no longer\n# exists at this point\n# (to avoid reference cycles)\nAdded in version 3.8.\ntest.support.os_helper\n— Utilities for os tests\n¶\nThe\ntest.support.os_helper\nmodule provides support for os tests.\nAdded in version 3.10.\ntest.support.os_helper.\nFS_NONASCII\n¶\nA non-ASCII character encodable by\nos.fsencode()\n.\ntest.support.os_helper.\nSAVEDCWD\n¶\nSet to\nos.getcwd()\n.\ntest.support.os_helper.\nTESTFN\n¶\nSet to a name that is safe to use as the name of a temporary file.  Any\ntemporary file that is created should be closed and unlinked (removed).\ntest.support.os_helper.\nTESTFN_NONASCII\n¶\nSet to a filename containing the\nFS_NONASCII\ncharacter, if it exists.\nThis guarantees that if the filename exists, it can be encoded and decoded\nwith the default filesystem encoding. This allows tests that require a\nnon-ASCII filename to be easily skipped on platforms where they can’t work.\ntest.support.os_helper.\nTESTFN_UNENCODABLE\n¶\nSet to a filename (str type) that should not be able to be encoded by file\nsystem encoding in strict mode.  It may be\nNone\nif it’s not possible to\ngenerate such a filename.\ntest.support.os_helper.\nTESTFN_UNDECODABLE\n¶\nSet to a filename (bytes type) that should not be able to be decoded by\nfile system encoding in strict mode.  It may be\nNone\nif it’s not\npossible to generate such a filename.\ntest.support.os_helper.\nTESTFN_UNICODE\n¶\nSet to a non-ASCII name for a temporary file.\nclass\ntest.support.os_helper.\nEnvironmentVarGuard\n¶\nClass used to temporarily set or unset environment variables.  Instances can\nbe used as a context manager and have a complete dictionary interface for\nquerying/modifying the underlying\nos.environ\n. After exit from the\ncontext manager all changes to environment variables done through this\ninstance will be rolled back.\nChanged in version 3.1:\nAdded dictionary interface.\nclass\ntest.support.os_helper.\nFakePath\n(\npath\n)\n¶\nSimple\npath-like object\n.  It implements the\n__fspath__()\nmethod which just returns the\npath\nargument.  If\npath\nis an exception,\nit will be raised in\n__fspath__()\n.\nEnvironmentVarGuard.\nset\n(\nenvvar\n,\nvalue\n)\n¶\nTemporarily set the environment variable\nenvvar\nto the value of\nvalue\n.\nEnvironmentVarGuard.\nunset\n(\nenvvar\n)\n¶\nTemporarily unset the environment variable\nenvvar\n.\ntest.support.os_helper.\ncan_symlink\n(\n)\n¶\nReturn\nTrue\nif the OS supports symbolic links,\nFalse\notherwise.\ntest.support.os_helper.\ncan_xattr\n(\n)\n¶\nReturn\nTrue\nif the OS supports xattr,\nFalse\notherwise.\ntest.support.os_helper.\nchange_cwd\n(\npath\n,\nquiet\n=\nFalse\n)\n¶\nA context manager that temporarily changes the current working\ndirectory to\npath\nand yields the directory.\nIf\nquiet\nis\nFalse\n, the context manager raises an exception\non error.  Otherwise, it issues only a warning and keeps the current\nworking directory the same.\ntest.support.os_helper.\ncreate_empty_file\n(\nfilename\n)\n¶\nCreate an empty file with\nfilename\n.  If it already exists, truncate it.\ntest.support.os_helper.\nfd_count\n(\n)\n¶\nCount the number of open file descriptors.\ntest.support.os_helper.\nfs_is_case_insensitive\n(\ndirectory\n)\n¶\nReturn\nTrue\nif the file system for\ndirectory\nis case-insensitive.\ntest.support.os_helper.\nmake_bad_fd\n(\n)\n¶\nCreate an invalid file descriptor by opening and closing a temporary file,\nand returning its descriptor.\ntest.support.os_helper.\nrmdir\n(\nfilename\n)\n¶\nCall\nos.rmdir()\non\nfilename\n.  On Windows platforms, this is\nwrapped with a wait loop that checks for the existence of the file,\nwhich is needed due to antivirus programs that can hold files open and prevent\ndeletion.\ntest.support.os_helper.\nrmtree\n(\npath\n)\n¶\nCall\nshutil.rmtree()\non\npath\nor call\nos.lstat()\nand\nos.rmdir()\nto remove a path and its contents.  As with\nrmdir()\n,\non Windows platforms\nthis is wrapped with a wait loop that checks for the existence of the files.\n@\ntest.support.os_helper.\nskip_unless_symlink\n¶\nA decorator for running tests that require support for symbolic links.\n@\ntest.support.os_helper.\nskip_unless_xattr\n¶\nA decorator for running tests that require support for xattr.\ntest.support.os_helper.\ntemp_cwd\n(\nname\n=\n'tempcwd'\n,\nquiet\n=\nFalse\n)\n¶\nA context manager that temporarily creates a new directory and\nchanges the current working directory (CWD).\nThe context manager creates a temporary directory in the current\ndirectory with name\nname\nbefore temporarily changing the current\nworking directory.  If\nname\nis\nNone\n, the temporary directory is\ncreated using\ntempfile.mkdtemp()\n.\nIf\nquiet\nis\nFalse\nand it is not possible to create or change\nthe CWD, an error is raised.  Otherwise, only a warning is raised\nand the original CWD is used.\ntest.support.os_helper.\ntemp_dir\n(\npath\n=\nNone\n,\nquiet\n=\nFalse\n)\n¶\nA context manager that creates a temporary directory at\npath\nand\nyields the directory.\nIf\npath\nis\nNone\n, the temporary directory is created using\ntempfile.mkdtemp()\n.  If\nquiet\nis\nFalse\n, the context manager\nraises an exception on error.  Otherwise, if\npath\nis specified and\ncannot be created, only a warning is issued.\ntest.support.os_helper.\ntemp_umask\n(\numask\n)\n¶\nA context manager that temporarily sets the process umask.\ntest.support.os_helper.\nunlink\n(\nfilename\n)\n¶\nCall\nos.unlink()\non\nfilename\n.  As with\nrmdir()\n,\non Windows platforms, this is\nwrapped with a wait loop that checks for the existence of the file.\ntest.support.import_helper\n— Utilities for import tests\n¶\nThe\ntest.support.import_helper\nmodule provides support for import tests.\nAdded in version 3.10.\ntest.support.import_helper.\nforget\n(\nmodule_name\n)\n¶\nRemove the module named\nmodule_name\nfrom\nsys.modules\nand delete any\nbyte-compiled files of the module.\ntest.support.import_helper.\nimport_fresh_module\n(\nname\n,\nfresh\n=\n()\n,\nblocked\n=\n()\n,\ndeprecated\n=\nFalse\n)\n¶\nThis function imports and returns a fresh copy of the named Python module\nby removing the named module from\nsys.modules\nbefore doing the import.\nNote that unlike\nreload()\n, the original module is not affected by\nthis operation.\nfresh\nis an iterable of additional module names that are also removed\nfrom the\nsys.modules\ncache before doing the import.\nblocked\nis an iterable of module names that are replaced with\nNone\nin the module cache during the import to ensure that attempts to import\nthem raise\nImportError\n.\nThe named module and any modules named in the\nfresh\nand\nblocked\nparameters are saved before starting the import and then reinserted into\nsys.modules\nwhen the fresh import is complete.\nModule and package deprecation messages are suppressed during this import\nif\ndeprecated\nis\nTrue\n.\nThis function will raise\nImportError\nif the named module cannot be\nimported.\nExample use:\n# Get copies of the warnings module for testing without affecting the\n# version being used by the rest of the test suite. One copy uses the\n# C implementation, the other is forced to use the pure Python fallback\n# implementation\npy_warnings\n=\nimport_fresh_module\n(\n'warnings'\n,\nblocked\n=\n[\n'_warnings'\n])\nc_warnings\n=\nimport_fresh_module\n(\n'warnings'\n,\nfresh\n=\n[\n'_warnings'\n])\nAdded in version 3.1.\ntest.support.import_helper.\nimport_module\n(\nname\n,\ndeprecated\n=\nFalse\n,\n*\n,\nrequired_on\n=\n()\n)\n¶\nThis function imports and returns the named module. Unlike a normal\nimport, this function raises\nunittest.SkipTest\nif the module\ncannot be imported.\nModule and package deprecation messages are suppressed during this import\nif\ndeprecated\nis\nTrue\n.  If a module is required on a platform but\noptional for others, set\nrequired_on\nto an iterable of platform prefixes\nwhich will be compared against\nsys.platform\n.\nAdded in version 3.1.\ntest.support.import_helper.\nmodules_setup\n(\n)\n¶\nReturn a copy of\nsys.modules\n.\ntest.support.import_helper.\nmodules_cleanup\n(\noldmodules\n)\n¶\nRemove modules except for\noldmodules\nand\nencodings\nin order to\npreserve internal cache.\ntest.support.import_helper.\nunload\n(\nname\n)\n¶\nDelete\nname\nfrom\nsys.modules\n.\ntest.support.import_helper.\nmake_legacy_pyc\n(\nsource\n)\n¶\nMove a\nPEP 3147\n/\nPEP 488\npyc file to its legacy pyc location and return the file\nsystem path to the legacy pyc file.  The\nsource\nvalue is the file system\npath to the source file.  It does not need to exist, however the PEP\n3147/488 pyc file must exist.\nclass\ntest.support.import_helper.\nCleanImport\n(\n*\nmodule_names\n)\n¶\nA context manager to force import to return a new module reference.  This\nis useful for testing module-level behaviors, such as the emission of a\nDeprecationWarning\non import.  Example usage:\nwith\nCleanImport\n(\n'foo'\n):\nimportlib\n.\nimport_module\n(\n'foo'\n)\n# New reference.\nclass\ntest.support.import_helper.\nDirsOnSysPath\n(\n*\npaths\n)\n¶\nA context manager to temporarily add directories to\nsys.path\n.\nThis makes a copy of\nsys.path\n, appends any directories given\nas positional arguments, then reverts\nsys.path\nto the copied\nsettings when the context ends.\nNote that\nall\nsys.path\nmodifications in the body of the\ncontext manager, including replacement of the object,\nwill be reverted at the end of the block.\ntest.support.warnings_helper\n— Utilities for warnings tests\n¶\nThe\ntest.support.warnings_helper\nmodule provides support for warnings tests.\nAdded in version 3.10.\ntest.support.warnings_helper.\nignore_warnings\n(\n*\n,\ncategory\n)\n¶\nSuppress warnings that are instances of\ncategory\n,\nwhich must be\nWarning\nor a subclass.\nRoughly equivalent to\nwarnings.catch_warnings()\nwith\nwarnings.simplefilter('ignore',\ncategory=category)\n.\nFor example:\n@warning_helper\n.\nignore_warnings\n(\ncategory\n=\nDeprecationWarning\n)\ndef\ntest_suppress_warning\n():\n# do something\nAdded in version 3.8.\ntest.support.warnings_helper.\ncheck_no_resource_warning\n(\ntestcase\n)\n¶\nContext manager to check that no\nResourceWarning\nwas raised.  You\nmust remove the object which may emit\nResourceWarning\nbefore the\nend of the context manager.\ntest.support.warnings_helper.\ncheck_syntax_warning\n(\ntestcase\n,\nstatement\n,\nerrtext\n=\n''\n,\n*\n,\nlineno\n=\n1\n,\noffset\n=\nNone\n)\n¶\nTest for syntax warning in\nstatement\nby attempting to compile\nstatement\n.\nTest also that the\nSyntaxWarning\nis emitted only once, and that it\nwill be converted to a\nSyntaxError\nwhen turned into error.\ntestcase\nis the\nunittest\ninstance for the test.\nerrtext\nis the\nregular expression which should match the string representation of the\nemitted\nSyntaxWarning\nand raised\nSyntaxError\n.  If\nlineno\nis not\nNone\n, compares to the line of the warning and exception.\nIf\noffset\nis not\nNone\n, compares to the offset of the exception.\nAdded in version 3.8.\ntest.support.warnings_helper.\ncheck_warnings\n(\n*\nfilters\n,\nquiet\n=\nTrue\n)\n¶\nA convenience wrapper for\nwarnings.catch_warnings()\nthat makes it\neasier to test that a warning was correctly raised.  It is approximately\nequivalent to calling\nwarnings.catch_warnings(record=True)\nwith\nwarnings.simplefilter()\nset to\nalways\nand with the option to\nautomatically validate the results that are recorded.\ncheck_warnings\naccepts 2-tuples of the form\n(\"message\nregexp\",\nWarningCategory)\nas positional arguments. If one or more\nfilters\nare\nprovided, or if the optional keyword argument\nquiet\nis\nFalse\n,\nit checks to make sure the warnings are as expected:  each specified filter\nmust match at least one of the warnings raised by the enclosed code or the\ntest fails, and if any warnings are raised that do not match any of the\nspecified filters the test fails.  To disable the first of these checks,\nset\nquiet\nto\nTrue\n.\nIf no arguments are specified, it defaults to:\ncheck_warnings\n((\n\"\"\n,\nWarning\n),\nquiet\n=\nTrue\n)\nIn this case all warnings are caught and no errors are raised.\nOn entry to the context manager, a\nWarningRecorder\ninstance is\nreturned. The underlying warnings list from\ncatch_warnings()\nis available via the recorder object’s\nwarnings\nattribute.  As a convenience, the attributes of the object\nrepresenting the most recent warning can also be accessed directly through\nthe recorder object (see example below).  If no warning has been raised,\nthen any of the attributes that would otherwise be expected on an object\nrepresenting a warning will return\nNone\n.\nThe recorder object also has a\nreset()\nmethod, which clears the\nwarnings list.\nThe context manager is designed to be used like this:\nwith\ncheck_warnings\n((\n\"assertion is always true\"\n,\nSyntaxWarning\n),\n(\n\"\"\n,\nUserWarning\n)):\nexec\n(\n'assert(False, \"Hey!\")'\n)\nwarnings\n.\nwarn\n(\nUserWarning\n(\n\"Hide me!\"\n))\nIn this case if either warning was not raised, or some other warning was\nraised,\ncheck_warnings()\nwould raise an error.\nWhen a test needs to look more deeply into the warnings, rather than\njust checking whether or not they occurred, code like this can be used:\nwith\ncheck_warnings\n(\nquiet\n=\nTrue\n)\nas\nw\n:\nwarnings\n.\nwarn\n(\n\"foo\"\n)\nassert\nstr\n(\nw\n.\nargs\n[\n0\n])\n==\n\"foo\"\nwarnings\n.\nwarn\n(\n\"bar\"\n)\nassert\nstr\n(\nw\n.\nargs\n[\n0\n])\n==\n\"bar\"\nassert\nstr\n(\nw\n.\nwarnings\n[\n0\n]\n.\nargs\n[\n0\n])\n==\n\"foo\"\nassert\nstr\n(\nw\n.\nwarnings\n[\n1\n]\n.\nargs\n[\n0\n])\n==\n\"bar\"\nw\n.\nreset\n()\nassert\nlen\n(\nw\n.\nwarnings\n)\n==\n0\nHere all warnings will be caught, and the test code tests the captured\nwarnings directly.\nChanged in version 3.2:\nNew optional arguments\nfilters\nand\nquiet\n.\nclass\ntest.support.warnings_helper.\nWarningsRecorder\n¶\nClass used to record warnings for unit tests. See documentation of\ncheck_warnings()\nabove for more details.\nTable of Contents\ntest\n— Regression tests package for Python\nWriting Unit Tests for the\ntest\npackage\nRunning tests using the command-line interface\ntest.support\n— Utilities for the Python test suite\ntest.support.socket_helper\n— Utilities for socket tests\ntest.support.script_helper\n— Utilities for the Python execution tests\ntest.support.bytecode_helper\n— Support tools for testing correct bytecode generation\ntest.support.threading_helper\n— Utilities for threading tests\ntest.support.os_helper\n— Utilities for os tests\ntest.support.import_helper\n— Utilities for import tests\ntest.support.warnings_helper\n— Utilities for warnings tests\nPrevious topic\nunittest.mock\n— getting started\nNext topic\nDebugging and Profiling\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nDevelopment Tools\n»\ntest\n— Regression tests package for Python\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/test.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12373.1434262
  },
  {
    "title": "sys — System-specific parameters and functions¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nPython Runtime Services\n»\nsys\n— System-specific parameters and functions\n|\nTheme\nAuto\nLight\nDark\n|\nsys\n— System-specific parameters and functions\n¶\nThis module provides access to some variables used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter. It is\nalways available. Unless explicitly noted otherwise, all variables are read-only.\nsys.\nabiflags\n¶\nOn POSIX systems where Python was built with the standard\nconfigure\nscript, this contains the ABI flags as specified by\nPEP 3149\n.\nAdded in version 3.2.\nChanged in version 3.8:\nDefault flags became an empty string (\nm\nflag for pymalloc has been\nremoved).\nAvailability\n: Unix.\nsys.\naddaudithook\n(\nhook\n)\n¶\nAppend the callable\nhook\nto the list of active auditing hooks for the\ncurrent (sub)interpreter.\nWhen an auditing event is raised through the\nsys.audit()\nfunction, each\nhook will be called in the order it was added with the event name and the\ntuple of arguments. Native hooks added by\nPySys_AddAuditHook()\nare\ncalled first, followed by hooks added in the current (sub)interpreter.  Hooks\ncan then log the event, raise an exception to abort the operation,\nor terminate the process entirely.\nNote that audit hooks are primarily for collecting information about internal\nor otherwise unobservable actions, whether by Python or libraries written in\nPython. They are not suitable for implementing a “sandbox”. In particular,\nmalicious code can trivially disable or bypass hooks added using this\nfunction. At a minimum, any security-sensitive hooks must be added using the\nC API\nPySys_AddAuditHook()\nbefore initialising the runtime, and any\nmodules allowing arbitrary memory modification (such as\nctypes\n) should\nbe completely removed or closely monitored.\nCalling\nsys.addaudithook()\nwill itself raise an auditing event\nnamed\nsys.addaudithook\nwith no arguments. If any\nexisting hooks raise an exception derived from\nRuntimeError\n, the\nnew hook will not be added and the exception suppressed. As a result,\ncallers cannot assume that their hook has been added unless they control\nall existing hooks.\nSee the\naudit events table\nfor all events raised by\nCPython, and\nPEP 578\nfor the original design discussion.\nAdded in version 3.8.\nChanged in version 3.8.1:\nExceptions derived from\nException\nbut not\nRuntimeError\nare no longer suppressed.\nCPython implementation detail:\nWhen tracing is enabled (see\nsettrace()\n), Python hooks are only\ntraced if the callable has a\n__cantrace__\nmember that is set to a\ntrue value. Otherwise, trace functions will skip the hook.\nsys.\nargv\n¶\nThe list of command line arguments passed to a Python script.\nargv[0]\nis the\nscript name (it is operating system dependent whether this is a full pathname or\nnot).  If the command was executed using the\n-c\ncommand line option to\nthe interpreter,\nargv[0]\nis set to the string\n'-c'\n.  If no script name\nwas passed to the Python interpreter,\nargv[0]\nis the empty string.\nTo loop over the standard input, or the list of files given on the\ncommand line, see the\nfileinput\nmodule.\nSee also\nsys.orig_argv\n.\nNote\nOn Unix, command line arguments are passed by bytes from OS.  Python decodes\nthem with filesystem encoding and “surrogateescape” error handler.\nWhen you need original bytes, you can get it by\n[os.fsencode(arg)\nfor\narg\nin\nsys.argv]\n.\nsys.\naudit\n(\nevent\n,\n*\nargs\n)\n¶\nRaise an auditing event and trigger any active auditing hooks.\nevent\nis a string identifying the event, and\nargs\nmay contain\noptional arguments with more information about the event.  The\nnumber and types of arguments for a given event are considered a\npublic and stable API and should not be modified between releases.\nFor example, one auditing event is named\nos.chdir\n. This event has\none argument called\npath\nthat will contain the requested new\nworking directory.\nsys.audit()\nwill call the existing auditing hooks, passing\nthe event name and arguments, and will re-raise the first exception\nfrom any hook. In general, if an exception is raised, it should not\nbe handled and the process should be terminated as quickly as\npossible. This allows hook implementations to decide how to respond\nto particular events: they can merely log the event or abort the\noperation by raising an exception.\nHooks are added using the\nsys.addaudithook()\nor\nPySys_AddAuditHook()\nfunctions.\nThe native equivalent of this function is\nPySys_Audit()\n. Using the\nnative function is preferred when possible.\nSee the\naudit events table\nfor all events raised by\nCPython.\nAdded in version 3.8.\nsys.\nbase_exec_prefix\n¶\nSet during Python startup, before\nsite.py\nis run, to the same value as\nexec_prefix\n. If not running in a\nvirtual environment\n, the values will stay the same; if\nsite.py\nfinds that a virtual environment is in use, the values of\nprefix\nand\nexec_prefix\nwill be changed to point to the\nvirtual environment, whereas\nbase_prefix\nand\nbase_exec_prefix\nwill remain pointing to the base Python\ninstallation (the one which the virtual environment was created from).\nAdded in version 3.3.\nsys.\nbase_prefix\n¶\nSet during Python startup, before\nsite.py\nis run, to the same value as\nprefix\n. If not running in a\nvirtual environment\n, the values\nwill stay the same; if\nsite.py\nfinds that a virtual environment is in\nuse, the values of\nprefix\nand\nexec_prefix\nwill be changed to\npoint to the virtual environment, whereas\nbase_prefix\nand\nbase_exec_prefix\nwill remain pointing to the base Python\ninstallation (the one which the virtual environment was created from).\nAdded in version 3.3.\nsys.\nbyteorder\n¶\nAn indicator of the native byte order.  This will have the value\n'big'\non\nbig-endian (most-significant byte first) platforms, and\n'little'\non\nlittle-endian (least-significant byte first) platforms.\nsys.\nbuiltin_module_names\n¶\nA tuple of strings containing the names of all modules that are compiled into this\nPython interpreter.  (This information is not available in any other way —\nmodules.keys()\nonly lists the imported modules.)\nSee also the\nsys.stdlib_module_names\nlist.\nsys.\ncall_tracing\n(\nfunc\n,\nargs\n)\n¶\nCall\nfunc(*args)\n, while tracing is enabled.  The tracing state is saved,\nand restored afterwards.  This is intended to be called from a debugger from\na checkpoint, to recursively debug or profile some other code.\nTracing is suspended while calling a tracing function set by\nsettrace()\nor\nsetprofile()\nto avoid infinite recursion.\ncall_tracing()\nenables explicit recursion of the tracing function.\nsys.\ncopyright\n¶\nA string containing the copyright pertaining to the Python interpreter.\nsys.\n_clear_type_cache\n(\n)\n¶\nClear the internal type cache. The type cache is used to speed up attribute\nand method lookups. Use the function\nonly\nto drop unnecessary references\nduring reference leak debugging.\nThis function should be used for internal and specialized purposes only.\nDeprecated since version 3.13:\nUse the more general\n_clear_internal_caches()\nfunction instead.\nsys.\n_clear_internal_caches\n(\n)\n¶\nClear all internal performance-related caches. Use this function\nonly\nto\nrelease unnecessary references and memory blocks when hunting for leaks.\nAdded in version 3.13.\nsys.\n_current_frames\n(\n)\n¶\nReturn a dictionary mapping each thread’s identifier to the topmost stack frame\ncurrently active in that thread at the time the function is called. Note that\nfunctions in the\ntraceback\nmodule can build the call stack given such a\nframe.\nThis is most useful for debugging deadlock:  this function does not require the\ndeadlocked threads’ cooperation, and such threads’ call stacks are frozen for as\nlong as they remain deadlocked.  The frame returned for a non-deadlocked thread\nmay bear no relationship to that thread’s current activity by the time calling\ncode examines the frame.\nThis function should be used for internal and specialized purposes only.\nRaises an\nauditing event\nsys._current_frames\nwith no arguments.\nsys.\n_current_exceptions\n(\n)\n¶\nReturn a dictionary mapping each thread’s identifier to the topmost exception\ncurrently active in that thread at the time the function is called.\nIf a thread is not currently handling an exception, it is not included in\nthe result dictionary.\nThis is most useful for statistical profiling.\nThis function should be used for internal and specialized purposes only.\nRaises an\nauditing event\nsys._current_exceptions\nwith no arguments.\nChanged in version 3.12:\nEach value in the dictionary is now a single exception instance, rather\nthan a 3-tuple as returned from\nsys.exc_info()\n.\nsys.\nbreakpointhook\n(\n)\n¶\nThis hook function is called by built-in\nbreakpoint()\n.  By default,\nit drops you into the\npdb\ndebugger, but it can be set to any other\nfunction so that you can choose which debugger gets used.\nThe signature of this function is dependent on what it calls.  For example,\nthe default binding (e.g.\npdb.set_trace()\n) expects no arguments, but\nyou might bind it to a function that expects additional arguments\n(positional and/or keyword).  The built-in\nbreakpoint()\nfunction passes\nits\n*args\nand\n**kws\nstraight through.  Whatever\nbreakpointhooks()\nreturns is returned from\nbreakpoint()\n.\nThe default implementation first consults the environment variable\nPYTHONBREAKPOINT\n.  If that is set to\n\"0\"\nthen this function\nreturns immediately; i.e. it is a no-op.  If the environment variable is\nnot set, or is set to the empty string,\npdb.set_trace()\nis called.\nOtherwise this variable should name a function to run, using Python’s\ndotted-import nomenclature, e.g.\npackage.subpackage.module.function\n.\nIn this case,\npackage.subpackage.module\nwould be imported and the\nresulting module must have a callable named\nfunction()\n.  This is run,\npassing in\n*args\nand\n**kws\n, and whatever\nfunction()\nreturns,\nsys.breakpointhook()\nreturns to the built-in\nbreakpoint()\nfunction.\nNote that if anything goes wrong while importing the callable named by\nPYTHONBREAKPOINT\n, a\nRuntimeWarning\nis reported and the\nbreakpoint is ignored.\nAlso note that if\nsys.breakpointhook()\nis overridden programmatically,\nPYTHONBREAKPOINT\nis\nnot\nconsulted.\nAdded in version 3.7.\nsys.\n_debugmallocstats\n(\n)\n¶\nPrint low-level information to stderr about the state of CPython’s memory\nallocator.\nIf Python is\nbuilt in debug mode\n(\nconfigure\n--with-pydebug\noption\n), it also performs some expensive\ninternal consistency checks.\nAdded in version 3.3.\nCPython implementation detail:\nThis function is specific to CPython.  The exact output format is not\ndefined here, and may change.\nsys.\ndllhandle\n¶\nInteger specifying the handle of the Python DLL.\nAvailability\n: Windows.\nsys.\ndisplayhook\n(\nvalue\n)\n¶\nIf\nvalue\nis not\nNone\n, this function prints\nrepr(value)\nto\nsys.stdout\n, and saves\nvalue\nin\nbuiltins._\n. If\nrepr(value)\nis\nnot encodable to\nsys.stdout.encoding\nwith\nsys.stdout.errors\nerror\nhandler (which is probably\n'strict'\n), encode it to\nsys.stdout.encoding\nwith\n'backslashreplace'\nerror handler.\nsys.displayhook\nis called on the result of evaluating an\nexpression\nentered in an interactive Python session.  The display of these values can be\ncustomized by assigning another one-argument function to\nsys.displayhook\n.\nPseudo-code:\ndef\ndisplayhook\n(\nvalue\n):\nif\nvalue\nis\nNone\n:\nreturn\n# Set '_' to None to avoid recursion\nbuiltins\n.\n_\n=\nNone\ntext\n=\nrepr\n(\nvalue\n)\ntry\n:\nsys\n.\nstdout\n.\nwrite\n(\ntext\n)\nexcept\nUnicodeEncodeError\n:\nbytes\n=\ntext\n.\nencode\n(\nsys\n.\nstdout\n.\nencoding\n,\n'backslashreplace'\n)\nif\nhasattr\n(\nsys\n.\nstdout\n,\n'buffer'\n):\nsys\n.\nstdout\n.\nbuffer\n.\nwrite\n(\nbytes\n)\nelse\n:\ntext\n=\nbytes\n.\ndecode\n(\nsys\n.\nstdout\n.\nencoding\n,\n'strict'\n)\nsys\n.\nstdout\n.\nwrite\n(\ntext\n)\nsys\n.\nstdout\n.\nwrite\n(\n\"\n\\n\n\"\n)\nbuiltins\n.\n_\n=\nvalue\nChanged in version 3.2:\nUse\n'backslashreplace'\nerror handler on\nUnicodeEncodeError\n.\nsys.\ndont_write_bytecode\n¶\nIf this is true, Python won’t try to write\n.pyc\nfiles on the\nimport of source modules.  This value is initially set to\nTrue\nor\nFalse\ndepending on the\n-B\ncommand line option and the\nPYTHONDONTWRITEBYTECODE\nenvironment variable, but you can set it\nyourself to control bytecode file generation.\nsys.\n_emscripten_info\n¶\nA\nnamed tuple\nholding information about the environment on the\nwasm32-emscripten\nplatform. The named tuple is provisional and may change\nin the future.\n_emscripten_info.\nemscripten_version\n¶\nEmscripten version as tuple of ints (major, minor, micro), e.g.\n(3,\n1,\n8)\n.\n_emscripten_info.\nruntime\n¶\nRuntime string, e.g. browser user agent,\n'Node.js\nv14.18.2'\n, or\n'UNKNOWN'\n.\n_emscripten_info.\npthreads\n¶\nTrue\nif Python is compiled with Emscripten pthreads support.\n_emscripten_info.\nshared_memory\n¶\nTrue\nif Python is compiled with shared memory support.\nAvailability\n: Emscripten.\nAdded in version 3.11.\nsys.\npycache_prefix\n¶\nIf this is set (not\nNone\n), Python will write bytecode-cache\n.pyc\nfiles to (and read them from) a parallel directory tree rooted at this\ndirectory, rather than from\n__pycache__\ndirectories in the source code\ntree. Any\n__pycache__\ndirectories in the source code tree will be ignored\nand new\n.pyc\nfiles written within the pycache prefix. Thus if you use\ncompileall\nas a pre-build step, you must ensure you run it with the\nsame pycache prefix (if any) that you will use at runtime.\nA relative path is interpreted relative to the current working directory.\nThis value is initially set based on the value of the\n-X\npycache_prefix=PATH\ncommand-line option or the\nPYTHONPYCACHEPREFIX\nenvironment variable (command-line takes\nprecedence). If neither are set, it is\nNone\n.\nAdded in version 3.8.\nsys.\nexcepthook\n(\ntype\n,\nvalue\n,\ntraceback\n)\n¶\nThis function prints out a given traceback and exception to\nsys.stderr\n.\nWhen an exception other than\nSystemExit\nis raised and uncaught, the interpreter calls\nsys.excepthook\nwith three arguments, the exception class, exception\ninstance, and a traceback object.  In an interactive session this happens just\nbefore control is returned to the prompt; in a Python program this happens just\nbefore the program exits.  The handling of such top-level exceptions can be\ncustomized by assigning another three-argument function to\nsys.excepthook\n.\nRaise an auditing event\nsys.excepthook\nwith arguments\nhook\n,\ntype\n,\nvalue\n,\ntraceback\nwhen an uncaught exception occurs.\nIf no hook has been set,\nhook\nmay be\nNone\n. If any hook raises\nan exception derived from\nRuntimeError\nthe call to the hook will\nbe suppressed. Otherwise, the audit hook exception will be reported as\nunraisable and\nsys.excepthook\nwill be called.\nSee also\nThe\nsys.unraisablehook()\nfunction handles unraisable exceptions\nand the\nthreading.excepthook()\nfunction handles exception raised\nby\nthreading.Thread.run()\n.\nsys.\n__breakpointhook__\n¶\nsys.\n__displayhook__\n¶\nsys.\n__excepthook__\n¶\nsys.\n__unraisablehook__\n¶\nThese objects contain the original values of\nbreakpointhook\n,\ndisplayhook\n,\nexcepthook\n, and\nunraisablehook\nat the start of the\nprogram.  They are saved so that\nbreakpointhook\n,\ndisplayhook\nand\nexcepthook\n,\nunraisablehook\ncan be restored in case they happen to\nget replaced with broken or alternative objects.\nAdded in version 3.7:\n__breakpointhook__\nAdded in version 3.8:\n__unraisablehook__\nsys.\nexception\n(\n)\n¶\nThis function, when called while an exception handler is executing (such as\nan\nexcept\nor\nexcept*\nclause), returns the exception instance that\nwas caught by this handler. When exception handlers are nested within one\nanother, only the exception handled by the innermost handler is accessible.\nIf no exception handler is executing, this function returns\nNone\n.\nAdded in version 3.11.\nsys.\nexc_info\n(\n)\n¶\nThis function returns the old-style representation of the handled\nexception. If an exception\ne\nis currently handled (so\nexception()\nwould return\ne\n),\nexc_info()\nreturns the\ntuple\n(type(e),\ne,\ne.__traceback__)\n.\nThat is, a tuple containing the type of the exception (a subclass of\nBaseException\n), the exception itself, and a\ntraceback\nobject\nwhich typically encapsulates the call\nstack at the point where the exception last occurred.\nIf no exception is being handled anywhere on the stack, this function\nreturn a tuple containing three\nNone\nvalues.\nChanged in version 3.11:\nThe\ntype\nand\ntraceback\nfields are now derived from the\nvalue\n(the exception instance), so when an exception is modified while it is\nbeing handled, the changes are reflected in the results of subsequent\ncalls to\nexc_info()\n.\nsys.\nexec_prefix\n¶\nA string giving the site-specific directory prefix where the platform-dependent\nPython files are installed; by default, this is also\n'/usr/local'\n.  This can\nbe set at build time with the\n--exec-prefix\nargument to the\nconfigure\nscript.  Specifically, all configuration files (e.g. the\npyconfig.h\nheader file) are installed in the directory\nexec_prefix\n/lib/python\nX.Y\n/config\n, and shared library modules are\ninstalled in\nexec_prefix\n/lib/python\nX.Y\n/lib-dynload\n, where\nX.Y\nis the version number of Python, for example\n3.2\n.\nNote\nIf a\nvirtual environment\nis in effect, this\nvalue will be changed in\nsite.py\nto point to the virtual environment.\nThe value for the Python installation will still be available, via\nbase_exec_prefix\n.\nsys.\nexecutable\n¶\nA string giving the absolute path of the executable binary for the Python\ninterpreter, on systems where this makes sense. If Python is unable to retrieve\nthe real path to its executable,\nsys.executable\nwill be an empty string\nor\nNone\n.\nsys.\nexit\n(\n[\narg\n]\n)\n¶\nRaise a\nSystemExit\nexception, signaling an intention to exit the interpreter.\nThe optional argument\narg\ncan be an integer giving the exit status\n(defaulting to zero), or another type of object.  If it is an integer, zero\nis considered “successful termination” and any nonzero value is considered\n“abnormal termination” by shells and the like.  Most systems require it to be\nin the range 0–127, and produce undefined results otherwise.  Some systems\nhave a convention for assigning specific meanings to specific exit codes, but\nthese are generally underdeveloped; Unix programs generally use 2 for command\nline syntax errors and 1 for all other kind of errors.  If another type of\nobject is passed,\nNone\nis equivalent to passing zero, and any other\nobject is printed to\nstderr\nand results in an exit code of 1.  In\nparticular,\nsys.exit(\"some\nerror\nmessage\")\nis a quick way to exit a\nprogram when an error occurs.\nSince\nexit()\nultimately “only” raises an exception, it will only exit\nthe process when called from the main thread, and the exception is not\nintercepted. Cleanup actions specified by finally clauses of\ntry\nstatements\nare honored, and it is possible to intercept the exit attempt at an outer level.\nChanged in version 3.6:\nIf an error occurs in the cleanup after the Python interpreter\nhas caught\nSystemExit\n(such as an error flushing buffered data\nin the standard streams), the exit status is changed to 120.\nsys.\nflags\n¶\nThe\nnamed tuple\nflags\nexposes the status of command line\nflags. The attributes are read only.\nflags.\ndebug\n¶\n-d\nflags.\ninspect\n¶\n-i\nflags.\ninteractive\n¶\n-i\nflags.\nisolated\n¶\n-I\nflags.\noptimize\n¶\n-O\nor\n-OO\nflags.\ndont_write_bytecode\n¶\n-B\nflags.\nno_user_site\n¶\n-s\nflags.\nno_site\n¶\n-S\nflags.\nignore_environment\n¶\n-E\nflags.\nverbose\n¶\n-v\nflags.\nbytes_warning\n¶\n-b\nflags.\nquiet\n¶\n-q\nflags.\nhash_randomization\n¶\n-R\nflags.\ndev_mode\n¶\n-X\ndev\n(\nPython Development Mode\n)\nflags.\nutf8_mode\n¶\n-X\nutf8\nflags.\nsafe_path\n¶\n-P\nflags.\nint_max_str_digits\n¶\n-X\nint_max_str_digits\n(\ninteger string conversion length limitation\n)\nflags.\nwarn_default_encoding\n¶\n-X\nwarn_default_encoding\nChanged in version 3.2:\nAdded\nquiet\nattribute for the new\n-q\nflag.\nAdded in version 3.2.3:\nThe\nhash_randomization\nattribute.\nChanged in version 3.3:\nRemoved obsolete\ndivision_warning\nattribute.\nChanged in version 3.4:\nAdded\nisolated\nattribute for\n-I\nisolated\nflag.\nChanged in version 3.7:\nAdded the\ndev_mode\nattribute for the new\nPython Development\nMode\nand the\nutf8_mode\nattribute for the new\n-X\nutf8\nflag.\nChanged in version 3.10:\nAdded\nwarn_default_encoding\nattribute for\n-X\nwarn_default_encoding\nflag.\nChanged in version 3.11:\nAdded the\nsafe_path\nattribute for\n-P\noption.\nChanged in version 3.11:\nAdded the\nint_max_str_digits\nattribute.\nsys.\nfloat_info\n¶\nA\nnamed tuple\nholding information about the float type. It\ncontains low level information about the precision and internal\nrepresentation.  The values correspond to the various floating-point\nconstants defined in the standard header file\nfloat.h\nfor the ‘C’\nprogramming language; see section 5.2.4.2.2 of the 1999 ISO/IEC C standard\n[C99]\n, ‘Characteristics of floating types’, for details.\nAttributes of the\nfloat_info\nnamed tuple\n¶\nattribute\nfloat.h macro\nexplanation\nfloat_info.\nepsilon\n¶\nDBL_EPSILON\ndifference between 1.0 and the least value greater than 1.0 that is\nrepresentable as a float.\nSee also\nmath.ulp()\n.\nfloat_info.\ndig\n¶\nDBL_DIG\nThe maximum number of decimal digits that can be faithfully\nrepresented in a float; see below.\nfloat_info.\nmant_dig\n¶\nDBL_MANT_DIG\nFloat precision: the number of base-\nradix\ndigits in the\nsignificand of a float.\nfloat_info.\nmax\n¶\nDBL_MAX\nThe maximum representable positive finite float.\nfloat_info.\nmax_exp\n¶\nDBL_MAX_EXP\nThe maximum integer\ne\nsuch that\nradix**(e-1)\nis a representable\nfinite float.\nfloat_info.\nmax_10_exp\n¶\nDBL_MAX_10_EXP\nThe maximum integer\ne\nsuch that\n10**e\nis in the range of\nrepresentable finite floats.\nfloat_info.\nmin\n¶\nDBL_MIN\nThe minimum representable positive\nnormalized\nfloat.\nUse\nmath.ulp(0.0)\nto get the smallest positive\ndenormalized\nrepresentable float.\nfloat_info.\nmin_exp\n¶\nDBL_MIN_EXP\nThe minimum integer\ne\nsuch that\nradix**(e-1)\nis a normalized\nfloat.\nfloat_info.\nmin_10_exp\n¶\nDBL_MIN_10_EXP\nThe minimum integer\ne\nsuch that\n10**e\nis a normalized float.\nfloat_info.\nradix\n¶\nFLT_RADIX\nThe radix of exponent representation.\nfloat_info.\nrounds\n¶\nFLT_ROUNDS\nAn integer representing the rounding mode for floating-point arithmetic.\nThis reflects the value of the system\nFLT_ROUNDS\nmacro\nat interpreter startup time:\n-1\n: indeterminable\n0\n: toward zero\n1\n: to nearest\n2\n: toward positive infinity\n3\n: toward negative infinity\nAll other values for\nFLT_ROUNDS\ncharacterize\nimplementation-defined rounding behavior.\nThe attribute\nsys.float_info.dig\nneeds further explanation.  If\ns\nis any string representing a decimal number with at most\nsys.float_info.dig\nsignificant digits, then converting\ns\nto a\nfloat and back again will recover a string representing the same decimal\nvalue:\n>>>\nimport\nsys\n>>>\nsys\n.\nfloat_info\n.\ndig\n15\n>>>\ns\n=\n'3.14159265358979'\n# decimal string with 15 significant digits\n>>>\nformat\n(\nfloat\n(\ns\n),\n'.15g'\n)\n# convert to float and back -> same value\n'3.14159265358979'\nBut for strings with more than\nsys.float_info.dig\nsignificant digits,\nthis isn’t always true:\n>>>\ns\n=\n'9876543211234567'\n# 16 significant digits is too many!\n>>>\nformat\n(\nfloat\n(\ns\n),\n'.16g'\n)\n# conversion changes value\n'9876543211234568'\nsys.\nfloat_repr_style\n¶\nA string indicating how the\nrepr()\nfunction behaves for\nfloats.  If the string has value\n'short'\nthen for a finite\nfloat\nx\n,\nrepr(x)\naims to produce a short string with the\nproperty that\nfloat(repr(x))\n==\nx\n.  This is the usual behaviour\nin Python 3.1 and later.  Otherwise,\nfloat_repr_style\nhas value\n'legacy'\nand\nrepr(x)\nbehaves in the same way as it did in\nversions of Python prior to 3.1.\nAdded in version 3.1.\nsys.\ngetallocatedblocks\n(\n)\n¶\nReturn the number of memory blocks currently allocated by the interpreter,\nregardless of their size.  This function is mainly useful for tracking\nand debugging memory leaks.  Because of the interpreter’s internal\ncaches, the result can vary from call to call; you may have to call\n_clear_internal_caches()\nand\ngc.collect()\nto get more\npredictable results.\nIf a Python build or implementation cannot reasonably compute this\ninformation,\ngetallocatedblocks()\nis allowed to return 0 instead.\nAdded in version 3.4.\nsys.\ngetunicodeinternedsize\n(\n)\n¶\nReturn the number of unicode objects that have been interned.\nAdded in version 3.12.\nsys.\ngetandroidapilevel\n(\n)\n¶\nReturn the build-time API level of Android as an integer. This represents the\nminimum version of Android this build of Python can run on. For runtime\nversion information, see\nplatform.android_ver()\n.\nAvailability\n: Android.\nAdded in version 3.7.\nsys.\ngetdefaultencoding\n(\n)\n¶\nReturn\n'utf-8'\n. This is the name of the default string encoding, used\nin methods like\nstr.encode()\n.\nsys.\ngetdlopenflags\n(\n)\n¶\nReturn the current value of the flags that are used for\ndlopen()\ncalls.  Symbolic names for the flag values can be\nfound in the\nos\nmodule (\nRTLD_\nxxx\nconstants, e.g.\nos.RTLD_LAZY\n).\nAvailability\n: Unix.\nsys.\ngetfilesystemencoding\n(\n)\n¶\nGet the\nfilesystem encoding\n:\nthe encoding used with the\nfilesystem error handler\nto convert between Unicode filenames and bytes\nfilenames. The filesystem error handler is returned from\ngetfilesystemencodeerrors()\n.\nFor best compatibility, str should be used for filenames in all cases,\nalthough representing filenames as bytes is also supported. Functions\naccepting or returning filenames should support either str or bytes and\ninternally convert to the system’s preferred representation.\nos.fsencode()\nand\nos.fsdecode()\nshould be used to ensure that\nthe correct encoding and errors mode are used.\nThe\nfilesystem encoding and error handler\nare configured at Python\nstartup by the\nPyConfig_Read()\nfunction: see\nfilesystem_encoding\nand\nfilesystem_errors\nmembers of\nPyConfig\n.\nChanged in version 3.2:\ngetfilesystemencoding()\nresult cannot be\nNone\nanymore.\nChanged in version 3.6:\nWindows is no longer guaranteed to return\n'mbcs'\n. See\nPEP 529\nand\n_enablelegacywindowsfsencoding()\nfor more information.\nChanged in version 3.7:\nReturn\n'utf-8'\nif the\nPython UTF-8 Mode\nis\nenabled.\nsys.\ngetfilesystemencodeerrors\n(\n)\n¶\nGet the\nfilesystem error handler\n: the error handler used with the\nfilesystem encoding\nto convert between Unicode\nfilenames and bytes filenames. The filesystem encoding is returned from\ngetfilesystemencoding()\n.\nos.fsencode()\nand\nos.fsdecode()\nshould be used to ensure that\nthe correct encoding and errors mode are used.\nThe\nfilesystem encoding and error handler\nare configured at Python\nstartup by the\nPyConfig_Read()\nfunction: see\nfilesystem_encoding\nand\nfilesystem_errors\nmembers of\nPyConfig\n.\nAdded in version 3.6.\nsys.\nget_int_max_str_digits\n(\n)\n¶\nReturns the current value for the\ninteger string conversion length\nlimitation\n. See also\nset_int_max_str_digits()\n.\nAdded in version 3.11.\nsys.\ngetrefcount\n(\nobject\n)\n¶\nReturn the reference count of the\nobject\n.  The count returned is generally one\nhigher than you might expect, because it includes the (temporary) reference as\nan argument to\ngetrefcount()\n.\nNote that the returned value may not actually reflect how many\nreferences to the object are actually held.  For example, some\nobjects are\nimmortal\nand have a very high refcount that does not\nreflect the actual number of references.  Consequently, do not rely\non the returned value to be accurate, other than a value of 0 or 1.\nChanged in version 3.12:\nImmortal objects have very large refcounts that do not match\nthe actual number of references to the object.\nsys.\ngetrecursionlimit\n(\n)\n¶\nReturn the current value of the recursion limit, the maximum depth of the Python\ninterpreter stack.  This limit prevents infinite recursion from causing an\noverflow of the C stack and crashing Python.  It can be set by\nsetrecursionlimit()\n.\nsys.\ngetsizeof\n(\nobject\n[\n,\ndefault\n]\n)\n¶\nReturn the size of an object in bytes. The object can be any type of\nobject. All built-in objects will return correct results, but this\ndoes not have to hold true for third-party extensions as it is implementation\nspecific.\nOnly the memory consumption directly attributed to the object is\naccounted for, not the memory consumption of objects it refers to.\nIf given,\ndefault\nwill be returned if the object does not provide means to\nretrieve the size.  Otherwise a\nTypeError\nwill be raised.\ngetsizeof()\ncalls the object’s\n__sizeof__\nmethod and adds an\nadditional garbage collector overhead if the object is managed by the garbage\ncollector.\nSee\nrecursive sizeof recipe\nfor an example of using\ngetsizeof()\nrecursively to find the size of\ncontainers and all their contents.\nsys.\ngetswitchinterval\n(\n)\n¶\nReturn the interpreter’s “thread switch interval” in seconds; see\nsetswitchinterval()\n.\nAdded in version 3.2.\nsys.\n_getframe\n(\n[\ndepth\n]\n)\n¶\nReturn a frame object from the call stack.  If optional integer\ndepth\nis\ngiven, return the frame object that many calls below the top of the stack.  If\nthat is deeper than the call stack,\nValueError\nis raised.  The default\nfor\ndepth\nis zero, returning the frame at the top of the call stack.\nRaises an\nauditing event\nsys._getframe\nwith argument\nframe\n.\nCPython implementation detail:\nThis function should be used for internal and specialized purposes only.\nIt is not guaranteed to exist in all implementations of Python.\nsys.\n_getframemodulename\n(\n[\ndepth\n]\n)\n¶\nReturn the name of a module from the call stack.  If optional integer\ndepth\nis given, return the module that many calls below the top of the stack.  If\nthat is deeper than the call stack, or if the module is unidentifiable,\nNone\nis returned.  The default for\ndepth\nis zero, returning the\nmodule at the top of the call stack.\nRaises an\nauditing event\nsys._getframemodulename\nwith argument\ndepth\n.\nCPython implementation detail:\nThis function should be used for internal and specialized purposes only.\nIt is not guaranteed to exist in all implementations of Python.\nAdded in version 3.12.\nsys.\ngetobjects\n(\nlimit\n[\n,\ntype\n]\n)\n¶\nThis function only exists if CPython was built using the\nspecialized configure option\n--with-trace-refs\n.\nIt is intended only for debugging garbage-collection issues.\nReturn a list of up to\nlimit\ndynamically allocated Python objects.\nIf\ntype\nis given, only objects of that exact type (not subtypes)\nare included.\nObjects from the list are not safe to use.\nSpecifically, the result will include objects from all interpreters that\nshare their object allocator state (that is, ones created with\nPyInterpreterConfig.use_main_obmalloc\nset to 1\nor using\nPy_NewInterpreter()\n, and the\nmain interpreter\n).\nMixing objects from different interpreters may lead to crashes\nor other unexpected behavior.\nCPython implementation detail:\nThis function should be used for specialized purposes only.\nIt is not guaranteed to exist in all implementations of Python.\nChanged in version 3.13.1:\nThe result may include objects from other interpreters.\nsys.\ngetprofile\n(\n)\n¶\nGet the profiler function as set by\nsetprofile()\n.\nsys.\ngettrace\n(\n)\n¶\nGet the trace function as set by\nsettrace()\n.\nCPython implementation detail:\nThe\ngettrace()\nfunction is intended only for implementing debuggers,\nprofilers, coverage tools and the like.  Its behavior is part of the\nimplementation platform, rather than part of the language definition, and\nthus may not be available in all Python implementations.\nsys.\ngetwindowsversion\n(\n)\n¶\nReturn a named tuple describing the Windows version\ncurrently running.  The named elements are\nmajor\n,\nminor\n,\nbuild\n,\nplatform\n,\nservice_pack\n,\nservice_pack_minor\n,\nservice_pack_major\n,\nsuite_mask\n,\nproduct_type\nand\nplatform_version\n.\nservice_pack\ncontains a string,\nplatform_version\na 3-tuple and all other values are\nintegers. The components can also be accessed by name, so\nsys.getwindowsversion()[0]\nis equivalent to\nsys.getwindowsversion().major\n. For compatibility with prior\nversions, only the first 5 elements are retrievable by indexing.\nplatform\nwill be\n2\n(VER_PLATFORM_WIN32_NT).\nproduct_type\nmay be one of the following values:\nConstant\nMeaning\n1\n(VER_NT_WORKSTATION)\nThe system is a workstation.\n2\n(VER_NT_DOMAIN_CONTROLLER)\nThe system is a domain\ncontroller.\n3\n(VER_NT_SERVER)\nThe system is a server, but not\na domain controller.\nThis function wraps the Win32\nGetVersionEx()\nfunction; see the\nMicrosoft documentation on\nOSVERSIONINFOEX()\nfor more information\nabout these fields.\nplatform_version\nreturns the major version, minor version and\nbuild number of the current operating system, rather than the version that\nis being emulated for the process. It is intended for use in logging rather\nthan for feature detection.\nNote\nplatform_version\nderives the version from kernel32.dll which can be of a different\nversion than the OS version. Please use\nplatform\nmodule for achieving accurate\nOS version.\nAvailability\n: Windows.\nChanged in version 3.2:\nChanged to a named tuple and added\nservice_pack_minor\n,\nservice_pack_major\n,\nsuite_mask\n, and\nproduct_type\n.\nChanged in version 3.6:\nAdded\nplatform_version\nsys.\nget_asyncgen_hooks\n(\n)\n¶\nReturns an\nasyncgen_hooks\nobject, which is similar to a\nnamedtuple\nof the form\n(firstiter,\nfinalizer)\n,\nwhere\nfirstiter\nand\nfinalizer\nare expected to be either\nNone\nor\nfunctions which take an\nasynchronous generator iterator\nas an\nargument, and are used to schedule finalization of an asynchronous\ngenerator by an event loop.\nAdded in version 3.6:\nSee\nPEP 525\nfor more details.\nNote\nThis function has been added on a provisional basis (see\nPEP 411\nfor details.)\nsys.\nget_coroutine_origin_tracking_depth\n(\n)\n¶\nGet the current coroutine origin tracking depth, as set by\nset_coroutine_origin_tracking_depth()\n.\nAdded in version 3.7.\nNote\nThis function has been added on a provisional basis (see\nPEP 411\nfor details.)  Use it only for debugging purposes.\nsys.\nhash_info\n¶\nA\nnamed tuple\ngiving parameters of the numeric hash\nimplementation.  For more details about hashing of numeric types, see\nHashing of numeric types\n.\nhash_info.\nwidth\n¶\nThe width in bits used for hash values\nhash_info.\nmodulus\n¶\nThe prime modulus P used for numeric hash scheme\nhash_info.\ninf\n¶\nThe hash value returned for a positive infinity\nhash_info.\nnan\n¶\n(This attribute is no longer used)\nhash_info.\nimag\n¶\nThe multiplier used for the imaginary part of a complex number\nhash_info.\nalgorithm\n¶\nThe name of the algorithm for hashing of str, bytes, and memoryview\nhash_info.\nhash_bits\n¶\nThe internal output size of the hash algorithm\nhash_info.\nseed_bits\n¶\nThe size of the seed key of the hash algorithm\nAdded in version 3.2.\nChanged in version 3.4:\nAdded\nalgorithm\n,\nhash_bits\nand\nseed_bits\nsys.\nhexversion\n¶\nThe version number encoded as a single integer.  This is guaranteed to increase\nwith each version, including proper support for non-production releases.  For\nexample, to test that the Python interpreter is at least version 1.5.2, use:\nif\nsys\n.\nhexversion\n>=\n0x010502F0\n:\n# use some advanced feature\n...\nelse\n:\n# use an alternative implementation or warn the user\n...\nThis is called\nhexversion\nsince it only really looks meaningful when viewed\nas the result of passing it to the built-in\nhex()\nfunction.  The\nnamed tuple\nsys.version_info\nmay be used for a more\nhuman-friendly encoding of the same information.\nMore details of\nhexversion\ncan be found at\nAPI and ABI Versioning\n.\nsys.\nimplementation\n¶\nAn object containing information about the implementation of the\ncurrently running Python interpreter.  The following attributes are\nrequired to exist in all Python implementations.\nname\nis the implementation’s identifier, e.g.\n'cpython'\n.  The actual\nstring is defined by the Python implementation, but it is guaranteed to be\nlower case.\nversion\nis a named tuple, in the same format as\nsys.version_info\n.  It represents the version of the Python\nimplementation\n.  This has a distinct meaning from the specific\nversion of the Python\nlanguage\nto which the currently running\ninterpreter conforms, which\nsys.version_info\nrepresents.  For\nexample, for PyPy 1.8\nsys.implementation.version\nmight be\nsys.version_info(1,\n8,\n0,\n'final',\n0)\n, whereas\nsys.version_info\nwould be\nsys.version_info(2,\n7,\n2,\n'final',\n0)\n.  For CPython they\nare the same value, since it is the reference implementation.\nhexversion\nis the implementation version in hexadecimal format, like\nsys.hexversion\n.\ncache_tag\nis the tag used by the import machinery in the filenames of\ncached modules.  By convention, it would be a composite of the\nimplementation’s name and version, like\n'cpython-33'\n.  However, a\nPython implementation may use some other value if appropriate.  If\ncache_tag\nis set to\nNone\n, it indicates that module caching should\nbe disabled.\nsys.implementation\nmay contain additional attributes specific to\nthe Python implementation.  These non-standard attributes must start with\nan underscore, and are not described here.  Regardless of its contents,\nsys.implementation\nwill not change during a run of the interpreter,\nnor between implementation versions.  (It may change between Python\nlanguage versions, however.)  See\nPEP 421\nfor more information.\nAdded in version 3.3.\nNote\nThe addition of new required attributes must go through the normal PEP\nprocess. See\nPEP 421\nfor more information.\nsys.\nint_info\n¶\nA\nnamed tuple\nthat holds information about Python’s internal\nrepresentation of integers.  The attributes are read only.\nint_info.\nbits_per_digit\n¶\nThe number of bits held in each digit.\nPython integers are stored internally in base\n2**int_info.bits_per_digit\n.\nint_info.\nsizeof_digit\n¶\nThe size in bytes of the C type used to represent a digit.\nint_info.\ndefault_max_str_digits\n¶\nThe default value for\nsys.get_int_max_str_digits()\nwhen it is not otherwise explicitly configured.\nint_info.\nstr_digits_check_threshold\n¶\nThe minimum non-zero value for\nsys.set_int_max_str_digits()\n,\nPYTHONINTMAXSTRDIGITS\n, or\n-X\nint_max_str_digits\n.\nAdded in version 3.1.\nChanged in version 3.11:\nAdded\ndefault_max_str_digits\nand\nstr_digits_check_threshold\n.\nsys.\n__interactivehook__\n¶\nWhen this attribute exists, its value is automatically called (with no\narguments) when the interpreter is launched in\ninteractive mode\n.  This is done after the\nPYTHONSTARTUP\nfile is\nread, so that you can set this hook there.  The\nsite\nmodule\nsets this\n.\nRaises an\nauditing event\ncpython.run_interactivehook\nwith the hook object as the argument when\nthe hook is called on startup.\nAdded in version 3.4.\nsys.\nintern\n(\nstring\n)\n¶\nEnter\nstring\nin the table of “interned” strings and return the interned string\n– which is\nstring\nitself or a copy. Interning strings is useful to gain a\nlittle performance on dictionary lookup – if the keys in a dictionary are\ninterned, and the lookup key is interned, the key comparisons (after hashing)\ncan be done by a pointer compare instead of a string compare.  Normally, the\nnames used in Python programs are automatically interned, and the dictionaries\nused to hold module, class or instance attributes have interned keys.\nInterned strings are not\nimmortal\n; you must keep a reference to the\nreturn value of\nintern()\naround to benefit from it.\nsys.\n_is_gil_enabled\n(\n)\n¶\nReturn\nTrue\nif the\nGIL\nis enabled and\nFalse\nif\nit is disabled.\nAdded in version 3.13.\nCPython implementation detail:\nIt is not guaranteed to exist in all implementations of Python.\nsys.\nis_finalizing\n(\n)\n¶\nReturn\nTrue\nif the main Python interpreter is\nshutting down\n. Return\nFalse\notherwise.\nSee also the\nPythonFinalizationError\nexception.\nAdded in version 3.5.\nsys.\nlast_exc\n¶\nThis variable is not always defined; it is set to the exception instance\nwhen an exception is not handled and the interpreter prints an error message\nand a stack traceback.  Its intended use is to allow an interactive user to\nimport a debugger module and engage in post-mortem debugging without having\nto re-execute the command that caused the error.  (Typical use is\nimport\npdb;\npdb.pm()\nto enter the post-mortem debugger; see\npdb\nmodule for more information.)\nAdded in version 3.12.\nsys.\n_is_interned\n(\nstring\n)\n¶\nReturn\nTrue\nif the given string is “interned”,\nFalse\notherwise.\nAdded in version 3.13.\nCPython implementation detail:\nIt is not guaranteed to exist in all implementations of Python.\nsys.\nlast_type\n¶\nsys.\nlast_value\n¶\nsys.\nlast_traceback\n¶\nThese three variables are deprecated; use\nsys.last_exc\ninstead.\nThey hold the legacy representation of\nsys.last_exc\n, as returned\nfrom\nexc_info()\nabove.\nsys.\nmaxsize\n¶\nAn integer giving the maximum value a variable of type\nPy_ssize_t\ncan\ntake.  It’s usually\n2**31\n-\n1\non a 32-bit platform and\n2**63\n-\n1\non a\n64-bit platform.\nsys.\nmaxunicode\n¶\nAn integer giving the value of the largest Unicode code point,\ni.e.\n1114111\n(\n0x10FFFF\nin hexadecimal).\nChanged in version 3.3:\nBefore\nPEP 393\n,\nsys.maxunicode\nused to be either\n0xFFFF\nor\n0x10FFFF\n, depending on the configuration option that specified\nwhether Unicode characters were stored as UCS-2 or UCS-4.\nsys.\nmeta_path\n¶\nA list of\nmeta path finder\nobjects that have their\nfind_spec()\nmethods called to see if one\nof the objects can find the module to be imported. By default, it holds entries\nthat implement Python’s default import semantics. The\nfind_spec()\nmethod is called with at\nleast the absolute name of the module being imported. If the module to be\nimported is contained in a package, then the parent package’s\n__path__\nattribute is passed in as a second argument. The method returns a\nmodule spec\n, or\nNone\nif the module cannot be found.\nSee also\nimportlib.abc.MetaPathFinder\nThe abstract base class defining the interface of finder objects on\nmeta_path\n.\nimportlib.machinery.ModuleSpec\nThe concrete class which\nfind_spec()\nshould return\ninstances of.\nChanged in version 3.4:\nModule specs\nwere introduced in Python 3.4, by\nPEP 451\n.\nChanged in version 3.12:\nRemoved the fallback that looked for a\nfind_module()\nmethod\nif a\nmeta_path\nentry didn’t have a\nfind_spec()\nmethod.\nsys.\nmodules\n¶\nThis is a dictionary that maps module names to modules which have already been\nloaded.  This can be manipulated to force reloading of modules and other tricks.\nHowever, replacing the dictionary will not necessarily work as expected and\ndeleting essential items from the dictionary may cause Python to fail.  If\nyou want to iterate over this global dictionary always use\nsys.modules.copy()\nor\ntuple(sys.modules)\nto avoid exceptions as its\nsize may change during iteration as a side effect of code or activity in\nother threads.\nsys.\norig_argv\n¶\nThe list of the original command line arguments passed to the Python\nexecutable.\nThe elements of\nsys.orig_argv\nare the arguments to the Python interpreter,\nwhile the elements of\nsys.argv\nare the arguments to the user’s program.\nArguments consumed by the interpreter itself will be present in\nsys.orig_argv\nand missing from\nsys.argv\n.\nAdded in version 3.10.\nsys.\npath\n¶\nA list of strings that specifies the search path for modules. Initialized from\nthe environment variable\nPYTHONPATH\n, plus an installation-dependent\ndefault.\nBy default, as initialized upon program startup, a potentially unsafe path\nis prepended to\nsys.path\n(\nbefore\nthe entries inserted as a result\nof\nPYTHONPATH\n):\npython\n-m\nmodule\ncommand line: prepend the current working\ndirectory.\npython\nscript.py\ncommand line: prepend the script’s directory.\nIf it’s a symbolic link, resolve symbolic links.\npython\n-c\ncode\nand\npython\n(REPL) command lines: prepend an empty\nstring, which means the current working directory.\nTo not prepend this potentially unsafe path, use the\n-P\ncommand\nline option or the\nPYTHONSAFEPATH\nenvironment variable.\nA program is free to modify this list for its own purposes.  Only strings\nshould be added to\nsys.path\n; all other data types are\nignored during import.\nSee also\nModule\nsite\nThis describes how to use .pth files to\nextend\nsys.path\n.\nsys.\npath_hooks\n¶\nA list of callables that take a path argument to try to create a\nfinder\nfor the path. If a finder can be created, it is to be\nreturned by the callable, else raise\nImportError\n.\nOriginally specified in\nPEP 302\n.\nsys.\npath_importer_cache\n¶\nA dictionary acting as a cache for\nfinder\nobjects. The keys are\npaths that have been passed to\nsys.path_hooks\nand the values are\nthe finders that are found. If a path is a valid file system path but no\nfinder is found on\nsys.path_hooks\nthen\nNone\nis\nstored.\nOriginally specified in\nPEP 302\n.\nsys.\nplatform\n¶\nA string containing a platform identifier. Known values are:\nSystem\nplatform\nvalue\nAIX\n'aix'\nAndroid\n'android'\nEmscripten\n'emscripten'\niOS\n'ios'\nLinux\n'linux'\nmacOS\n'darwin'\nWindows\n'win32'\nWindows/Cygwin\n'cygwin'\nWASI\n'wasi'\nOn Unix systems not listed in the table, the value is the lowercased OS name\nas returned by\nuname\n-s\n, with the first part of the version as returned by\nuname\n-r\nappended, e.g.\n'sunos5'\nor\n'freebsd8'\n,\nat the time\nwhen Python was built\n.  Unless you want to test for a specific system\nversion, it is therefore recommended to use the following idiom:\nif\nsys\n.\nplatform\n.\nstartswith\n(\n'freebsd'\n):\n# FreeBSD-specific code here...\nChanged in version 3.3:\nOn Linux,\nsys.platform\ndoesn’t contain the major version anymore.\nIt is always\n'linux'\n, instead of\n'linux2'\nor\n'linux3'\n.\nChanged in version 3.8:\nOn AIX,\nsys.platform\ndoesn’t contain the major version anymore.\nIt is always\n'aix'\n, instead of\n'aix5'\nor\n'aix7'\n.\nChanged in version 3.13:\nOn Android,\nsys.platform\nnow returns\n'android'\nrather than\n'linux'\n.\nSee also\nos.name\nhas a coarser granularity.\nos.uname()\ngives\nsystem-dependent version information.\nThe\nplatform\nmodule provides detailed checks for the\nsystem’s identity.\nsys.\nplatlibdir\n¶\nName of the platform-specific library directory. It is used to build the\npath of standard library and the paths of installed extension modules.\nIt is equal to\n\"lib\"\non most platforms. On Fedora and SuSE, it is equal\nto\n\"lib64\"\non 64-bit platforms which gives the following\nsys.path\npaths (where\nX.Y\nis the Python\nmajor.minor\nversion):\n/usr/lib64/pythonX.Y/\n:\nStandard library (like\nos.py\nof the\nos\nmodule)\n/usr/lib64/pythonX.Y/lib-dynload/\n:\nC extension modules of the standard library (like the\nerrno\nmodule,\nthe exact filename is platform specific)\n/usr/lib/pythonX.Y/site-packages/\n(always use\nlib\n, not\nsys.platlibdir\n): Third-party modules\n/usr/lib64/pythonX.Y/site-packages/\n:\nC extension modules of third-party packages\nAdded in version 3.9.\nsys.\nprefix\n¶\nA string giving the site-specific directory prefix where the platform\nindependent Python files are installed; on Unix, the default is\n/usr/local\n. This can be set at build time with the\n--prefix\nargument to the\nconfigure\nscript.  See\nInstallation paths\nfor derived paths.\nNote\nIf a\nvirtual environment\nis in effect, this\nvalue will be changed in\nsite.py\nto point to the virtual\nenvironment. The value for the Python installation will still be\navailable, via\nbase_prefix\n.\nsys.\nps1\n¶\nsys.\nps2\n¶\nStrings specifying the primary and secondary prompt of the interpreter.  These\nare only defined if the interpreter is in interactive mode.  Their initial\nvalues in this case are\n'>>>\n'\nand\n'...\n'\n.  If a non-string object is\nassigned to either variable, its\nstr()\nis re-evaluated each time the\ninterpreter prepares to read a new interactive command; this can be used to\nimplement a dynamic prompt.\nsys.\nsetdlopenflags\n(\nn\n)\n¶\nSet the flags used by the interpreter for\ndlopen()\ncalls, such as when\nthe interpreter loads extension modules.  Among other things, this will enable a\nlazy resolving of symbols when importing a module, if called as\nsys.setdlopenflags(0)\n.  To share symbols across extension modules, call as\nsys.setdlopenflags(os.RTLD_GLOBAL)\n.  Symbolic names for the flag values\ncan be found in the\nos\nmodule (\nRTLD_\nxxx\nconstants, e.g.\nos.RTLD_LAZY\n).\nAvailability\n: Unix.\nsys.\nset_int_max_str_digits\n(\nmaxdigits\n)\n¶\nSet the\ninteger string conversion length limitation\nused by this interpreter. See also\nget_int_max_str_digits()\n.\nAdded in version 3.11.\nsys.\nsetprofile\n(\nprofilefunc\n)\n¶\nSet the system’s profile function, which allows you to implement a Python source\ncode profiler in Python.  See chapter\nThe Python Profilers\nfor more information on the\nPython profiler.  The system’s profile function is called similarly to the\nsystem’s trace function (see\nsettrace()\n), but it is called with different events,\nfor example it isn’t called for each executed line of code (only on call and return,\nbut the return event is reported even when an exception has been set). The function is\nthread-specific, but there is no way for the profiler to know about context switches between\nthreads, so it does not make sense to use this in the presence of multiple threads. Also,\nits return value is not used, so it can simply return\nNone\n.  Error in the profile\nfunction will cause itself unset.\nNote\nThe same tracing mechanism is used for\nsetprofile()\nas\nsettrace()\n.\nTo trace calls with\nsetprofile()\ninside a tracing function\n(e.g. in a debugger breakpoint), see\ncall_tracing()\n.\nProfile functions should have three arguments:\nframe\n,\nevent\n, and\narg\n.\nframe\nis the current stack frame.\nevent\nis a string:\n'call'\n,\n'return'\n,\n'c_call'\n,\n'c_return'\n, or\n'c_exception'\n.\narg\ndepends\non the event type.\nThe events have the following meaning:\n'call'\nA function is called (or some other code block entered).  The\nprofile function is called;\narg\nis\nNone\n.\n'return'\nA function (or other code block) is about to return.  The profile\nfunction is called;\narg\nis the value that will be returned, or\nNone\nif the event is caused by an exception being raised.\n'c_call'\nA C function is about to be called.  This may be an extension function or\na built-in.\narg\nis the C function object.\n'c_return'\nA C function has returned.\narg\nis the C function object.\n'c_exception'\nA C function has raised an exception.\narg\nis the C function object.\nRaises an\nauditing event\nsys.setprofile\nwith no arguments.\nsys.\nsetrecursionlimit\n(\nlimit\n)\n¶\nSet the maximum depth of the Python interpreter stack to\nlimit\n.  This limit\nprevents infinite recursion from causing an overflow of the C stack and crashing\nPython.\nThe highest possible limit is platform-dependent.  A user may need to set the\nlimit higher when they have a program that requires deep recursion and a platform\nthat supports a higher limit.  This should be done with care, because a too-high\nlimit can lead to a crash.\nIf the new limit is too low at the current recursion depth, a\nRecursionError\nexception is raised.\nChanged in version 3.5.1:\nA\nRecursionError\nexception is now raised if the new limit is too\nlow at the current recursion depth.\nsys.\nsetswitchinterval\n(\ninterval\n)\n¶\nSet the interpreter’s thread switch interval (in seconds).  This floating-point\nvalue determines the ideal duration of the “timeslices” allocated to\nconcurrently running Python threads.  Please note that the actual value\ncan be higher, especially if long-running internal functions or methods\nare used.  Also, which thread becomes scheduled at the end of the interval\nis the operating system’s decision.  The interpreter doesn’t have its\nown scheduler.\nAdded in version 3.2.\nsys.\nsettrace\n(\ntracefunc\n)\n¶\nSet the system’s trace function, which allows you to implement a Python\nsource code debugger in Python.  The function is thread-specific; for a\ndebugger to support multiple threads, it must register a trace function using\nsettrace()\nfor each thread being debugged or use\nthreading.settrace()\n.\nTrace functions should have three arguments:\nframe\n,\nevent\n, and\narg\n.\nframe\nis the current stack frame.\nevent\nis a string:\n'call'\n,\n'line'\n,\n'return'\n,\n'exception'\nor\n'opcode'\n.\narg\ndepends on\nthe event type.\nThe trace function is invoked (with\nevent\nset to\n'call'\n) whenever a new\nlocal scope is entered; it should return a reference to a local trace\nfunction to be used for the new scope, or\nNone\nif the scope shouldn’t be\ntraced.\nThe local trace function should return a reference to itself, or to another\nfunction which would then be used as the local trace function for the scope.\nIf there is any error occurred in the trace function, it will be unset, just\nlike\nsettrace(None)\nis called.\nNote\nTracing is disabled while calling the trace function (e.g. a function set by\nsettrace()\n). For recursive tracing see\ncall_tracing()\n.\nThe events have the following meaning:\n'call'\nA function is called (or some other code block entered).  The\nglobal trace function is called;\narg\nis\nNone\n; the return value\nspecifies the local trace function.\n'line'\nThe interpreter is about to execute a new line of code or re-execute the\ncondition of a loop.  The local trace function is called;\narg\nis\nNone\n; the return value specifies the new local trace function.  See\nObjects/lnotab_notes.txt\nfor a detailed explanation of how this\nworks.\nPer-line events may be disabled for a frame by setting\nf_trace_lines\nto\nFalse\non that\nframe\n.\n'return'\nA function (or other code block) is about to return.  The local trace\nfunction is called;\narg\nis the value that will be returned, or\nNone\nif the event is caused by an exception being raised.  The trace function’s\nreturn value is ignored.\n'exception'\nAn exception has occurred.  The local trace function is called;\narg\nis a\ntuple\n(exception,\nvalue,\ntraceback)\n; the return value specifies the\nnew local trace function.\n'opcode'\nThe interpreter is about to execute a new opcode (see\ndis\nfor\nopcode details).  The local trace function is called;\narg\nis\nNone\n; the return value specifies the new local trace function.\nPer-opcode events are not emitted by default: they must be explicitly\nrequested by setting\nf_trace_opcodes\nto\nTrue\non the\nframe\n.\nNote that as an exception is propagated down the chain of callers, an\n'exception'\nevent is generated at each level.\nFor more fine-grained usage, it’s possible to set a trace function by\nassigning\nframe.f_trace\n=\ntracefunc\nexplicitly, rather than relying on\nit being set indirectly via the return value from an already installed\ntrace function. This is also required for activating the trace function on\nthe current frame, which\nsettrace()\ndoesn’t do. Note that in order\nfor this to work, a global tracing function must have been installed\nwith\nsettrace()\nin order to enable the runtime tracing machinery,\nbut it doesn’t need to be the same tracing function (e.g. it could be a\nlow overhead tracing function that simply returns\nNone\nto disable\nitself immediately on each frame).\nFor more information on code and frame objects, refer to\nThe standard type hierarchy\n.\nRaises an\nauditing event\nsys.settrace\nwith no arguments.\nCPython implementation detail:\nThe\nsettrace()\nfunction is intended only for implementing debuggers,\nprofilers, coverage tools and the like.  Its behavior is part of the\nimplementation platform, rather than part of the language definition, and\nthus may not be available in all Python implementations.\nChanged in version 3.7:\n'opcode'\nevent type added;\nf_trace_lines\nand\nf_trace_opcodes\nattributes added to frames\nsys.\nset_asyncgen_hooks\n(\n[firstiter]\n[,\nfinalizer]\n)\n¶\nAccepts two optional keyword arguments which are callables that accept an\nasynchronous generator iterator\nas an argument. The\nfirstiter\ncallable will be called when an asynchronous generator is iterated for the\nfirst time. The\nfinalizer\nwill be called when an asynchronous generator\nis about to be garbage collected.\nRaises an\nauditing event\nsys.set_asyncgen_hooks_firstiter\nwith no arguments.\nRaises an\nauditing event\nsys.set_asyncgen_hooks_finalizer\nwith no arguments.\nTwo auditing events are raised because the underlying API consists of two\ncalls, each of which must raise its own event.\nAdded in version 3.6:\nSee\nPEP 525\nfor more details, and for a reference example of a\nfinalizer\nmethod see the implementation of\nasyncio.Loop.shutdown_asyncgens\nin\nLib/asyncio/base_events.py\nNote\nThis function has been added on a provisional basis (see\nPEP 411\nfor details.)\nsys.\nset_coroutine_origin_tracking_depth\n(\ndepth\n)\n¶\nAllows enabling or disabling coroutine origin tracking. When\nenabled, the\ncr_origin\nattribute on coroutine objects will\ncontain a tuple of (filename, line number, function name) tuples\ndescribing the traceback where the coroutine object was created,\nwith the most recent call first. When disabled,\ncr_origin\nwill\nbe\nNone\n.\nTo enable, pass a\ndepth\nvalue greater than zero; this sets the\nnumber of frames whose information will be captured. To disable,\npass set\ndepth\nto zero.\nThis setting is thread-specific.\nAdded in version 3.7.\nNote\nThis function has been added on a provisional basis (see\nPEP 411\nfor details.)  Use it only for debugging purposes.\nsys.\nactivate_stack_trampoline\n(\nbackend\n,\n/\n)\n¶\nActivate the stack profiler trampoline\nbackend\n.\nThe only supported backend is\n\"perf\"\n.\nAvailability\n: Linux.\nAdded in version 3.12.\nSee also\nPython support for the Linux perf profiler\nhttps://perf.wiki.kernel.org\nsys.\ndeactivate_stack_trampoline\n(\n)\n¶\nDeactivate the current stack profiler trampoline backend.\nIf no stack profiler is activated, this function has no effect.\nAvailability\n: Linux.\nAdded in version 3.12.\nsys.\nis_stack_trampoline_active\n(\n)\n¶\nReturn\nTrue\nif a stack profiler trampoline is active.\nAvailability\n: Linux.\nAdded in version 3.12.\nsys.\n_enablelegacywindowsfsencoding\n(\n)\n¶\nChanges the\nfilesystem encoding and error handler\nto ‘mbcs’ and\n‘replace’ respectively, for consistency with versions of Python prior to\n3.6.\nThis is equivalent to defining the\nPYTHONLEGACYWINDOWSFSENCODING\nenvironment variable before launching Python.\nSee also\nsys.getfilesystemencoding()\nand\nsys.getfilesystemencodeerrors()\n.\nAvailability\n: Windows.\nNote\nChanging the filesystem encoding after Python startup is risky because\nthe old fsencoding or paths encoded by the old fsencoding may be cached\nsomewhere. Use\nPYTHONLEGACYWINDOWSFSENCODING\ninstead.\nAdded in version 3.6:\nSee\nPEP 529\nfor more details.\nDeprecated since version 3.13, will be removed in version 3.16:\nUse\nPYTHONLEGACYWINDOWSFSENCODING\ninstead.\nsys.\nstdin\n¶\nsys.\nstdout\n¶\nsys.\nstderr\n¶\nFile objects\nused by the interpreter for standard\ninput, output and errors:\nstdin\nis used for all interactive input (including calls to\ninput()\n);\nstdout\nis used for the output of\nprint()\nand\nexpression\nstatements and for the prompts of\ninput()\n;\nThe interpreter’s own prompts and its error messages go to\nstderr\n.\nThese streams are regular\ntext files\nlike those\nreturned by the\nopen()\nfunction.  Their parameters are chosen as\nfollows:\nThe encoding and error handling are is initialized from\nPyConfig.stdio_encoding\nand\nPyConfig.stdio_errors\n.\nOn Windows, UTF-8 is used for the console device.  Non-character\ndevices such as disk files and pipes use the system locale\nencoding (i.e. the ANSI codepage).  Non-console character\ndevices such as NUL (i.e. where\nisatty()\nreturns\nTrue\n) use the\nvalue of the console input and output codepages at startup,\nrespectively for stdin and stdout/stderr. This defaults to the\nsystem\nlocale encoding\nif the process is not initially attached\nto a console.\nThe special behaviour of the console can be overridden\nby setting the environment variable PYTHONLEGACYWINDOWSSTDIO\nbefore starting Python. In that case, the console codepages are\nused as for any other character device.\nUnder all platforms, you can override the character encoding by\nsetting the\nPYTHONIOENCODING\nenvironment variable before\nstarting Python or by using the new\n-X\nutf8\ncommand\nline option and\nPYTHONUTF8\nenvironment variable.  However,\nfor the Windows console, this only applies when\nPYTHONLEGACYWINDOWSSTDIO\nis also set.\nWhen interactive, the\nstdout\nstream is line-buffered. Otherwise,\nit is block-buffered like regular text files.  The\nstderr\nstream\nis line-buffered in both cases.  You can make both streams unbuffered\nby passing the\n-u\ncommand-line option or setting the\nPYTHONUNBUFFERED\nenvironment variable.\nChanged in version 3.9:\nNon-interactive\nstderr\nis now line-buffered instead of fully\nbuffered.\nNote\nTo write or read binary data from/to the standard streams, use the\nunderlying binary\nbuffer\nobject.  For example, to\nwrite bytes to\nstdout\n, use\nsys.stdout.buffer.write(b'abc')\n.\nHowever, if you are writing a library (and do not control in which\ncontext its code will be executed), be aware that the standard streams\nmay be replaced with file-like objects like\nio.StringIO\nwhich\ndo not support the\nbuffer\nattribute.\nsys.\n__stdin__\n¶\nsys.\n__stdout__\n¶\nsys.\n__stderr__\n¶\nThese objects contain the original values of\nstdin\n,\nstderr\nand\nstdout\nat the start of the program.  They are used during finalization,\nand could be useful to print to the actual standard stream no matter if the\nsys.std*\nobject has been redirected.\nIt can also be used to restore the actual files to known working file objects\nin case they have been overwritten with a broken object.  However, the\npreferred way to do this is to explicitly save the previous stream before\nreplacing it, and restore the saved object.\nNote\nUnder some conditions\nstdin\n,\nstdout\nand\nstderr\nas well as the\noriginal values\n__stdin__\n,\n__stdout__\nand\n__stderr__\ncan be\nNone\n. It is usually the case for Windows GUI apps that aren’t connected\nto a console and Python apps started with\npythonw\n.\nsys.\nstdlib_module_names\n¶\nA frozenset of strings containing the names of standard library modules.\nIt is the same on all platforms. Modules which are not available on\nsome platforms and modules disabled at Python build are also listed.\nAll module kinds are listed: pure Python, built-in, frozen and extension\nmodules. Test modules are excluded.\nFor packages, only the main package is listed: sub-packages and sub-modules\nare not listed. For example, the\nemail\npackage is listed, but the\nemail.mime\nsub-package and the\nemail.message\nsub-module are not\nlisted.\nSee also the\nsys.builtin_module_names\nlist.\nAdded in version 3.10.\nsys.\nthread_info\n¶\nA\nnamed tuple\nholding information about the thread\nimplementation.\nthread_info.\nname\n¶\nThe name of the thread implementation:\n\"nt\"\n: Windows threads\n\"pthread\"\n: POSIX threads\n\"pthread-stubs\"\n: stub POSIX threads\n(on WebAssembly platforms without threading support)\n\"solaris\"\n: Solaris threads\nthread_info.\nlock\n¶\nThe name of the lock implementation:\n\"semaphore\"\n: a lock uses a semaphore\n\"mutex+cond\"\n: a lock uses a mutex and a condition variable\nNone\nif this information is unknown\nthread_info.\nversion\n¶\nThe name and version of the thread library.\nIt is a string, or\nNone\nif this information is unknown.\nAdded in version 3.3.\nsys.\ntracebacklimit\n¶\nWhen this variable is set to an integer value, it determines the maximum number\nof levels of traceback information printed when an unhandled exception occurs.\nThe default is\n1000\n.  When set to\n0\nor less, all traceback information\nis suppressed and only the exception type and value are printed.\nsys.\nunraisablehook\n(\nunraisable\n,\n/\n)\n¶\nHandle an unraisable exception.\nCalled when an exception has occurred but there is no way for Python to\nhandle it. For example, when a destructor raises an exception or during\ngarbage collection (\ngc.collect()\n).\nThe\nunraisable\nargument has the following attributes:\nexc_type\n: Exception type.\nexc_value\n: Exception value, can be\nNone\n.\nexc_traceback\n: Exception traceback, can be\nNone\n.\nerr_msg\n: Error message, can be\nNone\n.\nobject\n: Object causing the exception, can be\nNone\n.\nThe default hook formats\nerr_msg\nand\nobject\nas:\nf'{err_msg}:\n{object!r}'\n; use “Exception ignored in” error message\nif\nerr_msg\nis\nNone\n.\nsys.unraisablehook()\ncan be overridden to control how unraisable\nexceptions are handled.\nSee also\nexcepthook()\nwhich handles uncaught exceptions.\nWarning\nStoring\nexc_value\nusing a custom hook can create a reference cycle.\nIt should be cleared explicitly to break the reference cycle when the\nexception is no longer needed.\nStoring\nobject\nusing a custom hook can resurrect it if it is set to an\nobject which is being finalized. Avoid storing\nobject\nafter the custom\nhook completes to avoid resurrecting objects.\nRaise an auditing event\nsys.unraisablehook\nwith arguments\nhook\n,\nunraisable\nwhen an exception that cannot be handled occurs.\nThe\nunraisable\nobject is the same as what will be passed to the hook.\nIf no hook has been set,\nhook\nmay be\nNone\n.\nAdded in version 3.8.\nsys.\nversion\n¶\nA string containing the version number of the Python interpreter plus additional\ninformation on the build number and compiler used.  This string is displayed\nwhen the interactive interpreter is started.  Do not extract version information\nout of it, rather, use\nversion_info\nand the functions provided by the\nplatform\nmodule.\nsys.\napi_version\n¶\nThe C API version for this interpreter.  Programmers may find this useful when\ndebugging version conflicts between Python and extension modules.\nsys.\nversion_info\n¶\nA tuple containing the five components of the version number:\nmajor\n,\nminor\n,\nmicro\n,\nreleaselevel\n, and\nserial\n.  All values except\nreleaselevel\nare\nintegers; the release level is\n'alpha'\n,\n'beta'\n,\n'candidate'\n, or\n'final'\n.  The\nversion_info\nvalue corresponding to the Python version 2.0\nis\n(2,\n0,\n0,\n'final',\n0)\n.  The components can also be accessed by name,\nso\nsys.version_info[0]\nis equivalent to\nsys.version_info.major\nand so on.\nChanged in version 3.1:\nAdded named component attributes.\nsys.\nwarnoptions\n¶\nThis is an implementation detail of the warnings framework; do not modify this\nvalue.  Refer to the\nwarnings\nmodule for more information on the warnings\nframework.\nsys.\nwinver\n¶\nThe version number used to form registry keys on Windows platforms. This is\nstored as string resource 1000 in the Python DLL.  The value is normally the\nmajor and minor versions of the running Python interpreter.  It is provided in the\nsys\nmodule for informational purposes; modifying this value has no effect on the\nregistry keys used by Python.\nAvailability\n: Windows.\nsys.\nmonitoring\nNamespace containing functions and constants for register callbacks\nand controlling monitoring events.\nSee\nsys.monitoring\nfor details.\nsys.\n_xoptions\n¶\nA dictionary of the various implementation-specific flags passed through\nthe\n-X\ncommand-line option.  Option names are either mapped to\ntheir values, if given explicitly, or to\nTrue\n.  Example:\n$\n./python\n-Xa\n=\nb\n-Xc\nPython 3.2a3+ (py3k, Oct 16 2010, 20:14:50)\n[GCC 4.4.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> sys._xoptions\n{'a': 'b', 'c': True}\nCPython implementation detail:\nThis is a CPython-specific way of accessing options passed through\n-X\n.  Other implementations may export them through other\nmeans, or not at all.\nAdded in version 3.2.\nCitations\n[\nC99\n]\nISO/IEC 9899:1999.  “Programming languages – C.”  A public draft of this standard is available at\nhttps://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\n.\nPrevious topic\nPython Runtime Services\nNext topic\nsys.monitoring\n— Execution event monitoring\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nPython Runtime Services\n»\nsys\n— System-specific parameters and functions\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/library/sys.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12374.2575449
  },
  {
    "title": "os.path — Common pathname manipulations¶",
    "content": "Navigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nFile and Directory Access\n»\nos.path\n— Common pathname manipulations\n|\nTheme\nAuto\nLight\nDark\n|\nos.path\n— Common pathname manipulations\n¶\nSource code:\nLib/genericpath.py\n,\nLib/posixpath.py\n(for POSIX) and\nLib/ntpath.py\n(for Windows).\nThis module implements some useful functions on pathnames. To read or write\nfiles see\nopen()\n, and for accessing the filesystem see the\nos\nmodule. The path parameters can be passed as strings, or bytes, or any object\nimplementing the\nos.PathLike\nprotocol.\nUnlike a Unix shell, Python does not do any\nautomatic\npath expansions.\nFunctions such as\nexpanduser()\nand\nexpandvars()\ncan be invoked\nexplicitly when an application desires shell-like path expansion.  (See also\nthe\nglob\nmodule.)\nSee also\nThe\npathlib\nmodule offers high-level path objects.\nNote\nAll of these functions accept either only bytes or only string objects as\ntheir parameters.  The result is an object of the same type, if a path or\nfile name is returned.\nNote\nSince different operating systems have different path name conventions, there\nare several versions of this module in the standard library.  The\nos.path\nmodule is always the path module suitable for the operating\nsystem Python is running on, and therefore usable for local paths.  However,\nyou can also import and use the individual modules if you want to manipulate\na path that is\nalways\nin one of the different formats.  They all have the\nsame interface:\nposixpath\nfor UNIX-style paths\nntpath\nfor Windows paths\nChanged in version 3.8:\nexists()\n,\nlexists()\n,\nisdir()\n,\nisfile()\n,\nislink()\n, and\nismount()\nnow return\nFalse\ninstead of\nraising an exception for paths that contain characters or bytes\nunrepresentable at the OS level.\nos.path.\nabspath\n(\npath\n)\n¶\nReturn a normalized absolutized version of the pathname\npath\n. On most\nplatforms, this is equivalent to calling the function\nnormpath()\nas\nfollows:\nnormpath(join(os.getcwd(),\npath))\n.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nbasename\n(\npath\n,\n/\n)\n¶\nReturn the base name of pathname\npath\n.  This is the second element of the\npair returned by passing\npath\nto the function\nsplit()\n.  Note that\nthe result of this function is different\nfrom the Unix\nbasename\nprogram; where\nbasename\nfor\n'/foo/bar/'\nreturns\n'bar'\n, the\nbasename()\nfunction returns an\nempty string (\n''\n).\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\ncommonpath\n(\npaths\n)\n¶\nReturn the longest common sub-path of each pathname in the iterable\npaths\n.  Raise\nValueError\nif\npaths\ncontain both absolute\nand relative pathnames, if\npaths\nare on different drives, or\nif\npaths\nis empty.  Unlike\ncommonprefix()\n, this returns a\nvalid path.\nAdded in version 3.5.\nChanged in version 3.6:\nAccepts a sequence of\npath-like objects\n.\nChanged in version 3.13:\nAny iterable can now be passed, rather than just sequences.\nos.path.\ncommonprefix\n(\nlist\n,\n/\n)\n¶\nReturn the longest path prefix (taken character-by-character) that is a\nprefix of all paths in\nlist\n.  If\nlist\nis empty, return the empty string\n(\n''\n).\nNote\nThis function may return invalid paths because it works a\ncharacter at a time.  To obtain a valid path, see\ncommonpath()\n.\n>>>\nos\n.\npath\n.\ncommonprefix\n([\n'/usr/lib'\n,\n'/usr/local/lib'\n])\n'/usr/l'\n>>>\nos\n.\npath\n.\ncommonpath\n([\n'/usr/lib'\n,\n'/usr/local/lib'\n])\n'/usr'\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\ndirname\n(\npath\n,\n/\n)\n¶\nReturn the directory name of pathname\npath\n.  This is the first element of\nthe pair returned by passing\npath\nto the function\nsplit()\n.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nexists\n(\npath\n)\n¶\nReturn\nTrue\nif\npath\nrefers to an existing path or an open\nfile descriptor.  Returns\nFalse\nfor broken symbolic links.  On\nsome platforms, this function may return\nFalse\nif permission is\nnot granted to execute\nos.stat()\non the requested file, even\nif the\npath\nphysically exists.\nChanged in version 3.3:\npath\ncan now be an integer:\nTrue\nis returned if it is an\nopen file descriptor,\nFalse\notherwise.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nlexists\n(\npath\n)\n¶\nReturn\nTrue\nif\npath\nrefers to an existing path, including\nbroken symbolic links.   Equivalent to\nexists()\non platforms lacking\nos.lstat()\n.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nexpanduser\n(\npath\n)\n¶\nOn Unix and Windows, return the argument with an initial component of\n~\nor\n~user\nreplaced by that\nuser\n’s home directory.\nOn Unix, an initial\n~\nis replaced by the environment variable\nHOME\nif it is set; otherwise the current user’s home directory is looked up in the\npassword directory through the built-in module\npwd\n. An initial\n~user\nis looked up directly in the password directory.\nOn Windows,\nUSERPROFILE\nwill be used if set, otherwise a combination\nof\nHOMEPATH\nand\nHOMEDRIVE\nwill be used.  An initial\n~user\nis handled by checking that the last directory component of the current\nuser’s home directory matches\nUSERNAME\n, and replacing it if so.\nIf the expansion fails or if the path does not begin with a tilde, the path is\nreturned unchanged.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nChanged in version 3.8:\nNo longer uses\nHOME\non Windows.\nos.path.\nexpandvars\n(\npath\n)\n¶\nReturn the argument with environment variables expanded.  Substrings of the form\n$name\nor\n${name}\nare replaced by the value of environment variable\nname\n.  Malformed variable names and references to non-existing variables are\nleft unchanged.\nOn Windows,\n%name%\nexpansions are supported in addition to\n$name\nand\n${name}\n.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\ngetatime\n(\npath\n,\n/\n)\n¶\nReturn the time of last access of\npath\n.  The return value is a floating-point number giving\nthe number of seconds since the epoch (see the\ntime\nmodule).  Raise\nOSError\nif the file does not exist or is inaccessible.\nos.path.\ngetmtime\n(\npath\n,\n/\n)\n¶\nReturn the time of last modification of\npath\n.  The return value is a floating-point number\ngiving the number of seconds since the epoch (see the\ntime\nmodule).\nRaise\nOSError\nif the file does not exist or is inaccessible.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\ngetctime\n(\npath\n,\n/\n)\n¶\nReturn the system’s ctime which, on some systems (like Unix) is the time of the\nlast metadata change, and, on others (like Windows), is the creation time for\npath\n.\nThe return value is a number giving the number of seconds since the epoch (see\nthe\ntime\nmodule).  Raise\nOSError\nif the file does not exist or\nis inaccessible.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\ngetsize\n(\npath\n,\n/\n)\n¶\nReturn the size, in bytes, of\npath\n.  Raise\nOSError\nif the file does\nnot exist or is inaccessible.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nisabs\n(\npath\n,\n/\n)\n¶\nReturn\nTrue\nif\npath\nis an absolute pathname.  On Unix, that means it\nbegins with a slash, on Windows that it begins with two (back)slashes, or a\ndrive letter, colon, and (back)slash together.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nChanged in version 3.13:\nOn Windows, returns\nFalse\nif the given path starts with exactly one\n(back)slash.\nos.path.\nisfile\n(\npath\n)\n¶\nReturn\nTrue\nif\npath\nis an\nexisting\nregular file.\nThis follows symbolic links, so both\nislink()\nand\nisfile()\ncan\nbe true for the same path.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nisdir\n(\npath\n,\n/\n)\n¶\nReturn\nTrue\nif\npath\nis an\nexisting\ndirectory.  This\nfollows symbolic links, so both\nislink()\nand\nisdir()\ncan be true\nfor the same path.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nisjunction\n(\npath\n)\n¶\nReturn\nTrue\nif\npath\nrefers to an\nexisting\ndirectory\nentry that is a junction.  Always return\nFalse\nif junctions are not\nsupported on the current platform.\nAdded in version 3.12.\nos.path.\nislink\n(\npath\n)\n¶\nReturn\nTrue\nif\npath\nrefers to an\nexisting\ndirectory\nentry that is a symbolic link.  Always\nFalse\nif symbolic links are not\nsupported by the Python runtime.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nismount\n(\npath\n)\n¶\nReturn\nTrue\nif pathname\npath\nis a\nmount point\n: a point in a\nfile system where a different file system has been mounted.  On POSIX, the\nfunction checks whether\npath\n’s parent,\npath\n/..\n, is on a different\ndevice than\npath\n, or whether\npath\n/..\nand\npath\npoint to the same\ni-node on the same device — this should detect mount points for all Unix\nand POSIX variants.  It is not able to reliably detect bind mounts on the\nsame filesystem. On Linux systems, it will always return\nTrue\nfor btrfs\nsubvolumes, even if they aren’t mount points. On Windows, a drive letter root\nand a share UNC are always mount points, and for any other path\nGetVolumePathName\nis called to see if it is different from the input path.\nChanged in version 3.4:\nAdded support for detecting non-root mount points on Windows.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nisdevdrive\n(\npath\n)\n¶\nReturn\nTrue\nif pathname\npath\nis located on a Windows Dev Drive.\nA Dev Drive is optimized for developer scenarios, and offers faster\nperformance for reading and writing files. It is recommended for use for\nsource code, temporary build directories, package caches, and other\nIO-intensive operations.\nMay raise an error for an invalid path, for example, one without a\nrecognizable drive, but returns\nFalse\non platforms that do not support\nDev Drives. See\nthe Windows documentation\nfor information on enabling and creating Dev Drives.\nAdded in version 3.12.\nChanged in version 3.13:\nThe function is now available on all platforms, and will always return\nFalse\non those that have no support for Dev Drives\nos.path.\nisreserved\n(\npath\n)\n¶\nReturn\nTrue\nif\npath\nis a reserved pathname on the current system.\nOn Windows, reserved filenames include those that end with a space or dot;\nthose that contain colons (i.e. file streams such as “name:stream”),\nwildcard characters (i.e.\n'*?\"<>'\n), pipe, or ASCII control characters;\nas well as DOS device names such as “NUL”, “CON”, “CONIN$”, “CONOUT$”,\n“AUX”, “PRN”, “COM1”, and “LPT1”.\nNote\nThis function approximates rules for reserved paths on most Windows\nsystems. These rules change over time in various Windows releases.\nThis function may be updated in future Python releases as changes to\nthe rules become broadly available.\nAvailability\n: Windows.\nAdded in version 3.13.\nos.path.\njoin\n(\npath\n,\n/\n,\n*\npaths\n)\n¶\nJoin one or more path segments intelligently.  The return value is the\nconcatenation of\npath\nand all members of\n*paths\n, with exactly one\ndirectory separator following each non-empty part, except the last. That is,\nthe result will only end in a separator if the last part is either empty or\nends in a separator. If a segment is an absolute path (which on Windows\nrequires both a drive and a root), then all previous segments are ignored and\njoining continues from the absolute path segment.\nOn Windows, the drive is not reset when a rooted path segment (e.g.,\nr'\\foo'\n) is encountered. If a segment is on a different drive or is an\nabsolute path, all previous segments are ignored and the drive is reset. Note\nthat since there is a current directory for each drive,\nos.path.join(\"c:\",\n\"foo\")\nrepresents a path relative to the current\ndirectory on drive\nC:\n(\nc:foo\n), not\nc:\\foo\n.\nChanged in version 3.6:\nAccepts a\npath-like object\nfor\npath\nand\npaths\n.\nos.path.\nnormcase\n(\npath\n,\n/\n)\n¶\nNormalize the case of a pathname.  On Windows, convert all characters in the\npathname to lowercase, and also convert forward slashes to backward slashes.\nOn other operating systems, return the path unchanged.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nnormpath\n(\npath\n)\n¶\nNormalize a pathname by collapsing redundant separators and up-level\nreferences so that\nA//B\n,\nA/B/\n,\nA/./B\nand\nA/foo/../B\nall\nbecome\nA/B\n.  This string manipulation may change the meaning of a path\nthat contains symbolic links.  On Windows, it converts forward slashes to\nbackward slashes. To normalize case, use\nnormcase()\n.\nNote\nOn POSIX systems, in accordance with\nIEEE Std 1003.1 2013 Edition; 4.13\nPathname Resolution\n,\nif a pathname begins with exactly two slashes, the first component\nfollowing the leading characters may be interpreted in an implementation-defined\nmanner, although more than two leading characters shall be treated as a\nsingle character.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nrealpath\n(\npath\n,\n/\n,\n*\n,\nstrict\n=\nFalse\n)\n¶\nReturn the canonical path of the specified filename, eliminating any symbolic\nlinks encountered in the path (if they are supported by the operating\nsystem). On Windows, this function will also resolve MS-DOS (also called 8.3)\nstyle names such as\nC:\\\\PROGRA~1\nto\nC:\\\\Program\nFiles\n.\nBy default, the path is evaluated up to the first component that does not\nexist, is a symlink loop, or whose evaluation raises\nOSError\n.\nAll such components are appended unchanged to the existing part of the path.\nSome errors that are handled this way include “access denied”, “not a\ndirectory”, or “bad argument to internal function”. Thus, the\nresulting path may be missing or inaccessible, may still contain\nlinks or loops, and may traverse non-directories.\nThis behavior can be modified by keyword arguments:\nIf\nstrict\nis\nTrue\n, the first error encountered when evaluating the path is\nre-raised.\nIn particular,\nFileNotFoundError\nis raised if\npath\ndoes not exist,\nor another\nOSError\nif it is otherwise inaccessible.\nIf\nstrict\nis\nos.path.ALLOW_MISSING\n, errors other than\nFileNotFoundError\nare re-raised (as with\nstrict=True\n).\nThus, the returned path will not contain any symbolic links, but the named\nfile and some of its parent directories may be missing.\nNote\nThis function emulates the operating system’s procedure for making a path\ncanonical, which differs slightly between Windows and UNIX with respect\nto how links and subsequent path components interact.\nOperating system APIs make paths canonical as needed, so it’s not\nnormally necessary to call this function.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nChanged in version 3.8:\nSymbolic links and junctions are now resolved on Windows.\nChanged in version 3.10:\nThe\nstrict\nparameter was added.\nChanged in version 3.13.4:\nThe\nALLOW_MISSING\nvalue for the\nstrict\nparameter\nwas added.\nos.path.\nALLOW_MISSING\n¶\nSpecial value used for the\nstrict\nargument in\nrealpath()\n.\nAdded in version 3.13.4.\nos.path.\nrelpath\n(\npath\n,\nstart\n=\nos.curdir\n)\n¶\nReturn a relative filepath to\npath\neither from the current directory or\nfrom an optional\nstart\ndirectory.  This is a path computation:  the\nfilesystem is not accessed to confirm the existence or nature of\npath\nor\nstart\n.  On Windows,\nValueError\nis raised when\npath\nand\nstart\nare on different drives.\nstart\ndefaults to\nos.curdir\n.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nsamefile\n(\npath1\n,\npath2\n,\n/\n)\n¶\nReturn\nTrue\nif both pathname arguments refer to the same file or directory.\nThis is determined by the device number and i-node number and raises an\nexception if an\nos.stat()\ncall on either pathname fails.\nChanged in version 3.2:\nAdded Windows support.\nChanged in version 3.4:\nWindows now uses the same implementation as all other platforms.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nsameopenfile\n(\nfp1\n,\nfp2\n)\n¶\nReturn\nTrue\nif the file descriptors\nfp1\nand\nfp2\nrefer to the same file.\nChanged in version 3.2:\nAdded Windows support.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nsamestat\n(\nstat1\n,\nstat2\n,\n/\n)\n¶\nReturn\nTrue\nif the stat tuples\nstat1\nand\nstat2\nrefer to the same file.\nThese structures may have been returned by\nos.fstat()\n,\nos.lstat()\n, or\nos.stat()\n.  This function implements the\nunderlying comparison used by\nsamefile()\nand\nsameopenfile()\n.\nChanged in version 3.4:\nAdded Windows support.\nos.path.\nsplit\n(\npath\n,\n/\n)\n¶\nSplit the pathname\npath\ninto a pair,\n(head,\ntail)\nwhere\ntail\nis the\nlast pathname component and\nhead\nis everything leading up to that.  The\ntail\npart will never contain a slash; if\npath\nends in a slash,\ntail\nwill be empty.  If there is no slash in\npath\n,\nhead\nwill be empty.  If\npath\nis empty, both\nhead\nand\ntail\nare empty.  Trailing slashes are\nstripped from\nhead\nunless it is the root (one or more slashes only).  In\nall cases,\njoin(head,\ntail)\nreturns a path to the same location as\npath\n(but the strings may differ).  Also see the functions\ndirname()\nand\nbasename()\n.\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nsplitdrive\n(\npath\n,\n/\n)\n¶\nSplit the pathname\npath\ninto a pair\n(drive,\ntail)\nwhere\ndrive\nis either\na mount point or the empty string.  On systems which do not use drive\nspecifications,\ndrive\nwill always be the empty string.  In all cases,\ndrive\n+\ntail\nwill be the same as\npath\n.\nOn Windows, splits a pathname into drive/UNC sharepoint and relative path.\nIf the path contains a drive letter, drive will contain everything\nup to and including the colon:\n>>>\nsplitdrive\n(\n\"c:/dir\"\n)\n(\"c:\", \"/dir\")\nIf the path contains a UNC path, drive will contain the host name\nand share:\n>>>\nsplitdrive\n(\n\"//host/computer/dir\"\n)\n(\"//host/computer\", \"/dir\")\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nsplitroot\n(\npath\n,\n/\n)\n¶\nSplit the pathname\npath\ninto a 3-item tuple\n(drive,\nroot,\ntail)\nwhere\ndrive\nis a device name or mount point,\nroot\nis a string of separators\nafter the drive, and\ntail\nis everything after the root. Any of these\nitems may be the empty string. In all cases,\ndrive\n+\nroot\n+\ntail\nwill\nbe the same as\npath\n.\nOn POSIX systems,\ndrive\nis always empty. The\nroot\nmay be empty (if\npath\nis\nrelative), a single forward slash (if\npath\nis absolute), or two forward slashes\n(implementation-defined per\nIEEE Std 1003.1-2017; 4.13 Pathname Resolution\n.)\nFor example:\n>>>\nsplitroot\n(\n'/home/sam'\n)\n('', '/', 'home/sam')\n>>>\nsplitroot\n(\n'//home/sam'\n)\n('', '//', 'home/sam')\n>>>\nsplitroot\n(\n'///home/sam'\n)\n('', '/', '//home/sam')\nOn Windows,\ndrive\nmay be empty, a drive-letter name, a UNC share, or a device\nname. The\nroot\nmay be empty, a forward slash, or a backward slash. For\nexample:\n>>>\nsplitroot\n(\n'C:/Users/Sam'\n)\n('C:', '/', 'Users/Sam')\n>>>\nsplitroot\n(\n'//Server/Share/Users/Sam'\n)\n('//Server/Share', '/', 'Users/Sam')\nAdded in version 3.12.\nos.path.\nsplitext\n(\npath\n,\n/\n)\n¶\nSplit the pathname\npath\ninto a pair\n(root,\next)\nsuch that\nroot\n+\next\n==\npath\n, and the extension,\next\n, is empty or begins with a period and contains at\nmost one period.\nIf the path contains no extension,\next\nwill be\n''\n:\n>>>\nsplitext\n(\n'bar'\n)\n('bar', '')\nIf the path contains an extension, then\next\nwill be set to this extension,\nincluding the leading period. Note that previous periods will be ignored:\n>>>\nsplitext\n(\n'foo.bar.exe'\n)\n('foo.bar', '.exe')\n>>>\nsplitext\n(\n'/foo/bar.exe'\n)\n('/foo/bar', '.exe')\nLeading periods of the last component of the path are considered to\nbe part of the root:\n>>>\nsplitext\n(\n'.cshrc'\n)\n('.cshrc', '')\n>>>\nsplitext\n(\n'/foo/....jpg'\n)\n('/foo/....jpg', '')\nChanged in version 3.6:\nAccepts a\npath-like object\n.\nos.path.\nsupports_unicode_filenames\n¶\nTrue\nif arbitrary Unicode strings can be used as file names (within limitations\nimposed by the file system).\nPrevious topic\npathlib\n— Object-oriented filesystem paths\nNext topic\nstat\n— Interpreting\nstat()\nresults\nThis page\nReport a bug\nShow source\n«\nNavigation\nindex\nmodules\n|\nnext\n|\nprevious\n|\nPython\n»\n3.13.5 Documentation\n»\nThe Python Standard Library\n»\nFile and Directory Access\n»\nos.path\n— Common pathname manipulations\n|\nTheme\nAuto\nLight\nDark\n|\n©\nCopyright\n2001-2025, Python Software Foundation.\nThis page is licensed under the Python Software Foundation License Version 2.\nExamples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\nSee\nHistory and License\nfor more information.\nThe Python Software Foundation is a non-profit corporation.\nPlease donate.\nLast updated on Jul 28, 2025 (16:16 UTC).\nFound a bug\n?\nCreated using\nSphinx\n8.2.3.",
    "url": "https://docs.python.org/3/library/os.path.html",
    "source": "python",
    "doc_type": "api_reference",
    "scraped_at": 12375.2393533
  }
]